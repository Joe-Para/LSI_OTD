
SPI_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022f8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20400000  20400000  000122f8  2**0
                  CONTENTS
  2 .bss          00000038  20400000  20400000  00020000  2**2
                  ALLOC
  3 .heap         00000200  20400038  20400038  00020000  2**0
                  ALLOC
  4 .stack        00000400  20400238  20400238  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000122f8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00012326  2**0
                  CONTENTS, READONLY
  7 .debug_info   00008b15  00000000  00000000  0001237f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001492  00000000  00000000  0001ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004912  00000000  00000000  0001c326  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000860  00000000  00000000  00020c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000790  00000000  00000000  00021498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003733e  00000000  00000000  00021c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000b5b7  00000000  00000000  00058f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0011d085  00000000  00000000  0006451d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021f4  00000000  00000000  001815a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	38 06 40 20 e5 01 40 00 69 02 40 00 69 02 40 00     8.@ ..@.i.@.i.@.
  400010:	69 02 40 00 69 02 40 00 69 02 40 00 00 00 00 00     i.@.i.@.i.@.....
	...
  40002c:	69 02 40 00 69 02 40 00 00 00 00 00 69 02 40 00     i.@.i.@.....i.@.
  40003c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40004c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40005c:	69 02 40 00 69 02 40 00 00 00 00 00 69 02 40 00     i.@.i.@.....i.@.
  40006c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40007c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40008c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40009c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000ac:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000bc:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000cc:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000dc:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000ec:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  4000fc:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40010c:	69 02 40 00 69 02 40 00 00 00 00 00 00 00 00 00     i.@.i.@.........
  40011c:	00 00 00 00 69 02 40 00 69 02 40 00 69 02 40 00     ....i.@.i.@.i.@.
  40012c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40013c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40014c:	69 02 40 00 69 02 40 00 69 02 40 00 69 02 40 00     i.@.i.@.i.@.i.@.
  40015c:	69 02 40 00 69 02 40 00 69 02 40 00                 i.@.i.@.i.@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400000 	.word	0x20400000
  400184:	00000000 	.word	0x00000000
  400188:	004022f8 	.word	0x004022f8

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004022f8 	.word	0x004022f8
  4001c8:	20400004 	.word	0x20400004
  4001cc:	004022f8 	.word	0x004022f8
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	af00      	add	r7, sp, #0
	system_init();
  4001d8:	4b01      	ldr	r3, [pc, #4]	; (4001e0 <atmel_start_init+0xc>)
  4001da:	4798      	blx	r3
}
  4001dc:	bf00      	nop
  4001de:	bd80      	pop	{r7, pc}
  4001e0:	0040082d 	.word	0x0040082d

004001e4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	b082      	sub	sp, #8
  4001e8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4001ea:	4b16      	ldr	r3, [pc, #88]	; (400244 <Reset_Handler+0x60>)
  4001ec:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
  4001ee:	4b16      	ldr	r3, [pc, #88]	; (400248 <Reset_Handler+0x64>)
  4001f0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
  4001f2:	687a      	ldr	r2, [r7, #4]
  4001f4:	683b      	ldr	r3, [r7, #0]
  4001f6:	429a      	cmp	r2, r3
  4001f8:	d00c      	beq.n	400214 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4001fa:	e007      	b.n	40020c <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4001fc:	683b      	ldr	r3, [r7, #0]
  4001fe:	1d1a      	adds	r2, r3, #4
  400200:	603a      	str	r2, [r7, #0]
  400202:	687a      	ldr	r2, [r7, #4]
  400204:	1d11      	adds	r1, r2, #4
  400206:	6079      	str	r1, [r7, #4]
  400208:	6812      	ldr	r2, [r2, #0]
  40020a:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  40020c:	683b      	ldr	r3, [r7, #0]
  40020e:	4a0f      	ldr	r2, [pc, #60]	; (40024c <Reset_Handler+0x68>)
  400210:	4293      	cmp	r3, r2
  400212:	d3f3      	bcc.n	4001fc <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  400214:	4b0e      	ldr	r3, [pc, #56]	; (400250 <Reset_Handler+0x6c>)
  400216:	603b      	str	r3, [r7, #0]
  400218:	e004      	b.n	400224 <Reset_Handler+0x40>
                *pDest++ = 0;
  40021a:	683b      	ldr	r3, [r7, #0]
  40021c:	1d1a      	adds	r2, r3, #4
  40021e:	603a      	str	r2, [r7, #0]
  400220:	2200      	movs	r2, #0
  400222:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  400224:	683b      	ldr	r3, [r7, #0]
  400226:	4a0b      	ldr	r2, [pc, #44]	; (400254 <Reset_Handler+0x70>)
  400228:	4293      	cmp	r3, r2
  40022a:	d3f6      	bcc.n	40021a <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  40022c:	4b0a      	ldr	r3, [pc, #40]	; (400258 <Reset_Handler+0x74>)
  40022e:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400230:	4a0a      	ldr	r2, [pc, #40]	; (40025c <Reset_Handler+0x78>)
  400232:	687b      	ldr	r3, [r7, #4]
  400234:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400238:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
  40023a:	4b09      	ldr	r3, [pc, #36]	; (400260 <Reset_Handler+0x7c>)
  40023c:	4798      	blx	r3

        /* Branch to main function */
        main();
  40023e:	4b09      	ldr	r3, [pc, #36]	; (400264 <Reset_Handler+0x80>)
  400240:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  400242:	e7fe      	b.n	400242 <Reset_Handler+0x5e>
  400244:	004022f8 	.word	0x004022f8
  400248:	20400000 	.word	0x20400000
  40024c:	20400000 	.word	0x20400000
  400250:	20400000 	.word	0x20400000
  400254:	20400038 	.word	0x20400038
  400258:	00400000 	.word	0x00400000
  40025c:	e000ed00 	.word	0xe000ed00
  400260:	004021f1 	.word	0x004021f1
  400264:	00402051 	.word	0x00402051

00400268 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400268:	b480      	push	{r7}
  40026a:	af00      	add	r7, sp, #0
        while (1) {
  40026c:	e7fe      	b.n	40026c <Dummy_Handler+0x4>

0040026e <hri_matrix_set_CCFG_SYSIO_reg>:
	tmp = (tmp & CCFG_SYSIO_CAN1DMABA_Msk) >> CCFG_SYSIO_CAN1DMABA_Pos;
	return tmp;
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
  40026e:	b480      	push	{r7}
  400270:	b083      	sub	sp, #12
  400272:	af00      	add	r7, sp, #0
  400274:	6078      	str	r0, [r7, #4]
  400276:	6039      	str	r1, [r7, #0]
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400278:	687b      	ldr	r3, [r7, #4]
  40027a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  40027e:	683b      	ldr	r3, [r7, #0]
  400280:	431a      	orrs	r2, r3
  400282:	687b      	ldr	r3, [r7, #4]
  400284:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	MATRIX_CRITICAL_SECTION_LEAVE();
}
  400288:	bf00      	nop
  40028a:	370c      	adds	r7, #12
  40028c:	46bd      	mov	sp, r7
  40028e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400292:	4770      	bx	lr

00400294 <hri_pio_set_PSR_reg>:
{
	((Pio *)hw)->PIO_PDR = PIO_PSR_P31;
}

static inline void hri_pio_set_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  400294:	b480      	push	{r7}
  400296:	b083      	sub	sp, #12
  400298:	af00      	add	r7, sp, #0
  40029a:	6078      	str	r0, [r7, #4]
  40029c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  40029e:	687b      	ldr	r3, [r7, #4]
  4002a0:	683a      	ldr	r2, [r7, #0]
  4002a2:	601a      	str	r2, [r3, #0]
}
  4002a4:	bf00      	nop
  4002a6:	370c      	adds	r7, #12
  4002a8:	46bd      	mov	sp, r7
  4002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002ae:	4770      	bx	lr

004002b0 <hri_pio_clear_PSR_reg>:
	((Pio *)hw)->PIO_PER = data;
	((Pio *)hw)->PIO_PDR = ~data;
}

static inline void hri_pio_clear_PSR_reg(const void *const hw, hri_pio_psr_reg_t mask)
{
  4002b0:	b480      	push	{r7}
  4002b2:	b083      	sub	sp, #12
  4002b4:	af00      	add	r7, sp, #0
  4002b6:	6078      	str	r0, [r7, #4]
  4002b8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  4002ba:	687b      	ldr	r3, [r7, #4]
  4002bc:	683a      	ldr	r2, [r7, #0]
  4002be:	605a      	str	r2, [r3, #4]
}
  4002c0:	bf00      	nop
  4002c2:	370c      	adds	r7, #12
  4002c4:	46bd      	mov	sp, r7
  4002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002ca:	4770      	bx	lr

004002cc <hri_pio_set_OSR_reg>:
{
	((Pio *)hw)->PIO_ODR = PIO_OSR_P31;
}

static inline void hri_pio_set_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
  4002d4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  4002d6:	687b      	ldr	r3, [r7, #4]
  4002d8:	683a      	ldr	r2, [r7, #0]
  4002da:	611a      	str	r2, [r3, #16]
}
  4002dc:	bf00      	nop
  4002de:	370c      	adds	r7, #12
  4002e0:	46bd      	mov	sp, r7
  4002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002e6:	4770      	bx	lr

004002e8 <hri_pio_clear_OSR_reg>:
	((Pio *)hw)->PIO_OER = data;
	((Pio *)hw)->PIO_ODR = ~data;
}

static inline void hri_pio_clear_OSR_reg(const void *const hw, hri_pio_osr_reg_t mask)
{
  4002e8:	b480      	push	{r7}
  4002ea:	b083      	sub	sp, #12
  4002ec:	af00      	add	r7, sp, #0
  4002ee:	6078      	str	r0, [r7, #4]
  4002f0:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  4002f2:	687b      	ldr	r3, [r7, #4]
  4002f4:	683a      	ldr	r2, [r7, #0]
  4002f6:	615a      	str	r2, [r3, #20]
}
  4002f8:	bf00      	nop
  4002fa:	370c      	adds	r7, #12
  4002fc:	46bd      	mov	sp, r7
  4002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400302:	4770      	bx	lr

00400304 <hri_pio_set_ODSR_reg>:
{
	((Pio *)hw)->PIO_CODR = PIO_ODSR_P31;
}

static inline void hri_pio_set_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400304:	b480      	push	{r7}
  400306:	b083      	sub	sp, #12
  400308:	af00      	add	r7, sp, #0
  40030a:	6078      	str	r0, [r7, #4]
  40030c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  40030e:	687b      	ldr	r3, [r7, #4]
  400310:	683a      	ldr	r2, [r7, #0]
  400312:	631a      	str	r2, [r3, #48]	; 0x30
}
  400314:	bf00      	nop
  400316:	370c      	adds	r7, #12
  400318:	46bd      	mov	sp, r7
  40031a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40031e:	4770      	bx	lr

00400320 <hri_pio_clear_ODSR_reg>:
	((Pio *)hw)->PIO_SODR = data;
	((Pio *)hw)->PIO_CODR = ~data;
}

static inline void hri_pio_clear_ODSR_reg(const void *const hw, hri_pio_odsr_reg_t mask)
{
  400320:	b480      	push	{r7}
  400322:	b083      	sub	sp, #12
  400324:	af00      	add	r7, sp, #0
  400326:	6078      	str	r0, [r7, #4]
  400328:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  40032a:	687b      	ldr	r3, [r7, #4]
  40032c:	683a      	ldr	r2, [r7, #0]
  40032e:	635a      	str	r2, [r3, #52]	; 0x34
}
  400330:	bf00      	nop
  400332:	370c      	adds	r7, #12
  400334:	46bd      	mov	sp, r7
  400336:	f85d 7b04 	ldr.w	r7, [sp], #4
  40033a:	4770      	bx	lr

0040033c <hri_pio_set_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] ^= PIO_ABCDSR_P31;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  40033c:	b480      	push	{r7}
  40033e:	b085      	sub	sp, #20
  400340:	af00      	add	r7, sp, #0
  400342:	60f8      	str	r0, [r7, #12]
  400344:	460b      	mov	r3, r1
  400346:	607a      	str	r2, [r7, #4]
  400348:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40034a:	7afa      	ldrb	r2, [r7, #11]
  40034c:	7af9      	ldrb	r1, [r7, #11]
  40034e:	68fb      	ldr	r3, [r7, #12]
  400350:	311c      	adds	r1, #28
  400352:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400356:	687b      	ldr	r3, [r7, #4]
  400358:	4319      	orrs	r1, r3
  40035a:	68fb      	ldr	r3, [r7, #12]
  40035c:	321c      	adds	r2, #28
  40035e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400362:	bf00      	nop
  400364:	3714      	adds	r7, #20
  400366:	46bd      	mov	sp, r7
  400368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40036c:	4770      	bx	lr

0040036e <hri_pio_clear_ABCDSR_reg>:
	((Pio *)hw)->PIO_ABCDSR[index] = data;
	PIO_CRITICAL_SECTION_LEAVE();
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
  40036e:	b480      	push	{r7}
  400370:	b085      	sub	sp, #20
  400372:	af00      	add	r7, sp, #0
  400374:	60f8      	str	r0, [r7, #12]
  400376:	460b      	mov	r3, r1
  400378:	607a      	str	r2, [r7, #4]
  40037a:	72fb      	strb	r3, [r7, #11]
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40037c:	7afa      	ldrb	r2, [r7, #11]
  40037e:	7af9      	ldrb	r1, [r7, #11]
  400380:	68fb      	ldr	r3, [r7, #12]
  400382:	311c      	adds	r1, #28
  400384:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400388:	687b      	ldr	r3, [r7, #4]
  40038a:	43db      	mvns	r3, r3
  40038c:	4019      	ands	r1, r3
  40038e:	68fb      	ldr	r3, [r7, #12]
  400390:	321c      	adds	r2, #28
  400392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	PIO_CRITICAL_SECTION_LEAVE();
}
  400396:	bf00      	nop
  400398:	3714      	adds	r7, #20
  40039a:	46bd      	mov	sp, r7
  40039c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003a0:	4770      	bx	lr

004003a2 <hri_pmc_set_PCSR0_reg>:
{
	((Pmc *)hw)->PMC_PCDR0 = PMC_PCSR0_PID31;
}

static inline void hri_pmc_set_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  4003a2:	b480      	push	{r7}
  4003a4:	b083      	sub	sp, #12
  4003a6:	af00      	add	r7, sp, #0
  4003a8:	6078      	str	r0, [r7, #4]
  4003aa:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	683a      	ldr	r2, [r7, #0]
  4003b0:	611a      	str	r2, [r3, #16]
}
  4003b2:	bf00      	nop
  4003b4:	370c      	adds	r7, #12
  4003b6:	46bd      	mov	sp, r7
  4003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003bc:	4770      	bx	lr

004003be <hri_pmc_get_PCSR0_reg>:

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
  4003be:	b480      	push	{r7}
  4003c0:	b085      	sub	sp, #20
  4003c2:	af00      	add	r7, sp, #0
  4003c4:	6078      	str	r0, [r7, #4]
  4003c6:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003c8:	687b      	ldr	r3, [r7, #4]
  4003ca:	699b      	ldr	r3, [r3, #24]
  4003cc:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  4003ce:	68fa      	ldr	r2, [r7, #12]
  4003d0:	683b      	ldr	r3, [r7, #0]
  4003d2:	4013      	ands	r3, r2
  4003d4:	60fb      	str	r3, [r7, #12]
	return tmp;
  4003d6:	68fb      	ldr	r3, [r7, #12]
}
  4003d8:	4618      	mov	r0, r3
  4003da:	3714      	adds	r7, #20
  4003dc:	46bd      	mov	sp, r7
  4003de:	f85d 7b04 	ldr.w	r7, [sp], #4
  4003e2:	4770      	bx	lr

004003e4 <hri_pmc_set_PCSR1_reg>:
{
	((Pmc *)hw)->PMC_PCDR1 = PMC_PCSR1_PID60;
}

static inline void hri_pmc_set_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  4003e4:	b480      	push	{r7}
  4003e6:	b083      	sub	sp, #12
  4003e8:	af00      	add	r7, sp, #0
  4003ea:	6078      	str	r0, [r7, #4]
  4003ec:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->PMC_PCER1 = mask;
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	683a      	ldr	r2, [r7, #0]
  4003f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
  4003f6:	bf00      	nop
  4003f8:	370c      	adds	r7, #12
  4003fa:	46bd      	mov	sp, r7
  4003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400400:	4770      	bx	lr

00400402 <hri_pmc_get_PCSR1_reg>:

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
  400402:	b480      	push	{r7}
  400404:	b085      	sub	sp, #20
  400406:	af00      	add	r7, sp, #0
  400408:	6078      	str	r0, [r7, #4]
  40040a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40040c:	687b      	ldr	r3, [r7, #4]
  40040e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  400412:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  400414:	68fa      	ldr	r2, [r7, #12]
  400416:	683b      	ldr	r3, [r7, #0]
  400418:	4013      	ands	r3, r2
  40041a:	60fb      	str	r3, [r7, #12]
	return tmp;
  40041c:	68fb      	ldr	r3, [r7, #12]
}
  40041e:	4618      	mov	r0, r3
  400420:	3714      	adds	r7, #20
  400422:	46bd      	mov	sp, r7
  400424:	f85d 7b04 	ldr.w	r7, [sp], #4
  400428:	4770      	bx	lr

0040042a <hri_pmc_write_PCR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pmc_write_PCR_reg(const void *const hw, hri_pmc_pcr_reg_t data)
{
  40042a:	b480      	push	{r7}
  40042c:	b083      	sub	sp, #12
  40042e:	af00      	add	r7, sp, #0
  400430:	6078      	str	r0, [r7, #4]
  400432:	6039      	str	r1, [r7, #0]
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->PMC_PCR = data;
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	683a      	ldr	r2, [r7, #0]
  400438:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	PMC_CRITICAL_SECTION_LEAVE();
}
  40043c:	bf00      	nop
  40043e:	370c      	adds	r7, #12
  400440:	46bd      	mov	sp, r7
  400442:	f85d 7b04 	ldr.w	r7, [sp], #4
  400446:	4770      	bx	lr

00400448 <hri_pmc_read_PCR_reg>:
	((Pmc *)hw)->PMC_PCR ^= mask;
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_pcr_reg_t hri_pmc_read_PCR_reg(const void *const hw)
{
  400448:	b480      	push	{r7}
  40044a:	b083      	sub	sp, #12
  40044c:	af00      	add	r7, sp, #0
  40044e:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->PMC_PCR;
  400450:	687b      	ldr	r3, [r7, #4]
  400452:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
}
  400456:	4618      	mov	r0, r3
  400458:	370c      	adds	r7, #12
  40045a:	46bd      	mov	sp, r7
  40045c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400460:	4770      	bx	lr

00400462 <hri_wdt_set_MR_WDDIS_bit>:
	((Wdt *)hw)->WDT_MR ^= WDT_MR_WDRSTEN;
	WDT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
  400462:	b480      	push	{r7}
  400464:	b083      	sub	sp, #12
  400466:	af00      	add	r7, sp, #0
  400468:	6078      	str	r0, [r7, #4]
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40046a:	687b      	ldr	r3, [r7, #4]
  40046c:	685b      	ldr	r3, [r3, #4]
  40046e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  400472:	687b      	ldr	r3, [r7, #4]
  400474:	605a      	str	r2, [r3, #4]
	WDT_CRITICAL_SECTION_LEAVE();
}
  400476:	bf00      	nop
  400478:	370c      	adds	r7, #12
  40047a:	46bd      	mov	sp, r7
  40047c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400480:	4770      	bx	lr
	...

00400484 <port_to_reg>:

/**
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
  400484:	b480      	push	{r7}
  400486:	b083      	sub	sp, #12
  400488:	af00      	add	r7, sp, #0
  40048a:	4603      	mov	r3, r0
  40048c:	71fb      	strb	r3, [r7, #7]
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  40048e:	79fb      	ldrb	r3, [r7, #7]
  400490:	025b      	lsls	r3, r3, #9
  400492:	461a      	mov	r2, r3
  400494:	4b03      	ldr	r3, [pc, #12]	; (4004a4 <port_to_reg+0x20>)
  400496:	4413      	add	r3, r2
}
  400498:	4618      	mov	r0, r3
  40049a:	370c      	adds	r7, #12
  40049c:	46bd      	mov	sp, r7
  40049e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004a2:	4770      	bx	lr
  4004a4:	400e0e00 	.word	0x400e0e00

004004a8 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
  4004a8:	b580      	push	{r7, lr}
  4004aa:	b084      	sub	sp, #16
  4004ac:	af00      	add	r7, sp, #0
  4004ae:	4603      	mov	r3, r0
  4004b0:	6039      	str	r1, [r7, #0]
  4004b2:	71fb      	strb	r3, [r7, #7]
  4004b4:	4613      	mov	r3, r2
  4004b6:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  4004b8:	79fb      	ldrb	r3, [r7, #7]
  4004ba:	4618      	mov	r0, r3
  4004bc:	4b0e      	ldr	r3, [pc, #56]	; (4004f8 <_gpio_set_direction+0x50>)
  4004be:	4798      	blx	r3
  4004c0:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  4004c2:	79bb      	ldrb	r3, [r7, #6]
  4004c4:	2b00      	cmp	r3, #0
  4004c6:	db0e      	blt.n	4004e6 <_gpio_set_direction+0x3e>
  4004c8:	2b01      	cmp	r3, #1
  4004ca:	dd02      	ble.n	4004d2 <_gpio_set_direction+0x2a>
  4004cc:	2b02      	cmp	r3, #2
  4004ce:	d005      	beq.n	4004dc <_gpio_set_direction+0x34>
  4004d0:	e009      	b.n	4004e6 <_gpio_set_direction+0x3e>
	case GPIO_DIRECTION_OFF:
	case GPIO_DIRECTION_IN:
		hri_pio_clear_OSR_reg(hw, mask);
  4004d2:	6839      	ldr	r1, [r7, #0]
  4004d4:	68f8      	ldr	r0, [r7, #12]
  4004d6:	4b09      	ldr	r3, [pc, #36]	; (4004fc <_gpio_set_direction+0x54>)
  4004d8:	4798      	blx	r3
		break;
  4004da:	e009      	b.n	4004f0 <_gpio_set_direction+0x48>

	case GPIO_DIRECTION_OUT:
		hri_pio_set_OSR_reg(hw, mask);
  4004dc:	6839      	ldr	r1, [r7, #0]
  4004de:	68f8      	ldr	r0, [r7, #12]
  4004e0:	4b07      	ldr	r3, [pc, #28]	; (400500 <_gpio_set_direction+0x58>)
  4004e2:	4798      	blx	r3
		break;
  4004e4:	e004      	b.n	4004f0 <_gpio_set_direction+0x48>

	default:
		ASSERT(false);
  4004e6:	2241      	movs	r2, #65	; 0x41
  4004e8:	4906      	ldr	r1, [pc, #24]	; (400504 <_gpio_set_direction+0x5c>)
  4004ea:	2000      	movs	r0, #0
  4004ec:	4b06      	ldr	r3, [pc, #24]	; (400508 <_gpio_set_direction+0x60>)
  4004ee:	4798      	blx	r3
	}
}
  4004f0:	bf00      	nop
  4004f2:	3710      	adds	r7, #16
  4004f4:	46bd      	mov	sp, r7
  4004f6:	bd80      	pop	{r7, pc}
  4004f8:	00400485 	.word	0x00400485
  4004fc:	004002e9 	.word	0x004002e9
  400500:	004002cd 	.word	0x004002cd
  400504:	00402238 	.word	0x00402238
  400508:	00400cad 	.word	0x00400cad

0040050c <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
  40050c:	b580      	push	{r7, lr}
  40050e:	b084      	sub	sp, #16
  400510:	af00      	add	r7, sp, #0
  400512:	4603      	mov	r3, r0
  400514:	6039      	str	r1, [r7, #0]
  400516:	71fb      	strb	r3, [r7, #7]
  400518:	4613      	mov	r3, r2
  40051a:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  40051c:	79fb      	ldrb	r3, [r7, #7]
  40051e:	4618      	mov	r0, r3
  400520:	4b09      	ldr	r3, [pc, #36]	; (400548 <_gpio_set_level+0x3c>)
  400522:	4798      	blx	r3
  400524:	60f8      	str	r0, [r7, #12]
	if (level) {
  400526:	79bb      	ldrb	r3, [r7, #6]
  400528:	2b00      	cmp	r3, #0
  40052a:	d004      	beq.n	400536 <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  40052c:	6839      	ldr	r1, [r7, #0]
  40052e:	68f8      	ldr	r0, [r7, #12]
  400530:	4b06      	ldr	r3, [pc, #24]	; (40054c <_gpio_set_level+0x40>)
  400532:	4798      	blx	r3
	} else {
		hri_pio_clear_ODSR_reg(hw, mask);
	}
}
  400534:	e003      	b.n	40053e <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  400536:	6839      	ldr	r1, [r7, #0]
  400538:	68f8      	ldr	r0, [r7, #12]
  40053a:	4b05      	ldr	r3, [pc, #20]	; (400550 <_gpio_set_level+0x44>)
  40053c:	4798      	blx	r3
}
  40053e:	bf00      	nop
  400540:	3710      	adds	r7, #16
  400542:	46bd      	mov	sp, r7
  400544:	bd80      	pop	{r7, pc}
  400546:	bf00      	nop
  400548:	00400485 	.word	0x00400485
  40054c:	00400305 	.word	0x00400305
  400550:	00400321 	.word	0x00400321

00400554 <_gpio_set_pin_function>:

/**
 * \brief Set pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
  400554:	b580      	push	{r7, lr}
  400556:	b084      	sub	sp, #16
  400558:	af00      	add	r7, sp, #0
  40055a:	6078      	str	r0, [r7, #4]
  40055c:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  40055e:	687b      	ldr	r3, [r7, #4]
  400560:	095b      	lsrs	r3, r3, #5
  400562:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  400564:	687b      	ldr	r3, [r7, #4]
  400566:	b2db      	uxtb	r3, r3
  400568:	f003 031f 	and.w	r3, r3, #31
  40056c:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  40056e:	7bfb      	ldrb	r3, [r7, #15]
  400570:	4618      	mov	r0, r3
  400572:	4b33      	ldr	r3, [pc, #204]	; (400640 <_gpio_set_pin_function+0xec>)
  400574:	4798      	blx	r3
  400576:	60b8      	str	r0, [r7, #8]

	if ((enum gpio_port)port == GPIO_PORTB) {
  400578:	7bfb      	ldrb	r3, [r7, #15]
  40057a:	2b01      	cmp	r3, #1
  40057c:	d116      	bne.n	4005ac <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  40057e:	7bbb      	ldrb	r3, [r7, #14]
  400580:	2b04      	cmp	r3, #4
  400582:	d00b      	beq.n	40059c <_gpio_set_pin_function+0x48>
  400584:	7bbb      	ldrb	r3, [r7, #14]
  400586:	2b05      	cmp	r3, #5
  400588:	d008      	beq.n	40059c <_gpio_set_pin_function+0x48>
  40058a:	7bbb      	ldrb	r3, [r7, #14]
  40058c:	2b06      	cmp	r3, #6
  40058e:	d005      	beq.n	40059c <_gpio_set_pin_function+0x48>
  400590:	7bbb      	ldrb	r3, [r7, #14]
  400592:	2b07      	cmp	r3, #7
  400594:	d002      	beq.n	40059c <_gpio_set_pin_function+0x48>
  400596:	7bbb      	ldrb	r3, [r7, #14]
  400598:	2b0c      	cmp	r3, #12
  40059a:	d107      	bne.n	4005ac <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  40059c:	7bbb      	ldrb	r3, [r7, #14]
  40059e:	2201      	movs	r2, #1
  4005a0:	fa02 f303 	lsl.w	r3, r2, r3
  4005a4:	4619      	mov	r1, r3
  4005a6:	4827      	ldr	r0, [pc, #156]	; (400644 <_gpio_set_pin_function+0xf0>)
  4005a8:	4b27      	ldr	r3, [pc, #156]	; (400648 <_gpio_set_pin_function+0xf4>)
  4005aa:	4798      	blx	r3
		}
	}

	if (function == GPIO_PIN_FUNCTION_OFF) {
  4005ac:	683b      	ldr	r3, [r7, #0]
  4005ae:	f1b3 3fff 	cmp.w	r3, #4294967295
  4005b2:	d108      	bne.n	4005c6 <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  4005b4:	7bbb      	ldrb	r3, [r7, #14]
  4005b6:	2201      	movs	r2, #1
  4005b8:	fa02 f303 	lsl.w	r3, r2, r3
  4005bc:	4619      	mov	r1, r3
  4005be:	68b8      	ldr	r0, [r7, #8]
  4005c0:	4b22      	ldr	r3, [pc, #136]	; (40064c <_gpio_set_pin_function+0xf8>)
  4005c2:	4798      	blx	r3
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
		}

		hri_pio_clear_PSR_reg(hw, 1U << pin);
	}
}
  4005c4:	e037      	b.n	400636 <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  4005c6:	683b      	ldr	r3, [r7, #0]
  4005c8:	f003 0301 	and.w	r3, r3, #1
  4005cc:	2b00      	cmp	r3, #0
  4005ce:	d009      	beq.n	4005e4 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  4005d0:	7bbb      	ldrb	r3, [r7, #14]
  4005d2:	2201      	movs	r2, #1
  4005d4:	fa02 f303 	lsl.w	r3, r2, r3
  4005d8:	461a      	mov	r2, r3
  4005da:	2100      	movs	r1, #0
  4005dc:	68b8      	ldr	r0, [r7, #8]
  4005de:	4b1c      	ldr	r3, [pc, #112]	; (400650 <_gpio_set_pin_function+0xfc>)
  4005e0:	4798      	blx	r3
  4005e2:	e008      	b.n	4005f6 <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  4005e4:	7bbb      	ldrb	r3, [r7, #14]
  4005e6:	2201      	movs	r2, #1
  4005e8:	fa02 f303 	lsl.w	r3, r2, r3
  4005ec:	461a      	mov	r2, r3
  4005ee:	2100      	movs	r1, #0
  4005f0:	68b8      	ldr	r0, [r7, #8]
  4005f2:	4b18      	ldr	r3, [pc, #96]	; (400654 <_gpio_set_pin_function+0x100>)
  4005f4:	4798      	blx	r3
		if (function & 0x2) {
  4005f6:	683b      	ldr	r3, [r7, #0]
  4005f8:	f003 0302 	and.w	r3, r3, #2
  4005fc:	2b00      	cmp	r3, #0
  4005fe:	d009      	beq.n	400614 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  400600:	7bbb      	ldrb	r3, [r7, #14]
  400602:	2201      	movs	r2, #1
  400604:	fa02 f303 	lsl.w	r3, r2, r3
  400608:	461a      	mov	r2, r3
  40060a:	2101      	movs	r1, #1
  40060c:	68b8      	ldr	r0, [r7, #8]
  40060e:	4b10      	ldr	r3, [pc, #64]	; (400650 <_gpio_set_pin_function+0xfc>)
  400610:	4798      	blx	r3
  400612:	e008      	b.n	400626 <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  400614:	7bbb      	ldrb	r3, [r7, #14]
  400616:	2201      	movs	r2, #1
  400618:	fa02 f303 	lsl.w	r3, r2, r3
  40061c:	461a      	mov	r2, r3
  40061e:	2101      	movs	r1, #1
  400620:	68b8      	ldr	r0, [r7, #8]
  400622:	4b0c      	ldr	r3, [pc, #48]	; (400654 <_gpio_set_pin_function+0x100>)
  400624:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  400626:	7bbb      	ldrb	r3, [r7, #14]
  400628:	2201      	movs	r2, #1
  40062a:	fa02 f303 	lsl.w	r3, r2, r3
  40062e:	4619      	mov	r1, r3
  400630:	68b8      	ldr	r0, [r7, #8]
  400632:	4b09      	ldr	r3, [pc, #36]	; (400658 <_gpio_set_pin_function+0x104>)
  400634:	4798      	blx	r3
}
  400636:	bf00      	nop
  400638:	3710      	adds	r7, #16
  40063a:	46bd      	mov	sp, r7
  40063c:	bd80      	pop	{r7, pc}
  40063e:	bf00      	nop
  400640:	00400485 	.word	0x00400485
  400644:	40088000 	.word	0x40088000
  400648:	0040026f 	.word	0x0040026f
  40064c:	00400295 	.word	0x00400295
  400650:	0040033d 	.word	0x0040033d
  400654:	0040036f 	.word	0x0040036f
  400658:	004002b1 	.word	0x004002b1

0040065c <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
  40065c:	b580      	push	{r7, lr}
  40065e:	b082      	sub	sp, #8
  400660:	af00      	add	r7, sp, #0
  400662:	6078      	str	r0, [r7, #4]
  400664:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  400666:	6839      	ldr	r1, [r7, #0]
  400668:	6878      	ldr	r0, [r7, #4]
  40066a:	4b03      	ldr	r3, [pc, #12]	; (400678 <gpio_set_pin_function+0x1c>)
  40066c:	4798      	blx	r3
}
  40066e:	bf00      	nop
  400670:	3708      	adds	r7, #8
  400672:	46bd      	mov	sp, r7
  400674:	bd80      	pop	{r7, pc}
  400676:	bf00      	nop
  400678:	00400555 	.word	0x00400555

0040067c <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
  40067c:	b580      	push	{r7, lr}
  40067e:	b082      	sub	sp, #8
  400680:	af00      	add	r7, sp, #0
  400682:	4603      	mov	r3, r0
  400684:	460a      	mov	r2, r1
  400686:	71fb      	strb	r3, [r7, #7]
  400688:	4613      	mov	r3, r2
  40068a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  40068c:	79fb      	ldrb	r3, [r7, #7]
  40068e:	095b      	lsrs	r3, r3, #5
  400690:	b2d8      	uxtb	r0, r3
  400692:	79fb      	ldrb	r3, [r7, #7]
  400694:	f003 031f 	and.w	r3, r3, #31
  400698:	2201      	movs	r2, #1
  40069a:	fa02 f303 	lsl.w	r3, r2, r3
  40069e:	79ba      	ldrb	r2, [r7, #6]
  4006a0:	4619      	mov	r1, r3
  4006a2:	4b03      	ldr	r3, [pc, #12]	; (4006b0 <gpio_set_pin_direction+0x34>)
  4006a4:	4798      	blx	r3
}
  4006a6:	bf00      	nop
  4006a8:	3708      	adds	r7, #8
  4006aa:	46bd      	mov	sp, r7
  4006ac:	bd80      	pop	{r7, pc}
  4006ae:	bf00      	nop
  4006b0:	004004a9 	.word	0x004004a9

004006b4 <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	b082      	sub	sp, #8
  4006b8:	af00      	add	r7, sp, #0
  4006ba:	4603      	mov	r3, r0
  4006bc:	460a      	mov	r2, r1
  4006be:	71fb      	strb	r3, [r7, #7]
  4006c0:	4613      	mov	r3, r2
  4006c2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  4006c4:	79fb      	ldrb	r3, [r7, #7]
  4006c6:	095b      	lsrs	r3, r3, #5
  4006c8:	b2d8      	uxtb	r0, r3
  4006ca:	79fb      	ldrb	r3, [r7, #7]
  4006cc:	f003 031f 	and.w	r3, r3, #31
  4006d0:	2201      	movs	r2, #1
  4006d2:	fa02 f303 	lsl.w	r3, r2, r3
  4006d6:	79ba      	ldrb	r2, [r7, #6]
  4006d8:	4619      	mov	r1, r3
  4006da:	4b03      	ldr	r3, [pc, #12]	; (4006e8 <gpio_set_pin_level+0x34>)
  4006dc:	4798      	blx	r3
}
  4006de:	bf00      	nop
  4006e0:	3708      	adds	r7, #8
  4006e2:	46bd      	mov	sp, r7
  4006e4:	bd80      	pop	{r7, pc}
  4006e6:	bf00      	nop
  4006e8:	0040050d 	.word	0x0040050d

004006ec <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
  4006ec:	b580      	push	{r7, lr}
  4006ee:	af00      	add	r7, sp, #0
	_init_chip();
  4006f0:	4b01      	ldr	r3, [pc, #4]	; (4006f8 <init_mcu+0xc>)
  4006f2:	4798      	blx	r3
}
  4006f4:	bf00      	nop
  4006f6:	bd80      	pop	{r7, pc}
  4006f8:	00400fa1 	.word	0x00400fa1

004006fc <_pmc_enable_periph_clock>:
 *
 * \param periph_id Peripheral ID
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
  4006fc:	b580      	push	{r7, lr}
  4006fe:	b084      	sub	sp, #16
  400700:	af00      	add	r7, sp, #0
  400702:	6078      	str	r0, [r7, #4]
	if (periph_id < 32) {
  400704:	687b      	ldr	r3, [r7, #4]
  400706:	2b1f      	cmp	r3, #31
  400708:	d813      	bhi.n	400732 <_pmc_enable_periph_clock+0x36>
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40070a:	2201      	movs	r2, #1
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	fa02 f303 	lsl.w	r3, r2, r3
  400712:	4619      	mov	r1, r3
  400714:	481f      	ldr	r0, [pc, #124]	; (400794 <_pmc_enable_periph_clock+0x98>)
  400716:	4b20      	ldr	r3, [pc, #128]	; (400798 <_pmc_enable_periph_clock+0x9c>)
  400718:	4798      	blx	r3
  40071a:	4603      	mov	r3, r0
  40071c:	2b00      	cmp	r3, #0
  40071e:	d135      	bne.n	40078c <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
  400720:	2201      	movs	r2, #1
  400722:	687b      	ldr	r3, [r7, #4]
  400724:	fa02 f303 	lsl.w	r3, r2, r3
  400728:	4619      	mov	r1, r3
  40072a:	481a      	ldr	r0, [pc, #104]	; (400794 <_pmc_enable_periph_clock+0x98>)
  40072c:	4b1b      	ldr	r3, [pc, #108]	; (40079c <_pmc_enable_periph_clock+0xa0>)
  40072e:	4798      	blx	r3
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
		tmp = hri_pmc_read_PCR_reg(PMC);
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
		hri_pmc_write_PCR_reg(PMC, tmp);
	}
}
  400730:	e02c      	b.n	40078c <_pmc_enable_periph_clock+0x90>
	} else if (periph_id < 64) {
  400732:	687b      	ldr	r3, [r7, #4]
  400734:	2b3f      	cmp	r3, #63	; 0x3f
  400736:	d816      	bhi.n	400766 <_pmc_enable_periph_clock+0x6a>
		periph_id -= 32;
  400738:	687b      	ldr	r3, [r7, #4]
  40073a:	3b20      	subs	r3, #32
  40073c:	607b      	str	r3, [r7, #4]
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40073e:	2201      	movs	r2, #1
  400740:	687b      	ldr	r3, [r7, #4]
  400742:	fa02 f303 	lsl.w	r3, r2, r3
  400746:	4619      	mov	r1, r3
  400748:	4812      	ldr	r0, [pc, #72]	; (400794 <_pmc_enable_periph_clock+0x98>)
  40074a:	4b15      	ldr	r3, [pc, #84]	; (4007a0 <_pmc_enable_periph_clock+0xa4>)
  40074c:	4798      	blx	r3
  40074e:	4603      	mov	r3, r0
  400750:	2b00      	cmp	r3, #0
  400752:	d11b      	bne.n	40078c <_pmc_enable_periph_clock+0x90>
			hri_pmc_set_PCSR1_reg(PMC, (1 << periph_id));
  400754:	2201      	movs	r2, #1
  400756:	687b      	ldr	r3, [r7, #4]
  400758:	fa02 f303 	lsl.w	r3, r2, r3
  40075c:	4619      	mov	r1, r3
  40075e:	480d      	ldr	r0, [pc, #52]	; (400794 <_pmc_enable_periph_clock+0x98>)
  400760:	4b10      	ldr	r3, [pc, #64]	; (4007a4 <_pmc_enable_periph_clock+0xa8>)
  400762:	4798      	blx	r3
}
  400764:	e012      	b.n	40078c <_pmc_enable_periph_clock+0x90>
		hri_pmc_write_PCR_reg(PMC, PMC_PCR_PID(periph_id));
  400766:	687b      	ldr	r3, [r7, #4]
  400768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40076c:	4619      	mov	r1, r3
  40076e:	4809      	ldr	r0, [pc, #36]	; (400794 <_pmc_enable_periph_clock+0x98>)
  400770:	4b0d      	ldr	r3, [pc, #52]	; (4007a8 <_pmc_enable_periph_clock+0xac>)
  400772:	4798      	blx	r3
		tmp = hri_pmc_read_PCR_reg(PMC);
  400774:	4807      	ldr	r0, [pc, #28]	; (400794 <_pmc_enable_periph_clock+0x98>)
  400776:	4b0d      	ldr	r3, [pc, #52]	; (4007ac <_pmc_enable_periph_clock+0xb0>)
  400778:	4798      	blx	r3
  40077a:	60f8      	str	r0, [r7, #12]
		tmp |= PMC_PCR_CMD | PMC_PCR_EN;
  40077c:	68fb      	ldr	r3, [r7, #12]
  40077e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  400782:	60fb      	str	r3, [r7, #12]
		hri_pmc_write_PCR_reg(PMC, tmp);
  400784:	68f9      	ldr	r1, [r7, #12]
  400786:	4803      	ldr	r0, [pc, #12]	; (400794 <_pmc_enable_periph_clock+0x98>)
  400788:	4b07      	ldr	r3, [pc, #28]	; (4007a8 <_pmc_enable_periph_clock+0xac>)
  40078a:	4798      	blx	r3
}
  40078c:	bf00      	nop
  40078e:	3710      	adds	r7, #16
  400790:	46bd      	mov	sp, r7
  400792:	bd80      	pop	{r7, pc}
  400794:	400e0600 	.word	0x400e0600
  400798:	004003bf 	.word	0x004003bf
  40079c:	004003a3 	.word	0x004003a3
  4007a0:	00400403 	.word	0x00400403
  4007a4:	004003e5 	.word	0x004003e5
  4007a8:	0040042b 	.word	0x0040042b
  4007ac:	00400449 	.word	0x00400449

004007b0 <SPI_0_PORT_init>:
#include <hpl_spi_base.h>

struct spi_m_sync_descriptor SPI_0;

void SPI_0_PORT_init(void)
{
  4007b0:	b580      	push	{r7, lr}
  4007b2:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD20, MUX_PD20B_SPI0_MISO);
  4007b4:	2101      	movs	r1, #1
  4007b6:	2074      	movs	r0, #116	; 0x74
  4007b8:	4b05      	ldr	r3, [pc, #20]	; (4007d0 <SPI_0_PORT_init+0x20>)
  4007ba:	4798      	blx	r3

	gpio_set_pin_function(PD21, MUX_PD21B_SPI0_MOSI);
  4007bc:	2101      	movs	r1, #1
  4007be:	2075      	movs	r0, #117	; 0x75
  4007c0:	4b03      	ldr	r3, [pc, #12]	; (4007d0 <SPI_0_PORT_init+0x20>)
  4007c2:	4798      	blx	r3

	gpio_set_pin_function(PD22, MUX_PD22B_SPI0_SPCK);
  4007c4:	2101      	movs	r1, #1
  4007c6:	2076      	movs	r0, #118	; 0x76
  4007c8:	4b01      	ldr	r3, [pc, #4]	; (4007d0 <SPI_0_PORT_init+0x20>)
  4007ca:	4798      	blx	r3
}
  4007cc:	bf00      	nop
  4007ce:	bd80      	pop	{r7, pc}
  4007d0:	0040065d 	.word	0x0040065d

004007d4 <SPI_0_CLOCK_init>:

void SPI_0_CLOCK_init(void)
{
  4007d4:	b580      	push	{r7, lr}
  4007d6:	af00      	add	r7, sp, #0
	_pmc_enable_periph_clock(ID_SPI0);
  4007d8:	2015      	movs	r0, #21
  4007da:	4b02      	ldr	r3, [pc, #8]	; (4007e4 <SPI_0_CLOCK_init+0x10>)
  4007dc:	4798      	blx	r3
}
  4007de:	bf00      	nop
  4007e0:	bd80      	pop	{r7, pc}
  4007e2:	bf00      	nop
  4007e4:	004006fd 	.word	0x004006fd

004007e8 <SPI_0_init>:

void SPI_0_init(void)
{
  4007e8:	b580      	push	{r7, lr}
  4007ea:	af00      	add	r7, sp, #0
	SPI_0_CLOCK_init();
  4007ec:	4b08      	ldr	r3, [pc, #32]	; (400810 <SPI_0_init+0x28>)
  4007ee:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4007f0:	4b08      	ldr	r3, [pc, #32]	; (400814 <SPI_0_init+0x2c>)
  4007f2:	4798      	blx	r3
  4007f4:	4603      	mov	r3, r0
  4007f6:	4619      	mov	r1, r3
  4007f8:	4807      	ldr	r0, [pc, #28]	; (400818 <SPI_0_init+0x30>)
  4007fa:	4b08      	ldr	r3, [pc, #32]	; (40081c <SPI_0_init+0x34>)
  4007fc:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4007fe:	4908      	ldr	r1, [pc, #32]	; (400820 <SPI_0_init+0x38>)
  400800:	4805      	ldr	r0, [pc, #20]	; (400818 <SPI_0_init+0x30>)
  400802:	4b08      	ldr	r3, [pc, #32]	; (400824 <SPI_0_init+0x3c>)
  400804:	4798      	blx	r3
	SPI_0_PORT_init();
  400806:	4b08      	ldr	r3, [pc, #32]	; (400828 <SPI_0_init+0x40>)
  400808:	4798      	blx	r3
}
  40080a:	bf00      	nop
  40080c:	bd80      	pop	{r7, pc}
  40080e:	bf00      	nop
  400810:	004007d5 	.word	0x004007d5
  400814:	00401a91 	.word	0x00401a91
  400818:	20400020 	.word	0x20400020
  40081c:	00400989 	.word	0x00400989
  400820:	40008000 	.word	0x40008000
  400824:	004009c1 	.word	0x004009c1
  400828:	004007b1 	.word	0x004007b1

0040082c <system_init>:

void system_init(void)
{
  40082c:	b580      	push	{r7, lr}
  40082e:	af00      	add	r7, sp, #0
	init_mcu();
  400830:	4b0c      	ldr	r3, [pc, #48]	; (400864 <system_init+0x38>)
  400832:	4798      	blx	r3

	_pmc_enable_periph_clock(ID_PIOB);
  400834:	200b      	movs	r0, #11
  400836:	4b0c      	ldr	r3, [pc, #48]	; (400868 <system_init+0x3c>)
  400838:	4798      	blx	r3

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);
  40083a:	480c      	ldr	r0, [pc, #48]	; (40086c <system_init+0x40>)
  40083c:	4b0c      	ldr	r3, [pc, #48]	; (400870 <system_init+0x44>)
  40083e:	4798      	blx	r3

	/* GPIO on PB3 */

	gpio_set_pin_level(SPI0_SS,
  400840:	2100      	movs	r1, #0
  400842:	2023      	movs	r0, #35	; 0x23
  400844:	4b0b      	ldr	r3, [pc, #44]	; (400874 <system_init+0x48>)
  400846:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(SPI0_SS, GPIO_DIRECTION_OUT);
  400848:	2102      	movs	r1, #2
  40084a:	2023      	movs	r0, #35	; 0x23
  40084c:	4b0a      	ldr	r3, [pc, #40]	; (400878 <system_init+0x4c>)
  40084e:	4798      	blx	r3

	gpio_set_pin_function(SPI0_SS, GPIO_PIN_FUNCTION_OFF);
  400850:	f04f 31ff 	mov.w	r1, #4294967295
  400854:	2023      	movs	r0, #35	; 0x23
  400856:	4b09      	ldr	r3, [pc, #36]	; (40087c <system_init+0x50>)
  400858:	4798      	blx	r3

	SPI_0_init();
  40085a:	4b09      	ldr	r3, [pc, #36]	; (400880 <system_init+0x54>)
  40085c:	4798      	blx	r3
}
  40085e:	bf00      	nop
  400860:	bd80      	pop	{r7, pc}
  400862:	bf00      	nop
  400864:	004006ed 	.word	0x004006ed
  400868:	004006fd 	.word	0x004006fd
  40086c:	400e1850 	.word	0x400e1850
  400870:	00400463 	.word	0x00400463
  400874:	004006b5 	.word	0x004006b5
  400878:	0040067d 	.word	0x0040067d
  40087c:	0040065d 	.word	0x0040065d
  400880:	004007e9 	.word	0x004007e9

00400884 <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
  400884:	b480      	push	{r7}
  400886:	b085      	sub	sp, #20
  400888:	af00      	add	r7, sp, #0
  40088a:	6078      	str	r0, [r7, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40088c:	f3ef 8310 	mrs	r3, PRIMASK
  400890:	60fb      	str	r3, [r7, #12]
  return(result);
  400892:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
  400894:	687b      	ldr	r3, [r7, #4]
  400896:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  400898:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40089a:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
  40089e:	bf00      	nop
  4008a0:	3714      	adds	r7, #20
  4008a2:	46bd      	mov	sp, r7
  4008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008a8:	4770      	bx	lr

004008aa <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
  4008aa:	b480      	push	{r7}
  4008ac:	b085      	sub	sp, #20
  4008ae:	af00      	add	r7, sp, #0
  4008b0:	6078      	str	r0, [r7, #4]
  4008b2:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
  4008b6:	687b      	ldr	r3, [r7, #4]
  4008b8:	681b      	ldr	r3, [r3, #0]
  4008ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4008bc:	68fb      	ldr	r3, [r7, #12]
  4008be:	f383 8810 	msr	PRIMASK, r3
}
  4008c2:	bf00      	nop
  4008c4:	3714      	adds	r7, #20
  4008c6:	46bd      	mov	sp, r7
  4008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008cc:	4770      	bx	lr
	...

004008d0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
  4008d0:	b590      	push	{r4, r7, lr}
  4008d2:	b083      	sub	sp, #12
  4008d4:	af00      	add	r7, sp, #0
  4008d6:	4603      	mov	r3, r0
  4008d8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
  4008da:	4b07      	ldr	r3, [pc, #28]	; (4008f8 <delay_us+0x28>)
  4008dc:	681c      	ldr	r4, [r3, #0]
  4008de:	88fb      	ldrh	r3, [r7, #6]
  4008e0:	4618      	mov	r0, r3
  4008e2:	4b06      	ldr	r3, [pc, #24]	; (4008fc <delay_us+0x2c>)
  4008e4:	4798      	blx	r3
  4008e6:	4603      	mov	r3, r0
  4008e8:	4619      	mov	r1, r3
  4008ea:	4620      	mov	r0, r4
  4008ec:	4b04      	ldr	r3, [pc, #16]	; (400900 <delay_us+0x30>)
  4008ee:	4798      	blx	r3
}
  4008f0:	bf00      	nop
  4008f2:	370c      	adds	r7, #12
  4008f4:	46bd      	mov	sp, r7
  4008f6:	bd90      	pop	{r4, r7, pc}
  4008f8:	2040001c 	.word	0x2040001c
  4008fc:	00400dd1 	.word	0x00400dd1
  400900:	00400f09 	.word	0x00400f09

00400904 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
  400904:	b590      	push	{r4, r7, lr}
  400906:	b083      	sub	sp, #12
  400908:	af00      	add	r7, sp, #0
  40090a:	4603      	mov	r3, r0
  40090c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
  40090e:	4b07      	ldr	r3, [pc, #28]	; (40092c <delay_ms+0x28>)
  400910:	681c      	ldr	r4, [r3, #0]
  400912:	88fb      	ldrh	r3, [r7, #6]
  400914:	4618      	mov	r0, r3
  400916:	4b06      	ldr	r3, [pc, #24]	; (400930 <delay_ms+0x2c>)
  400918:	4798      	blx	r3
  40091a:	4603      	mov	r3, r0
  40091c:	4619      	mov	r1, r3
  40091e:	4620      	mov	r0, r4
  400920:	4b04      	ldr	r3, [pc, #16]	; (400934 <delay_ms+0x30>)
  400922:	4798      	blx	r3
}
  400924:	bf00      	nop
  400926:	370c      	adds	r7, #12
  400928:	46bd      	mov	sp, r7
  40092a:	bd90      	pop	{r4, r7, pc}
  40092c:	2040001c 	.word	0x2040001c
  400930:	00400ee1 	.word	0x00400ee1
  400934:	00400f09 	.word	0x00400f09

00400938 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400938:	b580      	push	{r7, lr}
  40093a:	b084      	sub	sp, #16
  40093c:	af00      	add	r7, sp, #0
  40093e:	60f8      	str	r0, [r7, #12]
  400940:	60b9      	str	r1, [r7, #8]
  400942:	4613      	mov	r3, r2
  400944:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
  400946:	68fb      	ldr	r3, [r7, #12]
  400948:	2b00      	cmp	r3, #0
  40094a:	d004      	beq.n	400956 <io_write+0x1e>
  40094c:	68bb      	ldr	r3, [r7, #8]
  40094e:	2b00      	cmp	r3, #0
  400950:	d001      	beq.n	400956 <io_write+0x1e>
  400952:	2301      	movs	r3, #1
  400954:	e000      	b.n	400958 <io_write+0x20>
  400956:	2300      	movs	r3, #0
  400958:	f003 0301 	and.w	r3, r3, #1
  40095c:	b2db      	uxtb	r3, r3
  40095e:	2234      	movs	r2, #52	; 0x34
  400960:	4907      	ldr	r1, [pc, #28]	; (400980 <io_write+0x48>)
  400962:	4618      	mov	r0, r3
  400964:	4b07      	ldr	r3, [pc, #28]	; (400984 <io_write+0x4c>)
  400966:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400968:	68fb      	ldr	r3, [r7, #12]
  40096a:	681b      	ldr	r3, [r3, #0]
  40096c:	88fa      	ldrh	r2, [r7, #6]
  40096e:	68b9      	ldr	r1, [r7, #8]
  400970:	68f8      	ldr	r0, [r7, #12]
  400972:	4798      	blx	r3
  400974:	4603      	mov	r3, r0
}
  400976:	4618      	mov	r0, r3
  400978:	3710      	adds	r7, #16
  40097a:	46bd      	mov	sp, r7
  40097c:	bd80      	pop	{r7, pc}
  40097e:	bf00      	nop
  400980:	00402254 	.word	0x00402254
  400984:	00400cad 	.word	0x00400cad

00400988 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400988:	b580      	push	{r7, lr}
  40098a:	b082      	sub	sp, #8
  40098c:	af00      	add	r7, sp, #0
  40098e:	6078      	str	r0, [r7, #4]
  400990:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  400992:	687b      	ldr	r3, [r7, #4]
  400994:	2b00      	cmp	r3, #0
  400996:	bf14      	ite	ne
  400998:	2301      	movne	r3, #1
  40099a:	2300      	moveq	r3, #0
  40099c:	b2db      	uxtb	r3, r3
  40099e:	2239      	movs	r2, #57	; 0x39
  4009a0:	4905      	ldr	r1, [pc, #20]	; (4009b8 <spi_m_sync_set_func_ptr+0x30>)
  4009a2:	4618      	mov	r0, r3
  4009a4:	4b05      	ldr	r3, [pc, #20]	; (4009bc <spi_m_sync_set_func_ptr+0x34>)
  4009a6:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  4009a8:	687b      	ldr	r3, [r7, #4]
  4009aa:	683a      	ldr	r2, [r7, #0]
  4009ac:	601a      	str	r2, [r3, #0]
}
  4009ae:	bf00      	nop
  4009b0:	3708      	adds	r7, #8
  4009b2:	46bd      	mov	sp, r7
  4009b4:	bd80      	pop	{r7, pc}
  4009b6:	bf00      	nop
  4009b8:	00402268 	.word	0x00402268
  4009bc:	00400cad 	.word	0x00400cad

004009c0 <spi_m_sync_init>:

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4009c0:	b580      	push	{r7, lr}
  4009c2:	b084      	sub	sp, #16
  4009c4:	af00      	add	r7, sp, #0
  4009c6:	6078      	str	r0, [r7, #4]
  4009c8:	6039      	str	r1, [r7, #0]
	int32_t rc = 0;
  4009ca:	2300      	movs	r3, #0
  4009cc:	60fb      	str	r3, [r7, #12]
	ASSERT(spi && hw);
  4009ce:	687b      	ldr	r3, [r7, #4]
  4009d0:	2b00      	cmp	r3, #0
  4009d2:	d004      	beq.n	4009de <spi_m_sync_init+0x1e>
  4009d4:	683b      	ldr	r3, [r7, #0]
  4009d6:	2b00      	cmp	r3, #0
  4009d8:	d001      	beq.n	4009de <spi_m_sync_init+0x1e>
  4009da:	2301      	movs	r3, #1
  4009dc:	e000      	b.n	4009e0 <spi_m_sync_init+0x20>
  4009de:	2300      	movs	r3, #0
  4009e0:	f003 0301 	and.w	r3, r3, #1
  4009e4:	b2db      	uxtb	r3, r3
  4009e6:	2240      	movs	r2, #64	; 0x40
  4009e8:	4910      	ldr	r1, [pc, #64]	; (400a2c <spi_m_sync_init+0x6c>)
  4009ea:	4618      	mov	r0, r3
  4009ec:	4b10      	ldr	r3, [pc, #64]	; (400a30 <spi_m_sync_init+0x70>)
  4009ee:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4009f0:	687b      	ldr	r3, [r7, #4]
  4009f2:	683a      	ldr	r2, [r7, #0]
  4009f4:	605a      	str	r2, [r3, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4009f6:	687b      	ldr	r3, [r7, #4]
  4009f8:	3304      	adds	r3, #4
  4009fa:	6839      	ldr	r1, [r7, #0]
  4009fc:	4618      	mov	r0, r3
  4009fe:	4b0d      	ldr	r3, [pc, #52]	; (400a34 <spi_m_sync_init+0x74>)
  400a00:	4798      	blx	r3
  400a02:	60f8      	str	r0, [r7, #12]

	if (rc < 0) {
  400a04:	68fb      	ldr	r3, [r7, #12]
  400a06:	2b00      	cmp	r3, #0
  400a08:	da01      	bge.n	400a0e <spi_m_sync_init+0x4e>
		return rc;
  400a0a:	68fb      	ldr	r3, [r7, #12]
  400a0c:	e00a      	b.n	400a24 <spi_m_sync_init+0x64>
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400a0e:	687b      	ldr	r3, [r7, #4]
  400a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400a14:	829a      	strh	r2, [r3, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400a16:	687b      	ldr	r3, [r7, #4]
  400a18:	4a07      	ldr	r2, [pc, #28]	; (400a38 <spi_m_sync_init+0x78>)
  400a1a:	611a      	str	r2, [r3, #16]
	spi->io.write = _spi_m_sync_io_write;
  400a1c:	687b      	ldr	r3, [r7, #4]
  400a1e:	4a07      	ldr	r2, [pc, #28]	; (400a3c <spi_m_sync_init+0x7c>)
  400a20:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
  400a22:	2300      	movs	r3, #0
}
  400a24:	4618      	mov	r0, r3
  400a26:	3710      	adds	r7, #16
  400a28:	46bd      	mov	sp, r7
  400a2a:	bd80      	pop	{r7, pc}
  400a2c:	00402268 	.word	0x00402268
  400a30:	00400cad 	.word	0x00400cad
  400a34:	00401625 	.word	0x00401625
  400a38:	00400b51 	.word	0x00400b51
  400a3c:	00400ba9 	.word	0x00400ba9

00400a40 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400a40:	b580      	push	{r7, lr}
  400a42:	b082      	sub	sp, #8
  400a44:	af00      	add	r7, sp, #0
  400a46:	6078      	str	r0, [r7, #4]
	ASSERT(spi);
  400a48:	687b      	ldr	r3, [r7, #4]
  400a4a:	2b00      	cmp	r3, #0
  400a4c:	bf14      	ite	ne
  400a4e:	2301      	movne	r3, #1
  400a50:	2300      	moveq	r3, #0
  400a52:	b2db      	uxtb	r3, r3
  400a54:	2257      	movs	r2, #87	; 0x57
  400a56:	4906      	ldr	r1, [pc, #24]	; (400a70 <spi_m_sync_enable+0x30>)
  400a58:	4618      	mov	r0, r3
  400a5a:	4b06      	ldr	r3, [pc, #24]	; (400a74 <spi_m_sync_enable+0x34>)
  400a5c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400a5e:	687b      	ldr	r3, [r7, #4]
  400a60:	3304      	adds	r3, #4
  400a62:	4618      	mov	r0, r3
  400a64:	4b04      	ldr	r3, [pc, #16]	; (400a78 <spi_m_sync_enable+0x38>)
  400a66:	4798      	blx	r3
}
  400a68:	bf00      	nop
  400a6a:	3708      	adds	r7, #8
  400a6c:	46bd      	mov	sp, r7
  400a6e:	bd80      	pop	{r7, pc}
  400a70:	00402268 	.word	0x00402268
  400a74:	00400cad 	.word	0x00400cad
  400a78:	00401705 	.word	0x00401705

00400a7c <spi_m_sync_set_baudrate>:
	ASSERT(spi);
	_spi_m_sync_disable(&spi->dev);
}

int32_t spi_m_sync_set_baudrate(struct spi_m_sync_descriptor *spi, const uint32_t baud_val)
{
  400a7c:	b580      	push	{r7, lr}
  400a7e:	b082      	sub	sp, #8
  400a80:	af00      	add	r7, sp, #0
  400a82:	6078      	str	r0, [r7, #4]
  400a84:	6039      	str	r1, [r7, #0]
	ASSERT(spi);
  400a86:	687b      	ldr	r3, [r7, #4]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	bf14      	ite	ne
  400a8c:	2301      	movne	r3, #1
  400a8e:	2300      	moveq	r3, #0
  400a90:	b2db      	uxtb	r3, r3
  400a92:	2263      	movs	r2, #99	; 0x63
  400a94:	4907      	ldr	r1, [pc, #28]	; (400ab4 <spi_m_sync_set_baudrate+0x38>)
  400a96:	4618      	mov	r0, r3
  400a98:	4b07      	ldr	r3, [pc, #28]	; (400ab8 <spi_m_sync_set_baudrate+0x3c>)
  400a9a:	4798      	blx	r3
	return _spi_m_sync_set_baudrate(&spi->dev, baud_val);
  400a9c:	687b      	ldr	r3, [r7, #4]
  400a9e:	3304      	adds	r3, #4
  400aa0:	6839      	ldr	r1, [r7, #0]
  400aa2:	4618      	mov	r0, r3
  400aa4:	4b05      	ldr	r3, [pc, #20]	; (400abc <spi_m_sync_set_baudrate+0x40>)
  400aa6:	4798      	blx	r3
  400aa8:	4603      	mov	r3, r0
}
  400aaa:	4618      	mov	r0, r3
  400aac:	3708      	adds	r7, #8
  400aae:	46bd      	mov	sp, r7
  400ab0:	bd80      	pop	{r7, pc}
  400ab2:	bf00      	nop
  400ab4:	00402268 	.word	0x00402268
  400ab8:	00400cad 	.word	0x00400cad
  400abc:	004017ad 	.word	0x004017ad

00400ac0 <spi_m_sync_set_mode>:

int32_t spi_m_sync_set_mode(struct spi_m_sync_descriptor *spi, const enum spi_transfer_mode mode)
{
  400ac0:	b580      	push	{r7, lr}
  400ac2:	b082      	sub	sp, #8
  400ac4:	af00      	add	r7, sp, #0
  400ac6:	6078      	str	r0, [r7, #4]
  400ac8:	460b      	mov	r3, r1
  400aca:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  400acc:	687b      	ldr	r3, [r7, #4]
  400ace:	2b00      	cmp	r3, #0
  400ad0:	bf14      	ite	ne
  400ad2:	2301      	movne	r3, #1
  400ad4:	2300      	moveq	r3, #0
  400ad6:	b2db      	uxtb	r3, r3
  400ad8:	2269      	movs	r2, #105	; 0x69
  400ada:	4908      	ldr	r1, [pc, #32]	; (400afc <spi_m_sync_set_mode+0x3c>)
  400adc:	4618      	mov	r0, r3
  400ade:	4b08      	ldr	r3, [pc, #32]	; (400b00 <spi_m_sync_set_mode+0x40>)
  400ae0:	4798      	blx	r3
	return _spi_m_sync_set_mode(&spi->dev, mode);
  400ae2:	687b      	ldr	r3, [r7, #4]
  400ae4:	3304      	adds	r3, #4
  400ae6:	78fa      	ldrb	r2, [r7, #3]
  400ae8:	4611      	mov	r1, r2
  400aea:	4618      	mov	r0, r3
  400aec:	4b05      	ldr	r3, [pc, #20]	; (400b04 <spi_m_sync_set_mode+0x44>)
  400aee:	4798      	blx	r3
  400af0:	4603      	mov	r3, r0
}
  400af2:	4618      	mov	r0, r3
  400af4:	3708      	adds	r7, #8
  400af6:	46bd      	mov	sp, r7
  400af8:	bd80      	pop	{r7, pc}
  400afa:	bf00      	nop
  400afc:	00402268 	.word	0x00402268
  400b00:	00400cad 	.word	0x00400cad
  400b04:	00401755 	.word	0x00401755

00400b08 <spi_m_sync_set_char_size>:

int32_t spi_m_sync_set_char_size(struct spi_m_sync_descriptor *spi, const enum spi_char_size char_size)
{
  400b08:	b580      	push	{r7, lr}
  400b0a:	b082      	sub	sp, #8
  400b0c:	af00      	add	r7, sp, #0
  400b0e:	6078      	str	r0, [r7, #4]
  400b10:	460b      	mov	r3, r1
  400b12:	70fb      	strb	r3, [r7, #3]
	ASSERT(spi);
  400b14:	687b      	ldr	r3, [r7, #4]
  400b16:	2b00      	cmp	r3, #0
  400b18:	bf14      	ite	ne
  400b1a:	2301      	movne	r3, #1
  400b1c:	2300      	moveq	r3, #0
  400b1e:	b2db      	uxtb	r3, r3
  400b20:	226f      	movs	r2, #111	; 0x6f
  400b22:	4908      	ldr	r1, [pc, #32]	; (400b44 <spi_m_sync_set_char_size+0x3c>)
  400b24:	4618      	mov	r0, r3
  400b26:	4b08      	ldr	r3, [pc, #32]	; (400b48 <spi_m_sync_set_char_size+0x40>)
  400b28:	4798      	blx	r3
	return _spi_m_sync_set_char_size(&spi->dev, char_size);
  400b2a:	687b      	ldr	r3, [r7, #4]
  400b2c:	3304      	adds	r3, #4
  400b2e:	78fa      	ldrb	r2, [r7, #3]
  400b30:	4611      	mov	r1, r2
  400b32:	4618      	mov	r0, r3
  400b34:	4b05      	ldr	r3, [pc, #20]	; (400b4c <spi_m_sync_set_char_size+0x44>)
  400b36:	4798      	blx	r3
  400b38:	4603      	mov	r3, r0
}
  400b3a:	4618      	mov	r0, r3
  400b3c:	3708      	adds	r7, #8
  400b3e:	46bd      	mov	sp, r7
  400b40:	bd80      	pop	{r7, pc}
  400b42:	bf00      	nop
  400b44:	00402268 	.word	0x00402268
  400b48:	00400cad 	.word	0x00400cad
  400b4c:	00401801 	.word	0x00401801

00400b50 <_spi_m_sync_io_read>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Time out, with number of characters read.
 */
static int32_t _spi_m_sync_io_read(struct io_descriptor *io, uint8_t *buf, const uint16_t length)
{
  400b50:	b580      	push	{r7, lr}
  400b52:	b088      	sub	sp, #32
  400b54:	af00      	add	r7, sp, #0
  400b56:	60f8      	str	r0, [r7, #12]
  400b58:	60b9      	str	r1, [r7, #8]
  400b5a:	4613      	mov	r3, r2
  400b5c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  400b5e:	68fb      	ldr	r3, [r7, #12]
  400b60:	2b00      	cmp	r3, #0
  400b62:	bf14      	ite	ne
  400b64:	2301      	movne	r3, #1
  400b66:	2300      	moveq	r3, #0
  400b68:	b2db      	uxtb	r3, r3
  400b6a:	2287      	movs	r2, #135	; 0x87
  400b6c:	490b      	ldr	r1, [pc, #44]	; (400b9c <_spi_m_sync_io_read+0x4c>)
  400b6e:	4618      	mov	r0, r3
  400b70:	4b0b      	ldr	r3, [pc, #44]	; (400ba0 <_spi_m_sync_io_read+0x50>)
  400b72:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
  400b74:	68fb      	ldr	r3, [r7, #12]
  400b76:	3b0c      	subs	r3, #12
  400b78:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = buf;
  400b7a:	68bb      	ldr	r3, [r7, #8]
  400b7c:	617b      	str	r3, [r7, #20]
	xfer.txbuf = 0;
  400b7e:	2300      	movs	r3, #0
  400b80:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
  400b82:	88fb      	ldrh	r3, [r7, #6]
  400b84:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
  400b86:	f107 0310 	add.w	r3, r7, #16
  400b8a:	4619      	mov	r1, r3
  400b8c:	69f8      	ldr	r0, [r7, #28]
  400b8e:	4b05      	ldr	r3, [pc, #20]	; (400ba4 <_spi_m_sync_io_read+0x54>)
  400b90:	4798      	blx	r3
  400b92:	4603      	mov	r3, r0
}
  400b94:	4618      	mov	r0, r3
  400b96:	3720      	adds	r7, #32
  400b98:	46bd      	mov	sp, r7
  400b9a:	bd80      	pop	{r7, pc}
  400b9c:	00402268 	.word	0x00402268
  400ba0:	00400cad 	.word	0x00400cad
  400ba4:	00400c01 	.word	0x00400c01

00400ba8 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
  400ba8:	b580      	push	{r7, lr}
  400baa:	b088      	sub	sp, #32
  400bac:	af00      	add	r7, sp, #0
  400bae:	60f8      	str	r0, [r7, #12]
  400bb0:	60b9      	str	r1, [r7, #8]
  400bb2:	4613      	mov	r3, r2
  400bb4:	80fb      	strh	r3, [r7, #6]
	ASSERT(io);
  400bb6:	68fb      	ldr	r3, [r7, #12]
  400bb8:	2b00      	cmp	r3, #0
  400bba:	bf14      	ite	ne
  400bbc:	2301      	movne	r3, #1
  400bbe:	2300      	moveq	r3, #0
  400bc0:	b2db      	uxtb	r3, r3
  400bc2:	22a3      	movs	r2, #163	; 0xa3
  400bc4:	490b      	ldr	r1, [pc, #44]	; (400bf4 <_spi_m_sync_io_write+0x4c>)
  400bc6:	4618      	mov	r0, r3
  400bc8:	4b0b      	ldr	r3, [pc, #44]	; (400bf8 <_spi_m_sync_io_write+0x50>)
  400bca:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
  400bcc:	68fb      	ldr	r3, [r7, #12]
  400bce:	3b0c      	subs	r3, #12
  400bd0:	61fb      	str	r3, [r7, #28]
	struct spi_xfer               xfer;

	xfer.rxbuf = 0;
  400bd2:	2300      	movs	r3, #0
  400bd4:	617b      	str	r3, [r7, #20]
	xfer.txbuf = (uint8_t *)buf;
  400bd6:	68bb      	ldr	r3, [r7, #8]
  400bd8:	613b      	str	r3, [r7, #16]
	xfer.size  = length;
  400bda:	88fb      	ldrh	r3, [r7, #6]
  400bdc:	61bb      	str	r3, [r7, #24]

	return spi_m_sync_transfer(spi, &xfer);
  400bde:	f107 0310 	add.w	r3, r7, #16
  400be2:	4619      	mov	r1, r3
  400be4:	69f8      	ldr	r0, [r7, #28]
  400be6:	4b05      	ldr	r3, [pc, #20]	; (400bfc <_spi_m_sync_io_write+0x54>)
  400be8:	4798      	blx	r3
  400bea:	4603      	mov	r3, r0
}
  400bec:	4618      	mov	r0, r3
  400bee:	3720      	adds	r7, #32
  400bf0:	46bd      	mov	sp, r7
  400bf2:	bd80      	pop	{r7, pc}
  400bf4:	00402268 	.word	0x00402268
  400bf8:	00400cad 	.word	0x00400cad
  400bfc:	00400c01 	.word	0x00400c01

00400c00 <spi_m_sync_transfer>:

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400c00:	b580      	push	{r7, lr}
  400c02:	b086      	sub	sp, #24
  400c04:	af00      	add	r7, sp, #0
  400c06:	6078      	str	r0, [r7, #4]
  400c08:	6039      	str	r1, [r7, #0]
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400c0a:	687b      	ldr	r3, [r7, #4]
  400c0c:	2b00      	cmp	r3, #0
  400c0e:	d004      	beq.n	400c1a <spi_m_sync_transfer+0x1a>
  400c10:	683b      	ldr	r3, [r7, #0]
  400c12:	2b00      	cmp	r3, #0
  400c14:	d001      	beq.n	400c1a <spi_m_sync_transfer+0x1a>
  400c16:	2301      	movs	r3, #1
  400c18:	e000      	b.n	400c1c <spi_m_sync_transfer+0x1c>
  400c1a:	2300      	movs	r3, #0
  400c1c:	f003 0301 	and.w	r3, r3, #1
  400c20:	b2db      	uxtb	r3, r3
  400c22:	22b3      	movs	r2, #179	; 0xb3
  400c24:	490c      	ldr	r1, [pc, #48]	; (400c58 <spi_m_sync_transfer+0x58>)
  400c26:	4618      	mov	r0, r3
  400c28:	4b0c      	ldr	r3, [pc, #48]	; (400c5c <spi_m_sync_transfer+0x5c>)
  400c2a:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400c2c:	683b      	ldr	r3, [r7, #0]
  400c2e:	681b      	ldr	r3, [r3, #0]
  400c30:	60fb      	str	r3, [r7, #12]
	msg.rxbuf = p_xfer->rxbuf;
  400c32:	683b      	ldr	r3, [r7, #0]
  400c34:	685b      	ldr	r3, [r3, #4]
  400c36:	613b      	str	r3, [r7, #16]
	msg.size  = p_xfer->size;
  400c38:	683b      	ldr	r3, [r7, #0]
  400c3a:	689b      	ldr	r3, [r3, #8]
  400c3c:	617b      	str	r3, [r7, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
  400c3e:	687b      	ldr	r3, [r7, #4]
  400c40:	3304      	adds	r3, #4
  400c42:	f107 020c 	add.w	r2, r7, #12
  400c46:	4611      	mov	r1, r2
  400c48:	4618      	mov	r0, r3
  400c4a:	4b05      	ldr	r3, [pc, #20]	; (400c60 <spi_m_sync_transfer+0x60>)
  400c4c:	4798      	blx	r3
  400c4e:	4603      	mov	r3, r0
}
  400c50:	4618      	mov	r0, r3
  400c52:	3718      	adds	r7, #24
  400c54:	46bd      	mov	sp, r7
  400c56:	bd80      	pop	{r7, pc}
  400c58:	00402268 	.word	0x00402268
  400c5c:	00400cad 	.word	0x00400cad
  400c60:	004019bd 	.word	0x004019bd

00400c64 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400c64:	b580      	push	{r7, lr}
  400c66:	b082      	sub	sp, #8
  400c68:	af00      	add	r7, sp, #0
  400c6a:	6078      	str	r0, [r7, #4]
  400c6c:	6039      	str	r1, [r7, #0]
	ASSERT(spi && io);
  400c6e:	687b      	ldr	r3, [r7, #4]
  400c70:	2b00      	cmp	r3, #0
  400c72:	d004      	beq.n	400c7e <spi_m_sync_get_io_descriptor+0x1a>
  400c74:	683b      	ldr	r3, [r7, #0]
  400c76:	2b00      	cmp	r3, #0
  400c78:	d001      	beq.n	400c7e <spi_m_sync_get_io_descriptor+0x1a>
  400c7a:	2301      	movs	r3, #1
  400c7c:	e000      	b.n	400c80 <spi_m_sync_get_io_descriptor+0x1c>
  400c7e:	2300      	movs	r3, #0
  400c80:	f003 0301 	and.w	r3, r3, #1
  400c84:	b2db      	uxtb	r3, r3
  400c86:	22bd      	movs	r2, #189	; 0xbd
  400c88:	4906      	ldr	r1, [pc, #24]	; (400ca4 <spi_m_sync_get_io_descriptor+0x40>)
  400c8a:	4618      	mov	r0, r3
  400c8c:	4b06      	ldr	r3, [pc, #24]	; (400ca8 <spi_m_sync_get_io_descriptor+0x44>)
  400c8e:	4798      	blx	r3
	*io = &spi->io;
  400c90:	687b      	ldr	r3, [r7, #4]
  400c92:	f103 020c 	add.w	r2, r3, #12
  400c96:	683b      	ldr	r3, [r7, #0]
  400c98:	601a      	str	r2, [r3, #0]
	return 0;
  400c9a:	2300      	movs	r3, #0
}
  400c9c:	4618      	mov	r0, r3
  400c9e:	3708      	adds	r7, #8
  400ca0:	46bd      	mov	sp, r7
  400ca2:	bd80      	pop	{r7, pc}
  400ca4:	00402268 	.word	0x00402268
  400ca8:	00400cad 	.word	0x00400cad

00400cac <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
  400cac:	b480      	push	{r7}
  400cae:	b085      	sub	sp, #20
  400cb0:	af00      	add	r7, sp, #0
  400cb2:	4603      	mov	r3, r0
  400cb4:	60b9      	str	r1, [r7, #8]
  400cb6:	607a      	str	r2, [r7, #4]
  400cb8:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
  400cba:	7bfb      	ldrb	r3, [r7, #15]
  400cbc:	f083 0301 	eor.w	r3, r3, #1
  400cc0:	b2db      	uxtb	r3, r3
  400cc2:	2b00      	cmp	r3, #0
  400cc4:	d000      	beq.n	400cc8 <assert+0x1c>
		__asm("BKPT #0");
  400cc6:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
  400cc8:	bf00      	nop
  400cca:	3714      	adds	r7, #20
  400ccc:	46bd      	mov	sp, r7
  400cce:	f85d 7b04 	ldr.w	r7, [sp], #4
  400cd2:	4770      	bx	lr

00400cd4 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
  400cd4:	b480      	push	{r7}
  400cd6:	b083      	sub	sp, #12
  400cd8:	af00      	add	r7, sp, #0
  400cda:	4603      	mov	r3, r0
  400cdc:	6039      	str	r1, [r7, #0]
  400cde:	80fb      	strh	r3, [r7, #6]
  400ce0:	4613      	mov	r3, r2
  400ce2:	717b      	strb	r3, [r7, #5]
	switch (power) {
  400ce4:	797b      	ldrb	r3, [r7, #5]
  400ce6:	3b05      	subs	r3, #5
  400ce8:	2b04      	cmp	r3, #4
  400cea:	d852      	bhi.n	400d92 <_get_cycles_for_us_internal+0xbe>
  400cec:	a201      	add	r2, pc, #4	; (adr r2, 400cf4 <_get_cycles_for_us_internal+0x20>)
  400cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cf2:	bf00      	nop
  400cf4:	00400d73 	.word	0x00400d73
  400cf8:	00400d55 	.word	0x00400d55
  400cfc:	00400d39 	.word	0x00400d39
  400d00:	00400d1b 	.word	0x00400d1b
  400d04:	00400d09 	.word	0x00400d09
	case 9:
		return (us * (freq / 1000000));
  400d08:	88fb      	ldrh	r3, [r7, #6]
  400d0a:	683a      	ldr	r2, [r7, #0]
  400d0c:	4929      	ldr	r1, [pc, #164]	; (400db4 <_get_cycles_for_us_internal+0xe0>)
  400d0e:	fba1 1202 	umull	r1, r2, r1, r2
  400d12:	0c92      	lsrs	r2, r2, #18
  400d14:	fb02 f303 	mul.w	r3, r2, r3
  400d18:	e045      	b.n	400da6 <_get_cycles_for_us_internal+0xd2>
	case 8:
		return (us * (freq / 100000) + 9) / 10;
  400d1a:	88fb      	ldrh	r3, [r7, #6]
  400d1c:	683a      	ldr	r2, [r7, #0]
  400d1e:	0952      	lsrs	r2, r2, #5
  400d20:	4925      	ldr	r1, [pc, #148]	; (400db8 <_get_cycles_for_us_internal+0xe4>)
  400d22:	fba1 1202 	umull	r1, r2, r1, r2
  400d26:	09d2      	lsrs	r2, r2, #7
  400d28:	fb02 f303 	mul.w	r3, r2, r3
  400d2c:	3309      	adds	r3, #9
  400d2e:	4a23      	ldr	r2, [pc, #140]	; (400dbc <_get_cycles_for_us_internal+0xe8>)
  400d30:	fba2 2303 	umull	r2, r3, r2, r3
  400d34:	08db      	lsrs	r3, r3, #3
  400d36:	e036      	b.n	400da6 <_get_cycles_for_us_internal+0xd2>
	case 7:
		return (us * (freq / 10000) + 99) / 100;
  400d38:	88fb      	ldrh	r3, [r7, #6]
  400d3a:	683a      	ldr	r2, [r7, #0]
  400d3c:	4920      	ldr	r1, [pc, #128]	; (400dc0 <_get_cycles_for_us_internal+0xec>)
  400d3e:	fba1 1202 	umull	r1, r2, r1, r2
  400d42:	0b52      	lsrs	r2, r2, #13
  400d44:	fb02 f303 	mul.w	r3, r2, r3
  400d48:	3363      	adds	r3, #99	; 0x63
  400d4a:	4a1e      	ldr	r2, [pc, #120]	; (400dc4 <_get_cycles_for_us_internal+0xf0>)
  400d4c:	fba2 2303 	umull	r2, r3, r2, r3
  400d50:	095b      	lsrs	r3, r3, #5
  400d52:	e028      	b.n	400da6 <_get_cycles_for_us_internal+0xd2>
	case 6:
		return (us * (freq / 1000) + 999) / 1000;
  400d54:	88fb      	ldrh	r3, [r7, #6]
  400d56:	683a      	ldr	r2, [r7, #0]
  400d58:	491b      	ldr	r1, [pc, #108]	; (400dc8 <_get_cycles_for_us_internal+0xf4>)
  400d5a:	fba1 1202 	umull	r1, r2, r1, r2
  400d5e:	0992      	lsrs	r2, r2, #6
  400d60:	fb02 f303 	mul.w	r3, r2, r3
  400d64:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  400d68:	4a17      	ldr	r2, [pc, #92]	; (400dc8 <_get_cycles_for_us_internal+0xf4>)
  400d6a:	fba2 2303 	umull	r2, r3, r2, r3
  400d6e:	099b      	lsrs	r3, r3, #6
  400d70:	e019      	b.n	400da6 <_get_cycles_for_us_internal+0xd2>
	case 5:
		return (us * (freq / 100) + 9999) / 10000;
  400d72:	88fb      	ldrh	r3, [r7, #6]
  400d74:	683a      	ldr	r2, [r7, #0]
  400d76:	4913      	ldr	r1, [pc, #76]	; (400dc4 <_get_cycles_for_us_internal+0xf0>)
  400d78:	fba1 1202 	umull	r1, r2, r1, r2
  400d7c:	0952      	lsrs	r2, r2, #5
  400d7e:	fb02 f203 	mul.w	r2, r2, r3
  400d82:	f242 730f 	movw	r3, #9999	; 0x270f
  400d86:	4413      	add	r3, r2
  400d88:	4a0d      	ldr	r2, [pc, #52]	; (400dc0 <_get_cycles_for_us_internal+0xec>)
  400d8a:	fba2 2303 	umull	r2, r3, r2, r3
  400d8e:	0b5b      	lsrs	r3, r3, #13
  400d90:	e009      	b.n	400da6 <_get_cycles_for_us_internal+0xd2>
	default:
		return (us * freq + 999999) / 1000000;
  400d92:	88fb      	ldrh	r3, [r7, #6]
  400d94:	683a      	ldr	r2, [r7, #0]
  400d96:	fb02 f203 	mul.w	r2, r2, r3
  400d9a:	4b0c      	ldr	r3, [pc, #48]	; (400dcc <_get_cycles_for_us_internal+0xf8>)
  400d9c:	4413      	add	r3, r2
  400d9e:	4a05      	ldr	r2, [pc, #20]	; (400db4 <_get_cycles_for_us_internal+0xe0>)
  400da0:	fba2 2303 	umull	r2, r3, r2, r3
  400da4:	0c9b      	lsrs	r3, r3, #18
	}
}
  400da6:	4618      	mov	r0, r3
  400da8:	370c      	adds	r7, #12
  400daa:	46bd      	mov	sp, r7
  400dac:	f85d 7b04 	ldr.w	r7, [sp], #4
  400db0:	4770      	bx	lr
  400db2:	bf00      	nop
  400db4:	431bde83 	.word	0x431bde83
  400db8:	0a7c5ac5 	.word	0x0a7c5ac5
  400dbc:	cccccccd 	.word	0xcccccccd
  400dc0:	d1b71759 	.word	0xd1b71759
  400dc4:	51eb851f 	.word	0x51eb851f
  400dc8:	10624dd3 	.word	0x10624dd3
  400dcc:	000f423f 	.word	0x000f423f

00400dd0 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
  400dd0:	b580      	push	{r7, lr}
  400dd2:	b082      	sub	sp, #8
  400dd4:	af00      	add	r7, sp, #0
  400dd6:	4603      	mov	r3, r0
  400dd8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  400dda:	88fb      	ldrh	r3, [r7, #6]
  400ddc:	2209      	movs	r2, #9
  400dde:	4904      	ldr	r1, [pc, #16]	; (400df0 <_get_cycles_for_us+0x20>)
  400de0:	4618      	mov	r0, r3
  400de2:	4b04      	ldr	r3, [pc, #16]	; (400df4 <_get_cycles_for_us+0x24>)
  400de4:	4798      	blx	r3
  400de6:	4603      	mov	r3, r0
}
  400de8:	4618      	mov	r0, r3
  400dea:	3708      	adds	r7, #8
  400dec:	46bd      	mov	sp, r7
  400dee:	bd80      	pop	{r7, pc}
  400df0:	11e1a300 	.word	0x11e1a300
  400df4:	00400cd5 	.word	0x00400cd5

00400df8 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
  400df8:	b480      	push	{r7}
  400dfa:	b083      	sub	sp, #12
  400dfc:	af00      	add	r7, sp, #0
  400dfe:	4603      	mov	r3, r0
  400e00:	6039      	str	r1, [r7, #0]
  400e02:	80fb      	strh	r3, [r7, #6]
  400e04:	4613      	mov	r3, r2
  400e06:	717b      	strb	r3, [r7, #5]
	switch (power) {
  400e08:	797b      	ldrb	r3, [r7, #5]
  400e0a:	3b05      	subs	r3, #5
  400e0c:	2b04      	cmp	r3, #4
  400e0e:	d84b      	bhi.n	400ea8 <_get_cycles_for_ms_internal+0xb0>
  400e10:	a201      	add	r2, pc, #4	; (adr r2, 400e18 <_get_cycles_for_ms_internal+0x20>)
  400e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400e16:	bf00      	nop
  400e18:	00400e8d 	.word	0x00400e8d
  400e1c:	00400e7b 	.word	0x00400e7b
  400e20:	00400e61 	.word	0x00400e61
  400e24:	00400e47 	.word	0x00400e47
  400e28:	00400e2d 	.word	0x00400e2d
	case 9:
		return (ms * (freq / 1000000) * 1000);
  400e2c:	88fb      	ldrh	r3, [r7, #6]
  400e2e:	683a      	ldr	r2, [r7, #0]
  400e30:	4925      	ldr	r1, [pc, #148]	; (400ec8 <_get_cycles_for_ms_internal+0xd0>)
  400e32:	fba1 1202 	umull	r1, r2, r1, r2
  400e36:	0c92      	lsrs	r2, r2, #18
  400e38:	fb02 f303 	mul.w	r3, r2, r3
  400e3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  400e40:	fb02 f303 	mul.w	r3, r2, r3
  400e44:	e03a      	b.n	400ebc <_get_cycles_for_ms_internal+0xc4>
	case 8:
		return (ms * (freq / 100000) * 100);
  400e46:	88fb      	ldrh	r3, [r7, #6]
  400e48:	683a      	ldr	r2, [r7, #0]
  400e4a:	0952      	lsrs	r2, r2, #5
  400e4c:	491f      	ldr	r1, [pc, #124]	; (400ecc <_get_cycles_for_ms_internal+0xd4>)
  400e4e:	fba1 1202 	umull	r1, r2, r1, r2
  400e52:	09d2      	lsrs	r2, r2, #7
  400e54:	fb02 f303 	mul.w	r3, r2, r3
  400e58:	2264      	movs	r2, #100	; 0x64
  400e5a:	fb02 f303 	mul.w	r3, r2, r3
  400e5e:	e02d      	b.n	400ebc <_get_cycles_for_ms_internal+0xc4>
	case 7:
		return (ms * (freq / 10000) * 10);
  400e60:	88fb      	ldrh	r3, [r7, #6]
  400e62:	683a      	ldr	r2, [r7, #0]
  400e64:	491a      	ldr	r1, [pc, #104]	; (400ed0 <_get_cycles_for_ms_internal+0xd8>)
  400e66:	fba1 1202 	umull	r1, r2, r1, r2
  400e6a:	0b52      	lsrs	r2, r2, #13
  400e6c:	fb02 f203 	mul.w	r2, r2, r3
  400e70:	4613      	mov	r3, r2
  400e72:	009b      	lsls	r3, r3, #2
  400e74:	4413      	add	r3, r2
  400e76:	005b      	lsls	r3, r3, #1
  400e78:	e020      	b.n	400ebc <_get_cycles_for_ms_internal+0xc4>
	case 6:
		return (ms * (freq / 1000));
  400e7a:	88fb      	ldrh	r3, [r7, #6]
  400e7c:	683a      	ldr	r2, [r7, #0]
  400e7e:	4915      	ldr	r1, [pc, #84]	; (400ed4 <_get_cycles_for_ms_internal+0xdc>)
  400e80:	fba1 1202 	umull	r1, r2, r1, r2
  400e84:	0992      	lsrs	r2, r2, #6
  400e86:	fb02 f303 	mul.w	r3, r2, r3
  400e8a:	e017      	b.n	400ebc <_get_cycles_for_ms_internal+0xc4>
	case 5:
		return (ms * (freq / 100) + 9) / 10;
  400e8c:	88fb      	ldrh	r3, [r7, #6]
  400e8e:	683a      	ldr	r2, [r7, #0]
  400e90:	4911      	ldr	r1, [pc, #68]	; (400ed8 <_get_cycles_for_ms_internal+0xe0>)
  400e92:	fba1 1202 	umull	r1, r2, r1, r2
  400e96:	0952      	lsrs	r2, r2, #5
  400e98:	fb02 f303 	mul.w	r3, r2, r3
  400e9c:	3309      	adds	r3, #9
  400e9e:	4a0f      	ldr	r2, [pc, #60]	; (400edc <_get_cycles_for_ms_internal+0xe4>)
  400ea0:	fba2 2303 	umull	r2, r3, r2, r3
  400ea4:	08db      	lsrs	r3, r3, #3
  400ea6:	e009      	b.n	400ebc <_get_cycles_for_ms_internal+0xc4>
	default:
		return (ms * (freq / 1) + 999) / 1000;
  400ea8:	88fb      	ldrh	r3, [r7, #6]
  400eaa:	683a      	ldr	r2, [r7, #0]
  400eac:	fb02 f303 	mul.w	r3, r2, r3
  400eb0:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  400eb4:	4a07      	ldr	r2, [pc, #28]	; (400ed4 <_get_cycles_for_ms_internal+0xdc>)
  400eb6:	fba2 2303 	umull	r2, r3, r2, r3
  400eba:	099b      	lsrs	r3, r3, #6
	}
}
  400ebc:	4618      	mov	r0, r3
  400ebe:	370c      	adds	r7, #12
  400ec0:	46bd      	mov	sp, r7
  400ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec6:	4770      	bx	lr
  400ec8:	431bde83 	.word	0x431bde83
  400ecc:	0a7c5ac5 	.word	0x0a7c5ac5
  400ed0:	d1b71759 	.word	0xd1b71759
  400ed4:	10624dd3 	.word	0x10624dd3
  400ed8:	51eb851f 	.word	0x51eb851f
  400edc:	cccccccd 	.word	0xcccccccd

00400ee0 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
  400ee0:	b580      	push	{r7, lr}
  400ee2:	b082      	sub	sp, #8
  400ee4:	af00      	add	r7, sp, #0
  400ee6:	4603      	mov	r3, r0
  400ee8:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_HCLK_FREQUENCY, HCLK_FREQ_POWER);
  400eea:	88fb      	ldrh	r3, [r7, #6]
  400eec:	2209      	movs	r2, #9
  400eee:	4904      	ldr	r1, [pc, #16]	; (400f00 <_get_cycles_for_ms+0x20>)
  400ef0:	4618      	mov	r0, r3
  400ef2:	4b04      	ldr	r3, [pc, #16]	; (400f04 <_get_cycles_for_ms+0x24>)
  400ef4:	4798      	blx	r3
  400ef6:	4603      	mov	r3, r0
}
  400ef8:	4618      	mov	r0, r3
  400efa:	3708      	adds	r7, #8
  400efc:	46bd      	mov	sp, r7
  400efe:	bd80      	pop	{r7, pc}
  400f00:	11e1a300 	.word	0x11e1a300
  400f04:	00400df9 	.word	0x00400df9

00400f08 <_delay_cycles>:
 * \note In theory, a single loop runs take 2 cycles or more. But we find it
 * really only needs 1 cycle through debugging.
 *
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
  400f08:	b480      	push	{r7}
  400f0a:	b083      	sub	sp, #12
  400f0c:	af00      	add	r7, sp, #0
  400f0e:	6078      	str	r0, [r7, #4]
  400f10:	6039      	str	r1, [r7, #0]

00400f12 <__delay>:
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm("__delay:\n"
  400f12:	3901      	subs	r1, #1
  400f14:	d8fd      	bhi.n	400f12 <__delay>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
  400f16:	bf00      	nop
  400f18:	370c      	adds	r7, #12
  400f1a:	46bd      	mov	sp, r7
  400f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f20:	4770      	bx	lr

00400f22 <hri_efc_write_EEFC_FMR_FWS_bf>:
	tmp = (tmp & EEFC_FMR_FWS(mask)) >> EEFC_FMR_FWS_Pos;
	return tmp;
}

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
  400f22:	b480      	push	{r7}
  400f24:	b085      	sub	sp, #20
  400f26:	af00      	add	r7, sp, #0
  400f28:	6078      	str	r0, [r7, #4]
  400f2a:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	681b      	ldr	r3, [r3, #0]
  400f30:	60fb      	str	r3, [r7, #12]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400f32:	68fb      	ldr	r3, [r7, #12]
  400f34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  400f38:	60fb      	str	r3, [r7, #12]
	tmp |= EEFC_FMR_FWS(data);
  400f3a:	683b      	ldr	r3, [r7, #0]
  400f3c:	021b      	lsls	r3, r3, #8
  400f3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  400f42:	68fa      	ldr	r2, [r7, #12]
  400f44:	4313      	orrs	r3, r2
  400f46:	60fb      	str	r3, [r7, #12]
	((Efc *)hw)->EEFC_FMR = tmp;
  400f48:	687b      	ldr	r3, [r7, #4]
  400f4a:	68fa      	ldr	r2, [r7, #12]
  400f4c:	601a      	str	r2, [r3, #0]
	EFC_CRITICAL_SECTION_LEAVE();
}
  400f4e:	bf00      	nop
  400f50:	3714      	adds	r7, #20
  400f52:	46bd      	mov	sp, r7
  400f54:	f85d 7b04 	ldr.w	r7, [sp], #4
  400f58:	4770      	bx	lr
	...

00400f5c <_fpu_enable>:

/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
  400f5c:	b580      	push	{r7, lr}
  400f5e:	b082      	sub	sp, #8
  400f60:	af00      	add	r7, sp, #0
	CRITICAL_SECTION_ENTER()
  400f62:	1d3b      	adds	r3, r7, #4
  400f64:	4618      	mov	r0, r3
  400f66:	4b0b      	ldr	r3, [pc, #44]	; (400f94 <_fpu_enable+0x38>)
  400f68:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400f6a:	4a0b      	ldr	r2, [pc, #44]	; (400f98 <_fpu_enable+0x3c>)
  400f6c:	4b0a      	ldr	r3, [pc, #40]	; (400f98 <_fpu_enable+0x3c>)
  400f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  400f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400f76:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400f7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400f7e:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400f82:	1d3b      	adds	r3, r7, #4
  400f84:	4618      	mov	r0, r3
  400f86:	4b05      	ldr	r3, [pc, #20]	; (400f9c <_fpu_enable+0x40>)
  400f88:	4798      	blx	r3
}
  400f8a:	bf00      	nop
  400f8c:	3708      	adds	r7, #8
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd80      	pop	{r7, pc}
  400f92:	bf00      	nop
  400f94:	00400885 	.word	0x00400885
  400f98:	e000ed00 	.word	0xe000ed00
  400f9c:	004008ab 	.word	0x004008ab

00400fa0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400fa0:	b580      	push	{r7, lr}
  400fa2:	af00      	add	r7, sp, #0
	_fpu_enable();
  400fa4:	4b04      	ldr	r3, [pc, #16]	; (400fb8 <_init_chip+0x18>)
  400fa6:	4798      	blx	r3
	hri_efc_write_EEFC_FMR_FWS_bf(EFC, CONF_EFC_WAIT_STATE);
  400fa8:	2105      	movs	r1, #5
  400faa:	4804      	ldr	r0, [pc, #16]	; (400fbc <_init_chip+0x1c>)
  400fac:	4b04      	ldr	r3, [pc, #16]	; (400fc0 <_init_chip+0x20>)
  400fae:	4798      	blx	r3
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400fb0:	4b04      	ldr	r3, [pc, #16]	; (400fc4 <_init_chip+0x24>)
  400fb2:	4798      	blx	r3
}
  400fb4:	bf00      	nop
  400fb6:	bd80      	pop	{r7, pc}
  400fb8:	00400f5d 	.word	0x00400f5d
  400fbc:	400e0c00 	.word	0x400e0c00
  400fc0:	00400f23 	.word	0x00400f23
  400fc4:	004012c9 	.word	0x004012c9

00400fc8 <hri_pmc_get_SR_MOSCXTS_bit>:
{
  400fc8:	b480      	push	{r7}
  400fca:	b083      	sub	sp, #12
  400fcc:	af00      	add	r7, sp, #0
  400fce:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400fd0:	687b      	ldr	r3, [r7, #4]
  400fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400fd4:	f003 0301 	and.w	r3, r3, #1
  400fd8:	2b00      	cmp	r3, #0
  400fda:	bf14      	ite	ne
  400fdc:	2301      	movne	r3, #1
  400fde:	2300      	moveq	r3, #0
  400fe0:	b2db      	uxtb	r3, r3
}
  400fe2:	4618      	mov	r0, r3
  400fe4:	370c      	adds	r7, #12
  400fe6:	46bd      	mov	sp, r7
  400fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
  400fec:	4770      	bx	lr

00400fee <hri_pmc_get_SR_LOCKA_bit>:
{
  400fee:	b480      	push	{r7}
  400ff0:	b083      	sub	sp, #12
  400ff2:	af00      	add	r7, sp, #0
  400ff4:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400ff6:	687b      	ldr	r3, [r7, #4]
  400ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  400ffa:	f003 0302 	and.w	r3, r3, #2
  400ffe:	2b00      	cmp	r3, #0
  401000:	bf14      	ite	ne
  401002:	2301      	movne	r3, #1
  401004:	2300      	moveq	r3, #0
  401006:	b2db      	uxtb	r3, r3
}
  401008:	4618      	mov	r0, r3
  40100a:	370c      	adds	r7, #12
  40100c:	46bd      	mov	sp, r7
  40100e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401012:	4770      	bx	lr

00401014 <hri_pmc_get_SR_MCKRDY_bit>:
{
  401014:	b480      	push	{r7}
  401016:	b083      	sub	sp, #12
  401018:	af00      	add	r7, sp, #0
  40101a:	6078      	str	r0, [r7, #4]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40101c:	687b      	ldr	r3, [r7, #4]
  40101e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401020:	f003 0308 	and.w	r3, r3, #8
  401024:	2b00      	cmp	r3, #0
  401026:	bf14      	ite	ne
  401028:	2301      	movne	r3, #1
  40102a:	2300      	moveq	r3, #0
  40102c:	b2db      	uxtb	r3, r3
}
  40102e:	4618      	mov	r0, r3
  401030:	370c      	adds	r7, #12
  401032:	46bd      	mov	sp, r7
  401034:	f85d 7b04 	ldr.w	r7, [sp], #4
  401038:	4770      	bx	lr

0040103a <hri_pmc_set_CKGR_MOR_reg>:
{
  40103a:	b480      	push	{r7}
  40103c:	b083      	sub	sp, #12
  40103e:	af00      	add	r7, sp, #0
  401040:	6078      	str	r0, [r7, #4]
  401042:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR |= mask;
  401044:	687b      	ldr	r3, [r7, #4]
  401046:	6a1a      	ldr	r2, [r3, #32]
  401048:	683b      	ldr	r3, [r7, #0]
  40104a:	431a      	orrs	r2, r3
  40104c:	687b      	ldr	r3, [r7, #4]
  40104e:	621a      	str	r2, [r3, #32]
}
  401050:	bf00      	nop
  401052:	370c      	adds	r7, #12
  401054:	46bd      	mov	sp, r7
  401056:	f85d 7b04 	ldr.w	r7, [sp], #4
  40105a:	4770      	bx	lr

0040105c <hri_pmc_write_CKGR_MOR_reg>:
{
  40105c:	b480      	push	{r7}
  40105e:	b083      	sub	sp, #12
  401060:	af00      	add	r7, sp, #0
  401062:	6078      	str	r0, [r7, #4]
  401064:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_MOR = data;
  401066:	687b      	ldr	r3, [r7, #4]
  401068:	683a      	ldr	r2, [r7, #0]
  40106a:	621a      	str	r2, [r3, #32]
}
  40106c:	bf00      	nop
  40106e:	370c      	adds	r7, #12
  401070:	46bd      	mov	sp, r7
  401072:	f85d 7b04 	ldr.w	r7, [sp], #4
  401076:	4770      	bx	lr

00401078 <hri_pmc_read_CKGR_MOR_reg>:
{
  401078:	b480      	push	{r7}
  40107a:	b083      	sub	sp, #12
  40107c:	af00      	add	r7, sp, #0
  40107e:	6078      	str	r0, [r7, #4]
	return ((Pmc *)hw)->CKGR_MOR;
  401080:	687b      	ldr	r3, [r7, #4]
  401082:	6a1b      	ldr	r3, [r3, #32]
}
  401084:	4618      	mov	r0, r3
  401086:	370c      	adds	r7, #12
  401088:	46bd      	mov	sp, r7
  40108a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40108e:	4770      	bx	lr

00401090 <hri_pmc_write_CKGR_PLLAR_MULA_bf>:
{
  401090:	b480      	push	{r7}
  401092:	b085      	sub	sp, #20
  401094:	af00      	add	r7, sp, #0
  401096:	6078      	str	r0, [r7, #4]
  401098:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  40109a:	687b      	ldr	r3, [r7, #4]
  40109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40109e:	60fb      	str	r3, [r7, #12]
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4010a0:	68fa      	ldr	r2, [r7, #12]
  4010a2:	4b09      	ldr	r3, [pc, #36]	; (4010c8 <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x38>)
  4010a4:	4013      	ands	r3, r2
  4010a6:	60fb      	str	r3, [r7, #12]
	tmp |= CKGR_PLLAR_MULA(data);
  4010a8:	683b      	ldr	r3, [r7, #0]
  4010aa:	041a      	lsls	r2, r3, #16
  4010ac:	4b07      	ldr	r3, [pc, #28]	; (4010cc <hri_pmc_write_CKGR_PLLAR_MULA_bf+0x3c>)
  4010ae:	4013      	ands	r3, r2
  4010b0:	68fa      	ldr	r2, [r7, #12]
  4010b2:	4313      	orrs	r3, r2
  4010b4:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4010b6:	687b      	ldr	r3, [r7, #4]
  4010b8:	68fa      	ldr	r2, [r7, #12]
  4010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
  4010bc:	bf00      	nop
  4010be:	3714      	adds	r7, #20
  4010c0:	46bd      	mov	sp, r7
  4010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010c6:	4770      	bx	lr
  4010c8:	f800ffff 	.word	0xf800ffff
  4010cc:	07ff0000 	.word	0x07ff0000

004010d0 <hri_pmc_write_CKGR_PLLAR_reg>:
{
  4010d0:	b480      	push	{r7}
  4010d2:	b083      	sub	sp, #12
  4010d4:	af00      	add	r7, sp, #0
  4010d6:	6078      	str	r0, [r7, #4]
  4010d8:	6039      	str	r1, [r7, #0]
	((Pmc *)hw)->CKGR_PLLAR = data;
  4010da:	687b      	ldr	r3, [r7, #4]
  4010dc:	683a      	ldr	r2, [r7, #0]
  4010de:	629a      	str	r2, [r3, #40]	; 0x28
}
  4010e0:	bf00      	nop
  4010e2:	370c      	adds	r7, #12
  4010e4:	46bd      	mov	sp, r7
  4010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4010ea:	4770      	bx	lr

004010ec <hri_pmc_write_MCKR_CSS_bf>:
{
  4010ec:	b480      	push	{r7}
  4010ee:	b085      	sub	sp, #20
  4010f0:	af00      	add	r7, sp, #0
  4010f2:	6078      	str	r0, [r7, #4]
  4010f4:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4010f6:	687b      	ldr	r3, [r7, #4]
  4010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4010fa:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_CSS_Msk;
  4010fc:	68fb      	ldr	r3, [r7, #12]
  4010fe:	f023 0303 	bic.w	r3, r3, #3
  401102:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_CSS(data);
  401104:	683b      	ldr	r3, [r7, #0]
  401106:	f003 0303 	and.w	r3, r3, #3
  40110a:	68fa      	ldr	r2, [r7, #12]
  40110c:	4313      	orrs	r3, r2
  40110e:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  401110:	687b      	ldr	r3, [r7, #4]
  401112:	68fa      	ldr	r2, [r7, #12]
  401114:	631a      	str	r2, [r3, #48]	; 0x30
}
  401116:	bf00      	nop
  401118:	3714      	adds	r7, #20
  40111a:	46bd      	mov	sp, r7
  40111c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401120:	4770      	bx	lr

00401122 <hri_pmc_write_MCKR_PRES_bf>:
{
  401122:	b480      	push	{r7}
  401124:	b085      	sub	sp, #20
  401126:	af00      	add	r7, sp, #0
  401128:	6078      	str	r0, [r7, #4]
  40112a:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  40112c:	687b      	ldr	r3, [r7, #4]
  40112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401130:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_PRES_Msk;
  401132:	68fb      	ldr	r3, [r7, #12]
  401134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401138:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_PRES(data);
  40113a:	683b      	ldr	r3, [r7, #0]
  40113c:	011b      	lsls	r3, r3, #4
  40113e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401142:	68fa      	ldr	r2, [r7, #12]
  401144:	4313      	orrs	r3, r2
  401146:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  401148:	687b      	ldr	r3, [r7, #4]
  40114a:	68fa      	ldr	r2, [r7, #12]
  40114c:	631a      	str	r2, [r3, #48]	; 0x30
}
  40114e:	bf00      	nop
  401150:	3714      	adds	r7, #20
  401152:	46bd      	mov	sp, r7
  401154:	f85d 7b04 	ldr.w	r7, [sp], #4
  401158:	4770      	bx	lr

0040115a <hri_pmc_write_MCKR_MDIV_bf>:
{
  40115a:	b480      	push	{r7}
  40115c:	b085      	sub	sp, #20
  40115e:	af00      	add	r7, sp, #0
  401160:	6078      	str	r0, [r7, #4]
  401162:	6039      	str	r1, [r7, #0]
	tmp = ((Pmc *)hw)->PMC_MCKR;
  401164:	687b      	ldr	r3, [r7, #4]
  401166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401168:	60fb      	str	r3, [r7, #12]
	tmp &= ~PMC_MCKR_MDIV_Msk;
  40116a:	68fb      	ldr	r3, [r7, #12]
  40116c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401170:	60fb      	str	r3, [r7, #12]
	tmp |= PMC_MCKR_MDIV(data);
  401172:	683b      	ldr	r3, [r7, #0]
  401174:	021b      	lsls	r3, r3, #8
  401176:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40117a:	68fa      	ldr	r2, [r7, #12]
  40117c:	4313      	orrs	r3, r2
  40117e:	60fb      	str	r3, [r7, #12]
	((Pmc *)hw)->PMC_MCKR = tmp;
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	68fa      	ldr	r2, [r7, #12]
  401184:	631a      	str	r2, [r3, #48]	; 0x30
}
  401186:	bf00      	nop
  401188:	3714      	adds	r7, #20
  40118a:	46bd      	mov	sp, r7
  40118c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401190:	4770      	bx	lr
	...

00401194 <_pmc_init_sources>:
 * \brief Initializes clock generators
 *
 * All clock sources are running when this function returns.
 */
static void _pmc_init_sources(void)
{
  401194:	b580      	push	{r7, lr}
  401196:	b082      	sub	sp, #8
  401198:	af00      	add	r7, sp, #0
	uint32_t data = 0;
  40119a:	2300      	movs	r3, #0
  40119c:	607b      	str	r3, [r7, #4]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40119e:	481c      	ldr	r0, [pc, #112]	; (401210 <_pmc_init_sources+0x7c>)
  4011a0:	4b1c      	ldr	r3, [pc, #112]	; (401214 <_pmc_init_sources+0x80>)
  4011a2:	4798      	blx	r3
  4011a4:	4603      	mov	r3, r0
  4011a6:	f023 0302 	bic.w	r3, r3, #2
  4011aa:	607b      	str	r3, [r7, #4]
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4011ac:	687a      	ldr	r2, [r7, #4]
  4011ae:	4b1a      	ldr	r3, [pc, #104]	; (401218 <_pmc_init_sources+0x84>)
  4011b0:	4313      	orrs	r3, r2
  4011b2:	607b      	str	r3, [r7, #4]
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
  4011b4:	6879      	ldr	r1, [r7, #4]
  4011b6:	4816      	ldr	r0, [pc, #88]	; (401210 <_pmc_init_sources+0x7c>)
  4011b8:	4b18      	ldr	r3, [pc, #96]	; (40121c <_pmc_init_sources+0x88>)
  4011ba:	4798      	blx	r3
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4011bc:	bf00      	nop
  4011be:	4814      	ldr	r0, [pc, #80]	; (401210 <_pmc_init_sources+0x7c>)
  4011c0:	4b17      	ldr	r3, [pc, #92]	; (401220 <_pmc_init_sources+0x8c>)
  4011c2:	4798      	blx	r3
  4011c4:	4603      	mov	r3, r0
  4011c6:	f083 0301 	eor.w	r3, r3, #1
  4011ca:	b2db      	uxtb	r3, r3
  4011cc:	2b00      	cmp	r3, #0
  4011ce:	d1f6      	bne.n	4011be <_pmc_init_sources+0x2a>
		/* Wait until the XTAL to stabilize */
	}
	hri_pmc_set_CKGR_MOR_reg(PMC, CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL);
  4011d0:	4914      	ldr	r1, [pc, #80]	; (401224 <_pmc_init_sources+0x90>)
  4011d2:	480f      	ldr	r0, [pc, #60]	; (401210 <_pmc_init_sources+0x7c>)
  4011d4:	4b14      	ldr	r3, [pc, #80]	; (401228 <_pmc_init_sources+0x94>)
  4011d6:	4798      	blx	r3
#endif
#endif
#endif

#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4011d8:	4b14      	ldr	r3, [pc, #80]	; (40122c <_pmc_init_sources+0x98>)
  4011da:	607b      	str	r3, [r7, #4]
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
  4011dc:	2100      	movs	r1, #0
  4011de:	480c      	ldr	r0, [pc, #48]	; (401210 <_pmc_init_sources+0x7c>)
  4011e0:	4b13      	ldr	r3, [pc, #76]	; (401230 <_pmc_init_sources+0x9c>)
  4011e2:	4798      	blx	r3
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
  4011e4:	687b      	ldr	r3, [r7, #4]
  4011e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4011ea:	4619      	mov	r1, r3
  4011ec:	4808      	ldr	r0, [pc, #32]	; (401210 <_pmc_init_sources+0x7c>)
  4011ee:	4b11      	ldr	r3, [pc, #68]	; (401234 <_pmc_init_sources+0xa0>)
  4011f0:	4798      	blx	r3
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4011f2:	bf00      	nop
  4011f4:	4806      	ldr	r0, [pc, #24]	; (401210 <_pmc_init_sources+0x7c>)
  4011f6:	4b10      	ldr	r3, [pc, #64]	; (401238 <_pmc_init_sources+0xa4>)
  4011f8:	4798      	blx	r3
  4011fa:	4603      	mov	r3, r0
  4011fc:	f083 0301 	eor.w	r3, r3, #1
  401200:	b2db      	uxtb	r3, r3
  401202:	2b00      	cmp	r3, #0
  401204:	d1f6      	bne.n	4011f4 <_pmc_init_sources+0x60>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  401206:	bf00      	nop
  401208:	3708      	adds	r7, #8
  40120a:	46bd      	mov	sp, r7
  40120c:	bd80      	pop	{r7, pc}
  40120e:	bf00      	nop
  401210:	400e0600 	.word	0x400e0600
  401214:	00401079 	.word	0x00401079
  401218:	00373e01 	.word	0x00373e01
  40121c:	0040105d 	.word	0x0040105d
  401220:	00400fc9 	.word	0x00400fc9
  401224:	01370000 	.word	0x01370000
  401228:	0040103b 	.word	0x0040103b
  40122c:	00183f01 	.word	0x00183f01
  401230:	00401091 	.word	0x00401091
  401234:	004010d1 	.word	0x004010d1
  401238:	00400fef 	.word	0x00400fef

0040123c <_pmc_init_master_clock>:
 * \brief Initializes master clock generators
 *
 * Master clock are running when this function returns.
 */
static void _pmc_init_master_clock(void)
{
  40123c:	b580      	push	{r7, lr}
  40123e:	af00      	add	r7, sp, #0
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
  401240:	2100      	movs	r1, #0
  401242:	4815      	ldr	r0, [pc, #84]	; (401298 <_pmc_init_master_clock+0x5c>)
  401244:	4b15      	ldr	r3, [pc, #84]	; (40129c <_pmc_init_master_clock+0x60>)
  401246:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401248:	bf00      	nop
  40124a:	4813      	ldr	r0, [pc, #76]	; (401298 <_pmc_init_master_clock+0x5c>)
  40124c:	4b14      	ldr	r3, [pc, #80]	; (4012a0 <_pmc_init_master_clock+0x64>)
  40124e:	4798      	blx	r3
  401250:	4603      	mov	r3, r0
  401252:	f083 0301 	eor.w	r3, r3, #1
  401256:	b2db      	uxtb	r3, r3
  401258:	2b00      	cmp	r3, #0
  40125a:	d1f6      	bne.n	40124a <_pmc_init_master_clock+0xe>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
  40125c:	2101      	movs	r1, #1
  40125e:	480e      	ldr	r0, [pc, #56]	; (401298 <_pmc_init_master_clock+0x5c>)
  401260:	4b10      	ldr	r3, [pc, #64]	; (4012a4 <_pmc_init_master_clock+0x68>)
  401262:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401264:	bf00      	nop
  401266:	480c      	ldr	r0, [pc, #48]	; (401298 <_pmc_init_master_clock+0x5c>)
  401268:	4b0d      	ldr	r3, [pc, #52]	; (4012a0 <_pmc_init_master_clock+0x64>)
  40126a:	4798      	blx	r3
  40126c:	4603      	mov	r3, r0
  40126e:	f083 0301 	eor.w	r3, r3, #1
  401272:	b2db      	uxtb	r3, r3
  401274:	2b00      	cmp	r3, #0
  401276:	d1f6      	bne.n	401266 <_pmc_init_master_clock+0x2a>
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
  401278:	2102      	movs	r1, #2
  40127a:	4807      	ldr	r0, [pc, #28]	; (401298 <_pmc_init_master_clock+0x5c>)
  40127c:	4b0a      	ldr	r3, [pc, #40]	; (4012a8 <_pmc_init_master_clock+0x6c>)
  40127e:	4798      	blx	r3
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  401280:	bf00      	nop
  401282:	4805      	ldr	r0, [pc, #20]	; (401298 <_pmc_init_master_clock+0x5c>)
  401284:	4b06      	ldr	r3, [pc, #24]	; (4012a0 <_pmc_init_master_clock+0x64>)
  401286:	4798      	blx	r3
  401288:	4603      	mov	r3, r0
  40128a:	f083 0301 	eor.w	r3, r3, #1
  40128e:	b2db      	uxtb	r3, r3
  401290:	2b00      	cmp	r3, #0
  401292:	d1f6      	bne.n	401282 <_pmc_init_master_clock+0x46>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  401294:	bf00      	nop
  401296:	bd80      	pop	{r7, pc}
  401298:	400e0600 	.word	0x400e0600
  40129c:	00401123 	.word	0x00401123
  4012a0:	00401015 	.word	0x00401015
  4012a4:	0040115b 	.word	0x0040115b
  4012a8:	004010ed 	.word	0x004010ed

004012ac <_pmc_init_program_clock>:
 * \brief Initializes programmable clock generators
 *
 * Programmable clock are running when this function returns.
 */
static void _pmc_init_program_clock(void)
{
  4012ac:	b480      	push	{r7}
  4012ae:	af00      	add	r7, sp, #0
	while (!hri_pmc_get_SR_PCKRDY0_bit(PMC)) {
		/* Wait until PCK6 clock is ready */
	}
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_PCK6);
#endif
}
  4012b0:	bf00      	nop
  4012b2:	46bd      	mov	sp, r7
  4012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012b8:	4770      	bx	lr

004012ba <_pmc_init_fs_clock>:
 * \brief Initializes USB FS clock generators
 *
 * USB FS clock are running when this function returns.
 */
static void _pmc_init_fs_clock(void)
{
  4012ba:	b480      	push	{r7}
  4012bc:	af00      	add	r7, sp, #0
	}
	data |= PMC_USB_USBDIV(CONF_USB_48M_DIV - 1);
	hri_pmc_write_USB_reg(PMC, data);
	hri_pmc_write_SCER_reg(PMC, PMC_SCER_USBCLK);
#endif
}
  4012be:	bf00      	nop
  4012c0:	46bd      	mov	sp, r7
  4012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012c6:	4770      	bx	lr

004012c8 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  4012c8:	b580      	push	{r7, lr}
  4012ca:	af00      	add	r7, sp, #0
	_pmc_init_sources();
  4012cc:	4b04      	ldr	r3, [pc, #16]	; (4012e0 <_pmc_init+0x18>)
  4012ce:	4798      	blx	r3
	_pmc_init_master_clock();
  4012d0:	4b04      	ldr	r3, [pc, #16]	; (4012e4 <_pmc_init+0x1c>)
  4012d2:	4798      	blx	r3
	_pmc_init_program_clock();
  4012d4:	4b04      	ldr	r3, [pc, #16]	; (4012e8 <_pmc_init+0x20>)
  4012d6:	4798      	blx	r3
	_pmc_init_fs_clock();
  4012d8:	4b04      	ldr	r3, [pc, #16]	; (4012ec <_pmc_init+0x24>)
  4012da:	4798      	blx	r3
}
  4012dc:	bf00      	nop
  4012de:	bd80      	pop	{r7, pc}
  4012e0:	00401195 	.word	0x00401195
  4012e4:	0040123d 	.word	0x0040123d
  4012e8:	004012ad 	.word	0x004012ad
  4012ec:	004012bb 	.word	0x004012bb

004012f0 <hri_spi_read_RDR_RD_bf>:
{
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD(mask)) >> SPI_RDR_RD_Pos;
}

static inline hri_spi_rdr_reg_t hri_spi_read_RDR_RD_bf(const void *const hw)
{
  4012f0:	b480      	push	{r7}
  4012f2:	b083      	sub	sp, #12
  4012f4:	af00      	add	r7, sp, #0
  4012f6:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  4012f8:	687b      	ldr	r3, [r7, #4]
  4012fa:	689b      	ldr	r3, [r3, #8]
  4012fc:	b29b      	uxth	r3, r3
}
  4012fe:	4618      	mov	r0, r3
  401300:	370c      	adds	r7, #12
  401302:	46bd      	mov	sp, r7
  401304:	f85d 7b04 	ldr.w	r7, [sp], #4
  401308:	4770      	bx	lr

0040130a <hri_spi_get_SR_SPIENS_bit>:
{
	return (((Spi *)hw)->SPI_SR & SPI_SR_UNDES) > 0;
}

static inline bool hri_spi_get_SR_SPIENS_bit(const void *const hw)
{
  40130a:	b480      	push	{r7}
  40130c:	b083      	sub	sp, #12
  40130e:	af00      	add	r7, sp, #0
  401310:	6078      	str	r0, [r7, #4]
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  401312:	687b      	ldr	r3, [r7, #4]
  401314:	691b      	ldr	r3, [r3, #16]
  401316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  40131a:	2b00      	cmp	r3, #0
  40131c:	bf14      	ite	ne
  40131e:	2301      	movne	r3, #1
  401320:	2300      	moveq	r3, #0
  401322:	b2db      	uxtb	r3, r3
}
  401324:	4618      	mov	r0, r3
  401326:	370c      	adds	r7, #12
  401328:	46bd      	mov	sp, r7
  40132a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40132e:	4770      	bx	lr

00401330 <hri_spi_get_SR_reg>:

static inline hri_spi_sr_reg_t hri_spi_get_SR_reg(const void *const hw, hri_spi_sr_reg_t mask)
{
  401330:	b480      	push	{r7}
  401332:	b085      	sub	sp, #20
  401334:	af00      	add	r7, sp, #0
  401336:	6078      	str	r0, [r7, #4]
  401338:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	tmp = ((Spi *)hw)->SPI_SR;
  40133a:	687b      	ldr	r3, [r7, #4]
  40133c:	691b      	ldr	r3, [r3, #16]
  40133e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  401340:	68fa      	ldr	r2, [r7, #12]
  401342:	683b      	ldr	r3, [r7, #0]
  401344:	4013      	ands	r3, r2
  401346:	60fb      	str	r3, [r7, #12]
	return tmp;
  401348:	68fb      	ldr	r3, [r7, #12]
}
  40134a:	4618      	mov	r0, r3
  40134c:	3714      	adds	r7, #20
  40134e:	46bd      	mov	sp, r7
  401350:	f85d 7b04 	ldr.w	r7, [sp], #4
  401354:	4770      	bx	lr

00401356 <hri_spi_read_SR_reg>:

static inline hri_spi_sr_reg_t hri_spi_read_SR_reg(const void *const hw)
{
  401356:	b480      	push	{r7}
  401358:	b083      	sub	sp, #12
  40135a:	af00      	add	r7, sp, #0
  40135c:	6078      	str	r0, [r7, #4]
	return ((Spi *)hw)->SPI_SR;
  40135e:	687b      	ldr	r3, [r7, #4]
  401360:	691b      	ldr	r3, [r3, #16]
}
  401362:	4618      	mov	r0, r3
  401364:	370c      	adds	r7, #12
  401366:	46bd      	mov	sp, r7
  401368:	f85d 7b04 	ldr.w	r7, [sp], #4
  40136c:	4770      	bx	lr

0040136e <hri_spi_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_MR_reg(const void *const hw, hri_spi_mr_reg_t data)
{
  40136e:	b480      	push	{r7}
  401370:	b083      	sub	sp, #12
  401372:	af00      	add	r7, sp, #0
  401374:	6078      	str	r0, [r7, #4]
  401376:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_MR = data;
  401378:	687b      	ldr	r3, [r7, #4]
  40137a:	683a      	ldr	r2, [r7, #0]
  40137c:	605a      	str	r2, [r3, #4]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40137e:	bf00      	nop
  401380:	370c      	adds	r7, #12
  401382:	46bd      	mov	sp, r7
  401384:	f85d 7b04 	ldr.w	r7, [sp], #4
  401388:	4770      	bx	lr

0040138a <hri_spi_write_CSR_BITS_bf>:
	tmp = (tmp & SPI_CSR_BITS(mask)) >> SPI_CSR_BITS_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_BITS_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  40138a:	b480      	push	{r7}
  40138c:	b087      	sub	sp, #28
  40138e:	af00      	add	r7, sp, #0
  401390:	60f8      	str	r0, [r7, #12]
  401392:	460b      	mov	r3, r1
  401394:	607a      	str	r2, [r7, #4]
  401396:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  401398:	7afa      	ldrb	r2, [r7, #11]
  40139a:	68fb      	ldr	r3, [r7, #12]
  40139c:	320c      	adds	r2, #12
  40139e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013a2:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_BITS_Msk;
  4013a4:	697b      	ldr	r3, [r7, #20]
  4013a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4013aa:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_BITS(data);
  4013ac:	687b      	ldr	r3, [r7, #4]
  4013ae:	011b      	lsls	r3, r3, #4
  4013b0:	b2db      	uxtb	r3, r3
  4013b2:	697a      	ldr	r2, [r7, #20]
  4013b4:	4313      	orrs	r3, r2
  4013b6:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  4013b8:	7afa      	ldrb	r2, [r7, #11]
  4013ba:	68fb      	ldr	r3, [r7, #12]
  4013bc:	320c      	adds	r2, #12
  4013be:	6979      	ldr	r1, [r7, #20]
  4013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  4013c4:	bf00      	nop
  4013c6:	371c      	adds	r7, #28
  4013c8:	46bd      	mov	sp, r7
  4013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013ce:	4770      	bx	lr

004013d0 <hri_spi_write_CSR_SCBR_bf>:
	tmp = (tmp & SPI_CSR_SCBR(mask)) >> SPI_CSR_SCBR_Pos;
	return tmp;
}

static inline void hri_spi_write_CSR_SCBR_bf(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  4013d0:	b480      	push	{r7}
  4013d2:	b087      	sub	sp, #28
  4013d4:	af00      	add	r7, sp, #0
  4013d6:	60f8      	str	r0, [r7, #12]
  4013d8:	460b      	mov	r3, r1
  4013da:	607a      	str	r2, [r7, #4]
  4013dc:	72fb      	strb	r3, [r7, #11]
	uint32_t tmp;
	SPI_CRITICAL_SECTION_ENTER();
	tmp = ((Spi *)hw)->SPI_CSR[index];
  4013de:	7afa      	ldrb	r2, [r7, #11]
  4013e0:	68fb      	ldr	r3, [r7, #12]
  4013e2:	320c      	adds	r2, #12
  4013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4013e8:	617b      	str	r3, [r7, #20]
	tmp &= ~SPI_CSR_SCBR_Msk;
  4013ea:	697b      	ldr	r3, [r7, #20]
  4013ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4013f0:	617b      	str	r3, [r7, #20]
	tmp |= SPI_CSR_SCBR(data);
  4013f2:	687b      	ldr	r3, [r7, #4]
  4013f4:	021b      	lsls	r3, r3, #8
  4013f6:	b29b      	uxth	r3, r3
  4013f8:	697a      	ldr	r2, [r7, #20]
  4013fa:	4313      	orrs	r3, r2
  4013fc:	617b      	str	r3, [r7, #20]
	((Spi *)hw)->SPI_CSR[index] = tmp;
  4013fe:	7afa      	ldrb	r2, [r7, #11]
  401400:	68fb      	ldr	r3, [r7, #12]
  401402:	320c      	adds	r2, #12
  401404:	6979      	ldr	r1, [r7, #20]
  401406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40140a:	bf00      	nop
  40140c:	371c      	adds	r7, #28
  40140e:	46bd      	mov	sp, r7
  401410:	f85d 7b04 	ldr.w	r7, [sp], #4
  401414:	4770      	bx	lr

00401416 <hri_spi_write_CSR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_spi_write_CSR_reg(const void *const hw, uint8_t index, hri_spi_csr_reg_t data)
{
  401416:	b480      	push	{r7}
  401418:	b085      	sub	sp, #20
  40141a:	af00      	add	r7, sp, #0
  40141c:	60f8      	str	r0, [r7, #12]
  40141e:	460b      	mov	r3, r1
  401420:	607a      	str	r2, [r7, #4]
  401422:	72fb      	strb	r3, [r7, #11]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CSR[index] = data;
  401424:	7afa      	ldrb	r2, [r7, #11]
  401426:	68fb      	ldr	r3, [r7, #12]
  401428:	320c      	adds	r2, #12
  40142a:	6879      	ldr	r1, [r7, #4]
  40142c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SPI_CRITICAL_SECTION_LEAVE();
}
  401430:	bf00      	nop
  401432:	3714      	adds	r7, #20
  401434:	46bd      	mov	sp, r7
  401436:	f85d 7b04 	ldr.w	r7, [sp], #4
  40143a:	4770      	bx	lr

0040143c <hri_spi_read_CSR_reg>:
	((Spi *)hw)->SPI_CSR[index] ^= mask;
	SPI_CRITICAL_SECTION_LEAVE();
}

static inline hri_spi_csr_reg_t hri_spi_read_CSR_reg(const void *const hw, uint8_t index)
{
  40143c:	b480      	push	{r7}
  40143e:	b083      	sub	sp, #12
  401440:	af00      	add	r7, sp, #0
  401442:	6078      	str	r0, [r7, #4]
  401444:	460b      	mov	r3, r1
  401446:	70fb      	strb	r3, [r7, #3]
	return ((Spi *)hw)->SPI_CSR[index];
  401448:	78fa      	ldrb	r2, [r7, #3]
  40144a:	687b      	ldr	r3, [r7, #4]
  40144c:	320c      	adds	r2, #12
  40144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  401452:	4618      	mov	r0, r3
  401454:	370c      	adds	r7, #12
  401456:	46bd      	mov	sp, r7
  401458:	f85d 7b04 	ldr.w	r7, [sp], #4
  40145c:	4770      	bx	lr

0040145e <hri_spi_write_CR_reg>:
{
	return ((Spi *)hw)->SPI_WPMR;
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
  40145e:	b480      	push	{r7}
  401460:	b083      	sub	sp, #12
  401462:	af00      	add	r7, sp, #0
  401464:	6078      	str	r0, [r7, #4]
  401466:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  401468:	687b      	ldr	r3, [r7, #4]
  40146a:	683a      	ldr	r2, [r7, #0]
  40146c:	601a      	str	r2, [r3, #0]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40146e:	bf00      	nop
  401470:	370c      	adds	r7, #12
  401472:	46bd      	mov	sp, r7
  401474:	f85d 7b04 	ldr.w	r7, [sp], #4
  401478:	4770      	bx	lr

0040147a <hri_spi_write_TDR_reg>:

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
  40147a:	b480      	push	{r7}
  40147c:	b083      	sub	sp, #12
  40147e:	af00      	add	r7, sp, #0
  401480:	6078      	str	r0, [r7, #4]
  401482:	6039      	str	r1, [r7, #0]
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  401484:	687b      	ldr	r3, [r7, #4]
  401486:	683a      	ldr	r2, [r7, #0]
  401488:	60da      	str	r2, [r3, #12]
	SPI_CRITICAL_SECTION_LEAVE();
}
  40148a:	bf00      	nop
  40148c:	370c      	adds	r7, #12
  40148e:	46bd      	mov	sp, r7
  401490:	f85d 7b04 	ldr.w	r7, [sp], #4
  401494:	4770      	bx	lr
	...

00401498 <_spi_sync_enable>:
 *  \param[in] hw Pointer to the hardware register base
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
  401498:	b580      	push	{r7, lr}
  40149a:	b082      	sub	sp, #8
  40149c:	af00      	add	r7, sp, #0
  40149e:	6078      	str	r0, [r7, #4]
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);
  4014a0:	2101      	movs	r1, #1
  4014a2:	6878      	ldr	r0, [r7, #4]
  4014a4:	4b03      	ldr	r3, [pc, #12]	; (4014b4 <_spi_sync_enable+0x1c>)
  4014a6:	4798      	blx	r3

	return ERR_NONE;
  4014a8:	2300      	movs	r3, #0
}
  4014aa:	4618      	mov	r0, r3
  4014ac:	3708      	adds	r7, #8
  4014ae:	46bd      	mov	sp, r7
  4014b0:	bd80      	pop	{r7, pc}
  4014b2:	bf00      	nop
  4014b4:	0040145f 	.word	0x0040145f

004014b8 <_spi_set_mode>:
 * \param[in] mode The mode to set
 *
 * \return Setting mode status
 */
static int32_t _spi_set_mode(void *const hw, const enum spi_transfer_mode mode)
{
  4014b8:	b580      	push	{r7, lr}
  4014ba:	b084      	sub	sp, #16
  4014bc:	af00      	add	r7, sp, #0
  4014be:	6078      	str	r0, [r7, #4]
  4014c0:	460b      	mov	r3, r1
  4014c2:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;

	temp = hri_spi_read_CSR_reg(hw, 0);
  4014c4:	2100      	movs	r1, #0
  4014c6:	6878      	ldr	r0, [r7, #4]
  4014c8:	4b17      	ldr	r3, [pc, #92]	; (401528 <_spi_set_mode+0x70>)
  4014ca:	4798      	blx	r3
  4014cc:	60f8      	str	r0, [r7, #12]
	temp &= ~(SPI_CSR_CPOL | SPI_CSR_NCPHA);
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	f023 0303 	bic.w	r3, r3, #3
  4014d4:	60fb      	str	r3, [r7, #12]

	switch (mode) {
  4014d6:	78fb      	ldrb	r3, [r7, #3]
  4014d8:	2b03      	cmp	r3, #3
  4014da:	d81a      	bhi.n	401512 <_spi_set_mode+0x5a>
  4014dc:	a201      	add	r2, pc, #4	; (adr r2, 4014e4 <_spi_set_mode+0x2c>)
  4014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4014e2:	bf00      	nop
  4014e4:	004014f5 	.word	0x004014f5
  4014e8:	00401513 	.word	0x00401513
  4014ec:	004014ff 	.word	0x004014ff
  4014f0:	00401509 	.word	0x00401509
	case SPI_MODE_0:
		temp |= (SPI_CSR_NCPHA_Msk);
  4014f4:	68fb      	ldr	r3, [r7, #12]
  4014f6:	f043 0302 	orr.w	r3, r3, #2
  4014fa:	60fb      	str	r3, [r7, #12]
		break;
  4014fc:	e00a      	b.n	401514 <_spi_set_mode+0x5c>
	case SPI_MODE_1:
		/* CPOL = NCPHA = 0 already */
		break;

	case SPI_MODE_2:
		temp |= (SPI_CSR_NCPHA_Msk) | (SPI_CSR_CPOL_Msk);
  4014fe:	68fb      	ldr	r3, [r7, #12]
  401500:	f043 0303 	orr.w	r3, r3, #3
  401504:	60fb      	str	r3, [r7, #12]
		break;
  401506:	e005      	b.n	401514 <_spi_set_mode+0x5c>

	case SPI_MODE_3:
		temp |= (SPI_CSR_CPOL_Msk);
  401508:	68fb      	ldr	r3, [r7, #12]
  40150a:	f043 0301 	orr.w	r3, r3, #1
  40150e:	60fb      	str	r3, [r7, #12]
		break;
  401510:	e000      	b.n	401514 <_spi_set_mode+0x5c>

	default:
		break;
  401512:	bf00      	nop
	}

	hri_spi_write_CSR_reg(hw, 0, temp);
  401514:	68fa      	ldr	r2, [r7, #12]
  401516:	2100      	movs	r1, #0
  401518:	6878      	ldr	r0, [r7, #4]
  40151a:	4b04      	ldr	r3, [pc, #16]	; (40152c <_spi_set_mode+0x74>)
  40151c:	4798      	blx	r3

	return ERR_NONE;
  40151e:	2300      	movs	r3, #0
}
  401520:	4618      	mov	r0, r3
  401522:	3710      	adds	r7, #16
  401524:	46bd      	mov	sp, r7
  401526:	bd80      	pop	{r7, pc}
  401528:	0040143d 	.word	0x0040143d
  40152c:	00401417 	.word	0x00401417

00401530 <_spi_set_baudrate>:
 * \param[in] baud_val The baudrate to set
 *
 * \return Setting baudrate status
 */
static int32_t _spi_set_baudrate(void *const hw, const uint32_t baud_val)
{
  401530:	b580      	push	{r7, lr}
  401532:	b082      	sub	sp, #8
  401534:	af00      	add	r7, sp, #0
  401536:	6078      	str	r0, [r7, #4]
  401538:	6039      	str	r1, [r7, #0]
	hri_spi_write_CSR_SCBR_bf(hw, 0, (uint8_t)baud_val);
  40153a:	683b      	ldr	r3, [r7, #0]
  40153c:	b2db      	uxtb	r3, r3
  40153e:	461a      	mov	r2, r3
  401540:	2100      	movs	r1, #0
  401542:	6878      	ldr	r0, [r7, #4]
  401544:	4b03      	ldr	r3, [pc, #12]	; (401554 <_spi_set_baudrate+0x24>)
  401546:	4798      	blx	r3

	return ERR_NONE;
  401548:	2300      	movs	r3, #0
}
  40154a:	4618      	mov	r0, r3
  40154c:	3708      	adds	r7, #8
  40154e:	46bd      	mov	sp, r7
  401550:	bd80      	pop	{r7, pc}
  401552:	bf00      	nop
  401554:	004013d1 	.word	0x004013d1

00401558 <_spi_set_char_size>:
 * \param[out] size    Stored char size
 *
 * \return Setting char size status
 */
static int32_t _spi_set_char_size(void *const hw, const enum spi_char_size char_size, uint8_t *const size)
{
  401558:	b580      	push	{r7, lr}
  40155a:	b084      	sub	sp, #16
  40155c:	af00      	add	r7, sp, #0
  40155e:	60f8      	str	r0, [r7, #12]
  401560:	460b      	mov	r3, r1
  401562:	607a      	str	r2, [r7, #4]
  401564:	72fb      	strb	r3, [r7, #11]
	hri_spi_write_CSR_BITS_bf(hw, 0, char_size);
  401566:	7afb      	ldrb	r3, [r7, #11]
  401568:	461a      	mov	r2, r3
  40156a:	2100      	movs	r1, #0
  40156c:	68f8      	ldr	r0, [r7, #12]
  40156e:	4b08      	ldr	r3, [pc, #32]	; (401590 <_spi_set_char_size+0x38>)
  401570:	4798      	blx	r3
	if (char_size == SPI_CHAR_SIZE_8) {
  401572:	7afb      	ldrb	r3, [r7, #11]
  401574:	2b00      	cmp	r3, #0
  401576:	d103      	bne.n	401580 <_spi_set_char_size+0x28>
		*size = 1;
  401578:	687b      	ldr	r3, [r7, #4]
  40157a:	2201      	movs	r2, #1
  40157c:	701a      	strb	r2, [r3, #0]
  40157e:	e002      	b.n	401586 <_spi_set_char_size+0x2e>
	} else {
		*size = 2;
  401580:	687b      	ldr	r3, [r7, #4]
  401582:	2202      	movs	r2, #2
  401584:	701a      	strb	r2, [r3, #0]
	}

	return ERR_NONE;
  401586:	2300      	movs	r3, #0
}
  401588:	4618      	mov	r0, r3
  40158a:	3710      	adds	r7, #16
  40158c:	46bd      	mov	sp, r7
  40158e:	bd80      	pop	{r7, pc}
  401590:	0040138b 	.word	0x0040138b

00401594 <_spi_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{
  401594:	b480      	push	{r7}
  401596:	b085      	sub	sp, #20
  401598:	af00      	add	r7, sp, #0
  40159a:	6078      	str	r0, [r7, #4]

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  40159c:	687a      	ldr	r2, [r7, #4]
  40159e:	4b08      	ldr	r3, [pc, #32]	; (4015c0 <_spi_get_hardware_index+0x2c>)
  4015a0:	4413      	add	r3, r2
  4015a2:	0c1b      	lsrs	r3, r3, #16
  4015a4:	73fb      	strb	r3, [r7, #15]

	if (index == 5) {
  4015a6:	7bfb      	ldrb	r3, [r7, #15]
  4015a8:	2b05      	cmp	r3, #5
  4015aa:	d101      	bne.n	4015b0 <_spi_get_hardware_index+0x1c>
		return 1;
  4015ac:	2301      	movs	r3, #1
  4015ae:	e000      	b.n	4015b2 <_spi_get_hardware_index+0x1e>
	} else {
		return 0;
  4015b0:	2300      	movs	r3, #0
	}
}
  4015b2:	4618      	mov	r0, r3
  4015b4:	3714      	adds	r7, #20
  4015b6:	46bd      	mov	sp, r7
  4015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015bc:	4770      	bx	lr
  4015be:	bf00      	nop
  4015c0:	bfff8000 	.word	0xbfff8000

004015c4 <_spi_get_regs>:
/** \brief Return the pointer to register settings of specific SPI
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific SERCOM.
 */
static inline const struct spi_regs_cfg *_spi_get_regs(const uint32_t hw_addr)
{
  4015c4:	b580      	push	{r7, lr}
  4015c6:	b084      	sub	sp, #16
  4015c8:	af00      	add	r7, sp, #0
  4015ca:	6078      	str	r0, [r7, #4]
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  4015cc:	687b      	ldr	r3, [r7, #4]
  4015ce:	4618      	mov	r0, r3
  4015d0:	4b12      	ldr	r3, [pc, #72]	; (40161c <_spi_get_regs+0x58>)
  4015d2:	4798      	blx	r3
  4015d4:	4603      	mov	r3, r0
  4015d6:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4015d8:	2300      	movs	r3, #0
  4015da:	73fb      	strb	r3, [r7, #15]
  4015dc:	e015      	b.n	40160a <_spi_get_regs+0x46>
		if (spi_regs[i].number == n) {
  4015de:	7bfa      	ldrb	r2, [r7, #15]
  4015e0:	490f      	ldr	r1, [pc, #60]	; (401620 <_spi_get_regs+0x5c>)
  4015e2:	4613      	mov	r3, r2
  4015e4:	009b      	lsls	r3, r3, #2
  4015e6:	4413      	add	r3, r2
  4015e8:	009b      	lsls	r3, r3, #2
  4015ea:	440b      	add	r3, r1
  4015ec:	781b      	ldrb	r3, [r3, #0]
  4015ee:	7bba      	ldrb	r2, [r7, #14]
  4015f0:	429a      	cmp	r2, r3
  4015f2:	d107      	bne.n	401604 <_spi_get_regs+0x40>
			return &spi_regs[i];
  4015f4:	7bfa      	ldrb	r2, [r7, #15]
  4015f6:	4613      	mov	r3, r2
  4015f8:	009b      	lsls	r3, r3, #2
  4015fa:	4413      	add	r3, r2
  4015fc:	009b      	lsls	r3, r3, #2
  4015fe:	4a08      	ldr	r2, [pc, #32]	; (401620 <_spi_get_regs+0x5c>)
  401600:	4413      	add	r3, r2
  401602:	e006      	b.n	401612 <_spi_get_regs+0x4e>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  401604:	7bfb      	ldrb	r3, [r7, #15]
  401606:	3301      	adds	r3, #1
  401608:	73fb      	strb	r3, [r7, #15]
  40160a:	7bfb      	ldrb	r3, [r7, #15]
  40160c:	2b00      	cmp	r3, #0
  40160e:	d0e6      	beq.n	4015de <_spi_get_regs+0x1a>
		}
	}

	return NULL;
  401610:	2300      	movs	r3, #0
}
  401612:	4618      	mov	r0, r3
  401614:	3710      	adds	r7, #16
  401616:	46bd      	mov	sp, r7
  401618:	bd80      	pop	{r7, pc}
  40161a:	bf00      	nop
  40161c:	00401595 	.word	0x00401595
  401620:	00402284 	.word	0x00402284

00401624 <_spi_m_sync_init>:

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  401624:	b580      	push	{r7, lr}
  401626:	b084      	sub	sp, #16
  401628:	af00      	add	r7, sp, #0
  40162a:	6078      	str	r0, [r7, #4]
  40162c:	6039      	str	r1, [r7, #0]
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);
  40162e:	683b      	ldr	r3, [r7, #0]
  401630:	4618      	mov	r0, r3
  401632:	4b2a      	ldr	r3, [pc, #168]	; (4016dc <_spi_m_sync_init+0xb8>)
  401634:	4798      	blx	r3
  401636:	60f8      	str	r0, [r7, #12]

	ASSERT(dev && hw);
  401638:	687b      	ldr	r3, [r7, #4]
  40163a:	2b00      	cmp	r3, #0
  40163c:	d004      	beq.n	401648 <_spi_m_sync_init+0x24>
  40163e:	683b      	ldr	r3, [r7, #0]
  401640:	2b00      	cmp	r3, #0
  401642:	d001      	beq.n	401648 <_spi_m_sync_init+0x24>
  401644:	2301      	movs	r3, #1
  401646:	e000      	b.n	40164a <_spi_m_sync_init+0x26>
  401648:	2300      	movs	r3, #0
  40164a:	f003 0301 	and.w	r3, r3, #1
  40164e:	b2db      	uxtb	r3, r3
  401650:	f44f 729a 	mov.w	r2, #308	; 0x134
  401654:	4922      	ldr	r1, [pc, #136]	; (4016e0 <_spi_m_sync_init+0xbc>)
  401656:	4618      	mov	r0, r3
  401658:	4b22      	ldr	r3, [pc, #136]	; (4016e4 <_spi_m_sync_init+0xc0>)
  40165a:	4798      	blx	r3

	if (regs == NULL) {
  40165c:	68fb      	ldr	r3, [r7, #12]
  40165e:	2b00      	cmp	r3, #0
  401660:	d102      	bne.n	401668 <_spi_m_sync_init+0x44>
		return ERR_INVALID_ARG;
  401662:	f06f 030c 	mvn.w	r3, #12
  401666:	e035      	b.n	4016d4 <_spi_m_sync_init+0xb0>
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  401668:	6838      	ldr	r0, [r7, #0]
  40166a:	4b1f      	ldr	r3, [pc, #124]	; (4016e8 <_spi_m_sync_init+0xc4>)
  40166c:	4798      	blx	r3
  40166e:	4603      	mov	r3, r0
  401670:	2b00      	cmp	r3, #0
  401672:	d002      	beq.n	40167a <_spi_m_sync_init+0x56>
		return ERR_DENIED;
  401674:	f06f 0310 	mvn.w	r3, #16
  401678:	e02c      	b.n	4016d4 <_spi_m_sync_init+0xb0>
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
  40167a:	2180      	movs	r1, #128	; 0x80
  40167c:	6838      	ldr	r0, [r7, #0]
  40167e:	4b1b      	ldr	r3, [pc, #108]	; (4016ec <_spi_m_sync_init+0xc8>)
  401680:	4798      	blx	r3
	dev->prvt = hw;
  401682:	687b      	ldr	r3, [r7, #4]
  401684:	683a      	ldr	r2, [r7, #0]
  401686:	601a      	str	r2, [r3, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  401688:	68fb      	ldr	r3, [r7, #12]
  40168a:	685a      	ldr	r2, [r3, #4]
  40168c:	4b18      	ldr	r3, [pc, #96]	; (4016f0 <_spi_m_sync_init+0xcc>)
  40168e:	4013      	ands	r3, r2
  401690:	4619      	mov	r1, r3
  401692:	6838      	ldr	r0, [r7, #0]
  401694:	4b15      	ldr	r3, [pc, #84]	; (4016ec <_spi_m_sync_init+0xc8>)
  401696:	4798      	blx	r3
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  401698:	68fb      	ldr	r3, [r7, #12]
  40169a:	689a      	ldr	r2, [r3, #8]
  40169c:	4b15      	ldr	r3, [pc, #84]	; (4016f4 <_spi_m_sync_init+0xd0>)
  40169e:	4013      	ands	r3, r2
  4016a0:	4a15      	ldr	r2, [pc, #84]	; (4016f8 <_spi_m_sync_init+0xd4>)
  4016a2:	431a      	orrs	r2, r3
  4016a4:	4611      	mov	r1, r2
  4016a6:	6838      	ldr	r0, [r7, #0]
  4016a8:	4b14      	ldr	r3, [pc, #80]	; (4016fc <_spi_m_sync_init+0xd8>)
  4016aa:	4798      	blx	r3
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4016ac:	68fb      	ldr	r3, [r7, #12]
  4016ae:	68db      	ldr	r3, [r3, #12]
  4016b0:	461a      	mov	r2, r3
  4016b2:	2100      	movs	r1, #0
  4016b4:	6838      	ldr	r0, [r7, #0]
  4016b6:	4b12      	ldr	r3, [pc, #72]	; (401700 <_spi_m_sync_init+0xdc>)
  4016b8:	4798      	blx	r3

	dev->dummy_byte = regs->dummy_byte;
  4016ba:	68fb      	ldr	r3, [r7, #12]
  4016bc:	8a1a      	ldrh	r2, [r3, #16]
  4016be:	687b      	ldr	r3, [r7, #4]
  4016c0:	80da      	strh	r2, [r3, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4016c2:	68fb      	ldr	r3, [r7, #12]
  4016c4:	68db      	ldr	r3, [r3, #12]
  4016c6:	b2db      	uxtb	r3, r3
  4016c8:	f023 030f 	bic.w	r3, r3, #15
  4016cc:	b2da      	uxtb	r2, r3
  4016ce:	687b      	ldr	r3, [r7, #4]
  4016d0:	711a      	strb	r2, [r3, #4]

	return ERR_NONE;
  4016d2:	2300      	movs	r3, #0
}
  4016d4:	4618      	mov	r0, r3
  4016d6:	3710      	adds	r7, #16
  4016d8:	46bd      	mov	sp, r7
  4016da:	bd80      	pop	{r7, pc}
  4016dc:	004015c5 	.word	0x004015c5
  4016e0:	00402298 	.word	0x00402298
  4016e4:	00400cad 	.word	0x00400cad
  4016e8:	0040130b 	.word	0x0040130b
  4016ec:	0040145f 	.word	0x0040145f
  4016f0:	feffff7c 	.word	0xfeffff7c
  4016f4:	fff1ff6f 	.word	0xfff1ff6f
  4016f8:	000e0010 	.word	0x000e0010
  4016fc:	0040136f 	.word	0x0040136f
  401700:	00401417 	.word	0x00401417

00401704 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  401704:	b580      	push	{r7, lr}
  401706:	b082      	sub	sp, #8
  401708:	af00      	add	r7, sp, #0
  40170a:	6078      	str	r0, [r7, #4]
	ASSERT(dev && dev->prvt);
  40170c:	687b      	ldr	r3, [r7, #4]
  40170e:	2b00      	cmp	r3, #0
  401710:	d005      	beq.n	40171e <_spi_m_sync_enable+0x1a>
  401712:	687b      	ldr	r3, [r7, #4]
  401714:	681b      	ldr	r3, [r3, #0]
  401716:	2b00      	cmp	r3, #0
  401718:	d001      	beq.n	40171e <_spi_m_sync_enable+0x1a>
  40171a:	2301      	movs	r3, #1
  40171c:	e000      	b.n	401720 <_spi_m_sync_enable+0x1c>
  40171e:	2300      	movs	r3, #0
  401720:	f003 0301 	and.w	r3, r3, #1
  401724:	b2db      	uxtb	r3, r3
  401726:	f44f 72b9 	mov.w	r2, #370	; 0x172
  40172a:	4907      	ldr	r1, [pc, #28]	; (401748 <_spi_m_sync_enable+0x44>)
  40172c:	4618      	mov	r0, r3
  40172e:	4b07      	ldr	r3, [pc, #28]	; (40174c <_spi_m_sync_enable+0x48>)
  401730:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  401732:	687b      	ldr	r3, [r7, #4]
  401734:	681b      	ldr	r3, [r3, #0]
  401736:	4618      	mov	r0, r3
  401738:	4b05      	ldr	r3, [pc, #20]	; (401750 <_spi_m_sync_enable+0x4c>)
  40173a:	4798      	blx	r3
  40173c:	4603      	mov	r3, r0
}
  40173e:	4618      	mov	r0, r3
  401740:	3708      	adds	r7, #8
  401742:	46bd      	mov	sp, r7
  401744:	bd80      	pop	{r7, pc}
  401746:	bf00      	nop
  401748:	00402298 	.word	0x00402298
  40174c:	00400cad 	.word	0x00400cad
  401750:	00401499 	.word	0x00401499

00401754 <_spi_m_sync_set_mode>:

	return _spi_async_disable(dev->prvt);
}

int32_t _spi_m_sync_set_mode(struct _spi_m_sync_dev *dev, const enum spi_transfer_mode mode)
{
  401754:	b580      	push	{r7, lr}
  401756:	b082      	sub	sp, #8
  401758:	af00      	add	r7, sp, #0
  40175a:	6078      	str	r0, [r7, #4]
  40175c:	460b      	mov	r3, r1
  40175e:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  401760:	687b      	ldr	r3, [r7, #4]
  401762:	2b00      	cmp	r3, #0
  401764:	d005      	beq.n	401772 <_spi_m_sync_set_mode+0x1e>
  401766:	687b      	ldr	r3, [r7, #4]
  401768:	681b      	ldr	r3, [r3, #0]
  40176a:	2b00      	cmp	r3, #0
  40176c:	d001      	beq.n	401772 <_spi_m_sync_set_mode+0x1e>
  40176e:	2301      	movs	r3, #1
  401770:	e000      	b.n	401774 <_spi_m_sync_set_mode+0x20>
  401772:	2300      	movs	r3, #0
  401774:	f003 0301 	and.w	r3, r3, #1
  401778:	b2db      	uxtb	r3, r3
  40177a:	f44f 72c7 	mov.w	r2, #398	; 0x18e
  40177e:	4908      	ldr	r1, [pc, #32]	; (4017a0 <_spi_m_sync_set_mode+0x4c>)
  401780:	4618      	mov	r0, r3
  401782:	4b08      	ldr	r3, [pc, #32]	; (4017a4 <_spi_m_sync_set_mode+0x50>)
  401784:	4798      	blx	r3

	return _spi_set_mode(dev->prvt, mode);
  401786:	687b      	ldr	r3, [r7, #4]
  401788:	681b      	ldr	r3, [r3, #0]
  40178a:	78fa      	ldrb	r2, [r7, #3]
  40178c:	4611      	mov	r1, r2
  40178e:	4618      	mov	r0, r3
  401790:	4b05      	ldr	r3, [pc, #20]	; (4017a8 <_spi_m_sync_set_mode+0x54>)
  401792:	4798      	blx	r3
  401794:	4603      	mov	r3, r0
}
  401796:	4618      	mov	r0, r3
  401798:	3708      	adds	r7, #8
  40179a:	46bd      	mov	sp, r7
  40179c:	bd80      	pop	{r7, pc}
  40179e:	bf00      	nop
  4017a0:	00402298 	.word	0x00402298
  4017a4:	00400cad 	.word	0x00400cad
  4017a8:	004014b9 	.word	0x004014b9

004017ac <_spi_m_sync_set_baudrate>:
	rc = clk / baud;
	return rc;
}

int32_t _spi_m_sync_set_baudrate(struct _spi_m_sync_dev *dev, const uint32_t baud_val)
{
  4017ac:	b580      	push	{r7, lr}
  4017ae:	b082      	sub	sp, #8
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	6078      	str	r0, [r7, #4]
  4017b4:	6039      	str	r1, [r7, #0]
	ASSERT(dev && dev->prvt);
  4017b6:	687b      	ldr	r3, [r7, #4]
  4017b8:	2b00      	cmp	r3, #0
  4017ba:	d005      	beq.n	4017c8 <_spi_m_sync_set_baudrate+0x1c>
  4017bc:	687b      	ldr	r3, [r7, #4]
  4017be:	681b      	ldr	r3, [r3, #0]
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d001      	beq.n	4017c8 <_spi_m_sync_set_baudrate+0x1c>
  4017c4:	2301      	movs	r3, #1
  4017c6:	e000      	b.n	4017ca <_spi_m_sync_set_baudrate+0x1e>
  4017c8:	2300      	movs	r3, #0
  4017ca:	f003 0301 	and.w	r3, r3, #1
  4017ce:	b2db      	uxtb	r3, r3
  4017d0:	f240 12af 	movw	r2, #431	; 0x1af
  4017d4:	4907      	ldr	r1, [pc, #28]	; (4017f4 <_spi_m_sync_set_baudrate+0x48>)
  4017d6:	4618      	mov	r0, r3
  4017d8:	4b07      	ldr	r3, [pc, #28]	; (4017f8 <_spi_m_sync_set_baudrate+0x4c>)
  4017da:	4798      	blx	r3

	return _spi_set_baudrate(dev->prvt, baud_val);
  4017dc:	687b      	ldr	r3, [r7, #4]
  4017de:	681b      	ldr	r3, [r3, #0]
  4017e0:	6839      	ldr	r1, [r7, #0]
  4017e2:	4618      	mov	r0, r3
  4017e4:	4b05      	ldr	r3, [pc, #20]	; (4017fc <_spi_m_sync_set_baudrate+0x50>)
  4017e6:	4798      	blx	r3
  4017e8:	4603      	mov	r3, r0
}
  4017ea:	4618      	mov	r0, r3
  4017ec:	3708      	adds	r7, #8
  4017ee:	46bd      	mov	sp, r7
  4017f0:	bd80      	pop	{r7, pc}
  4017f2:	bf00      	nop
  4017f4:	00402298 	.word	0x00402298
  4017f8:	00400cad 	.word	0x00400cad
  4017fc:	00401531 	.word	0x00401531

00401800 <_spi_m_sync_set_char_size>:

	return ERR_UNSUPPORTED_OP;
}

int32_t _spi_m_sync_set_char_size(struct _spi_m_sync_dev *dev, const enum spi_char_size char_size)
{
  401800:	b580      	push	{r7, lr}
  401802:	b082      	sub	sp, #8
  401804:	af00      	add	r7, sp, #0
  401806:	6078      	str	r0, [r7, #4]
  401808:	460b      	mov	r3, r1
  40180a:	70fb      	strb	r3, [r7, #3]
	ASSERT(dev && dev->prvt);
  40180c:	687b      	ldr	r3, [r7, #4]
  40180e:	2b00      	cmp	r3, #0
  401810:	d005      	beq.n	40181e <_spi_m_sync_set_char_size+0x1e>
  401812:	687b      	ldr	r3, [r7, #4]
  401814:	681b      	ldr	r3, [r3, #0]
  401816:	2b00      	cmp	r3, #0
  401818:	d001      	beq.n	40181e <_spi_m_sync_set_char_size+0x1e>
  40181a:	2301      	movs	r3, #1
  40181c:	e000      	b.n	401820 <_spi_m_sync_set_char_size+0x20>
  40181e:	2300      	movs	r3, #0
  401820:	f003 0301 	and.w	r3, r3, #1
  401824:	b2db      	uxtb	r3, r3
  401826:	f240 12cd 	movw	r2, #461	; 0x1cd
  40182a:	4908      	ldr	r1, [pc, #32]	; (40184c <_spi_m_sync_set_char_size+0x4c>)
  40182c:	4618      	mov	r0, r3
  40182e:	4b08      	ldr	r3, [pc, #32]	; (401850 <_spi_m_sync_set_char_size+0x50>)
  401830:	4798      	blx	r3

	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
  401832:	687b      	ldr	r3, [r7, #4]
  401834:	6818      	ldr	r0, [r3, #0]
  401836:	687b      	ldr	r3, [r7, #4]
  401838:	1d1a      	adds	r2, r3, #4
  40183a:	78fb      	ldrb	r3, [r7, #3]
  40183c:	4619      	mov	r1, r3
  40183e:	4b05      	ldr	r3, [pc, #20]	; (401854 <_spi_m_sync_set_char_size+0x54>)
  401840:	4798      	blx	r3
  401842:	4603      	mov	r3, r0
}
  401844:	4618      	mov	r0, r3
  401846:	3708      	adds	r7, #8
  401848:	46bd      	mov	sp, r7
  40184a:	bd80      	pop	{r7, pc}
  40184c:	00402298 	.word	0x00402298
  401850:	00400cad 	.word	0x00400cad
  401854:	00401559 	.word	0x00401559

00401858 <_spi_wait_bus_idle>:
	return _spi_set_char_size(dev->prvt, char_size, &dev->char_size);
}

/** Wait until SPI bus idle. */
static inline void _spi_wait_bus_idle(void *const hw)
{
  401858:	b580      	push	{r7, lr}
  40185a:	b082      	sub	sp, #8
  40185c:	af00      	add	r7, sp, #0
  40185e:	6078      	str	r0, [r7, #4]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401860:	bf00      	nop
  401862:	f44f 7100 	mov.w	r1, #512	; 0x200
  401866:	6878      	ldr	r0, [r7, #4]
  401868:	4b04      	ldr	r3, [pc, #16]	; (40187c <_spi_wait_bus_idle+0x24>)
  40186a:	4798      	blx	r3
  40186c:	4603      	mov	r3, r0
  40186e:	2b00      	cmp	r3, #0
  401870:	d0f7      	beq.n	401862 <_spi_wait_bus_idle+0xa>
	}
}
  401872:	bf00      	nop
  401874:	3708      	adds	r7, #8
  401876:	46bd      	mov	sp, r7
  401878:	bd80      	pop	{r7, pc}
  40187a:	bf00      	nop
  40187c:	00401331 	.word	0x00401331

00401880 <_spi_rx_check_and_receive>:
	uint8_t char_size;
};

/** Check flag of RXC and update transaction runtime information. */
static inline bool _spi_rx_check_and_receive(void *const hw, struct _spi_trans_ctrl *ctrl)
{
  401880:	b580      	push	{r7, lr}
  401882:	b084      	sub	sp, #16
  401884:	af00      	add	r7, sp, #0
  401886:	6078      	str	r0, [r7, #4]
  401888:	6039      	str	r1, [r7, #0]
	uint32_t data;

	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  40188a:	6878      	ldr	r0, [r7, #4]
  40188c:	4b17      	ldr	r3, [pc, #92]	; (4018ec <_spi_rx_check_and_receive+0x6c>)
  40188e:	4798      	blx	r3
  401890:	4603      	mov	r3, r0
  401892:	f003 0301 	and.w	r3, r3, #1
  401896:	2b00      	cmp	r3, #0
  401898:	d101      	bne.n	40189e <_spi_rx_check_and_receive+0x1e>
		return false;
  40189a:	2300      	movs	r3, #0
  40189c:	e022      	b.n	4018e4 <_spi_rx_check_and_receive+0x64>
	}

	data = hri_spi_read_RDR_RD_bf(hw);
  40189e:	6878      	ldr	r0, [r7, #4]
  4018a0:	4b13      	ldr	r3, [pc, #76]	; (4018f0 <_spi_rx_check_and_receive+0x70>)
  4018a2:	4798      	blx	r3
  4018a4:	60f8      	str	r0, [r7, #12]

	if (ctrl->rxbuf) {
  4018a6:	683b      	ldr	r3, [r7, #0]
  4018a8:	685b      	ldr	r3, [r3, #4]
  4018aa:	2b00      	cmp	r3, #0
  4018ac:	d014      	beq.n	4018d8 <_spi_rx_check_and_receive+0x58>
		*ctrl->rxbuf++ = (uint8_t)data;
  4018ae:	683b      	ldr	r3, [r7, #0]
  4018b0:	685b      	ldr	r3, [r3, #4]
  4018b2:	1c59      	adds	r1, r3, #1
  4018b4:	683a      	ldr	r2, [r7, #0]
  4018b6:	6051      	str	r1, [r2, #4]
  4018b8:	68fa      	ldr	r2, [r7, #12]
  4018ba:	b2d2      	uxtb	r2, r2
  4018bc:	701a      	strb	r2, [r3, #0]

		if (ctrl->char_size > 1) {
  4018be:	683b      	ldr	r3, [r7, #0]
  4018c0:	7c1b      	ldrb	r3, [r3, #16]
  4018c2:	2b01      	cmp	r3, #1
  4018c4:	d908      	bls.n	4018d8 <_spi_rx_check_and_receive+0x58>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  4018c6:	683b      	ldr	r3, [r7, #0]
  4018c8:	685b      	ldr	r3, [r3, #4]
  4018ca:	1c59      	adds	r1, r3, #1
  4018cc:	683a      	ldr	r2, [r7, #0]
  4018ce:	6051      	str	r1, [r2, #4]
  4018d0:	68fa      	ldr	r2, [r7, #12]
  4018d2:	0a12      	lsrs	r2, r2, #8
  4018d4:	b2d2      	uxtb	r2, r2
  4018d6:	701a      	strb	r2, [r3, #0]
		}
	}

	ctrl->rxcnt++;
  4018d8:	683b      	ldr	r3, [r7, #0]
  4018da:	68db      	ldr	r3, [r3, #12]
  4018dc:	1c5a      	adds	r2, r3, #1
  4018de:	683b      	ldr	r3, [r7, #0]
  4018e0:	60da      	str	r2, [r3, #12]

	return true;
  4018e2:	2301      	movs	r3, #1
}
  4018e4:	4618      	mov	r0, r3
  4018e6:	3710      	adds	r7, #16
  4018e8:	46bd      	mov	sp, r7
  4018ea:	bd80      	pop	{r7, pc}
  4018ec:	00401357 	.word	0x00401357
  4018f0:	004012f1 	.word	0x004012f1

004018f4 <_spi_tx_check_and_send>:

/** Check flag of DRE and update transaction runtime information. */
static inline bool _spi_tx_check_and_send(void *const hw, struct _spi_trans_ctrl *ctrl, uint16_t dummy)
{
  4018f4:	b580      	push	{r7, lr}
  4018f6:	b086      	sub	sp, #24
  4018f8:	af00      	add	r7, sp, #0
  4018fa:	60f8      	str	r0, [r7, #12]
  4018fc:	60b9      	str	r1, [r7, #8]
  4018fe:	4613      	mov	r3, r2
  401900:	80fb      	strh	r3, [r7, #6]
	uint32_t data;

	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401902:	68f8      	ldr	r0, [r7, #12]
  401904:	4b1a      	ldr	r3, [pc, #104]	; (401970 <_spi_tx_check_and_send+0x7c>)
  401906:	4798      	blx	r3
  401908:	4603      	mov	r3, r0
  40190a:	f003 0302 	and.w	r3, r3, #2
  40190e:	2b00      	cmp	r3, #0
  401910:	d101      	bne.n	401916 <_spi_tx_check_and_send+0x22>
		return false;
  401912:	2300      	movs	r3, #0
  401914:	e028      	b.n	401968 <_spi_tx_check_and_send+0x74>
	}

	if (ctrl->txbuf) {
  401916:	68bb      	ldr	r3, [r7, #8]
  401918:	681b      	ldr	r3, [r3, #0]
  40191a:	2b00      	cmp	r3, #0
  40191c:	d018      	beq.n	401950 <_spi_tx_check_and_send+0x5c>
		data = *ctrl->txbuf++;
  40191e:	68bb      	ldr	r3, [r7, #8]
  401920:	681b      	ldr	r3, [r3, #0]
  401922:	1c59      	adds	r1, r3, #1
  401924:	68ba      	ldr	r2, [r7, #8]
  401926:	6011      	str	r1, [r2, #0]
  401928:	781b      	ldrb	r3, [r3, #0]
  40192a:	617b      	str	r3, [r7, #20]

		if (ctrl->char_size > 1) {
  40192c:	68bb      	ldr	r3, [r7, #8]
  40192e:	7c1b      	ldrb	r3, [r3, #16]
  401930:	2b01      	cmp	r3, #1
  401932:	d90f      	bls.n	401954 <_spi_tx_check_and_send+0x60>
			data |= (*ctrl->txbuf) << 8;
  401934:	68bb      	ldr	r3, [r7, #8]
  401936:	681b      	ldr	r3, [r3, #0]
  401938:	781b      	ldrb	r3, [r3, #0]
  40193a:	021b      	lsls	r3, r3, #8
  40193c:	461a      	mov	r2, r3
  40193e:	697b      	ldr	r3, [r7, #20]
  401940:	4313      	orrs	r3, r2
  401942:	617b      	str	r3, [r7, #20]
			ctrl->txbuf++;
  401944:	68bb      	ldr	r3, [r7, #8]
  401946:	681b      	ldr	r3, [r3, #0]
  401948:	1c5a      	adds	r2, r3, #1
  40194a:	68bb      	ldr	r3, [r7, #8]
  40194c:	601a      	str	r2, [r3, #0]
  40194e:	e001      	b.n	401954 <_spi_tx_check_and_send+0x60>
		}
	} else {
		data = dummy;
  401950:	88fb      	ldrh	r3, [r7, #6]
  401952:	617b      	str	r3, [r7, #20]
	}

	ctrl->txcnt++;
  401954:	68bb      	ldr	r3, [r7, #8]
  401956:	689b      	ldr	r3, [r3, #8]
  401958:	1c5a      	adds	r2, r3, #1
  40195a:	68bb      	ldr	r3, [r7, #8]
  40195c:	609a      	str	r2, [r3, #8]
	hri_spi_write_TDR_reg(hw, data);
  40195e:	6979      	ldr	r1, [r7, #20]
  401960:	68f8      	ldr	r0, [r7, #12]
  401962:	4b04      	ldr	r3, [pc, #16]	; (401974 <_spi_tx_check_and_send+0x80>)
  401964:	4798      	blx	r3
	return true;
  401966:	2301      	movs	r3, #1
}
  401968:	4618      	mov	r0, r3
  40196a:	3718      	adds	r7, #24
  40196c:	46bd      	mov	sp, r7
  40196e:	bd80      	pop	{r7, pc}
  401970:	00401357 	.word	0x00401357
  401974:	0040147b 	.word	0x0040147b

00401978 <_spi_err_check>:

/** Check interrupt flag of ERROR and update transaction runtime information. */
static inline int32_t _spi_err_check(const uint32_t iflag, void *const hw)
{
  401978:	b580      	push	{r7, lr}
  40197a:	b082      	sub	sp, #8
  40197c:	af00      	add	r7, sp, #0
  40197e:	6078      	str	r0, [r7, #4]
  401980:	6039      	str	r1, [r7, #0]
	ASSERT(hw);
  401982:	683b      	ldr	r3, [r7, #0]
  401984:	2b00      	cmp	r3, #0
  401986:	bf14      	ite	ne
  401988:	2301      	movne	r3, #1
  40198a:	2300      	moveq	r3, #0
  40198c:	b2db      	uxtb	r3, r3
  40198e:	f240 2222 	movw	r2, #546	; 0x222
  401992:	4908      	ldr	r1, [pc, #32]	; (4019b4 <_spi_err_check+0x3c>)
  401994:	4618      	mov	r0, r3
  401996:	4b08      	ldr	r3, [pc, #32]	; (4019b8 <_spi_err_check+0x40>)
  401998:	4798      	blx	r3

	if (SPI_SR_OVRES & iflag) {
  40199a:	687b      	ldr	r3, [r7, #4]
  40199c:	f003 0308 	and.w	r3, r3, #8
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	d002      	beq.n	4019aa <_spi_err_check+0x32>
		return ERR_OVERFLOW;
  4019a4:	f06f 0312 	mvn.w	r3, #18
  4019a8:	e000      	b.n	4019ac <_spi_err_check+0x34>
	}

	return ERR_NONE;
  4019aa:	2300      	movs	r3, #0
}
  4019ac:	4618      	mov	r0, r3
  4019ae:	3708      	adds	r7, #8
  4019b0:	46bd      	mov	sp, r7
  4019b2:	bd80      	pop	{r7, pc}
  4019b4:	00402298 	.word	0x00402298
  4019b8:	00400cad 	.word	0x00400cad

004019bc <_spi_m_sync_trans>:

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  4019bc:	b580      	push	{r7, lr}
  4019be:	b08a      	sub	sp, #40	; 0x28
  4019c0:	af00      	add	r7, sp, #0
  4019c2:	6078      	str	r0, [r7, #4]
  4019c4:	6039      	str	r1, [r7, #0]
	void *                 hw   = dev->prvt;
  4019c6:	687b      	ldr	r3, [r7, #4]
  4019c8:	681b      	ldr	r3, [r3, #0]
  4019ca:	623b      	str	r3, [r7, #32]
	int32_t                rc   = 0;
  4019cc:	2300      	movs	r3, #0
  4019ce:	627b      	str	r3, [r7, #36]	; 0x24
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  4019d0:	683b      	ldr	r3, [r7, #0]
  4019d2:	681b      	ldr	r3, [r3, #0]
  4019d4:	60fb      	str	r3, [r7, #12]
  4019d6:	683b      	ldr	r3, [r7, #0]
  4019d8:	685b      	ldr	r3, [r3, #4]
  4019da:	613b      	str	r3, [r7, #16]
  4019dc:	2300      	movs	r3, #0
  4019de:	617b      	str	r3, [r7, #20]
  4019e0:	2300      	movs	r3, #0
  4019e2:	61bb      	str	r3, [r7, #24]
  4019e4:	687b      	ldr	r3, [r7, #4]
  4019e6:	791b      	ldrb	r3, [r3, #4]
  4019e8:	773b      	strb	r3, [r7, #28]

	//ASSERT(dev && hw);

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  4019ea:	6a38      	ldr	r0, [r7, #32]
  4019ec:	4b22      	ldr	r3, [pc, #136]	; (401a78 <_spi_m_sync_trans+0xbc>)
  4019ee:	4798      	blx	r3
  4019f0:	4603      	mov	r3, r0
  4019f2:	f083 0301 	eor.w	r3, r3, #1
  4019f6:	b2db      	uxtb	r3, r3
  4019f8:	2b00      	cmp	r3, #0
  4019fa:	d002      	beq.n	401a02 <_spi_m_sync_trans+0x46>
		return ERR_NOT_INITIALIZED;
  4019fc:	f06f 0313 	mvn.w	r3, #19
  401a00:	e035      	b.n	401a6e <_spi_m_sync_trans+0xb2>
	}

	for (;;) {
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401a02:	f107 030c 	add.w	r3, r7, #12
  401a06:	4619      	mov	r1, r3
  401a08:	6a38      	ldr	r0, [r7, #32]
  401a0a:	4b1c      	ldr	r3, [pc, #112]	; (401a7c <_spi_m_sync_trans+0xc0>)
  401a0c:	4798      	blx	r3
  401a0e:	4603      	mov	r3, r0
  401a10:	f083 0301 	eor.w	r3, r3, #1
  401a14:	b2db      	uxtb	r3, r3
  401a16:	2b00      	cmp	r3, #0
  401a18:	d00b      	beq.n	401a32 <_spi_m_sync_trans+0x76>
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401a1a:	69ba      	ldr	r2, [r7, #24]
  401a1c:	697b      	ldr	r3, [r7, #20]
  401a1e:	429a      	cmp	r2, r3
  401a20:	d307      	bcc.n	401a32 <_spi_m_sync_trans+0x76>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  401a22:	687b      	ldr	r3, [r7, #4]
  401a24:	88da      	ldrh	r2, [r3, #6]
  401a26:	f107 030c 	add.w	r3, r7, #12
  401a2a:	4619      	mov	r1, r3
  401a2c:	6a38      	ldr	r0, [r7, #32]
  401a2e:	4b14      	ldr	r3, [pc, #80]	; (401a80 <_spi_m_sync_trans+0xc4>)
  401a30:	4798      	blx	r3
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
  401a32:	6a38      	ldr	r0, [r7, #32]
  401a34:	4b13      	ldr	r3, [pc, #76]	; (401a84 <_spi_m_sync_trans+0xc8>)
  401a36:	4798      	blx	r3
  401a38:	4603      	mov	r3, r0
  401a3a:	6a39      	ldr	r1, [r7, #32]
  401a3c:	4618      	mov	r0, r3
  401a3e:	4b12      	ldr	r3, [pc, #72]	; (401a88 <_spi_m_sync_trans+0xcc>)
  401a40:	4798      	blx	r3
  401a42:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc < 0) {
  401a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a46:	2b00      	cmp	r3, #0
  401a48:	db0c      	blt.n	401a64 <_spi_m_sync_trans+0xa8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  401a4a:	697a      	ldr	r2, [r7, #20]
  401a4c:	683b      	ldr	r3, [r7, #0]
  401a4e:	689b      	ldr	r3, [r3, #8]
  401a50:	429a      	cmp	r2, r3
  401a52:	d3d6      	bcc.n	401a02 <_spi_m_sync_trans+0x46>
  401a54:	69ba      	ldr	r2, [r7, #24]
  401a56:	683b      	ldr	r3, [r7, #0]
  401a58:	689b      	ldr	r3, [r3, #8]
  401a5a:	429a      	cmp	r2, r3
  401a5c:	d3d1      	bcc.n	401a02 <_spi_m_sync_trans+0x46>
			rc = ctrl.txcnt;
  401a5e:	697b      	ldr	r3, [r7, #20]
  401a60:	627b      	str	r3, [r7, #36]	; 0x24
			break;
  401a62:	e000      	b.n	401a66 <_spi_m_sync_trans+0xaa>
			break;
  401a64:	bf00      	nop
		}
	}

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);
  401a66:	6a38      	ldr	r0, [r7, #32]
  401a68:	4b08      	ldr	r3, [pc, #32]	; (401a8c <_spi_m_sync_trans+0xd0>)
  401a6a:	4798      	blx	r3

	return rc;
  401a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  401a6e:	4618      	mov	r0, r3
  401a70:	3728      	adds	r7, #40	; 0x28
  401a72:	46bd      	mov	sp, r7
  401a74:	bd80      	pop	{r7, pc}
  401a76:	bf00      	nop
  401a78:	0040130b 	.word	0x0040130b
  401a7c:	00401881 	.word	0x00401881
  401a80:	004018f5 	.word	0x004018f5
  401a84:	00401357 	.word	0x00401357
  401a88:	00401979 	.word	0x00401979
  401a8c:	00401859 	.word	0x00401859

00401a90 <_spi_get_spi_m_sync>:

/**
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
  401a90:	b480      	push	{r7}
  401a92:	af00      	add	r7, sp, #0
	return (void *)NULL;
  401a94:	2300      	movs	r3, #0
}
  401a96:	4618      	mov	r0, r3
  401a98:	46bd      	mov	sp, r7
  401a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a9e:	4770      	bx	lr

00401aa0 <hri_matrix_set_CCFG_SYSIO_reg>:
{
  401aa0:	b480      	push	{r7}
  401aa2:	b083      	sub	sp, #12
  401aa4:	af00      	add	r7, sp, #0
  401aa6:	6078      	str	r0, [r7, #4]
  401aa8:	6039      	str	r1, [r7, #0]
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  401aaa:	687b      	ldr	r3, [r7, #4]
  401aac:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
  401ab0:	683b      	ldr	r3, [r7, #0]
  401ab2:	431a      	orrs	r2, r3
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
  401aba:	bf00      	nop
  401abc:	370c      	adds	r7, #12
  401abe:	46bd      	mov	sp, r7
  401ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac4:	4770      	bx	lr

00401ac6 <hri_pio_set_PSR_reg>:
{
  401ac6:	b480      	push	{r7}
  401ac8:	b083      	sub	sp, #12
  401aca:	af00      	add	r7, sp, #0
  401acc:	6078      	str	r0, [r7, #4]
  401ace:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PER = mask;
  401ad0:	687b      	ldr	r3, [r7, #4]
  401ad2:	683a      	ldr	r2, [r7, #0]
  401ad4:	601a      	str	r2, [r3, #0]
}
  401ad6:	bf00      	nop
  401ad8:	370c      	adds	r7, #12
  401ada:	46bd      	mov	sp, r7
  401adc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ae0:	4770      	bx	lr

00401ae2 <hri_pio_clear_PSR_reg>:
{
  401ae2:	b480      	push	{r7}
  401ae4:	b083      	sub	sp, #12
  401ae6:	af00      	add	r7, sp, #0
  401ae8:	6078      	str	r0, [r7, #4]
  401aea:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PDR = mask;
  401aec:	687b      	ldr	r3, [r7, #4]
  401aee:	683a      	ldr	r2, [r7, #0]
  401af0:	605a      	str	r2, [r3, #4]
}
  401af2:	bf00      	nop
  401af4:	370c      	adds	r7, #12
  401af6:	46bd      	mov	sp, r7
  401af8:	f85d 7b04 	ldr.w	r7, [sp], #4
  401afc:	4770      	bx	lr

00401afe <hri_pio_set_OSR_reg>:
{
  401afe:	b480      	push	{r7}
  401b00:	b083      	sub	sp, #12
  401b02:	af00      	add	r7, sp, #0
  401b04:	6078      	str	r0, [r7, #4]
  401b06:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_OER = mask;
  401b08:	687b      	ldr	r3, [r7, #4]
  401b0a:	683a      	ldr	r2, [r7, #0]
  401b0c:	611a      	str	r2, [r3, #16]
}
  401b0e:	bf00      	nop
  401b10:	370c      	adds	r7, #12
  401b12:	46bd      	mov	sp, r7
  401b14:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b18:	4770      	bx	lr

00401b1a <hri_pio_clear_OSR_reg>:
{
  401b1a:	b480      	push	{r7}
  401b1c:	b083      	sub	sp, #12
  401b1e:	af00      	add	r7, sp, #0
  401b20:	6078      	str	r0, [r7, #4]
  401b22:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_ODR = mask;
  401b24:	687b      	ldr	r3, [r7, #4]
  401b26:	683a      	ldr	r2, [r7, #0]
  401b28:	615a      	str	r2, [r3, #20]
}
  401b2a:	bf00      	nop
  401b2c:	370c      	adds	r7, #12
  401b2e:	46bd      	mov	sp, r7
  401b30:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b34:	4770      	bx	lr

00401b36 <hri_pio_set_ODSR_reg>:
{
  401b36:	b480      	push	{r7}
  401b38:	b083      	sub	sp, #12
  401b3a:	af00      	add	r7, sp, #0
  401b3c:	6078      	str	r0, [r7, #4]
  401b3e:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_SODR = mask;
  401b40:	687b      	ldr	r3, [r7, #4]
  401b42:	683a      	ldr	r2, [r7, #0]
  401b44:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b46:	bf00      	nop
  401b48:	370c      	adds	r7, #12
  401b4a:	46bd      	mov	sp, r7
  401b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b50:	4770      	bx	lr

00401b52 <hri_pio_get_ODSR_reg>:
{
  401b52:	b480      	push	{r7}
  401b54:	b085      	sub	sp, #20
  401b56:	af00      	add	r7, sp, #0
  401b58:	6078      	str	r0, [r7, #4]
  401b5a:	6039      	str	r1, [r7, #0]
	tmp = ((Pio *)hw)->PIO_ODSR;
  401b5c:	687b      	ldr	r3, [r7, #4]
  401b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  401b60:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
  401b62:	68fa      	ldr	r2, [r7, #12]
  401b64:	683b      	ldr	r3, [r7, #0]
  401b66:	4013      	ands	r3, r2
  401b68:	60fb      	str	r3, [r7, #12]
	return tmp;
  401b6a:	68fb      	ldr	r3, [r7, #12]
}
  401b6c:	4618      	mov	r0, r3
  401b6e:	3714      	adds	r7, #20
  401b70:	46bd      	mov	sp, r7
  401b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b76:	4770      	bx	lr

00401b78 <hri_pio_clear_ODSR_reg>:
{
  401b78:	b480      	push	{r7}
  401b7a:	b083      	sub	sp, #12
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
  401b80:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_CODR = mask;
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	683a      	ldr	r2, [r7, #0]
  401b86:	635a      	str	r2, [r3, #52]	; 0x34
}
  401b88:	bf00      	nop
  401b8a:	370c      	adds	r7, #12
  401b8c:	46bd      	mov	sp, r7
  401b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b92:	4770      	bx	lr

00401b94 <hri_pio_set_PUSR_reg>:
{
  401b94:	b480      	push	{r7}
  401b96:	b083      	sub	sp, #12
  401b98:	af00      	add	r7, sp, #0
  401b9a:	6078      	str	r0, [r7, #4]
  401b9c:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUER = mask;
  401b9e:	687b      	ldr	r3, [r7, #4]
  401ba0:	683a      	ldr	r2, [r7, #0]
  401ba2:	665a      	str	r2, [r3, #100]	; 0x64
}
  401ba4:	bf00      	nop
  401ba6:	370c      	adds	r7, #12
  401ba8:	46bd      	mov	sp, r7
  401baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bae:	4770      	bx	lr

00401bb0 <hri_pio_clear_PUSR_reg>:
{
  401bb0:	b480      	push	{r7}
  401bb2:	b083      	sub	sp, #12
  401bb4:	af00      	add	r7, sp, #0
  401bb6:	6078      	str	r0, [r7, #4]
  401bb8:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PUDR = mask;
  401bba:	687b      	ldr	r3, [r7, #4]
  401bbc:	683a      	ldr	r2, [r7, #0]
  401bbe:	661a      	str	r2, [r3, #96]	; 0x60
}
  401bc0:	bf00      	nop
  401bc2:	370c      	adds	r7, #12
  401bc4:	46bd      	mov	sp, r7
  401bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bca:	4770      	bx	lr

00401bcc <hri_pio_set_PPDSR_reg>:
{
  401bcc:	b480      	push	{r7}
  401bce:	b083      	sub	sp, #12
  401bd0:	af00      	add	r7, sp, #0
  401bd2:	6078      	str	r0, [r7, #4]
  401bd4:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDER = mask;
  401bd6:	687b      	ldr	r3, [r7, #4]
  401bd8:	683a      	ldr	r2, [r7, #0]
  401bda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
  401bde:	bf00      	nop
  401be0:	370c      	adds	r7, #12
  401be2:	46bd      	mov	sp, r7
  401be4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401be8:	4770      	bx	lr

00401bea <hri_pio_clear_PPDSR_reg>:
{
  401bea:	b480      	push	{r7}
  401bec:	b083      	sub	sp, #12
  401bee:	af00      	add	r7, sp, #0
  401bf0:	6078      	str	r0, [r7, #4]
  401bf2:	6039      	str	r1, [r7, #0]
	((Pio *)hw)->PIO_PPDDR = mask;
  401bf4:	687b      	ldr	r3, [r7, #4]
  401bf6:	683a      	ldr	r2, [r7, #0]
  401bf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
  401bfc:	bf00      	nop
  401bfe:	370c      	adds	r7, #12
  401c00:	46bd      	mov	sp, r7
  401c02:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c06:	4770      	bx	lr

00401c08 <hri_pio_set_ABCDSR_reg>:
{
  401c08:	b480      	push	{r7}
  401c0a:	b085      	sub	sp, #20
  401c0c:	af00      	add	r7, sp, #0
  401c0e:	60f8      	str	r0, [r7, #12]
  401c10:	460b      	mov	r3, r1
  401c12:	607a      	str	r2, [r7, #4]
  401c14:	72fb      	strb	r3, [r7, #11]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  401c16:	7afa      	ldrb	r2, [r7, #11]
  401c18:	7af9      	ldrb	r1, [r7, #11]
  401c1a:	68fb      	ldr	r3, [r7, #12]
  401c1c:	311c      	adds	r1, #28
  401c1e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  401c22:	687b      	ldr	r3, [r7, #4]
  401c24:	4319      	orrs	r1, r3
  401c26:	68fb      	ldr	r3, [r7, #12]
  401c28:	321c      	adds	r2, #28
  401c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401c2e:	bf00      	nop
  401c30:	3714      	adds	r7, #20
  401c32:	46bd      	mov	sp, r7
  401c34:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c38:	4770      	bx	lr

00401c3a <hri_pio_clear_ABCDSR_reg>:
{
  401c3a:	b480      	push	{r7}
  401c3c:	b085      	sub	sp, #20
  401c3e:	af00      	add	r7, sp, #0
  401c40:	60f8      	str	r0, [r7, #12]
  401c42:	460b      	mov	r3, r1
  401c44:	607a      	str	r2, [r7, #4]
  401c46:	72fb      	strb	r3, [r7, #11]
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  401c48:	7afa      	ldrb	r2, [r7, #11]
  401c4a:	7af9      	ldrb	r1, [r7, #11]
  401c4c:	68fb      	ldr	r3, [r7, #12]
  401c4e:	311c      	adds	r1, #28
  401c50:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  401c54:	687b      	ldr	r3, [r7, #4]
  401c56:	43db      	mvns	r3, r3
  401c58:	4019      	ands	r1, r3
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	321c      	adds	r2, #28
  401c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401c62:	bf00      	nop
  401c64:	3714      	adds	r7, #20
  401c66:	46bd      	mov	sp, r7
  401c68:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c6c:	4770      	bx	lr
	...

00401c70 <port_to_reg>:
{
  401c70:	b480      	push	{r7}
  401c72:	b083      	sub	sp, #12
  401c74:	af00      	add	r7, sp, #0
  401c76:	4603      	mov	r3, r0
  401c78:	71fb      	strb	r3, [r7, #7]
	return (void *)((uint32_t)PIOA + port * 0x200);
  401c7a:	79fb      	ldrb	r3, [r7, #7]
  401c7c:	025b      	lsls	r3, r3, #9
  401c7e:	461a      	mov	r2, r3
  401c80:	4b03      	ldr	r3, [pc, #12]	; (401c90 <port_to_reg+0x20>)
  401c82:	4413      	add	r3, r2
}
  401c84:	4618      	mov	r0, r3
  401c86:	370c      	adds	r7, #12
  401c88:	46bd      	mov	sp, r7
  401c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c8e:	4770      	bx	lr
  401c90:	400e0e00 	.word	0x400e0e00

00401c94 <_gpio_set_direction>:
{
  401c94:	b580      	push	{r7, lr}
  401c96:	b084      	sub	sp, #16
  401c98:	af00      	add	r7, sp, #0
  401c9a:	4603      	mov	r3, r0
  401c9c:	6039      	str	r1, [r7, #0]
  401c9e:	71fb      	strb	r3, [r7, #7]
  401ca0:	4613      	mov	r3, r2
  401ca2:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  401ca4:	79fb      	ldrb	r3, [r7, #7]
  401ca6:	4618      	mov	r0, r3
  401ca8:	4b0e      	ldr	r3, [pc, #56]	; (401ce4 <_gpio_set_direction+0x50>)
  401caa:	4798      	blx	r3
  401cac:	60f8      	str	r0, [r7, #12]
	switch (direction) {
  401cae:	79bb      	ldrb	r3, [r7, #6]
  401cb0:	2b00      	cmp	r3, #0
  401cb2:	db0e      	blt.n	401cd2 <_gpio_set_direction+0x3e>
  401cb4:	2b01      	cmp	r3, #1
  401cb6:	dd02      	ble.n	401cbe <_gpio_set_direction+0x2a>
  401cb8:	2b02      	cmp	r3, #2
  401cba:	d005      	beq.n	401cc8 <_gpio_set_direction+0x34>
  401cbc:	e009      	b.n	401cd2 <_gpio_set_direction+0x3e>
		hri_pio_clear_OSR_reg(hw, mask);
  401cbe:	6839      	ldr	r1, [r7, #0]
  401cc0:	68f8      	ldr	r0, [r7, #12]
  401cc2:	4b09      	ldr	r3, [pc, #36]	; (401ce8 <_gpio_set_direction+0x54>)
  401cc4:	4798      	blx	r3
		break;
  401cc6:	e009      	b.n	401cdc <_gpio_set_direction+0x48>
		hri_pio_set_OSR_reg(hw, mask);
  401cc8:	6839      	ldr	r1, [r7, #0]
  401cca:	68f8      	ldr	r0, [r7, #12]
  401ccc:	4b07      	ldr	r3, [pc, #28]	; (401cec <_gpio_set_direction+0x58>)
  401cce:	4798      	blx	r3
		break;
  401cd0:	e004      	b.n	401cdc <_gpio_set_direction+0x48>
		ASSERT(false);
  401cd2:	2241      	movs	r2, #65	; 0x41
  401cd4:	4906      	ldr	r1, [pc, #24]	; (401cf0 <_gpio_set_direction+0x5c>)
  401cd6:	2000      	movs	r0, #0
  401cd8:	4b06      	ldr	r3, [pc, #24]	; (401cf4 <_gpio_set_direction+0x60>)
  401cda:	4798      	blx	r3
}
  401cdc:	bf00      	nop
  401cde:	3710      	adds	r7, #16
  401ce0:	46bd      	mov	sp, r7
  401ce2:	bd80      	pop	{r7, pc}
  401ce4:	00401c71 	.word	0x00401c71
  401ce8:	00401b1b 	.word	0x00401b1b
  401cec:	00401aff 	.word	0x00401aff
  401cf0:	004022b0 	.word	0x004022b0
  401cf4:	00400cad 	.word	0x00400cad

00401cf8 <_gpio_set_level>:
{
  401cf8:	b580      	push	{r7, lr}
  401cfa:	b084      	sub	sp, #16
  401cfc:	af00      	add	r7, sp, #0
  401cfe:	4603      	mov	r3, r0
  401d00:	6039      	str	r1, [r7, #0]
  401d02:	71fb      	strb	r3, [r7, #7]
  401d04:	4613      	mov	r3, r2
  401d06:	71bb      	strb	r3, [r7, #6]
	void *const hw = port_to_reg(port);
  401d08:	79fb      	ldrb	r3, [r7, #7]
  401d0a:	4618      	mov	r0, r3
  401d0c:	4b09      	ldr	r3, [pc, #36]	; (401d34 <_gpio_set_level+0x3c>)
  401d0e:	4798      	blx	r3
  401d10:	60f8      	str	r0, [r7, #12]
	if (level) {
  401d12:	79bb      	ldrb	r3, [r7, #6]
  401d14:	2b00      	cmp	r3, #0
  401d16:	d004      	beq.n	401d22 <_gpio_set_level+0x2a>
		hri_pio_set_ODSR_reg(hw, mask);
  401d18:	6839      	ldr	r1, [r7, #0]
  401d1a:	68f8      	ldr	r0, [r7, #12]
  401d1c:	4b06      	ldr	r3, [pc, #24]	; (401d38 <_gpio_set_level+0x40>)
  401d1e:	4798      	blx	r3
}
  401d20:	e003      	b.n	401d2a <_gpio_set_level+0x32>
		hri_pio_clear_ODSR_reg(hw, mask);
  401d22:	6839      	ldr	r1, [r7, #0]
  401d24:	68f8      	ldr	r0, [r7, #12]
  401d26:	4b05      	ldr	r3, [pc, #20]	; (401d3c <_gpio_set_level+0x44>)
  401d28:	4798      	blx	r3
}
  401d2a:	bf00      	nop
  401d2c:	3710      	adds	r7, #16
  401d2e:	46bd      	mov	sp, r7
  401d30:	bd80      	pop	{r7, pc}
  401d32:	bf00      	nop
  401d34:	00401c71 	.word	0x00401c71
  401d38:	00401b37 	.word	0x00401b37
  401d3c:	00401b79 	.word	0x00401b79

00401d40 <_gpio_toggle_level>:
{
  401d40:	b580      	push	{r7, lr}
  401d42:	b086      	sub	sp, #24
  401d44:	af00      	add	r7, sp, #0
  401d46:	4603      	mov	r3, r0
  401d48:	6039      	str	r1, [r7, #0]
  401d4a:	71fb      	strb	r3, [r7, #7]
	void *const hw = port_to_reg(port);
  401d4c:	79fb      	ldrb	r3, [r7, #7]
  401d4e:	4618      	mov	r0, r3
  401d50:	4b0c      	ldr	r3, [pc, #48]	; (401d84 <_gpio_toggle_level+0x44>)
  401d52:	4798      	blx	r3
  401d54:	6178      	str	r0, [r7, #20]
	bits_clear = hri_pio_get_ODSR_reg(hw, mask);
  401d56:	6839      	ldr	r1, [r7, #0]
  401d58:	6978      	ldr	r0, [r7, #20]
  401d5a:	4b0b      	ldr	r3, [pc, #44]	; (401d88 <_gpio_toggle_level+0x48>)
  401d5c:	4798      	blx	r3
  401d5e:	6138      	str	r0, [r7, #16]
	bits_set   = (~bits_clear) & mask;
  401d60:	693b      	ldr	r3, [r7, #16]
  401d62:	43da      	mvns	r2, r3
  401d64:	683b      	ldr	r3, [r7, #0]
  401d66:	4013      	ands	r3, r2
  401d68:	60fb      	str	r3, [r7, #12]
	hri_pio_set_ODSR_reg(hw, bits_set);
  401d6a:	68f9      	ldr	r1, [r7, #12]
  401d6c:	6978      	ldr	r0, [r7, #20]
  401d6e:	4b07      	ldr	r3, [pc, #28]	; (401d8c <_gpio_toggle_level+0x4c>)
  401d70:	4798      	blx	r3
	hri_pio_clear_ODSR_reg(hw, bits_clear);
  401d72:	6939      	ldr	r1, [r7, #16]
  401d74:	6978      	ldr	r0, [r7, #20]
  401d76:	4b06      	ldr	r3, [pc, #24]	; (401d90 <_gpio_toggle_level+0x50>)
  401d78:	4798      	blx	r3
}
  401d7a:	bf00      	nop
  401d7c:	3718      	adds	r7, #24
  401d7e:	46bd      	mov	sp, r7
  401d80:	bd80      	pop	{r7, pc}
  401d82:	bf00      	nop
  401d84:	00401c71 	.word	0x00401c71
  401d88:	00401b53 	.word	0x00401b53
  401d8c:	00401b37 	.word	0x00401b37
  401d90:	00401b79 	.word	0x00401b79

00401d94 <_gpio_set_pin_pull_mode>:
{
  401d94:	b580      	push	{r7, lr}
  401d96:	b084      	sub	sp, #16
  401d98:	af00      	add	r7, sp, #0
  401d9a:	4603      	mov	r3, r0
  401d9c:	71fb      	strb	r3, [r7, #7]
  401d9e:	460b      	mov	r3, r1
  401da0:	71bb      	strb	r3, [r7, #6]
  401da2:	4613      	mov	r3, r2
  401da4:	717b      	strb	r3, [r7, #5]
	void *const hw = port_to_reg(port);
  401da6:	79fb      	ldrb	r3, [r7, #7]
  401da8:	4618      	mov	r0, r3
  401daa:	4b23      	ldr	r3, [pc, #140]	; (401e38 <_gpio_set_pin_pull_mode+0xa4>)
  401dac:	4798      	blx	r3
  401dae:	60f8      	str	r0, [r7, #12]
	switch (pull_mode) {
  401db0:	797b      	ldrb	r3, [r7, #5]
  401db2:	2b01      	cmp	r3, #1
  401db4:	d014      	beq.n	401de0 <_gpio_set_pin_pull_mode+0x4c>
  401db6:	2b02      	cmp	r3, #2
  401db8:	d023      	beq.n	401e02 <_gpio_set_pin_pull_mode+0x6e>
  401dba:	2b00      	cmp	r3, #0
  401dbc:	d132      	bne.n	401e24 <_gpio_set_pin_pull_mode+0x90>
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  401dbe:	79bb      	ldrb	r3, [r7, #6]
  401dc0:	2201      	movs	r2, #1
  401dc2:	fa02 f303 	lsl.w	r3, r2, r3
  401dc6:	4619      	mov	r1, r3
  401dc8:	68f8      	ldr	r0, [r7, #12]
  401dca:	4b1c      	ldr	r3, [pc, #112]	; (401e3c <_gpio_set_pin_pull_mode+0xa8>)
  401dcc:	4798      	blx	r3
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  401dce:	79bb      	ldrb	r3, [r7, #6]
  401dd0:	2201      	movs	r2, #1
  401dd2:	fa02 f303 	lsl.w	r3, r2, r3
  401dd6:	4619      	mov	r1, r3
  401dd8:	68f8      	ldr	r0, [r7, #12]
  401dda:	4b19      	ldr	r3, [pc, #100]	; (401e40 <_gpio_set_pin_pull_mode+0xac>)
  401ddc:	4798      	blx	r3
		break;
  401dde:	e027      	b.n	401e30 <_gpio_set_pin_pull_mode+0x9c>
		hri_pio_clear_PPDSR_reg(hw, 1U << pin);
  401de0:	79bb      	ldrb	r3, [r7, #6]
  401de2:	2201      	movs	r2, #1
  401de4:	fa02 f303 	lsl.w	r3, r2, r3
  401de8:	4619      	mov	r1, r3
  401dea:	68f8      	ldr	r0, [r7, #12]
  401dec:	4b14      	ldr	r3, [pc, #80]	; (401e40 <_gpio_set_pin_pull_mode+0xac>)
  401dee:	4798      	blx	r3
		hri_pio_set_PUSR_reg(hw, 1U << pin);
  401df0:	79bb      	ldrb	r3, [r7, #6]
  401df2:	2201      	movs	r2, #1
  401df4:	fa02 f303 	lsl.w	r3, r2, r3
  401df8:	4619      	mov	r1, r3
  401dfa:	68f8      	ldr	r0, [r7, #12]
  401dfc:	4b11      	ldr	r3, [pc, #68]	; (401e44 <_gpio_set_pin_pull_mode+0xb0>)
  401dfe:	4798      	blx	r3
		break;
  401e00:	e016      	b.n	401e30 <_gpio_set_pin_pull_mode+0x9c>
		hri_pio_clear_PUSR_reg(hw, 1U << pin);
  401e02:	79bb      	ldrb	r3, [r7, #6]
  401e04:	2201      	movs	r2, #1
  401e06:	fa02 f303 	lsl.w	r3, r2, r3
  401e0a:	4619      	mov	r1, r3
  401e0c:	68f8      	ldr	r0, [r7, #12]
  401e0e:	4b0b      	ldr	r3, [pc, #44]	; (401e3c <_gpio_set_pin_pull_mode+0xa8>)
  401e10:	4798      	blx	r3
		hri_pio_set_PPDSR_reg(hw, 1U << pin);
  401e12:	79bb      	ldrb	r3, [r7, #6]
  401e14:	2201      	movs	r2, #1
  401e16:	fa02 f303 	lsl.w	r3, r2, r3
  401e1a:	4619      	mov	r1, r3
  401e1c:	68f8      	ldr	r0, [r7, #12]
  401e1e:	4b0a      	ldr	r3, [pc, #40]	; (401e48 <_gpio_set_pin_pull_mode+0xb4>)
  401e20:	4798      	blx	r3
		break;
  401e22:	e005      	b.n	401e30 <_gpio_set_pin_pull_mode+0x9c>
		ASSERT(false);
  401e24:	2283      	movs	r2, #131	; 0x83
  401e26:	4909      	ldr	r1, [pc, #36]	; (401e4c <_gpio_set_pin_pull_mode+0xb8>)
  401e28:	2000      	movs	r0, #0
  401e2a:	4b09      	ldr	r3, [pc, #36]	; (401e50 <_gpio_set_pin_pull_mode+0xbc>)
  401e2c:	4798      	blx	r3
		break;
  401e2e:	bf00      	nop
}
  401e30:	bf00      	nop
  401e32:	3710      	adds	r7, #16
  401e34:	46bd      	mov	sp, r7
  401e36:	bd80      	pop	{r7, pc}
  401e38:	00401c71 	.word	0x00401c71
  401e3c:	00401bb1 	.word	0x00401bb1
  401e40:	00401beb 	.word	0x00401beb
  401e44:	00401b95 	.word	0x00401b95
  401e48:	00401bcd 	.word	0x00401bcd
  401e4c:	004022b0 	.word	0x004022b0
  401e50:	00400cad 	.word	0x00400cad

00401e54 <_gpio_set_pin_function>:
{
  401e54:	b580      	push	{r7, lr}
  401e56:	b084      	sub	sp, #16
  401e58:	af00      	add	r7, sp, #0
  401e5a:	6078      	str	r0, [r7, #4]
  401e5c:	6039      	str	r1, [r7, #0]
	uint8_t     port = GPIO_PORT(gpio);
  401e5e:	687b      	ldr	r3, [r7, #4]
  401e60:	095b      	lsrs	r3, r3, #5
  401e62:	73fb      	strb	r3, [r7, #15]
	uint8_t     pin  = GPIO_PIN(gpio);
  401e64:	687b      	ldr	r3, [r7, #4]
  401e66:	b2db      	uxtb	r3, r3
  401e68:	f003 031f 	and.w	r3, r3, #31
  401e6c:	73bb      	strb	r3, [r7, #14]
	void *const hw   = port_to_reg((enum gpio_port)port);
  401e6e:	7bfb      	ldrb	r3, [r7, #15]
  401e70:	4618      	mov	r0, r3
  401e72:	4b33      	ldr	r3, [pc, #204]	; (401f40 <_gpio_set_pin_function+0xec>)
  401e74:	4798      	blx	r3
  401e76:	60b8      	str	r0, [r7, #8]
	if ((enum gpio_port)port == GPIO_PORTB) {
  401e78:	7bfb      	ldrb	r3, [r7, #15]
  401e7a:	2b01      	cmp	r3, #1
  401e7c:	d116      	bne.n	401eac <_gpio_set_pin_function+0x58>
		if ((pin == 4) || (pin == 5) || (pin == 6) || (pin == 7) || (pin == 12)) {
  401e7e:	7bbb      	ldrb	r3, [r7, #14]
  401e80:	2b04      	cmp	r3, #4
  401e82:	d00b      	beq.n	401e9c <_gpio_set_pin_function+0x48>
  401e84:	7bbb      	ldrb	r3, [r7, #14]
  401e86:	2b05      	cmp	r3, #5
  401e88:	d008      	beq.n	401e9c <_gpio_set_pin_function+0x48>
  401e8a:	7bbb      	ldrb	r3, [r7, #14]
  401e8c:	2b06      	cmp	r3, #6
  401e8e:	d005      	beq.n	401e9c <_gpio_set_pin_function+0x48>
  401e90:	7bbb      	ldrb	r3, [r7, #14]
  401e92:	2b07      	cmp	r3, #7
  401e94:	d002      	beq.n	401e9c <_gpio_set_pin_function+0x48>
  401e96:	7bbb      	ldrb	r3, [r7, #14]
  401e98:	2b0c      	cmp	r3, #12
  401e9a:	d107      	bne.n	401eac <_gpio_set_pin_function+0x58>
			hri_matrix_set_CCFG_SYSIO_reg(MATRIX, (0x1 << pin));
  401e9c:	7bbb      	ldrb	r3, [r7, #14]
  401e9e:	2201      	movs	r2, #1
  401ea0:	fa02 f303 	lsl.w	r3, r2, r3
  401ea4:	4619      	mov	r1, r3
  401ea6:	4827      	ldr	r0, [pc, #156]	; (401f44 <_gpio_set_pin_function+0xf0>)
  401ea8:	4b27      	ldr	r3, [pc, #156]	; (401f48 <_gpio_set_pin_function+0xf4>)
  401eaa:	4798      	blx	r3
	if (function == GPIO_PIN_FUNCTION_OFF) {
  401eac:	683b      	ldr	r3, [r7, #0]
  401eae:	f1b3 3fff 	cmp.w	r3, #4294967295
  401eb2:	d108      	bne.n	401ec6 <_gpio_set_pin_function+0x72>
		hri_pio_set_PSR_reg(hw, 1U << pin);
  401eb4:	7bbb      	ldrb	r3, [r7, #14]
  401eb6:	2201      	movs	r2, #1
  401eb8:	fa02 f303 	lsl.w	r3, r2, r3
  401ebc:	4619      	mov	r1, r3
  401ebe:	68b8      	ldr	r0, [r7, #8]
  401ec0:	4b22      	ldr	r3, [pc, #136]	; (401f4c <_gpio_set_pin_function+0xf8>)
  401ec2:	4798      	blx	r3
}
  401ec4:	e037      	b.n	401f36 <_gpio_set_pin_function+0xe2>
		if (function & 0x1) {
  401ec6:	683b      	ldr	r3, [r7, #0]
  401ec8:	f003 0301 	and.w	r3, r3, #1
  401ecc:	2b00      	cmp	r3, #0
  401ece:	d009      	beq.n	401ee4 <_gpio_set_pin_function+0x90>
			hri_pio_set_ABCDSR_reg(hw, 0, 1U << pin);
  401ed0:	7bbb      	ldrb	r3, [r7, #14]
  401ed2:	2201      	movs	r2, #1
  401ed4:	fa02 f303 	lsl.w	r3, r2, r3
  401ed8:	461a      	mov	r2, r3
  401eda:	2100      	movs	r1, #0
  401edc:	68b8      	ldr	r0, [r7, #8]
  401ede:	4b1c      	ldr	r3, [pc, #112]	; (401f50 <_gpio_set_pin_function+0xfc>)
  401ee0:	4798      	blx	r3
  401ee2:	e008      	b.n	401ef6 <_gpio_set_pin_function+0xa2>
			hri_pio_clear_ABCDSR_reg(hw, 0, 1U << pin);
  401ee4:	7bbb      	ldrb	r3, [r7, #14]
  401ee6:	2201      	movs	r2, #1
  401ee8:	fa02 f303 	lsl.w	r3, r2, r3
  401eec:	461a      	mov	r2, r3
  401eee:	2100      	movs	r1, #0
  401ef0:	68b8      	ldr	r0, [r7, #8]
  401ef2:	4b18      	ldr	r3, [pc, #96]	; (401f54 <_gpio_set_pin_function+0x100>)
  401ef4:	4798      	blx	r3
		if (function & 0x2) {
  401ef6:	683b      	ldr	r3, [r7, #0]
  401ef8:	f003 0302 	and.w	r3, r3, #2
  401efc:	2b00      	cmp	r3, #0
  401efe:	d009      	beq.n	401f14 <_gpio_set_pin_function+0xc0>
			hri_pio_set_ABCDSR_reg(hw, 1, 1U << pin);
  401f00:	7bbb      	ldrb	r3, [r7, #14]
  401f02:	2201      	movs	r2, #1
  401f04:	fa02 f303 	lsl.w	r3, r2, r3
  401f08:	461a      	mov	r2, r3
  401f0a:	2101      	movs	r1, #1
  401f0c:	68b8      	ldr	r0, [r7, #8]
  401f0e:	4b10      	ldr	r3, [pc, #64]	; (401f50 <_gpio_set_pin_function+0xfc>)
  401f10:	4798      	blx	r3
  401f12:	e008      	b.n	401f26 <_gpio_set_pin_function+0xd2>
			hri_pio_clear_ABCDSR_reg(hw, 1, 1U << pin);
  401f14:	7bbb      	ldrb	r3, [r7, #14]
  401f16:	2201      	movs	r2, #1
  401f18:	fa02 f303 	lsl.w	r3, r2, r3
  401f1c:	461a      	mov	r2, r3
  401f1e:	2101      	movs	r1, #1
  401f20:	68b8      	ldr	r0, [r7, #8]
  401f22:	4b0c      	ldr	r3, [pc, #48]	; (401f54 <_gpio_set_pin_function+0x100>)
  401f24:	4798      	blx	r3
		hri_pio_clear_PSR_reg(hw, 1U << pin);
  401f26:	7bbb      	ldrb	r3, [r7, #14]
  401f28:	2201      	movs	r2, #1
  401f2a:	fa02 f303 	lsl.w	r3, r2, r3
  401f2e:	4619      	mov	r1, r3
  401f30:	68b8      	ldr	r0, [r7, #8]
  401f32:	4b09      	ldr	r3, [pc, #36]	; (401f58 <_gpio_set_pin_function+0x104>)
  401f34:	4798      	blx	r3
}
  401f36:	bf00      	nop
  401f38:	3710      	adds	r7, #16
  401f3a:	46bd      	mov	sp, r7
  401f3c:	bd80      	pop	{r7, pc}
  401f3e:	bf00      	nop
  401f40:	00401c71 	.word	0x00401c71
  401f44:	40088000 	.word	0x40088000
  401f48:	00401aa1 	.word	0x00401aa1
  401f4c:	00401ac7 	.word	0x00401ac7
  401f50:	00401c09 	.word	0x00401c09
  401f54:	00401c3b 	.word	0x00401c3b
  401f58:	00401ae3 	.word	0x00401ae3

00401f5c <gpio_set_pin_pull_mode>:
{
  401f5c:	b580      	push	{r7, lr}
  401f5e:	b082      	sub	sp, #8
  401f60:	af00      	add	r7, sp, #0
  401f62:	4603      	mov	r3, r0
  401f64:	460a      	mov	r2, r1
  401f66:	71fb      	strb	r3, [r7, #7]
  401f68:	4613      	mov	r3, r2
  401f6a:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
  401f6c:	79fb      	ldrb	r3, [r7, #7]
  401f6e:	095b      	lsrs	r3, r3, #5
  401f70:	b2d8      	uxtb	r0, r3
  401f72:	79fb      	ldrb	r3, [r7, #7]
  401f74:	f003 031f 	and.w	r3, r3, #31
  401f78:	b2db      	uxtb	r3, r3
  401f7a:	79ba      	ldrb	r2, [r7, #6]
  401f7c:	4619      	mov	r1, r3
  401f7e:	4b03      	ldr	r3, [pc, #12]	; (401f8c <gpio_set_pin_pull_mode+0x30>)
  401f80:	4798      	blx	r3
}
  401f82:	bf00      	nop
  401f84:	3708      	adds	r7, #8
  401f86:	46bd      	mov	sp, r7
  401f88:	bd80      	pop	{r7, pc}
  401f8a:	bf00      	nop
  401f8c:	00401d95 	.word	0x00401d95

00401f90 <gpio_set_pin_function>:
{
  401f90:	b580      	push	{r7, lr}
  401f92:	b082      	sub	sp, #8
  401f94:	af00      	add	r7, sp, #0
  401f96:	6078      	str	r0, [r7, #4]
  401f98:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
  401f9a:	6839      	ldr	r1, [r7, #0]
  401f9c:	6878      	ldr	r0, [r7, #4]
  401f9e:	4b03      	ldr	r3, [pc, #12]	; (401fac <gpio_set_pin_function+0x1c>)
  401fa0:	4798      	blx	r3
}
  401fa2:	bf00      	nop
  401fa4:	3708      	adds	r7, #8
  401fa6:	46bd      	mov	sp, r7
  401fa8:	bd80      	pop	{r7, pc}
  401faa:	bf00      	nop
  401fac:	00401e55 	.word	0x00401e55

00401fb0 <gpio_set_pin_direction>:
{
  401fb0:	b580      	push	{r7, lr}
  401fb2:	b082      	sub	sp, #8
  401fb4:	af00      	add	r7, sp, #0
  401fb6:	4603      	mov	r3, r0
  401fb8:	460a      	mov	r2, r1
  401fba:	71fb      	strb	r3, [r7, #7]
  401fbc:	4613      	mov	r3, r2
  401fbe:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
  401fc0:	79fb      	ldrb	r3, [r7, #7]
  401fc2:	095b      	lsrs	r3, r3, #5
  401fc4:	b2d8      	uxtb	r0, r3
  401fc6:	79fb      	ldrb	r3, [r7, #7]
  401fc8:	f003 031f 	and.w	r3, r3, #31
  401fcc:	2201      	movs	r2, #1
  401fce:	fa02 f303 	lsl.w	r3, r2, r3
  401fd2:	79ba      	ldrb	r2, [r7, #6]
  401fd4:	4619      	mov	r1, r3
  401fd6:	4b03      	ldr	r3, [pc, #12]	; (401fe4 <gpio_set_pin_direction+0x34>)
  401fd8:	4798      	blx	r3
}
  401fda:	bf00      	nop
  401fdc:	3708      	adds	r7, #8
  401fde:	46bd      	mov	sp, r7
  401fe0:	bd80      	pop	{r7, pc}
  401fe2:	bf00      	nop
  401fe4:	00401c95 	.word	0x00401c95

00401fe8 <gpio_set_pin_level>:
{
  401fe8:	b580      	push	{r7, lr}
  401fea:	b082      	sub	sp, #8
  401fec:	af00      	add	r7, sp, #0
  401fee:	4603      	mov	r3, r0
  401ff0:	460a      	mov	r2, r1
  401ff2:	71fb      	strb	r3, [r7, #7]
  401ff4:	4613      	mov	r3, r2
  401ff6:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  401ff8:	79fb      	ldrb	r3, [r7, #7]
  401ffa:	095b      	lsrs	r3, r3, #5
  401ffc:	b2d8      	uxtb	r0, r3
  401ffe:	79fb      	ldrb	r3, [r7, #7]
  402000:	f003 031f 	and.w	r3, r3, #31
  402004:	2201      	movs	r2, #1
  402006:	fa02 f303 	lsl.w	r3, r2, r3
  40200a:	79ba      	ldrb	r2, [r7, #6]
  40200c:	4619      	mov	r1, r3
  40200e:	4b03      	ldr	r3, [pc, #12]	; (40201c <gpio_set_pin_level+0x34>)
  402010:	4798      	blx	r3
}
  402012:	bf00      	nop
  402014:	3708      	adds	r7, #8
  402016:	46bd      	mov	sp, r7
  402018:	bd80      	pop	{r7, pc}
  40201a:	bf00      	nop
  40201c:	00401cf9 	.word	0x00401cf9

00402020 <gpio_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number for device
 */
static inline void gpio_toggle_pin_level(const uint8_t pin)
{
  402020:	b580      	push	{r7, lr}
  402022:	b082      	sub	sp, #8
  402024:	af00      	add	r7, sp, #0
  402026:	4603      	mov	r3, r0
  402028:	71fb      	strb	r3, [r7, #7]
	_gpio_toggle_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin));
  40202a:	79fb      	ldrb	r3, [r7, #7]
  40202c:	095b      	lsrs	r3, r3, #5
  40202e:	b2d8      	uxtb	r0, r3
  402030:	79fb      	ldrb	r3, [r7, #7]
  402032:	f003 031f 	and.w	r3, r3, #31
  402036:	2201      	movs	r2, #1
  402038:	fa02 f303 	lsl.w	r3, r2, r3
  40203c:	4619      	mov	r1, r3
  40203e:	4b03      	ldr	r3, [pc, #12]	; (40204c <gpio_toggle_pin_level+0x2c>)
  402040:	4798      	blx	r3
}
  402042:	bf00      	nop
  402044:	3708      	adds	r7, #8
  402046:	46bd      	mov	sp, r7
  402048:	bd80      	pop	{r7, pc}
  40204a:	bf00      	nop
  40204c:	00401d41 	.word	0x00401d41

00402050 <main>:
#define TDC_ENABLE GPIO(GPIO_PORTB, 2)

static int32_t custom_io_rw(struct io_descriptor *const io, uint8_t *inbuf, const uint8_t *const outbuf, const uint16_t length);

int main(void)
{
  402050:	b580      	push	{r7, lr}
  402052:	b082      	sub	sp, #8
  402054:	af00      	add	r7, sp, #0
	//uint16_t *datain = 0;
	//uint16_t *dataout3 = 0xFF01;
	volatile uint32_t tof;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  402056:	4b23      	ldr	r3, [pc, #140]	; (4020e4 <main+0x94>)
  402058:	4798      	blx	r3
	
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  40205a:	1d3b      	adds	r3, r7, #4
  40205c:	4619      	mov	r1, r3
  40205e:	4822      	ldr	r0, [pc, #136]	; (4020e8 <main+0x98>)
  402060:	4b22      	ldr	r3, [pc, #136]	; (4020ec <main+0x9c>)
  402062:	4798      	blx	r3
	spi_m_sync_enable(&SPI_0);
  402064:	4820      	ldr	r0, [pc, #128]	; (4020e8 <main+0x98>)
  402066:	4b22      	ldr	r3, [pc, #136]	; (4020f0 <main+0xa0>)
  402068:	4798      	blx	r3
	spi_m_sync_set_baudrate(&SPI_0,1000);
  40206a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  40206e:	481e      	ldr	r0, [pc, #120]	; (4020e8 <main+0x98>)
  402070:	4b20      	ldr	r3, [pc, #128]	; (4020f4 <main+0xa4>)
  402072:	4798      	blx	r3
	//Mode 3 is leading edge is falling, sample on trailing (rising) edge.
	spi_m_sync_set_mode(&SPI_0,SPI_MODE_0);
  402074:	2100      	movs	r1, #0
  402076:	481c      	ldr	r0, [pc, #112]	; (4020e8 <main+0x98>)
  402078:	4b1f      	ldr	r3, [pc, #124]	; (4020f8 <main+0xa8>)
  40207a:	4798      	blx	r3
	spi_m_sync_set_char_size(&SPI_0,SPI_CHAR_SIZE_8);
  40207c:	2100      	movs	r1, #0
  40207e:	481a      	ldr	r0, [pc, #104]	; (4020e8 <main+0x98>)
  402080:	4b1e      	ldr	r3, [pc, #120]	; (4020fc <main+0xac>)
  402082:	4798      	blx	r3
	
	gpio_set_pin_level(SPI0_SS, true);
  402084:	2101      	movs	r1, #1
  402086:	2023      	movs	r0, #35	; 0x23
  402088:	4b1d      	ldr	r3, [pc, #116]	; (402100 <main+0xb0>)
  40208a:	4798      	blx	r3
	
	gpio_set_pin_pull_mode(PD20, GPIO_PULL_OFF);
  40208c:	2100      	movs	r1, #0
  40208e:	2074      	movs	r0, #116	; 0x74
  402090:	4b1c      	ldr	r3, [pc, #112]	; (402104 <main+0xb4>)
  402092:	4798      	blx	r3
	
	//set up on board led for feedback
	gpio_set_pin_level( BOARD_LED,	false);
  402094:	2100      	movs	r1, #0
  402096:	2048      	movs	r0, #72	; 0x48
  402098:	4b19      	ldr	r3, [pc, #100]	; (402100 <main+0xb0>)
  40209a:	4798      	blx	r3
	gpio_set_pin_direction(BOARD_LED, GPIO_DIRECTION_OUT);
  40209c:	2102      	movs	r1, #2
  40209e:	2048      	movs	r0, #72	; 0x48
  4020a0:	4b19      	ldr	r3, [pc, #100]	; (402108 <main+0xb8>)
  4020a2:	4798      	blx	r3
	gpio_set_pin_function(BOARD_LED, GPIO_PIN_FUNCTION_OFF);
  4020a4:	f04f 31ff 	mov.w	r1, #4294967295
  4020a8:	2048      	movs	r0, #72	; 0x48
  4020aa:	4b18      	ldr	r3, [pc, #96]	; (40210c <main+0xbc>)
  4020ac:	4798      	blx	r3
	
	//enable tdc chip, needs clean rising edge some time after power up, fully ready 1.5ms after enable.
	delay_ms(10);
  4020ae:	200a      	movs	r0, #10
  4020b0:	4b17      	ldr	r3, [pc, #92]	; (402110 <main+0xc0>)
  4020b2:	4798      	blx	r3
	gpio_set_pin_level(TDC_ENABLE, true);
  4020b4:	2101      	movs	r1, #1
  4020b6:	2022      	movs	r0, #34	; 0x22
  4020b8:	4b11      	ldr	r3, [pc, #68]	; (402100 <main+0xb0>)
  4020ba:	4798      	blx	r3
	delay_ms(10);
  4020bc:	200a      	movs	r0, #10
  4020be:	4b14      	ldr	r3, [pc, #80]	; (402110 <main+0xc0>)
  4020c0:	4798      	blx	r3
	
	tdc_setup(io);
  4020c2:	687b      	ldr	r3, [r7, #4]
  4020c4:	4618      	mov	r0, r3
  4020c6:	4b13      	ldr	r3, [pc, #76]	; (402114 <main+0xc4>)
  4020c8:	4798      	blx	r3
	/* Replace with your application code */
	while (1) {
		
		
		//write START MEAS bit in config 1
		tdc_write(io, 0x41 , 0x01);
  4020ca:	687b      	ldr	r3, [r7, #4]
  4020cc:	2201      	movs	r2, #1
  4020ce:	2141      	movs	r1, #65	; 0x41
  4020d0:	4618      	mov	r0, r3
  4020d2:	4b11      	ldr	r3, [pc, #68]	; (402118 <main+0xc8>)
  4020d4:	4798      	blx	r3

		//debug LED
		gpio_toggle_pin_level(BOARD_LED);
  4020d6:	2048      	movs	r0, #72	; 0x48
  4020d8:	4b10      	ldr	r3, [pc, #64]	; (40211c <main+0xcc>)
  4020da:	4798      	blx	r3
		delay_ms(100);
  4020dc:	2064      	movs	r0, #100	; 0x64
  4020de:	4b0c      	ldr	r3, [pc, #48]	; (402110 <main+0xc0>)
  4020e0:	4798      	blx	r3
		tdc_write(io, 0x41 , 0x01);
  4020e2:	e7f2      	b.n	4020ca <main+0x7a>
  4020e4:	004001d5 	.word	0x004001d5
  4020e8:	20400020 	.word	0x20400020
  4020ec:	00400c65 	.word	0x00400c65
  4020f0:	00400a41 	.word	0x00400a41
  4020f4:	00400a7d 	.word	0x00400a7d
  4020f8:	00400ac1 	.word	0x00400ac1
  4020fc:	00400b09 	.word	0x00400b09
  402100:	00401fe9 	.word	0x00401fe9
  402104:	00401f5d 	.word	0x00401f5d
  402108:	00401fb1 	.word	0x00401fb1
  40210c:	00401f91 	.word	0x00401f91
  402110:	00400905 	.word	0x00400905
  402114:	00402121 	.word	0x00402121
  402118:	004021a9 	.word	0x004021a9
  40211c:	00402021 	.word	0x00402021

00402120 <tdc_setup>:

return spi_m_sync_transfer(spi, &xfer);
}


void tdc_setup(struct io_descriptor *const io){
  402120:	b580      	push	{r7, lr}
  402122:	b082      	sub	sp, #8
  402124:	af00      	add	r7, sp, #0
  402126:	6078      	str	r0, [r7, #4]
	
	gpio_set_pin_level( TDC_ENABLE,	false);
  402128:	2100      	movs	r1, #0
  40212a:	2022      	movs	r0, #34	; 0x22
  40212c:	4b18      	ldr	r3, [pc, #96]	; (402190 <tdc_setup+0x70>)
  40212e:	4798      	blx	r3
	gpio_set_pin_direction(TDC_ENABLE, GPIO_DIRECTION_OUT);
  402130:	2102      	movs	r1, #2
  402132:	2022      	movs	r0, #34	; 0x22
  402134:	4b17      	ldr	r3, [pc, #92]	; (402194 <tdc_setup+0x74>)
  402136:	4798      	blx	r3
	gpio_set_pin_function(TDC_ENABLE, GPIO_PIN_FUNCTION_OFF);  //(func off means gpio)
  402138:	f04f 31ff 	mov.w	r1, #4294967295
  40213c:	2022      	movs	r0, #34	; 0x22
  40213e:	4b16      	ldr	r3, [pc, #88]	; (402198 <tdc_setup+0x78>)
  402140:	4798      	blx	r3
	gpio_set_pin_level(TDC_ENABLE, false);
  402142:	2100      	movs	r1, #0
  402144:	2022      	movs	r0, #34	; 0x22
  402146:	4b12      	ldr	r3, [pc, #72]	; (402190 <tdc_setup+0x70>)
  402148:	4798      	blx	r3
	
	//enable tdc chip, needs clean rising edge some time after power up, fully ready 1.5ms after enable.
	gpio_set_pin_level(TDC_ENABLE, true);
  40214a:	2101      	movs	r1, #1
  40214c:	2022      	movs	r0, #34	; 0x22
  40214e:	4b10      	ldr	r3, [pc, #64]	; (402190 <tdc_setup+0x70>)
  402150:	4798      	blx	r3
	delay_ms(2);
  402152:	2002      	movs	r0, #2
  402154:	4b11      	ldr	r3, [pc, #68]	; (40219c <tdc_setup+0x7c>)
  402156:	4798      	blx	r3
	
	//TDC CONFIG1; MEASE MODE 2
	tdc_write(io, 0x40, 0x02);
  402158:	2202      	movs	r2, #2
  40215a:	2140      	movs	r1, #64	; 0x40
  40215c:	6878      	ldr	r0, [r7, #4]
  40215e:	4b10      	ldr	r3, [pc, #64]	; (4021a0 <tdc_setup+0x80>)
  402160:	4798      	blx	r3
	delay_us(5);
  402162:	2005      	movs	r0, #5
  402164:	4b0f      	ldr	r3, [pc, #60]	; (4021a4 <tdc_setup+0x84>)
  402166:	4798      	blx	r3
	//TDC CONFIG2; CAL PERIODS 40
	tdc_write(io, 0x41, 0xC0);
  402168:	22c0      	movs	r2, #192	; 0xc0
  40216a:	2141      	movs	r1, #65	; 0x41
  40216c:	6878      	ldr	r0, [r7, #4]
  40216e:	4b0c      	ldr	r3, [pc, #48]	; (4021a0 <tdc_setup+0x80>)
  402170:	4798      	blx	r3
	delay_us(5);
  402172:	2005      	movs	r0, #5
  402174:	4b0b      	ldr	r3, [pc, #44]	; (4021a4 <tdc_setup+0x84>)
  402176:	4798      	blx	r3
	//TDC INT MASK; enable new meas interrupt
	tdc_write(io, 0x43, 0x01);
  402178:	2201      	movs	r2, #1
  40217a:	2143      	movs	r1, #67	; 0x43
  40217c:	6878      	ldr	r0, [r7, #4]
  40217e:	4b08      	ldr	r3, [pc, #32]	; (4021a0 <tdc_setup+0x80>)
  402180:	4798      	blx	r3
	delay_us(5);
  402182:	2005      	movs	r0, #5
  402184:	4b07      	ldr	r3, [pc, #28]	; (4021a4 <tdc_setup+0x84>)
  402186:	4798      	blx	r3
}
  402188:	bf00      	nop
  40218a:	3708      	adds	r7, #8
  40218c:	46bd      	mov	sp, r7
  40218e:	bd80      	pop	{r7, pc}
  402190:	00401fe9 	.word	0x00401fe9
  402194:	00401fb1 	.word	0x00401fb1
  402198:	00401f91 	.word	0x00401f91
  40219c:	00400905 	.word	0x00400905
  4021a0:	004021a9 	.word	0x004021a9
  4021a4:	004008d1 	.word	0x004008d1

004021a8 <tdc_write>:
	//return value of tof in picoseconds
	volatile  tof_ps = tof1 * 1e12;
	return tof_ps;
}

void tdc_write(struct io_descriptor *const io, uint8_t *const commandbuf, uint8_t *const databuf){
  4021a8:	b580      	push	{r7, lr}
  4021aa:	b084      	sub	sp, #16
  4021ac:	af00      	add	r7, sp, #0
  4021ae:	60f8      	str	r0, [r7, #12]
  4021b0:	60b9      	str	r1, [r7, #8]
  4021b2:	607a      	str	r2, [r7, #4]
	// need to write 2 bytes, one command one data

	gpio_set_pin_level(SPI0_SS, false);
  4021b4:	2100      	movs	r1, #0
  4021b6:	2023      	movs	r0, #35	; 0x23
  4021b8:	4b0b      	ldr	r3, [pc, #44]	; (4021e8 <tdc_write+0x40>)
  4021ba:	4798      	blx	r3
	io_write(io, &commandbuf, 1);
  4021bc:	f107 0308 	add.w	r3, r7, #8
  4021c0:	2201      	movs	r2, #1
  4021c2:	4619      	mov	r1, r3
  4021c4:	68f8      	ldr	r0, [r7, #12]
  4021c6:	4b09      	ldr	r3, [pc, #36]	; (4021ec <tdc_write+0x44>)
  4021c8:	4798      	blx	r3
	io_write(io, &databuf, 1);
  4021ca:	1d3b      	adds	r3, r7, #4
  4021cc:	2201      	movs	r2, #1
  4021ce:	4619      	mov	r1, r3
  4021d0:	68f8      	ldr	r0, [r7, #12]
  4021d2:	4b06      	ldr	r3, [pc, #24]	; (4021ec <tdc_write+0x44>)
  4021d4:	4798      	blx	r3
	gpio_set_pin_level(SPI0_SS, true);
  4021d6:	2101      	movs	r1, #1
  4021d8:	2023      	movs	r0, #35	; 0x23
  4021da:	4b03      	ldr	r3, [pc, #12]	; (4021e8 <tdc_write+0x40>)
  4021dc:	4798      	blx	r3
	
}
  4021de:	bf00      	nop
  4021e0:	3710      	adds	r7, #16
  4021e2:	46bd      	mov	sp, r7
  4021e4:	bd80      	pop	{r7, pc}
  4021e6:	bf00      	nop
  4021e8:	00401fe9 	.word	0x00401fe9
  4021ec:	00400939 	.word	0x00400939

004021f0 <__libc_init_array>:
  4021f0:	b570      	push	{r4, r5, r6, lr}
  4021f2:	4e0d      	ldr	r6, [pc, #52]	; (402228 <__libc_init_array+0x38>)
  4021f4:	4c0d      	ldr	r4, [pc, #52]	; (40222c <__libc_init_array+0x3c>)
  4021f6:	1ba4      	subs	r4, r4, r6
  4021f8:	10a4      	asrs	r4, r4, #2
  4021fa:	2500      	movs	r5, #0
  4021fc:	42a5      	cmp	r5, r4
  4021fe:	d109      	bne.n	402214 <__libc_init_array+0x24>
  402200:	4e0b      	ldr	r6, [pc, #44]	; (402230 <__libc_init_array+0x40>)
  402202:	4c0c      	ldr	r4, [pc, #48]	; (402234 <__libc_init_array+0x44>)
  402204:	f000 f868 	bl	4022d8 <_init>
  402208:	1ba4      	subs	r4, r4, r6
  40220a:	10a4      	asrs	r4, r4, #2
  40220c:	2500      	movs	r5, #0
  40220e:	42a5      	cmp	r5, r4
  402210:	d105      	bne.n	40221e <__libc_init_array+0x2e>
  402212:	bd70      	pop	{r4, r5, r6, pc}
  402214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402218:	4798      	blx	r3
  40221a:	3501      	adds	r5, #1
  40221c:	e7ee      	b.n	4021fc <__libc_init_array+0xc>
  40221e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  402222:	4798      	blx	r3
  402224:	3501      	adds	r5, #1
  402226:	e7f2      	b.n	40220e <__libc_init_array+0x1e>
  402228:	004022e4 	.word	0x004022e4
  40222c:	004022e4 	.word	0x004022e4
  402230:	004022e4 	.word	0x004022e4
  402234:	004022e8 	.word	0x004022e8
  402238:	682f2e2e 	.word	0x682f2e2e
  40223c:	702f6c70 	.word	0x702f6c70
  402240:	682f6f69 	.word	0x682f6f69
  402244:	675f6c70 	.word	0x675f6c70
  402248:	5f6f6970 	.word	0x5f6f6970
  40224c:	65736162 	.word	0x65736162
  402250:	0000682e 	.word	0x0000682e
  402254:	682f2e2e 	.word	0x682f2e2e
  402258:	732f6c61 	.word	0x732f6c61
  40225c:	682f6372 	.word	0x682f6372
  402260:	695f6c61 	.word	0x695f6c61
  402264:	00632e6f 	.word	0x00632e6f
  402268:	682f2e2e 	.word	0x682f2e2e
  40226c:	732f6c61 	.word	0x732f6c61
  402270:	682f6372 	.word	0x682f6372
  402274:	735f6c61 	.word	0x735f6c61
  402278:	6d5f6970 	.word	0x6d5f6970
  40227c:	6e79735f 	.word	0x6e79735f
  402280:	00632e63 	.word	0x00632e63

00402284 <spi_regs>:
  402284:	00000000 80000000 00000001 04969802     ................
  402294:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  4022a4:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  4022b4:	702f6c70 682f6f69 675f6c70 5f6f6970     pl/pio/hpl_gpio_
  4022c4:	65736162 0000682e 2e2f2e2e 69616d2f     base.h...././mai
  4022d4:	00632e6e                                n.c.

004022d8 <_init>:
  4022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022da:	bf00      	nop
  4022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4022de:	bc08      	pop	{r3}
  4022e0:	469e      	mov	lr, r3
  4022e2:	4770      	bx	lr

004022e4 <__init_array_start>:
  4022e4:	0040018d 	.word	0x0040018d

004022e8 <_fini>:
  4022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4022ea:	bf00      	nop
  4022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4022ee:	bc08      	pop	{r3}
  4022f0:	469e      	mov	lr, r3
  4022f2:	4770      	bx	lr

004022f4 <__fini_array_start>:
  4022f4:	00400169 	.word	0x00400169
