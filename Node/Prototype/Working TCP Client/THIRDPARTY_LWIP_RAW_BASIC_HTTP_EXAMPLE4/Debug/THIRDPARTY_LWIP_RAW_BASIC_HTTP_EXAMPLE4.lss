
THIRDPARTY_LWIP_RAW_BASIC_HTTP_EXAMPLE4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ce5c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000049c  20400000  0040ce5c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003fc0  204004a0  0040d300  000204a0  2**3
                  ALLOC
  3 .stack        00000400  20404460  004112c0  000204a0  2**0
                  ALLOC
  4 .heap         00000200  20404860  004116c0  000204a0  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000204ca  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003389d  00000000  00000000  00020523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000059be  00000000  00000000  00053dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009849  00000000  00000000  0005977e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000011d8  00000000  00000000  00062fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010e8  00000000  00000000  0006419f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002aea0  00000000  00000000  00065287  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001c333  00000000  00000000  00090127  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009bc0f  00000000  00000000  000ac45a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000049b8  00000000  00000000  0014806c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 48 40 20 49 1b 40 00 f9 1b 40 00 f9 1b 40 00     `H@ I.@...@...@.
  400010:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f9 1b 40 00 f9 1b 40 00 00 00 00 00 f9 1b 40 00     ..@...@.......@.
  40003c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40004c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40005c:	f9 1b 40 00 f9 1b 40 00 00 00 00 00 f9 15 40 00     ..@...@.......@.
  40006c:	11 16 40 00 29 16 40 00 f9 1b 40 00 f9 1b 40 00     ..@.).@...@...@.
  40007c:	f9 1b 40 00 41 16 40 00 59 16 40 00 f9 1b 40 00     ..@.A.@.Y.@...@.
  40008c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40009c:	31 c5 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     1.@...@...@...@.
  4000ac:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  4000bc:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  4000cc:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  4000dc:	5d bc 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ].@...@...@...@.
  4000ec:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  4000fc:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40010c:	f9 1b 40 00 f9 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ......@...@...@.
  40012c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40013c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40014c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00 f9 1b 40 00     ..@...@...@...@.
  40015c:	f9 1b 40 00 f9 1b 40 00 f9 1b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204004a0 	.word	0x204004a0
  400184:	00000000 	.word	0x00000000
  400188:	0040ce5c 	.word	0x0040ce5c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040ce5c 	.word	0x0040ce5c
  4001c8:	204004a4 	.word	0x204004a4
  4001cc:	0040ce5c 	.word	0x0040ce5c
  4001d0:	00000000 	.word	0x00000000

004001d4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	2b07      	cmp	r3, #7
  4001e0:	d831      	bhi.n	400246 <osc_enable+0x72>
  4001e2:	a201      	add	r2, pc, #4	; (adr r2, 4001e8 <osc_enable+0x14>)
  4001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e8:	00400245 	.word	0x00400245
  4001ec:	00400209 	.word	0x00400209
  4001f0:	00400211 	.word	0x00400211
  4001f4:	00400219 	.word	0x00400219
  4001f8:	00400221 	.word	0x00400221
  4001fc:	00400229 	.word	0x00400229
  400200:	00400231 	.word	0x00400231
  400204:	0040023b 	.word	0x0040023b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400208:	2000      	movs	r0, #0
  40020a:	4b11      	ldr	r3, [pc, #68]	; (400250 <osc_enable+0x7c>)
  40020c:	4798      	blx	r3
		break;
  40020e:	e01a      	b.n	400246 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400210:	2001      	movs	r0, #1
  400212:	4b0f      	ldr	r3, [pc, #60]	; (400250 <osc_enable+0x7c>)
  400214:	4798      	blx	r3
		break;
  400216:	e016      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400218:	2000      	movs	r0, #0
  40021a:	4b0e      	ldr	r3, [pc, #56]	; (400254 <osc_enable+0x80>)
  40021c:	4798      	blx	r3
		break;
  40021e:	e012      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400220:	2010      	movs	r0, #16
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <osc_enable+0x80>)
  400224:	4798      	blx	r3
		break;
  400226:	e00e      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400228:	2020      	movs	r0, #32
  40022a:	4b0a      	ldr	r3, [pc, #40]	; (400254 <osc_enable+0x80>)
  40022c:	4798      	blx	r3
		break;
  40022e:	e00a      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400230:	213e      	movs	r1, #62	; 0x3e
  400232:	2000      	movs	r0, #0
  400234:	4b08      	ldr	r3, [pc, #32]	; (400258 <osc_enable+0x84>)
  400236:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400238:	e005      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40023a:	213e      	movs	r1, #62	; 0x3e
  40023c:	2001      	movs	r0, #1
  40023e:	4b06      	ldr	r3, [pc, #24]	; (400258 <osc_enable+0x84>)
  400240:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400242:	e000      	b.n	400246 <osc_enable+0x72>
		break;
  400244:	bf00      	nop
	}
}
  400246:	bf00      	nop
  400248:	3708      	adds	r7, #8
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	00401771 	.word	0x00401771
  400254:	004017dd 	.word	0x004017dd
  400258:	0040184d 	.word	0x0040184d

0040025c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40025c:	b580      	push	{r7, lr}
  40025e:	b082      	sub	sp, #8
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b07      	cmp	r3, #7
  400268:	d826      	bhi.n	4002b8 <osc_is_ready+0x5c>
  40026a:	a201      	add	r2, pc, #4	; (adr r2, 400270 <osc_is_ready+0x14>)
  40026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400270:	00400291 	.word	0x00400291
  400274:	00400295 	.word	0x00400295
  400278:	00400295 	.word	0x00400295
  40027c:	004002a7 	.word	0x004002a7
  400280:	004002a7 	.word	0x004002a7
  400284:	004002a7 	.word	0x004002a7
  400288:	004002a7 	.word	0x004002a7
  40028c:	004002a7 	.word	0x004002a7
	case OSC_SLCK_32K_RC:
		return 1;
  400290:	2301      	movs	r3, #1
  400292:	e012      	b.n	4002ba <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <osc_is_ready+0x68>)
  400296:	4798      	blx	r3
  400298:	4603      	mov	r3, r0
  40029a:	2b00      	cmp	r3, #0
  40029c:	bf14      	ite	ne
  40029e:	2301      	movne	r3, #1
  4002a0:	2300      	moveq	r3, #0
  4002a2:	b2db      	uxtb	r3, r3
  4002a4:	e009      	b.n	4002ba <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <osc_is_ready+0x6c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	bf14      	ite	ne
  4002b0:	2301      	movne	r3, #1
  4002b2:	2300      	moveq	r3, #0
  4002b4:	b2db      	uxtb	r3, r3
  4002b6:	e000      	b.n	4002ba <osc_is_ready+0x5e>
	}

	return 0;
  4002b8:	2300      	movs	r3, #0
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	3708      	adds	r7, #8
  4002be:	46bd      	mov	sp, r7
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	004017a9 	.word	0x004017a9
  4002c8:	004018c5 	.word	0x004018c5

004002cc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d4:	687b      	ldr	r3, [r7, #4]
  4002d6:	2b07      	cmp	r3, #7
  4002d8:	d825      	bhi.n	400326 <osc_get_rate+0x5a>
  4002da:	a201      	add	r2, pc, #4	; (adr r2, 4002e0 <osc_get_rate+0x14>)
  4002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e0:	00400301 	.word	0x00400301
  4002e4:	00400307 	.word	0x00400307
  4002e8:	0040030d 	.word	0x0040030d
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400304:	e010      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030a:	e00d      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400310:	e00a      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x68>)
  400314:	e008      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x6c>)
  400318:	e006      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x70>)
  40031c:	e004      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <osc_get_rate+0x70>)
  400320:	e002      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400322:	4b06      	ldr	r3, [pc, #24]	; (40033c <osc_get_rate+0x70>)
  400324:	e000      	b.n	400328 <osc_get_rate+0x5c>
	}

	return 0;
  400326:	2300      	movs	r3, #0
}
  400328:	4618      	mov	r0, r3
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	003d0900 	.word	0x003d0900
  400338:	007a1200 	.word	0x007a1200
  40033c:	00b71b00 	.word	0x00b71b00

00400340 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400340:	b580      	push	{r7, lr}
  400342:	b082      	sub	sp, #8
  400344:	af00      	add	r7, sp, #0
  400346:	4603      	mov	r3, r0
  400348:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40034a:	bf00      	nop
  40034c:	79fb      	ldrb	r3, [r7, #7]
  40034e:	4618      	mov	r0, r3
  400350:	4b05      	ldr	r3, [pc, #20]	; (400368 <osc_wait_ready+0x28>)
  400352:	4798      	blx	r3
  400354:	4603      	mov	r3, r0
  400356:	f083 0301 	eor.w	r3, r3, #1
  40035a:	b2db      	uxtb	r3, r3
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f5      	bne.n	40034c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	0040025d 	.word	0x0040025d

0040036c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40036c:	b580      	push	{r7, lr}
  40036e:	b086      	sub	sp, #24
  400370:	af00      	add	r7, sp, #0
  400372:	60f8      	str	r0, [r7, #12]
  400374:	607a      	str	r2, [r7, #4]
  400376:	603b      	str	r3, [r7, #0]
  400378:	460b      	mov	r3, r1
  40037a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40037c:	687b      	ldr	r3, [r7, #4]
  40037e:	2b00      	cmp	r3, #0
  400380:	d107      	bne.n	400392 <pll_config_init+0x26>
  400382:	683b      	ldr	r3, [r7, #0]
  400384:	2b00      	cmp	r3, #0
  400386:	d104      	bne.n	400392 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400388:	68fb      	ldr	r3, [r7, #12]
  40038a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40038e:	601a      	str	r2, [r3, #0]
  400390:	e019      	b.n	4003c6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400392:	7afb      	ldrb	r3, [r7, #11]
  400394:	4618      	mov	r0, r3
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <pll_config_init+0x64>)
  400398:	4798      	blx	r3
  40039a:	4602      	mov	r2, r0
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	fbb2 f3f3 	udiv	r3, r2, r3
  4003a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4003a4:	697b      	ldr	r3, [r7, #20]
  4003a6:	683a      	ldr	r2, [r7, #0]
  4003a8:	fb02 f303 	mul.w	r3, r2, r3
  4003ac:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	3b01      	subs	r3, #1
  4003b2:	041a      	lsls	r2, r3, #16
  4003b4:	4b07      	ldr	r3, [pc, #28]	; (4003d4 <pll_config_init+0x68>)
  4003b6:	4013      	ands	r3, r2
  4003b8:	687a      	ldr	r2, [r7, #4]
  4003ba:	b2d2      	uxtb	r2, r2
  4003bc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4003be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003c2:	68fb      	ldr	r3, [r7, #12]
  4003c4:	601a      	str	r2, [r3, #0]
	}
}
  4003c6:	bf00      	nop
  4003c8:	3718      	adds	r7, #24
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004002cd 	.word	0x004002cd
  4003d4:	07ff0000 	.word	0x07ff0000

004003d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
  4003e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d108      	bne.n	4003fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <pll_enable+0x38>)
  4003ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ec:	4a09      	ldr	r2, [pc, #36]	; (400414 <pll_enable+0x3c>)
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003f8:	e005      	b.n	400406 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003fa:	4a06      	ldr	r2, [pc, #24]	; (400414 <pll_enable+0x3c>)
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	681b      	ldr	r3, [r3, #0]
  400400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400404:	61d3      	str	r3, [r2, #28]
}
  400406:	bf00      	nop
  400408:	3708      	adds	r7, #8
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004018e1 	.word	0x004018e1
  400414:	400e0600 	.word	0x400e0600

00400418 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400418:	b580      	push	{r7, lr}
  40041a:	b082      	sub	sp, #8
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	2b00      	cmp	r3, #0
  400424:	d103      	bne.n	40042e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <pll_is_locked+0x24>)
  400428:	4798      	blx	r3
  40042a:	4603      	mov	r3, r0
  40042c:	e002      	b.n	400434 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <pll_is_locked+0x28>)
  400430:	4798      	blx	r3
  400432:	4603      	mov	r3, r0
	}
}
  400434:	4618      	mov	r0, r3
  400436:	3708      	adds	r7, #8
  400438:	46bd      	mov	sp, r7
  40043a:	bd80      	pop	{r7, pc}
  40043c:	004018fd 	.word	0x004018fd
  400440:	00401919 	.word	0x00401919

00400444 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	4603      	mov	r3, r0
  40044c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40044e:	79fb      	ldrb	r3, [r7, #7]
  400450:	3b03      	subs	r3, #3
  400452:	2b04      	cmp	r3, #4
  400454:	d808      	bhi.n	400468 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4618      	mov	r0, r3
  40045a:	4b06      	ldr	r3, [pc, #24]	; (400474 <pll_enable_source+0x30>)
  40045c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4618      	mov	r0, r3
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <pll_enable_source+0x34>)
  400464:	4798      	blx	r3
		break;
  400466:	e000      	b.n	40046a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400468:	bf00      	nop
	}
}
  40046a:	bf00      	nop
  40046c:	3708      	adds	r7, #8
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	004001d5 	.word	0x004001d5
  400478:	00400341 	.word	0x00400341

0040047c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	b082      	sub	sp, #8
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400484:	bf00      	nop
  400486:	6878      	ldr	r0, [r7, #4]
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <pll_wait_for_lock+0x20>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d0f9      	beq.n	400486 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400492:	2300      	movs	r3, #0
}
  400494:	4618      	mov	r0, r3
  400496:	3708      	adds	r7, #8
  400498:	46bd      	mov	sp, r7
  40049a:	bd80      	pop	{r7, pc}
  40049c:	00400419 	.word	0x00400419

004004a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004a4:	2006      	movs	r0, #6
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <sysclk_get_main_hz+0x1c>)
  4004a8:	4798      	blx	r3
  4004aa:	4602      	mov	r2, r0
  4004ac:	4613      	mov	r3, r2
  4004ae:	009b      	lsls	r3, r3, #2
  4004b0:	4413      	add	r3, r2
  4004b2:	009a      	lsls	r2, r3, #2
  4004b4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd80      	pop	{r7, pc}
  4004ba:	bf00      	nop
  4004bc:	004002cd 	.word	0x004002cd

004004c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <sysclk_get_cpu_hz+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	4603      	mov	r3, r0
  4004ca:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004cc:	4618      	mov	r0, r3
  4004ce:	bd80      	pop	{r7, pc}
  4004d0:	004004a1 	.word	0x004004a1

004004d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d4:	b590      	push	{r4, r7, lr}
  4004d6:	b083      	sub	sp, #12
  4004d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004da:	4813      	ldr	r0, [pc, #76]	; (400528 <sysclk_init+0x54>)
  4004dc:	4b13      	ldr	r3, [pc, #76]	; (40052c <sysclk_init+0x58>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <sysclk_init+0x5c>)
  4004e4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004e6:	1d38      	adds	r0, r7, #4
  4004e8:	2319      	movs	r3, #25
  4004ea:	2201      	movs	r2, #1
  4004ec:	2106      	movs	r1, #6
  4004ee:	4c11      	ldr	r4, [pc, #68]	; (400534 <sysclk_init+0x60>)
  4004f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004f2:	1d3b      	adds	r3, r7, #4
  4004f4:	2100      	movs	r1, #0
  4004f6:	4618      	mov	r0, r3
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <sysclk_init+0x64>)
  4004fa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0f      	ldr	r3, [pc, #60]	; (40053c <sysclk_init+0x68>)
  400500:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <sysclk_init+0x6c>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2010      	movs	r0, #16
  40050a:	4b0e      	ldr	r3, [pc, #56]	; (400544 <sysclk_init+0x70>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <sysclk_init+0x74>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <sysclk_init+0x78>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	4618      	mov	r0, r3
  40051a:	4b04      	ldr	r3, [pc, #16]	; (40052c <sysclk_init+0x58>)
  40051c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40051e:	bf00      	nop
  400520:	370c      	adds	r7, #12
  400522:	46bd      	mov	sp, r7
  400524:	bd90      	pop	{r4, r7, pc}
  400526:	bf00      	nop
  400528:	07270e00 	.word	0x07270e00
  40052c:	00401d69 	.word	0x00401d69
  400530:	00400445 	.word	0x00400445
  400534:	0040036d 	.word	0x0040036d
  400538:	004003d9 	.word	0x004003d9
  40053c:	0040047d 	.word	0x0040047d
  400540:	00401671 	.word	0x00401671
  400544:	004016ed 	.word	0x004016ed
  400548:	00401c01 	.word	0x00401c01
  40054c:	004004c1 	.word	0x004004c1

00400550 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400550:	b580      	push	{r7, lr}
  400552:	b082      	sub	sp, #8
  400554:	af00      	add	r7, sp, #0
  400556:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400558:	6878      	ldr	r0, [r7, #4]
  40055a:	4b03      	ldr	r3, [pc, #12]	; (400568 <sysclk_enable_peripheral_clock+0x18>)
  40055c:	4798      	blx	r3
}
  40055e:	bf00      	nop
  400560:	3708      	adds	r7, #8
  400562:	46bd      	mov	sp, r7
  400564:	bd80      	pop	{r7, pc}
  400566:	bf00      	nop
  400568:	00401935 	.word	0x00401935

0040056c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40056c:	b580      	push	{r7, lr}
  40056e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400570:	200a      	movs	r0, #10
  400572:	4b08      	ldr	r3, [pc, #32]	; (400594 <ioport_init+0x28>)
  400574:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400576:	200b      	movs	r0, #11
  400578:	4b06      	ldr	r3, [pc, #24]	; (400594 <ioport_init+0x28>)
  40057a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40057c:	200c      	movs	r0, #12
  40057e:	4b05      	ldr	r3, [pc, #20]	; (400594 <ioport_init+0x28>)
  400580:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400582:	2010      	movs	r0, #16
  400584:	4b03      	ldr	r3, [pc, #12]	; (400594 <ioport_init+0x28>)
  400586:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400588:	2011      	movs	r0, #17
  40058a:	4b02      	ldr	r3, [pc, #8]	; (400594 <ioport_init+0x28>)
  40058c:	4798      	blx	r3
	arch_ioport_init();
}
  40058e:	bf00      	nop
  400590:	bd80      	pop	{r7, pc}
  400592:	bf00      	nop
  400594:	00400551 	.word	0x00400551

00400598 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400598:	b480      	push	{r7}
  40059a:	b089      	sub	sp, #36	; 0x24
  40059c:	af00      	add	r7, sp, #0
  40059e:	6078      	str	r0, [r7, #4]
  4005a0:	687b      	ldr	r3, [r7, #4]
  4005a2:	61fb      	str	r3, [r7, #28]
  4005a4:	69fb      	ldr	r3, [r7, #28]
  4005a6:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4005a8:	69bb      	ldr	r3, [r7, #24]
  4005aa:	095a      	lsrs	r2, r3, #5
  4005ac:	69fb      	ldr	r3, [r7, #28]
  4005ae:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4005b0:	697b      	ldr	r3, [r7, #20]
  4005b2:	f003 031f 	and.w	r3, r3, #31
  4005b6:	2101      	movs	r1, #1
  4005b8:	fa01 f303 	lsl.w	r3, r1, r3
  4005bc:	613a      	str	r2, [r7, #16]
  4005be:	60fb      	str	r3, [r7, #12]
  4005c0:	693b      	ldr	r3, [r7, #16]
  4005c2:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4005c4:	68ba      	ldr	r2, [r7, #8]
  4005c6:	4b06      	ldr	r3, [pc, #24]	; (4005e0 <ioport_disable_pin+0x48>)
  4005c8:	4413      	add	r3, r2
  4005ca:	025b      	lsls	r3, r3, #9
  4005cc:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4005ce:	68fb      	ldr	r3, [r7, #12]
  4005d0:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  4005d2:	bf00      	nop
  4005d4:	3724      	adds	r7, #36	; 0x24
  4005d6:	46bd      	mov	sp, r7
  4005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4005dc:	4770      	bx	lr
  4005de:	bf00      	nop
  4005e0:	00200707 	.word	0x00200707

004005e4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4005e4:	b480      	push	{r7}
  4005e6:	b08d      	sub	sp, #52	; 0x34
  4005e8:	af00      	add	r7, sp, #0
  4005ea:	6078      	str	r0, [r7, #4]
  4005ec:	6039      	str	r1, [r7, #0]
  4005ee:	687b      	ldr	r3, [r7, #4]
  4005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4005f2:	683b      	ldr	r3, [r7, #0]
  4005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  4005f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4005f8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4005fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4005fc:	095a      	lsrs	r2, r3, #5
  4005fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400600:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400602:	6a3b      	ldr	r3, [r7, #32]
  400604:	f003 031f 	and.w	r3, r3, #31
  400608:	2101      	movs	r1, #1
  40060a:	fa01 f303 	lsl.w	r3, r1, r3
  40060e:	61fa      	str	r2, [r7, #28]
  400610:	61bb      	str	r3, [r7, #24]
  400612:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400614:	617b      	str	r3, [r7, #20]
  400616:	69fb      	ldr	r3, [r7, #28]
  400618:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40061a:	693a      	ldr	r2, [r7, #16]
  40061c:	4b37      	ldr	r3, [pc, #220]	; (4006fc <ioport_set_pin_mode+0x118>)
  40061e:	4413      	add	r3, r2
  400620:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400622:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400624:	697b      	ldr	r3, [r7, #20]
  400626:	f003 0308 	and.w	r3, r3, #8
  40062a:	2b00      	cmp	r3, #0
  40062c:	d003      	beq.n	400636 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  40062e:	68fb      	ldr	r3, [r7, #12]
  400630:	69ba      	ldr	r2, [r7, #24]
  400632:	665a      	str	r2, [r3, #100]	; 0x64
  400634:	e002      	b.n	40063c <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400636:	68fb      	ldr	r3, [r7, #12]
  400638:	69ba      	ldr	r2, [r7, #24]
  40063a:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  40063c:	697b      	ldr	r3, [r7, #20]
  40063e:	f003 0310 	and.w	r3, r3, #16
  400642:	2b00      	cmp	r3, #0
  400644:	d004      	beq.n	400650 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400646:	68fb      	ldr	r3, [r7, #12]
  400648:	69ba      	ldr	r2, [r7, #24]
  40064a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40064e:	e003      	b.n	400658 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400650:	68fb      	ldr	r3, [r7, #12]
  400652:	69ba      	ldr	r2, [r7, #24]
  400654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400658:	697b      	ldr	r3, [r7, #20]
  40065a:	f003 0320 	and.w	r3, r3, #32
  40065e:	2b00      	cmp	r3, #0
  400660:	d003      	beq.n	40066a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400662:	68fb      	ldr	r3, [r7, #12]
  400664:	69ba      	ldr	r2, [r7, #24]
  400666:	651a      	str	r2, [r3, #80]	; 0x50
  400668:	e002      	b.n	400670 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40066a:	68fb      	ldr	r3, [r7, #12]
  40066c:	69ba      	ldr	r2, [r7, #24]
  40066e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400670:	697b      	ldr	r3, [r7, #20]
  400672:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400676:	2b00      	cmp	r3, #0
  400678:	d003      	beq.n	400682 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40067a:	68fb      	ldr	r3, [r7, #12]
  40067c:	69ba      	ldr	r2, [r7, #24]
  40067e:	621a      	str	r2, [r3, #32]
  400680:	e002      	b.n	400688 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400682:	68fb      	ldr	r3, [r7, #12]
  400684:	69ba      	ldr	r2, [r7, #24]
  400686:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400688:	697b      	ldr	r3, [r7, #20]
  40068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40068e:	2b00      	cmp	r3, #0
  400690:	d004      	beq.n	40069c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400692:	68fb      	ldr	r3, [r7, #12]
  400694:	69ba      	ldr	r2, [r7, #24]
  400696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40069a:	e003      	b.n	4006a4 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40069c:	68fb      	ldr	r3, [r7, #12]
  40069e:	69ba      	ldr	r2, [r7, #24]
  4006a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4006a4:	697b      	ldr	r3, [r7, #20]
  4006a6:	f003 0301 	and.w	r3, r3, #1
  4006aa:	2b00      	cmp	r3, #0
  4006ac:	d006      	beq.n	4006bc <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  4006ae:	68fb      	ldr	r3, [r7, #12]
  4006b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006b2:	69bb      	ldr	r3, [r7, #24]
  4006b4:	431a      	orrs	r2, r3
  4006b6:	68fb      	ldr	r3, [r7, #12]
  4006b8:	671a      	str	r2, [r3, #112]	; 0x70
  4006ba:	e006      	b.n	4006ca <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4006bc:	68fb      	ldr	r3, [r7, #12]
  4006be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4006c0:	69bb      	ldr	r3, [r7, #24]
  4006c2:	43db      	mvns	r3, r3
  4006c4:	401a      	ands	r2, r3
  4006c6:	68fb      	ldr	r3, [r7, #12]
  4006c8:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  4006ca:	697b      	ldr	r3, [r7, #20]
  4006cc:	f003 0302 	and.w	r3, r3, #2
  4006d0:	2b00      	cmp	r3, #0
  4006d2:	d006      	beq.n	4006e2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  4006d4:	68fb      	ldr	r3, [r7, #12]
  4006d6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006d8:	69bb      	ldr	r3, [r7, #24]
  4006da:	431a      	orrs	r2, r3
  4006dc:	68fb      	ldr	r3, [r7, #12]
  4006de:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4006e0:	e006      	b.n	4006f0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4006e2:	68fb      	ldr	r3, [r7, #12]
  4006e4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4006e6:	69bb      	ldr	r3, [r7, #24]
  4006e8:	43db      	mvns	r3, r3
  4006ea:	401a      	ands	r2, r3
  4006ec:	68fb      	ldr	r3, [r7, #12]
  4006ee:	675a      	str	r2, [r3, #116]	; 0x74
  4006f0:	bf00      	nop
  4006f2:	3734      	adds	r7, #52	; 0x34
  4006f4:	46bd      	mov	sp, r7
  4006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4006fa:	4770      	bx	lr
  4006fc:	00200707 	.word	0x00200707

00400700 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400700:	b480      	push	{r7}
  400702:	b08d      	sub	sp, #52	; 0x34
  400704:	af00      	add	r7, sp, #0
  400706:	6078      	str	r0, [r7, #4]
  400708:	460b      	mov	r3, r1
  40070a:	70fb      	strb	r3, [r7, #3]
  40070c:	687b      	ldr	r3, [r7, #4]
  40070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  400710:	78fb      	ldrb	r3, [r7, #3]
  400712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400718:	627b      	str	r3, [r7, #36]	; 0x24
  40071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40071c:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40071e:	6a3b      	ldr	r3, [r7, #32]
  400720:	095b      	lsrs	r3, r3, #5
  400722:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400724:	69fa      	ldr	r2, [r7, #28]
  400726:	4b17      	ldr	r3, [pc, #92]	; (400784 <ioport_set_pin_dir+0x84>)
  400728:	4413      	add	r3, r2
  40072a:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40072c:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  40072e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400732:	2b01      	cmp	r3, #1
  400734:	d109      	bne.n	40074a <ioport_set_pin_dir+0x4a>
  400736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400738:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40073a:	697b      	ldr	r3, [r7, #20]
  40073c:	f003 031f 	and.w	r3, r3, #31
  400740:	2201      	movs	r2, #1
  400742:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400744:	69bb      	ldr	r3, [r7, #24]
  400746:	611a      	str	r2, [r3, #16]
  400748:	e00c      	b.n	400764 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40074a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40074e:	2b00      	cmp	r3, #0
  400750:	d108      	bne.n	400764 <ioport_set_pin_dir+0x64>
  400752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400754:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400756:	693b      	ldr	r3, [r7, #16]
  400758:	f003 031f 	and.w	r3, r3, #31
  40075c:	2201      	movs	r2, #1
  40075e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400760:	69bb      	ldr	r3, [r7, #24]
  400762:	615a      	str	r2, [r3, #20]
  400764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400766:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400768:	68fb      	ldr	r3, [r7, #12]
  40076a:	f003 031f 	and.w	r3, r3, #31
  40076e:	2201      	movs	r2, #1
  400770:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400772:	69bb      	ldr	r3, [r7, #24]
  400774:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400778:	bf00      	nop
  40077a:	3734      	adds	r7, #52	; 0x34
  40077c:	46bd      	mov	sp, r7
  40077e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400782:	4770      	bx	lr
  400784:	00200707 	.word	0x00200707

00400788 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400788:	b480      	push	{r7}
  40078a:	b08b      	sub	sp, #44	; 0x2c
  40078c:	af00      	add	r7, sp, #0
  40078e:	6078      	str	r0, [r7, #4]
  400790:	460b      	mov	r3, r1
  400792:	70fb      	strb	r3, [r7, #3]
  400794:	687b      	ldr	r3, [r7, #4]
  400796:	627b      	str	r3, [r7, #36]	; 0x24
  400798:	78fb      	ldrb	r3, [r7, #3]
  40079a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007a0:	61fb      	str	r3, [r7, #28]
  4007a2:	69fb      	ldr	r3, [r7, #28]
  4007a4:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4007a6:	69bb      	ldr	r3, [r7, #24]
  4007a8:	095b      	lsrs	r3, r3, #5
  4007aa:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007ac:	697a      	ldr	r2, [r7, #20]
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <ioport_set_pin_level+0x68>)
  4007b0:	4413      	add	r3, r2
  4007b2:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007b4:	613b      	str	r3, [r7, #16]

	if (level) {
  4007b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4007ba:	2b00      	cmp	r3, #0
  4007bc:	d009      	beq.n	4007d2 <ioport_set_pin_level+0x4a>
  4007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007c0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4007c2:	68fb      	ldr	r3, [r7, #12]
  4007c4:	f003 031f 	and.w	r3, r3, #31
  4007c8:	2201      	movs	r2, #1
  4007ca:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4007cc:	693b      	ldr	r3, [r7, #16]
  4007ce:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4007d0:	e008      	b.n	4007e4 <ioport_set_pin_level+0x5c>
  4007d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007d4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4007d6:	68bb      	ldr	r3, [r7, #8]
  4007d8:	f003 031f 	and.w	r3, r3, #31
  4007dc:	2201      	movs	r2, #1
  4007de:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4007e0:	693b      	ldr	r3, [r7, #16]
  4007e2:	635a      	str	r2, [r3, #52]	; 0x34
  4007e4:	bf00      	nop
  4007e6:	372c      	adds	r7, #44	; 0x2c
  4007e8:	46bd      	mov	sp, r7
  4007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ee:	4770      	bx	lr
  4007f0:	00200707 	.word	0x00200707

004007f4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4007f4:	b480      	push	{r7}
  4007f6:	b08d      	sub	sp, #52	; 0x34
  4007f8:	af00      	add	r7, sp, #0
  4007fa:	6078      	str	r0, [r7, #4]
  4007fc:	460b      	mov	r3, r1
  4007fe:	70fb      	strb	r3, [r7, #3]
  400800:	687b      	ldr	r3, [r7, #4]
  400802:	62fb      	str	r3, [r7, #44]	; 0x2c
  400804:	78fb      	ldrb	r3, [r7, #3]
  400806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40080c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400810:	095a      	lsrs	r2, r3, #5
  400812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400814:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400816:	6a3b      	ldr	r3, [r7, #32]
  400818:	f003 031f 	and.w	r3, r3, #31
  40081c:	2101      	movs	r1, #1
  40081e:	fa01 f303 	lsl.w	r3, r1, r3
  400822:	61fa      	str	r2, [r7, #28]
  400824:	61bb      	str	r3, [r7, #24]
  400826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40082a:	75fb      	strb	r3, [r7, #23]
  40082c:	69fb      	ldr	r3, [r7, #28]
  40082e:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400830:	693a      	ldr	r2, [r7, #16]
  400832:	4b23      	ldr	r3, [pc, #140]	; (4008c0 <ioport_set_pin_sense_mode+0xcc>)
  400834:	4413      	add	r3, r2
  400836:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  400838:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40083a:	7dfb      	ldrb	r3, [r7, #23]
  40083c:	3b01      	subs	r3, #1
  40083e:	2b03      	cmp	r3, #3
  400840:	d82e      	bhi.n	4008a0 <ioport_set_pin_sense_mode+0xac>
  400842:	a201      	add	r2, pc, #4	; (adr r2, 400848 <ioport_set_pin_sense_mode+0x54>)
  400844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400848:	0040087d 	.word	0x0040087d
  40084c:	0040088f 	.word	0x0040088f
  400850:	00400859 	.word	0x00400859
  400854:	0040086b 	.word	0x0040086b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400858:	68fb      	ldr	r3, [r7, #12]
  40085a:	69ba      	ldr	r2, [r7, #24]
  40085c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400860:	68fb      	ldr	r3, [r7, #12]
  400862:	69ba      	ldr	r2, [r7, #24]
  400864:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400868:	e01f      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40086a:	68fb      	ldr	r3, [r7, #12]
  40086c:	69ba      	ldr	r2, [r7, #24]
  40086e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400872:	68fb      	ldr	r3, [r7, #12]
  400874:	69ba      	ldr	r2, [r7, #24]
  400876:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40087a:	e016      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40087c:	68fb      	ldr	r3, [r7, #12]
  40087e:	69ba      	ldr	r2, [r7, #24]
  400880:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400884:	68fb      	ldr	r3, [r7, #12]
  400886:	69ba      	ldr	r2, [r7, #24]
  400888:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40088c:	e00d      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40088e:	68fb      	ldr	r3, [r7, #12]
  400890:	69ba      	ldr	r2, [r7, #24]
  400892:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400896:	68fb      	ldr	r3, [r7, #12]
  400898:	69ba      	ldr	r2, [r7, #24]
  40089a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40089e:	e004      	b.n	4008aa <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  4008a0:	68fb      	ldr	r3, [r7, #12]
  4008a2:	69ba      	ldr	r2, [r7, #24]
  4008a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4008a8:	e003      	b.n	4008b2 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  4008aa:	68fb      	ldr	r3, [r7, #12]
  4008ac:	69ba      	ldr	r2, [r7, #24]
  4008ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4008b2:	bf00      	nop
  4008b4:	3734      	adds	r7, #52	; 0x34
  4008b6:	46bd      	mov	sp, r7
  4008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008bc:	4770      	bx	lr
  4008be:	bf00      	nop
  4008c0:	00200707 	.word	0x00200707

004008c4 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  4008c4:	b480      	push	{r7}
  4008c6:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008cc:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4008d0:	4a0c      	ldr	r2, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d2:	4b0c      	ldr	r3, [pc, #48]	; (400904 <tcm_disable+0x40>)
  4008d4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  4008d8:	f023 0301 	bic.w	r3, r3, #1
  4008dc:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008e0:	4a08      	ldr	r2, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e2:	4b08      	ldr	r3, [pc, #32]	; (400904 <tcm_disable+0x40>)
  4008e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4008e8:	f023 0301 	bic.w	r3, r3, #1
  4008ec:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4008f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008f4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4008f8:	bf00      	nop
  4008fa:	46bd      	mov	sp, r7
  4008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400900:	4770      	bx	lr
  400902:	bf00      	nop
  400904:	e000ed00 	.word	0xe000ed00

00400908 <board_init>:
#endif

void board_init(void)
{
  400908:	b580      	push	{r7, lr}
  40090a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40090c:	4b1c      	ldr	r3, [pc, #112]	; (400980 <board_init+0x78>)
  40090e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400912:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400914:	4b1b      	ldr	r3, [pc, #108]	; (400984 <board_init+0x7c>)
  400916:	4a1c      	ldr	r2, [pc, #112]	; (400988 <board_init+0x80>)
  400918:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40091a:	4b1a      	ldr	r3, [pc, #104]	; (400984 <board_init+0x7c>)
  40091c:	4a1b      	ldr	r2, [pc, #108]	; (40098c <board_init+0x84>)
  40091e:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  400920:	4b1b      	ldr	r3, [pc, #108]	; (400990 <board_init+0x88>)
  400922:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  400924:	4b1b      	ldr	r3, [pc, #108]	; (400994 <board_init+0x8c>)
  400926:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  400928:	2101      	movs	r1, #1
  40092a:	2048      	movs	r0, #72	; 0x48
  40092c:	4b1a      	ldr	r3, [pc, #104]	; (400998 <board_init+0x90>)
  40092e:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  400930:	2101      	movs	r1, #1
  400932:	2048      	movs	r0, #72	; 0x48
  400934:	4b19      	ldr	r3, [pc, #100]	; (40099c <board_init+0x94>)
  400936:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  400938:	2100      	movs	r1, #0
  40093a:	200b      	movs	r0, #11
  40093c:	4b16      	ldr	r3, [pc, #88]	; (400998 <board_init+0x90>)
  40093e:	4798      	blx	r3
  400940:	2188      	movs	r1, #136	; 0x88
  400942:	200b      	movs	r0, #11
  400944:	4b16      	ldr	r3, [pc, #88]	; (4009a0 <board_init+0x98>)
  400946:	4798      	blx	r3
  400948:	2102      	movs	r1, #2
  40094a:	200b      	movs	r0, #11
  40094c:	4b15      	ldr	r3, [pc, #84]	; (4009a4 <board_init+0x9c>)
  40094e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400950:	2100      	movs	r1, #0
  400952:	2015      	movs	r0, #21
  400954:	4b12      	ldr	r3, [pc, #72]	; (4009a0 <board_init+0x98>)
  400956:	4798      	blx	r3
  400958:	2015      	movs	r0, #21
  40095a:	4b13      	ldr	r3, [pc, #76]	; (4009a8 <board_init+0xa0>)
  40095c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40095e:	4a13      	ldr	r2, [pc, #76]	; (4009ac <board_init+0xa4>)
  400960:	4b12      	ldr	r3, [pc, #72]	; (4009ac <board_init+0xa4>)
  400962:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400966:	f043 0310 	orr.w	r3, r3, #16
  40096a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  40096e:	2103      	movs	r1, #3
  400970:	2024      	movs	r0, #36	; 0x24
  400972:	4b0b      	ldr	r3, [pc, #44]	; (4009a0 <board_init+0x98>)
  400974:	4798      	blx	r3
  400976:	2024      	movs	r0, #36	; 0x24
  400978:	4b0b      	ldr	r3, [pc, #44]	; (4009a8 <board_init+0xa0>)
  40097a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  40097c:	bf00      	nop
  40097e:	bd80      	pop	{r7, pc}
  400980:	400e1850 	.word	0x400e1850
  400984:	400e0c00 	.word	0x400e0c00
  400988:	5a00080c 	.word	0x5a00080c
  40098c:	5a00070c 	.word	0x5a00070c
  400990:	004008c5 	.word	0x004008c5
  400994:	0040056d 	.word	0x0040056d
  400998:	00400701 	.word	0x00400701
  40099c:	00400789 	.word	0x00400789
  4009a0:	004005e5 	.word	0x004005e5
  4009a4:	004007f5 	.word	0x004007f5
  4009a8:	00400599 	.word	0x00400599
  4009ac:	40088000 	.word	0x40088000

004009b0 <gmac_enable_receive>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
  4009b0:	b480      	push	{r7}
  4009b2:	b083      	sub	sp, #12
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
  4009b8:	460b      	mov	r3, r1
  4009ba:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  4009bc:	78fb      	ldrb	r3, [r7, #3]
  4009be:	2b00      	cmp	r3, #0
  4009c0:	d006      	beq.n	4009d0 <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  4009c2:	687b      	ldr	r3, [r7, #4]
  4009c4:	681b      	ldr	r3, [r3, #0]
  4009c6:	f043 0204 	orr.w	r2, r3, #4
  4009ca:	687b      	ldr	r3, [r7, #4]
  4009cc:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
	}
}
  4009ce:	e005      	b.n	4009dc <gmac_enable_receive+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  4009d0:	687b      	ldr	r3, [r7, #4]
  4009d2:	681b      	ldr	r3, [r3, #0]
  4009d4:	f023 0204 	bic.w	r2, r3, #4
  4009d8:	687b      	ldr	r3, [r7, #4]
  4009da:	601a      	str	r2, [r3, #0]
}
  4009dc:	bf00      	nop
  4009de:	370c      	adds	r7, #12
  4009e0:	46bd      	mov	sp, r7
  4009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009e6:	4770      	bx	lr

004009e8 <gmac_enable_transmit>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
  4009e8:	b480      	push	{r7}
  4009ea:	b083      	sub	sp, #12
  4009ec:	af00      	add	r7, sp, #0
  4009ee:	6078      	str	r0, [r7, #4]
  4009f0:	460b      	mov	r3, r1
  4009f2:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  4009f4:	78fb      	ldrb	r3, [r7, #3]
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d006      	beq.n	400a08 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  4009fa:	687b      	ldr	r3, [r7, #4]
  4009fc:	681b      	ldr	r3, [r3, #0]
  4009fe:	f043 0208 	orr.w	r2, r3, #8
  400a02:	687b      	ldr	r3, [r7, #4]
  400a04:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
	}
}
  400a06:	e005      	b.n	400a14 <gmac_enable_transmit+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400a08:	687b      	ldr	r3, [r7, #4]
  400a0a:	681b      	ldr	r3, [r3, #0]
  400a0c:	f023 0208 	bic.w	r2, r3, #8
  400a10:	687b      	ldr	r3, [r7, #4]
  400a12:	601a      	str	r2, [r3, #0]
}
  400a14:	bf00      	nop
  400a16:	370c      	adds	r7, #12
  400a18:	46bd      	mov	sp, r7
  400a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a1e:	4770      	bx	lr

00400a20 <gmac_enable_management>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
  400a20:	b480      	push	{r7}
  400a22:	b083      	sub	sp, #12
  400a24:	af00      	add	r7, sp, #0
  400a26:	6078      	str	r0, [r7, #4]
  400a28:	460b      	mov	r3, r1
  400a2a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400a2c:	78fb      	ldrb	r3, [r7, #3]
  400a2e:	2b00      	cmp	r3, #0
  400a30:	d006      	beq.n	400a40 <gmac_enable_management+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400a32:	687b      	ldr	r3, [r7, #4]
  400a34:	681b      	ldr	r3, [r3, #0]
  400a36:	f043 0210 	orr.w	r2, r3, #16
  400a3a:	687b      	ldr	r3, [r7, #4]
  400a3c:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
	}
}
  400a3e:	e005      	b.n	400a4c <gmac_enable_management+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400a40:	687b      	ldr	r3, [r7, #4]
  400a42:	681b      	ldr	r3, [r3, #0]
  400a44:	f023 0210 	bic.w	r2, r3, #16
  400a48:	687b      	ldr	r3, [r7, #4]
  400a4a:	601a      	str	r2, [r3, #0]
}
  400a4c:	bf00      	nop
  400a4e:	370c      	adds	r7, #12
  400a50:	46bd      	mov	sp, r7
  400a52:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a56:	4770      	bx	lr

00400a58 <gmac_set_speed>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
  400a58:	b480      	push	{r7}
  400a5a:	b083      	sub	sp, #12
  400a5c:	af00      	add	r7, sp, #0
  400a5e:	6078      	str	r0, [r7, #4]
  400a60:	460b      	mov	r3, r1
  400a62:	70fb      	strb	r3, [r7, #3]
	if (uc_speed) {
  400a64:	78fb      	ldrb	r3, [r7, #3]
  400a66:	2b00      	cmp	r3, #0
  400a68:	d006      	beq.n	400a78 <gmac_set_speed+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400a6a:	687b      	ldr	r3, [r7, #4]
  400a6c:	685b      	ldr	r3, [r3, #4]
  400a6e:	f043 0201 	orr.w	r2, r3, #1
  400a72:	687b      	ldr	r3, [r7, #4]
  400a74:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
	}
}
  400a76:	e005      	b.n	400a84 <gmac_set_speed+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400a78:	687b      	ldr	r3, [r7, #4]
  400a7a:	685b      	ldr	r3, [r3, #4]
  400a7c:	f023 0201 	bic.w	r2, r3, #1
  400a80:	687b      	ldr	r3, [r7, #4]
  400a82:	605a      	str	r2, [r3, #4]
}
  400a84:	bf00      	nop
  400a86:	370c      	adds	r7, #12
  400a88:	46bd      	mov	sp, r7
  400a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a8e:	4770      	bx	lr

00400a90 <gmac_enable_full_duplex>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
  400a90:	b480      	push	{r7}
  400a92:	b083      	sub	sp, #12
  400a94:	af00      	add	r7, sp, #0
  400a96:	6078      	str	r0, [r7, #4]
  400a98:	460b      	mov	r3, r1
  400a9a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400a9c:	78fb      	ldrb	r3, [r7, #3]
  400a9e:	2b00      	cmp	r3, #0
  400aa0:	d006      	beq.n	400ab0 <gmac_enable_full_duplex+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400aa2:	687b      	ldr	r3, [r7, #4]
  400aa4:	685b      	ldr	r3, [r3, #4]
  400aa6:	f043 0202 	orr.w	r2, r3, #2
  400aaa:	687b      	ldr	r3, [r7, #4]
  400aac:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
	}
}
  400aae:	e005      	b.n	400abc <gmac_enable_full_duplex+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400ab0:	687b      	ldr	r3, [r7, #4]
  400ab2:	685b      	ldr	r3, [r3, #4]
  400ab4:	f023 0202 	bic.w	r2, r3, #2
  400ab8:	687b      	ldr	r3, [r7, #4]
  400aba:	605a      	str	r2, [r3, #4]
}
  400abc:	bf00      	nop
  400abe:	370c      	adds	r7, #12
  400ac0:	46bd      	mov	sp, r7
  400ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ac6:	4770      	bx	lr

00400ac8 <gmac_set_mdc_clock>:
 * \param ul_mck   GMAC MCK.
 *
 * \return GMAC_OK if successfully.
 */
static inline uint8_t gmac_set_mdc_clock(Gmac* p_gmac, uint32_t ul_mck)
{
  400ac8:	b480      	push	{r7}
  400aca:	b085      	sub	sp, #20
  400acc:	af00      	add	r7, sp, #0
  400ace:	6078      	str	r0, [r7, #4]
  400ad0:	6039      	str	r1, [r7, #0]
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400ad2:	683b      	ldr	r3, [r7, #0]
  400ad4:	4a20      	ldr	r2, [pc, #128]	; (400b58 <gmac_set_mdc_clock+0x90>)
  400ad6:	4293      	cmp	r3, r2
  400ad8:	d901      	bls.n	400ade <gmac_set_mdc_clock+0x16>
		return GMAC_INVALID;
  400ada:	23ff      	movs	r3, #255	; 0xff
  400adc:	e036      	b.n	400b4c <gmac_set_mdc_clock+0x84>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400ade:	683b      	ldr	r3, [r7, #0]
  400ae0:	4a1e      	ldr	r2, [pc, #120]	; (400b5c <gmac_set_mdc_clock+0x94>)
  400ae2:	4293      	cmp	r3, r2
  400ae4:	d903      	bls.n	400aee <gmac_set_mdc_clock+0x26>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400ae6:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
  400aea:	60fb      	str	r3, [r7, #12]
  400aec:	e021      	b.n	400b32 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400aee:	683b      	ldr	r3, [r7, #0]
  400af0:	4a1b      	ldr	r2, [pc, #108]	; (400b60 <gmac_set_mdc_clock+0x98>)
  400af2:	4293      	cmp	r3, r2
  400af4:	d903      	bls.n	400afe <gmac_set_mdc_clock+0x36>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  400af6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400afa:	60fb      	str	r3, [r7, #12]
  400afc:	e019      	b.n	400b32 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400afe:	683b      	ldr	r3, [r7, #0]
  400b00:	4a18      	ldr	r2, [pc, #96]	; (400b64 <gmac_set_mdc_clock+0x9c>)
  400b02:	4293      	cmp	r3, r2
  400b04:	d903      	bls.n	400b0e <gmac_set_mdc_clock+0x46>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400b06:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400b0a:	60fb      	str	r3, [r7, #12]
  400b0c:	e011      	b.n	400b32 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400b0e:	683b      	ldr	r3, [r7, #0]
  400b10:	4a15      	ldr	r2, [pc, #84]	; (400b68 <gmac_set_mdc_clock+0xa0>)
  400b12:	4293      	cmp	r3, r2
  400b14:	d903      	bls.n	400b1e <gmac_set_mdc_clock+0x56>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  400b16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400b1a:	60fb      	str	r3, [r7, #12]
  400b1c:	e009      	b.n	400b32 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
  400b1e:	683b      	ldr	r3, [r7, #0]
  400b20:	4a12      	ldr	r2, [pc, #72]	; (400b6c <gmac_set_mdc_clock+0xa4>)
  400b22:	4293      	cmp	r3, r2
  400b24:	d903      	bls.n	400b2e <gmac_set_mdc_clock+0x66>
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
  400b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400b2a:	60fb      	str	r3, [r7, #12]
  400b2c:	e001      	b.n	400b32 <gmac_set_mdc_clock+0x6a>
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400b2e:	2300      	movs	r3, #0
  400b30:	60fb      	str	r3, [r7, #12]
	}
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400b32:	687b      	ldr	r3, [r7, #4]
  400b34:	685b      	ldr	r3, [r3, #4]
  400b36:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
  400b3a:	687b      	ldr	r3, [r7, #4]
  400b3c:	605a      	str	r2, [r3, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400b3e:	687b      	ldr	r3, [r7, #4]
  400b40:	685a      	ldr	r2, [r3, #4]
  400b42:	68fb      	ldr	r3, [r7, #12]
  400b44:	431a      	orrs	r2, r3
  400b46:	687b      	ldr	r3, [r7, #4]
  400b48:	605a      	str	r2, [r3, #4]
	return GMAC_OK;
  400b4a:	2300      	movs	r3, #0
}
  400b4c:	4618      	mov	r0, r3
  400b4e:	3714      	adds	r7, #20
  400b50:	46bd      	mov	sp, r7
  400b52:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b56:	4770      	bx	lr
  400b58:	0e4e1c00 	.word	0x0e4e1c00
  400b5c:	09896800 	.word	0x09896800
  400b60:	07270e00 	.word	0x07270e00
  400b64:	04c4b400 	.word	0x04c4b400
  400b68:	02625a00 	.word	0x02625a00
  400b6c:	01312d00 	.word	0x01312d00

00400b70 <gmac_select_mii_mode>:
		break;
	}
}
#else
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
  400b70:	b480      	push	{r7}
  400b72:	b083      	sub	sp, #12
  400b74:	af00      	add	r7, sp, #0
  400b76:	6078      	str	r0, [r7, #4]
  400b78:	460b      	mov	r3, r1
  400b7a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
  400b7c:	78fb      	ldrb	r3, [r7, #3]
  400b7e:	2b00      	cmp	r3, #0
  400b80:	d106      	bne.n	400b90 <gmac_select_mii_mode+0x20>
		case GMAC_PHY_MII:
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
  400b82:	687b      	ldr	r3, [r7, #4]
  400b84:	68db      	ldr	r3, [r3, #12]
  400b86:	f043 0201 	orr.w	r2, r3, #1
  400b8a:	687b      	ldr	r3, [r7, #4]
  400b8c:	60da      	str	r2, [r3, #12]
			break;
  400b8e:	e006      	b.n	400b9e <gmac_select_mii_mode+0x2e>

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400b90:	687b      	ldr	r3, [r7, #4]
  400b92:	68db      	ldr	r3, [r3, #12]
  400b94:	f023 0201 	bic.w	r2, r3, #1
  400b98:	687b      	ldr	r3, [r7, #4]
  400b9a:	60da      	str	r2, [r3, #12]
			break;
  400b9c:	bf00      	nop
	}
}
  400b9e:	bf00      	nop
  400ba0:	370c      	adds	r7, #12
  400ba2:	46bd      	mov	sp, r7
  400ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ba8:	4770      	bx	lr
	...

00400bac <ethernet_phy_find_valid>:
 *
 * \return 0xFF when no valid PHY address is found.
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
  400bac:	b590      	push	{r4, r7, lr}
  400bae:	b085      	sub	sp, #20
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	6078      	str	r0, [r7, #4]
  400bb4:	460b      	mov	r3, r1
  400bb6:	70fb      	strb	r3, [r7, #3]
  400bb8:	4613      	mov	r3, r2
  400bba:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_value = 0;
  400bbc:	2300      	movs	r3, #0
  400bbe:	60bb      	str	r3, [r7, #8]
	uint8_t uc_rc = 0;
  400bc0:	2300      	movs	r3, #0
  400bc2:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_cnt;
	uint8_t uc_phy_address = uc_phy_addr;
  400bc4:	78fb      	ldrb	r3, [r7, #3]
  400bc6:	737b      	strb	r3, [r7, #13]

	gmac_enable_management(p_gmac, true);
  400bc8:	2101      	movs	r1, #1
  400bca:	6878      	ldr	r0, [r7, #4]
  400bcc:	4b1f      	ldr	r3, [pc, #124]	; (400c4c <ethernet_phy_find_valid+0xa0>)
  400bce:	4798      	blx	r3
    uc_rc = uc_phy_address;
  400bd0:	7b7b      	ldrb	r3, [r7, #13]
  400bd2:	73fb      	strb	r3, [r7, #15]
	/* Check the current PHY address */
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400bd4:	f107 0308 	add.w	r3, r7, #8
  400bd8:	78f9      	ldrb	r1, [r7, #3]
  400bda:	2202      	movs	r2, #2
  400bdc:	6878      	ldr	r0, [r7, #4]
  400bde:	4c1c      	ldr	r4, [pc, #112]	; (400c50 <ethernet_phy_find_valid+0xa4>)
  400be0:	47a0      	blx	r4

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
  400be2:	68bb      	ldr	r3, [r7, #8]
  400be4:	2b22      	cmp	r3, #34	; 0x22
  400be6:	d01d      	beq.n	400c24 <ethernet_phy_find_valid+0x78>
		uc_rc = 0xFF;
  400be8:	23ff      	movs	r3, #255	; 0xff
  400bea:	73fb      	strb	r3, [r7, #15]
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400bec:	78bb      	ldrb	r3, [r7, #2]
  400bee:	73bb      	strb	r3, [r7, #14]
  400bf0:	e015      	b.n	400c1e <ethernet_phy_find_valid+0x72>
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400bf2:	7b7b      	ldrb	r3, [r7, #13]
  400bf4:	3301      	adds	r3, #1
  400bf6:	b2db      	uxtb	r3, r3
  400bf8:	f003 031f 	and.w	r3, r3, #31
  400bfc:	737b      	strb	r3, [r7, #13]
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400bfe:	f107 0308 	add.w	r3, r7, #8
  400c02:	7b79      	ldrb	r1, [r7, #13]
  400c04:	2202      	movs	r2, #2
  400c06:	6878      	ldr	r0, [r7, #4]
  400c08:	4c11      	ldr	r4, [pc, #68]	; (400c50 <ethernet_phy_find_valid+0xa4>)
  400c0a:	47a0      	blx	r4
			if (ul_value == GMII_OUI_MSB) {
  400c0c:	68bb      	ldr	r3, [r7, #8]
  400c0e:	2b22      	cmp	r3, #34	; 0x22
  400c10:	d102      	bne.n	400c18 <ethernet_phy_find_valid+0x6c>
				uc_rc = uc_phy_address;
  400c12:	7b7b      	ldrb	r3, [r7, #13]
  400c14:	73fb      	strb	r3, [r7, #15]
				break;
  400c16:	e005      	b.n	400c24 <ethernet_phy_find_valid+0x78>
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400c18:	7bbb      	ldrb	r3, [r7, #14]
  400c1a:	3301      	adds	r3, #1
  400c1c:	73bb      	strb	r3, [r7, #14]
  400c1e:	7bbb      	ldrb	r3, [r7, #14]
  400c20:	2b1f      	cmp	r3, #31
  400c22:	d9e6      	bls.n	400bf2 <ethernet_phy_find_valid+0x46>
			}
		}
	}

	gmac_enable_management(p_gmac, false);
  400c24:	2100      	movs	r1, #0
  400c26:	6878      	ldr	r0, [r7, #4]
  400c28:	4b08      	ldr	r3, [pc, #32]	; (400c4c <ethernet_phy_find_valid+0xa0>)
  400c2a:	4798      	blx	r3

	if (uc_rc != 0xFF) {
  400c2c:	7bfb      	ldrb	r3, [r7, #15]
  400c2e:	2bff      	cmp	r3, #255	; 0xff
  400c30:	d006      	beq.n	400c40 <ethernet_phy_find_valid+0x94>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400c32:	f107 0308 	add.w	r3, r7, #8
  400c36:	7b79      	ldrb	r1, [r7, #13]
  400c38:	2201      	movs	r2, #1
  400c3a:	6878      	ldr	r0, [r7, #4]
  400c3c:	4c04      	ldr	r4, [pc, #16]	; (400c50 <ethernet_phy_find_valid+0xa4>)
  400c3e:	47a0      	blx	r4
	}
	return uc_rc;
  400c40:	7bfb      	ldrb	r3, [r7, #15]
}
  400c42:	4618      	mov	r0, r3
  400c44:	3714      	adds	r7, #20
  400c46:	46bd      	mov	sp, r7
  400c48:	bd90      	pop	{r4, r7, pc}
  400c4a:	bf00      	nop
  400c4c:	00400a21 	.word	0x00400a21
  400c50:	00401231 	.word	0x00401231

00400c54 <ethernet_phy_init>:
 * \param ul_mck GMAC MCK.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Gmac *p_gmac, uint8_t uc_phy_addr, uint32_t mck)
{
  400c54:	b590      	push	{r4, r7, lr}
  400c56:	b089      	sub	sp, #36	; 0x24
  400c58:	af02      	add	r7, sp, #8
  400c5a:	60f8      	str	r0, [r7, #12]
  400c5c:	460b      	mov	r3, r1
  400c5e:	607a      	str	r2, [r7, #4]
  400c60:	72fb      	strb	r3, [r7, #11]
	uint8_t uc_rc;
	uint8_t uc_phy;

	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  400c62:	2301      	movs	r3, #1
  400c64:	9300      	str	r3, [sp, #0]
  400c66:	2300      	movs	r3, #0
  400c68:	2201      	movs	r2, #1
  400c6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400c6e:	481d      	ldr	r0, [pc, #116]	; (400ce4 <ethernet_phy_init+0x90>)
  400c70:	4c1d      	ldr	r4, [pc, #116]	; (400ce8 <ethernet_phy_init+0x94>)
  400c72:	47a0      	blx	r4
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  400c74:	2201      	movs	r2, #1
  400c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  400c7a:	481c      	ldr	r0, [pc, #112]	; (400cec <ethernet_phy_init+0x98>)
  400c7c:	4b1c      	ldr	r3, [pc, #112]	; (400cf0 <ethernet_phy_init+0x9c>)
  400c7e:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  400c80:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400c84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400c88:	481a      	ldr	r0, [pc, #104]	; (400cf4 <ethernet_phy_init+0xa0>)
  400c8a:	4b1b      	ldr	r3, [pc, #108]	; (400cf8 <ethernet_phy_init+0xa4>)
  400c8c:	4798      	blx	r3

	ethernet_phy_reset(GMAC,uc_phy_addr);
  400c8e:	7afb      	ldrb	r3, [r7, #11]
  400c90:	4619      	mov	r1, r3
  400c92:	481a      	ldr	r0, [pc, #104]	; (400cfc <ethernet_phy_init+0xa8>)
  400c94:	4b1a      	ldr	r3, [pc, #104]	; (400d00 <ethernet_phy_init+0xac>)
  400c96:	4798      	blx	r3

	/* Configure GMAC runtime clock */
	uc_rc = gmac_set_mdc_clock(p_gmac, mck);
  400c98:	6879      	ldr	r1, [r7, #4]
  400c9a:	68f8      	ldr	r0, [r7, #12]
  400c9c:	4b19      	ldr	r3, [pc, #100]	; (400d04 <ethernet_phy_init+0xb0>)
  400c9e:	4798      	blx	r3
  400ca0:	4603      	mov	r3, r0
  400ca2:	75fb      	strb	r3, [r7, #23]
	if (uc_rc != GMAC_OK) {
  400ca4:	7dfb      	ldrb	r3, [r7, #23]
  400ca6:	2b00      	cmp	r3, #0
  400ca8:	d001      	beq.n	400cae <ethernet_phy_init+0x5a>
		return 0;
  400caa:	2300      	movs	r3, #0
  400cac:	e016      	b.n	400cdc <ethernet_phy_init+0x88>
	}

	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_gmac, uc_phy_addr, 0);
  400cae:	7afb      	ldrb	r3, [r7, #11]
  400cb0:	2200      	movs	r2, #0
  400cb2:	4619      	mov	r1, r3
  400cb4:	68f8      	ldr	r0, [r7, #12]
  400cb6:	4b14      	ldr	r3, [pc, #80]	; (400d08 <ethernet_phy_init+0xb4>)
  400cb8:	4798      	blx	r3
  400cba:	4603      	mov	r3, r0
  400cbc:	75bb      	strb	r3, [r7, #22]
	if (uc_phy == 0xFF) {
  400cbe:	7dbb      	ldrb	r3, [r7, #22]
  400cc0:	2bff      	cmp	r3, #255	; 0xff
  400cc2:	d101      	bne.n	400cc8 <ethernet_phy_init+0x74>
		return 0;
  400cc4:	2300      	movs	r3, #0
  400cc6:	e009      	b.n	400cdc <ethernet_phy_init+0x88>
	}
	if (uc_phy != uc_phy_addr) {
  400cc8:	7dba      	ldrb	r2, [r7, #22]
  400cca:	7afb      	ldrb	r3, [r7, #11]
  400ccc:	429a      	cmp	r2, r3
  400cce:	d004      	beq.n	400cda <ethernet_phy_init+0x86>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  400cd0:	7afb      	ldrb	r3, [r7, #11]
  400cd2:	4619      	mov	r1, r3
  400cd4:	68f8      	ldr	r0, [r7, #12]
  400cd6:	4b0a      	ldr	r3, [pc, #40]	; (400d00 <ethernet_phy_init+0xac>)
  400cd8:	4798      	blx	r3
	}

	return uc_rc;
  400cda:	7dfb      	ldrb	r3, [r7, #23]
}
  400cdc:	4618      	mov	r0, r3
  400cde:	371c      	adds	r7, #28
  400ce0:	46bd      	mov	sp, r7
  400ce2:	bd90      	pop	{r4, r7, pc}
  400ce4:	400e1200 	.word	0x400e1200
  400ce8:	00401495 	.word	0x00401495
  400cec:	400e0e00 	.word	0x400e0e00
  400cf0:	00401415 	.word	0x00401415
  400cf4:	400e1400 	.word	0x400e1400
  400cf8:	00401305 	.word	0x00401305
  400cfc:	40050000 	.word	0x40050000
  400d00:	004010bd 	.word	0x004010bd
  400d04:	00400ac9 	.word	0x00400ac9
  400d08:	00400bad 	.word	0x00400bad

00400d0c <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  400d0c:	b590      	push	{r4, r7, lr}
  400d0e:	b087      	sub	sp, #28
  400d10:	af00      	add	r7, sp, #0
  400d12:	6078      	str	r0, [r7, #4]
  400d14:	460b      	mov	r3, r1
  400d16:	70fb      	strb	r3, [r7, #3]
  400d18:	4613      	mov	r3, r2
  400d1a:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_stat1;
	uint32_t ul_stat2;
	uint8_t uc_phy_address, uc_speed, uc_fd;
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400d1c:	2101      	movs	r1, #1
  400d1e:	6878      	ldr	r0, [r7, #4]
  400d20:	4b43      	ldr	r3, [pc, #268]	; (400e30 <ethernet_phy_set_link+0x124>)
  400d22:	4798      	blx	r3

	uc_phy_address = uc_phy_addr;
  400d24:	78fb      	ldrb	r3, [r7, #3]
  400d26:	757b      	strb	r3, [r7, #21]

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  400d28:	f107 0310 	add.w	r3, r7, #16
  400d2c:	7d79      	ldrb	r1, [r7, #21]
  400d2e:	2201      	movs	r2, #1
  400d30:	6878      	ldr	r0, [r7, #4]
  400d32:	4c40      	ldr	r4, [pc, #256]	; (400e34 <ethernet_phy_set_link+0x128>)
  400d34:	47a0      	blx	r4
  400d36:	4603      	mov	r3, r0
  400d38:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400d3a:	7d3b      	ldrb	r3, [r7, #20]
  400d3c:	2b00      	cmp	r3, #0
  400d3e:	d005      	beq.n	400d4c <ethernet_phy_set_link+0x40>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400d40:	2100      	movs	r1, #0
  400d42:	6878      	ldr	r0, [r7, #4]
  400d44:	4b3a      	ldr	r3, [pc, #232]	; (400e30 <ethernet_phy_set_link+0x124>)
  400d46:	4798      	blx	r3

		return uc_rc;
  400d48:	7d3b      	ldrb	r3, [r7, #20]
  400d4a:	e06c      	b.n	400e26 <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  400d4c:	693b      	ldr	r3, [r7, #16]
  400d4e:	f003 0304 	and.w	r3, r3, #4
  400d52:	2b00      	cmp	r3, #0
  400d54:	d105      	bne.n	400d62 <ethernet_phy_set_link+0x56>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400d56:	2100      	movs	r1, #0
  400d58:	6878      	ldr	r0, [r7, #4]
  400d5a:	4b35      	ldr	r3, [pc, #212]	; (400e30 <ethernet_phy_set_link+0x124>)
  400d5c:	4798      	blx	r3

		return GMAC_INVALID;
  400d5e:	23ff      	movs	r3, #255	; 0xff
  400d60:	e061      	b.n	400e26 <ethernet_phy_set_link+0x11a>
	}

	if (uc_apply_setting_flag == 0) {
  400d62:	78bb      	ldrb	r3, [r7, #2]
  400d64:	2b00      	cmp	r3, #0
  400d66:	d105      	bne.n	400d74 <ethernet_phy_set_link+0x68>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400d68:	2100      	movs	r1, #0
  400d6a:	6878      	ldr	r0, [r7, #4]
  400d6c:	4b30      	ldr	r3, [pc, #192]	; (400e30 <ethernet_phy_set_link+0x124>)
  400d6e:	4798      	blx	r3

		return uc_rc;
  400d70:	7d3b      	ldrb	r3, [r7, #20]
  400d72:	e058      	b.n	400e26 <ethernet_phy_set_link+0x11a>
	}

	/* Read advertisement */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400d74:	f107 030c 	add.w	r3, r7, #12
  400d78:	7d79      	ldrb	r1, [r7, #21]
  400d7a:	221e      	movs	r2, #30
  400d7c:	6878      	ldr	r0, [r7, #4]
  400d7e:	4c2d      	ldr	r4, [pc, #180]	; (400e34 <ethernet_phy_set_link+0x128>)
  400d80:	47a0      	blx	r4
  400d82:	4603      	mov	r3, r0
  400d84:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400d86:	7d3b      	ldrb	r3, [r7, #20]
  400d88:	2b00      	cmp	r3, #0
  400d8a:	d005      	beq.n	400d98 <ethernet_phy_set_link+0x8c>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400d8c:	2100      	movs	r1, #0
  400d8e:	6878      	ldr	r0, [r7, #4]
  400d90:	4b27      	ldr	r3, [pc, #156]	; (400e30 <ethernet_phy_set_link+0x124>)
  400d92:	4798      	blx	r3

		return uc_rc;
  400d94:	7d3b      	ldrb	r3, [r7, #20]
  400d96:	e046      	b.n	400e26 <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400d98:	693b      	ldr	r3, [r7, #16]
  400d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  400d9e:	2b00      	cmp	r3, #0
  400da0:	d008      	beq.n	400db4 <ethernet_phy_set_link+0xa8>
  400da2:	68fb      	ldr	r3, [r7, #12]
  400da4:	f003 0306 	and.w	r3, r3, #6
  400da8:	2b00      	cmp	r3, #0
  400daa:	d003      	beq.n	400db4 <ethernet_phy_set_link+0xa8>
		/* Set GMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
  400dac:	2301      	movs	r3, #1
  400dae:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400db0:	2301      	movs	r3, #1
  400db2:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400db4:	693b      	ldr	r3, [r7, #16]
  400db6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400dba:	2b00      	cmp	r3, #0
  400dbc:	d008      	beq.n	400dd0 <ethernet_phy_set_link+0xc4>
  400dbe:	68fb      	ldr	r3, [r7, #12]
  400dc0:	f003 0305 	and.w	r3, r3, #5
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d003      	beq.n	400dd0 <ethernet_phy_set_link+0xc4>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  400dc8:	2300      	movs	r3, #0
  400dca:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400dcc:	2301      	movs	r3, #1
  400dce:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400dd0:	693b      	ldr	r3, [r7, #16]
  400dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  400dd6:	2b00      	cmp	r3, #0
  400dd8:	d008      	beq.n	400dec <ethernet_phy_set_link+0xe0>
  400dda:	68fb      	ldr	r3, [r7, #12]
  400ddc:	f003 0302 	and.w	r3, r3, #2
  400de0:	2b00      	cmp	r3, #0
  400de2:	d003      	beq.n	400dec <ethernet_phy_set_link+0xe0>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
  400de4:	2301      	movs	r3, #1
  400de6:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400de8:	2300      	movs	r3, #0
  400dea:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400dec:	693b      	ldr	r3, [r7, #16]
  400dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  400df2:	2b00      	cmp	r3, #0
  400df4:	d008      	beq.n	400e08 <ethernet_phy_set_link+0xfc>
  400df6:	68fb      	ldr	r3, [r7, #12]
  400df8:	f003 0301 	and.w	r3, r3, #1
  400dfc:	2b00      	cmp	r3, #0
  400dfe:	d003      	beq.n	400e08 <ethernet_phy_set_link+0xfc>
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
  400e00:	2300      	movs	r3, #0
  400e02:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400e04:	2300      	movs	r3, #0
  400e06:	75bb      	strb	r3, [r7, #22]
	}

	gmac_set_speed(p_gmac, uc_speed);
  400e08:	7dfb      	ldrb	r3, [r7, #23]
  400e0a:	4619      	mov	r1, r3
  400e0c:	6878      	ldr	r0, [r7, #4]
  400e0e:	4b0a      	ldr	r3, [pc, #40]	; (400e38 <ethernet_phy_set_link+0x12c>)
  400e10:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  400e12:	7dbb      	ldrb	r3, [r7, #22]
  400e14:	4619      	mov	r1, r3
  400e16:	6878      	ldr	r0, [r7, #4]
  400e18:	4b08      	ldr	r3, [pc, #32]	; (400e3c <ethernet_phy_set_link+0x130>)
  400e1a:	4798      	blx	r3

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
  400e1c:	2100      	movs	r1, #0
  400e1e:	6878      	ldr	r0, [r7, #4]
  400e20:	4b03      	ldr	r3, [pc, #12]	; (400e30 <ethernet_phy_set_link+0x124>)
  400e22:	4798      	blx	r3
	return uc_rc;
  400e24:	7d3b      	ldrb	r3, [r7, #20]
}
  400e26:	4618      	mov	r0, r3
  400e28:	371c      	adds	r7, #28
  400e2a:	46bd      	mov	sp, r7
  400e2c:	bd90      	pop	{r4, r7, pc}
  400e2e:	bf00      	nop
  400e30:	00400a21 	.word	0x00400a21
  400e34:	00401231 	.word	0x00401231
  400e38:	00400a59 	.word	0x00400a59
  400e3c:	00400a91 	.word	0x00400a91

00400e40 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400e40:	b590      	push	{r4, r7, lr}
  400e42:	b08b      	sub	sp, #44	; 0x2c
  400e44:	af00      	add	r7, sp, #0
  400e46:	6078      	str	r0, [r7, #4]
  400e48:	460b      	mov	r3, r1
  400e4a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_retry_max = ETH_PHY_RETRY_MAX;
  400e4c:	4b91      	ldr	r3, [pc, #580]	; (401094 <ethernet_phy_auto_negotiate+0x254>)
  400e4e:	61fb      	str	r3, [r7, #28]
	uint32_t ul_value;
	uint32_t ul_phy_anar;
	uint32_t ul_phy_analpar;
	uint32_t ul_retry_count = 0;
  400e50:	2300      	movs	r3, #0
  400e52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t uc_speed = 0;
  400e54:	2300      	movs	r3, #0
  400e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t uc_fd=0;
  400e5a:	2300      	movs	r3, #0
  400e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400e60:	2101      	movs	r1, #1
  400e62:	6878      	ldr	r0, [r7, #4]
  400e64:	4b8c      	ldr	r3, [pc, #560]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400e66:	4798      	blx	r3

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400e68:	f107 0310 	add.w	r3, r7, #16
  400e6c:	78f9      	ldrb	r1, [r7, #3]
  400e6e:	2200      	movs	r2, #0
  400e70:	6878      	ldr	r0, [r7, #4]
  400e72:	4c8a      	ldr	r4, [pc, #552]	; (40109c <ethernet_phy_auto_negotiate+0x25c>)
  400e74:	47a0      	blx	r4
  400e76:	4603      	mov	r3, r0
  400e78:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400e7a:	7efb      	ldrb	r3, [r7, #27]
  400e7c:	2b00      	cmp	r3, #0
  400e7e:	d005      	beq.n	400e8c <ethernet_phy_auto_negotiate+0x4c>
		gmac_enable_management(p_gmac, false);
  400e80:	2100      	movs	r1, #0
  400e82:	6878      	ldr	r0, [r7, #4]
  400e84:	4b84      	ldr	r3, [pc, #528]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400e86:	4798      	blx	r3
		return uc_rc;
  400e88:	7efb      	ldrb	r3, [r7, #27]
  400e8a:	e0fe      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value &= ~(uint32_t)GMII_AUTONEG; /* Remove auto-negotiation enable */
  400e8c:	693b      	ldr	r3, [r7, #16]
  400e8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400e92:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400e94:	693b      	ldr	r3, [r7, #16]
  400e96:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
  400e9a:	613b      	str	r3, [r7, #16]
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400e9c:	693b      	ldr	r3, [r7, #16]
  400e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400ea2:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400ea4:	693b      	ldr	r3, [r7, #16]
  400ea6:	78f9      	ldrb	r1, [r7, #3]
  400ea8:	2200      	movs	r2, #0
  400eaa:	6878      	ldr	r0, [r7, #4]
  400eac:	4c7c      	ldr	r4, [pc, #496]	; (4010a0 <ethernet_phy_auto_negotiate+0x260>)
  400eae:	47a0      	blx	r4
  400eb0:	4603      	mov	r3, r0
  400eb2:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400eb4:	7efb      	ldrb	r3, [r7, #27]
  400eb6:	2b00      	cmp	r3, #0
  400eb8:	d005      	beq.n	400ec6 <ethernet_phy_auto_negotiate+0x86>
		gmac_enable_management(p_gmac, false);
  400eba:	2100      	movs	r1, #0
  400ebc:	6878      	ldr	r0, [r7, #4]
  400ebe:	4b76      	ldr	r3, [pc, #472]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400ec0:	4798      	blx	r3
		return uc_rc;
  400ec2:	7efb      	ldrb	r3, [r7, #27]
  400ec4:	e0e1      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	/*
	 * Set the Auto_negotiation Advertisement Register.
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = GMII_100TX_FDX | GMII_100TX_HDX | GMII_10_FDX | GMII_10_HDX |
  400ec6:	f240 13e1 	movw	r3, #481	; 0x1e1
  400eca:	617b      	str	r3, [r7, #20]
			GMII_AN_IEEE_802_3;
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400ecc:	78f9      	ldrb	r1, [r7, #3]
  400ece:	697b      	ldr	r3, [r7, #20]
  400ed0:	2204      	movs	r2, #4
  400ed2:	6878      	ldr	r0, [r7, #4]
  400ed4:	4c72      	ldr	r4, [pc, #456]	; (4010a0 <ethernet_phy_auto_negotiate+0x260>)
  400ed6:	47a0      	blx	r4
  400ed8:	4603      	mov	r3, r0
  400eda:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400edc:	7efb      	ldrb	r3, [r7, #27]
  400ede:	2b00      	cmp	r3, #0
  400ee0:	d005      	beq.n	400eee <ethernet_phy_auto_negotiate+0xae>
		gmac_enable_management(p_gmac, false);
  400ee2:	2100      	movs	r1, #0
  400ee4:	6878      	ldr	r0, [r7, #4]
  400ee6:	4b6c      	ldr	r3, [pc, #432]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400ee8:	4798      	blx	r3
		return uc_rc;
  400eea:	7efb      	ldrb	r3, [r7, #27]
  400eec:	e0cd      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Read & modify control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400eee:	f107 0310 	add.w	r3, r7, #16
  400ef2:	78f9      	ldrb	r1, [r7, #3]
  400ef4:	2200      	movs	r2, #0
  400ef6:	6878      	ldr	r0, [r7, #4]
  400ef8:	4c68      	ldr	r4, [pc, #416]	; (40109c <ethernet_phy_auto_negotiate+0x25c>)
  400efa:	47a0      	blx	r4
  400efc:	4603      	mov	r3, r0
  400efe:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f00:	7efb      	ldrb	r3, [r7, #27]
  400f02:	2b00      	cmp	r3, #0
  400f04:	d005      	beq.n	400f12 <ethernet_phy_auto_negotiate+0xd2>
		gmac_enable_management(p_gmac, false);
  400f06:	2100      	movs	r1, #0
  400f08:	6878      	ldr	r0, [r7, #4]
  400f0a:	4b63      	ldr	r3, [pc, #396]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400f0c:	4798      	blx	r3
		return uc_rc;
  400f0e:	7efb      	ldrb	r3, [r7, #27]
  400f10:	e0bb      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400f12:	693b      	ldr	r3, [r7, #16]
  400f14:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400f18:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400f1a:	693b      	ldr	r3, [r7, #16]
  400f1c:	78f9      	ldrb	r1, [r7, #3]
  400f1e:	2200      	movs	r2, #0
  400f20:	6878      	ldr	r0, [r7, #4]
  400f22:	4c5f      	ldr	r4, [pc, #380]	; (4010a0 <ethernet_phy_auto_negotiate+0x260>)
  400f24:	47a0      	blx	r4
  400f26:	4603      	mov	r3, r0
  400f28:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f2a:	7efb      	ldrb	r3, [r7, #27]
  400f2c:	2b00      	cmp	r3, #0
  400f2e:	d005      	beq.n	400f3c <ethernet_phy_auto_negotiate+0xfc>
		gmac_enable_management(p_gmac, false);
  400f30:	2100      	movs	r1, #0
  400f32:	6878      	ldr	r0, [r7, #4]
  400f34:	4b58      	ldr	r3, [pc, #352]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400f36:	4798      	blx	r3
		return uc_rc;
  400f38:	7efb      	ldrb	r3, [r7, #27]
  400f3a:	e0a6      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Restart auto negotiation */
	ul_value |= (uint32_t)GMII_RESTART_AUTONEG;
  400f3c:	693b      	ldr	r3, [r7, #16]
  400f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  400f42:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  400f44:	693b      	ldr	r3, [r7, #16]
  400f46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400f4a:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400f4c:	693b      	ldr	r3, [r7, #16]
  400f4e:	78f9      	ldrb	r1, [r7, #3]
  400f50:	2200      	movs	r2, #0
  400f52:	6878      	ldr	r0, [r7, #4]
  400f54:	4c52      	ldr	r4, [pc, #328]	; (4010a0 <ethernet_phy_auto_negotiate+0x260>)
  400f56:	47a0      	blx	r4
  400f58:	4603      	mov	r3, r0
  400f5a:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f5c:	7efb      	ldrb	r3, [r7, #27]
  400f5e:	2b00      	cmp	r3, #0
  400f60:	d005      	beq.n	400f6e <ethernet_phy_auto_negotiate+0x12e>
		gmac_enable_management(p_gmac, false);
  400f62:	2100      	movs	r1, #0
  400f64:	6878      	ldr	r0, [r7, #4]
  400f66:	4b4c      	ldr	r3, [pc, #304]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400f68:	4798      	blx	r3
		return uc_rc;
  400f6a:	7efb      	ldrb	r3, [r7, #27]
  400f6c:	e08d      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  400f6e:	f107 0310 	add.w	r3, r7, #16
  400f72:	78f9      	ldrb	r1, [r7, #3]
  400f74:	2201      	movs	r2, #1
  400f76:	6878      	ldr	r0, [r7, #4]
  400f78:	4c48      	ldr	r4, [pc, #288]	; (40109c <ethernet_phy_auto_negotiate+0x25c>)
  400f7a:	47a0      	blx	r4
  400f7c:	4603      	mov	r3, r0
  400f7e:	76fb      	strb	r3, [r7, #27]
		if (uc_rc != GMAC_OK) {
  400f80:	7efb      	ldrb	r3, [r7, #27]
  400f82:	2b00      	cmp	r3, #0
  400f84:	d005      	beq.n	400f92 <ethernet_phy_auto_negotiate+0x152>
			gmac_enable_management(p_gmac, false);
  400f86:	2100      	movs	r1, #0
  400f88:	6878      	ldr	r0, [r7, #4]
  400f8a:	4b43      	ldr	r3, [pc, #268]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400f8c:	4798      	blx	r3
			return uc_rc;
  400f8e:	7efb      	ldrb	r3, [r7, #27]
  400f90:	e07b      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
  400f92:	693b      	ldr	r3, [r7, #16]
  400f94:	f003 0320 	and.w	r3, r3, #32
  400f98:	2b00      	cmp	r3, #0
  400f9a:	d10f      	bne.n	400fbc <ethernet_phy_auto_negotiate+0x17c>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
  400f9c:	69fb      	ldr	r3, [r7, #28]
  400f9e:	2b00      	cmp	r3, #0
  400fa0:	d0e5      	beq.n	400f6e <ethernet_phy_auto_negotiate+0x12e>
			if (++ul_retry_count >= ul_retry_max) {
  400fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fa4:	3301      	adds	r3, #1
  400fa6:	627b      	str	r3, [r7, #36]	; 0x24
  400fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  400faa:	69fb      	ldr	r3, [r7, #28]
  400fac:	429a      	cmp	r2, r3
  400fae:	d3de      	bcc.n	400f6e <ethernet_phy_auto_negotiate+0x12e>
				gmac_enable_management(p_gmac, false);
  400fb0:	2100      	movs	r1, #0
  400fb2:	6878      	ldr	r0, [r7, #4]
  400fb4:	4b38      	ldr	r3, [pc, #224]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400fb6:	4798      	blx	r3
				return GMAC_TIMEOUT;
  400fb8:	2301      	movs	r3, #1
  400fba:	e066      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
			break;
  400fbc:	bf00      	nop
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  400fbe:	f107 030c 	add.w	r3, r7, #12
  400fc2:	78f9      	ldrb	r1, [r7, #3]
  400fc4:	2205      	movs	r2, #5
  400fc6:	6878      	ldr	r0, [r7, #4]
  400fc8:	4c34      	ldr	r4, [pc, #208]	; (40109c <ethernet_phy_auto_negotiate+0x25c>)
  400fca:	47a0      	blx	r4
  400fcc:	4603      	mov	r3, r0
  400fce:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400fd0:	7efb      	ldrb	r3, [r7, #27]
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d005      	beq.n	400fe2 <ethernet_phy_auto_negotiate+0x1a2>
		gmac_enable_management(p_gmac, false);
  400fd6:	2100      	movs	r1, #0
  400fd8:	6878      	ldr	r0, [r7, #4]
  400fda:	4b2f      	ldr	r3, [pc, #188]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  400fdc:	4798      	blx	r3
		return uc_rc;
  400fde:	7efb      	ldrb	r3, [r7, #27]
  400fe0:	e053      	b.n	40108a <ethernet_phy_auto_negotiate+0x24a>
	}


	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  400fe2:	68fa      	ldr	r2, [r7, #12]
  400fe4:	697b      	ldr	r3, [r7, #20]
  400fe6:	4013      	ands	r3, r2
  400fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  400fec:	2b00      	cmp	r3, #0
  400fee:	d006      	beq.n	400ffe <ethernet_phy_auto_negotiate+0x1be>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
  400ff0:	2301      	movs	r3, #1
  400ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  400ff6:	2301      	movs	r3, #1
  400ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  400ffc:	e028      	b.n	401050 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  400ffe:	68fa      	ldr	r2, [r7, #12]
  401000:	697b      	ldr	r3, [r7, #20]
  401002:	4013      	ands	r3, r2
  401004:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401008:	2b00      	cmp	r3, #0
  40100a:	d006      	beq.n	40101a <ethernet_phy_auto_negotiate+0x1da>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  40100c:	2300      	movs	r3, #0
  40100e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  401012:	2301      	movs	r3, #1
  401014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  401018:	e01a      	b.n	401050 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_HDX) {
  40101a:	68fa      	ldr	r2, [r7, #12]
  40101c:	697b      	ldr	r3, [r7, #20]
  40101e:	4013      	ands	r3, r2
  401020:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401024:	2b00      	cmp	r3, #0
  401026:	d006      	beq.n	401036 <ethernet_phy_auto_negotiate+0x1f6>
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
  401028:	2301      	movs	r3, #1
  40102a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  40102e:	2300      	movs	r3, #0
  401030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  401034:	e00c      	b.n	401050 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_HDX) {
  401036:	68fa      	ldr	r2, [r7, #12]
  401038:	697b      	ldr	r3, [r7, #20]
  40103a:	4013      	ands	r3, r2
  40103c:	f003 0320 	and.w	r3, r3, #32
  401040:	2b00      	cmp	r3, #0
  401042:	d005      	beq.n	401050 <ethernet_phy_auto_negotiate+0x210>
		/* Set MII for 10BaseT and half Duplex */
		uc_speed = false;
  401044:	2300      	movs	r3, #0
  401046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  40104a:	2300      	movs	r3, #0
  40104c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	gmac_set_speed(p_gmac, uc_speed);
  401050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401054:	4619      	mov	r1, r3
  401056:	6878      	ldr	r0, [r7, #4]
  401058:	4b12      	ldr	r3, [pc, #72]	; (4010a4 <ethernet_phy_auto_negotiate+0x264>)
  40105a:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  40105c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  401060:	4619      	mov	r1, r3
  401062:	6878      	ldr	r0, [r7, #4]
  401064:	4b10      	ldr	r3, [pc, #64]	; (4010a8 <ethernet_phy_auto_negotiate+0x268>)
  401066:	4798      	blx	r3

	/* Select Media Independent Interface type */
	gmac_select_mii_mode(p_gmac, ETH_PHY_MODE);
  401068:	2101      	movs	r1, #1
  40106a:	6878      	ldr	r0, [r7, #4]
  40106c:	4b0f      	ldr	r3, [pc, #60]	; (4010ac <ethernet_phy_auto_negotiate+0x26c>)
  40106e:	4798      	blx	r3

	gmac_enable_transmit(GMAC, true);
  401070:	2101      	movs	r1, #1
  401072:	480f      	ldr	r0, [pc, #60]	; (4010b0 <ethernet_phy_auto_negotiate+0x270>)
  401074:	4b0f      	ldr	r3, [pc, #60]	; (4010b4 <ethernet_phy_auto_negotiate+0x274>)
  401076:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  401078:	2101      	movs	r1, #1
  40107a:	480d      	ldr	r0, [pc, #52]	; (4010b0 <ethernet_phy_auto_negotiate+0x270>)
  40107c:	4b0e      	ldr	r3, [pc, #56]	; (4010b8 <ethernet_phy_auto_negotiate+0x278>)
  40107e:	4798      	blx	r3

	gmac_enable_management(p_gmac, false);
  401080:	2100      	movs	r1, #0
  401082:	6878      	ldr	r0, [r7, #4]
  401084:	4b04      	ldr	r3, [pc, #16]	; (401098 <ethernet_phy_auto_negotiate+0x258>)
  401086:	4798      	blx	r3
	return uc_rc;
  401088:	7efb      	ldrb	r3, [r7, #27]
}
  40108a:	4618      	mov	r0, r3
  40108c:	372c      	adds	r7, #44	; 0x2c
  40108e:	46bd      	mov	sp, r7
  401090:	bd90      	pop	{r4, r7, pc}
  401092:	bf00      	nop
  401094:	000f4240 	.word	0x000f4240
  401098:	00400a21 	.word	0x00400a21
  40109c:	00401231 	.word	0x00401231
  4010a0:	0040128d 	.word	0x0040128d
  4010a4:	00400a59 	.word	0x00400a59
  4010a8:	00400a91 	.word	0x00400a91
  4010ac:	00400b71 	.word	0x00400b71
  4010b0:	40050000 	.word	0x40050000
  4010b4:	004009e9 	.word	0x004009e9
  4010b8:	004009b1 	.word	0x004009b1

004010bc <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  4010bc:	b590      	push	{r4, r7, lr}
  4010be:	b087      	sub	sp, #28
  4010c0:	af00      	add	r7, sp, #0
  4010c2:	6078      	str	r0, [r7, #4]
  4010c4:	460b      	mov	r3, r1
  4010c6:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_bmcr;
	uint8_t uc_phy_address = uc_phy_addr;
  4010c8:	78fb      	ldrb	r3, [r7, #3]
  4010ca:	74bb      	strb	r3, [r7, #18]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  4010cc:	230a      	movs	r3, #10
  4010ce:	617b      	str	r3, [r7, #20]
	uint8_t uc_rc = GMAC_TIMEOUT;
  4010d0:	2301      	movs	r3, #1
  4010d2:	74fb      	strb	r3, [r7, #19]

	gmac_enable_management(p_gmac, true);
  4010d4:	2101      	movs	r1, #1
  4010d6:	6878      	ldr	r0, [r7, #4]
  4010d8:	4b15      	ldr	r3, [pc, #84]	; (401130 <ethernet_phy_reset+0x74>)
  4010da:	4798      	blx	r3

	ul_bmcr = GMII_RESET;
  4010dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4010e0:	60fb      	str	r3, [r7, #12]
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  4010e2:	68fb      	ldr	r3, [r7, #12]
  4010e4:	7cb9      	ldrb	r1, [r7, #18]
  4010e6:	2200      	movs	r2, #0
  4010e8:	6878      	ldr	r0, [r7, #4]
  4010ea:	4c12      	ldr	r4, [pc, #72]	; (401134 <ethernet_phy_reset+0x78>)
  4010ec:	47a0      	blx	r4

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  4010ee:	f107 030c 	add.w	r3, r7, #12
  4010f2:	7cb9      	ldrb	r1, [r7, #18]
  4010f4:	2200      	movs	r2, #0
  4010f6:	6878      	ldr	r0, [r7, #4]
  4010f8:	4c0f      	ldr	r4, [pc, #60]	; (401138 <ethernet_phy_reset+0x7c>)
  4010fa:	47a0      	blx	r4
		ul_timeout--;
  4010fc:	697b      	ldr	r3, [r7, #20]
  4010fe:	3b01      	subs	r3, #1
  401100:	617b      	str	r3, [r7, #20]
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  401102:	68fb      	ldr	r3, [r7, #12]
  401104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  401108:	2b00      	cmp	r3, #0
  40110a:	d002      	beq.n	401112 <ethernet_phy_reset+0x56>
  40110c:	697b      	ldr	r3, [r7, #20]
  40110e:	2b00      	cmp	r3, #0
  401110:	d1ed      	bne.n	4010ee <ethernet_phy_reset+0x32>

	gmac_enable_management(p_gmac, false);
  401112:	2100      	movs	r1, #0
  401114:	6878      	ldr	r0, [r7, #4]
  401116:	4b06      	ldr	r3, [pc, #24]	; (401130 <ethernet_phy_reset+0x74>)
  401118:	4798      	blx	r3

	if (ul_timeout) {
  40111a:	697b      	ldr	r3, [r7, #20]
  40111c:	2b00      	cmp	r3, #0
  40111e:	d001      	beq.n	401124 <ethernet_phy_reset+0x68>
		uc_rc = GMAC_OK;
  401120:	2300      	movs	r3, #0
  401122:	74fb      	strb	r3, [r7, #19]
	}

	return (uc_rc);
  401124:	7cfb      	ldrb	r3, [r7, #19]
}
  401126:	4618      	mov	r0, r3
  401128:	371c      	adds	r7, #28
  40112a:	46bd      	mov	sp, r7
  40112c:	bd90      	pop	{r4, r7, pc}
  40112e:	bf00      	nop
  401130:	00400a21 	.word	0x00400a21
  401134:	0040128d 	.word	0x0040128d
  401138:	00401231 	.word	0x00401231

0040113c <gmac_is_phy_idle>:
{
  40113c:	b480      	push	{r7}
  40113e:	b083      	sub	sp, #12
  401140:	af00      	add	r7, sp, #0
  401142:	6078      	str	r0, [r7, #4]
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401144:	687b      	ldr	r3, [r7, #4]
  401146:	689b      	ldr	r3, [r3, #8]
  401148:	f003 0304 	and.w	r3, r3, #4
  40114c:	2b00      	cmp	r3, #0
  40114e:	bf14      	ite	ne
  401150:	2301      	movne	r3, #1
  401152:	2300      	moveq	r3, #0
  401154:	b2db      	uxtb	r3, r3
}
  401156:	4618      	mov	r0, r3
  401158:	370c      	adds	r7, #12
  40115a:	46bd      	mov	sp, r7
  40115c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401160:	4770      	bx	lr
	...

00401164 <gmac_maintain_phy>:
{
  401164:	b480      	push	{r7}
  401166:	b083      	sub	sp, #12
  401168:	af00      	add	r7, sp, #0
  40116a:	6078      	str	r0, [r7, #4]
  40116c:	4608      	mov	r0, r1
  40116e:	4611      	mov	r1, r2
  401170:	461a      	mov	r2, r3
  401172:	4603      	mov	r3, r0
  401174:	70fb      	strb	r3, [r7, #3]
  401176:	460b      	mov	r3, r1
  401178:	70bb      	strb	r3, [r7, #2]
  40117a:	4613      	mov	r3, r2
  40117c:	707b      	strb	r3, [r7, #1]
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40117e:	bf00      	nop
  401180:	687b      	ldr	r3, [r7, #4]
  401182:	689b      	ldr	r3, [r3, #8]
  401184:	f003 0304 	and.w	r3, r3, #4
  401188:	2b00      	cmp	r3, #0
  40118a:	d0f9      	beq.n	401180 <gmac_maintain_phy+0x1c>
			| GMAC_MAN_PHYA(uc_phy_addr)
  40118c:	78fb      	ldrb	r3, [r7, #3]
  40118e:	05db      	lsls	r3, r3, #23
  401190:	f003 6278 	and.w	r2, r3, #260046848	; 0xf800000
			| GMAC_MAN_REGA(uc_reg_addr)
  401194:	78bb      	ldrb	r3, [r7, #2]
  401196:	049b      	lsls	r3, r3, #18
  401198:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
  40119c:	431a      	orrs	r2, r3
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
  40119e:	787b      	ldrb	r3, [r7, #1]
  4011a0:	2b00      	cmp	r3, #0
  4011a2:	d002      	beq.n	4011aa <gmac_maintain_phy+0x46>
  4011a4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  4011a8:	e001      	b.n	4011ae <gmac_maintain_phy+0x4a>
  4011aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4011ae:	431a      	orrs	r2, r3
			| GMAC_MAN_DATA(us_data);
  4011b0:	8a3b      	ldrh	r3, [r7, #16]
  4011b2:	431a      	orrs	r2, r3
  4011b4:	4b04      	ldr	r3, [pc, #16]	; (4011c8 <gmac_maintain_phy+0x64>)
  4011b6:	4313      	orrs	r3, r2
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  4011b8:	687a      	ldr	r2, [r7, #4]
  4011ba:	6353      	str	r3, [r2, #52]	; 0x34
}
  4011bc:	bf00      	nop
  4011be:	370c      	adds	r7, #12
  4011c0:	46bd      	mov	sp, r7
  4011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011c6:	4770      	bx	lr
  4011c8:	40020000 	.word	0x40020000

004011cc <gmac_get_phy_data>:
{
  4011cc:	b480      	push	{r7}
  4011ce:	b083      	sub	sp, #12
  4011d0:	af00      	add	r7, sp, #0
  4011d2:	6078      	str	r0, [r7, #4]
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  4011d4:	bf00      	nop
  4011d6:	687b      	ldr	r3, [r7, #4]
  4011d8:	689b      	ldr	r3, [r3, #8]
  4011da:	f003 0304 	and.w	r3, r3, #4
  4011de:	2b00      	cmp	r3, #0
  4011e0:	d0f9      	beq.n	4011d6 <gmac_get_phy_data+0xa>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  4011e2:	687b      	ldr	r3, [r7, #4]
  4011e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4011e6:	b29b      	uxth	r3, r3
}
  4011e8:	4618      	mov	r0, r3
  4011ea:	370c      	adds	r7, #12
  4011ec:	46bd      	mov	sp, r7
  4011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  4011f2:	4770      	bx	lr

004011f4 <gmac_phy_wait>:
 * \param ul_retry The retry times.
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
  4011f4:	b580      	push	{r7, lr}
  4011f6:	b084      	sub	sp, #16
  4011f8:	af00      	add	r7, sp, #0
  4011fa:	6078      	str	r0, [r7, #4]
  4011fc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_retry_count = 0;
  4011fe:	2300      	movs	r3, #0
  401200:	60fb      	str	r3, [r7, #12]

	while (!gmac_is_phy_idle(p_gmac)) {
  401202:	e008      	b.n	401216 <gmac_phy_wait+0x22>
		ul_retry_count++;
  401204:	68fb      	ldr	r3, [r7, #12]
  401206:	3301      	adds	r3, #1
  401208:	60fb      	str	r3, [r7, #12]

		if (ul_retry_count >= ul_retry) {
  40120a:	68fa      	ldr	r2, [r7, #12]
  40120c:	683b      	ldr	r3, [r7, #0]
  40120e:	429a      	cmp	r2, r3
  401210:	d301      	bcc.n	401216 <gmac_phy_wait+0x22>
			return GMAC_TIMEOUT;
  401212:	2301      	movs	r3, #1
  401214:	e006      	b.n	401224 <gmac_phy_wait+0x30>
	while (!gmac_is_phy_idle(p_gmac)) {
  401216:	6878      	ldr	r0, [r7, #4]
  401218:	4b04      	ldr	r3, [pc, #16]	; (40122c <gmac_phy_wait+0x38>)
  40121a:	4798      	blx	r3
  40121c:	4603      	mov	r3, r0
  40121e:	2b00      	cmp	r3, #0
  401220:	d0f0      	beq.n	401204 <gmac_phy_wait+0x10>
		}
	}
	return GMAC_OK;
  401222:	2300      	movs	r3, #0
}
  401224:	4618      	mov	r0, r3
  401226:	3710      	adds	r7, #16
  401228:	46bd      	mov	sp, r7
  40122a:	bd80      	pop	{r7, pc}
  40122c:	0040113d 	.word	0x0040113d

00401230 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  401230:	b590      	push	{r4, r7, lr}
  401232:	b087      	sub	sp, #28
  401234:	af02      	add	r7, sp, #8
  401236:	60f8      	str	r0, [r7, #12]
  401238:	607b      	str	r3, [r7, #4]
  40123a:	460b      	mov	r3, r1
  40123c:	72fb      	strb	r3, [r7, #11]
  40123e:	4613      	mov	r3, r2
  401240:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);
  401242:	7aba      	ldrb	r2, [r7, #10]
  401244:	7af9      	ldrb	r1, [r7, #11]
  401246:	2300      	movs	r3, #0
  401248:	9300      	str	r3, [sp, #0]
  40124a:	2301      	movs	r3, #1
  40124c:	68f8      	ldr	r0, [r7, #12]
  40124e:	4c0b      	ldr	r4, [pc, #44]	; (40127c <gmac_phy_read+0x4c>)
  401250:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  401252:	490b      	ldr	r1, [pc, #44]	; (401280 <gmac_phy_read+0x50>)
  401254:	68f8      	ldr	r0, [r7, #12]
  401256:	4b0b      	ldr	r3, [pc, #44]	; (401284 <gmac_phy_read+0x54>)
  401258:	4798      	blx	r3
  40125a:	4603      	mov	r3, r0
  40125c:	2b01      	cmp	r3, #1
  40125e:	d101      	bne.n	401264 <gmac_phy_read+0x34>
		return GMAC_TIMEOUT;
  401260:	2301      	movs	r3, #1
  401262:	e007      	b.n	401274 <gmac_phy_read+0x44>
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401264:	68f8      	ldr	r0, [r7, #12]
  401266:	4b08      	ldr	r3, [pc, #32]	; (401288 <gmac_phy_read+0x58>)
  401268:	4798      	blx	r3
  40126a:	4603      	mov	r3, r0
  40126c:	461a      	mov	r2, r3
  40126e:	687b      	ldr	r3, [r7, #4]
  401270:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401272:	2300      	movs	r3, #0
}
  401274:	4618      	mov	r0, r3
  401276:	3714      	adds	r7, #20
  401278:	46bd      	mov	sp, r7
  40127a:	bd90      	pop	{r4, r7, pc}
  40127c:	00401165 	.word	0x00401165
  401280:	000f4240 	.word	0x000f4240
  401284:	004011f5 	.word	0x004011f5
  401288:	004011cd 	.word	0x004011cd

0040128c <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  40128c:	b590      	push	{r4, r7, lr}
  40128e:	b087      	sub	sp, #28
  401290:	af02      	add	r7, sp, #8
  401292:	60f8      	str	r0, [r7, #12]
  401294:	607b      	str	r3, [r7, #4]
  401296:	460b      	mov	r3, r1
  401298:	72fb      	strb	r3, [r7, #11]
  40129a:	4613      	mov	r3, r2
  40129c:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 0, ul_value);
  40129e:	687b      	ldr	r3, [r7, #4]
  4012a0:	b29b      	uxth	r3, r3
  4012a2:	7aba      	ldrb	r2, [r7, #10]
  4012a4:	7af9      	ldrb	r1, [r7, #11]
  4012a6:	9300      	str	r3, [sp, #0]
  4012a8:	2300      	movs	r3, #0
  4012aa:	68f8      	ldr	r0, [r7, #12]
  4012ac:	4c07      	ldr	r4, [pc, #28]	; (4012cc <gmac_phy_write+0x40>)
  4012ae:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  4012b0:	4907      	ldr	r1, [pc, #28]	; (4012d0 <gmac_phy_write+0x44>)
  4012b2:	68f8      	ldr	r0, [r7, #12]
  4012b4:	4b07      	ldr	r3, [pc, #28]	; (4012d4 <gmac_phy_write+0x48>)
  4012b6:	4798      	blx	r3
  4012b8:	4603      	mov	r3, r0
  4012ba:	2b01      	cmp	r3, #1
  4012bc:	d101      	bne.n	4012c2 <gmac_phy_write+0x36>
		return GMAC_TIMEOUT;
  4012be:	2301      	movs	r3, #1
  4012c0:	e000      	b.n	4012c4 <gmac_phy_write+0x38>
	}
	return GMAC_OK;
  4012c2:	2300      	movs	r3, #0
}
  4012c4:	4618      	mov	r0, r3
  4012c6:	3714      	adds	r7, #20
  4012c8:	46bd      	mov	sp, r7
  4012ca:	bd90      	pop	{r4, r7, pc}
  4012cc:	00401165 	.word	0x00401165
  4012d0:	000f4240 	.word	0x000f4240
  4012d4:	004011f5 	.word	0x004011f5

004012d8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4012d8:	b480      	push	{r7}
  4012da:	b085      	sub	sp, #20
  4012dc:	af00      	add	r7, sp, #0
  4012de:	60f8      	str	r0, [r7, #12]
  4012e0:	60b9      	str	r1, [r7, #8]
  4012e2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4012e4:	687b      	ldr	r3, [r7, #4]
  4012e6:	2b00      	cmp	r3, #0
  4012e8:	d003      	beq.n	4012f2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4012ea:	68fb      	ldr	r3, [r7, #12]
  4012ec:	68ba      	ldr	r2, [r7, #8]
  4012ee:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4012f0:	e002      	b.n	4012f8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4012f2:	68fb      	ldr	r3, [r7, #12]
  4012f4:	68ba      	ldr	r2, [r7, #8]
  4012f6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4012f8:	bf00      	nop
  4012fa:	3714      	adds	r7, #20
  4012fc:	46bd      	mov	sp, r7
  4012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401302:	4770      	bx	lr

00401304 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401304:	b480      	push	{r7}
  401306:	b087      	sub	sp, #28
  401308:	af00      	add	r7, sp, #0
  40130a:	60f8      	str	r0, [r7, #12]
  40130c:	60b9      	str	r1, [r7, #8]
  40130e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401310:	68fb      	ldr	r3, [r7, #12]
  401312:	687a      	ldr	r2, [r7, #4]
  401314:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401316:	68bb      	ldr	r3, [r7, #8]
  401318:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40131c:	d04a      	beq.n	4013b4 <pio_set_peripheral+0xb0>
  40131e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401322:	d808      	bhi.n	401336 <pio_set_peripheral+0x32>
  401324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401328:	d016      	beq.n	401358 <pio_set_peripheral+0x54>
  40132a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40132e:	d02c      	beq.n	40138a <pio_set_peripheral+0x86>
  401330:	2b00      	cmp	r3, #0
  401332:	d069      	beq.n	401408 <pio_set_peripheral+0x104>
  401334:	e064      	b.n	401400 <pio_set_peripheral+0xfc>
  401336:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40133a:	d065      	beq.n	401408 <pio_set_peripheral+0x104>
  40133c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401340:	d803      	bhi.n	40134a <pio_set_peripheral+0x46>
  401342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401346:	d04a      	beq.n	4013de <pio_set_peripheral+0xda>
  401348:	e05a      	b.n	401400 <pio_set_peripheral+0xfc>
  40134a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40134e:	d05b      	beq.n	401408 <pio_set_peripheral+0x104>
  401350:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401354:	d058      	beq.n	401408 <pio_set_peripheral+0x104>
  401356:	e053      	b.n	401400 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401358:	68fb      	ldr	r3, [r7, #12]
  40135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40135c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40135e:	68fb      	ldr	r3, [r7, #12]
  401360:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401362:	687b      	ldr	r3, [r7, #4]
  401364:	43d9      	mvns	r1, r3
  401366:	697b      	ldr	r3, [r7, #20]
  401368:	400b      	ands	r3, r1
  40136a:	401a      	ands	r2, r3
  40136c:	68fb      	ldr	r3, [r7, #12]
  40136e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401370:	68fb      	ldr	r3, [r7, #12]
  401372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401374:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401376:	68fb      	ldr	r3, [r7, #12]
  401378:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40137a:	687b      	ldr	r3, [r7, #4]
  40137c:	43d9      	mvns	r1, r3
  40137e:	697b      	ldr	r3, [r7, #20]
  401380:	400b      	ands	r3, r1
  401382:	401a      	ands	r2, r3
  401384:	68fb      	ldr	r3, [r7, #12]
  401386:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401388:	e03a      	b.n	401400 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40138a:	68fb      	ldr	r3, [r7, #12]
  40138c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40138e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401390:	687a      	ldr	r2, [r7, #4]
  401392:	697b      	ldr	r3, [r7, #20]
  401394:	431a      	orrs	r2, r3
  401396:	68fb      	ldr	r3, [r7, #12]
  401398:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40139a:	68fb      	ldr	r3, [r7, #12]
  40139c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40139e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4013a0:	68fb      	ldr	r3, [r7, #12]
  4013a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	43d9      	mvns	r1, r3
  4013a8:	697b      	ldr	r3, [r7, #20]
  4013aa:	400b      	ands	r3, r1
  4013ac:	401a      	ands	r2, r3
  4013ae:	68fb      	ldr	r3, [r7, #12]
  4013b0:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013b2:	e025      	b.n	401400 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013b4:	68fb      	ldr	r3, [r7, #12]
  4013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013b8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4013ba:	68fb      	ldr	r3, [r7, #12]
  4013bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4013be:	687b      	ldr	r3, [r7, #4]
  4013c0:	43d9      	mvns	r1, r3
  4013c2:	697b      	ldr	r3, [r7, #20]
  4013c4:	400b      	ands	r3, r1
  4013c6:	401a      	ands	r2, r3
  4013c8:	68fb      	ldr	r3, [r7, #12]
  4013ca:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013cc:	68fb      	ldr	r3, [r7, #12]
  4013ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013d0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013d2:	687a      	ldr	r2, [r7, #4]
  4013d4:	697b      	ldr	r3, [r7, #20]
  4013d6:	431a      	orrs	r2, r3
  4013d8:	68fb      	ldr	r3, [r7, #12]
  4013da:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013dc:	e010      	b.n	401400 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4013de:	68fb      	ldr	r3, [r7, #12]
  4013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4013e2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4013e4:	687a      	ldr	r2, [r7, #4]
  4013e6:	697b      	ldr	r3, [r7, #20]
  4013e8:	431a      	orrs	r2, r3
  4013ea:	68fb      	ldr	r3, [r7, #12]
  4013ec:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4013ee:	68fb      	ldr	r3, [r7, #12]
  4013f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4013f2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4013f4:	687a      	ldr	r2, [r7, #4]
  4013f6:	697b      	ldr	r3, [r7, #20]
  4013f8:	431a      	orrs	r2, r3
  4013fa:	68fb      	ldr	r3, [r7, #12]
  4013fc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4013fe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401400:	68fb      	ldr	r3, [r7, #12]
  401402:	687a      	ldr	r2, [r7, #4]
  401404:	605a      	str	r2, [r3, #4]
  401406:	e000      	b.n	40140a <pio_set_peripheral+0x106>
		return;
  401408:	bf00      	nop
}
  40140a:	371c      	adds	r7, #28
  40140c:	46bd      	mov	sp, r7
  40140e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401412:	4770      	bx	lr

00401414 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401414:	b580      	push	{r7, lr}
  401416:	b084      	sub	sp, #16
  401418:	af00      	add	r7, sp, #0
  40141a:	60f8      	str	r0, [r7, #12]
  40141c:	60b9      	str	r1, [r7, #8]
  40141e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401420:	68b9      	ldr	r1, [r7, #8]
  401422:	68f8      	ldr	r0, [r7, #12]
  401424:	4b19      	ldr	r3, [pc, #100]	; (40148c <pio_set_input+0x78>)
  401426:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401428:	687b      	ldr	r3, [r7, #4]
  40142a:	f003 0301 	and.w	r3, r3, #1
  40142e:	461a      	mov	r2, r3
  401430:	68b9      	ldr	r1, [r7, #8]
  401432:	68f8      	ldr	r0, [r7, #12]
  401434:	4b16      	ldr	r3, [pc, #88]	; (401490 <pio_set_input+0x7c>)
  401436:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401438:	687b      	ldr	r3, [r7, #4]
  40143a:	f003 030a 	and.w	r3, r3, #10
  40143e:	2b00      	cmp	r3, #0
  401440:	d003      	beq.n	40144a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401442:	68fb      	ldr	r3, [r7, #12]
  401444:	68ba      	ldr	r2, [r7, #8]
  401446:	621a      	str	r2, [r3, #32]
  401448:	e002      	b.n	401450 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40144a:	68fb      	ldr	r3, [r7, #12]
  40144c:	68ba      	ldr	r2, [r7, #8]
  40144e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401450:	687b      	ldr	r3, [r7, #4]
  401452:	f003 0302 	and.w	r3, r3, #2
  401456:	2b00      	cmp	r3, #0
  401458:	d004      	beq.n	401464 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40145a:	68fb      	ldr	r3, [r7, #12]
  40145c:	68ba      	ldr	r2, [r7, #8]
  40145e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401462:	e008      	b.n	401476 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401464:	687b      	ldr	r3, [r7, #4]
  401466:	f003 0308 	and.w	r3, r3, #8
  40146a:	2b00      	cmp	r3, #0
  40146c:	d003      	beq.n	401476 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	68ba      	ldr	r2, [r7, #8]
  401472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401476:	68fb      	ldr	r3, [r7, #12]
  401478:	68ba      	ldr	r2, [r7, #8]
  40147a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40147c:	68fb      	ldr	r3, [r7, #12]
  40147e:	68ba      	ldr	r2, [r7, #8]
  401480:	601a      	str	r2, [r3, #0]
}
  401482:	bf00      	nop
  401484:	3710      	adds	r7, #16
  401486:	46bd      	mov	sp, r7
  401488:	bd80      	pop	{r7, pc}
  40148a:	bf00      	nop
  40148c:	004014f9 	.word	0x004014f9
  401490:	004012d9 	.word	0x004012d9

00401494 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401494:	b580      	push	{r7, lr}
  401496:	b084      	sub	sp, #16
  401498:	af00      	add	r7, sp, #0
  40149a:	60f8      	str	r0, [r7, #12]
  40149c:	60b9      	str	r1, [r7, #8]
  40149e:	607a      	str	r2, [r7, #4]
  4014a0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  4014a2:	68b9      	ldr	r1, [r7, #8]
  4014a4:	68f8      	ldr	r0, [r7, #12]
  4014a6:	4b12      	ldr	r3, [pc, #72]	; (4014f0 <pio_set_output+0x5c>)
  4014a8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4014aa:	69ba      	ldr	r2, [r7, #24]
  4014ac:	68b9      	ldr	r1, [r7, #8]
  4014ae:	68f8      	ldr	r0, [r7, #12]
  4014b0:	4b10      	ldr	r3, [pc, #64]	; (4014f4 <pio_set_output+0x60>)
  4014b2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4014b4:	683b      	ldr	r3, [r7, #0]
  4014b6:	2b00      	cmp	r3, #0
  4014b8:	d003      	beq.n	4014c2 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4014ba:	68fb      	ldr	r3, [r7, #12]
  4014bc:	68ba      	ldr	r2, [r7, #8]
  4014be:	651a      	str	r2, [r3, #80]	; 0x50
  4014c0:	e002      	b.n	4014c8 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4014c2:	68fb      	ldr	r3, [r7, #12]
  4014c4:	68ba      	ldr	r2, [r7, #8]
  4014c6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4014c8:	687b      	ldr	r3, [r7, #4]
  4014ca:	2b00      	cmp	r3, #0
  4014cc:	d003      	beq.n	4014d6 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4014ce:	68fb      	ldr	r3, [r7, #12]
  4014d0:	68ba      	ldr	r2, [r7, #8]
  4014d2:	631a      	str	r2, [r3, #48]	; 0x30
  4014d4:	e002      	b.n	4014dc <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4014d6:	68fb      	ldr	r3, [r7, #12]
  4014d8:	68ba      	ldr	r2, [r7, #8]
  4014da:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4014dc:	68fb      	ldr	r3, [r7, #12]
  4014de:	68ba      	ldr	r2, [r7, #8]
  4014e0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4014e2:	68fb      	ldr	r3, [r7, #12]
  4014e4:	68ba      	ldr	r2, [r7, #8]
  4014e6:	601a      	str	r2, [r3, #0]
}
  4014e8:	bf00      	nop
  4014ea:	3710      	adds	r7, #16
  4014ec:	46bd      	mov	sp, r7
  4014ee:	bd80      	pop	{r7, pc}
  4014f0:	004014f9 	.word	0x004014f9
  4014f4:	004012d9 	.word	0x004012d9

004014f8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4014f8:	b480      	push	{r7}
  4014fa:	b083      	sub	sp, #12
  4014fc:	af00      	add	r7, sp, #0
  4014fe:	6078      	str	r0, [r7, #4]
  401500:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401502:	687b      	ldr	r3, [r7, #4]
  401504:	683a      	ldr	r2, [r7, #0]
  401506:	645a      	str	r2, [r3, #68]	; 0x44
}
  401508:	bf00      	nop
  40150a:	370c      	adds	r7, #12
  40150c:	46bd      	mov	sp, r7
  40150e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401512:	4770      	bx	lr

00401514 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401514:	b480      	push	{r7}
  401516:	b083      	sub	sp, #12
  401518:	af00      	add	r7, sp, #0
  40151a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40151c:	687b      	ldr	r3, [r7, #4]
  40151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401520:	4618      	mov	r0, r3
  401522:	370c      	adds	r7, #12
  401524:	46bd      	mov	sp, r7
  401526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40152a:	4770      	bx	lr

0040152c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40152c:	b480      	push	{r7}
  40152e:	b083      	sub	sp, #12
  401530:	af00      	add	r7, sp, #0
  401532:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401534:	687b      	ldr	r3, [r7, #4]
  401536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401538:	4618      	mov	r0, r3
  40153a:	370c      	adds	r7, #12
  40153c:	46bd      	mov	sp, r7
  40153e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401542:	4770      	bx	lr

00401544 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401544:	b580      	push	{r7, lr}
  401546:	b084      	sub	sp, #16
  401548:	af00      	add	r7, sp, #0
  40154a:	6078      	str	r0, [r7, #4]
  40154c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40154e:	6878      	ldr	r0, [r7, #4]
  401550:	4b26      	ldr	r3, [pc, #152]	; (4015ec <pio_handler_process+0xa8>)
  401552:	4798      	blx	r3
  401554:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401556:	6878      	ldr	r0, [r7, #4]
  401558:	4b25      	ldr	r3, [pc, #148]	; (4015f0 <pio_handler_process+0xac>)
  40155a:	4798      	blx	r3
  40155c:	4602      	mov	r2, r0
  40155e:	68fb      	ldr	r3, [r7, #12]
  401560:	4013      	ands	r3, r2
  401562:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401564:	68fb      	ldr	r3, [r7, #12]
  401566:	2b00      	cmp	r3, #0
  401568:	d03c      	beq.n	4015e4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40156a:	2300      	movs	r3, #0
  40156c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40156e:	e034      	b.n	4015da <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401570:	4a20      	ldr	r2, [pc, #128]	; (4015f4 <pio_handler_process+0xb0>)
  401572:	68bb      	ldr	r3, [r7, #8]
  401574:	011b      	lsls	r3, r3, #4
  401576:	4413      	add	r3, r2
  401578:	681a      	ldr	r2, [r3, #0]
  40157a:	683b      	ldr	r3, [r7, #0]
  40157c:	429a      	cmp	r2, r3
  40157e:	d126      	bne.n	4015ce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401580:	4a1c      	ldr	r2, [pc, #112]	; (4015f4 <pio_handler_process+0xb0>)
  401582:	68bb      	ldr	r3, [r7, #8]
  401584:	011b      	lsls	r3, r3, #4
  401586:	4413      	add	r3, r2
  401588:	3304      	adds	r3, #4
  40158a:	681a      	ldr	r2, [r3, #0]
  40158c:	68fb      	ldr	r3, [r7, #12]
  40158e:	4013      	ands	r3, r2
  401590:	2b00      	cmp	r3, #0
  401592:	d01c      	beq.n	4015ce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401594:	4a17      	ldr	r2, [pc, #92]	; (4015f4 <pio_handler_process+0xb0>)
  401596:	68bb      	ldr	r3, [r7, #8]
  401598:	011b      	lsls	r3, r3, #4
  40159a:	4413      	add	r3, r2
  40159c:	330c      	adds	r3, #12
  40159e:	681b      	ldr	r3, [r3, #0]
  4015a0:	4914      	ldr	r1, [pc, #80]	; (4015f4 <pio_handler_process+0xb0>)
  4015a2:	68ba      	ldr	r2, [r7, #8]
  4015a4:	0112      	lsls	r2, r2, #4
  4015a6:	440a      	add	r2, r1
  4015a8:	6810      	ldr	r0, [r2, #0]
  4015aa:	4912      	ldr	r1, [pc, #72]	; (4015f4 <pio_handler_process+0xb0>)
  4015ac:	68ba      	ldr	r2, [r7, #8]
  4015ae:	0112      	lsls	r2, r2, #4
  4015b0:	440a      	add	r2, r1
  4015b2:	3204      	adds	r2, #4
  4015b4:	6812      	ldr	r2, [r2, #0]
  4015b6:	4611      	mov	r1, r2
  4015b8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4015ba:	4a0e      	ldr	r2, [pc, #56]	; (4015f4 <pio_handler_process+0xb0>)
  4015bc:	68bb      	ldr	r3, [r7, #8]
  4015be:	011b      	lsls	r3, r3, #4
  4015c0:	4413      	add	r3, r2
  4015c2:	3304      	adds	r3, #4
  4015c4:	681b      	ldr	r3, [r3, #0]
  4015c6:	43db      	mvns	r3, r3
  4015c8:	68fa      	ldr	r2, [r7, #12]
  4015ca:	4013      	ands	r3, r2
  4015cc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4015ce:	68bb      	ldr	r3, [r7, #8]
  4015d0:	3301      	adds	r3, #1
  4015d2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015d4:	68bb      	ldr	r3, [r7, #8]
  4015d6:	2b06      	cmp	r3, #6
  4015d8:	d803      	bhi.n	4015e2 <pio_handler_process+0x9e>
		while (status != 0) {
  4015da:	68fb      	ldr	r3, [r7, #12]
  4015dc:	2b00      	cmp	r3, #0
  4015de:	d1c7      	bne.n	401570 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4015e0:	e000      	b.n	4015e4 <pio_handler_process+0xa0>
				break;
  4015e2:	bf00      	nop
}
  4015e4:	bf00      	nop
  4015e6:	3710      	adds	r7, #16
  4015e8:	46bd      	mov	sp, r7
  4015ea:	bd80      	pop	{r7, pc}
  4015ec:	00401515 	.word	0x00401515
  4015f0:	0040152d 	.word	0x0040152d
  4015f4:	204004bc 	.word	0x204004bc

004015f8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4015f8:	b580      	push	{r7, lr}
  4015fa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4015fc:	210a      	movs	r1, #10
  4015fe:	4802      	ldr	r0, [pc, #8]	; (401608 <PIOA_Handler+0x10>)
  401600:	4b02      	ldr	r3, [pc, #8]	; (40160c <PIOA_Handler+0x14>)
  401602:	4798      	blx	r3
}
  401604:	bf00      	nop
  401606:	bd80      	pop	{r7, pc}
  401608:	400e0e00 	.word	0x400e0e00
  40160c:	00401545 	.word	0x00401545

00401610 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401610:	b580      	push	{r7, lr}
  401612:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401614:	210b      	movs	r1, #11
  401616:	4802      	ldr	r0, [pc, #8]	; (401620 <PIOB_Handler+0x10>)
  401618:	4b02      	ldr	r3, [pc, #8]	; (401624 <PIOB_Handler+0x14>)
  40161a:	4798      	blx	r3
}
  40161c:	bf00      	nop
  40161e:	bd80      	pop	{r7, pc}
  401620:	400e1000 	.word	0x400e1000
  401624:	00401545 	.word	0x00401545

00401628 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401628:	b580      	push	{r7, lr}
  40162a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40162c:	210c      	movs	r1, #12
  40162e:	4802      	ldr	r0, [pc, #8]	; (401638 <PIOC_Handler+0x10>)
  401630:	4b02      	ldr	r3, [pc, #8]	; (40163c <PIOC_Handler+0x14>)
  401632:	4798      	blx	r3
}
  401634:	bf00      	nop
  401636:	bd80      	pop	{r7, pc}
  401638:	400e1200 	.word	0x400e1200
  40163c:	00401545 	.word	0x00401545

00401640 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401640:	b580      	push	{r7, lr}
  401642:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401644:	2110      	movs	r1, #16
  401646:	4802      	ldr	r0, [pc, #8]	; (401650 <PIOD_Handler+0x10>)
  401648:	4b02      	ldr	r3, [pc, #8]	; (401654 <PIOD_Handler+0x14>)
  40164a:	4798      	blx	r3
}
  40164c:	bf00      	nop
  40164e:	bd80      	pop	{r7, pc}
  401650:	400e1400 	.word	0x400e1400
  401654:	00401545 	.word	0x00401545

00401658 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401658:	b580      	push	{r7, lr}
  40165a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40165c:	2111      	movs	r1, #17
  40165e:	4802      	ldr	r0, [pc, #8]	; (401668 <PIOE_Handler+0x10>)
  401660:	4b02      	ldr	r3, [pc, #8]	; (40166c <PIOE_Handler+0x14>)
  401662:	4798      	blx	r3
}
  401664:	bf00      	nop
  401666:	bd80      	pop	{r7, pc}
  401668:	400e1600 	.word	0x400e1600
  40166c:	00401545 	.word	0x00401545

00401670 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401670:	b480      	push	{r7}
  401672:	b083      	sub	sp, #12
  401674:	af00      	add	r7, sp, #0
  401676:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401678:	687b      	ldr	r3, [r7, #4]
  40167a:	3b01      	subs	r3, #1
  40167c:	2b03      	cmp	r3, #3
  40167e:	d81a      	bhi.n	4016b6 <pmc_mck_set_division+0x46>
  401680:	a201      	add	r2, pc, #4	; (adr r2, 401688 <pmc_mck_set_division+0x18>)
  401682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401686:	bf00      	nop
  401688:	00401699 	.word	0x00401699
  40168c:	0040169f 	.word	0x0040169f
  401690:	004016a7 	.word	0x004016a7
  401694:	004016af 	.word	0x004016af
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401698:	2300      	movs	r3, #0
  40169a:	607b      	str	r3, [r7, #4]
			break;
  40169c:	e00e      	b.n	4016bc <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40169e:	f44f 7380 	mov.w	r3, #256	; 0x100
  4016a2:	607b      	str	r3, [r7, #4]
			break;
  4016a4:	e00a      	b.n	4016bc <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4016a6:	f44f 7340 	mov.w	r3, #768	; 0x300
  4016aa:	607b      	str	r3, [r7, #4]
			break;
  4016ac:	e006      	b.n	4016bc <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4016ae:	f44f 7300 	mov.w	r3, #512	; 0x200
  4016b2:	607b      	str	r3, [r7, #4]
			break;
  4016b4:	e002      	b.n	4016bc <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4016b6:	2300      	movs	r3, #0
  4016b8:	607b      	str	r3, [r7, #4]
			break;
  4016ba:	bf00      	nop
	}
	PMC->PMC_MCKR =
  4016bc:	490a      	ldr	r1, [pc, #40]	; (4016e8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4016be:	4b0a      	ldr	r3, [pc, #40]	; (4016e8 <pmc_mck_set_division+0x78>)
  4016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  4016c6:	687b      	ldr	r3, [r7, #4]
  4016c8:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  4016ca:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4016cc:	bf00      	nop
  4016ce:	4b06      	ldr	r3, [pc, #24]	; (4016e8 <pmc_mck_set_division+0x78>)
  4016d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016d2:	f003 0308 	and.w	r3, r3, #8
  4016d6:	2b00      	cmp	r3, #0
  4016d8:	d0f9      	beq.n	4016ce <pmc_mck_set_division+0x5e>
}
  4016da:	bf00      	nop
  4016dc:	370c      	adds	r7, #12
  4016de:	46bd      	mov	sp, r7
  4016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016e4:	4770      	bx	lr
  4016e6:	bf00      	nop
  4016e8:	400e0600 	.word	0x400e0600

004016ec <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4016ec:	b480      	push	{r7}
  4016ee:	b085      	sub	sp, #20
  4016f0:	af00      	add	r7, sp, #0
  4016f2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4016f4:	491d      	ldr	r1, [pc, #116]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  4016f6:	4b1d      	ldr	r3, [pc, #116]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  4016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4016fe:	687b      	ldr	r3, [r7, #4]
  401700:	4313      	orrs	r3, r2
  401702:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401708:	60fb      	str	r3, [r7, #12]
  40170a:	e007      	b.n	40171c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40170c:	68fb      	ldr	r3, [r7, #12]
  40170e:	2b00      	cmp	r3, #0
  401710:	d101      	bne.n	401716 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401712:	2301      	movs	r3, #1
  401714:	e023      	b.n	40175e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  401716:	68fb      	ldr	r3, [r7, #12]
  401718:	3b01      	subs	r3, #1
  40171a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40171c:	4b13      	ldr	r3, [pc, #76]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  40171e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401720:	f003 0308 	and.w	r3, r3, #8
  401724:	2b00      	cmp	r3, #0
  401726:	d0f1      	beq.n	40170c <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401728:	4a10      	ldr	r2, [pc, #64]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  40172a:	4b10      	ldr	r3, [pc, #64]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  40172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40172e:	f023 0303 	bic.w	r3, r3, #3
  401732:	f043 0302 	orr.w	r3, r3, #2
  401736:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40173c:	60fb      	str	r3, [r7, #12]
  40173e:	e007      	b.n	401750 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401740:	68fb      	ldr	r3, [r7, #12]
  401742:	2b00      	cmp	r3, #0
  401744:	d101      	bne.n	40174a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401746:	2301      	movs	r3, #1
  401748:	e009      	b.n	40175e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40174a:	68fb      	ldr	r3, [r7, #12]
  40174c:	3b01      	subs	r3, #1
  40174e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401750:	4b06      	ldr	r3, [pc, #24]	; (40176c <pmc_switch_mck_to_pllack+0x80>)
  401752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401754:	f003 0308 	and.w	r3, r3, #8
  401758:	2b00      	cmp	r3, #0
  40175a:	d0f1      	beq.n	401740 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40175c:	2300      	movs	r3, #0
}
  40175e:	4618      	mov	r0, r3
  401760:	3714      	adds	r7, #20
  401762:	46bd      	mov	sp, r7
  401764:	f85d 7b04 	ldr.w	r7, [sp], #4
  401768:	4770      	bx	lr
  40176a:	bf00      	nop
  40176c:	400e0600 	.word	0x400e0600

00401770 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401770:	b480      	push	{r7}
  401772:	b083      	sub	sp, #12
  401774:	af00      	add	r7, sp, #0
  401776:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401778:	687b      	ldr	r3, [r7, #4]
  40177a:	2b01      	cmp	r3, #1
  40177c:	d105      	bne.n	40178a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40177e:	4907      	ldr	r1, [pc, #28]	; (40179c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401780:	4b06      	ldr	r3, [pc, #24]	; (40179c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401782:	689a      	ldr	r2, [r3, #8]
  401784:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <pmc_switch_sclk_to_32kxtal+0x30>)
  401786:	4313      	orrs	r3, r2
  401788:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40178a:	4b04      	ldr	r3, [pc, #16]	; (40179c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40178c:	4a05      	ldr	r2, [pc, #20]	; (4017a4 <pmc_switch_sclk_to_32kxtal+0x34>)
  40178e:	601a      	str	r2, [r3, #0]
}
  401790:	bf00      	nop
  401792:	370c      	adds	r7, #12
  401794:	46bd      	mov	sp, r7
  401796:	f85d 7b04 	ldr.w	r7, [sp], #4
  40179a:	4770      	bx	lr
  40179c:	400e1810 	.word	0x400e1810
  4017a0:	a5100000 	.word	0xa5100000
  4017a4:	a5000008 	.word	0xa5000008

004017a8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4017a8:	b480      	push	{r7}
  4017aa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4017ac:	4b09      	ldr	r3, [pc, #36]	; (4017d4 <pmc_osc_is_ready_32kxtal+0x2c>)
  4017ae:	695b      	ldr	r3, [r3, #20]
  4017b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4017b4:	2b00      	cmp	r3, #0
  4017b6:	d007      	beq.n	4017c8 <pmc_osc_is_ready_32kxtal+0x20>
  4017b8:	4b07      	ldr	r3, [pc, #28]	; (4017d8 <pmc_osc_is_ready_32kxtal+0x30>)
  4017ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4017c0:	2b00      	cmp	r3, #0
  4017c2:	d001      	beq.n	4017c8 <pmc_osc_is_ready_32kxtal+0x20>
  4017c4:	2301      	movs	r3, #1
  4017c6:	e000      	b.n	4017ca <pmc_osc_is_ready_32kxtal+0x22>
  4017c8:	2300      	movs	r3, #0
}
  4017ca:	4618      	mov	r0, r3
  4017cc:	46bd      	mov	sp, r7
  4017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017d2:	4770      	bx	lr
  4017d4:	400e1810 	.word	0x400e1810
  4017d8:	400e0600 	.word	0x400e0600

004017dc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4017dc:	b480      	push	{r7}
  4017de:	b083      	sub	sp, #12
  4017e0:	af00      	add	r7, sp, #0
  4017e2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4017e4:	4915      	ldr	r1, [pc, #84]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  4017e6:	4b15      	ldr	r3, [pc, #84]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  4017e8:	6a1a      	ldr	r2, [r3, #32]
  4017ea:	4b15      	ldr	r3, [pc, #84]	; (401840 <pmc_switch_mainck_to_fastrc+0x64>)
  4017ec:	4313      	orrs	r3, r2
  4017ee:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4017f0:	bf00      	nop
  4017f2:	4b12      	ldr	r3, [pc, #72]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  4017f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4017fa:	2b00      	cmp	r3, #0
  4017fc:	d0f9      	beq.n	4017f2 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4017fe:	490f      	ldr	r1, [pc, #60]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  401800:	4b0e      	ldr	r3, [pc, #56]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  401802:	6a1a      	ldr	r2, [r3, #32]
  401804:	4b0f      	ldr	r3, [pc, #60]	; (401844 <pmc_switch_mainck_to_fastrc+0x68>)
  401806:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401808:	687a      	ldr	r2, [r7, #4]
  40180a:	4313      	orrs	r3, r2
  40180c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401810:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401812:	bf00      	nop
  401814:	4b09      	ldr	r3, [pc, #36]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  401816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40181c:	2b00      	cmp	r3, #0
  40181e:	d0f9      	beq.n	401814 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401820:	4906      	ldr	r1, [pc, #24]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  401822:	4b06      	ldr	r3, [pc, #24]	; (40183c <pmc_switch_mainck_to_fastrc+0x60>)
  401824:	6a1a      	ldr	r2, [r3, #32]
  401826:	4b08      	ldr	r3, [pc, #32]	; (401848 <pmc_switch_mainck_to_fastrc+0x6c>)
  401828:	4013      	ands	r3, r2
  40182a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40182e:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  401830:	bf00      	nop
  401832:	370c      	adds	r7, #12
  401834:	46bd      	mov	sp, r7
  401836:	f85d 7b04 	ldr.w	r7, [sp], #4
  40183a:	4770      	bx	lr
  40183c:	400e0600 	.word	0x400e0600
  401840:	00370008 	.word	0x00370008
  401844:	ffc8ff8f 	.word	0xffc8ff8f
  401848:	fec8ffff 	.word	0xfec8ffff

0040184c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40184c:	b480      	push	{r7}
  40184e:	b083      	sub	sp, #12
  401850:	af00      	add	r7, sp, #0
  401852:	6078      	str	r0, [r7, #4]
  401854:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401856:	687b      	ldr	r3, [r7, #4]
  401858:	2b00      	cmp	r3, #0
  40185a:	d008      	beq.n	40186e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40185c:	4913      	ldr	r1, [pc, #76]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  40185e:	4b13      	ldr	r3, [pc, #76]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  401860:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401862:	4a13      	ldr	r2, [pc, #76]	; (4018b0 <pmc_switch_mainck_to_xtal+0x64>)
  401864:	401a      	ands	r2, r3
  401866:	4b13      	ldr	r3, [pc, #76]	; (4018b4 <pmc_switch_mainck_to_xtal+0x68>)
  401868:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40186a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40186c:	e018      	b.n	4018a0 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40186e:	490f      	ldr	r1, [pc, #60]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  401870:	4b0e      	ldr	r3, [pc, #56]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  401872:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401874:	4b10      	ldr	r3, [pc, #64]	; (4018b8 <pmc_switch_mainck_to_xtal+0x6c>)
  401876:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401878:	683a      	ldr	r2, [r7, #0]
  40187a:	0212      	lsls	r2, r2, #8
  40187c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40187e:	431a      	orrs	r2, r3
  401880:	4b0e      	ldr	r3, [pc, #56]	; (4018bc <pmc_switch_mainck_to_xtal+0x70>)
  401882:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401884:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401886:	bf00      	nop
  401888:	4b08      	ldr	r3, [pc, #32]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  40188a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40188c:	f003 0301 	and.w	r3, r3, #1
  401890:	2b00      	cmp	r3, #0
  401892:	d0f9      	beq.n	401888 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401894:	4905      	ldr	r1, [pc, #20]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  401896:	4b05      	ldr	r3, [pc, #20]	; (4018ac <pmc_switch_mainck_to_xtal+0x60>)
  401898:	6a1a      	ldr	r2, [r3, #32]
  40189a:	4b09      	ldr	r3, [pc, #36]	; (4018c0 <pmc_switch_mainck_to_xtal+0x74>)
  40189c:	4313      	orrs	r3, r2
  40189e:	620b      	str	r3, [r1, #32]
}
  4018a0:	bf00      	nop
  4018a2:	370c      	adds	r7, #12
  4018a4:	46bd      	mov	sp, r7
  4018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018aa:	4770      	bx	lr
  4018ac:	400e0600 	.word	0x400e0600
  4018b0:	fec8fffc 	.word	0xfec8fffc
  4018b4:	01370002 	.word	0x01370002
  4018b8:	ffc8fffc 	.word	0xffc8fffc
  4018bc:	00370001 	.word	0x00370001
  4018c0:	01370000 	.word	0x01370000

004018c4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  4018c4:	b480      	push	{r7}
  4018c6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4018c8:	4b04      	ldr	r3, [pc, #16]	; (4018dc <pmc_osc_is_ready_mainck+0x18>)
  4018ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  4018d0:	4618      	mov	r0, r3
  4018d2:	46bd      	mov	sp, r7
  4018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018d8:	4770      	bx	lr
  4018da:	bf00      	nop
  4018dc:	400e0600 	.word	0x400e0600

004018e0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4018e0:	b480      	push	{r7}
  4018e2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4018e4:	4b04      	ldr	r3, [pc, #16]	; (4018f8 <pmc_disable_pllack+0x18>)
  4018e6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4018ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4018ec:	bf00      	nop
  4018ee:	46bd      	mov	sp, r7
  4018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018f4:	4770      	bx	lr
  4018f6:	bf00      	nop
  4018f8:	400e0600 	.word	0x400e0600

004018fc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4018fc:	b480      	push	{r7}
  4018fe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401900:	4b04      	ldr	r3, [pc, #16]	; (401914 <pmc_is_locked_pllack+0x18>)
  401902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401904:	f003 0302 	and.w	r3, r3, #2
}
  401908:	4618      	mov	r0, r3
  40190a:	46bd      	mov	sp, r7
  40190c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401910:	4770      	bx	lr
  401912:	bf00      	nop
  401914:	400e0600 	.word	0x400e0600

00401918 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  401918:	b480      	push	{r7}
  40191a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  40191c:	4b04      	ldr	r3, [pc, #16]	; (401930 <pmc_is_locked_upll+0x18>)
  40191e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401920:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  401924:	4618      	mov	r0, r3
  401926:	46bd      	mov	sp, r7
  401928:	f85d 7b04 	ldr.w	r7, [sp], #4
  40192c:	4770      	bx	lr
  40192e:	bf00      	nop
  401930:	400e0600 	.word	0x400e0600

00401934 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  401934:	b480      	push	{r7}
  401936:	b085      	sub	sp, #20
  401938:	af00      	add	r7, sp, #0
  40193a:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  40193c:	4a0b      	ldr	r2, [pc, #44]	; (40196c <pmc_enable_periph_clk+0x38>)
  40193e:	687b      	ldr	r3, [r7, #4]
  401940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401944:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401948:	4b08      	ldr	r3, [pc, #32]	; (40196c <pmc_enable_periph_clk+0x38>)
  40194a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  40194e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  401952:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  401954:	4a05      	ldr	r2, [pc, #20]	; (40196c <pmc_enable_periph_clk+0x38>)
  401956:	68fb      	ldr	r3, [r7, #12]
  401958:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  40195c:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40195e:	4618      	mov	r0, r3
  401960:	3714      	adds	r7, #20
  401962:	46bd      	mov	sp, r7
  401964:	f85d 7b04 	ldr.w	r7, [sp], #4
  401968:	4770      	bx	lr
  40196a:	bf00      	nop
  40196c:	400e0600 	.word	0x400e0600

00401970 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401970:	b480      	push	{r7}
  401972:	b087      	sub	sp, #28
  401974:	af00      	add	r7, sp, #0
  401976:	60f8      	str	r0, [r7, #12]
  401978:	60b9      	str	r1, [r7, #8]
  40197a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40197c:	68fa      	ldr	r2, [r7, #12]
  40197e:	68bb      	ldr	r3, [r7, #8]
  401980:	019b      	lsls	r3, r3, #6
  401982:	4413      	add	r3, r2
  401984:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401986:	697b      	ldr	r3, [r7, #20]
  401988:	2202      	movs	r2, #2
  40198a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40198c:	697b      	ldr	r3, [r7, #20]
  40198e:	f04f 32ff 	mov.w	r2, #4294967295
  401992:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401994:	697b      	ldr	r3, [r7, #20]
  401996:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401998:	697b      	ldr	r3, [r7, #20]
  40199a:	687a      	ldr	r2, [r7, #4]
  40199c:	605a      	str	r2, [r3, #4]
}
  40199e:	bf00      	nop
  4019a0:	371c      	adds	r7, #28
  4019a2:	46bd      	mov	sp, r7
  4019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019a8:	4770      	bx	lr

004019aa <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  4019aa:	b480      	push	{r7}
  4019ac:	b083      	sub	sp, #12
  4019ae:	af00      	add	r7, sp, #0
  4019b0:	6078      	str	r0, [r7, #4]
  4019b2:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4019b4:	687a      	ldr	r2, [r7, #4]
  4019b6:	683b      	ldr	r3, [r7, #0]
  4019b8:	019b      	lsls	r3, r3, #6
  4019ba:	4413      	add	r3, r2
  4019bc:	2205      	movs	r2, #5
  4019be:	601a      	str	r2, [r3, #0]
}
  4019c0:	bf00      	nop
  4019c2:	370c      	adds	r7, #12
  4019c4:	46bd      	mov	sp, r7
  4019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ca:	4770      	bx	lr

004019cc <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  4019cc:	b480      	push	{r7}
  4019ce:	b085      	sub	sp, #20
  4019d0:	af00      	add	r7, sp, #0
  4019d2:	60f8      	str	r0, [r7, #12]
  4019d4:	60b9      	str	r1, [r7, #8]
  4019d6:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4019d8:	68fa      	ldr	r2, [r7, #12]
  4019da:	68bb      	ldr	r3, [r7, #8]
  4019dc:	019b      	lsls	r3, r3, #6
  4019de:	4413      	add	r3, r2
  4019e0:	331c      	adds	r3, #28
  4019e2:	687a      	ldr	r2, [r7, #4]
  4019e4:	601a      	str	r2, [r3, #0]
}
  4019e6:	bf00      	nop
  4019e8:	3714      	adds	r7, #20
  4019ea:	46bd      	mov	sp, r7
  4019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019f0:	4770      	bx	lr

004019f2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  4019f2:	b480      	push	{r7}
  4019f4:	b087      	sub	sp, #28
  4019f6:	af00      	add	r7, sp, #0
  4019f8:	60f8      	str	r0, [r7, #12]
  4019fa:	60b9      	str	r1, [r7, #8]
  4019fc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4019fe:	68fa      	ldr	r2, [r7, #12]
  401a00:	68bb      	ldr	r3, [r7, #8]
  401a02:	019b      	lsls	r3, r3, #6
  401a04:	4413      	add	r3, r2
  401a06:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401a08:	697b      	ldr	r3, [r7, #20]
  401a0a:	687a      	ldr	r2, [r7, #4]
  401a0c:	625a      	str	r2, [r3, #36]	; 0x24
}
  401a0e:	bf00      	nop
  401a10:	371c      	adds	r7, #28
  401a12:	46bd      	mov	sp, r7
  401a14:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a18:	4770      	bx	lr

00401a1a <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401a1a:	b480      	push	{r7}
  401a1c:	b08d      	sub	sp, #52	; 0x34
  401a1e:	af00      	add	r7, sp, #0
  401a20:	60f8      	str	r0, [r7, #12]
  401a22:	60b9      	str	r1, [r7, #8]
  401a24:	607a      	str	r2, [r7, #4]
  401a26:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401a28:	2302      	movs	r3, #2
  401a2a:	613b      	str	r3, [r7, #16]
  401a2c:	2308      	movs	r3, #8
  401a2e:	617b      	str	r3, [r7, #20]
  401a30:	2320      	movs	r3, #32
  401a32:	61bb      	str	r3, [r7, #24]
  401a34:	2380      	movs	r3, #128	; 0x80
  401a36:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401a3a:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401a3c:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401a3e:	2300      	movs	r3, #0
  401a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  401a42:	e01a      	b.n	401a7a <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a46:	009b      	lsls	r3, r3, #2
  401a48:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401a4c:	4413      	add	r3, r2
  401a4e:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401a52:	68ba      	ldr	r2, [r7, #8]
  401a54:	fbb2 f3f3 	udiv	r3, r2, r3
  401a58:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401a5c:	0c1b      	lsrs	r3, r3, #16
  401a5e:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401a60:	68fa      	ldr	r2, [r7, #12]
  401a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401a64:	429a      	cmp	r2, r3
  401a66:	d901      	bls.n	401a6c <tc_find_mck_divisor+0x52>
			return 0;
  401a68:	2300      	movs	r3, #0
  401a6a:	e023      	b.n	401ab4 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  401a6c:	68fa      	ldr	r2, [r7, #12]
  401a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401a70:	429a      	cmp	r2, r3
  401a72:	d206      	bcs.n	401a82 <tc_find_mck_divisor+0x68>
			ul_index++) {
  401a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a76:	3301      	adds	r3, #1
  401a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  401a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a7c:	2b04      	cmp	r3, #4
  401a7e:	d9e1      	bls.n	401a44 <tc_find_mck_divisor+0x2a>
  401a80:	e000      	b.n	401a84 <tc_find_mck_divisor+0x6a>
			break;
  401a82:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a86:	2b04      	cmp	r3, #4
  401a88:	d901      	bls.n	401a8e <tc_find_mck_divisor+0x74>
		return 0;
  401a8a:	2300      	movs	r3, #0
  401a8c:	e012      	b.n	401ab4 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401a8e:	687b      	ldr	r3, [r7, #4]
  401a90:	2b00      	cmp	r3, #0
  401a92:	d008      	beq.n	401aa6 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401a96:	009b      	lsls	r3, r3, #2
  401a98:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401a9c:	4413      	add	r3, r2
  401a9e:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401aa2:	687b      	ldr	r3, [r7, #4]
  401aa4:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401aa6:	683b      	ldr	r3, [r7, #0]
  401aa8:	2b00      	cmp	r3, #0
  401aaa:	d002      	beq.n	401ab2 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401aac:	683b      	ldr	r3, [r7, #0]
  401aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401ab0:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401ab2:	2301      	movs	r3, #1
}
  401ab4:	4618      	mov	r0, r3
  401ab6:	3734      	adds	r7, #52	; 0x34
  401ab8:	46bd      	mov	sp, r7
  401aba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401abe:	4770      	bx	lr

00401ac0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401ac0:	b480      	push	{r7}
  401ac2:	b083      	sub	sp, #12
  401ac4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401ac6:	f3ef 8310 	mrs	r3, PRIMASK
  401aca:	607b      	str	r3, [r7, #4]
  return(result);
  401acc:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401ace:	2b00      	cmp	r3, #0
  401ad0:	bf0c      	ite	eq
  401ad2:	2301      	moveq	r3, #1
  401ad4:	2300      	movne	r3, #0
  401ad6:	b2db      	uxtb	r3, r3
  401ad8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401ada:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401adc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ae0:	4b04      	ldr	r3, [pc, #16]	; (401af4 <cpu_irq_save+0x34>)
  401ae2:	2200      	movs	r2, #0
  401ae4:	701a      	strb	r2, [r3, #0]
	return flags;
  401ae6:	683b      	ldr	r3, [r7, #0]
}
  401ae8:	4618      	mov	r0, r3
  401aea:	370c      	adds	r7, #12
  401aec:	46bd      	mov	sp, r7
  401aee:	f85d 7b04 	ldr.w	r7, [sp], #4
  401af2:	4770      	bx	lr
  401af4:	20400000 	.word	0x20400000

00401af8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401af8:	b480      	push	{r7}
  401afa:	b083      	sub	sp, #12
  401afc:	af00      	add	r7, sp, #0
  401afe:	6078      	str	r0, [r7, #4]
	return (flags);
  401b00:	687b      	ldr	r3, [r7, #4]
  401b02:	2b00      	cmp	r3, #0
  401b04:	bf14      	ite	ne
  401b06:	2301      	movne	r3, #1
  401b08:	2300      	moveq	r3, #0
  401b0a:	b2db      	uxtb	r3, r3
}
  401b0c:	4618      	mov	r0, r3
  401b0e:	370c      	adds	r7, #12
  401b10:	46bd      	mov	sp, r7
  401b12:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b16:	4770      	bx	lr

00401b18 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401b18:	b580      	push	{r7, lr}
  401b1a:	b082      	sub	sp, #8
  401b1c:	af00      	add	r7, sp, #0
  401b1e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401b20:	6878      	ldr	r0, [r7, #4]
  401b22:	4b07      	ldr	r3, [pc, #28]	; (401b40 <cpu_irq_restore+0x28>)
  401b24:	4798      	blx	r3
  401b26:	4603      	mov	r3, r0
  401b28:	2b00      	cmp	r3, #0
  401b2a:	d005      	beq.n	401b38 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401b2c:	4b05      	ldr	r3, [pc, #20]	; (401b44 <cpu_irq_restore+0x2c>)
  401b2e:	2201      	movs	r2, #1
  401b30:	701a      	strb	r2, [r3, #0]
  401b32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b36:	b662      	cpsie	i
}
  401b38:	bf00      	nop
  401b3a:	3708      	adds	r7, #8
  401b3c:	46bd      	mov	sp, r7
  401b3e:	bd80      	pop	{r7, pc}
  401b40:	00401af9 	.word	0x00401af9
  401b44:	20400000 	.word	0x20400000

00401b48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401b48:	b580      	push	{r7, lr}
  401b4a:	b084      	sub	sp, #16
  401b4c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401b4e:	4b1e      	ldr	r3, [pc, #120]	; (401bc8 <Reset_Handler+0x80>)
  401b50:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401b52:	4b1e      	ldr	r3, [pc, #120]	; (401bcc <Reset_Handler+0x84>)
  401b54:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401b56:	68fa      	ldr	r2, [r7, #12]
  401b58:	68bb      	ldr	r3, [r7, #8]
  401b5a:	429a      	cmp	r2, r3
  401b5c:	d00c      	beq.n	401b78 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401b5e:	e007      	b.n	401b70 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401b60:	68bb      	ldr	r3, [r7, #8]
  401b62:	1d1a      	adds	r2, r3, #4
  401b64:	60ba      	str	r2, [r7, #8]
  401b66:	68fa      	ldr	r2, [r7, #12]
  401b68:	1d11      	adds	r1, r2, #4
  401b6a:	60f9      	str	r1, [r7, #12]
  401b6c:	6812      	ldr	r2, [r2, #0]
  401b6e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401b70:	68bb      	ldr	r3, [r7, #8]
  401b72:	4a17      	ldr	r2, [pc, #92]	; (401bd0 <Reset_Handler+0x88>)
  401b74:	4293      	cmp	r3, r2
  401b76:	d3f3      	bcc.n	401b60 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401b78:	4b16      	ldr	r3, [pc, #88]	; (401bd4 <Reset_Handler+0x8c>)
  401b7a:	60bb      	str	r3, [r7, #8]
  401b7c:	e004      	b.n	401b88 <Reset_Handler+0x40>
                *pDest++ = 0;
  401b7e:	68bb      	ldr	r3, [r7, #8]
  401b80:	1d1a      	adds	r2, r3, #4
  401b82:	60ba      	str	r2, [r7, #8]
  401b84:	2200      	movs	r2, #0
  401b86:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401b88:	68bb      	ldr	r3, [r7, #8]
  401b8a:	4a13      	ldr	r2, [pc, #76]	; (401bd8 <Reset_Handler+0x90>)
  401b8c:	4293      	cmp	r3, r2
  401b8e:	d3f6      	bcc.n	401b7e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401b90:	4b12      	ldr	r3, [pc, #72]	; (401bdc <Reset_Handler+0x94>)
  401b92:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b94:	4a12      	ldr	r2, [pc, #72]	; (401be0 <Reset_Handler+0x98>)
  401b96:	68fb      	ldr	r3, [r7, #12]
  401b98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b9c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401b9e:	4b11      	ldr	r3, [pc, #68]	; (401be4 <Reset_Handler+0x9c>)
  401ba0:	4798      	blx	r3
  401ba2:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401ba4:	4a10      	ldr	r2, [pc, #64]	; (401be8 <Reset_Handler+0xa0>)
  401ba6:	4b10      	ldr	r3, [pc, #64]	; (401be8 <Reset_Handler+0xa0>)
  401ba8:	681b      	ldr	r3, [r3, #0]
  401baa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401bae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401bb4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401bb8:	6878      	ldr	r0, [r7, #4]
  401bba:	4b0c      	ldr	r3, [pc, #48]	; (401bec <Reset_Handler+0xa4>)
  401bbc:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401bbe:	4b0c      	ldr	r3, [pc, #48]	; (401bf0 <Reset_Handler+0xa8>)
  401bc0:	4798      	blx	r3

        /* Branch to main function */
        main();
  401bc2:	4b0c      	ldr	r3, [pc, #48]	; (401bf4 <Reset_Handler+0xac>)
  401bc4:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401bc6:	e7fe      	b.n	401bc6 <Reset_Handler+0x7e>
  401bc8:	0040ce5c 	.word	0x0040ce5c
  401bcc:	20400000 	.word	0x20400000
  401bd0:	2040049c 	.word	0x2040049c
  401bd4:	204004a0 	.word	0x204004a0
  401bd8:	20404460 	.word	0x20404460
  401bdc:	00400000 	.word	0x00400000
  401be0:	e000ed00 	.word	0xe000ed00
  401be4:	00401ac1 	.word	0x00401ac1
  401be8:	e000ed88 	.word	0xe000ed88
  401bec:	00401b19 	.word	0x00401b19
  401bf0:	0040c935 	.word	0x0040c935
  401bf4:	0040c89d 	.word	0x0040c89d

00401bf8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401bf8:	b480      	push	{r7}
  401bfa:	af00      	add	r7, sp, #0
        while (1) {
  401bfc:	e7fe      	b.n	401bfc <Dummy_Handler+0x4>
	...

00401c00 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401c00:	b480      	push	{r7}
  401c02:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401c04:	4b52      	ldr	r3, [pc, #328]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c08:	f003 0303 	and.w	r3, r3, #3
  401c0c:	2b01      	cmp	r3, #1
  401c0e:	d014      	beq.n	401c3a <SystemCoreClockUpdate+0x3a>
  401c10:	2b01      	cmp	r3, #1
  401c12:	d302      	bcc.n	401c1a <SystemCoreClockUpdate+0x1a>
  401c14:	2b02      	cmp	r3, #2
  401c16:	d038      	beq.n	401c8a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401c18:	e07a      	b.n	401d10 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401c1a:	4b4e      	ldr	r3, [pc, #312]	; (401d54 <SystemCoreClockUpdate+0x154>)
  401c1c:	695b      	ldr	r3, [r3, #20]
  401c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401c22:	2b00      	cmp	r3, #0
  401c24:	d004      	beq.n	401c30 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401c26:	4b4c      	ldr	r3, [pc, #304]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401c2c:	601a      	str	r2, [r3, #0]
    break;
  401c2e:	e06f      	b.n	401d10 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401c30:	4b49      	ldr	r3, [pc, #292]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c32:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401c36:	601a      	str	r2, [r3, #0]
    break;
  401c38:	e06a      	b.n	401d10 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c3a:	4b45      	ldr	r3, [pc, #276]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401c3c:	6a1b      	ldr	r3, [r3, #32]
  401c3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c42:	2b00      	cmp	r3, #0
  401c44:	d003      	beq.n	401c4e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401c46:	4b44      	ldr	r3, [pc, #272]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c48:	4a44      	ldr	r2, [pc, #272]	; (401d5c <SystemCoreClockUpdate+0x15c>)
  401c4a:	601a      	str	r2, [r3, #0]
    break;
  401c4c:	e060      	b.n	401d10 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c4e:	4b42      	ldr	r3, [pc, #264]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c50:	4a43      	ldr	r2, [pc, #268]	; (401d60 <SystemCoreClockUpdate+0x160>)
  401c52:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c54:	4b3e      	ldr	r3, [pc, #248]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401c56:	6a1b      	ldr	r3, [r3, #32]
  401c58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c5c:	2b10      	cmp	r3, #16
  401c5e:	d004      	beq.n	401c6a <SystemCoreClockUpdate+0x6a>
  401c60:	2b20      	cmp	r3, #32
  401c62:	d008      	beq.n	401c76 <SystemCoreClockUpdate+0x76>
  401c64:	2b00      	cmp	r3, #0
  401c66:	d00e      	beq.n	401c86 <SystemCoreClockUpdate+0x86>
          break;
  401c68:	e00e      	b.n	401c88 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401c6a:	4b3b      	ldr	r3, [pc, #236]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c6c:	681b      	ldr	r3, [r3, #0]
  401c6e:	005b      	lsls	r3, r3, #1
  401c70:	4a39      	ldr	r2, [pc, #228]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c72:	6013      	str	r3, [r2, #0]
          break;
  401c74:	e008      	b.n	401c88 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401c76:	4b38      	ldr	r3, [pc, #224]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c78:	681a      	ldr	r2, [r3, #0]
  401c7a:	4613      	mov	r3, r2
  401c7c:	005b      	lsls	r3, r3, #1
  401c7e:	4413      	add	r3, r2
  401c80:	4a35      	ldr	r2, [pc, #212]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c82:	6013      	str	r3, [r2, #0]
          break;
  401c84:	e000      	b.n	401c88 <SystemCoreClockUpdate+0x88>
          break;
  401c86:	bf00      	nop
    break;
  401c88:	e042      	b.n	401d10 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c8a:	4b31      	ldr	r3, [pc, #196]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401c8c:	6a1b      	ldr	r3, [r3, #32]
  401c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401c92:	2b00      	cmp	r3, #0
  401c94:	d003      	beq.n	401c9e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c96:	4b30      	ldr	r3, [pc, #192]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401c98:	4a30      	ldr	r2, [pc, #192]	; (401d5c <SystemCoreClockUpdate+0x15c>)
  401c9a:	601a      	str	r2, [r3, #0]
  401c9c:	e01c      	b.n	401cd8 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c9e:	4b2e      	ldr	r3, [pc, #184]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401ca0:	4a2f      	ldr	r2, [pc, #188]	; (401d60 <SystemCoreClockUpdate+0x160>)
  401ca2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401ca4:	4b2a      	ldr	r3, [pc, #168]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401ca6:	6a1b      	ldr	r3, [r3, #32]
  401ca8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401cac:	2b10      	cmp	r3, #16
  401cae:	d004      	beq.n	401cba <SystemCoreClockUpdate+0xba>
  401cb0:	2b20      	cmp	r3, #32
  401cb2:	d008      	beq.n	401cc6 <SystemCoreClockUpdate+0xc6>
  401cb4:	2b00      	cmp	r3, #0
  401cb6:	d00e      	beq.n	401cd6 <SystemCoreClockUpdate+0xd6>
          break;
  401cb8:	e00e      	b.n	401cd8 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401cba:	4b27      	ldr	r3, [pc, #156]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cbc:	681b      	ldr	r3, [r3, #0]
  401cbe:	005b      	lsls	r3, r3, #1
  401cc0:	4a25      	ldr	r2, [pc, #148]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cc2:	6013      	str	r3, [r2, #0]
          break;
  401cc4:	e008      	b.n	401cd8 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401cc6:	4b24      	ldr	r3, [pc, #144]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cc8:	681a      	ldr	r2, [r3, #0]
  401cca:	4613      	mov	r3, r2
  401ccc:	005b      	lsls	r3, r3, #1
  401cce:	4413      	add	r3, r2
  401cd0:	4a21      	ldr	r2, [pc, #132]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cd2:	6013      	str	r3, [r2, #0]
          break;
  401cd4:	e000      	b.n	401cd8 <SystemCoreClockUpdate+0xd8>
          break;
  401cd6:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401cd8:	4b1d      	ldr	r3, [pc, #116]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cdc:	f003 0303 	and.w	r3, r3, #3
  401ce0:	2b02      	cmp	r3, #2
  401ce2:	d114      	bne.n	401d0e <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401ce4:	4b1a      	ldr	r3, [pc, #104]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401ce8:	0c1b      	lsrs	r3, r3, #16
  401cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401cee:	3301      	adds	r3, #1
  401cf0:	4a19      	ldr	r2, [pc, #100]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cf2:	6812      	ldr	r2, [r2, #0]
  401cf4:	fb02 f303 	mul.w	r3, r2, r3
  401cf8:	4a17      	ldr	r2, [pc, #92]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401cfa:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401cfc:	4b14      	ldr	r3, [pc, #80]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401d00:	b2db      	uxtb	r3, r3
  401d02:	4a15      	ldr	r2, [pc, #84]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d04:	6812      	ldr	r2, [r2, #0]
  401d06:	fbb2 f3f3 	udiv	r3, r2, r3
  401d0a:	4a13      	ldr	r2, [pc, #76]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d0c:	6013      	str	r3, [r2, #0]
    break;
  401d0e:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401d10:	4b0f      	ldr	r3, [pc, #60]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d14:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d18:	2b70      	cmp	r3, #112	; 0x70
  401d1a:	d108      	bne.n	401d2e <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401d1c:	4b0e      	ldr	r3, [pc, #56]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d1e:	681b      	ldr	r3, [r3, #0]
  401d20:	4a10      	ldr	r2, [pc, #64]	; (401d64 <SystemCoreClockUpdate+0x164>)
  401d22:	fba2 2303 	umull	r2, r3, r2, r3
  401d26:	085b      	lsrs	r3, r3, #1
  401d28:	4a0b      	ldr	r2, [pc, #44]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d2a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401d2c:	e00a      	b.n	401d44 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401d2e:	4b08      	ldr	r3, [pc, #32]	; (401d50 <SystemCoreClockUpdate+0x150>)
  401d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d32:	091b      	lsrs	r3, r3, #4
  401d34:	f003 0307 	and.w	r3, r3, #7
  401d38:	4a07      	ldr	r2, [pc, #28]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d3a:	6812      	ldr	r2, [r2, #0]
  401d3c:	fa22 f303 	lsr.w	r3, r2, r3
  401d40:	4a05      	ldr	r2, [pc, #20]	; (401d58 <SystemCoreClockUpdate+0x158>)
  401d42:	6013      	str	r3, [r2, #0]
}
  401d44:	bf00      	nop
  401d46:	46bd      	mov	sp, r7
  401d48:	f85d 7b04 	ldr.w	r7, [sp], #4
  401d4c:	4770      	bx	lr
  401d4e:	bf00      	nop
  401d50:	400e0600 	.word	0x400e0600
  401d54:	400e1810 	.word	0x400e1810
  401d58:	20400004 	.word	0x20400004
  401d5c:	00b71b00 	.word	0x00b71b00
  401d60:	003d0900 	.word	0x003d0900
  401d64:	aaaaaaab 	.word	0xaaaaaaab

00401d68 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401d68:	b480      	push	{r7}
  401d6a:	b083      	sub	sp, #12
  401d6c:	af00      	add	r7, sp, #0
  401d6e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401d70:	687b      	ldr	r3, [r7, #4]
  401d72:	4a1d      	ldr	r2, [pc, #116]	; (401de8 <system_init_flash+0x80>)
  401d74:	4293      	cmp	r3, r2
  401d76:	d804      	bhi.n	401d82 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d78:	4b1c      	ldr	r3, [pc, #112]	; (401dec <system_init_flash+0x84>)
  401d7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d7e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401d80:	e02b      	b.n	401dda <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401d82:	687b      	ldr	r3, [r7, #4]
  401d84:	4a1a      	ldr	r2, [pc, #104]	; (401df0 <system_init_flash+0x88>)
  401d86:	4293      	cmp	r3, r2
  401d88:	d803      	bhi.n	401d92 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d8a:	4b18      	ldr	r3, [pc, #96]	; (401dec <system_init_flash+0x84>)
  401d8c:	4a19      	ldr	r2, [pc, #100]	; (401df4 <system_init_flash+0x8c>)
  401d8e:	601a      	str	r2, [r3, #0]
}
  401d90:	e023      	b.n	401dda <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401d92:	687b      	ldr	r3, [r7, #4]
  401d94:	4a18      	ldr	r2, [pc, #96]	; (401df8 <system_init_flash+0x90>)
  401d96:	4293      	cmp	r3, r2
  401d98:	d803      	bhi.n	401da2 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d9a:	4b14      	ldr	r3, [pc, #80]	; (401dec <system_init_flash+0x84>)
  401d9c:	4a17      	ldr	r2, [pc, #92]	; (401dfc <system_init_flash+0x94>)
  401d9e:	601a      	str	r2, [r3, #0]
}
  401da0:	e01b      	b.n	401dda <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401da2:	687b      	ldr	r3, [r7, #4]
  401da4:	4a16      	ldr	r2, [pc, #88]	; (401e00 <system_init_flash+0x98>)
  401da6:	4293      	cmp	r3, r2
  401da8:	d803      	bhi.n	401db2 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401daa:	4b10      	ldr	r3, [pc, #64]	; (401dec <system_init_flash+0x84>)
  401dac:	4a15      	ldr	r2, [pc, #84]	; (401e04 <system_init_flash+0x9c>)
  401dae:	601a      	str	r2, [r3, #0]
}
  401db0:	e013      	b.n	401dda <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401db2:	687b      	ldr	r3, [r7, #4]
  401db4:	4a14      	ldr	r2, [pc, #80]	; (401e08 <system_init_flash+0xa0>)
  401db6:	4293      	cmp	r3, r2
  401db8:	d804      	bhi.n	401dc4 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401dba:	4b0c      	ldr	r3, [pc, #48]	; (401dec <system_init_flash+0x84>)
  401dbc:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401dc0:	601a      	str	r2, [r3, #0]
}
  401dc2:	e00a      	b.n	401dda <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401dc4:	687b      	ldr	r3, [r7, #4]
  401dc6:	4a11      	ldr	r2, [pc, #68]	; (401e0c <system_init_flash+0xa4>)
  401dc8:	4293      	cmp	r3, r2
  401dca:	d803      	bhi.n	401dd4 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401dcc:	4b07      	ldr	r3, [pc, #28]	; (401dec <system_init_flash+0x84>)
  401dce:	4a10      	ldr	r2, [pc, #64]	; (401e10 <system_init_flash+0xa8>)
  401dd0:	601a      	str	r2, [r3, #0]
}
  401dd2:	e002      	b.n	401dda <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401dd4:	4b05      	ldr	r3, [pc, #20]	; (401dec <system_init_flash+0x84>)
  401dd6:	4a0f      	ldr	r2, [pc, #60]	; (401e14 <system_init_flash+0xac>)
  401dd8:	601a      	str	r2, [r3, #0]
}
  401dda:	bf00      	nop
  401ddc:	370c      	adds	r7, #12
  401dde:	46bd      	mov	sp, r7
  401de0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401de4:	4770      	bx	lr
  401de6:	bf00      	nop
  401de8:	015ef3bf 	.word	0x015ef3bf
  401dec:	400e0c00 	.word	0x400e0c00
  401df0:	02bde77f 	.word	0x02bde77f
  401df4:	04000100 	.word	0x04000100
  401df8:	041cdb3f 	.word	0x041cdb3f
  401dfc:	04000200 	.word	0x04000200
  401e00:	057bceff 	.word	0x057bceff
  401e04:	04000300 	.word	0x04000300
  401e08:	06dac2bf 	.word	0x06dac2bf
  401e0c:	0839b67f 	.word	0x0839b67f
  401e10:	04000500 	.word	0x04000500
  401e14:	04000600 	.word	0x04000600

00401e18 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  401e18:	b480      	push	{r7}
  401e1a:	b083      	sub	sp, #12
  401e1c:	af00      	add	r7, sp, #0
  401e1e:	4603      	mov	r3, r0
  401e20:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401e22:	88fb      	ldrh	r3, [r7, #6]
  401e24:	021b      	lsls	r3, r3, #8
  401e26:	b21a      	sxth	r2, r3
  401e28:	88fb      	ldrh	r3, [r7, #6]
  401e2a:	0a1b      	lsrs	r3, r3, #8
  401e2c:	b29b      	uxth	r3, r3
  401e2e:	b21b      	sxth	r3, r3
  401e30:	4313      	orrs	r3, r2
  401e32:	b21b      	sxth	r3, r3
  401e34:	b29b      	uxth	r3, r3
}
  401e36:	4618      	mov	r0, r3
  401e38:	370c      	adds	r7, #12
  401e3a:	46bd      	mov	sp, r7
  401e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e40:	4770      	bx	lr
	...

00401e44 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  401e44:	b580      	push	{r7, lr}
  401e46:	b082      	sub	sp, #8
  401e48:	af00      	add	r7, sp, #0
  401e4a:	4603      	mov	r3, r0
  401e4c:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
  401e4e:	88fb      	ldrh	r3, [r7, #6]
  401e50:	4618      	mov	r0, r3
  401e52:	4b03      	ldr	r3, [pc, #12]	; (401e60 <lwip_ntohs+0x1c>)
  401e54:	4798      	blx	r3
  401e56:	4603      	mov	r3, r0
}
  401e58:	4618      	mov	r0, r3
  401e5a:	3708      	adds	r7, #8
  401e5c:	46bd      	mov	sp, r7
  401e5e:	bd80      	pop	{r7, pc}
  401e60:	00401e19 	.word	0x00401e19

00401e64 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  401e64:	b480      	push	{r7}
  401e66:	b083      	sub	sp, #12
  401e68:	af00      	add	r7, sp, #0
  401e6a:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
  401e6c:	687b      	ldr	r3, [r7, #4]
  401e6e:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
  401e70:	687b      	ldr	r3, [r7, #4]
  401e72:	021b      	lsls	r3, r3, #8
  401e74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  return ((n & 0xff) << 24) |
  401e78:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
  401e7a:	687b      	ldr	r3, [r7, #4]
  401e7c:	0a1b      	lsrs	r3, r3, #8
  401e7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ((n & 0xff00) << 8) |
  401e82:	431a      	orrs	r2, r3
    ((n & 0xff000000UL) >> 24);
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	0e1b      	lsrs	r3, r3, #24
    ((n & 0xff0000UL) >> 8) |
  401e88:	4313      	orrs	r3, r2
}
  401e8a:	4618      	mov	r0, r3
  401e8c:	370c      	adds	r7, #12
  401e8e:	46bd      	mov	sp, r7
  401e90:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e94:	4770      	bx	lr
	...

00401e98 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  401e98:	b580      	push	{r7, lr}
  401e9a:	b082      	sub	sp, #8
  401e9c:	af00      	add	r7, sp, #0
  401e9e:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
  401ea0:	6878      	ldr	r0, [r7, #4]
  401ea2:	4b03      	ldr	r3, [pc, #12]	; (401eb0 <lwip_ntohl+0x18>)
  401ea4:	4798      	blx	r3
  401ea6:	4603      	mov	r3, r0
}
  401ea8:	4618      	mov	r0, r3
  401eaa:	3708      	adds	r7, #8
  401eac:	46bd      	mov	sp, r7
  401eae:	bd80      	pop	{r7, pc}
  401eb0:	00401e65 	.word	0x00401e65

00401eb4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  401eb4:	b580      	push	{r7, lr}
  401eb6:	b084      	sub	sp, #16
  401eb8:	af00      	add	r7, sp, #0
  401eba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  401ebc:	687b      	ldr	r3, [r7, #4]
  401ebe:	6a1b      	ldr	r3, [r3, #32]
  401ec0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
  401ec2:	6878      	ldr	r0, [r7, #4]
  401ec4:	4b0c      	ldr	r3, [pc, #48]	; (401ef8 <dhcp_handle_nak+0x44>)
  401ec6:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  401ec8:	490c      	ldr	r1, [pc, #48]	; (401efc <dhcp_handle_nak+0x48>)
  401eca:	6878      	ldr	r0, [r7, #4]
  401ecc:	4b0c      	ldr	r3, [pc, #48]	; (401f00 <dhcp_handle_nak+0x4c>)
  401ece:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  401ed0:	490a      	ldr	r1, [pc, #40]	; (401efc <dhcp_handle_nak+0x48>)
  401ed2:	6878      	ldr	r0, [r7, #4]
  401ed4:	4b0b      	ldr	r3, [pc, #44]	; (401f04 <dhcp_handle_nak+0x50>)
  401ed6:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY); 
  401ed8:	4908      	ldr	r1, [pc, #32]	; (401efc <dhcp_handle_nak+0x48>)
  401eda:	6878      	ldr	r0, [r7, #4]
  401edc:	4b0a      	ldr	r3, [pc, #40]	; (401f08 <dhcp_handle_nak+0x54>)
  401ede:	4798      	blx	r3
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  401ee0:	210c      	movs	r1, #12
  401ee2:	68f8      	ldr	r0, [r7, #12]
  401ee4:	4b09      	ldr	r3, [pc, #36]	; (401f0c <dhcp_handle_nak+0x58>)
  401ee6:	4798      	blx	r3
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  401ee8:	6878      	ldr	r0, [r7, #4]
  401eea:	4b09      	ldr	r3, [pc, #36]	; (401f10 <dhcp_handle_nak+0x5c>)
  401eec:	4798      	blx	r3
}
  401eee:	bf00      	nop
  401ef0:	3710      	adds	r7, #16
  401ef2:	46bd      	mov	sp, r7
  401ef4:	bd80      	pop	{r7, pc}
  401ef6:	bf00      	nop
  401ef8:	004055fd 	.word	0x004055fd
  401efc:	0040cdbc 	.word	0x0040cdbc
  401f00:	0040547d 	.word	0x0040547d
  401f04:	00405531 	.word	0x00405531
  401f08:	00405559 	.word	0x00405559
  401f0c:	00402d99 	.word	0x00402d99
  401f10:	00402681 	.word	0x00402681

00401f14 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  401f14:	b580      	push	{r7, lr}
  401f16:	b084      	sub	sp, #16
  401f18:	af00      	add	r7, sp, #0
  401f1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  401f1c:	687b      	ldr	r3, [r7, #4]
  401f1e:	6a1b      	ldr	r3, [r3, #32]
  401f20:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
  401f22:	2108      	movs	r1, #8
  401f24:	68f8      	ldr	r0, [r7, #12]
  401f26:	4b12      	ldr	r3, [pc, #72]	; (401f70 <dhcp_check+0x5c>)
  401f28:	4798      	blx	r3
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  401f2a:	68fb      	ldr	r3, [r7, #12]
  401f2c:	3324      	adds	r3, #36	; 0x24
  401f2e:	2200      	movs	r2, #0
  401f30:	4619      	mov	r1, r3
  401f32:	6878      	ldr	r0, [r7, #4]
  401f34:	4b0f      	ldr	r3, [pc, #60]	; (401f74 <dhcp_check+0x60>)
  401f36:	4798      	blx	r3
  401f38:	4603      	mov	r3, r0
  401f3a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
  401f3c:	68fb      	ldr	r3, [r7, #12]
  401f3e:	7b5b      	ldrb	r3, [r3, #13]
  401f40:	3301      	adds	r3, #1
  401f42:	b2da      	uxtb	r2, r3
  401f44:	68fb      	ldr	r3, [r7, #12]
  401f46:	735a      	strb	r2, [r3, #13]
  msecs = 500;
  401f48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  401f4c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  401f4e:	893b      	ldrh	r3, [r7, #8]
  401f50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  401f54:	4a08      	ldr	r2, [pc, #32]	; (401f78 <dhcp_check+0x64>)
  401f56:	fb82 1203 	smull	r1, r2, r2, r3
  401f5a:	1152      	asrs	r2, r2, #5
  401f5c:	17db      	asrs	r3, r3, #31
  401f5e:	1ad3      	subs	r3, r2, r3
  401f60:	b29a      	uxth	r2, r3
  401f62:	68fb      	ldr	r3, [r7, #12]
  401f64:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  401f66:	bf00      	nop
  401f68:	3710      	adds	r7, #16
  401f6a:	46bd      	mov	sp, r7
  401f6c:	bd80      	pop	{r7, pc}
  401f6e:	bf00      	nop
  401f70:	00402d99 	.word	0x00402d99
  401f74:	0040b309 	.word	0x0040b309
  401f78:	10624dd3 	.word	0x10624dd3

00401f7c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  401f7c:	b580      	push	{r7, lr}
  401f7e:	b084      	sub	sp, #16
  401f80:	af00      	add	r7, sp, #0
  401f82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  401f84:	687b      	ldr	r3, [r7, #4]
  401f86:	6a1b      	ldr	r3, [r3, #32]
  401f88:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  401f8a:	4b0c      	ldr	r3, [pc, #48]	; (401fbc <dhcp_handle_offer+0x40>)
  401f8c:	789b      	ldrb	r3, [r3, #2]
  401f8e:	2b00      	cmp	r3, #0
  401f90:	d00f      	beq.n	401fb2 <dhcp_handle_offer+0x36>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  401f92:	4b0b      	ldr	r3, [pc, #44]	; (401fc0 <dhcp_handle_offer+0x44>)
  401f94:	689b      	ldr	r3, [r3, #8]
  401f96:	4618      	mov	r0, r3
  401f98:	4b0a      	ldr	r3, [pc, #40]	; (401fc4 <dhcp_handle_offer+0x48>)
  401f9a:	4798      	blx	r3
  401f9c:	4602      	mov	r2, r0
  401f9e:	68fb      	ldr	r3, [r7, #12]
  401fa0:	621a      	str	r2, [r3, #32]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  401fa2:	68fb      	ldr	r3, [r7, #12]
  401fa4:	689b      	ldr	r3, [r3, #8]
  401fa6:	691a      	ldr	r2, [r3, #16]
  401fa8:	68fb      	ldr	r3, [r7, #12]
  401faa:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  401fac:	6878      	ldr	r0, [r7, #4]
  401fae:	4b06      	ldr	r3, [pc, #24]	; (401fc8 <dhcp_handle_offer+0x4c>)
  401fb0:	4798      	blx	r3
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  401fb2:	bf00      	nop
  401fb4:	3710      	adds	r7, #16
  401fb6:	46bd      	mov	sp, r7
  401fb8:	bd80      	pop	{r7, pc}
  401fba:	bf00      	nop
  401fbc:	20403380 	.word	0x20403380
  401fc0:	2040338c 	.word	0x2040338c
  401fc4:	00401e65 	.word	0x00401e65
  401fc8:	00401fcd 	.word	0x00401fcd

00401fcc <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  401fcc:	b590      	push	{r4, r7, lr}
  401fce:	b087      	sub	sp, #28
  401fd0:	af02      	add	r7, sp, #8
  401fd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  401fd4:	687b      	ldr	r3, [r7, #4]
  401fd6:	6a1b      	ldr	r3, [r3, #32]
  401fd8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
  401fda:	2101      	movs	r1, #1
  401fdc:	68f8      	ldr	r0, [r7, #12]
  401fde:	4b46      	ldr	r3, [pc, #280]	; (4020f8 <dhcp_select+0x12c>)
  401fe0:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  401fe2:	2203      	movs	r2, #3
  401fe4:	68f9      	ldr	r1, [r7, #12]
  401fe6:	6878      	ldr	r0, [r7, #4]
  401fe8:	4b44      	ldr	r3, [pc, #272]	; (4020fc <dhcp_select+0x130>)
  401fea:	4798      	blx	r3
  401fec:	4603      	mov	r3, r0
  401fee:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  401ff0:	f997 300b 	ldrsb.w	r3, [r7, #11]
  401ff4:	2b00      	cmp	r3, #0
  401ff6:	d157      	bne.n	4020a8 <dhcp_select+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  401ff8:	2202      	movs	r2, #2
  401ffa:	2139      	movs	r1, #57	; 0x39
  401ffc:	68f8      	ldr	r0, [r7, #12]
  401ffe:	4b40      	ldr	r3, [pc, #256]	; (402100 <dhcp_select+0x134>)
  402000:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402002:	687b      	ldr	r3, [r7, #4]
  402004:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402006:	4619      	mov	r1, r3
  402008:	68f8      	ldr	r0, [r7, #12]
  40200a:	4b3e      	ldr	r3, [pc, #248]	; (402104 <dhcp_select+0x138>)
  40200c:	4798      	blx	r3

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  40200e:	2204      	movs	r2, #4
  402010:	2132      	movs	r1, #50	; 0x32
  402012:	68f8      	ldr	r0, [r7, #12]
  402014:	4b3a      	ldr	r3, [pc, #232]	; (402100 <dhcp_select+0x134>)
  402016:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402018:	68fb      	ldr	r3, [r7, #12]
  40201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40201c:	4618      	mov	r0, r3
  40201e:	4b3a      	ldr	r3, [pc, #232]	; (402108 <dhcp_select+0x13c>)
  402020:	4798      	blx	r3
  402022:	4603      	mov	r3, r0
  402024:	4619      	mov	r1, r3
  402026:	68f8      	ldr	r0, [r7, #12]
  402028:	4b38      	ldr	r3, [pc, #224]	; (40210c <dhcp_select+0x140>)
  40202a:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  40202c:	2204      	movs	r2, #4
  40202e:	2136      	movs	r1, #54	; 0x36
  402030:	68f8      	ldr	r0, [r7, #12]
  402032:	4b33      	ldr	r3, [pc, #204]	; (402100 <dhcp_select+0x134>)
  402034:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
  402036:	68fb      	ldr	r3, [r7, #12]
  402038:	6a1b      	ldr	r3, [r3, #32]
  40203a:	4618      	mov	r0, r3
  40203c:	4b32      	ldr	r3, [pc, #200]	; (402108 <dhcp_select+0x13c>)
  40203e:	4798      	blx	r3
  402040:	4603      	mov	r3, r0
  402042:	4619      	mov	r1, r3
  402044:	68f8      	ldr	r0, [r7, #12]
  402046:	4b31      	ldr	r3, [pc, #196]	; (40210c <dhcp_select+0x140>)
  402048:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  40204a:	2204      	movs	r2, #4
  40204c:	2137      	movs	r1, #55	; 0x37
  40204e:	68f8      	ldr	r0, [r7, #12]
  402050:	4b2b      	ldr	r3, [pc, #172]	; (402100 <dhcp_select+0x134>)
  402052:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  402054:	2101      	movs	r1, #1
  402056:	68f8      	ldr	r0, [r7, #12]
  402058:	4b2d      	ldr	r3, [pc, #180]	; (402110 <dhcp_select+0x144>)
  40205a:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  40205c:	2103      	movs	r1, #3
  40205e:	68f8      	ldr	r0, [r7, #12]
  402060:	4b2b      	ldr	r3, [pc, #172]	; (402110 <dhcp_select+0x144>)
  402062:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  402064:	211c      	movs	r1, #28
  402066:	68f8      	ldr	r0, [r7, #12]
  402068:	4b29      	ldr	r3, [pc, #164]	; (402110 <dhcp_select+0x144>)
  40206a:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  40206c:	2106      	movs	r1, #6
  40206e:	68f8      	ldr	r0, [r7, #12]
  402070:	4b27      	ldr	r3, [pc, #156]	; (402110 <dhcp_select+0x144>)
  402072:	4798      	blx	r3

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  402074:	68f8      	ldr	r0, [r7, #12]
  402076:	4b27      	ldr	r3, [pc, #156]	; (402114 <dhcp_select+0x148>)
  402078:	4798      	blx	r3
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40207a:	68fb      	ldr	r3, [r7, #12]
  40207c:	691a      	ldr	r2, [r3, #16]
  40207e:	68fb      	ldr	r3, [r7, #12]
  402080:	8b1b      	ldrh	r3, [r3, #24]
  402082:	33f0      	adds	r3, #240	; 0xf0
  402084:	b29b      	uxth	r3, r3
  402086:	4619      	mov	r1, r3
  402088:	4610      	mov	r0, r2
  40208a:	4b23      	ldr	r3, [pc, #140]	; (402118 <dhcp_select+0x14c>)
  40208c:	4798      	blx	r3

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  40208e:	68fb      	ldr	r3, [r7, #12]
  402090:	6858      	ldr	r0, [r3, #4]
  402092:	68fb      	ldr	r3, [r7, #12]
  402094:	6919      	ldr	r1, [r3, #16]
  402096:	687b      	ldr	r3, [r7, #4]
  402098:	9300      	str	r3, [sp, #0]
  40209a:	2343      	movs	r3, #67	; 0x43
  40209c:	4a1f      	ldr	r2, [pc, #124]	; (40211c <dhcp_select+0x150>)
  40209e:	4c20      	ldr	r4, [pc, #128]	; (402120 <dhcp_select+0x154>)
  4020a0:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  4020a2:	68f8      	ldr	r0, [r7, #12]
  4020a4:	4b1f      	ldr	r3, [pc, #124]	; (402124 <dhcp_select+0x158>)
  4020a6:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  4020a8:	68fb      	ldr	r3, [r7, #12]
  4020aa:	7b5b      	ldrb	r3, [r3, #13]
  4020ac:	3301      	adds	r3, #1
  4020ae:	b2da      	uxtb	r2, r3
  4020b0:	68fb      	ldr	r3, [r7, #12]
  4020b2:	735a      	strb	r2, [r3, #13]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  4020b4:	68fb      	ldr	r3, [r7, #12]
  4020b6:	7b5b      	ldrb	r3, [r3, #13]
  4020b8:	2b05      	cmp	r3, #5
  4020ba:	d807      	bhi.n	4020cc <dhcp_select+0x100>
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	7b5b      	ldrb	r3, [r3, #13]
  4020c0:	461a      	mov	r2, r3
  4020c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4020c6:	4093      	lsls	r3, r2
  4020c8:	b29b      	uxth	r3, r3
  4020ca:	e001      	b.n	4020d0 <dhcp_select+0x104>
  4020cc:	f64e 2360 	movw	r3, #60000	; 0xea60
  4020d0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4020d2:	893b      	ldrh	r3, [r7, #8]
  4020d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4020d8:	4a13      	ldr	r2, [pc, #76]	; (402128 <dhcp_select+0x15c>)
  4020da:	fb82 1203 	smull	r1, r2, r2, r3
  4020de:	1152      	asrs	r2, r2, #5
  4020e0:	17db      	asrs	r3, r3, #31
  4020e2:	1ad3      	subs	r3, r2, r3
  4020e4:	b29a      	uxth	r2, r3
  4020e6:	68fb      	ldr	r3, [r7, #12]
  4020e8:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4020ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4020ee:	4618      	mov	r0, r3
  4020f0:	3714      	adds	r7, #20
  4020f2:	46bd      	mov	sp, r7
  4020f4:	bd90      	pop	{r4, r7, pc}
  4020f6:	bf00      	nop
  4020f8:	00402d99 	.word	0x00402d99
  4020fc:	004034c5 	.word	0x004034c5
  402100:	00402dcd 	.word	0x00402dcd
  402104:	00402e49 	.word	0x00402e49
  402108:	00401e99 	.word	0x00401e99
  40210c:	00402e9f 	.word	0x00402e9f
  402110:	00402e19 	.word	0x00402e19
  402114:	00403731 	.word	0x00403731
  402118:	00405869 	.word	0x00405869
  40211c:	0040cdc0 	.word	0x0040cdc0
  402120:	0040a671 	.word	0x0040a671
  402124:	004036f5 	.word	0x004036f5
  402128:	10624dd3 	.word	0x10624dd3

0040212c <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
  40212c:	b580      	push	{r7, lr}
  40212e:	b082      	sub	sp, #8
  402130:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  402132:	4b14      	ldr	r3, [pc, #80]	; (402184 <dhcp_coarse_tmr+0x58>)
  402134:	681b      	ldr	r3, [r3, #0]
  402136:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  402138:	e01d      	b.n	402176 <dhcp_coarse_tmr+0x4a>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  40213a:	687b      	ldr	r3, [r7, #4]
  40213c:	6a1b      	ldr	r3, [r3, #32]
  40213e:	2b00      	cmp	r3, #0
  402140:	d016      	beq.n	402170 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
  402142:	687b      	ldr	r3, [r7, #4]
  402144:	6a1a      	ldr	r2, [r3, #32]
  402146:	8bd3      	ldrh	r3, [r2, #30]
  402148:	1e59      	subs	r1, r3, #1
  40214a:	b289      	uxth	r1, r1
  40214c:	83d1      	strh	r1, [r2, #30]
  40214e:	2b01      	cmp	r3, #1
  402150:	d103      	bne.n	40215a <dhcp_coarse_tmr+0x2e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  402152:	6878      	ldr	r0, [r7, #4]
  402154:	4b0c      	ldr	r3, [pc, #48]	; (402188 <dhcp_coarse_tmr+0x5c>)
  402156:	4798      	blx	r3
  402158:	e00a      	b.n	402170 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
  40215a:	687b      	ldr	r3, [r7, #4]
  40215c:	6a1a      	ldr	r2, [r3, #32]
  40215e:	8b93      	ldrh	r3, [r2, #28]
  402160:	1e59      	subs	r1, r3, #1
  402162:	b289      	uxth	r1, r1
  402164:	8391      	strh	r1, [r2, #28]
  402166:	2b01      	cmp	r3, #1
  402168:	d102      	bne.n	402170 <dhcp_coarse_tmr+0x44>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  40216a:	6878      	ldr	r0, [r7, #4]
  40216c:	4b07      	ldr	r3, [pc, #28]	; (40218c <dhcp_coarse_tmr+0x60>)
  40216e:	4798      	blx	r3
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  402170:	687b      	ldr	r3, [r7, #4]
  402172:	681b      	ldr	r3, [r3, #0]
  402174:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
  402176:	687b      	ldr	r3, [r7, #4]
  402178:	2b00      	cmp	r3, #0
  40217a:	d1de      	bne.n	40213a <dhcp_coarse_tmr+0xe>
  }
}
  40217c:	bf00      	nop
  40217e:	3708      	adds	r7, #8
  402180:	46bd      	mov	sp, r7
  402182:	bd80      	pop	{r7, pc}
  402184:	204043d8 	.word	0x204043d8
  402188:	00402319 	.word	0x00402319
  40218c:	004022e1 	.word	0x004022e1

00402190 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
  402190:	b580      	push	{r7, lr}
  402192:	b082      	sub	sp, #8
  402194:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  402196:	4b16      	ldr	r3, [pc, #88]	; (4021f0 <dhcp_fine_tmr+0x60>)
  402198:	681b      	ldr	r3, [r3, #0]
  40219a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
  40219c:	e020      	b.n	4021e0 <dhcp_fine_tmr+0x50>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	6a1b      	ldr	r3, [r3, #32]
  4021a2:	2b00      	cmp	r3, #0
  4021a4:	d019      	beq.n	4021da <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
  4021a6:	687b      	ldr	r3, [r7, #4]
  4021a8:	6a1b      	ldr	r3, [r3, #32]
  4021aa:	8b5b      	ldrh	r3, [r3, #26]
  4021ac:	2b01      	cmp	r3, #1
  4021ae:	d906      	bls.n	4021be <dhcp_fine_tmr+0x2e>
        netif->dhcp->request_timeout--;
  4021b0:	687b      	ldr	r3, [r7, #4]
  4021b2:	6a1b      	ldr	r3, [r3, #32]
  4021b4:	8b5a      	ldrh	r2, [r3, #26]
  4021b6:	3a01      	subs	r2, #1
  4021b8:	b292      	uxth	r2, r2
  4021ba:	835a      	strh	r2, [r3, #26]
  4021bc:	e00d      	b.n	4021da <dhcp_fine_tmr+0x4a>
      }
      else if (netif->dhcp->request_timeout == 1) {
  4021be:	687b      	ldr	r3, [r7, #4]
  4021c0:	6a1b      	ldr	r3, [r3, #32]
  4021c2:	8b5b      	ldrh	r3, [r3, #26]
  4021c4:	2b01      	cmp	r3, #1
  4021c6:	d108      	bne.n	4021da <dhcp_fine_tmr+0x4a>
        netif->dhcp->request_timeout--;
  4021c8:	687b      	ldr	r3, [r7, #4]
  4021ca:	6a1b      	ldr	r3, [r3, #32]
  4021cc:	8b5a      	ldrh	r2, [r3, #26]
  4021ce:	3a01      	subs	r2, #1
  4021d0:	b292      	uxth	r2, r2
  4021d2:	835a      	strh	r2, [r3, #26]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  4021d4:	6878      	ldr	r0, [r7, #4]
  4021d6:	4b07      	ldr	r3, [pc, #28]	; (4021f4 <dhcp_fine_tmr+0x64>)
  4021d8:	4798      	blx	r3
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  4021da:	687b      	ldr	r3, [r7, #4]
  4021dc:	681b      	ldr	r3, [r3, #0]
  4021de:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
  4021e0:	687b      	ldr	r3, [r7, #4]
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d1db      	bne.n	40219e <dhcp_fine_tmr+0xe>
  }
}
  4021e6:	bf00      	nop
  4021e8:	3708      	adds	r7, #8
  4021ea:	46bd      	mov	sp, r7
  4021ec:	bd80      	pop	{r7, pc}
  4021ee:	bf00      	nop
  4021f0:	204043d8 	.word	0x204043d8
  4021f4:	004021f9 	.word	0x004021f9

004021f8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  4021f8:	b580      	push	{r7, lr}
  4021fa:	b084      	sub	sp, #16
  4021fc:	af00      	add	r7, sp, #0
  4021fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402200:	687b      	ldr	r3, [r7, #4]
  402202:	6a1b      	ldr	r3, [r3, #32]
  402204:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
  402206:	68fb      	ldr	r3, [r7, #12]
  402208:	7b1b      	ldrb	r3, [r3, #12]
  40220a:	2b0c      	cmp	r3, #12
  40220c:	d003      	beq.n	402216 <dhcp_timeout+0x1e>
  40220e:	68fb      	ldr	r3, [r7, #12]
  402210:	7b1b      	ldrb	r3, [r3, #12]
  402212:	2b06      	cmp	r3, #6
  402214:	d103      	bne.n	40221e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  402216:	6878      	ldr	r0, [r7, #4]
  402218:	4b29      	ldr	r3, [pc, #164]	; (4022c0 <dhcp_timeout+0xc8>)
  40221a:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  40221c:	e04c      	b.n	4022b8 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REQUESTING) {
  40221e:	68fb      	ldr	r3, [r7, #12]
  402220:	7b1b      	ldrb	r3, [r3, #12]
  402222:	2b01      	cmp	r3, #1
  402224:	d10e      	bne.n	402244 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
  402226:	68fb      	ldr	r3, [r7, #12]
  402228:	7b5b      	ldrb	r3, [r3, #13]
  40222a:	2b05      	cmp	r3, #5
  40222c:	d803      	bhi.n	402236 <dhcp_timeout+0x3e>
      dhcp_select(netif);
  40222e:	6878      	ldr	r0, [r7, #4]
  402230:	4b24      	ldr	r3, [pc, #144]	; (4022c4 <dhcp_timeout+0xcc>)
  402232:	4798      	blx	r3
}
  402234:	e040      	b.n	4022b8 <dhcp_timeout+0xc0>
      dhcp_release(netif);
  402236:	6878      	ldr	r0, [r7, #4]
  402238:	4b23      	ldr	r3, [pc, #140]	; (4022c8 <dhcp_timeout+0xd0>)
  40223a:	4798      	blx	r3
      dhcp_discover(netif);
  40223c:	6878      	ldr	r0, [r7, #4]
  40223e:	4b20      	ldr	r3, [pc, #128]	; (4022c0 <dhcp_timeout+0xc8>)
  402240:	4798      	blx	r3
}
  402242:	e039      	b.n	4022b8 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_CHECKING) {
  402244:	68fb      	ldr	r3, [r7, #12]
  402246:	7b1b      	ldrb	r3, [r3, #12]
  402248:	2b08      	cmp	r3, #8
  40224a:	d10b      	bne.n	402264 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
  40224c:	68fb      	ldr	r3, [r7, #12]
  40224e:	7b5b      	ldrb	r3, [r3, #13]
  402250:	2b01      	cmp	r3, #1
  402252:	d803      	bhi.n	40225c <dhcp_timeout+0x64>
      dhcp_check(netif);
  402254:	6878      	ldr	r0, [r7, #4]
  402256:	4b1d      	ldr	r3, [pc, #116]	; (4022cc <dhcp_timeout+0xd4>)
  402258:	4798      	blx	r3
}
  40225a:	e02d      	b.n	4022b8 <dhcp_timeout+0xc0>
      dhcp_bind(netif);
  40225c:	6878      	ldr	r0, [r7, #4]
  40225e:	4b1c      	ldr	r3, [pc, #112]	; (4022d0 <dhcp_timeout+0xd8>)
  402260:	4798      	blx	r3
}
  402262:	e029      	b.n	4022b8 <dhcp_timeout+0xc0>
  else if (dhcp->state == DHCP_RENEWING) {
  402264:	68fb      	ldr	r3, [r7, #12]
  402266:	7b1b      	ldrb	r3, [r3, #12]
  402268:	2b05      	cmp	r3, #5
  40226a:	d103      	bne.n	402274 <dhcp_timeout+0x7c>
    dhcp_renew(netif);
  40226c:	6878      	ldr	r0, [r7, #4]
  40226e:	4b19      	ldr	r3, [pc, #100]	; (4022d4 <dhcp_timeout+0xdc>)
  402270:	4798      	blx	r3
}
  402272:	e021      	b.n	4022b8 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REBINDING) {
  402274:	68fb      	ldr	r3, [r7, #12]
  402276:	7b1b      	ldrb	r3, [r3, #12]
  402278:	2b04      	cmp	r3, #4
  40227a:	d10e      	bne.n	40229a <dhcp_timeout+0xa2>
    if (dhcp->tries <= 8) {
  40227c:	68fb      	ldr	r3, [r7, #12]
  40227e:	7b5b      	ldrb	r3, [r3, #13]
  402280:	2b08      	cmp	r3, #8
  402282:	d803      	bhi.n	40228c <dhcp_timeout+0x94>
      dhcp_rebind(netif);
  402284:	6878      	ldr	r0, [r7, #4]
  402286:	4b14      	ldr	r3, [pc, #80]	; (4022d8 <dhcp_timeout+0xe0>)
  402288:	4798      	blx	r3
}
  40228a:	e015      	b.n	4022b8 <dhcp_timeout+0xc0>
      dhcp_release(netif);
  40228c:	6878      	ldr	r0, [r7, #4]
  40228e:	4b0e      	ldr	r3, [pc, #56]	; (4022c8 <dhcp_timeout+0xd0>)
  402290:	4798      	blx	r3
      dhcp_discover(netif);
  402292:	6878      	ldr	r0, [r7, #4]
  402294:	4b0a      	ldr	r3, [pc, #40]	; (4022c0 <dhcp_timeout+0xc8>)
  402296:	4798      	blx	r3
}
  402298:	e00e      	b.n	4022b8 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REBOOTING) {
  40229a:	68fb      	ldr	r3, [r7, #12]
  40229c:	7b1b      	ldrb	r3, [r3, #12]
  40229e:	2b03      	cmp	r3, #3
  4022a0:	d10a      	bne.n	4022b8 <dhcp_timeout+0xc0>
    if (dhcp->tries < REBOOT_TRIES) {
  4022a2:	68fb      	ldr	r3, [r7, #12]
  4022a4:	7b5b      	ldrb	r3, [r3, #13]
  4022a6:	2b01      	cmp	r3, #1
  4022a8:	d803      	bhi.n	4022b2 <dhcp_timeout+0xba>
      dhcp_reboot(netif);
  4022aa:	6878      	ldr	r0, [r7, #4]
  4022ac:	4b0b      	ldr	r3, [pc, #44]	; (4022dc <dhcp_timeout+0xe4>)
  4022ae:	4798      	blx	r3
}
  4022b0:	e002      	b.n	4022b8 <dhcp_timeout+0xc0>
      dhcp_discover(netif);
  4022b2:	6878      	ldr	r0, [r7, #4]
  4022b4:	4b02      	ldr	r3, [pc, #8]	; (4022c0 <dhcp_timeout+0xc8>)
  4022b6:	4798      	blx	r3
}
  4022b8:	bf00      	nop
  4022ba:	3710      	adds	r7, #16
  4022bc:	46bd      	mov	sp, r7
  4022be:	bd80      	pop	{r7, pc}
  4022c0:	00402681 	.word	0x00402681
  4022c4:	00401fcd 	.word	0x00401fcd
  4022c8:	00402c05 	.word	0x00402c05
  4022cc:	00401f15 	.word	0x00401f15
  4022d0:	004027a5 	.word	0x004027a5
  4022d4:	00402905 	.word	0x00402905
  4022d8:	004029f9 	.word	0x004029f9
  4022dc:	00402aed 	.word	0x00402aed

004022e0 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  4022e0:	b580      	push	{r7, lr}
  4022e2:	b084      	sub	sp, #16
  4022e4:	af00      	add	r7, sp, #0
  4022e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4022e8:	687b      	ldr	r3, [r7, #4]
  4022ea:	6a1b      	ldr	r3, [r3, #32]
  4022ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  4022ee:	68fb      	ldr	r3, [r7, #12]
  4022f0:	7b1b      	ldrb	r3, [r3, #12]
  4022f2:	2b01      	cmp	r3, #1
  4022f4:	d007      	beq.n	402306 <dhcp_t1_timeout+0x26>
  4022f6:	68fb      	ldr	r3, [r7, #12]
  4022f8:	7b1b      	ldrb	r3, [r3, #12]
  4022fa:	2b0a      	cmp	r3, #10
  4022fc:	d003      	beq.n	402306 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  4022fe:	68fb      	ldr	r3, [r7, #12]
  402300:	7b1b      	ldrb	r3, [r3, #12]
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  402302:	2b05      	cmp	r3, #5
  402304:	d102      	bne.n	40230c <dhcp_t1_timeout+0x2c>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
  402306:	6878      	ldr	r0, [r7, #4]
  402308:	4b02      	ldr	r3, [pc, #8]	; (402314 <dhcp_t1_timeout+0x34>)
  40230a:	4798      	blx	r3
  }
}
  40230c:	bf00      	nop
  40230e:	3710      	adds	r7, #16
  402310:	46bd      	mov	sp, r7
  402312:	bd80      	pop	{r7, pc}
  402314:	00402905 	.word	0x00402905

00402318 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  402318:	b580      	push	{r7, lr}
  40231a:	b084      	sub	sp, #16
  40231c:	af00      	add	r7, sp, #0
  40231e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402320:	687b      	ldr	r3, [r7, #4]
  402322:	6a1b      	ldr	r3, [r3, #32]
  402324:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  402326:	68fb      	ldr	r3, [r7, #12]
  402328:	7b1b      	ldrb	r3, [r3, #12]
  40232a:	2b01      	cmp	r3, #1
  40232c:	d007      	beq.n	40233e <dhcp_t2_timeout+0x26>
  40232e:	68fb      	ldr	r3, [r7, #12]
  402330:	7b1b      	ldrb	r3, [r3, #12]
  402332:	2b0a      	cmp	r3, #10
  402334:	d003      	beq.n	40233e <dhcp_t2_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  402336:	68fb      	ldr	r3, [r7, #12]
  402338:	7b1b      	ldrb	r3, [r3, #12]
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  40233a:	2b05      	cmp	r3, #5
  40233c:	d102      	bne.n	402344 <dhcp_t2_timeout+0x2c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
  40233e:	6878      	ldr	r0, [r7, #4]
  402340:	4b02      	ldr	r3, [pc, #8]	; (40234c <dhcp_t2_timeout+0x34>)
  402342:	4798      	blx	r3
  }
}
  402344:	bf00      	nop
  402346:	3710      	adds	r7, #16
  402348:	46bd      	mov	sp, r7
  40234a:	bd80      	pop	{r7, pc}
  40234c:	004029f9 	.word	0x004029f9

00402350 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  402350:	b580      	push	{r7, lr}
  402352:	b084      	sub	sp, #16
  402354:	af00      	add	r7, sp, #0
  402356:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402358:	687b      	ldr	r3, [r7, #4]
  40235a:	6a1b      	ldr	r3, [r3, #32]
  40235c:	60fb      	str	r3, [r7, #12]
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  40235e:	68fb      	ldr	r3, [r7, #12]
  402360:	2200      	movs	r2, #0
  402362:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  402364:	68fb      	ldr	r3, [r7, #12]
  402366:	2200      	movs	r2, #0
  402368:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  40236a:	4b25      	ldr	r3, [pc, #148]	; (402400 <dhcp_handle_ack+0xb0>)
  40236c:	78db      	ldrb	r3, [r3, #3]
  40236e:	2b00      	cmp	r3, #0
  402370:	d003      	beq.n	40237a <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  402372:	4b24      	ldr	r3, [pc, #144]	; (402404 <dhcp_handle_ack+0xb4>)
  402374:	68da      	ldr	r2, [r3, #12]
  402376:	68fb      	ldr	r3, [r7, #12]
  402378:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  40237a:	4b21      	ldr	r3, [pc, #132]	; (402400 <dhcp_handle_ack+0xb0>)
  40237c:	791b      	ldrb	r3, [r3, #4]
  40237e:	2b00      	cmp	r3, #0
  402380:	d004      	beq.n	40238c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  402382:	4b20      	ldr	r3, [pc, #128]	; (402404 <dhcp_handle_ack+0xb4>)
  402384:	691a      	ldr	r2, [r3, #16]
  402386:	68fb      	ldr	r3, [r7, #12]
  402388:	635a      	str	r2, [r3, #52]	; 0x34
  40238a:	e004      	b.n	402396 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  40238c:	68fb      	ldr	r3, [r7, #12]
  40238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402390:	085a      	lsrs	r2, r3, #1
  402392:	68fb      	ldr	r3, [r7, #12]
  402394:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  402396:	4b1a      	ldr	r3, [pc, #104]	; (402400 <dhcp_handle_ack+0xb0>)
  402398:	795b      	ldrb	r3, [r3, #5]
  40239a:	2b00      	cmp	r3, #0
  40239c:	d004      	beq.n	4023a8 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  40239e:	4b19      	ldr	r3, [pc, #100]	; (402404 <dhcp_handle_ack+0xb4>)
  4023a0:	695a      	ldr	r2, [r3, #20]
  4023a2:	68fb      	ldr	r3, [r7, #12]
  4023a4:	639a      	str	r2, [r3, #56]	; 0x38
  4023a6:	e003      	b.n	4023b0 <dhcp_handle_ack+0x60>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  4023a8:	68fb      	ldr	r3, [r7, #12]
  4023aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4023ac:	68fb      	ldr	r3, [r7, #12]
  4023ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  4023b0:	68fb      	ldr	r3, [r7, #12]
  4023b2:	689b      	ldr	r3, [r3, #8]
  4023b4:	691a      	ldr	r2, [r3, #16]
  4023b6:	68fb      	ldr	r3, [r7, #12]
  4023b8:	625a      	str	r2, [r3, #36]	; 0x24
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  4023ba:	4b11      	ldr	r3, [pc, #68]	; (402400 <dhcp_handle_ack+0xb0>)
  4023bc:	799b      	ldrb	r3, [r3, #6]
  4023be:	2b00      	cmp	r3, #0
  4023c0:	d00b      	beq.n	4023da <dhcp_handle_ack+0x8a>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  4023c2:	4b10      	ldr	r3, [pc, #64]	; (402404 <dhcp_handle_ack+0xb4>)
  4023c4:	699b      	ldr	r3, [r3, #24]
  4023c6:	4618      	mov	r0, r3
  4023c8:	4b0f      	ldr	r3, [pc, #60]	; (402408 <dhcp_handle_ack+0xb8>)
  4023ca:	4798      	blx	r3
  4023cc:	4602      	mov	r2, r0
  4023ce:	68fb      	ldr	r3, [r7, #12]
  4023d0:	629a      	str	r2, [r3, #40]	; 0x28
    dhcp->subnet_mask_given = 1;
  4023d2:	68fb      	ldr	r3, [r7, #12]
  4023d4:	2201      	movs	r2, #1
  4023d6:	739a      	strb	r2, [r3, #14]
  4023d8:	e002      	b.n	4023e0 <dhcp_handle_ack+0x90>
  } else {
    dhcp->subnet_mask_given = 0;
  4023da:	68fb      	ldr	r3, [r7, #12]
  4023dc:	2200      	movs	r2, #0
  4023de:	739a      	strb	r2, [r3, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  4023e0:	4b07      	ldr	r3, [pc, #28]	; (402400 <dhcp_handle_ack+0xb0>)
  4023e2:	79db      	ldrb	r3, [r3, #7]
  4023e4:	2b00      	cmp	r3, #0
  4023e6:	d007      	beq.n	4023f8 <dhcp_handle_ack+0xa8>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  4023e8:	4b06      	ldr	r3, [pc, #24]	; (402404 <dhcp_handle_ack+0xb4>)
  4023ea:	69db      	ldr	r3, [r3, #28]
  4023ec:	4618      	mov	r0, r3
  4023ee:	4b06      	ldr	r3, [pc, #24]	; (402408 <dhcp_handle_ack+0xb8>)
  4023f0:	4798      	blx	r3
  4023f2:	4602      	mov	r2, r0
  4023f4:	68fb      	ldr	r3, [r7, #12]
  4023f6:	62da      	str	r2, [r3, #44]	; 0x2c
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
  4023f8:	bf00      	nop
  4023fa:	3710      	adds	r7, #16
  4023fc:	46bd      	mov	sp, r7
  4023fe:	bd80      	pop	{r7, pc}
  402400:	20403380 	.word	0x20403380
  402404:	2040338c 	.word	0x2040338c
  402408:	00401e65 	.word	0x00401e65

0040240c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  40240c:	b580      	push	{r7, lr}
  40240e:	b084      	sub	sp, #16
  402410:	af00      	add	r7, sp, #0
  402412:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result = ERR_OK;
  402414:	2300      	movs	r3, #0
  402416:	72fb      	strb	r3, [r7, #11]

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  402418:	687b      	ldr	r3, [r7, #4]
  40241a:	2b00      	cmp	r3, #0
  40241c:	d100      	bne.n	402420 <dhcp_start+0x14>
  40241e:	e7fe      	b.n	40241e <dhcp_start+0x12>
  dhcp = netif->dhcp;
  402420:	687b      	ldr	r3, [r7, #4]
  402422:	6a1b      	ldr	r3, [r3, #32]
  402424:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  402426:	687b      	ldr	r3, [r7, #4]
  402428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40242c:	f023 0308 	bic.w	r3, r3, #8
  402430:	b2da      	uxtb	r2, r3
  402432:	687b      	ldr	r3, [r7, #4]
  402434:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
  402438:	687b      	ldr	r3, [r7, #4]
  40243a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40243e:	f003 0320 	and.w	r3, r3, #32
  402442:	2b00      	cmp	r3, #0
  402444:	d102      	bne.n	40244c <dhcp_start+0x40>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  402446:	f06f 030d 	mvn.w	r3, #13
  40244a:	e06a      	b.n	402522 <dhcp_start+0x116>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  40244c:	687b      	ldr	r3, [r7, #4]
  40244e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402450:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
  402454:	d202      	bcs.n	40245c <dhcp_start+0x50>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  402456:	f04f 33ff 	mov.w	r3, #4294967295
  40245a:	e062      	b.n	402522 <dhcp_start+0x116>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  40245c:	68fb      	ldr	r3, [r7, #12]
  40245e:	2b00      	cmp	r3, #0
  402460:	d10d      	bne.n	40247e <dhcp_start+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  402462:	203c      	movs	r0, #60	; 0x3c
  402464:	4b31      	ldr	r3, [pc, #196]	; (40252c <dhcp_start+0x120>)
  402466:	4798      	blx	r3
  402468:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
  40246a:	68fb      	ldr	r3, [r7, #12]
  40246c:	2b00      	cmp	r3, #0
  40246e:	d102      	bne.n	402476 <dhcp_start+0x6a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  402470:	f04f 33ff 	mov.w	r3, #4294967295
  402474:	e055      	b.n	402522 <dhcp_start+0x116>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
  402476:	687b      	ldr	r3, [r7, #4]
  402478:	68fa      	ldr	r2, [r7, #12]
  40247a:	621a      	str	r2, [r3, #32]
  40247c:	e008      	b.n	402490 <dhcp_start+0x84>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
  40247e:	68fb      	ldr	r3, [r7, #12]
  402480:	685b      	ldr	r3, [r3, #4]
  402482:	2b00      	cmp	r3, #0
  402484:	d004      	beq.n	402490 <dhcp_start+0x84>
      udp_remove(dhcp->pcb);
  402486:	68fb      	ldr	r3, [r7, #12]
  402488:	685b      	ldr	r3, [r3, #4]
  40248a:	4618      	mov	r0, r3
  40248c:	4b28      	ldr	r3, [pc, #160]	; (402530 <dhcp_start+0x124>)
  40248e:	4798      	blx	r3
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  402490:	223c      	movs	r2, #60	; 0x3c
  402492:	2100      	movs	r1, #0
  402494:	68f8      	ldr	r0, [r7, #12]
  402496:	4b27      	ldr	r3, [pc, #156]	; (402534 <dhcp_start+0x128>)
  402498:	4798      	blx	r3
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  40249a:	4b27      	ldr	r3, [pc, #156]	; (402538 <dhcp_start+0x12c>)
  40249c:	4798      	blx	r3
  40249e:	4602      	mov	r2, r0
  4024a0:	68fb      	ldr	r3, [r7, #12]
  4024a2:	605a      	str	r2, [r3, #4]
  if (dhcp->pcb == NULL) {
  4024a4:	68fb      	ldr	r3, [r7, #12]
  4024a6:	685b      	ldr	r3, [r3, #4]
  4024a8:	2b00      	cmp	r3, #0
  4024aa:	d102      	bne.n	4024b2 <dhcp_start+0xa6>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  4024ac:	f04f 33ff 	mov.w	r3, #4294967295
  4024b0:	e037      	b.n	402522 <dhcp_start+0x116>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
  4024b2:	68fb      	ldr	r3, [r7, #12]
  4024b4:	685b      	ldr	r3, [r3, #4]
  4024b6:	68fa      	ldr	r2, [r7, #12]
  4024b8:	6852      	ldr	r2, [r2, #4]
  4024ba:	7a12      	ldrb	r2, [r2, #8]
  4024bc:	f042 0220 	orr.w	r2, r2, #32
  4024c0:	b2d2      	uxtb	r2, r2
  4024c2:	721a      	strb	r2, [r3, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  4024c4:	68fb      	ldr	r3, [r7, #12]
  4024c6:	685b      	ldr	r3, [r3, #4]
  4024c8:	2244      	movs	r2, #68	; 0x44
  4024ca:	491c      	ldr	r1, [pc, #112]	; (40253c <dhcp_start+0x130>)
  4024cc:	4618      	mov	r0, r3
  4024ce:	4b1c      	ldr	r3, [pc, #112]	; (402540 <dhcp_start+0x134>)
  4024d0:	4798      	blx	r3
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  4024d2:	68fb      	ldr	r3, [r7, #12]
  4024d4:	685b      	ldr	r3, [r3, #4]
  4024d6:	2243      	movs	r2, #67	; 0x43
  4024d8:	4918      	ldr	r1, [pc, #96]	; (40253c <dhcp_start+0x130>)
  4024da:	4618      	mov	r0, r3
  4024dc:	4b19      	ldr	r3, [pc, #100]	; (402544 <dhcp_start+0x138>)
  4024de:	4798      	blx	r3
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
  4024e0:	68fb      	ldr	r3, [r7, #12]
  4024e2:	685b      	ldr	r3, [r3, #4]
  4024e4:	687a      	ldr	r2, [r7, #4]
  4024e6:	4918      	ldr	r1, [pc, #96]	; (402548 <dhcp_start+0x13c>)
  4024e8:	4618      	mov	r0, r3
  4024ea:	4b18      	ldr	r3, [pc, #96]	; (40254c <dhcp_start+0x140>)
  4024ec:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  4024ee:	6878      	ldr	r0, [r7, #4]
  4024f0:	4b17      	ldr	r3, [pc, #92]	; (402550 <dhcp_start+0x144>)
  4024f2:	4798      	blx	r3
  4024f4:	4603      	mov	r3, r0
  4024f6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
  4024f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4024fc:	2b00      	cmp	r3, #0
  4024fe:	d005      	beq.n	40250c <dhcp_start+0x100>
    /* free resources allocated above */
    dhcp_stop(netif);
  402500:	6878      	ldr	r0, [r7, #4]
  402502:	4b14      	ldr	r3, [pc, #80]	; (402554 <dhcp_start+0x148>)
  402504:	4798      	blx	r3
    return ERR_MEM;
  402506:	f04f 33ff 	mov.w	r3, #4294967295
  40250a:	e00a      	b.n	402522 <dhcp_start+0x116>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  40250c:	687b      	ldr	r3, [r7, #4]
  40250e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  402512:	f043 0308 	orr.w	r3, r3, #8
  402516:	b2da      	uxtb	r2, r3
  402518:	687b      	ldr	r3, [r7, #4]
  40251a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return result;
  40251e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402522:	4618      	mov	r0, r3
  402524:	3710      	adds	r7, #16
  402526:	46bd      	mov	sp, r7
  402528:	bd80      	pop	{r7, pc}
  40252a:	bf00      	nop
  40252c:	00405141 	.word	0x00405141
  402530:	0040a97d 	.word	0x0040a97d
  402534:	0040cb19 	.word	0x0040cb19
  402538:	0040a9e1 	.word	0x0040a9e1
  40253c:	0040cdbc 	.word	0x0040cdbc
  402540:	0040a7f9 	.word	0x0040a7f9
  402544:	0040a8bd 	.word	0x0040a8bd
  402548:	00403355 	.word	0x00403355
  40254c:	0040a959 	.word	0x0040a959
  402550:	00402681 	.word	0x00402681
  402554:	00402d39 	.word	0x00402d39

00402558 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
  402558:	b580      	push	{r7, lr}
  40255a:	b082      	sub	sp, #8
  40255c:	af00      	add	r7, sp, #0
  40255e:	6078      	str	r0, [r7, #4]
  402560:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  402562:	687b      	ldr	r3, [r7, #4]
  402564:	2b00      	cmp	r3, #0
  402566:	d100      	bne.n	40256a <dhcp_arp_reply+0x12>
  402568:	e7fe      	b.n	402568 <dhcp_arp_reply+0x10>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
  40256a:	687b      	ldr	r3, [r7, #4]
  40256c:	6a1b      	ldr	r3, [r3, #32]
  40256e:	2b00      	cmp	r3, #0
  402570:	d00e      	beq.n	402590 <dhcp_arp_reply+0x38>
  402572:	687b      	ldr	r3, [r7, #4]
  402574:	6a1b      	ldr	r3, [r3, #32]
  402576:	7b1b      	ldrb	r3, [r3, #12]
  402578:	2b08      	cmp	r3, #8
  40257a:	d109      	bne.n	402590 <dhcp_arp_reply+0x38>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
  40257c:	683b      	ldr	r3, [r7, #0]
  40257e:	681a      	ldr	r2, [r3, #0]
  402580:	687b      	ldr	r3, [r7, #4]
  402582:	6a1b      	ldr	r3, [r3, #32]
  402584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402586:	429a      	cmp	r2, r3
  402588:	d102      	bne.n	402590 <dhcp_arp_reply+0x38>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  40258a:	6878      	ldr	r0, [r7, #4]
  40258c:	4b02      	ldr	r3, [pc, #8]	; (402598 <dhcp_arp_reply+0x40>)
  40258e:	4798      	blx	r3
    }
  }
}
  402590:	bf00      	nop
  402592:	3708      	adds	r7, #8
  402594:	46bd      	mov	sp, r7
  402596:	bd80      	pop	{r7, pc}
  402598:	0040259d 	.word	0x0040259d

0040259c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  40259c:	b590      	push	{r4, r7, lr}
  40259e:	b087      	sub	sp, #28
  4025a0:	af02      	add	r7, sp, #8
  4025a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4025a4:	687b      	ldr	r3, [r7, #4]
  4025a6:	6a1b      	ldr	r3, [r3, #32]
  4025a8:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  4025aa:	2300      	movs	r3, #0
  4025ac:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  4025ae:	210c      	movs	r1, #12
  4025b0:	68f8      	ldr	r0, [r7, #12]
  4025b2:	4b28      	ldr	r3, [pc, #160]	; (402654 <dhcp_decline+0xb8>)
  4025b4:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  4025b6:	2204      	movs	r2, #4
  4025b8:	68f9      	ldr	r1, [r7, #12]
  4025ba:	6878      	ldr	r0, [r7, #4]
  4025bc:	4b26      	ldr	r3, [pc, #152]	; (402658 <dhcp_decline+0xbc>)
  4025be:	4798      	blx	r3
  4025c0:	4603      	mov	r3, r0
  4025c2:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  4025c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4025c8:	2b00      	cmp	r3, #0
  4025ca:	d128      	bne.n	40261e <dhcp_decline+0x82>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  4025cc:	2204      	movs	r2, #4
  4025ce:	2132      	movs	r1, #50	; 0x32
  4025d0:	68f8      	ldr	r0, [r7, #12]
  4025d2:	4b22      	ldr	r3, [pc, #136]	; (40265c <dhcp_decline+0xc0>)
  4025d4:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  4025d6:	68fb      	ldr	r3, [r7, #12]
  4025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4025da:	4618      	mov	r0, r3
  4025dc:	4b20      	ldr	r3, [pc, #128]	; (402660 <dhcp_decline+0xc4>)
  4025de:	4798      	blx	r3
  4025e0:	4603      	mov	r3, r0
  4025e2:	4619      	mov	r1, r3
  4025e4:	68f8      	ldr	r0, [r7, #12]
  4025e6:	4b1f      	ldr	r3, [pc, #124]	; (402664 <dhcp_decline+0xc8>)
  4025e8:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  4025ea:	68f8      	ldr	r0, [r7, #12]
  4025ec:	4b1e      	ldr	r3, [pc, #120]	; (402668 <dhcp_decline+0xcc>)
  4025ee:	4798      	blx	r3
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  4025f0:	68fb      	ldr	r3, [r7, #12]
  4025f2:	691a      	ldr	r2, [r3, #16]
  4025f4:	68fb      	ldr	r3, [r7, #12]
  4025f6:	8b1b      	ldrh	r3, [r3, #24]
  4025f8:	33f0      	adds	r3, #240	; 0xf0
  4025fa:	b29b      	uxth	r3, r3
  4025fc:	4619      	mov	r1, r3
  4025fe:	4610      	mov	r0, r2
  402600:	4b1a      	ldr	r3, [pc, #104]	; (40266c <dhcp_decline+0xd0>)
  402602:	4798      	blx	r3

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402604:	68fb      	ldr	r3, [r7, #12]
  402606:	6858      	ldr	r0, [r3, #4]
  402608:	68fb      	ldr	r3, [r7, #12]
  40260a:	6919      	ldr	r1, [r3, #16]
  40260c:	687b      	ldr	r3, [r7, #4]
  40260e:	9300      	str	r3, [sp, #0]
  402610:	2343      	movs	r3, #67	; 0x43
  402612:	4a17      	ldr	r2, [pc, #92]	; (402670 <dhcp_decline+0xd4>)
  402614:	4c17      	ldr	r4, [pc, #92]	; (402674 <dhcp_decline+0xd8>)
  402616:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402618:	68f8      	ldr	r0, [r7, #12]
  40261a:	4b17      	ldr	r3, [pc, #92]	; (402678 <dhcp_decline+0xdc>)
  40261c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40261e:	68fb      	ldr	r3, [r7, #12]
  402620:	7b5b      	ldrb	r3, [r3, #13]
  402622:	3301      	adds	r3, #1
  402624:	b2da      	uxtb	r2, r3
  402626:	68fb      	ldr	r3, [r7, #12]
  402628:	735a      	strb	r2, [r3, #13]
  msecs = 10*1000;
  40262a:	f242 7310 	movw	r3, #10000	; 0x2710
  40262e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402630:	893b      	ldrh	r3, [r7, #8]
  402632:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402636:	4a11      	ldr	r2, [pc, #68]	; (40267c <dhcp_decline+0xe0>)
  402638:	fb82 1203 	smull	r1, r2, r2, r3
  40263c:	1152      	asrs	r2, r2, #5
  40263e:	17db      	asrs	r3, r3, #31
  402640:	1ad3      	subs	r3, r2, r3
  402642:	b29a      	uxth	r2, r3
  402644:	68fb      	ldr	r3, [r7, #12]
  402646:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402648:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  40264c:	4618      	mov	r0, r3
  40264e:	3714      	adds	r7, #20
  402650:	46bd      	mov	sp, r7
  402652:	bd90      	pop	{r4, r7, pc}
  402654:	00402d99 	.word	0x00402d99
  402658:	004034c5 	.word	0x004034c5
  40265c:	00402dcd 	.word	0x00402dcd
  402660:	00401e99 	.word	0x00401e99
  402664:	00402e9f 	.word	0x00402e9f
  402668:	00403731 	.word	0x00403731
  40266c:	00405869 	.word	0x00405869
  402670:	0040cdc0 	.word	0x0040cdc0
  402674:	0040a671 	.word	0x0040a671
  402678:	004036f5 	.word	0x004036f5
  40267c:	10624dd3 	.word	0x10624dd3

00402680 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  402680:	b590      	push	{r4, r7, lr}
  402682:	b087      	sub	sp, #28
  402684:	af02      	add	r7, sp, #8
  402686:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402688:	687b      	ldr	r3, [r7, #4]
  40268a:	6a1b      	ldr	r3, [r3, #32]
  40268c:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  40268e:	2300      	movs	r3, #0
  402690:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
  402692:	68fb      	ldr	r3, [r7, #12]
  402694:	2200      	movs	r2, #0
  402696:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_SELECTING);
  402698:	2106      	movs	r1, #6
  40269a:	68f8      	ldr	r0, [r7, #12]
  40269c:	4b36      	ldr	r3, [pc, #216]	; (402778 <dhcp_discover+0xf8>)
  40269e:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  4026a0:	2201      	movs	r2, #1
  4026a2:	68f9      	ldr	r1, [r7, #12]
  4026a4:	6878      	ldr	r0, [r7, #4]
  4026a6:	4b35      	ldr	r3, [pc, #212]	; (40277c <dhcp_discover+0xfc>)
  4026a8:	4798      	blx	r3
  4026aa:	4603      	mov	r3, r0
  4026ac:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  4026ae:	f997 300b 	ldrsb.w	r3, [r7, #11]
  4026b2:	2b00      	cmp	r3, #0
  4026b4:	d139      	bne.n	40272a <dhcp_discover+0xaa>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  4026b6:	2202      	movs	r2, #2
  4026b8:	2139      	movs	r1, #57	; 0x39
  4026ba:	68f8      	ldr	r0, [r7, #12]
  4026bc:	4b30      	ldr	r3, [pc, #192]	; (402780 <dhcp_discover+0x100>)
  4026be:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  4026c0:	687b      	ldr	r3, [r7, #4]
  4026c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4026c4:	4619      	mov	r1, r3
  4026c6:	68f8      	ldr	r0, [r7, #12]
  4026c8:	4b2e      	ldr	r3, [pc, #184]	; (402784 <dhcp_discover+0x104>)
  4026ca:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  4026cc:	2204      	movs	r2, #4
  4026ce:	2137      	movs	r1, #55	; 0x37
  4026d0:	68f8      	ldr	r0, [r7, #12]
  4026d2:	4b2b      	ldr	r3, [pc, #172]	; (402780 <dhcp_discover+0x100>)
  4026d4:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  4026d6:	2101      	movs	r1, #1
  4026d8:	68f8      	ldr	r0, [r7, #12]
  4026da:	4b2b      	ldr	r3, [pc, #172]	; (402788 <dhcp_discover+0x108>)
  4026dc:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  4026de:	2103      	movs	r1, #3
  4026e0:	68f8      	ldr	r0, [r7, #12]
  4026e2:	4b29      	ldr	r3, [pc, #164]	; (402788 <dhcp_discover+0x108>)
  4026e4:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  4026e6:	211c      	movs	r1, #28
  4026e8:	68f8      	ldr	r0, [r7, #12]
  4026ea:	4b27      	ldr	r3, [pc, #156]	; (402788 <dhcp_discover+0x108>)
  4026ec:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  4026ee:	2106      	movs	r1, #6
  4026f0:	68f8      	ldr	r0, [r7, #12]
  4026f2:	4b25      	ldr	r3, [pc, #148]	; (402788 <dhcp_discover+0x108>)
  4026f4:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  4026f6:	68f8      	ldr	r0, [r7, #12]
  4026f8:	4b24      	ldr	r3, [pc, #144]	; (40278c <dhcp_discover+0x10c>)
  4026fa:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  4026fc:	68fb      	ldr	r3, [r7, #12]
  4026fe:	691a      	ldr	r2, [r3, #16]
  402700:	68fb      	ldr	r3, [r7, #12]
  402702:	8b1b      	ldrh	r3, [r3, #24]
  402704:	33f0      	adds	r3, #240	; 0xf0
  402706:	b29b      	uxth	r3, r3
  402708:	4619      	mov	r1, r3
  40270a:	4610      	mov	r0, r2
  40270c:	4b20      	ldr	r3, [pc, #128]	; (402790 <dhcp_discover+0x110>)
  40270e:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402710:	68fb      	ldr	r3, [r7, #12]
  402712:	6858      	ldr	r0, [r3, #4]
  402714:	68fb      	ldr	r3, [r7, #12]
  402716:	6919      	ldr	r1, [r3, #16]
  402718:	687b      	ldr	r3, [r7, #4]
  40271a:	9300      	str	r3, [sp, #0]
  40271c:	2343      	movs	r3, #67	; 0x43
  40271e:	4a1d      	ldr	r2, [pc, #116]	; (402794 <dhcp_discover+0x114>)
  402720:	4c1d      	ldr	r4, [pc, #116]	; (402798 <dhcp_discover+0x118>)
  402722:	47a0      	blx	r4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  402724:	68f8      	ldr	r0, [r7, #12]
  402726:	4b1d      	ldr	r3, [pc, #116]	; (40279c <dhcp_discover+0x11c>)
  402728:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40272a:	68fb      	ldr	r3, [r7, #12]
  40272c:	7b5b      	ldrb	r3, [r3, #13]
  40272e:	3301      	adds	r3, #1
  402730:	b2da      	uxtb	r2, r3
  402732:	68fb      	ldr	r3, [r7, #12]
  402734:	735a      	strb	r2, [r3, #13]
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  402736:	68fb      	ldr	r3, [r7, #12]
  402738:	7b5b      	ldrb	r3, [r3, #13]
  40273a:	2b05      	cmp	r3, #5
  40273c:	d807      	bhi.n	40274e <dhcp_discover+0xce>
  40273e:	68fb      	ldr	r3, [r7, #12]
  402740:	7b5b      	ldrb	r3, [r3, #13]
  402742:	461a      	mov	r2, r3
  402744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402748:	4093      	lsls	r3, r2
  40274a:	b29b      	uxth	r3, r3
  40274c:	e001      	b.n	402752 <dhcp_discover+0xd2>
  40274e:	f64e 2360 	movw	r3, #60000	; 0xea60
  402752:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402754:	893b      	ldrh	r3, [r7, #8]
  402756:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  40275a:	4a11      	ldr	r2, [pc, #68]	; (4027a0 <dhcp_discover+0x120>)
  40275c:	fb82 1203 	smull	r1, r2, r2, r3
  402760:	1152      	asrs	r2, r2, #5
  402762:	17db      	asrs	r3, r3, #31
  402764:	1ad3      	subs	r3, r2, r3
  402766:	b29a      	uxth	r2, r3
  402768:	68fb      	ldr	r3, [r7, #12]
  40276a:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  40276c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402770:	4618      	mov	r0, r3
  402772:	3714      	adds	r7, #20
  402774:	46bd      	mov	sp, r7
  402776:	bd90      	pop	{r4, r7, pc}
  402778:	00402d99 	.word	0x00402d99
  40277c:	004034c5 	.word	0x004034c5
  402780:	00402dcd 	.word	0x00402dcd
  402784:	00402e49 	.word	0x00402e49
  402788:	00402e19 	.word	0x00402e19
  40278c:	00403731 	.word	0x00403731
  402790:	00405869 	.word	0x00405869
  402794:	0040cdc0 	.word	0x0040cdc0
  402798:	0040a671 	.word	0x0040a671
  40279c:	004036f5 	.word	0x004036f5
  4027a0:	10624dd3 	.word	0x10624dd3

004027a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  4027a4:	b580      	push	{r7, lr}
  4027a6:	b088      	sub	sp, #32
  4027a8:	af00      	add	r7, sp, #0
  4027aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  4027ac:	687b      	ldr	r3, [r7, #4]
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	d100      	bne.n	4027b4 <dhcp_bind+0x10>
  4027b2:	e7fe      	b.n	4027b2 <dhcp_bind+0xe>
  dhcp = netif->dhcp;
  4027b4:	687b      	ldr	r3, [r7, #4]
  4027b6:	6a1b      	ldr	r3, [r3, #32]
  4027b8:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  4027ba:	69bb      	ldr	r3, [r7, #24]
  4027bc:	2b00      	cmp	r3, #0
  4027be:	d100      	bne.n	4027c2 <dhcp_bind+0x1e>
  4027c0:	e7fe      	b.n	4027c0 <dhcp_bind+0x1c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  4027c2:	69bb      	ldr	r3, [r7, #24]
  4027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027ca:	d019      	beq.n	402800 <dhcp_bind+0x5c>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  4027cc:	69bb      	ldr	r3, [r7, #24]
  4027ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4027d0:	331e      	adds	r3, #30
  4027d2:	4a46      	ldr	r2, [pc, #280]	; (4028ec <dhcp_bind+0x148>)
  4027d4:	fba2 2303 	umull	r2, r3, r2, r3
  4027d8:	095b      	lsrs	r3, r3, #5
  4027da:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  4027dc:	69fb      	ldr	r3, [r7, #28]
  4027de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4027e2:	d302      	bcc.n	4027ea <dhcp_bind+0x46>
      timeout = 0xffff;
  4027e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4027e8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  4027ea:	69fb      	ldr	r3, [r7, #28]
  4027ec:	b29a      	uxth	r2, r3
  4027ee:	69bb      	ldr	r3, [r7, #24]
  4027f0:	839a      	strh	r2, [r3, #28]
    if (dhcp->t1_timeout == 0) {
  4027f2:	69bb      	ldr	r3, [r7, #24]
  4027f4:	8b9b      	ldrh	r3, [r3, #28]
  4027f6:	2b00      	cmp	r3, #0
  4027f8:	d102      	bne.n	402800 <dhcp_bind+0x5c>
      dhcp->t1_timeout = 1;
  4027fa:	69bb      	ldr	r3, [r7, #24]
  4027fc:	2201      	movs	r2, #1
  4027fe:	839a      	strh	r2, [r3, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  402800:	69bb      	ldr	r3, [r7, #24]
  402802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402804:	f1b3 3fff 	cmp.w	r3, #4294967295
  402808:	d019      	beq.n	40283e <dhcp_bind+0x9a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  40280a:	69bb      	ldr	r3, [r7, #24]
  40280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40280e:	331e      	adds	r3, #30
  402810:	4a36      	ldr	r2, [pc, #216]	; (4028ec <dhcp_bind+0x148>)
  402812:	fba2 2303 	umull	r2, r3, r2, r3
  402816:	095b      	lsrs	r3, r3, #5
  402818:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  40281a:	69fb      	ldr	r3, [r7, #28]
  40281c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402820:	d302      	bcc.n	402828 <dhcp_bind+0x84>
      timeout = 0xffff;
  402822:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402826:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  402828:	69fb      	ldr	r3, [r7, #28]
  40282a:	b29a      	uxth	r2, r3
  40282c:	69bb      	ldr	r3, [r7, #24]
  40282e:	83da      	strh	r2, [r3, #30]
    if (dhcp->t2_timeout == 0) {
  402830:	69bb      	ldr	r3, [r7, #24]
  402832:	8bdb      	ldrh	r3, [r3, #30]
  402834:	2b00      	cmp	r3, #0
  402836:	d102      	bne.n	40283e <dhcp_bind+0x9a>
      dhcp->t2_timeout = 1;
  402838:	69bb      	ldr	r3, [r7, #24]
  40283a:	2201      	movs	r2, #1
  40283c:	83da      	strh	r2, [r3, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  40283e:	69bb      	ldr	r3, [r7, #24]
  402840:	8b9a      	ldrh	r2, [r3, #28]
  402842:	69bb      	ldr	r3, [r7, #24]
  402844:	8bdb      	ldrh	r3, [r3, #30]
  402846:	429a      	cmp	r2, r3
  402848:	d306      	bcc.n	402858 <dhcp_bind+0xb4>
  40284a:	69bb      	ldr	r3, [r7, #24]
  40284c:	8bdb      	ldrh	r3, [r3, #30]
  40284e:	2b00      	cmp	r3, #0
  402850:	d002      	beq.n	402858 <dhcp_bind+0xb4>
    dhcp->t1_timeout = 0;
  402852:	69bb      	ldr	r3, [r7, #24]
  402854:	2200      	movs	r2, #0
  402856:	839a      	strh	r2, [r3, #28]
  }

  if (dhcp->subnet_mask_given) {
  402858:	69bb      	ldr	r3, [r7, #24]
  40285a:	7b9b      	ldrb	r3, [r3, #14]
  40285c:	2b00      	cmp	r3, #0
  40285e:	d003      	beq.n	402868 <dhcp_bind+0xc4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
  402860:	69bb      	ldr	r3, [r7, #24]
  402862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402864:	613b      	str	r3, [r7, #16]
  402866:	e014      	b.n	402892 <dhcp_bind+0xee>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  402868:	69bb      	ldr	r3, [r7, #24]
  40286a:	3324      	adds	r3, #36	; 0x24
  40286c:	781b      	ldrb	r3, [r3, #0]
  40286e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
  402870:	f997 3017 	ldrsb.w	r3, [r7, #23]
  402874:	2b00      	cmp	r3, #0
  402876:	db02      	blt.n	40287e <dhcp_bind+0xda>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  402878:	23ff      	movs	r3, #255	; 0xff
  40287a:	613b      	str	r3, [r7, #16]
  40287c:	e009      	b.n	402892 <dhcp_bind+0xee>
    } else if (first_octet >= 192) {
  40287e:	7dfb      	ldrb	r3, [r7, #23]
  402880:	2bbf      	cmp	r3, #191	; 0xbf
  402882:	d903      	bls.n	40288c <dhcp_bind+0xe8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  402884:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  402888:	613b      	str	r3, [r7, #16]
  40288a:	e002      	b.n	402892 <dhcp_bind+0xee>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  40288c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402890:	613b      	str	r3, [r7, #16]
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
  402892:	69bb      	ldr	r3, [r7, #24]
  402894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402896:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
  402898:	68fb      	ldr	r3, [r7, #12]
  40289a:	2b00      	cmp	r3, #0
  40289c:	d108      	bne.n	4028b0 <dhcp_bind+0x10c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  40289e:	69bb      	ldr	r3, [r7, #24]
  4028a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  4028a2:	693b      	ldr	r3, [r7, #16]
  4028a4:	4013      	ands	r3, r2
  4028a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  4028a8:	68fb      	ldr	r3, [r7, #12]
  4028aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4028ae:	60fb      	str	r3, [r7, #12]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
  4028b0:	69bb      	ldr	r3, [r7, #24]
  4028b2:	3324      	adds	r3, #36	; 0x24
  4028b4:	4619      	mov	r1, r3
  4028b6:	6878      	ldr	r0, [r7, #4]
  4028b8:	4b0d      	ldr	r3, [pc, #52]	; (4028f0 <dhcp_bind+0x14c>)
  4028ba:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
  4028bc:	f107 0310 	add.w	r3, r7, #16
  4028c0:	4619      	mov	r1, r3
  4028c2:	6878      	ldr	r0, [r7, #4]
  4028c4:	4b0b      	ldr	r3, [pc, #44]	; (4028f4 <dhcp_bind+0x150>)
  4028c6:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
  4028c8:	f107 030c 	add.w	r3, r7, #12
  4028cc:	4619      	mov	r1, r3
  4028ce:	6878      	ldr	r0, [r7, #4]
  4028d0:	4b09      	ldr	r3, [pc, #36]	; (4028f8 <dhcp_bind+0x154>)
  4028d2:	4798      	blx	r3
  /* bring the interface up */
  netif_set_up(netif);
  4028d4:	6878      	ldr	r0, [r7, #4]
  4028d6:	4b09      	ldr	r3, [pc, #36]	; (4028fc <dhcp_bind+0x158>)
  4028d8:	4798      	blx	r3
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
  4028da:	210a      	movs	r1, #10
  4028dc:	69b8      	ldr	r0, [r7, #24]
  4028de:	4b08      	ldr	r3, [pc, #32]	; (402900 <dhcp_bind+0x15c>)
  4028e0:	4798      	blx	r3
}
  4028e2:	bf00      	nop
  4028e4:	3720      	adds	r7, #32
  4028e6:	46bd      	mov	sp, r7
  4028e8:	bd80      	pop	{r7, pc}
  4028ea:	bf00      	nop
  4028ec:	88888889 	.word	0x88888889
  4028f0:	0040547d 	.word	0x0040547d
  4028f4:	00405559 	.word	0x00405559
  4028f8:	00405531 	.word	0x00405531
  4028fc:	004055a1 	.word	0x004055a1
  402900:	00402d99 	.word	0x00402d99

00402904 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  402904:	b590      	push	{r4, r7, lr}
  402906:	b087      	sub	sp, #28
  402908:	af02      	add	r7, sp, #8
  40290a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  40290c:	687b      	ldr	r3, [r7, #4]
  40290e:	6a1b      	ldr	r3, [r3, #32]
  402910:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
  402912:	2105      	movs	r1, #5
  402914:	68f8      	ldr	r0, [r7, #12]
  402916:	4b2f      	ldr	r3, [pc, #188]	; (4029d4 <dhcp_renew+0xd0>)
  402918:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  40291a:	2203      	movs	r2, #3
  40291c:	68f9      	ldr	r1, [r7, #12]
  40291e:	6878      	ldr	r0, [r7, #4]
  402920:	4b2d      	ldr	r3, [pc, #180]	; (4029d8 <dhcp_renew+0xd4>)
  402922:	4798      	blx	r3
  402924:	4603      	mov	r3, r0
  402926:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402928:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40292c:	2b00      	cmp	r3, #0
  40292e:	d126      	bne.n	40297e <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402930:	2202      	movs	r2, #2
  402932:	2139      	movs	r1, #57	; 0x39
  402934:	68f8      	ldr	r0, [r7, #12]
  402936:	4b29      	ldr	r3, [pc, #164]	; (4029dc <dhcp_renew+0xd8>)
  402938:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  40293a:	687b      	ldr	r3, [r7, #4]
  40293c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  40293e:	4619      	mov	r1, r3
  402940:	68f8      	ldr	r0, [r7, #12]
  402942:	4b27      	ldr	r3, [pc, #156]	; (4029e0 <dhcp_renew+0xdc>)
  402944:	4798      	blx	r3
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  402946:	68f8      	ldr	r0, [r7, #12]
  402948:	4b26      	ldr	r3, [pc, #152]	; (4029e4 <dhcp_renew+0xe0>)
  40294a:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40294c:	68fb      	ldr	r3, [r7, #12]
  40294e:	691a      	ldr	r2, [r3, #16]
  402950:	68fb      	ldr	r3, [r7, #12]
  402952:	8b1b      	ldrh	r3, [r3, #24]
  402954:	33f0      	adds	r3, #240	; 0xf0
  402956:	b29b      	uxth	r3, r3
  402958:	4619      	mov	r1, r3
  40295a:	4610      	mov	r0, r2
  40295c:	4b22      	ldr	r3, [pc, #136]	; (4029e8 <dhcp_renew+0xe4>)
  40295e:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  402960:	68fb      	ldr	r3, [r7, #12]
  402962:	6858      	ldr	r0, [r3, #4]
  402964:	68fb      	ldr	r3, [r7, #12]
  402966:	6919      	ldr	r1, [r3, #16]
  402968:	68fb      	ldr	r3, [r7, #12]
  40296a:	f103 0220 	add.w	r2, r3, #32
  40296e:	687b      	ldr	r3, [r7, #4]
  402970:	9300      	str	r3, [sp, #0]
  402972:	2343      	movs	r3, #67	; 0x43
  402974:	4c1d      	ldr	r4, [pc, #116]	; (4029ec <dhcp_renew+0xe8>)
  402976:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402978:	68f8      	ldr	r0, [r7, #12]
  40297a:	4b1d      	ldr	r3, [pc, #116]	; (4029f0 <dhcp_renew+0xec>)
  40297c:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40297e:	68fb      	ldr	r3, [r7, #12]
  402980:	7b5b      	ldrb	r3, [r3, #13]
  402982:	3301      	adds	r3, #1
  402984:	b2da      	uxtb	r2, r3
  402986:	68fb      	ldr	r3, [r7, #12]
  402988:	735a      	strb	r2, [r3, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  40298a:	68fb      	ldr	r3, [r7, #12]
  40298c:	7b5b      	ldrb	r3, [r3, #13]
  40298e:	2b09      	cmp	r3, #9
  402990:	d80a      	bhi.n	4029a8 <dhcp_renew+0xa4>
  402992:	68fb      	ldr	r3, [r7, #12]
  402994:	7b5b      	ldrb	r3, [r3, #13]
  402996:	b29b      	uxth	r3, r3
  402998:	461a      	mov	r2, r3
  40299a:	0152      	lsls	r2, r2, #5
  40299c:	1ad2      	subs	r2, r2, r3
  40299e:	0092      	lsls	r2, r2, #2
  4029a0:	4413      	add	r3, r2
  4029a2:	011b      	lsls	r3, r3, #4
  4029a4:	b29b      	uxth	r3, r3
  4029a6:	e001      	b.n	4029ac <dhcp_renew+0xa8>
  4029a8:	f644 6320 	movw	r3, #20000	; 0x4e20
  4029ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4029ae:	893b      	ldrh	r3, [r7, #8]
  4029b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4029b4:	4a0f      	ldr	r2, [pc, #60]	; (4029f4 <dhcp_renew+0xf0>)
  4029b6:	fb82 1203 	smull	r1, r2, r2, r3
  4029ba:	1152      	asrs	r2, r2, #5
  4029bc:	17db      	asrs	r3, r3, #31
  4029be:	1ad3      	subs	r3, r2, r3
  4029c0:	b29a      	uxth	r2, r3
  4029c2:	68fb      	ldr	r3, [r7, #12]
  4029c4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4029c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4029ca:	4618      	mov	r0, r3
  4029cc:	3714      	adds	r7, #20
  4029ce:	46bd      	mov	sp, r7
  4029d0:	bd90      	pop	{r4, r7, pc}
  4029d2:	bf00      	nop
  4029d4:	00402d99 	.word	0x00402d99
  4029d8:	004034c5 	.word	0x004034c5
  4029dc:	00402dcd 	.word	0x00402dcd
  4029e0:	00402e49 	.word	0x00402e49
  4029e4:	00403731 	.word	0x00403731
  4029e8:	00405869 	.word	0x00405869
  4029ec:	0040a671 	.word	0x0040a671
  4029f0:	004036f5 	.word	0x004036f5
  4029f4:	10624dd3 	.word	0x10624dd3

004029f8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  4029f8:	b590      	push	{r4, r7, lr}
  4029fa:	b087      	sub	sp, #28
  4029fc:	af02      	add	r7, sp, #8
  4029fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402a00:	687b      	ldr	r3, [r7, #4]
  402a02:	6a1b      	ldr	r3, [r3, #32]
  402a04:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
  402a06:	2104      	movs	r1, #4
  402a08:	68f8      	ldr	r0, [r7, #12]
  402a0a:	4b2e      	ldr	r3, [pc, #184]	; (402ac4 <dhcp_rebind+0xcc>)
  402a0c:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402a0e:	2203      	movs	r2, #3
  402a10:	68f9      	ldr	r1, [r7, #12]
  402a12:	6878      	ldr	r0, [r7, #4]
  402a14:	4b2c      	ldr	r3, [pc, #176]	; (402ac8 <dhcp_rebind+0xd0>)
  402a16:	4798      	blx	r3
  402a18:	4603      	mov	r3, r0
  402a1a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402a1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402a20:	2b00      	cmp	r3, #0
  402a22:	d124      	bne.n	402a6e <dhcp_rebind+0x76>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402a24:	2202      	movs	r2, #2
  402a26:	2139      	movs	r1, #57	; 0x39
  402a28:	68f8      	ldr	r0, [r7, #12]
  402a2a:	4b28      	ldr	r3, [pc, #160]	; (402acc <dhcp_rebind+0xd4>)
  402a2c:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402a2e:	687b      	ldr	r3, [r7, #4]
  402a30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402a32:	4619      	mov	r1, r3
  402a34:	68f8      	ldr	r0, [r7, #12]
  402a36:	4b26      	ldr	r3, [pc, #152]	; (402ad0 <dhcp_rebind+0xd8>)
  402a38:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
  402a3a:	68f8      	ldr	r0, [r7, #12]
  402a3c:	4b25      	ldr	r3, [pc, #148]	; (402ad4 <dhcp_rebind+0xdc>)
  402a3e:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402a40:	68fb      	ldr	r3, [r7, #12]
  402a42:	691a      	ldr	r2, [r3, #16]
  402a44:	68fb      	ldr	r3, [r7, #12]
  402a46:	8b1b      	ldrh	r3, [r3, #24]
  402a48:	33f0      	adds	r3, #240	; 0xf0
  402a4a:	b29b      	uxth	r3, r3
  402a4c:	4619      	mov	r1, r3
  402a4e:	4610      	mov	r0, r2
  402a50:	4b21      	ldr	r3, [pc, #132]	; (402ad8 <dhcp_rebind+0xe0>)
  402a52:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402a54:	68fb      	ldr	r3, [r7, #12]
  402a56:	6858      	ldr	r0, [r3, #4]
  402a58:	68fb      	ldr	r3, [r7, #12]
  402a5a:	6919      	ldr	r1, [r3, #16]
  402a5c:	687b      	ldr	r3, [r7, #4]
  402a5e:	9300      	str	r3, [sp, #0]
  402a60:	2343      	movs	r3, #67	; 0x43
  402a62:	4a1e      	ldr	r2, [pc, #120]	; (402adc <dhcp_rebind+0xe4>)
  402a64:	4c1e      	ldr	r4, [pc, #120]	; (402ae0 <dhcp_rebind+0xe8>)
  402a66:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402a68:	68f8      	ldr	r0, [r7, #12]
  402a6a:	4b1e      	ldr	r3, [pc, #120]	; (402ae4 <dhcp_rebind+0xec>)
  402a6c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402a6e:	68fb      	ldr	r3, [r7, #12]
  402a70:	7b5b      	ldrb	r3, [r3, #13]
  402a72:	3301      	adds	r3, #1
  402a74:	b2da      	uxtb	r2, r3
  402a76:	68fb      	ldr	r3, [r7, #12]
  402a78:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402a7a:	68fb      	ldr	r3, [r7, #12]
  402a7c:	7b5b      	ldrb	r3, [r3, #13]
  402a7e:	2b09      	cmp	r3, #9
  402a80:	d80a      	bhi.n	402a98 <dhcp_rebind+0xa0>
  402a82:	68fb      	ldr	r3, [r7, #12]
  402a84:	7b5b      	ldrb	r3, [r3, #13]
  402a86:	b29b      	uxth	r3, r3
  402a88:	461a      	mov	r2, r3
  402a8a:	0152      	lsls	r2, r2, #5
  402a8c:	1ad2      	subs	r2, r2, r3
  402a8e:	0092      	lsls	r2, r2, #2
  402a90:	4413      	add	r3, r2
  402a92:	00db      	lsls	r3, r3, #3
  402a94:	b29b      	uxth	r3, r3
  402a96:	e001      	b.n	402a9c <dhcp_rebind+0xa4>
  402a98:	f242 7310 	movw	r3, #10000	; 0x2710
  402a9c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402a9e:	893b      	ldrh	r3, [r7, #8]
  402aa0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402aa4:	4a10      	ldr	r2, [pc, #64]	; (402ae8 <dhcp_rebind+0xf0>)
  402aa6:	fb82 1203 	smull	r1, r2, r2, r3
  402aaa:	1152      	asrs	r2, r2, #5
  402aac:	17db      	asrs	r3, r3, #31
  402aae:	1ad3      	subs	r3, r2, r3
  402ab0:	b29a      	uxth	r2, r3
  402ab2:	68fb      	ldr	r3, [r7, #12]
  402ab4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402ab6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402aba:	4618      	mov	r0, r3
  402abc:	3714      	adds	r7, #20
  402abe:	46bd      	mov	sp, r7
  402ac0:	bd90      	pop	{r4, r7, pc}
  402ac2:	bf00      	nop
  402ac4:	00402d99 	.word	0x00402d99
  402ac8:	004034c5 	.word	0x004034c5
  402acc:	00402dcd 	.word	0x00402dcd
  402ad0:	00402e49 	.word	0x00402e49
  402ad4:	00403731 	.word	0x00403731
  402ad8:	00405869 	.word	0x00405869
  402adc:	0040cdc0 	.word	0x0040cdc0
  402ae0:	0040a671 	.word	0x0040a671
  402ae4:	004036f5 	.word	0x004036f5
  402ae8:	10624dd3 	.word	0x10624dd3

00402aec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  402aec:	b590      	push	{r4, r7, lr}
  402aee:	b087      	sub	sp, #28
  402af0:	af02      	add	r7, sp, #8
  402af2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402af4:	687b      	ldr	r3, [r7, #4]
  402af6:	6a1b      	ldr	r3, [r3, #32]
  402af8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
  402afa:	2103      	movs	r1, #3
  402afc:	68f8      	ldr	r0, [r7, #12]
  402afe:	4b35      	ldr	r3, [pc, #212]	; (402bd4 <dhcp_reboot+0xe8>)
  402b00:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402b02:	2203      	movs	r2, #3
  402b04:	68f9      	ldr	r1, [r7, #12]
  402b06:	6878      	ldr	r0, [r7, #4]
  402b08:	4b33      	ldr	r3, [pc, #204]	; (402bd8 <dhcp_reboot+0xec>)
  402b0a:	4798      	blx	r3
  402b0c:	4603      	mov	r3, r0
  402b0e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402b14:	2b00      	cmp	r3, #0
  402b16:	d132      	bne.n	402b7e <dhcp_reboot+0x92>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402b18:	2202      	movs	r2, #2
  402b1a:	2139      	movs	r1, #57	; 0x39
  402b1c:	68f8      	ldr	r0, [r7, #12]
  402b1e:	4b2f      	ldr	r3, [pc, #188]	; (402bdc <dhcp_reboot+0xf0>)
  402b20:	4798      	blx	r3
    dhcp_option_short(dhcp, 576);
  402b22:	f44f 7110 	mov.w	r1, #576	; 0x240
  402b26:	68f8      	ldr	r0, [r7, #12]
  402b28:	4b2d      	ldr	r3, [pc, #180]	; (402be0 <dhcp_reboot+0xf4>)
  402b2a:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  402b2c:	2204      	movs	r2, #4
  402b2e:	2132      	movs	r1, #50	; 0x32
  402b30:	68f8      	ldr	r0, [r7, #12]
  402b32:	4b2a      	ldr	r3, [pc, #168]	; (402bdc <dhcp_reboot+0xf0>)
  402b34:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402b36:	68fb      	ldr	r3, [r7, #12]
  402b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402b3a:	4618      	mov	r0, r3
  402b3c:	4b29      	ldr	r3, [pc, #164]	; (402be4 <dhcp_reboot+0xf8>)
  402b3e:	4798      	blx	r3
  402b40:	4603      	mov	r3, r0
  402b42:	4619      	mov	r1, r3
  402b44:	68f8      	ldr	r0, [r7, #12]
  402b46:	4b28      	ldr	r3, [pc, #160]	; (402be8 <dhcp_reboot+0xfc>)
  402b48:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  402b4a:	68f8      	ldr	r0, [r7, #12]
  402b4c:	4b27      	ldr	r3, [pc, #156]	; (402bec <dhcp_reboot+0x100>)
  402b4e:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402b50:	68fb      	ldr	r3, [r7, #12]
  402b52:	691a      	ldr	r2, [r3, #16]
  402b54:	68fb      	ldr	r3, [r7, #12]
  402b56:	8b1b      	ldrh	r3, [r3, #24]
  402b58:	33f0      	adds	r3, #240	; 0xf0
  402b5a:	b29b      	uxth	r3, r3
  402b5c:	4619      	mov	r1, r3
  402b5e:	4610      	mov	r0, r2
  402b60:	4b23      	ldr	r3, [pc, #140]	; (402bf0 <dhcp_reboot+0x104>)
  402b62:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402b64:	68fb      	ldr	r3, [r7, #12]
  402b66:	6858      	ldr	r0, [r3, #4]
  402b68:	68fb      	ldr	r3, [r7, #12]
  402b6a:	6919      	ldr	r1, [r3, #16]
  402b6c:	687b      	ldr	r3, [r7, #4]
  402b6e:	9300      	str	r3, [sp, #0]
  402b70:	2343      	movs	r3, #67	; 0x43
  402b72:	4a20      	ldr	r2, [pc, #128]	; (402bf4 <dhcp_reboot+0x108>)
  402b74:	4c20      	ldr	r4, [pc, #128]	; (402bf8 <dhcp_reboot+0x10c>)
  402b76:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402b78:	68f8      	ldr	r0, [r7, #12]
  402b7a:	4b20      	ldr	r3, [pc, #128]	; (402bfc <dhcp_reboot+0x110>)
  402b7c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402b7e:	68fb      	ldr	r3, [r7, #12]
  402b80:	7b5b      	ldrb	r3, [r3, #13]
  402b82:	3301      	adds	r3, #1
  402b84:	b2da      	uxtb	r2, r3
  402b86:	68fb      	ldr	r3, [r7, #12]
  402b88:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402b8a:	68fb      	ldr	r3, [r7, #12]
  402b8c:	7b5b      	ldrb	r3, [r3, #13]
  402b8e:	2b09      	cmp	r3, #9
  402b90:	d80a      	bhi.n	402ba8 <dhcp_reboot+0xbc>
  402b92:	68fb      	ldr	r3, [r7, #12]
  402b94:	7b5b      	ldrb	r3, [r3, #13]
  402b96:	b29b      	uxth	r3, r3
  402b98:	461a      	mov	r2, r3
  402b9a:	0152      	lsls	r2, r2, #5
  402b9c:	1ad2      	subs	r2, r2, r3
  402b9e:	0092      	lsls	r2, r2, #2
  402ba0:	4413      	add	r3, r2
  402ba2:	00db      	lsls	r3, r3, #3
  402ba4:	b29b      	uxth	r3, r3
  402ba6:	e001      	b.n	402bac <dhcp_reboot+0xc0>
  402ba8:	f242 7310 	movw	r3, #10000	; 0x2710
  402bac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402bae:	893b      	ldrh	r3, [r7, #8]
  402bb0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402bb4:	4a12      	ldr	r2, [pc, #72]	; (402c00 <dhcp_reboot+0x114>)
  402bb6:	fb82 1203 	smull	r1, r2, r2, r3
  402bba:	1152      	asrs	r2, r2, #5
  402bbc:	17db      	asrs	r3, r3, #31
  402bbe:	1ad3      	subs	r3, r2, r3
  402bc0:	b29a      	uxth	r2, r3
  402bc2:	68fb      	ldr	r3, [r7, #12]
  402bc4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402bc6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402bca:	4618      	mov	r0, r3
  402bcc:	3714      	adds	r7, #20
  402bce:	46bd      	mov	sp, r7
  402bd0:	bd90      	pop	{r4, r7, pc}
  402bd2:	bf00      	nop
  402bd4:	00402d99 	.word	0x00402d99
  402bd8:	004034c5 	.word	0x004034c5
  402bdc:	00402dcd 	.word	0x00402dcd
  402be0:	00402e49 	.word	0x00402e49
  402be4:	00401e99 	.word	0x00401e99
  402be8:	00402e9f 	.word	0x00402e9f
  402bec:	00403731 	.word	0x00403731
  402bf0:	00405869 	.word	0x00405869
  402bf4:	0040cdc0 	.word	0x0040cdc0
  402bf8:	0040a671 	.word	0x0040a671
  402bfc:	004036f5 	.word	0x004036f5
  402c00:	10624dd3 	.word	0x10624dd3

00402c04 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  402c04:	b590      	push	{r4, r7, lr}
  402c06:	b087      	sub	sp, #28
  402c08:	af02      	add	r7, sp, #8
  402c0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402c0c:	687b      	ldr	r3, [r7, #4]
  402c0e:	6a1b      	ldr	r3, [r3, #32]
  402c10:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
  402c12:	2100      	movs	r1, #0
  402c14:	68f8      	ldr	r0, [r7, #12]
  402c16:	4b3c      	ldr	r3, [pc, #240]	; (402d08 <dhcp_release+0x104>)
  402c18:	4798      	blx	r3
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
  402c1a:	68fb      	ldr	r3, [r7, #12]
  402c1c:	2200      	movs	r2, #0
  402c1e:	621a      	str	r2, [r3, #32]
  ip_addr_set_zero(&dhcp->offered_ip_addr);
  402c20:	68fb      	ldr	r3, [r7, #12]
  402c22:	2200      	movs	r2, #0
  402c24:	625a      	str	r2, [r3, #36]	; 0x24
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  402c26:	68fb      	ldr	r3, [r7, #12]
  402c28:	2200      	movs	r2, #0
  402c2a:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  402c2c:	68fb      	ldr	r3, [r7, #12]
  402c2e:	2200      	movs	r2, #0
  402c30:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  402c32:	68fb      	ldr	r3, [r7, #12]
  402c34:	2200      	movs	r2, #0
  402c36:	639a      	str	r2, [r3, #56]	; 0x38
  402c38:	68fb      	ldr	r3, [r7, #12]
  402c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402c3c:	68fb      	ldr	r3, [r7, #12]
  402c3e:	635a      	str	r2, [r3, #52]	; 0x34
  402c40:	68fb      	ldr	r3, [r7, #12]
  402c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  402c44:	68fb      	ldr	r3, [r7, #12]
  402c46:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  402c48:	2207      	movs	r2, #7
  402c4a:	68f9      	ldr	r1, [r7, #12]
  402c4c:	6878      	ldr	r0, [r7, #4]
  402c4e:	4b2f      	ldr	r3, [pc, #188]	; (402d0c <dhcp_release+0x108>)
  402c50:	4798      	blx	r3
  402c52:	4603      	mov	r3, r0
  402c54:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402c56:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402c5a:	2b00      	cmp	r3, #0
  402c5c:	d11b      	bne.n	402c96 <dhcp_release+0x92>
    dhcp_option_trailer(dhcp);
  402c5e:	68f8      	ldr	r0, [r7, #12]
  402c60:	4b2b      	ldr	r3, [pc, #172]	; (402d10 <dhcp_release+0x10c>)
  402c62:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402c64:	68fb      	ldr	r3, [r7, #12]
  402c66:	691a      	ldr	r2, [r3, #16]
  402c68:	68fb      	ldr	r3, [r7, #12]
  402c6a:	8b1b      	ldrh	r3, [r3, #24]
  402c6c:	33f0      	adds	r3, #240	; 0xf0
  402c6e:	b29b      	uxth	r3, r3
  402c70:	4619      	mov	r1, r3
  402c72:	4610      	mov	r0, r2
  402c74:	4b27      	ldr	r3, [pc, #156]	; (402d14 <dhcp_release+0x110>)
  402c76:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  402c78:	68fb      	ldr	r3, [r7, #12]
  402c7a:	6858      	ldr	r0, [r3, #4]
  402c7c:	68fb      	ldr	r3, [r7, #12]
  402c7e:	6919      	ldr	r1, [r3, #16]
  402c80:	68fb      	ldr	r3, [r7, #12]
  402c82:	f103 0220 	add.w	r2, r3, #32
  402c86:	687b      	ldr	r3, [r7, #4]
  402c88:	9300      	str	r3, [sp, #0]
  402c8a:	2343      	movs	r3, #67	; 0x43
  402c8c:	4c22      	ldr	r4, [pc, #136]	; (402d18 <dhcp_release+0x114>)
  402c8e:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402c90:	68f8      	ldr	r0, [r7, #12]
  402c92:	4b22      	ldr	r3, [pc, #136]	; (402d1c <dhcp_release+0x118>)
  402c94:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402c96:	68fb      	ldr	r3, [r7, #12]
  402c98:	7b5b      	ldrb	r3, [r3, #13]
  402c9a:	3301      	adds	r3, #1
  402c9c:	b2da      	uxtb	r2, r3
  402c9e:	68fb      	ldr	r3, [r7, #12]
  402ca0:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402ca2:	68fb      	ldr	r3, [r7, #12]
  402ca4:	7b5b      	ldrb	r3, [r3, #13]
  402ca6:	2b09      	cmp	r3, #9
  402ca8:	d80a      	bhi.n	402cc0 <dhcp_release+0xbc>
  402caa:	68fb      	ldr	r3, [r7, #12]
  402cac:	7b5b      	ldrb	r3, [r3, #13]
  402cae:	b29b      	uxth	r3, r3
  402cb0:	461a      	mov	r2, r3
  402cb2:	0152      	lsls	r2, r2, #5
  402cb4:	1ad2      	subs	r2, r2, r3
  402cb6:	0092      	lsls	r2, r2, #2
  402cb8:	4413      	add	r3, r2
  402cba:	00db      	lsls	r3, r3, #3
  402cbc:	b29b      	uxth	r3, r3
  402cbe:	e001      	b.n	402cc4 <dhcp_release+0xc0>
  402cc0:	f242 7310 	movw	r3, #10000	; 0x2710
  402cc4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402cc6:	893b      	ldrh	r3, [r7, #8]
  402cc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402ccc:	4a14      	ldr	r2, [pc, #80]	; (402d20 <dhcp_release+0x11c>)
  402cce:	fb82 1203 	smull	r1, r2, r2, r3
  402cd2:	1152      	asrs	r2, r2, #5
  402cd4:	17db      	asrs	r3, r3, #31
  402cd6:	1ad3      	subs	r3, r2, r3
  402cd8:	b29a      	uxth	r2, r3
  402cda:	68fb      	ldr	r3, [r7, #12]
  402cdc:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
  402cde:	6878      	ldr	r0, [r7, #4]
  402ce0:	4b10      	ldr	r3, [pc, #64]	; (402d24 <dhcp_release+0x120>)
  402ce2:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  402ce4:	4910      	ldr	r1, [pc, #64]	; (402d28 <dhcp_release+0x124>)
  402ce6:	6878      	ldr	r0, [r7, #4]
  402ce8:	4b10      	ldr	r3, [pc, #64]	; (402d2c <dhcp_release+0x128>)
  402cea:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  402cec:	490e      	ldr	r1, [pc, #56]	; (402d28 <dhcp_release+0x124>)
  402cee:	6878      	ldr	r0, [r7, #4]
  402cf0:	4b0f      	ldr	r3, [pc, #60]	; (402d30 <dhcp_release+0x12c>)
  402cf2:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY);
  402cf4:	490c      	ldr	r1, [pc, #48]	; (402d28 <dhcp_release+0x124>)
  402cf6:	6878      	ldr	r0, [r7, #4]
  402cf8:	4b0e      	ldr	r3, [pc, #56]	; (402d34 <dhcp_release+0x130>)
  402cfa:	4798      	blx	r3
  
  return result;
  402cfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402d00:	4618      	mov	r0, r3
  402d02:	3714      	adds	r7, #20
  402d04:	46bd      	mov	sp, r7
  402d06:	bd90      	pop	{r4, r7, pc}
  402d08:	00402d99 	.word	0x00402d99
  402d0c:	004034c5 	.word	0x004034c5
  402d10:	00403731 	.word	0x00403731
  402d14:	00405869 	.word	0x00405869
  402d18:	0040a671 	.word	0x0040a671
  402d1c:	004036f5 	.word	0x004036f5
  402d20:	10624dd3 	.word	0x10624dd3
  402d24:	004055fd 	.word	0x004055fd
  402d28:	0040cdbc 	.word	0x0040cdbc
  402d2c:	0040547d 	.word	0x0040547d
  402d30:	00405531 	.word	0x00405531
  402d34:	00405559 	.word	0x00405559

00402d38 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  402d38:	b580      	push	{r7, lr}
  402d3a:	b084      	sub	sp, #16
  402d3c:	af00      	add	r7, sp, #0
  402d3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  402d40:	687b      	ldr	r3, [r7, #4]
  402d42:	2b00      	cmp	r3, #0
  402d44:	d100      	bne.n	402d48 <dhcp_stop+0x10>
  402d46:	e7fe      	b.n	402d46 <dhcp_stop+0xe>
  dhcp = netif->dhcp;
  402d48:	687b      	ldr	r3, [r7, #4]
  402d4a:	6a1b      	ldr	r3, [r3, #32]
  402d4c:	60fb      	str	r3, [r7, #12]
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  402d4e:	687b      	ldr	r3, [r7, #4]
  402d50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  402d54:	f023 0308 	bic.w	r3, r3, #8
  402d58:	b2da      	uxtb	r2, r3
  402d5a:	687b      	ldr	r3, [r7, #4]
  402d5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  402d60:	68fb      	ldr	r3, [r7, #12]
  402d62:	2b00      	cmp	r3, #0
  402d64:	d00f      	beq.n	402d86 <dhcp_stop+0x4e>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
  402d66:	68fb      	ldr	r3, [r7, #12]
  402d68:	685b      	ldr	r3, [r3, #4]
  402d6a:	2b00      	cmp	r3, #0
  402d6c:	d007      	beq.n	402d7e <dhcp_stop+0x46>
      udp_remove(dhcp->pcb);
  402d6e:	68fb      	ldr	r3, [r7, #12]
  402d70:	685b      	ldr	r3, [r3, #4]
  402d72:	4618      	mov	r0, r3
  402d74:	4b06      	ldr	r3, [pc, #24]	; (402d90 <dhcp_stop+0x58>)
  402d76:	4798      	blx	r3
      dhcp->pcb = NULL;
  402d78:	68fb      	ldr	r3, [r7, #12]
  402d7a:	2200      	movs	r2, #0
  402d7c:	605a      	str	r2, [r3, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
  402d7e:	2100      	movs	r1, #0
  402d80:	68f8      	ldr	r0, [r7, #12]
  402d82:	4b04      	ldr	r3, [pc, #16]	; (402d94 <dhcp_stop+0x5c>)
  402d84:	4798      	blx	r3
  }
}
  402d86:	bf00      	nop
  402d88:	3710      	adds	r7, #16
  402d8a:	46bd      	mov	sp, r7
  402d8c:	bd80      	pop	{r7, pc}
  402d8e:	bf00      	nop
  402d90:	0040a97d 	.word	0x0040a97d
  402d94:	00402d99 	.word	0x00402d99

00402d98 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  402d98:	b480      	push	{r7}
  402d9a:	b083      	sub	sp, #12
  402d9c:	af00      	add	r7, sp, #0
  402d9e:	6078      	str	r0, [r7, #4]
  402da0:	460b      	mov	r3, r1
  402da2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
  402da4:	687b      	ldr	r3, [r7, #4]
  402da6:	7b1b      	ldrb	r3, [r3, #12]
  402da8:	78fa      	ldrb	r2, [r7, #3]
  402daa:	429a      	cmp	r2, r3
  402dac:	d008      	beq.n	402dc0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
  402dae:	687b      	ldr	r3, [r7, #4]
  402db0:	78fa      	ldrb	r2, [r7, #3]
  402db2:	731a      	strb	r2, [r3, #12]
    dhcp->tries = 0;
  402db4:	687b      	ldr	r3, [r7, #4]
  402db6:	2200      	movs	r2, #0
  402db8:	735a      	strb	r2, [r3, #13]
    dhcp->request_timeout = 0;
  402dba:	687b      	ldr	r3, [r7, #4]
  402dbc:	2200      	movs	r2, #0
  402dbe:	835a      	strh	r2, [r3, #26]
  }
}
  402dc0:	bf00      	nop
  402dc2:	370c      	adds	r7, #12
  402dc4:	46bd      	mov	sp, r7
  402dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
  402dca:	4770      	bx	lr

00402dcc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  402dcc:	b480      	push	{r7}
  402dce:	b083      	sub	sp, #12
  402dd0:	af00      	add	r7, sp, #0
  402dd2:	6078      	str	r0, [r7, #4]
  402dd4:	460b      	mov	r3, r1
  402dd6:	70fb      	strb	r3, [r7, #3]
  402dd8:	4613      	mov	r3, r2
  402dda:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  402ddc:	687b      	ldr	r3, [r7, #4]
  402dde:	695a      	ldr	r2, [r3, #20]
  402de0:	687b      	ldr	r3, [r7, #4]
  402de2:	8b1b      	ldrh	r3, [r3, #24]
  402de4:	1c59      	adds	r1, r3, #1
  402de6:	b288      	uxth	r0, r1
  402de8:	6879      	ldr	r1, [r7, #4]
  402dea:	8308      	strh	r0, [r1, #24]
  402dec:	4413      	add	r3, r2
  402dee:	78fa      	ldrb	r2, [r7, #3]
  402df0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  402df4:	687b      	ldr	r3, [r7, #4]
  402df6:	695a      	ldr	r2, [r3, #20]
  402df8:	687b      	ldr	r3, [r7, #4]
  402dfa:	8b1b      	ldrh	r3, [r3, #24]
  402dfc:	1c59      	adds	r1, r3, #1
  402dfe:	b288      	uxth	r0, r1
  402e00:	6879      	ldr	r1, [r7, #4]
  402e02:	8308      	strh	r0, [r1, #24]
  402e04:	4413      	add	r3, r2
  402e06:	78ba      	ldrb	r2, [r7, #2]
  402e08:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402e0c:	bf00      	nop
  402e0e:	370c      	adds	r7, #12
  402e10:	46bd      	mov	sp, r7
  402e12:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e16:	4770      	bx	lr

00402e18 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  402e18:	b480      	push	{r7}
  402e1a:	b083      	sub	sp, #12
  402e1c:	af00      	add	r7, sp, #0
  402e1e:	6078      	str	r0, [r7, #4]
  402e20:	460b      	mov	r3, r1
  402e22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  402e24:	687b      	ldr	r3, [r7, #4]
  402e26:	695a      	ldr	r2, [r3, #20]
  402e28:	687b      	ldr	r3, [r7, #4]
  402e2a:	8b1b      	ldrh	r3, [r3, #24]
  402e2c:	1c59      	adds	r1, r3, #1
  402e2e:	b288      	uxth	r0, r1
  402e30:	6879      	ldr	r1, [r7, #4]
  402e32:	8308      	strh	r0, [r1, #24]
  402e34:	4413      	add	r3, r2
  402e36:	78fa      	ldrb	r2, [r7, #3]
  402e38:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402e3c:	bf00      	nop
  402e3e:	370c      	adds	r7, #12
  402e40:	46bd      	mov	sp, r7
  402e42:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e46:	4770      	bx	lr

00402e48 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  402e48:	b480      	push	{r7}
  402e4a:	b083      	sub	sp, #12
  402e4c:	af00      	add	r7, sp, #0
  402e4e:	6078      	str	r0, [r7, #4]
  402e50:	460b      	mov	r3, r1
  402e52:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  402e54:	687b      	ldr	r3, [r7, #4]
  402e56:	695a      	ldr	r2, [r3, #20]
  402e58:	687b      	ldr	r3, [r7, #4]
  402e5a:	8b1b      	ldrh	r3, [r3, #24]
  402e5c:	1c59      	adds	r1, r3, #1
  402e5e:	b288      	uxth	r0, r1
  402e60:	6879      	ldr	r1, [r7, #4]
  402e62:	8308      	strh	r0, [r1, #24]
  402e64:	4618      	mov	r0, r3
  402e66:	887b      	ldrh	r3, [r7, #2]
  402e68:	0a1b      	lsrs	r3, r3, #8
  402e6a:	b29b      	uxth	r3, r3
  402e6c:	b2d9      	uxtb	r1, r3
  402e6e:	1813      	adds	r3, r2, r0
  402e70:	460a      	mov	r2, r1
  402e72:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  402e76:	687b      	ldr	r3, [r7, #4]
  402e78:	695a      	ldr	r2, [r3, #20]
  402e7a:	687b      	ldr	r3, [r7, #4]
  402e7c:	8b1b      	ldrh	r3, [r3, #24]
  402e7e:	1c59      	adds	r1, r3, #1
  402e80:	b288      	uxth	r0, r1
  402e82:	6879      	ldr	r1, [r7, #4]
  402e84:	8308      	strh	r0, [r1, #24]
  402e86:	8879      	ldrh	r1, [r7, #2]
  402e88:	b2c9      	uxtb	r1, r1
  402e8a:	4413      	add	r3, r2
  402e8c:	460a      	mov	r2, r1
  402e8e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402e92:	bf00      	nop
  402e94:	370c      	adds	r7, #12
  402e96:	46bd      	mov	sp, r7
  402e98:	f85d 7b04 	ldr.w	r7, [sp], #4
  402e9c:	4770      	bx	lr

00402e9e <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  402e9e:	b480      	push	{r7}
  402ea0:	b083      	sub	sp, #12
  402ea2:	af00      	add	r7, sp, #0
  402ea4:	6078      	str	r0, [r7, #4]
  402ea6:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  402ea8:	687b      	ldr	r3, [r7, #4]
  402eaa:	695a      	ldr	r2, [r3, #20]
  402eac:	687b      	ldr	r3, [r7, #4]
  402eae:	8b1b      	ldrh	r3, [r3, #24]
  402eb0:	1c59      	adds	r1, r3, #1
  402eb2:	b288      	uxth	r0, r1
  402eb4:	6879      	ldr	r1, [r7, #4]
  402eb6:	8308      	strh	r0, [r1, #24]
  402eb8:	4618      	mov	r0, r3
  402eba:	683b      	ldr	r3, [r7, #0]
  402ebc:	0e1b      	lsrs	r3, r3, #24
  402ebe:	b2d9      	uxtb	r1, r3
  402ec0:	1813      	adds	r3, r2, r0
  402ec2:	460a      	mov	r2, r1
  402ec4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  402ec8:	687b      	ldr	r3, [r7, #4]
  402eca:	695a      	ldr	r2, [r3, #20]
  402ecc:	687b      	ldr	r3, [r7, #4]
  402ece:	8b1b      	ldrh	r3, [r3, #24]
  402ed0:	1c59      	adds	r1, r3, #1
  402ed2:	b288      	uxth	r0, r1
  402ed4:	6879      	ldr	r1, [r7, #4]
  402ed6:	8308      	strh	r0, [r1, #24]
  402ed8:	4618      	mov	r0, r3
  402eda:	683b      	ldr	r3, [r7, #0]
  402edc:	0c1b      	lsrs	r3, r3, #16
  402ede:	b2d9      	uxtb	r1, r3
  402ee0:	1813      	adds	r3, r2, r0
  402ee2:	460a      	mov	r2, r1
  402ee4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  402ee8:	687b      	ldr	r3, [r7, #4]
  402eea:	695a      	ldr	r2, [r3, #20]
  402eec:	687b      	ldr	r3, [r7, #4]
  402eee:	8b1b      	ldrh	r3, [r3, #24]
  402ef0:	1c59      	adds	r1, r3, #1
  402ef2:	b288      	uxth	r0, r1
  402ef4:	6879      	ldr	r1, [r7, #4]
  402ef6:	8308      	strh	r0, [r1, #24]
  402ef8:	4618      	mov	r0, r3
  402efa:	683b      	ldr	r3, [r7, #0]
  402efc:	0a1b      	lsrs	r3, r3, #8
  402efe:	b2d9      	uxtb	r1, r3
  402f00:	1813      	adds	r3, r2, r0
  402f02:	460a      	mov	r2, r1
  402f04:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  402f08:	687b      	ldr	r3, [r7, #4]
  402f0a:	695a      	ldr	r2, [r3, #20]
  402f0c:	687b      	ldr	r3, [r7, #4]
  402f0e:	8b1b      	ldrh	r3, [r3, #24]
  402f10:	1c59      	adds	r1, r3, #1
  402f12:	b288      	uxth	r0, r1
  402f14:	6879      	ldr	r1, [r7, #4]
  402f16:	8308      	strh	r0, [r1, #24]
  402f18:	6839      	ldr	r1, [r7, #0]
  402f1a:	b2c9      	uxtb	r1, r1
  402f1c:	4413      	add	r3, r2
  402f1e:	460a      	mov	r2, r1
  402f20:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402f24:	bf00      	nop
  402f26:	370c      	adds	r7, #12
  402f28:	46bd      	mov	sp, r7
  402f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f2e:	4770      	bx	lr

00402f30 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  402f30:	b590      	push	{r4, r7, lr}
  402f32:	b08f      	sub	sp, #60	; 0x3c
  402f34:	af00      	add	r7, sp, #0
  402f36:	6078      	str	r0, [r7, #4]
  402f38:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  402f3a:	2300      	movs	r3, #0
  402f3c:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
  402f3e:	2300      	movs	r3, #0
  402f40:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  402f42:	220a      	movs	r2, #10
  402f44:	2100      	movs	r1, #0
  402f46:	48a8      	ldr	r0, [pc, #672]	; (4031e8 <dhcp_parse_reply+0x2b8>)
  402f48:	4ba8      	ldr	r3, [pc, #672]	; (4031ec <dhcp_parse_reply+0x2bc>)
  402f4a:	4798      	blx	r3
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  402f4c:	683b      	ldr	r3, [r7, #0]
  402f4e:	895b      	ldrh	r3, [r3, #10]
  402f50:	2b2b      	cmp	r3, #43	; 0x2b
  402f52:	d802      	bhi.n	402f5a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
  402f54:	f06f 0301 	mvn.w	r3, #1
  402f58:	e1ed      	b.n	403336 <dhcp_parse_reply+0x406>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  402f5a:	683b      	ldr	r3, [r7, #0]
  402f5c:	685a      	ldr	r2, [r3, #4]
  402f5e:	687b      	ldr	r3, [r7, #4]
  402f60:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  402f62:	23f0      	movs	r3, #240	; 0xf0
  402f64:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  402f66:	683b      	ldr	r3, [r7, #0]
  402f68:	891b      	ldrh	r3, [r3, #8]
  402f6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
  402f6c:	683b      	ldr	r3, [r7, #0]
  402f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  while((q != NULL) && (options_idx >= q->len)) {
  402f70:	e00c      	b.n	402f8c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
  402f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f74:	895b      	ldrh	r3, [r3, #10]
  402f76:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  402f78:	1ad3      	subs	r3, r2, r3
  402f7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
  402f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f7e:	895b      	ldrh	r3, [r3, #10]
  402f80:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  402f82:	1ad3      	subs	r3, r2, r3
  402f84:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
  402f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f88:	681b      	ldr	r3, [r3, #0]
  402f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  while((q != NULL) && (options_idx >= q->len)) {
  402f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f8e:	2b00      	cmp	r3, #0
  402f90:	d004      	beq.n	402f9c <dhcp_parse_reply+0x6c>
  402f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f94:	895b      	ldrh	r3, [r3, #10]
  402f96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  402f98:	429a      	cmp	r2, r3
  402f9a:	d2ea      	bcs.n	402f72 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
  402f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402f9e:	2b00      	cmp	r3, #0
  402fa0:	d102      	bne.n	402fa8 <dhcp_parse_reply+0x78>
    return ERR_BUF;
  402fa2:	f06f 0301 	mvn.w	r3, #1
  402fa6:	e1c6      	b.n	403336 <dhcp_parse_reply+0x406>
  }
  offset = options_idx;
  402fa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  402faa:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
  402fac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  402fae:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
  402fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fb2:	685b      	ldr	r3, [r3, #4]
  402fb4:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  402fb6:	e17e      	b.n	4032b6 <dhcp_parse_reply+0x386>
    u8_t op = options[offset];
  402fb8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  402fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  402fbc:	4413      	add	r3, r2
  402fbe:	781b      	ldrb	r3, [r3, #0]
  402fc0:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
  402fc2:	2300      	movs	r3, #0
  402fc4:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
  402fc6:	f04f 33ff 	mov.w	r3, #4294967295
  402fca:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
  402fcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  402fce:	3302      	adds	r3, #2
  402fd0:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
  402fd2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  402fd4:	3301      	adds	r3, #1
  402fd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402fd8:	8952      	ldrh	r2, [r2, #10]
  402fda:	4293      	cmp	r3, r2
  402fdc:	da06      	bge.n	402fec <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
  402fde:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  402fe0:	3301      	adds	r3, #1
  402fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  402fe4:	4413      	add	r3, r2
  402fe6:	781b      	ldrb	r3, [r3, #0]
  402fe8:	77fb      	strb	r3, [r7, #31]
  402fea:	e00a      	b.n	403002 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  402fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402fee:	681b      	ldr	r3, [r3, #0]
  402ff0:	2b00      	cmp	r3, #0
  402ff2:	d004      	beq.n	402ffe <dhcp_parse_reply+0xce>
  402ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402ff6:	681b      	ldr	r3, [r3, #0]
  402ff8:	685b      	ldr	r3, [r3, #4]
  402ffa:	781b      	ldrb	r3, [r3, #0]
  402ffc:	e000      	b.n	403000 <dhcp_parse_reply+0xd0>
  402ffe:	2300      	movs	r3, #0
  403000:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  403002:	7ffb      	ldrb	r3, [r7, #31]
  403004:	77bb      	strb	r3, [r7, #30]
    switch(op) {
  403006:	7d7b      	ldrb	r3, [r7, #21]
  403008:	2b3b      	cmp	r3, #59	; 0x3b
  40300a:	f200 80d2 	bhi.w	4031b2 <dhcp_parse_reply+0x282>
  40300e:	a201      	add	r2, pc, #4	; (adr r2, 403014 <dhcp_parse_reply+0xe4>)
  403010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403014:	00403105 	.word	0x00403105
  403018:	00403115 	.word	0x00403115
  40301c:	004031b3 	.word	0x004031b3
  403020:	00403123 	.word	0x00403123
  403024:	004031b3 	.word	0x004031b3
  403028:	004031b3 	.word	0x004031b3
  40302c:	00403137 	.word	0x00403137
  403030:	004031b3 	.word	0x004031b3
  403034:	004031b3 	.word	0x004031b3
  403038:	004031b3 	.word	0x004031b3
  40303c:	004031b3 	.word	0x004031b3
  403040:	004031b3 	.word	0x004031b3
  403044:	004031b3 	.word	0x004031b3
  403048:	004031b3 	.word	0x004031b3
  40304c:	004031b3 	.word	0x004031b3
  403050:	004031b3 	.word	0x004031b3
  403054:	004031b3 	.word	0x004031b3
  403058:	004031b3 	.word	0x004031b3
  40305c:	004031b3 	.word	0x004031b3
  403060:	004031b3 	.word	0x004031b3
  403064:	004031b3 	.word	0x004031b3
  403068:	004031b3 	.word	0x004031b3
  40306c:	004031b3 	.word	0x004031b3
  403070:	004031b3 	.word	0x004031b3
  403074:	004031b3 	.word	0x004031b3
  403078:	004031b3 	.word	0x004031b3
  40307c:	004031b3 	.word	0x004031b3
  403080:	004031b3 	.word	0x004031b3
  403084:	004031b3 	.word	0x004031b3
  403088:	004031b3 	.word	0x004031b3
  40308c:	004031b3 	.word	0x004031b3
  403090:	004031b3 	.word	0x004031b3
  403094:	004031b3 	.word	0x004031b3
  403098:	004031b3 	.word	0x004031b3
  40309c:	004031b3 	.word	0x004031b3
  4030a0:	004031b3 	.word	0x004031b3
  4030a4:	004031b3 	.word	0x004031b3
  4030a8:	004031b3 	.word	0x004031b3
  4030ac:	004031b3 	.word	0x004031b3
  4030b0:	004031b3 	.word	0x004031b3
  4030b4:	004031b3 	.word	0x004031b3
  4030b8:	004031b3 	.word	0x004031b3
  4030bc:	004031b3 	.word	0x004031b3
  4030c0:	004031b3 	.word	0x004031b3
  4030c4:	004031b3 	.word	0x004031b3
  4030c8:	004031b3 	.word	0x004031b3
  4030cc:	004031b3 	.word	0x004031b3
  4030d0:	004031b3 	.word	0x004031b3
  4030d4:	004031b3 	.word	0x004031b3
  4030d8:	004031b3 	.word	0x004031b3
  4030dc:	004031b3 	.word	0x004031b3
  4030e0:	0040315f 	.word	0x0040315f
  4030e4:	0040316d 	.word	0x0040316d
  4030e8:	0040317b 	.word	0x0040317b
  4030ec:	00403189 	.word	0x00403189
  4030f0:	004031b3 	.word	0x004031b3
  4030f4:	004031b3 	.word	0x004031b3
  4030f8:	004031b3 	.word	0x004031b3
  4030fc:	00403197 	.word	0x00403197
  403100:	004031a5 	.word	0x004031a5
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  403104:	2300      	movs	r3, #0
  403106:	77fb      	strb	r3, [r7, #31]
  403108:	7ffb      	ldrb	r3, [r7, #31]
  40310a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
  40310c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40310e:	3b01      	subs	r3, #1
  403110:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
  403112:	e051      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403114:	7ffb      	ldrb	r3, [r7, #31]
  403116:	2b04      	cmp	r3, #4
  403118:	d000      	beq.n	40311c <dhcp_parse_reply+0x1ec>
  40311a:	e7fe      	b.n	40311a <dhcp_parse_reply+0x1ea>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  40311c:	2306      	movs	r3, #6
  40311e:	61bb      	str	r3, [r7, #24]
        break;
  403120:	e04a      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  403122:	2304      	movs	r3, #4
  403124:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  403126:	7ffa      	ldrb	r2, [r7, #31]
  403128:	7fbb      	ldrb	r3, [r7, #30]
  40312a:	429a      	cmp	r2, r3
  40312c:	d200      	bcs.n	403130 <dhcp_parse_reply+0x200>
  40312e:	e7fe      	b.n	40312e <dhcp_parse_reply+0x1fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  403130:	2307      	movs	r3, #7
  403132:	61bb      	str	r3, [r7, #24]
        break;
  403134:	e040      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
  403136:	7ffb      	ldrb	r3, [r7, #31]
  403138:	f003 0303 	and.w	r3, r3, #3
  40313c:	b2db      	uxtb	r3, r3
  40313e:	2b00      	cmp	r3, #0
  403140:	d000      	beq.n	403144 <dhcp_parse_reply+0x214>
  403142:	e7fe      	b.n	403142 <dhcp_parse_reply+0x212>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  403144:	7ffb      	ldrb	r3, [r7, #31]
  403146:	2b08      	cmp	r3, #8
  403148:	bf28      	it	cs
  40314a:	2308      	movcs	r3, #8
  40314c:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  40314e:	7ffa      	ldrb	r2, [r7, #31]
  403150:	7fbb      	ldrb	r3, [r7, #30]
  403152:	429a      	cmp	r2, r3
  403154:	d200      	bcs.n	403158 <dhcp_parse_reply+0x228>
  403156:	e7fe      	b.n	403156 <dhcp_parse_reply+0x226>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  403158:	2308      	movs	r3, #8
  40315a:	61bb      	str	r3, [r7, #24]
        break;
  40315c:	e02c      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  40315e:	7ffb      	ldrb	r3, [r7, #31]
  403160:	2b04      	cmp	r3, #4
  403162:	d000      	beq.n	403166 <dhcp_parse_reply+0x236>
  403164:	e7fe      	b.n	403164 <dhcp_parse_reply+0x234>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  403166:	2303      	movs	r3, #3
  403168:	61bb      	str	r3, [r7, #24]
        break;
  40316a:	e025      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  40316c:	7ffb      	ldrb	r3, [r7, #31]
  40316e:	2b01      	cmp	r3, #1
  403170:	d000      	beq.n	403174 <dhcp_parse_reply+0x244>
  403172:	e7fe      	b.n	403172 <dhcp_parse_reply+0x242>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  403174:	2300      	movs	r3, #0
  403176:	61bb      	str	r3, [r7, #24]
        break;
  403178:	e01e      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  40317a:	7ffb      	ldrb	r3, [r7, #31]
  40317c:	2b01      	cmp	r3, #1
  40317e:	d000      	beq.n	403182 <dhcp_parse_reply+0x252>
  403180:	e7fe      	b.n	403180 <dhcp_parse_reply+0x250>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  403182:	2301      	movs	r3, #1
  403184:	61bb      	str	r3, [r7, #24]
        break;
  403186:	e017      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403188:	7ffb      	ldrb	r3, [r7, #31]
  40318a:	2b04      	cmp	r3, #4
  40318c:	d000      	beq.n	403190 <dhcp_parse_reply+0x260>
  40318e:	e7fe      	b.n	40318e <dhcp_parse_reply+0x25e>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  403190:	2302      	movs	r3, #2
  403192:	61bb      	str	r3, [r7, #24]
        break;
  403194:	e010      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403196:	7ffb      	ldrb	r3, [r7, #31]
  403198:	2b04      	cmp	r3, #4
  40319a:	d000      	beq.n	40319e <dhcp_parse_reply+0x26e>
  40319c:	e7fe      	b.n	40319c <dhcp_parse_reply+0x26c>
        decode_idx = DHCP_OPTION_IDX_T1;
  40319e:	2304      	movs	r3, #4
  4031a0:	61bb      	str	r3, [r7, #24]
        break;
  4031a2:	e009      	b.n	4031b8 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  4031a4:	7ffb      	ldrb	r3, [r7, #31]
  4031a6:	2b04      	cmp	r3, #4
  4031a8:	d000      	beq.n	4031ac <dhcp_parse_reply+0x27c>
  4031aa:	e7fe      	b.n	4031aa <dhcp_parse_reply+0x27a>
        decode_idx = DHCP_OPTION_IDX_T2;
  4031ac:	2305      	movs	r3, #5
  4031ae:	61bb      	str	r3, [r7, #24]
        break;
  4031b0:	e002      	b.n	4031b8 <dhcp_parse_reply+0x288>
      default:
        decode_len = 0;
  4031b2:	2300      	movs	r3, #0
  4031b4:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
  4031b6:	bf00      	nop
    }
    offset += len + 2;
  4031b8:	7ffb      	ldrb	r3, [r7, #31]
  4031ba:	b29a      	uxth	r2, r3
  4031bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4031be:	4413      	add	r3, r2
  4031c0:	b29b      	uxth	r3, r3
  4031c2:	3302      	adds	r3, #2
  4031c4:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
  4031c6:	7fbb      	ldrb	r3, [r7, #30]
  4031c8:	2b00      	cmp	r3, #0
  4031ca:	d058      	beq.n	40327e <dhcp_parse_reply+0x34e>
      u32_t value = 0;
  4031cc:	2300      	movs	r3, #0
  4031ce:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
  4031d0:	4a05      	ldr	r2, [pc, #20]	; (4031e8 <dhcp_parse_reply+0x2b8>)
  4031d2:	69bb      	ldr	r3, [r7, #24]
  4031d4:	4413      	add	r3, r2
  4031d6:	781b      	ldrb	r3, [r3, #0]
  4031d8:	2b00      	cmp	r3, #0
  4031da:	d150      	bne.n	40327e <dhcp_parse_reply+0x34e>
        copy_len = LWIP_MIN(decode_len, 4);
  4031dc:	7fbb      	ldrb	r3, [r7, #30]
  4031de:	2b03      	cmp	r3, #3
  4031e0:	d806      	bhi.n	4031f0 <dhcp_parse_reply+0x2c0>
  4031e2:	7fbb      	ldrb	r3, [r7, #30]
  4031e4:	b29b      	uxth	r3, r3
  4031e6:	e004      	b.n	4031f2 <dhcp_parse_reply+0x2c2>
  4031e8:	20403380 	.word	0x20403380
  4031ec:	0040cb19 	.word	0x0040cb19
  4031f0:	2304      	movs	r3, #4
  4031f2:	827b      	strh	r3, [r7, #18]
        pbuf_copy_partial(q, &value, copy_len, val_offset);
  4031f4:	8afb      	ldrh	r3, [r7, #22]
  4031f6:	8a7a      	ldrh	r2, [r7, #18]
  4031f8:	f107 0108 	add.w	r1, r7, #8
  4031fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  4031fe:	4c50      	ldr	r4, [pc, #320]	; (403340 <dhcp_parse_reply+0x410>)
  403200:	47a0      	blx	r4
        if (decode_len > 4) {
  403202:	7fbb      	ldrb	r3, [r7, #30]
  403204:	2b04      	cmp	r3, #4
  403206:	d91e      	bls.n	403246 <dhcp_parse_reply+0x316>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  403208:	7fbb      	ldrb	r3, [r7, #30]
  40320a:	f003 0303 	and.w	r3, r3, #3
  40320e:	b2db      	uxtb	r3, r3
  403210:	2b00      	cmp	r3, #0
  403212:	d000      	beq.n	403216 <dhcp_parse_reply+0x2e6>
  403214:	e7fe      	b.n	403214 <dhcp_parse_reply+0x2e4>
          dhcp_got_option(dhcp, decode_idx);
  403216:	4a4b      	ldr	r2, [pc, #300]	; (403344 <dhcp_parse_reply+0x414>)
  403218:	69bb      	ldr	r3, [r7, #24]
  40321a:	4413      	add	r3, r2
  40321c:	2201      	movs	r2, #1
  40321e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
  403220:	68bb      	ldr	r3, [r7, #8]
  403222:	4618      	mov	r0, r3
  403224:	4b48      	ldr	r3, [pc, #288]	; (403348 <dhcp_parse_reply+0x418>)
  403226:	4798      	blx	r3
  403228:	4601      	mov	r1, r0
  40322a:	4a48      	ldr	r2, [pc, #288]	; (40334c <dhcp_parse_reply+0x41c>)
  40322c:	69bb      	ldr	r3, [r7, #24]
  40322e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
  403232:	7fbb      	ldrb	r3, [r7, #30]
  403234:	3b04      	subs	r3, #4
  403236:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
  403238:	8afb      	ldrh	r3, [r7, #22]
  40323a:	3304      	adds	r3, #4
  40323c:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
  40323e:	69bb      	ldr	r3, [r7, #24]
  403240:	3301      	adds	r3, #1
  403242:	61bb      	str	r3, [r7, #24]
          goto decode_next;
  403244:	e7c4      	b.n	4031d0 <dhcp_parse_reply+0x2a0>
        } else if (decode_len == 4) {
  403246:	7fbb      	ldrb	r3, [r7, #30]
  403248:	2b04      	cmp	r3, #4
  40324a:	d106      	bne.n	40325a <dhcp_parse_reply+0x32a>
          value = ntohl(value);
  40324c:	68bb      	ldr	r3, [r7, #8]
  40324e:	4618      	mov	r0, r3
  403250:	4b3f      	ldr	r3, [pc, #252]	; (403350 <dhcp_parse_reply+0x420>)
  403252:	4798      	blx	r3
  403254:	4603      	mov	r3, r0
  403256:	60bb      	str	r3, [r7, #8]
  403258:	e007      	b.n	40326a <dhcp_parse_reply+0x33a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  40325a:	7fbb      	ldrb	r3, [r7, #30]
  40325c:	2b01      	cmp	r3, #1
  40325e:	d000      	beq.n	403262 <dhcp_parse_reply+0x332>
  403260:	e7fe      	b.n	403260 <dhcp_parse_reply+0x330>
          value = ((u8_t*)&value)[0];
  403262:	f107 0308 	add.w	r3, r7, #8
  403266:	781b      	ldrb	r3, [r3, #0]
  403268:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
  40326a:	4a36      	ldr	r2, [pc, #216]	; (403344 <dhcp_parse_reply+0x414>)
  40326c:	69bb      	ldr	r3, [r7, #24]
  40326e:	4413      	add	r3, r2
  403270:	2201      	movs	r2, #1
  403272:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
  403274:	68ba      	ldr	r2, [r7, #8]
  403276:	4935      	ldr	r1, [pc, #212]	; (40334c <dhcp_parse_reply+0x41c>)
  403278:	69bb      	ldr	r3, [r7, #24]
  40327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
  40327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403280:	895b      	ldrh	r3, [r3, #10]
  403282:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  403284:	429a      	cmp	r2, r3
  403286:	d316      	bcc.n	4032b6 <dhcp_parse_reply+0x386>
      offset -= q->len;
  403288:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40328a:	895b      	ldrh	r3, [r3, #10]
  40328c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  40328e:	1ad3      	subs	r3, r2, r3
  403290:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
  403292:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403294:	895b      	ldrh	r3, [r3, #10]
  403296:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  403298:	1ad3      	subs	r3, r2, r3
  40329a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
  40329c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  40329e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4032a0:	429a      	cmp	r2, r3
  4032a2:	d216      	bcs.n	4032d2 <dhcp_parse_reply+0x3a2>
  4032a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4032a6:	2b00      	cmp	r3, #0
  4032a8:	d013      	beq.n	4032d2 <dhcp_parse_reply+0x3a2>
        q = q->next;
  4032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4032ac:	681b      	ldr	r3, [r3, #0]
  4032ae:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
  4032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4032b2:	685b      	ldr	r3, [r3, #4]
  4032b4:	637b      	str	r3, [r7, #52]	; 0x34
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  4032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4032b8:	2b00      	cmp	r3, #0
  4032ba:	d00a      	beq.n	4032d2 <dhcp_parse_reply+0x3a2>
  4032bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  4032be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  4032c0:	4413      	add	r3, r2
  4032c2:	781b      	ldrb	r3, [r3, #0]
  4032c4:	2bff      	cmp	r3, #255	; 0xff
  4032c6:	d004      	beq.n	4032d2 <dhcp_parse_reply+0x3a2>
  4032c8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  4032ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  4032cc:	429a      	cmp	r2, r3
  4032ce:	f4ff ae73 	bcc.w	402fb8 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  4032d2:	4b1c      	ldr	r3, [pc, #112]	; (403344 <dhcp_parse_reply+0x414>)
  4032d4:	781b      	ldrb	r3, [r3, #0]
  4032d6:	2b00      	cmp	r3, #0
  4032d8:	d018      	beq.n	40330c <dhcp_parse_reply+0x3dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  4032da:	4b1c      	ldr	r3, [pc, #112]	; (40334c <dhcp_parse_reply+0x41c>)
  4032dc:	681b      	ldr	r3, [r3, #0]
  4032de:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  4032e0:	4b18      	ldr	r3, [pc, #96]	; (403344 <dhcp_parse_reply+0x414>)
  4032e2:	2200      	movs	r2, #0
  4032e4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
  4032e6:	68fb      	ldr	r3, [r7, #12]
  4032e8:	2b01      	cmp	r3, #1
  4032ea:	d102      	bne.n	4032f2 <dhcp_parse_reply+0x3c2>
      parse_file_as_options = 1;
  4032ec:	2301      	movs	r3, #1
  4032ee:	627b      	str	r3, [r7, #36]	; 0x24
  4032f0:	e00c      	b.n	40330c <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  4032f2:	68fb      	ldr	r3, [r7, #12]
  4032f4:	2b02      	cmp	r3, #2
  4032f6:	d102      	bne.n	4032fe <dhcp_parse_reply+0x3ce>
      parse_sname_as_options = 1;
  4032f8:	2301      	movs	r3, #1
  4032fa:	623b      	str	r3, [r7, #32]
  4032fc:	e006      	b.n	40330c <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  4032fe:	68fb      	ldr	r3, [r7, #12]
  403300:	2b03      	cmp	r3, #3
  403302:	d103      	bne.n	40330c <dhcp_parse_reply+0x3dc>
      parse_sname_as_options = 1;
  403304:	2301      	movs	r3, #1
  403306:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
  403308:	2301      	movs	r3, #1
  40330a:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  40330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40330e:	2b00      	cmp	r3, #0
  403310:	d006      	beq.n	403320 <dhcp_parse_reply+0x3f0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  403312:	2300      	movs	r3, #0
  403314:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
  403316:	236c      	movs	r3, #108	; 0x6c
  403318:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  40331a:	23ec      	movs	r3, #236	; 0xec
  40331c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  40331e:	e625      	b.n	402f6c <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
  403320:	6a3b      	ldr	r3, [r7, #32]
  403322:	2b00      	cmp	r3, #0
  403324:	d006      	beq.n	403334 <dhcp_parse_reply+0x404>
    parse_sname_as_options = 0;
  403326:	2300      	movs	r3, #0
  403328:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
  40332a:	232c      	movs	r3, #44	; 0x2c
  40332c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  40332e:	236c      	movs	r3, #108	; 0x6c
  403330:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  403332:	e61b      	b.n	402f6c <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
  403334:	2300      	movs	r3, #0
}
  403336:	4618      	mov	r0, r3
  403338:	373c      	adds	r7, #60	; 0x3c
  40333a:	46bd      	mov	sp, r7
  40333c:	bd90      	pop	{r4, r7, pc}
  40333e:	bf00      	nop
  403340:	00405c71 	.word	0x00405c71
  403344:	20403380 	.word	0x20403380
  403348:	00401e65 	.word	0x00401e65
  40334c:	2040338c 	.word	0x2040338c
  403350:	00401e99 	.word	0x00401e99

00403354 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
  403354:	b580      	push	{r7, lr}
  403356:	b08a      	sub	sp, #40	; 0x28
  403358:	af00      	add	r7, sp, #0
  40335a:	60f8      	str	r0, [r7, #12]
  40335c:	60b9      	str	r1, [r7, #8]
  40335e:	607a      	str	r2, [r7, #4]
  403360:	603b      	str	r3, [r7, #0]
  struct netif *netif = (struct netif *)arg;
  403362:	68fb      	ldr	r3, [r7, #12]
  403364:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif->dhcp;
  403366:	6a3b      	ldr	r3, [r7, #32]
  403368:	6a1b      	ldr	r3, [r3, #32]
  40336a:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  40336c:	687b      	ldr	r3, [r7, #4]
  40336e:	685b      	ldr	r3, [r3, #4]
  403370:	61bb      	str	r3, [r7, #24]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
  403372:	687b      	ldr	r3, [r7, #4]
  403374:	895b      	ldrh	r3, [r3, #10]
  403376:	2b2b      	cmp	r3, #43	; 0x2b
  403378:	d97b      	bls.n	403472 <dhcp_recv+0x11e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  40337a:	69bb      	ldr	r3, [r7, #24]
  40337c:	781b      	ldrb	r3, [r3, #0]
  40337e:	2b02      	cmp	r3, #2
  403380:	d179      	bne.n	403476 <dhcp_recv+0x122>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  403382:	2300      	movs	r3, #0
  403384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  403388:	e011      	b.n	4033ae <dhcp_recv+0x5a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  40338a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40338e:	6a3a      	ldr	r2, [r7, #32]
  403390:	4413      	add	r3, r2
  403392:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  403396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40339a:	69b9      	ldr	r1, [r7, #24]
  40339c:	440b      	add	r3, r1
  40339e:	7f1b      	ldrb	r3, [r3, #28]
  4033a0:	429a      	cmp	r2, r3
  4033a2:	d16a      	bne.n	40347a <dhcp_recv+0x126>
  for (i = 0; i < netif->hwaddr_len; i++) {
  4033a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  4033a8:	3301      	adds	r3, #1
  4033aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  4033ae:	6a3b      	ldr	r3, [r7, #32]
  4033b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  4033b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  4033b8:	429a      	cmp	r2, r3
  4033ba:	d3e6      	bcc.n	40338a <dhcp_recv+0x36>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
  4033bc:	69bb      	ldr	r3, [r7, #24]
  4033be:	685b      	ldr	r3, [r3, #4]
  4033c0:	4618      	mov	r0, r3
  4033c2:	4b36      	ldr	r3, [pc, #216]	; (40349c <dhcp_recv+0x148>)
  4033c4:	4798      	blx	r3
  4033c6:	4602      	mov	r2, r0
  4033c8:	69fb      	ldr	r3, [r7, #28]
  4033ca:	681b      	ldr	r3, [r3, #0]
  4033cc:	429a      	cmp	r2, r3
  4033ce:	d156      	bne.n	40347e <dhcp_recv+0x12a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  4033d0:	6879      	ldr	r1, [r7, #4]
  4033d2:	69f8      	ldr	r0, [r7, #28]
  4033d4:	4b32      	ldr	r3, [pc, #200]	; (4034a0 <dhcp_recv+0x14c>)
  4033d6:	4798      	blx	r3
  4033d8:	4603      	mov	r3, r0
  4033da:	2b00      	cmp	r3, #0
  4033dc:	d151      	bne.n	403482 <dhcp_recv+0x12e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  4033de:	4b31      	ldr	r3, [pc, #196]	; (4034a4 <dhcp_recv+0x150>)
  4033e0:	785b      	ldrb	r3, [r3, #1]
  4033e2:	2b00      	cmp	r3, #0
  4033e4:	d04f      	beq.n	403486 <dhcp_recv+0x132>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  4033e6:	4b30      	ldr	r3, [pc, #192]	; (4034a8 <dhcp_recv+0x154>)
  4033e8:	685b      	ldr	r3, [r3, #4]
  4033ea:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  4033ec:	7dfb      	ldrb	r3, [r7, #23]
  4033ee:	2b05      	cmp	r3, #5
  4033f0:	d11a      	bne.n	403428 <dhcp_recv+0xd4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
  4033f2:	69fb      	ldr	r3, [r7, #28]
  4033f4:	7b1b      	ldrb	r3, [r3, #12]
  4033f6:	2b01      	cmp	r3, #1
  4033f8:	d106      	bne.n	403408 <dhcp_recv+0xb4>
      dhcp_handle_ack(netif);
  4033fa:	6a38      	ldr	r0, [r7, #32]
  4033fc:	4b2b      	ldr	r3, [pc, #172]	; (4034ac <dhcp_recv+0x158>)
  4033fe:	4798      	blx	r3
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
  403400:	6a38      	ldr	r0, [r7, #32]
  403402:	4b2b      	ldr	r3, [pc, #172]	; (4034b0 <dhcp_recv+0x15c>)
  403404:	4798      	blx	r3
  403406:	e03f      	b.n	403488 <dhcp_recv+0x134>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
  403408:	69fb      	ldr	r3, [r7, #28]
  40340a:	7b1b      	ldrb	r3, [r3, #12]
  40340c:	2b03      	cmp	r3, #3
  40340e:	d007      	beq.n	403420 <dhcp_recv+0xcc>
  403410:	69fb      	ldr	r3, [r7, #28]
  403412:	7b1b      	ldrb	r3, [r3, #12]
  403414:	2b04      	cmp	r3, #4
  403416:	d003      	beq.n	403420 <dhcp_recv+0xcc>
  403418:	69fb      	ldr	r3, [r7, #28]
  40341a:	7b1b      	ldrb	r3, [r3, #12]
  40341c:	2b05      	cmp	r3, #5
  40341e:	d133      	bne.n	403488 <dhcp_recv+0x134>
      dhcp_bind(netif);
  403420:	6a38      	ldr	r0, [r7, #32]
  403422:	4b24      	ldr	r3, [pc, #144]	; (4034b4 <dhcp_recv+0x160>)
  403424:	4798      	blx	r3
  403426:	e02f      	b.n	403488 <dhcp_recv+0x134>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  403428:	7dfb      	ldrb	r3, [r7, #23]
  40342a:	2b06      	cmp	r3, #6
  40342c:	d113      	bne.n	403456 <dhcp_recv+0x102>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  40342e:	69fb      	ldr	r3, [r7, #28]
  403430:	7b1b      	ldrb	r3, [r3, #12]
  else if ((msg_type == DHCP_NAK) &&
  403432:	2b03      	cmp	r3, #3
  403434:	d00b      	beq.n	40344e <dhcp_recv+0xfa>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  403436:	69fb      	ldr	r3, [r7, #28]
  403438:	7b1b      	ldrb	r3, [r3, #12]
  40343a:	2b01      	cmp	r3, #1
  40343c:	d007      	beq.n	40344e <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  40343e:	69fb      	ldr	r3, [r7, #28]
  403440:	7b1b      	ldrb	r3, [r3, #12]
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  403442:	2b04      	cmp	r3, #4
  403444:	d003      	beq.n	40344e <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  403446:	69fb      	ldr	r3, [r7, #28]
  403448:	7b1b      	ldrb	r3, [r3, #12]
  40344a:	2b05      	cmp	r3, #5
  40344c:	d103      	bne.n	403456 <dhcp_recv+0x102>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  40344e:	6a38      	ldr	r0, [r7, #32]
  403450:	4b19      	ldr	r3, [pc, #100]	; (4034b8 <dhcp_recv+0x164>)
  403452:	4798      	blx	r3
  403454:	e018      	b.n	403488 <dhcp_recv+0x134>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
  403456:	7dfb      	ldrb	r3, [r7, #23]
  403458:	2b02      	cmp	r3, #2
  40345a:	d115      	bne.n	403488 <dhcp_recv+0x134>
  40345c:	69fb      	ldr	r3, [r7, #28]
  40345e:	7b1b      	ldrb	r3, [r3, #12]
  403460:	2b06      	cmp	r3, #6
  403462:	d111      	bne.n	403488 <dhcp_recv+0x134>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
  403464:	69fb      	ldr	r3, [r7, #28]
  403466:	2200      	movs	r2, #0
  403468:	835a      	strh	r2, [r3, #26]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  40346a:	6a38      	ldr	r0, [r7, #32]
  40346c:	4b13      	ldr	r3, [pc, #76]	; (4034bc <dhcp_recv+0x168>)
  40346e:	4798      	blx	r3
  403470:	e00a      	b.n	403488 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403472:	bf00      	nop
  403474:	e008      	b.n	403488 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403476:	bf00      	nop
  403478:	e006      	b.n	403488 <dhcp_recv+0x134>
      goto free_pbuf_and_return;
  40347a:	bf00      	nop
  40347c:	e004      	b.n	403488 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  40347e:	bf00      	nop
  403480:	e002      	b.n	403488 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403482:	bf00      	nop
  403484:	e000      	b.n	403488 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403486:	bf00      	nop
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
  403488:	69fb      	ldr	r3, [r7, #28]
  40348a:	2200      	movs	r2, #0
  40348c:	609a      	str	r2, [r3, #8]
  pbuf_free(p);
  40348e:	6878      	ldr	r0, [r7, #4]
  403490:	4b0b      	ldr	r3, [pc, #44]	; (4034c0 <dhcp_recv+0x16c>)
  403492:	4798      	blx	r3
}
  403494:	bf00      	nop
  403496:	3728      	adds	r7, #40	; 0x28
  403498:	46bd      	mov	sp, r7
  40349a:	bd80      	pop	{r7, pc}
  40349c:	00401e99 	.word	0x00401e99
  4034a0:	00402f31 	.word	0x00402f31
  4034a4:	20403380 	.word	0x20403380
  4034a8:	2040338c 	.word	0x2040338c
  4034ac:	00402351 	.word	0x00402351
  4034b0:	00401f15 	.word	0x00401f15
  4034b4:	004027a5 	.word	0x004027a5
  4034b8:	00401eb5 	.word	0x00401eb5
  4034bc:	00401f7d 	.word	0x00401f7d
  4034c0:	00405a01 	.word	0x00405a01

004034c4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  4034c4:	b590      	push	{r4, r7, lr}
  4034c6:	b087      	sub	sp, #28
  4034c8:	af00      	add	r7, sp, #0
  4034ca:	60f8      	str	r0, [r7, #12]
  4034cc:	60b9      	str	r1, [r7, #8]
  4034ce:	4613      	mov	r3, r2
  4034d0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  4034d2:	68fb      	ldr	r3, [r7, #12]
  4034d4:	2b00      	cmp	r3, #0
  4034d6:	d100      	bne.n	4034da <dhcp_create_msg+0x16>
  4034d8:	e7fe      	b.n	4034d8 <dhcp_create_msg+0x14>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  4034da:	68bb      	ldr	r3, [r7, #8]
  4034dc:	2b00      	cmp	r3, #0
  4034de:	d100      	bne.n	4034e2 <dhcp_create_msg+0x1e>
  4034e0:	e7fe      	b.n	4034e0 <dhcp_create_msg+0x1c>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  4034e2:	2200      	movs	r2, #0
  4034e4:	f44f 719a 	mov.w	r1, #308	; 0x134
  4034e8:	2000      	movs	r0, #0
  4034ea:	4b7d      	ldr	r3, [pc, #500]	; (4036e0 <dhcp_create_msg+0x21c>)
  4034ec:	4798      	blx	r3
  4034ee:	4602      	mov	r2, r0
  4034f0:	68bb      	ldr	r3, [r7, #8]
  4034f2:	611a      	str	r2, [r3, #16]
  if (dhcp->p_out == NULL) {
  4034f4:	68bb      	ldr	r3, [r7, #8]
  4034f6:	691b      	ldr	r3, [r3, #16]
  4034f8:	2b00      	cmp	r3, #0
  4034fa:	d102      	bne.n	403502 <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  4034fc:	f04f 33ff 	mov.w	r3, #4294967295
  403500:	e0e9      	b.n	4036d6 <dhcp_create_msg+0x212>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
  403502:	68bb      	ldr	r3, [r7, #8]
  403504:	7b5b      	ldrb	r3, [r3, #13]
  403506:	2b00      	cmp	r3, #0
  403508:	d104      	bne.n	403514 <dhcp_create_msg+0x50>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
  40350a:	4b76      	ldr	r3, [pc, #472]	; (4036e4 <dhcp_create_msg+0x220>)
  40350c:	681b      	ldr	r3, [r3, #0]
  40350e:	3301      	adds	r3, #1
  403510:	4a74      	ldr	r2, [pc, #464]	; (4036e4 <dhcp_create_msg+0x220>)
  403512:	6013      	str	r3, [r2, #0]
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
  403514:	4b73      	ldr	r3, [pc, #460]	; (4036e4 <dhcp_create_msg+0x220>)
  403516:	681a      	ldr	r2, [r3, #0]
  403518:	68bb      	ldr	r3, [r7, #8]
  40351a:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  40351c:	68bb      	ldr	r3, [r7, #8]
  40351e:	691b      	ldr	r3, [r3, #16]
  403520:	685a      	ldr	r2, [r3, #4]
  403522:	68bb      	ldr	r3, [r7, #8]
  403524:	615a      	str	r2, [r3, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  403526:	68bb      	ldr	r3, [r7, #8]
  403528:	695b      	ldr	r3, [r3, #20]
  40352a:	2201      	movs	r2, #1
  40352c:	701a      	strb	r2, [r3, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  40352e:	68bb      	ldr	r3, [r7, #8]
  403530:	695b      	ldr	r3, [r3, #20]
  403532:	2201      	movs	r2, #1
  403534:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  403536:	68bb      	ldr	r3, [r7, #8]
  403538:	695b      	ldr	r3, [r3, #20]
  40353a:	68fa      	ldr	r2, [r7, #12]
  40353c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
  403540:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  403542:	68bb      	ldr	r3, [r7, #8]
  403544:	695b      	ldr	r3, [r3, #20]
  403546:	2200      	movs	r2, #0
  403548:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
  40354a:	68bb      	ldr	r3, [r7, #8]
  40354c:	695c      	ldr	r4, [r3, #20]
  40354e:	68bb      	ldr	r3, [r7, #8]
  403550:	681b      	ldr	r3, [r3, #0]
  403552:	4618      	mov	r0, r3
  403554:	4b64      	ldr	r3, [pc, #400]	; (4036e8 <dhcp_create_msg+0x224>)
  403556:	4798      	blx	r3
  403558:	4603      	mov	r3, r0
  40355a:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  40355c:	68bb      	ldr	r3, [r7, #8]
  40355e:	695b      	ldr	r3, [r3, #20]
  403560:	2200      	movs	r2, #0
  403562:	721a      	strb	r2, [r3, #8]
  403564:	2200      	movs	r2, #0
  403566:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  403568:	68bb      	ldr	r3, [r7, #8]
  40356a:	695b      	ldr	r3, [r3, #20]
  40356c:	2200      	movs	r2, #0
  40356e:	729a      	strb	r2, [r3, #10]
  403570:	2200      	movs	r2, #0
  403572:	72da      	strb	r2, [r3, #11]
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  403574:	68bb      	ldr	r3, [r7, #8]
  403576:	695b      	ldr	r3, [r3, #20]
  403578:	2200      	movs	r2, #0
  40357a:	731a      	strb	r2, [r3, #12]
  40357c:	2200      	movs	r2, #0
  40357e:	735a      	strb	r2, [r3, #13]
  403580:	2200      	movs	r2, #0
  403582:	739a      	strb	r2, [r3, #14]
  403584:	2200      	movs	r2, #0
  403586:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
  403588:	79fb      	ldrb	r3, [r7, #7]
  40358a:	2b08      	cmp	r3, #8
  40358c:	d00d      	beq.n	4035aa <dhcp_create_msg+0xe6>
  40358e:	79fb      	ldrb	r3, [r7, #7]
  403590:	2b04      	cmp	r3, #4
  403592:	d00a      	beq.n	4035aa <dhcp_create_msg+0xe6>
  403594:	79fb      	ldrb	r3, [r7, #7]
  403596:	2b03      	cmp	r3, #3
  403598:	d10c      	bne.n	4035b4 <dhcp_create_msg+0xf0>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  40359a:	68bb      	ldr	r3, [r7, #8]
  40359c:	7b1b      	ldrb	r3, [r3, #12]
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
  40359e:	2b05      	cmp	r3, #5
  4035a0:	d003      	beq.n	4035aa <dhcp_create_msg+0xe6>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  4035a2:	68bb      	ldr	r3, [r7, #8]
  4035a4:	7b1b      	ldrb	r3, [r3, #12]
  4035a6:	2b04      	cmp	r3, #4
  4035a8:	d104      	bne.n	4035b4 <dhcp_create_msg+0xf0>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  4035aa:	68bb      	ldr	r3, [r7, #8]
  4035ac:	695b      	ldr	r3, [r3, #20]
  4035ae:	68fa      	ldr	r2, [r7, #12]
  4035b0:	6852      	ldr	r2, [r2, #4]
  4035b2:	60da      	str	r2, [r3, #12]
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  4035b4:	68bb      	ldr	r3, [r7, #8]
  4035b6:	695b      	ldr	r3, [r3, #20]
  4035b8:	2200      	movs	r2, #0
  4035ba:	741a      	strb	r2, [r3, #16]
  4035bc:	2200      	movs	r2, #0
  4035be:	745a      	strb	r2, [r3, #17]
  4035c0:	2200      	movs	r2, #0
  4035c2:	749a      	strb	r2, [r3, #18]
  4035c4:	2200      	movs	r2, #0
  4035c6:	74da      	strb	r2, [r3, #19]
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  4035c8:	68bb      	ldr	r3, [r7, #8]
  4035ca:	695b      	ldr	r3, [r3, #20]
  4035cc:	2200      	movs	r2, #0
  4035ce:	751a      	strb	r2, [r3, #20]
  4035d0:	2200      	movs	r2, #0
  4035d2:	755a      	strb	r2, [r3, #21]
  4035d4:	2200      	movs	r2, #0
  4035d6:	759a      	strb	r2, [r3, #22]
  4035d8:	2200      	movs	r2, #0
  4035da:	75da      	strb	r2, [r3, #23]
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  4035dc:	68bb      	ldr	r3, [r7, #8]
  4035de:	695b      	ldr	r3, [r3, #20]
  4035e0:	2200      	movs	r2, #0
  4035e2:	761a      	strb	r2, [r3, #24]
  4035e4:	2200      	movs	r2, #0
  4035e6:	765a      	strb	r2, [r3, #25]
  4035e8:	2200      	movs	r2, #0
  4035ea:	769a      	strb	r2, [r3, #26]
  4035ec:	2200      	movs	r2, #0
  4035ee:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  4035f0:	2300      	movs	r3, #0
  4035f2:	82fb      	strh	r3, [r7, #22]
  4035f4:	e016      	b.n	403624 <dhcp_create_msg+0x160>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  4035f6:	68bb      	ldr	r3, [r7, #8]
  4035f8:	695a      	ldr	r2, [r3, #20]
  4035fa:	8afb      	ldrh	r3, [r7, #22]
  4035fc:	68f9      	ldr	r1, [r7, #12]
  4035fe:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
  403602:	b289      	uxth	r1, r1
  403604:	8af8      	ldrh	r0, [r7, #22]
  403606:	4288      	cmp	r0, r1
  403608:	d205      	bcs.n	403616 <dhcp_create_msg+0x152>
  40360a:	8af9      	ldrh	r1, [r7, #22]
  40360c:	68f8      	ldr	r0, [r7, #12]
  40360e:	4401      	add	r1, r0
  403610:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
  403614:	e000      	b.n	403618 <dhcp_create_msg+0x154>
  403616:	2100      	movs	r1, #0
  403618:	4413      	add	r3, r2
  40361a:	460a      	mov	r2, r1
  40361c:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  40361e:	8afb      	ldrh	r3, [r7, #22]
  403620:	3301      	adds	r3, #1
  403622:	82fb      	strh	r3, [r7, #22]
  403624:	8afb      	ldrh	r3, [r7, #22]
  403626:	2b0f      	cmp	r3, #15
  403628:	d9e5      	bls.n	4035f6 <dhcp_create_msg+0x132>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  40362a:	2300      	movs	r3, #0
  40362c:	82fb      	strh	r3, [r7, #22]
  40362e:	e009      	b.n	403644 <dhcp_create_msg+0x180>
    dhcp->msg_out->sname[i] = 0;
  403630:	68bb      	ldr	r3, [r7, #8]
  403632:	695a      	ldr	r2, [r3, #20]
  403634:	8afb      	ldrh	r3, [r7, #22]
  403636:	4413      	add	r3, r2
  403638:	2200      	movs	r2, #0
  40363a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  40363e:	8afb      	ldrh	r3, [r7, #22]
  403640:	3301      	adds	r3, #1
  403642:	82fb      	strh	r3, [r7, #22]
  403644:	8afb      	ldrh	r3, [r7, #22]
  403646:	2b3f      	cmp	r3, #63	; 0x3f
  403648:	d9f2      	bls.n	403630 <dhcp_create_msg+0x16c>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  40364a:	2300      	movs	r3, #0
  40364c:	82fb      	strh	r3, [r7, #22]
  40364e:	e009      	b.n	403664 <dhcp_create_msg+0x1a0>
    dhcp->msg_out->file[i] = 0;
  403650:	68bb      	ldr	r3, [r7, #8]
  403652:	695a      	ldr	r2, [r3, #20]
  403654:	8afb      	ldrh	r3, [r7, #22]
  403656:	4413      	add	r3, r2
  403658:	2200      	movs	r2, #0
  40365a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  40365e:	8afb      	ldrh	r3, [r7, #22]
  403660:	3301      	adds	r3, #1
  403662:	82fb      	strh	r3, [r7, #22]
  403664:	8afb      	ldrh	r3, [r7, #22]
  403666:	2b7f      	cmp	r3, #127	; 0x7f
  403668:	d9f2      	bls.n	403650 <dhcp_create_msg+0x18c>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  40366a:	68bb      	ldr	r3, [r7, #8]
  40366c:	695b      	ldr	r3, [r3, #20]
  40366e:	2200      	movs	r2, #0
  403670:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  403674:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  403678:	2200      	movs	r2, #0
  40367a:	f062 027d 	orn	r2, r2, #125	; 0x7d
  40367e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
  403682:	2200      	movs	r2, #0
  403684:	f042 0253 	orr.w	r2, r2, #83	; 0x53
  403688:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
  40368c:	2200      	movs	r2, #0
  40368e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  403692:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
  403696:	68bb      	ldr	r3, [r7, #8]
  403698:	2200      	movs	r2, #0
  40369a:	831a      	strh	r2, [r3, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  40369c:	2300      	movs	r3, #0
  40369e:	82fb      	strh	r3, [r7, #22]
  4036a0:	e00b      	b.n	4036ba <dhcp_create_msg+0x1f6>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  4036a2:	68bb      	ldr	r3, [r7, #8]
  4036a4:	695a      	ldr	r2, [r3, #20]
  4036a6:	8afb      	ldrh	r3, [r7, #22]
  4036a8:	8af9      	ldrh	r1, [r7, #22]
  4036aa:	b2c9      	uxtb	r1, r1
  4036ac:	4413      	add	r3, r2
  4036ae:	460a      	mov	r2, r1
  4036b0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  4036b4:	8afb      	ldrh	r3, [r7, #22]
  4036b6:	3301      	adds	r3, #1
  4036b8:	82fb      	strh	r3, [r7, #22]
  4036ba:	8afb      	ldrh	r3, [r7, #22]
  4036bc:	2b43      	cmp	r3, #67	; 0x43
  4036be:	d9f0      	bls.n	4036a2 <dhcp_create_msg+0x1de>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  4036c0:	2201      	movs	r2, #1
  4036c2:	2135      	movs	r1, #53	; 0x35
  4036c4:	68b8      	ldr	r0, [r7, #8]
  4036c6:	4b09      	ldr	r3, [pc, #36]	; (4036ec <dhcp_create_msg+0x228>)
  4036c8:	4798      	blx	r3
  dhcp_option_byte(dhcp, message_type);
  4036ca:	79fb      	ldrb	r3, [r7, #7]
  4036cc:	4619      	mov	r1, r3
  4036ce:	68b8      	ldr	r0, [r7, #8]
  4036d0:	4b07      	ldr	r3, [pc, #28]	; (4036f0 <dhcp_create_msg+0x22c>)
  4036d2:	4798      	blx	r3
  return ERR_OK;
  4036d4:	2300      	movs	r3, #0
}
  4036d6:	4618      	mov	r0, r3
  4036d8:	371c      	adds	r7, #28
  4036da:	46bd      	mov	sp, r7
  4036dc:	bd90      	pop	{r4, r7, pc}
  4036de:	bf00      	nop
  4036e0:	0040565d 	.word	0x0040565d
  4036e4:	20400008 	.word	0x20400008
  4036e8:	00401e65 	.word	0x00401e65
  4036ec:	00402dcd 	.word	0x00402dcd
  4036f0:	00402e19 	.word	0x00402e19

004036f4 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  4036f4:	b580      	push	{r7, lr}
  4036f6:	b082      	sub	sp, #8
  4036f8:	af00      	add	r7, sp, #0
  4036fa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  4036fc:	687b      	ldr	r3, [r7, #4]
  4036fe:	2b00      	cmp	r3, #0
  403700:	d100      	bne.n	403704 <dhcp_delete_msg+0x10>
  403702:	e7fe      	b.n	403702 <dhcp_delete_msg+0xe>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
  403704:	687b      	ldr	r3, [r7, #4]
  403706:	691b      	ldr	r3, [r3, #16]
  403708:	2b00      	cmp	r3, #0
  40370a:	d004      	beq.n	403716 <dhcp_delete_msg+0x22>
    pbuf_free(dhcp->p_out);
  40370c:	687b      	ldr	r3, [r7, #4]
  40370e:	691b      	ldr	r3, [r3, #16]
  403710:	4618      	mov	r0, r3
  403712:	4b06      	ldr	r3, [pc, #24]	; (40372c <dhcp_delete_msg+0x38>)
  403714:	4798      	blx	r3
  }
  dhcp->p_out = NULL;
  403716:	687b      	ldr	r3, [r7, #4]
  403718:	2200      	movs	r2, #0
  40371a:	611a      	str	r2, [r3, #16]
  dhcp->msg_out = NULL;
  40371c:	687b      	ldr	r3, [r7, #4]
  40371e:	2200      	movs	r2, #0
  403720:	615a      	str	r2, [r3, #20]
}
  403722:	bf00      	nop
  403724:	3708      	adds	r7, #8
  403726:	46bd      	mov	sp, r7
  403728:	bd80      	pop	{r7, pc}
  40372a:	bf00      	nop
  40372c:	00405a01 	.word	0x00405a01

00403730 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  403730:	b480      	push	{r7}
  403732:	b083      	sub	sp, #12
  403734:	af00      	add	r7, sp, #0
  403736:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  403738:	687b      	ldr	r3, [r7, #4]
  40373a:	2b00      	cmp	r3, #0
  40373c:	d100      	bne.n	403740 <dhcp_option_trailer+0x10>
  40373e:	e7fe      	b.n	40373e <dhcp_option_trailer+0xe>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  403740:	687b      	ldr	r3, [r7, #4]
  403742:	695a      	ldr	r2, [r3, #20]
  403744:	687b      	ldr	r3, [r7, #4]
  403746:	8b1b      	ldrh	r3, [r3, #24]
  403748:	1c59      	adds	r1, r3, #1
  40374a:	b288      	uxth	r0, r1
  40374c:	6879      	ldr	r1, [r7, #4]
  40374e:	8308      	strh	r0, [r1, #24]
  403750:	4413      	add	r3, r2
  403752:	22ff      	movs	r2, #255	; 0xff
  403754:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  403758:	e00b      	b.n	403772 <dhcp_option_trailer+0x42>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  40375a:	687b      	ldr	r3, [r7, #4]
  40375c:	695a      	ldr	r2, [r3, #20]
  40375e:	687b      	ldr	r3, [r7, #4]
  403760:	8b1b      	ldrh	r3, [r3, #24]
  403762:	1c59      	adds	r1, r3, #1
  403764:	b288      	uxth	r0, r1
  403766:	6879      	ldr	r1, [r7, #4]
  403768:	8308      	strh	r0, [r1, #24]
  40376a:	4413      	add	r3, r2
  40376c:	2200      	movs	r2, #0
  40376e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  403772:	687b      	ldr	r3, [r7, #4]
  403774:	8b1b      	ldrh	r3, [r3, #24]
  403776:	2b43      	cmp	r3, #67	; 0x43
  403778:	d905      	bls.n	403786 <dhcp_option_trailer+0x56>
  40377a:	687b      	ldr	r3, [r7, #4]
  40377c:	8b1b      	ldrh	r3, [r3, #24]
  40377e:	f003 0303 	and.w	r3, r3, #3
  403782:	2b00      	cmp	r3, #0
  403784:	d003      	beq.n	40378e <dhcp_option_trailer+0x5e>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  403786:	687b      	ldr	r3, [r7, #4]
  403788:	8b1b      	ldrh	r3, [r3, #24]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  40378a:	2b43      	cmp	r3, #67	; 0x43
  40378c:	d9e5      	bls.n	40375a <dhcp_option_trailer+0x2a>
  }
}
  40378e:	bf00      	nop
  403790:	370c      	adds	r7, #12
  403792:	46bd      	mov	sp, r7
  403794:	f85d 7b04 	ldr.w	r7, [sp], #4
  403798:	4770      	bx	lr
	...

0040379c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  40379c:	b590      	push	{r4, r7, lr}
  40379e:	b08d      	sub	sp, #52	; 0x34
  4037a0:	af04      	add	r7, sp, #16
  4037a2:	6078      	str	r0, [r7, #4]
  4037a4:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  4037a6:	687b      	ldr	r3, [r7, #4]
  4037a8:	685b      	ldr	r3, [r3, #4]
  4037aa:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
  4037ac:	69fb      	ldr	r3, [r7, #28]
  4037ae:	781b      	ldrb	r3, [r3, #0]
  4037b0:	b29b      	uxth	r3, r3
  4037b2:	f003 030f 	and.w	r3, r3, #15
  4037b6:	b29b      	uxth	r3, r3
  4037b8:	009b      	lsls	r3, r3, #2
  4037ba:	b29b      	uxth	r3, r3
  4037bc:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  4037be:	8afb      	ldrh	r3, [r7, #22]
  4037c0:	425b      	negs	r3, r3
  4037c2:	b29b      	uxth	r3, r3
  4037c4:	b21b      	sxth	r3, r3
  4037c6:	4619      	mov	r1, r3
  4037c8:	6878      	ldr	r0, [r7, #4]
  4037ca:	4b74      	ldr	r3, [pc, #464]	; (40399c <icmp_input+0x200>)
  4037cc:	4798      	blx	r3
  4037ce:	4603      	mov	r3, r0
  4037d0:	2b00      	cmp	r3, #0
  4037d2:	f040 80ce 	bne.w	403972 <icmp_input+0x1d6>
  4037d6:	687b      	ldr	r3, [r7, #4]
  4037d8:	891b      	ldrh	r3, [r3, #8]
  4037da:	2b03      	cmp	r3, #3
  4037dc:	f240 80c9 	bls.w	403972 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  4037e0:	687b      	ldr	r3, [r7, #4]
  4037e2:	685b      	ldr	r3, [r3, #4]
  4037e4:	781b      	ldrb	r3, [r3, #0]
  4037e6:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  4037e8:	7d7b      	ldrb	r3, [r7, #21]
  4037ea:	2b00      	cmp	r3, #0
  4037ec:	f000 80b9 	beq.w	403962 <icmp_input+0x1c6>
  4037f0:	2b08      	cmp	r3, #8
  4037f2:	f040 80b9 	bne.w	403968 <icmp_input+0x1cc>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
  4037f6:	2301      	movs	r3, #1
  4037f8:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  4037fa:	4b69      	ldr	r3, [pc, #420]	; (4039a0 <icmp_input+0x204>)
  4037fc:	681b      	ldr	r3, [r3, #0]
  4037fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  403802:	2be0      	cmp	r3, #224	; 0xe0
  403804:	d101      	bne.n	40380a <icmp_input+0x6e>
        accepted = 0;
  403806:	2300      	movs	r3, #0
  403808:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  40380a:	4b65      	ldr	r3, [pc, #404]	; (4039a0 <icmp_input+0x204>)
  40380c:	681b      	ldr	r3, [r3, #0]
  40380e:	6839      	ldr	r1, [r7, #0]
  403810:	4618      	mov	r0, r3
  403812:	4b64      	ldr	r3, [pc, #400]	; (4039a4 <icmp_input+0x208>)
  403814:	4798      	blx	r3
  403816:	4603      	mov	r3, r0
  403818:	2b00      	cmp	r3, #0
  40381a:	d001      	beq.n	403820 <icmp_input+0x84>
        accepted = 0;
  40381c:	2300      	movs	r3, #0
  40381e:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
  403820:	69bb      	ldr	r3, [r7, #24]
  403822:	2b00      	cmp	r3, #0
  403824:	d103      	bne.n	40382e <icmp_input+0x92>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
  403826:	6878      	ldr	r0, [r7, #4]
  403828:	4b5f      	ldr	r3, [pc, #380]	; (4039a8 <icmp_input+0x20c>)
  40382a:	4798      	blx	r3
        return;
  40382c:	e0b2      	b.n	403994 <icmp_input+0x1f8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  40382e:	687b      	ldr	r3, [r7, #4]
  403830:	891b      	ldrh	r3, [r3, #8]
  403832:	2b07      	cmp	r3, #7
  403834:	f240 809c 	bls.w	403970 <icmp_input+0x1d4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  403838:	6878      	ldr	r0, [r7, #4]
  40383a:	4b5c      	ldr	r3, [pc, #368]	; (4039ac <icmp_input+0x210>)
  40383c:	4798      	blx	r3
  40383e:	4603      	mov	r3, r0
  403840:	2b00      	cmp	r3, #0
  403842:	d003      	beq.n	40384c <icmp_input+0xb0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  403844:	6878      	ldr	r0, [r7, #4]
  403846:	4b58      	ldr	r3, [pc, #352]	; (4039a8 <icmp_input+0x20c>)
  403848:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  40384a:	e0a3      	b.n	403994 <icmp_input+0x1f8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  40384c:	2122      	movs	r1, #34	; 0x22
  40384e:	6878      	ldr	r0, [r7, #4]
  403850:	4b52      	ldr	r3, [pc, #328]	; (40399c <icmp_input+0x200>)
  403852:	4798      	blx	r3
  403854:	4603      	mov	r3, r0
  403856:	2b00      	cmp	r3, #0
  403858:	d02f      	beq.n	4038ba <icmp_input+0x11e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  40385a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  40385e:	4619      	mov	r1, r3
  403860:	6878      	ldr	r0, [r7, #4]
  403862:	4b4e      	ldr	r3, [pc, #312]	; (40399c <icmp_input+0x200>)
  403864:	4798      	blx	r3
  403866:	4603      	mov	r3, r0
  403868:	2b00      	cmp	r3, #0
  40386a:	f040 8086 	bne.w	40397a <icmp_input+0x1de>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  40386e:	687b      	ldr	r3, [r7, #4]
  403870:	891b      	ldrh	r3, [r3, #8]
  403872:	2200      	movs	r2, #0
  403874:	4619      	mov	r1, r3
  403876:	2002      	movs	r0, #2
  403878:	4b4d      	ldr	r3, [pc, #308]	; (4039b0 <icmp_input+0x214>)
  40387a:	4798      	blx	r3
  40387c:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
  40387e:	693b      	ldr	r3, [r7, #16]
  403880:	2b00      	cmp	r3, #0
  403882:	d07c      	beq.n	40397e <icmp_input+0x1e2>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  403884:	6879      	ldr	r1, [r7, #4]
  403886:	6938      	ldr	r0, [r7, #16]
  403888:	4b4a      	ldr	r3, [pc, #296]	; (4039b4 <icmp_input+0x218>)
  40388a:	4798      	blx	r3
  40388c:	4603      	mov	r3, r0
  40388e:	2b00      	cmp	r3, #0
  403890:	d177      	bne.n	403982 <icmp_input+0x1e6>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
  403892:	693b      	ldr	r3, [r7, #16]
  403894:	685b      	ldr	r3, [r3, #4]
  403896:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  403898:	8afb      	ldrh	r3, [r7, #22]
  40389a:	425b      	negs	r3, r3
  40389c:	b29b      	uxth	r3, r3
  40389e:	b21b      	sxth	r3, r3
  4038a0:	4619      	mov	r1, r3
  4038a2:	6938      	ldr	r0, [r7, #16]
  4038a4:	4b3d      	ldr	r3, [pc, #244]	; (40399c <icmp_input+0x200>)
  4038a6:	4798      	blx	r3
  4038a8:	4603      	mov	r3, r0
  4038aa:	2b00      	cmp	r3, #0
  4038ac:	d16b      	bne.n	403986 <icmp_input+0x1ea>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  4038ae:	6878      	ldr	r0, [r7, #4]
  4038b0:	4b3d      	ldr	r3, [pc, #244]	; (4039a8 <icmp_input+0x20c>)
  4038b2:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  4038b4:	693b      	ldr	r3, [r7, #16]
  4038b6:	607b      	str	r3, [r7, #4]
  4038b8:	e007      	b.n	4038ca <icmp_input+0x12e>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4038ba:	f06f 0121 	mvn.w	r1, #33	; 0x21
  4038be:	6878      	ldr	r0, [r7, #4]
  4038c0:	4b36      	ldr	r3, [pc, #216]	; (40399c <icmp_input+0x200>)
  4038c2:	4798      	blx	r3
  4038c4:	4603      	mov	r3, r0
  4038c6:	2b00      	cmp	r3, #0
  4038c8:	d15f      	bne.n	40398a <icmp_input+0x1ee>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  4038ca:	687b      	ldr	r3, [r7, #4]
  4038cc:	685b      	ldr	r3, [r3, #4]
  4038ce:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  4038d0:	4b33      	ldr	r3, [pc, #204]	; (4039a0 <icmp_input+0x204>)
  4038d2:	681a      	ldr	r2, [r3, #0]
  4038d4:	69fb      	ldr	r3, [r7, #28]
  4038d6:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  4038d8:	4b37      	ldr	r3, [pc, #220]	; (4039b8 <icmp_input+0x21c>)
  4038da:	681a      	ldr	r2, [r3, #0]
  4038dc:	69fb      	ldr	r3, [r7, #28]
  4038de:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  4038e0:	68fb      	ldr	r3, [r7, #12]
  4038e2:	2200      	movs	r2, #0
  4038e4:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  4038e6:	68fb      	ldr	r3, [r7, #12]
  4038e8:	885b      	ldrh	r3, [r3, #2]
  4038ea:	b29b      	uxth	r3, r3
  4038ec:	f64f 72f6 	movw	r2, #65526	; 0xfff6
  4038f0:	4293      	cmp	r3, r2
  4038f2:	d907      	bls.n	403904 <icmp_input+0x168>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  4038f4:	68fb      	ldr	r3, [r7, #12]
  4038f6:	885b      	ldrh	r3, [r3, #2]
  4038f8:	b29b      	uxth	r3, r3
  4038fa:	3309      	adds	r3, #9
  4038fc:	b29a      	uxth	r2, r3
  4038fe:	68fb      	ldr	r3, [r7, #12]
  403900:	805a      	strh	r2, [r3, #2]
  403902:	e006      	b.n	403912 <icmp_input+0x176>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  403904:	68fb      	ldr	r3, [r7, #12]
  403906:	885b      	ldrh	r3, [r3, #2]
  403908:	b29b      	uxth	r3, r3
  40390a:	3308      	adds	r3, #8
  40390c:	b29a      	uxth	r2, r3
  40390e:	68fb      	ldr	r3, [r7, #12]
  403910:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  403912:	69fb      	ldr	r3, [r7, #28]
  403914:	22ff      	movs	r2, #255	; 0xff
  403916:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  403918:	69fb      	ldr	r3, [r7, #28]
  40391a:	2200      	movs	r2, #0
  40391c:	729a      	strb	r2, [r3, #10]
  40391e:	2200      	movs	r2, #0
  403920:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  403922:	2114      	movs	r1, #20
  403924:	69f8      	ldr	r0, [r7, #28]
  403926:	4b25      	ldr	r3, [pc, #148]	; (4039bc <icmp_input+0x220>)
  403928:	4798      	blx	r3
  40392a:	4603      	mov	r3, r0
  40392c:	461a      	mov	r2, r3
  40392e:	69fb      	ldr	r3, [r7, #28]
  403930:	815a      	strh	r2, [r3, #10]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  403932:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403936:	4619      	mov	r1, r3
  403938:	6878      	ldr	r0, [r7, #4]
  40393a:	4b18      	ldr	r3, [pc, #96]	; (40399c <icmp_input+0x200>)
  40393c:	4798      	blx	r3
  40393e:	4603      	mov	r3, r0
  403940:	2b00      	cmp	r3, #0
  403942:	d110      	bne.n	403966 <icmp_input+0x1ca>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  403944:	683b      	ldr	r3, [r7, #0]
  403946:	9302      	str	r3, [sp, #8]
  403948:	2301      	movs	r3, #1
  40394a:	9301      	str	r3, [sp, #4]
  40394c:	2300      	movs	r3, #0
  40394e:	9300      	str	r3, [sp, #0]
  403950:	23ff      	movs	r3, #255	; 0xff
  403952:	2200      	movs	r2, #0
  403954:	4912      	ldr	r1, [pc, #72]	; (4039a0 <icmp_input+0x204>)
  403956:	6878      	ldr	r0, [r7, #4]
  403958:	4c19      	ldr	r4, [pc, #100]	; (4039c0 <icmp_input+0x224>)
  40395a:	47a0      	blx	r4
  40395c:	4603      	mov	r3, r0
  40395e:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
  403960:	e001      	b.n	403966 <icmp_input+0x1ca>
    break; 
  403962:	bf00      	nop
  403964:	e000      	b.n	403968 <icmp_input+0x1cc>
    break;
  403966:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  403968:	6878      	ldr	r0, [r7, #4]
  40396a:	4b0f      	ldr	r3, [pc, #60]	; (4039a8 <icmp_input+0x20c>)
  40396c:	4798      	blx	r3
  return;
  40396e:	e011      	b.n	403994 <icmp_input+0x1f8>
      goto lenerr;
  403970:	bf00      	nop
lenerr:
  pbuf_free(p);
  403972:	6878      	ldr	r0, [r7, #4]
  403974:	4b0c      	ldr	r3, [pc, #48]	; (4039a8 <icmp_input+0x20c>)
  403976:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  403978:	e00c      	b.n	403994 <icmp_input+0x1f8>
        goto memerr;
  40397a:	bf00      	nop
  40397c:	e006      	b.n	40398c <icmp_input+0x1f0>
        goto memerr;
  40397e:	bf00      	nop
  403980:	e004      	b.n	40398c <icmp_input+0x1f0>
        goto memerr;
  403982:	bf00      	nop
  403984:	e002      	b.n	40398c <icmp_input+0x1f0>
        goto memerr;
  403986:	bf00      	nop
  403988:	e000      	b.n	40398c <icmp_input+0x1f0>
        goto memerr;
  40398a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
  40398c:	6878      	ldr	r0, [r7, #4]
  40398e:	4b06      	ldr	r3, [pc, #24]	; (4039a8 <icmp_input+0x20c>)
  403990:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
  403992:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
  403994:	3724      	adds	r7, #36	; 0x24
  403996:	46bd      	mov	sp, r7
  403998:	bd90      	pop	{r4, r7, pc}
  40399a:	bf00      	nop
  40399c:	00405925 	.word	0x00405925
  4039a0:	204033bc 	.word	0x204033bc
  4039a4:	00404251 	.word	0x00404251
  4039a8:	00405a01 	.word	0x00405a01
  4039ac:	00403cc5 	.word	0x00403cc5
  4039b0:	0040565d 	.word	0x0040565d
  4039b4:	00405b6d 	.word	0x00405b6d
  4039b8:	204033b4 	.word	0x204033b4
  4039bc:	00403c9d 	.word	0x00403c9d
  4039c0:	00404049 	.word	0x00404049

004039c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  4039c4:	b580      	push	{r7, lr}
  4039c6:	b082      	sub	sp, #8
  4039c8:	af00      	add	r7, sp, #0
  4039ca:	6078      	str	r0, [r7, #4]
  4039cc:	460b      	mov	r3, r1
  4039ce:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
  4039d0:	78fb      	ldrb	r3, [r7, #3]
  4039d2:	461a      	mov	r2, r3
  4039d4:	2103      	movs	r1, #3
  4039d6:	6878      	ldr	r0, [r7, #4]
  4039d8:	4b02      	ldr	r3, [pc, #8]	; (4039e4 <icmp_dest_unreach+0x20>)
  4039da:	4798      	blx	r3
}
  4039dc:	bf00      	nop
  4039de:	3708      	adds	r7, #8
  4039e0:	46bd      	mov	sp, r7
  4039e2:	bd80      	pop	{r7, pc}
  4039e4:	00403a0d 	.word	0x00403a0d

004039e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  4039e8:	b580      	push	{r7, lr}
  4039ea:	b082      	sub	sp, #8
  4039ec:	af00      	add	r7, sp, #0
  4039ee:	6078      	str	r0, [r7, #4]
  4039f0:	460b      	mov	r3, r1
  4039f2:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_TE, t);
  4039f4:	78fb      	ldrb	r3, [r7, #3]
  4039f6:	461a      	mov	r2, r3
  4039f8:	210b      	movs	r1, #11
  4039fa:	6878      	ldr	r0, [r7, #4]
  4039fc:	4b02      	ldr	r3, [pc, #8]	; (403a08 <icmp_time_exceeded+0x20>)
  4039fe:	4798      	blx	r3
}
  403a00:	bf00      	nop
  403a02:	3708      	adds	r7, #8
  403a04:	46bd      	mov	sp, r7
  403a06:	bd80      	pop	{r7, pc}
  403a08:	00403a0d 	.word	0x00403a0d

00403a0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  403a0c:	b590      	push	{r4, r7, lr}
  403a0e:	b089      	sub	sp, #36	; 0x24
  403a10:	af02      	add	r7, sp, #8
  403a12:	6078      	str	r0, [r7, #4]
  403a14:	460b      	mov	r3, r1
  403a16:	70fb      	strb	r3, [r7, #3]
  403a18:	4613      	mov	r3, r2
  403a1a:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  403a1c:	2200      	movs	r2, #0
  403a1e:	2124      	movs	r1, #36	; 0x24
  403a20:	2001      	movs	r0, #1
  403a22:	4b25      	ldr	r3, [pc, #148]	; (403ab8 <icmp_send_response+0xac>)
  403a24:	4798      	blx	r3
  403a26:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
  403a28:	697b      	ldr	r3, [r7, #20]
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	d040      	beq.n	403ab0 <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  403a2e:	687b      	ldr	r3, [r7, #4]
  403a30:	685b      	ldr	r3, [r3, #4]
  403a32:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  403a34:	697b      	ldr	r3, [r7, #20]
  403a36:	685b      	ldr	r3, [r3, #4]
  403a38:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
  403a3a:	68fb      	ldr	r3, [r7, #12]
  403a3c:	78fa      	ldrb	r2, [r7, #3]
  403a3e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
  403a40:	68fb      	ldr	r3, [r7, #12]
  403a42:	78ba      	ldrb	r2, [r7, #2]
  403a44:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
  403a46:	68fb      	ldr	r3, [r7, #12]
  403a48:	2200      	movs	r2, #0
  403a4a:	711a      	strb	r2, [r3, #4]
  403a4c:	2200      	movs	r2, #0
  403a4e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  403a50:	68fb      	ldr	r3, [r7, #12]
  403a52:	2200      	movs	r2, #0
  403a54:	719a      	strb	r2, [r3, #6]
  403a56:	2200      	movs	r2, #0
  403a58:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  403a5a:	697b      	ldr	r3, [r7, #20]
  403a5c:	685b      	ldr	r3, [r3, #4]
  403a5e:	f103 0008 	add.w	r0, r3, #8
  403a62:	687b      	ldr	r3, [r7, #4]
  403a64:	685b      	ldr	r3, [r3, #4]
  403a66:	221c      	movs	r2, #28
  403a68:	4619      	mov	r1, r3
  403a6a:	4b14      	ldr	r3, [pc, #80]	; (403abc <icmp_send_response+0xb0>)
  403a6c:	4798      	blx	r3
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  403a6e:	68fb      	ldr	r3, [r7, #12]
  403a70:	2200      	movs	r2, #0
  403a72:	709a      	strb	r2, [r3, #2]
  403a74:	2200      	movs	r2, #0
  403a76:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  403a78:	697b      	ldr	r3, [r7, #20]
  403a7a:	895b      	ldrh	r3, [r3, #10]
  403a7c:	4619      	mov	r1, r3
  403a7e:	68f8      	ldr	r0, [r7, #12]
  403a80:	4b0f      	ldr	r3, [pc, #60]	; (403ac0 <icmp_send_response+0xb4>)
  403a82:	4798      	blx	r3
  403a84:	4603      	mov	r3, r0
  403a86:	461a      	mov	r2, r3
  403a88:	68fb      	ldr	r3, [r7, #12]
  403a8a:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  403a8c:	693b      	ldr	r3, [r7, #16]
  403a8e:	68db      	ldr	r3, [r3, #12]
  403a90:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  403a92:	f107 0208 	add.w	r2, r7, #8
  403a96:	2301      	movs	r3, #1
  403a98:	9301      	str	r3, [sp, #4]
  403a9a:	2300      	movs	r3, #0
  403a9c:	9300      	str	r3, [sp, #0]
  403a9e:	23ff      	movs	r3, #255	; 0xff
  403aa0:	2100      	movs	r1, #0
  403aa2:	6978      	ldr	r0, [r7, #20]
  403aa4:	4c07      	ldr	r4, [pc, #28]	; (403ac4 <icmp_send_response+0xb8>)
  403aa6:	47a0      	blx	r4
  pbuf_free(q);
  403aa8:	6978      	ldr	r0, [r7, #20]
  403aaa:	4b07      	ldr	r3, [pc, #28]	; (403ac8 <icmp_send_response+0xbc>)
  403aac:	4798      	blx	r3
  403aae:	e000      	b.n	403ab2 <icmp_send_response+0xa6>
    return;
  403ab0:	bf00      	nop
}
  403ab2:	371c      	adds	r7, #28
  403ab4:	46bd      	mov	sp, r7
  403ab6:	bd90      	pop	{r4, r7, pc}
  403ab8:	0040565d 	.word	0x0040565d
  403abc:	0040c9e5 	.word	0x0040c9e5
  403ac0:	00403c9d 	.word	0x00403c9d
  403ac4:	004041fd 	.word	0x004041fd
  403ac8:	00405a01 	.word	0x00405a01

00403acc <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  403acc:	b480      	push	{r7}
  403ace:	b089      	sub	sp, #36	; 0x24
  403ad0:	af00      	add	r7, sp, #0
  403ad2:	6078      	str	r0, [r7, #4]
  403ad4:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
  403ad6:	687b      	ldr	r3, [r7, #4]
  403ad8:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
  403ada:	2300      	movs	r3, #0
  403adc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
  403ade:	2300      	movs	r3, #0
  403ae0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
  403ae2:	69fb      	ldr	r3, [r7, #28]
  403ae4:	f003 0301 	and.w	r3, r3, #1
  403ae8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  403aea:	693b      	ldr	r3, [r7, #16]
  403aec:	2b00      	cmp	r3, #0
  403aee:	d00d      	beq.n	403b0c <lwip_standard_chksum+0x40>
  403af0:	683b      	ldr	r3, [r7, #0]
  403af2:	2b00      	cmp	r3, #0
  403af4:	dd0a      	ble.n	403b0c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
  403af6:	f107 030e 	add.w	r3, r7, #14
  403afa:	3301      	adds	r3, #1
  403afc:	69fa      	ldr	r2, [r7, #28]
  403afe:	1c51      	adds	r1, r2, #1
  403b00:	61f9      	str	r1, [r7, #28]
  403b02:	7812      	ldrb	r2, [r2, #0]
  403b04:	701a      	strb	r2, [r3, #0]
    len--;
  403b06:	683b      	ldr	r3, [r7, #0]
  403b08:	3b01      	subs	r3, #1
  403b0a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  403b0c:	69fb      	ldr	r3, [r7, #28]
  403b0e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
  403b10:	e00a      	b.n	403b28 <lwip_standard_chksum+0x5c>
    sum += *ps++;
  403b12:	69bb      	ldr	r3, [r7, #24]
  403b14:	1c9a      	adds	r2, r3, #2
  403b16:	61ba      	str	r2, [r7, #24]
  403b18:	881b      	ldrh	r3, [r3, #0]
  403b1a:	461a      	mov	r2, r3
  403b1c:	697b      	ldr	r3, [r7, #20]
  403b1e:	4413      	add	r3, r2
  403b20:	617b      	str	r3, [r7, #20]
    len -= 2;
  403b22:	683b      	ldr	r3, [r7, #0]
  403b24:	3b02      	subs	r3, #2
  403b26:	603b      	str	r3, [r7, #0]
  while (len > 1) {
  403b28:	683b      	ldr	r3, [r7, #0]
  403b2a:	2b01      	cmp	r3, #1
  403b2c:	dcf1      	bgt.n	403b12 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  403b2e:	683b      	ldr	r3, [r7, #0]
  403b30:	2b00      	cmp	r3, #0
  403b32:	dd04      	ble.n	403b3e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  403b34:	f107 030e 	add.w	r3, r7, #14
  403b38:	69ba      	ldr	r2, [r7, #24]
  403b3a:	7812      	ldrb	r2, [r2, #0]
  403b3c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
  403b3e:	89fb      	ldrh	r3, [r7, #14]
  403b40:	461a      	mov	r2, r3
  403b42:	697b      	ldr	r3, [r7, #20]
  403b44:	4413      	add	r3, r2
  403b46:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  403b48:	697b      	ldr	r3, [r7, #20]
  403b4a:	0c1a      	lsrs	r2, r3, #16
  403b4c:	697b      	ldr	r3, [r7, #20]
  403b4e:	b29b      	uxth	r3, r3
  403b50:	4413      	add	r3, r2
  403b52:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
  403b54:	697b      	ldr	r3, [r7, #20]
  403b56:	0c1a      	lsrs	r2, r3, #16
  403b58:	697b      	ldr	r3, [r7, #20]
  403b5a:	b29b      	uxth	r3, r3
  403b5c:	4413      	add	r3, r2
  403b5e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
  403b60:	693b      	ldr	r3, [r7, #16]
  403b62:	2b00      	cmp	r3, #0
  403b64:	d007      	beq.n	403b76 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
  403b66:	697b      	ldr	r3, [r7, #20]
  403b68:	021b      	lsls	r3, r3, #8
  403b6a:	b29a      	uxth	r2, r3
  403b6c:	697b      	ldr	r3, [r7, #20]
  403b6e:	0a1b      	lsrs	r3, r3, #8
  403b70:	b2db      	uxtb	r3, r3
  403b72:	4313      	orrs	r3, r2
  403b74:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
  403b76:	697b      	ldr	r3, [r7, #20]
  403b78:	b29b      	uxth	r3, r3
}
  403b7a:	4618      	mov	r0, r3
  403b7c:	3724      	adds	r7, #36	; 0x24
  403b7e:	46bd      	mov	sp, r7
  403b80:	f85d 7b04 	ldr.w	r7, [sp], #4
  403b84:	4770      	bx	lr
	...

00403b88 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  403b88:	b580      	push	{r7, lr}
  403b8a:	b088      	sub	sp, #32
  403b8c:	af00      	add	r7, sp, #0
  403b8e:	60f8      	str	r0, [r7, #12]
  403b90:	60b9      	str	r1, [r7, #8]
  403b92:	607a      	str	r2, [r7, #4]
  403b94:	70fb      	strb	r3, [r7, #3]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  403b96:	2300      	movs	r3, #0
  403b98:	61fb      	str	r3, [r7, #28]
  swapped = 0;
  403b9a:	2300      	movs	r3, #0
  403b9c:	75fb      	strb	r3, [r7, #23]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  403b9e:	68fb      	ldr	r3, [r7, #12]
  403ba0:	61bb      	str	r3, [r7, #24]
  403ba2:	e028      	b.n	403bf6 <inet_chksum_pseudo+0x6e>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  403ba4:	69bb      	ldr	r3, [r7, #24]
  403ba6:	685a      	ldr	r2, [r3, #4]
  403ba8:	69bb      	ldr	r3, [r7, #24]
  403baa:	895b      	ldrh	r3, [r3, #10]
  403bac:	4619      	mov	r1, r3
  403bae:	4610      	mov	r0, r2
  403bb0:	4b38      	ldr	r3, [pc, #224]	; (403c94 <inet_chksum_pseudo+0x10c>)
  403bb2:	4798      	blx	r3
  403bb4:	4603      	mov	r3, r0
  403bb6:	461a      	mov	r2, r3
  403bb8:	69fb      	ldr	r3, [r7, #28]
  403bba:	4413      	add	r3, r2
  403bbc:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  403bbe:	69fb      	ldr	r3, [r7, #28]
  403bc0:	0c1a      	lsrs	r2, r3, #16
  403bc2:	69fb      	ldr	r3, [r7, #28]
  403bc4:	b29b      	uxth	r3, r3
  403bc6:	4413      	add	r3, r2
  403bc8:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
  403bca:	69bb      	ldr	r3, [r7, #24]
  403bcc:	895b      	ldrh	r3, [r3, #10]
  403bce:	f003 0301 	and.w	r3, r3, #1
  403bd2:	b29b      	uxth	r3, r3
  403bd4:	2b00      	cmp	r3, #0
  403bd6:	d00b      	beq.n	403bf0 <inet_chksum_pseudo+0x68>
      swapped = 1 - swapped;
  403bd8:	7dfb      	ldrb	r3, [r7, #23]
  403bda:	f1c3 0301 	rsb	r3, r3, #1
  403bde:	75fb      	strb	r3, [r7, #23]
      acc = SWAP_BYTES_IN_WORD(acc);
  403be0:	69fb      	ldr	r3, [r7, #28]
  403be2:	021b      	lsls	r3, r3, #8
  403be4:	b29a      	uxth	r2, r3
  403be6:	69fb      	ldr	r3, [r7, #28]
  403be8:	0a1b      	lsrs	r3, r3, #8
  403bea:	b2db      	uxtb	r3, r3
  403bec:	4313      	orrs	r3, r2
  403bee:	61fb      	str	r3, [r7, #28]
  for(q = p; q != NULL; q = q->next) {
  403bf0:	69bb      	ldr	r3, [r7, #24]
  403bf2:	681b      	ldr	r3, [r3, #0]
  403bf4:	61bb      	str	r3, [r7, #24]
  403bf6:	69bb      	ldr	r3, [r7, #24]
  403bf8:	2b00      	cmp	r3, #0
  403bfa:	d1d3      	bne.n	403ba4 <inet_chksum_pseudo+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  403bfc:	7dfb      	ldrb	r3, [r7, #23]
  403bfe:	2b00      	cmp	r3, #0
  403c00:	d007      	beq.n	403c12 <inet_chksum_pseudo+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
  403c02:	69fb      	ldr	r3, [r7, #28]
  403c04:	021b      	lsls	r3, r3, #8
  403c06:	b29a      	uxth	r2, r3
  403c08:	69fb      	ldr	r3, [r7, #28]
  403c0a:	0a1b      	lsrs	r3, r3, #8
  403c0c:	b2db      	uxtb	r3, r3
  403c0e:	4313      	orrs	r3, r2
  403c10:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
  403c12:	68bb      	ldr	r3, [r7, #8]
  403c14:	681b      	ldr	r3, [r3, #0]
  403c16:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  403c18:	693b      	ldr	r3, [r7, #16]
  403c1a:	b29b      	uxth	r3, r3
  403c1c:	69fa      	ldr	r2, [r7, #28]
  403c1e:	4413      	add	r3, r2
  403c20:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  403c22:	693b      	ldr	r3, [r7, #16]
  403c24:	0c1b      	lsrs	r3, r3, #16
  403c26:	69fa      	ldr	r2, [r7, #28]
  403c28:	4413      	add	r3, r2
  403c2a:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
  403c2c:	687b      	ldr	r3, [r7, #4]
  403c2e:	681b      	ldr	r3, [r3, #0]
  403c30:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  403c32:	693b      	ldr	r3, [r7, #16]
  403c34:	b29b      	uxth	r3, r3
  403c36:	69fa      	ldr	r2, [r7, #28]
  403c38:	4413      	add	r3, r2
  403c3a:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  403c3c:	693b      	ldr	r3, [r7, #16]
  403c3e:	0c1b      	lsrs	r3, r3, #16
  403c40:	69fa      	ldr	r2, [r7, #28]
  403c42:	4413      	add	r3, r2
  403c44:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
  403c46:	78fb      	ldrb	r3, [r7, #3]
  403c48:	b29b      	uxth	r3, r3
  403c4a:	4618      	mov	r0, r3
  403c4c:	4b12      	ldr	r3, [pc, #72]	; (403c98 <inet_chksum_pseudo+0x110>)
  403c4e:	4798      	blx	r3
  403c50:	4603      	mov	r3, r0
  403c52:	461a      	mov	r2, r3
  403c54:	69fb      	ldr	r3, [r7, #28]
  403c56:	4413      	add	r3, r2
  403c58:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
  403c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  403c5c:	4618      	mov	r0, r3
  403c5e:	4b0e      	ldr	r3, [pc, #56]	; (403c98 <inet_chksum_pseudo+0x110>)
  403c60:	4798      	blx	r3
  403c62:	4603      	mov	r3, r0
  403c64:	461a      	mov	r2, r3
  403c66:	69fb      	ldr	r3, [r7, #28]
  403c68:	4413      	add	r3, r2
  403c6a:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  403c6c:	69fb      	ldr	r3, [r7, #28]
  403c6e:	0c1a      	lsrs	r2, r3, #16
  403c70:	69fb      	ldr	r3, [r7, #28]
  403c72:	b29b      	uxth	r3, r3
  403c74:	4413      	add	r3, r2
  403c76:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
  403c78:	69fb      	ldr	r3, [r7, #28]
  403c7a:	0c1a      	lsrs	r2, r3, #16
  403c7c:	69fb      	ldr	r3, [r7, #28]
  403c7e:	b29b      	uxth	r3, r3
  403c80:	4413      	add	r3, r2
  403c82:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  403c84:	69fb      	ldr	r3, [r7, #28]
  403c86:	b29b      	uxth	r3, r3
  403c88:	43db      	mvns	r3, r3
  403c8a:	b29b      	uxth	r3, r3
}
  403c8c:	4618      	mov	r0, r3
  403c8e:	3720      	adds	r7, #32
  403c90:	46bd      	mov	sp, r7
  403c92:	bd80      	pop	{r7, pc}
  403c94:	00403acd 	.word	0x00403acd
  403c98:	00401e19 	.word	0x00401e19

00403c9c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  403c9c:	b580      	push	{r7, lr}
  403c9e:	b082      	sub	sp, #8
  403ca0:	af00      	add	r7, sp, #0
  403ca2:	6078      	str	r0, [r7, #4]
  403ca4:	460b      	mov	r3, r1
  403ca6:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
  403ca8:	887b      	ldrh	r3, [r7, #2]
  403caa:	4619      	mov	r1, r3
  403cac:	6878      	ldr	r0, [r7, #4]
  403cae:	4b04      	ldr	r3, [pc, #16]	; (403cc0 <inet_chksum+0x24>)
  403cb0:	4798      	blx	r3
  403cb2:	4603      	mov	r3, r0
  403cb4:	43db      	mvns	r3, r3
  403cb6:	b29b      	uxth	r3, r3
}
  403cb8:	4618      	mov	r0, r3
  403cba:	3708      	adds	r7, #8
  403cbc:	46bd      	mov	sp, r7
  403cbe:	bd80      	pop	{r7, pc}
  403cc0:	00403acd 	.word	0x00403acd

00403cc4 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  403cc4:	b580      	push	{r7, lr}
  403cc6:	b086      	sub	sp, #24
  403cc8:	af00      	add	r7, sp, #0
  403cca:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  403ccc:	2300      	movs	r3, #0
  403cce:	617b      	str	r3, [r7, #20]
  swapped = 0;
  403cd0:	2300      	movs	r3, #0
  403cd2:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
  403cd4:	687b      	ldr	r3, [r7, #4]
  403cd6:	613b      	str	r3, [r7, #16]
  403cd8:	e028      	b.n	403d2c <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
  403cda:	693b      	ldr	r3, [r7, #16]
  403cdc:	685a      	ldr	r2, [r3, #4]
  403cde:	693b      	ldr	r3, [r7, #16]
  403ce0:	895b      	ldrh	r3, [r3, #10]
  403ce2:	4619      	mov	r1, r3
  403ce4:	4610      	mov	r0, r2
  403ce6:	4b1c      	ldr	r3, [pc, #112]	; (403d58 <inet_chksum_pbuf+0x94>)
  403ce8:	4798      	blx	r3
  403cea:	4603      	mov	r3, r0
  403cec:	461a      	mov	r2, r3
  403cee:	697b      	ldr	r3, [r7, #20]
  403cf0:	4413      	add	r3, r2
  403cf2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
  403cf4:	697b      	ldr	r3, [r7, #20]
  403cf6:	0c1a      	lsrs	r2, r3, #16
  403cf8:	697b      	ldr	r3, [r7, #20]
  403cfa:	b29b      	uxth	r3, r3
  403cfc:	4413      	add	r3, r2
  403cfe:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
  403d00:	693b      	ldr	r3, [r7, #16]
  403d02:	895b      	ldrh	r3, [r3, #10]
  403d04:	f003 0301 	and.w	r3, r3, #1
  403d08:	b29b      	uxth	r3, r3
  403d0a:	2b00      	cmp	r3, #0
  403d0c:	d00b      	beq.n	403d26 <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
  403d0e:	7bfb      	ldrb	r3, [r7, #15]
  403d10:	f1c3 0301 	rsb	r3, r3, #1
  403d14:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
  403d16:	697b      	ldr	r3, [r7, #20]
  403d18:	021b      	lsls	r3, r3, #8
  403d1a:	b29a      	uxth	r2, r3
  403d1c:	697b      	ldr	r3, [r7, #20]
  403d1e:	0a1b      	lsrs	r3, r3, #8
  403d20:	b2db      	uxtb	r3, r3
  403d22:	4313      	orrs	r3, r2
  403d24:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next) {
  403d26:	693b      	ldr	r3, [r7, #16]
  403d28:	681b      	ldr	r3, [r3, #0]
  403d2a:	613b      	str	r3, [r7, #16]
  403d2c:	693b      	ldr	r3, [r7, #16]
  403d2e:	2b00      	cmp	r3, #0
  403d30:	d1d3      	bne.n	403cda <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
  403d32:	7bfb      	ldrb	r3, [r7, #15]
  403d34:	2b00      	cmp	r3, #0
  403d36:	d007      	beq.n	403d48 <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
  403d38:	697b      	ldr	r3, [r7, #20]
  403d3a:	021b      	lsls	r3, r3, #8
  403d3c:	b29a      	uxth	r2, r3
  403d3e:	697b      	ldr	r3, [r7, #20]
  403d40:	0a1b      	lsrs	r3, r3, #8
  403d42:	b2db      	uxtb	r3, r3
  403d44:	4313      	orrs	r3, r2
  403d46:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
  403d48:	697b      	ldr	r3, [r7, #20]
  403d4a:	b29b      	uxth	r3, r3
  403d4c:	43db      	mvns	r3, r3
  403d4e:	b29b      	uxth	r3, r3
}
  403d50:	4618      	mov	r0, r3
  403d52:	3718      	adds	r7, #24
  403d54:	46bd      	mov	sp, r7
  403d56:	bd80      	pop	{r7, pc}
  403d58:	00403acd 	.word	0x00403acd

00403d5c <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
  403d5c:	b480      	push	{r7}
  403d5e:	b085      	sub	sp, #20
  403d60:	af00      	add	r7, sp, #0
  403d62:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  403d64:	4b19      	ldr	r3, [pc, #100]	; (403dcc <ip_route+0x70>)
  403d66:	681b      	ldr	r3, [r3, #0]
  403d68:	60fb      	str	r3, [r7, #12]
  403d6a:	e015      	b.n	403d98 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  403d6c:	68fb      	ldr	r3, [r7, #12]
  403d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  403d72:	f003 0301 	and.w	r3, r3, #1
  403d76:	2b00      	cmp	r3, #0
  403d78:	d00b      	beq.n	403d92 <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  403d7a:	687b      	ldr	r3, [r7, #4]
  403d7c:	681a      	ldr	r2, [r3, #0]
  403d7e:	68fb      	ldr	r3, [r7, #12]
  403d80:	685b      	ldr	r3, [r3, #4]
  403d82:	405a      	eors	r2, r3
  403d84:	68fb      	ldr	r3, [r7, #12]
  403d86:	689b      	ldr	r3, [r3, #8]
  403d88:	4013      	ands	r3, r2
  403d8a:	2b00      	cmp	r3, #0
  403d8c:	d101      	bne.n	403d92 <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
  403d8e:	68fb      	ldr	r3, [r7, #12]
  403d90:	e015      	b.n	403dbe <ip_route+0x62>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  403d92:	68fb      	ldr	r3, [r7, #12]
  403d94:	681b      	ldr	r3, [r3, #0]
  403d96:	60fb      	str	r3, [r7, #12]
  403d98:	68fb      	ldr	r3, [r7, #12]
  403d9a:	2b00      	cmp	r3, #0
  403d9c:	d1e6      	bne.n	403d6c <ip_route+0x10>
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  403d9e:	4b0c      	ldr	r3, [pc, #48]	; (403dd0 <ip_route+0x74>)
  403da0:	681b      	ldr	r3, [r3, #0]
  403da2:	2b00      	cmp	r3, #0
  403da4:	d007      	beq.n	403db6 <ip_route+0x5a>
  403da6:	4b0a      	ldr	r3, [pc, #40]	; (403dd0 <ip_route+0x74>)
  403da8:	681b      	ldr	r3, [r3, #0]
  403daa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  403dae:	f003 0301 	and.w	r3, r3, #1
  403db2:	2b00      	cmp	r3, #0
  403db4:	d101      	bne.n	403dba <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  403db6:	2300      	movs	r3, #0
  403db8:	e001      	b.n	403dbe <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
  403dba:	4b05      	ldr	r3, [pc, #20]	; (403dd0 <ip_route+0x74>)
  403dbc:	681b      	ldr	r3, [r3, #0]
}
  403dbe:	4618      	mov	r0, r3
  403dc0:	3714      	adds	r7, #20
  403dc2:	46bd      	mov	sp, r7
  403dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
  403dc8:	4770      	bx	lr
  403dca:	bf00      	nop
  403dcc:	204043d8 	.word	0x204043d8
  403dd0:	204043dc 	.word	0x204043dc

00403dd4 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  403dd4:	b580      	push	{r7, lr}
  403dd6:	b088      	sub	sp, #32
  403dd8:	af00      	add	r7, sp, #0
  403dda:	6078      	str	r0, [r7, #4]
  403ddc:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
  403dde:	2301      	movs	r3, #1
  403de0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  403de2:	687b      	ldr	r3, [r7, #4]
  403de4:	685b      	ldr	r3, [r3, #4]
  403de6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
  403de8:	69fb      	ldr	r3, [r7, #28]
  403dea:	781b      	ldrb	r3, [r3, #0]
  403dec:	091b      	lsrs	r3, r3, #4
  403dee:	b2db      	uxtb	r3, r3
  403df0:	2b04      	cmp	r3, #4
  403df2:	d004      	beq.n	403dfe <ip_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  403df4:	6878      	ldr	r0, [r7, #4]
  403df6:	4b85      	ldr	r3, [pc, #532]	; (40400c <ip_input+0x238>)
  403df8:	4798      	blx	r3
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  403dfa:	2300      	movs	r3, #0
  403dfc:	e102      	b.n	404004 <ip_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  403dfe:	69fb      	ldr	r3, [r7, #28]
  403e00:	781b      	ldrb	r3, [r3, #0]
  403e02:	b29b      	uxth	r3, r3
  403e04:	f003 030f 	and.w	r3, r3, #15
  403e08:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  403e0a:	89fb      	ldrh	r3, [r7, #14]
  403e0c:	009b      	lsls	r3, r3, #2
  403e0e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  403e10:	69fb      	ldr	r3, [r7, #28]
  403e12:	885b      	ldrh	r3, [r3, #2]
  403e14:	b29b      	uxth	r3, r3
  403e16:	4618      	mov	r0, r3
  403e18:	4b7d      	ldr	r3, [pc, #500]	; (404010 <ip_input+0x23c>)
  403e1a:	4798      	blx	r3
  403e1c:	4603      	mov	r3, r0
  403e1e:	81bb      	strh	r3, [r7, #12]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  403e20:	687b      	ldr	r3, [r7, #4]
  403e22:	895b      	ldrh	r3, [r3, #10]
  403e24:	89fa      	ldrh	r2, [r7, #14]
  403e26:	429a      	cmp	r2, r3
  403e28:	d804      	bhi.n	403e34 <ip_input+0x60>
  403e2a:	687b      	ldr	r3, [r7, #4]
  403e2c:	891b      	ldrh	r3, [r3, #8]
  403e2e:	89ba      	ldrh	r2, [r7, #12]
  403e30:	429a      	cmp	r2, r3
  403e32:	d904      	bls.n	403e3e <ip_input+0x6a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  403e34:	6878      	ldr	r0, [r7, #4]
  403e36:	4b75      	ldr	r3, [pc, #468]	; (40400c <ip_input+0x238>)
  403e38:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  403e3a:	2300      	movs	r3, #0
  403e3c:	e0e2      	b.n	404004 <ip_input+0x230>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  403e3e:	89fb      	ldrh	r3, [r7, #14]
  403e40:	4619      	mov	r1, r3
  403e42:	69f8      	ldr	r0, [r7, #28]
  403e44:	4b73      	ldr	r3, [pc, #460]	; (404014 <ip_input+0x240>)
  403e46:	4798      	blx	r3
  403e48:	4603      	mov	r3, r0
  403e4a:	2b00      	cmp	r3, #0
  403e4c:	d004      	beq.n	403e58 <ip_input+0x84>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  403e4e:	6878      	ldr	r0, [r7, #4]
  403e50:	4b6e      	ldr	r3, [pc, #440]	; (40400c <ip_input+0x238>)
  403e52:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  403e54:	2300      	movs	r3, #0
  403e56:	e0d5      	b.n	404004 <ip_input+0x230>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  403e58:	89bb      	ldrh	r3, [r7, #12]
  403e5a:	4619      	mov	r1, r3
  403e5c:	6878      	ldr	r0, [r7, #4]
  403e5e:	4b6e      	ldr	r3, [pc, #440]	; (404018 <ip_input+0x244>)
  403e60:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  403e62:	69fb      	ldr	r3, [r7, #28]
  403e64:	691b      	ldr	r3, [r3, #16]
  403e66:	4a6d      	ldr	r2, [pc, #436]	; (40401c <ip_input+0x248>)
  403e68:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  403e6a:	69fb      	ldr	r3, [r7, #28]
  403e6c:	68db      	ldr	r3, [r3, #12]
  403e6e:	4a6c      	ldr	r2, [pc, #432]	; (404020 <ip_input+0x24c>)
  403e70:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  403e72:	2301      	movs	r3, #1
  403e74:	613b      	str	r3, [r7, #16]
    netif = inp;
  403e76:	683b      	ldr	r3, [r7, #0]
  403e78:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  403e7a:	69bb      	ldr	r3, [r7, #24]
  403e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  403e80:	f003 0301 	and.w	r3, r3, #1
  403e84:	2b00      	cmp	r3, #0
  403e86:	d016      	beq.n	403eb6 <ip_input+0xe2>
  403e88:	69bb      	ldr	r3, [r7, #24]
  403e8a:	3304      	adds	r3, #4
  403e8c:	2b00      	cmp	r3, #0
  403e8e:	d012      	beq.n	403eb6 <ip_input+0xe2>
  403e90:	69bb      	ldr	r3, [r7, #24]
  403e92:	685b      	ldr	r3, [r3, #4]
  403e94:	2b00      	cmp	r3, #0
  403e96:	d00e      	beq.n	403eb6 <ip_input+0xe2>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  403e98:	4b60      	ldr	r3, [pc, #384]	; (40401c <ip_input+0x248>)
  403e9a:	681a      	ldr	r2, [r3, #0]
  403e9c:	69bb      	ldr	r3, [r7, #24]
  403e9e:	685b      	ldr	r3, [r3, #4]
  403ea0:	429a      	cmp	r2, r3
  403ea2:	d01e      	beq.n	403ee2 <ip_input+0x10e>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  403ea4:	4b5d      	ldr	r3, [pc, #372]	; (40401c <ip_input+0x248>)
  403ea6:	681b      	ldr	r3, [r3, #0]
  403ea8:	69b9      	ldr	r1, [r7, #24]
  403eaa:	4618      	mov	r0, r3
  403eac:	4b5d      	ldr	r3, [pc, #372]	; (404024 <ip_input+0x250>)
  403eae:	4798      	blx	r3
  403eb0:	4603      	mov	r3, r0
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  403eb2:	2b00      	cmp	r3, #0
  403eb4:	d115      	bne.n	403ee2 <ip_input+0x10e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  403eb6:	693b      	ldr	r3, [r7, #16]
  403eb8:	2b00      	cmp	r3, #0
  403eba:	d005      	beq.n	403ec8 <ip_input+0xf4>
        first = 0;
  403ebc:	2300      	movs	r3, #0
  403ebe:	613b      	str	r3, [r7, #16]
        netif = netif_list;
  403ec0:	4b59      	ldr	r3, [pc, #356]	; (404028 <ip_input+0x254>)
  403ec2:	681b      	ldr	r3, [r3, #0]
  403ec4:	61bb      	str	r3, [r7, #24]
  403ec6:	e002      	b.n	403ece <ip_input+0xfa>
      } else {
        netif = netif->next;
  403ec8:	69bb      	ldr	r3, [r7, #24]
  403eca:	681b      	ldr	r3, [r3, #0]
  403ecc:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
  403ece:	69ba      	ldr	r2, [r7, #24]
  403ed0:	683b      	ldr	r3, [r7, #0]
  403ed2:	429a      	cmp	r2, r3
  403ed4:	d102      	bne.n	403edc <ip_input+0x108>
        netif = netif->next;
  403ed6:	69bb      	ldr	r3, [r7, #24]
  403ed8:	681b      	ldr	r3, [r3, #0]
  403eda:	61bb      	str	r3, [r7, #24]
      }
    } while(netif != NULL);
  403edc:	69bb      	ldr	r3, [r7, #24]
  403ede:	2b00      	cmp	r3, #0
  403ee0:	d1cb      	bne.n	403e7a <ip_input+0xa6>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  403ee2:	69bb      	ldr	r3, [r7, #24]
  403ee4:	2b00      	cmp	r3, #0
  403ee6:	d111      	bne.n	403f0c <ip_input+0x138>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  403ee8:	69fb      	ldr	r3, [r7, #28]
  403eea:	7a5b      	ldrb	r3, [r3, #9]
  403eec:	2b11      	cmp	r3, #17
  403eee:	d10d      	bne.n	403f0c <ip_input+0x138>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  403ef0:	89fb      	ldrh	r3, [r7, #14]
  403ef2:	69fa      	ldr	r2, [r7, #28]
  403ef4:	4413      	add	r3, r2
  403ef6:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  403ef8:	68bb      	ldr	r3, [r7, #8]
  403efa:	885b      	ldrh	r3, [r3, #2]
  403efc:	b29b      	uxth	r3, r3
  403efe:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
  403f02:	d103      	bne.n	403f0c <ip_input+0x138>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
  403f04:	683b      	ldr	r3, [r7, #0]
  403f06:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
  403f08:	2300      	movs	r3, #0
  403f0a:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
  403f0c:	697b      	ldr	r3, [r7, #20]
  403f0e:	2b00      	cmp	r3, #0
  403f10:	d017      	beq.n	403f42 <ip_input+0x16e>
  403f12:	4b43      	ldr	r3, [pc, #268]	; (404020 <ip_input+0x24c>)
  403f14:	681b      	ldr	r3, [r3, #0]
  403f16:	2b00      	cmp	r3, #0
  403f18:	d013      	beq.n	403f42 <ip_input+0x16e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  403f1a:	4b41      	ldr	r3, [pc, #260]	; (404020 <ip_input+0x24c>)
  403f1c:	681b      	ldr	r3, [r3, #0]
  403f1e:	6839      	ldr	r1, [r7, #0]
  403f20:	4618      	mov	r0, r3
  403f22:	4b40      	ldr	r3, [pc, #256]	; (404024 <ip_input+0x250>)
  403f24:	4798      	blx	r3
  403f26:	4603      	mov	r3, r0
  403f28:	2b00      	cmp	r3, #0
  403f2a:	d105      	bne.n	403f38 <ip_input+0x164>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  403f2c:	4b3c      	ldr	r3, [pc, #240]	; (404020 <ip_input+0x24c>)
  403f2e:	681b      	ldr	r3, [r3, #0]
  403f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  403f34:	2be0      	cmp	r3, #224	; 0xe0
  403f36:	d104      	bne.n	403f42 <ip_input+0x16e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  403f38:	6878      	ldr	r0, [r7, #4]
  403f3a:	4b34      	ldr	r3, [pc, #208]	; (40400c <ip_input+0x238>)
  403f3c:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  403f3e:	2300      	movs	r3, #0
  403f40:	e060      	b.n	404004 <ip_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  403f42:	69bb      	ldr	r3, [r7, #24]
  403f44:	2b00      	cmp	r3, #0
  403f46:	d104      	bne.n	403f52 <ip_input+0x17e>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  403f48:	6878      	ldr	r0, [r7, #4]
  403f4a:	4b30      	ldr	r3, [pc, #192]	; (40400c <ip_input+0x238>)
  403f4c:	4798      	blx	r3
    return ERR_OK;
  403f4e:	2300      	movs	r3, #0
  403f50:	e058      	b.n	404004 <ip_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  403f52:	69fb      	ldr	r3, [r7, #28]
  403f54:	88db      	ldrh	r3, [r3, #6]
  403f56:	b29b      	uxth	r3, r3
  403f58:	461a      	mov	r2, r3
  403f5a:	f64f 733f 	movw	r3, #65343	; 0xff3f
  403f5e:	4013      	ands	r3, r2
  403f60:	2b00      	cmp	r3, #0
  403f62:	d00b      	beq.n	403f7c <ip_input+0x1a8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  403f64:	6878      	ldr	r0, [r7, #4]
  403f66:	4b31      	ldr	r3, [pc, #196]	; (40402c <ip_input+0x258>)
  403f68:	4798      	blx	r3
  403f6a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  403f6c:	687b      	ldr	r3, [r7, #4]
  403f6e:	2b00      	cmp	r3, #0
  403f70:	d101      	bne.n	403f76 <ip_input+0x1a2>
      return ERR_OK;
  403f72:	2300      	movs	r3, #0
  403f74:	e046      	b.n	404004 <ip_input+0x230>
    }
    iphdr = (struct ip_hdr *)p->payload;
  403f76:	687b      	ldr	r3, [r7, #4]
  403f78:	685b      	ldr	r3, [r3, #4]
  403f7a:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  403f7c:	4a2c      	ldr	r2, [pc, #176]	; (404030 <ip_input+0x25c>)
  403f7e:	683b      	ldr	r3, [r7, #0]
  403f80:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
  403f82:	4a2c      	ldr	r2, [pc, #176]	; (404034 <ip_input+0x260>)
  403f84:	69fb      	ldr	r3, [r7, #28]
  403f86:	6013      	str	r3, [r2, #0]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
  403f88:	69fb      	ldr	r3, [r7, #28]
  403f8a:	7a5b      	ldrb	r3, [r3, #9]
  403f8c:	2b06      	cmp	r3, #6
  403f8e:	d009      	beq.n	403fa4 <ip_input+0x1d0>
  403f90:	2b11      	cmp	r3, #17
  403f92:	d002      	beq.n	403f9a <ip_input+0x1c6>
  403f94:	2b01      	cmp	r3, #1
  403f96:	d00a      	beq.n	403fae <ip_input+0x1da>
  403f98:	e00e      	b.n	403fb8 <ip_input+0x1e4>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  403f9a:	6839      	ldr	r1, [r7, #0]
  403f9c:	6878      	ldr	r0, [r7, #4]
  403f9e:	4b26      	ldr	r3, [pc, #152]	; (404038 <ip_input+0x264>)
  403fa0:	4798      	blx	r3
      break;
  403fa2:	e022      	b.n	403fea <ip_input+0x216>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  403fa4:	6839      	ldr	r1, [r7, #0]
  403fa6:	6878      	ldr	r0, [r7, #4]
  403fa8:	4b24      	ldr	r3, [pc, #144]	; (40403c <ip_input+0x268>)
  403faa:	4798      	blx	r3
      break;
  403fac:	e01d      	b.n	403fea <ip_input+0x216>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  403fae:	6839      	ldr	r1, [r7, #0]
  403fb0:	6878      	ldr	r0, [r7, #4]
  403fb2:	4b23      	ldr	r3, [pc, #140]	; (404040 <ip_input+0x26c>)
  403fb4:	4798      	blx	r3
      break;
  403fb6:	e018      	b.n	403fea <ip_input+0x216>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  403fb8:	4b18      	ldr	r3, [pc, #96]	; (40401c <ip_input+0x248>)
  403fba:	681b      	ldr	r3, [r3, #0]
  403fbc:	6839      	ldr	r1, [r7, #0]
  403fbe:	4618      	mov	r0, r3
  403fc0:	4b18      	ldr	r3, [pc, #96]	; (404024 <ip_input+0x250>)
  403fc2:	4798      	blx	r3
  403fc4:	4603      	mov	r3, r0
  403fc6:	2b00      	cmp	r3, #0
  403fc8:	d10c      	bne.n	403fe4 <ip_input+0x210>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  403fca:	4b14      	ldr	r3, [pc, #80]	; (40401c <ip_input+0x248>)
  403fcc:	681b      	ldr	r3, [r3, #0]
  403fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  403fd2:	2be0      	cmp	r3, #224	; 0xe0
  403fd4:	d006      	beq.n	403fe4 <ip_input+0x210>
        p->payload = iphdr;
  403fd6:	687b      	ldr	r3, [r7, #4]
  403fd8:	69fa      	ldr	r2, [r7, #28]
  403fda:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  403fdc:	2102      	movs	r1, #2
  403fde:	6878      	ldr	r0, [r7, #4]
  403fe0:	4b18      	ldr	r3, [pc, #96]	; (404044 <ip_input+0x270>)
  403fe2:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  403fe4:	6878      	ldr	r0, [r7, #4]
  403fe6:	4b09      	ldr	r3, [pc, #36]	; (40400c <ip_input+0x238>)
  403fe8:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
  403fea:	4b11      	ldr	r3, [pc, #68]	; (404030 <ip_input+0x25c>)
  403fec:	2200      	movs	r2, #0
  403fee:	601a      	str	r2, [r3, #0]
  current_header = NULL;
  403ff0:	4b10      	ldr	r3, [pc, #64]	; (404034 <ip_input+0x260>)
  403ff2:	2200      	movs	r2, #0
  403ff4:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
  403ff6:	4b0a      	ldr	r3, [pc, #40]	; (404020 <ip_input+0x24c>)
  403ff8:	2200      	movs	r2, #0
  403ffa:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
  403ffc:	4b07      	ldr	r3, [pc, #28]	; (40401c <ip_input+0x248>)
  403ffe:	2200      	movs	r2, #0
  404000:	601a      	str	r2, [r3, #0]

  return ERR_OK;
  404002:	2300      	movs	r3, #0
}
  404004:	4618      	mov	r0, r3
  404006:	3720      	adds	r7, #32
  404008:	46bd      	mov	sp, r7
  40400a:	bd80      	pop	{r7, pc}
  40400c:	00405a01 	.word	0x00405a01
  404010:	00401e45 	.word	0x00401e45
  404014:	00403c9d 	.word	0x00403c9d
  404018:	00405869 	.word	0x00405869
  40401c:	204033bc 	.word	0x204033bc
  404020:	204033b4 	.word	0x204033b4
  404024:	00404251 	.word	0x00404251
  404028:	204043d8 	.word	0x204043d8
  40402c:	0040476d 	.word	0x0040476d
  404030:	204033b8 	.word	0x204033b8
  404034:	204033c0 	.word	0x204033c0
  404038:	0040a3ad 	.word	0x0040a3ad
  40403c:	00406fd1 	.word	0x00406fd1
  404040:	0040379d 	.word	0x0040379d
  404044:	004039c5 	.word	0x004039c5

00404048 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  404048:	b580      	push	{r7, lr}
  40404a:	b088      	sub	sp, #32
  40404c:	af00      	add	r7, sp, #0
  40404e:	60f8      	str	r0, [r7, #12]
  404050:	60b9      	str	r1, [r7, #8]
  404052:	607a      	str	r2, [r7, #4]
  404054:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  404056:	2300      	movs	r3, #0
  404058:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  40405a:	687b      	ldr	r3, [r7, #4]
  40405c:	2b00      	cmp	r3, #0
  40405e:	f000 80a0 	beq.w	4041a2 <ip_output_if+0x15a>
    u16_t ip_hlen = IP_HLEN;
  404062:	2314      	movs	r3, #20
  404064:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  404066:	2114      	movs	r1, #20
  404068:	68f8      	ldr	r0, [r7, #12]
  40406a:	4b60      	ldr	r3, [pc, #384]	; (4041ec <ip_output_if+0x1a4>)
  40406c:	4798      	blx	r3
  40406e:	4603      	mov	r3, r0
  404070:	2b00      	cmp	r3, #0
  404072:	d002      	beq.n	40407a <ip_output_if+0x32>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  404074:	f06f 0301 	mvn.w	r3, #1
  404078:	e0b4      	b.n	4041e4 <ip_output_if+0x19c>
    }

    iphdr = (struct ip_hdr *)p->payload;
  40407a:	68fb      	ldr	r3, [r7, #12]
  40407c:	685b      	ldr	r3, [r3, #4]
  40407e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  404080:	697b      	ldr	r3, [r7, #20]
  404082:	78fa      	ldrb	r2, [r7, #3]
  404084:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  404086:	697b      	ldr	r3, [r7, #20]
  404088:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
  40408c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  40408e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404092:	021a      	lsls	r2, r3, #8
  404094:	78fb      	ldrb	r3, [r7, #3]
  404096:	4313      	orrs	r3, r2
  404098:	461a      	mov	r2, r3
  40409a:	69fb      	ldr	r3, [r7, #28]
  40409c:	4413      	add	r3, r2
  40409e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  4040a0:	687b      	ldr	r3, [r7, #4]
  4040a2:	681a      	ldr	r2, [r3, #0]
  4040a4:	697b      	ldr	r3, [r7, #20]
  4040a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  4040a8:	697b      	ldr	r3, [r7, #20]
  4040aa:	691b      	ldr	r3, [r3, #16]
  4040ac:	b29b      	uxth	r3, r3
  4040ae:	69fa      	ldr	r2, [r7, #28]
  4040b0:	4413      	add	r3, r2
  4040b2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  4040b4:	697b      	ldr	r3, [r7, #20]
  4040b6:	691b      	ldr	r3, [r3, #16]
  4040b8:	0c1b      	lsrs	r3, r3, #16
  4040ba:	69fa      	ldr	r2, [r7, #28]
  4040bc:	4413      	add	r3, r2
  4040be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  4040c0:	8b7b      	ldrh	r3, [r7, #26]
  4040c2:	089b      	lsrs	r3, r3, #2
  4040c4:	b29b      	uxth	r3, r3
  4040c6:	b2db      	uxtb	r3, r3
  4040c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4040cc:	b2da      	uxtb	r2, r3
  4040ce:	697b      	ldr	r3, [r7, #20]
  4040d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
  4040d2:	697b      	ldr	r3, [r7, #20]
  4040d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  4040d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  4040da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4040de:	021b      	lsls	r3, r3, #8
  4040e0:	697a      	ldr	r2, [r7, #20]
  4040e2:	7812      	ldrb	r2, [r2, #0]
  4040e4:	4313      	orrs	r3, r2
  4040e6:	461a      	mov	r2, r3
  4040e8:	69fb      	ldr	r3, [r7, #28]
  4040ea:	4413      	add	r3, r2
  4040ec:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  4040ee:	68fb      	ldr	r3, [r7, #12]
  4040f0:	891b      	ldrh	r3, [r3, #8]
  4040f2:	4618      	mov	r0, r3
  4040f4:	4b3e      	ldr	r3, [pc, #248]	; (4041f0 <ip_output_if+0x1a8>)
  4040f6:	4798      	blx	r3
  4040f8:	4603      	mov	r3, r0
  4040fa:	461a      	mov	r2, r3
  4040fc:	697b      	ldr	r3, [r7, #20]
  4040fe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  404100:	697b      	ldr	r3, [r7, #20]
  404102:	885b      	ldrh	r3, [r3, #2]
  404104:	b29b      	uxth	r3, r3
  404106:	461a      	mov	r2, r3
  404108:	69fb      	ldr	r3, [r7, #28]
  40410a:	4413      	add	r3, r2
  40410c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  40410e:	697b      	ldr	r3, [r7, #20]
  404110:	2200      	movs	r2, #0
  404112:	719a      	strb	r2, [r3, #6]
  404114:	2200      	movs	r2, #0
  404116:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  404118:	4b36      	ldr	r3, [pc, #216]	; (4041f4 <ip_output_if+0x1ac>)
  40411a:	881b      	ldrh	r3, [r3, #0]
  40411c:	4618      	mov	r0, r3
  40411e:	4b34      	ldr	r3, [pc, #208]	; (4041f0 <ip_output_if+0x1a8>)
  404120:	4798      	blx	r3
  404122:	4603      	mov	r3, r0
  404124:	461a      	mov	r2, r3
  404126:	697b      	ldr	r3, [r7, #20]
  404128:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  40412a:	697b      	ldr	r3, [r7, #20]
  40412c:	889b      	ldrh	r3, [r3, #4]
  40412e:	b29b      	uxth	r3, r3
  404130:	461a      	mov	r2, r3
  404132:	69fb      	ldr	r3, [r7, #28]
  404134:	4413      	add	r3, r2
  404136:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  404138:	4b2e      	ldr	r3, [pc, #184]	; (4041f4 <ip_output_if+0x1ac>)
  40413a:	881b      	ldrh	r3, [r3, #0]
  40413c:	3301      	adds	r3, #1
  40413e:	b29a      	uxth	r2, r3
  404140:	4b2c      	ldr	r3, [pc, #176]	; (4041f4 <ip_output_if+0x1ac>)
  404142:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
  404144:	68bb      	ldr	r3, [r7, #8]
  404146:	2b00      	cmp	r3, #0
  404148:	d003      	beq.n	404152 <ip_output_if+0x10a>
  40414a:	68bb      	ldr	r3, [r7, #8]
  40414c:	681b      	ldr	r3, [r3, #0]
  40414e:	2b00      	cmp	r3, #0
  404150:	d104      	bne.n	40415c <ip_output_if+0x114>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  404152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404154:	685a      	ldr	r2, [r3, #4]
  404156:	697b      	ldr	r3, [r7, #20]
  404158:	60da      	str	r2, [r3, #12]
  40415a:	e003      	b.n	404164 <ip_output_if+0x11c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  40415c:	68bb      	ldr	r3, [r7, #8]
  40415e:	681a      	ldr	r2, [r3, #0]
  404160:	697b      	ldr	r3, [r7, #20]
  404162:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  404164:	697b      	ldr	r3, [r7, #20]
  404166:	68db      	ldr	r3, [r3, #12]
  404168:	b29b      	uxth	r3, r3
  40416a:	69fa      	ldr	r2, [r7, #28]
  40416c:	4413      	add	r3, r2
  40416e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  404170:	697b      	ldr	r3, [r7, #20]
  404172:	68db      	ldr	r3, [r3, #12]
  404174:	0c1b      	lsrs	r3, r3, #16
  404176:	69fa      	ldr	r2, [r7, #28]
  404178:	4413      	add	r3, r2
  40417a:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  40417c:	69fb      	ldr	r3, [r7, #28]
  40417e:	0c1a      	lsrs	r2, r3, #16
  404180:	69fb      	ldr	r3, [r7, #28]
  404182:	b29b      	uxth	r3, r3
  404184:	4413      	add	r3, r2
  404186:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
  404188:	69fb      	ldr	r3, [r7, #28]
  40418a:	0c1b      	lsrs	r3, r3, #16
  40418c:	69fa      	ldr	r2, [r7, #28]
  40418e:	4413      	add	r3, r2
  404190:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
  404192:	69fb      	ldr	r3, [r7, #28]
  404194:	43db      	mvns	r3, r3
  404196:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
  404198:	69fb      	ldr	r3, [r7, #28]
  40419a:	b29a      	uxth	r2, r3
  40419c:	697b      	ldr	r3, [r7, #20]
  40419e:	815a      	strh	r2, [r3, #10]
  4041a0:	e008      	b.n	4041b4 <ip_output_if+0x16c>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  4041a2:	68fb      	ldr	r3, [r7, #12]
  4041a4:	685b      	ldr	r3, [r3, #4]
  4041a6:	617b      	str	r3, [r7, #20]
    ip_addr_copy(dest_addr, iphdr->dest);
  4041a8:	697b      	ldr	r3, [r7, #20]
  4041aa:	691b      	ldr	r3, [r3, #16]
  4041ac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
  4041ae:	f107 0310 	add.w	r3, r7, #16
  4041b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  4041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4041b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4041b8:	2b00      	cmp	r3, #0
  4041ba:	d00c      	beq.n	4041d6 <ip_output_if+0x18e>
  4041bc:	68fb      	ldr	r3, [r7, #12]
  4041be:	891a      	ldrh	r2, [r3, #8]
  4041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4041c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4041c4:	429a      	cmp	r2, r3
  4041c6:	d906      	bls.n	4041d6 <ip_output_if+0x18e>
    return ip_frag(p, netif, dest);
  4041c8:	687a      	ldr	r2, [r7, #4]
  4041ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4041cc:	68f8      	ldr	r0, [r7, #12]
  4041ce:	4b0a      	ldr	r3, [pc, #40]	; (4041f8 <ip_output_if+0x1b0>)
  4041d0:	4798      	blx	r3
  4041d2:	4603      	mov	r3, r0
  4041d4:	e006      	b.n	4041e4 <ip_output_if+0x19c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  4041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4041d8:	695b      	ldr	r3, [r3, #20]
  4041da:	687a      	ldr	r2, [r7, #4]
  4041dc:	68f9      	ldr	r1, [r7, #12]
  4041de:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4041e0:	4798      	blx	r3
  4041e2:	4603      	mov	r3, r0
}
  4041e4:	4618      	mov	r0, r3
  4041e6:	3720      	adds	r7, #32
  4041e8:	46bd      	mov	sp, r7
  4041ea:	bd80      	pop	{r7, pc}
  4041ec:	00405925 	.word	0x00405925
  4041f0:	00401e19 	.word	0x00401e19
  4041f4:	2040052c 	.word	0x2040052c
  4041f8:	004049e1 	.word	0x004049e1

004041fc <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  4041fc:	b590      	push	{r4, r7, lr}
  4041fe:	b08b      	sub	sp, #44	; 0x2c
  404200:	af04      	add	r7, sp, #16
  404202:	60f8      	str	r0, [r7, #12]
  404204:	60b9      	str	r1, [r7, #8]
  404206:	607a      	str	r2, [r7, #4]
  404208:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  40420a:	6878      	ldr	r0, [r7, #4]
  40420c:	4b0e      	ldr	r3, [pc, #56]	; (404248 <ip_output+0x4c>)
  40420e:	4798      	blx	r3
  404210:	6178      	str	r0, [r7, #20]
  404212:	697b      	ldr	r3, [r7, #20]
  404214:	2b00      	cmp	r3, #0
  404216:	d102      	bne.n	40421e <ip_output+0x22>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  404218:	f06f 0303 	mvn.w	r3, #3
  40421c:	e00f      	b.n	40423e <ip_output+0x42>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  40421e:	78fa      	ldrb	r2, [r7, #3]
  404220:	697b      	ldr	r3, [r7, #20]
  404222:	9302      	str	r3, [sp, #8]
  404224:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404228:	9301      	str	r3, [sp, #4]
  40422a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  40422e:	9300      	str	r3, [sp, #0]
  404230:	4613      	mov	r3, r2
  404232:	687a      	ldr	r2, [r7, #4]
  404234:	68b9      	ldr	r1, [r7, #8]
  404236:	68f8      	ldr	r0, [r7, #12]
  404238:	4c04      	ldr	r4, [pc, #16]	; (40424c <ip_output+0x50>)
  40423a:	47a0      	blx	r4
  40423c:	4603      	mov	r3, r0
}
  40423e:	4618      	mov	r0, r3
  404240:	371c      	adds	r7, #28
  404242:	46bd      	mov	sp, r7
  404244:	bd90      	pop	{r4, r7, pc}
  404246:	bf00      	nop
  404248:	00403d5d 	.word	0x00403d5d
  40424c:	00404049 	.word	0x00404049

00404250 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
  404250:	b480      	push	{r7}
  404252:	b085      	sub	sp, #20
  404254:	af00      	add	r7, sp, #0
  404256:	6078      	str	r0, [r7, #4]
  404258:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  40425a:	687b      	ldr	r3, [r7, #4]
  40425c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  40425e:	687b      	ldr	r3, [r7, #4]
  404260:	f1b3 3fff 	cmp.w	r3, #4294967295
  404264:	d002      	beq.n	40426c <ip4_addr_isbroadcast+0x1c>
  404266:	687b      	ldr	r3, [r7, #4]
  404268:	2b00      	cmp	r3, #0
  40426a:	d101      	bne.n	404270 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
  40426c:	2301      	movs	r3, #1
  40426e:	e025      	b.n	4042bc <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  404270:	683b      	ldr	r3, [r7, #0]
  404272:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  404276:	f003 0302 	and.w	r3, r3, #2
  40427a:	2b00      	cmp	r3, #0
  40427c:	d101      	bne.n	404282 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  40427e:	2300      	movs	r3, #0
  404280:	e01c      	b.n	4042bc <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  404282:	683b      	ldr	r3, [r7, #0]
  404284:	685a      	ldr	r2, [r3, #4]
  404286:	687b      	ldr	r3, [r7, #4]
  404288:	429a      	cmp	r2, r3
  40428a:	d101      	bne.n	404290 <ip4_addr_isbroadcast+0x40>
    return 0;
  40428c:	2300      	movs	r3, #0
  40428e:	e015      	b.n	4042bc <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  404290:	68fa      	ldr	r2, [r7, #12]
  404292:	683b      	ldr	r3, [r7, #0]
  404294:	685b      	ldr	r3, [r3, #4]
  404296:	405a      	eors	r2, r3
  404298:	683b      	ldr	r3, [r7, #0]
  40429a:	689b      	ldr	r3, [r3, #8]
  40429c:	4013      	ands	r3, r2
  40429e:	2b00      	cmp	r3, #0
  4042a0:	d10b      	bne.n	4042ba <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4042a2:	683b      	ldr	r3, [r7, #0]
  4042a4:	689b      	ldr	r3, [r3, #8]
  4042a6:	43da      	mvns	r2, r3
  4042a8:	687b      	ldr	r3, [r7, #4]
  4042aa:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
  4042ac:	683b      	ldr	r3, [r7, #0]
  4042ae:	689b      	ldr	r3, [r3, #8]
  4042b0:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  4042b2:	429a      	cmp	r2, r3
  4042b4:	d101      	bne.n	4042ba <ip4_addr_isbroadcast+0x6a>
    /* => network broadcast address */
    return 1;
  4042b6:	2301      	movs	r3, #1
  4042b8:	e000      	b.n	4042bc <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
  4042ba:	2300      	movs	r3, #0
  }
}
  4042bc:	4618      	mov	r0, r3
  4042be:	3714      	adds	r7, #20
  4042c0:	46bd      	mov	sp, r7
  4042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4042c6:	4770      	bx	lr

004042c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  4042c8:	b580      	push	{r7, lr}
  4042ca:	b084      	sub	sp, #16
  4042cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
  4042ce:	2300      	movs	r3, #0
  4042d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
  4042d2:	4b12      	ldr	r3, [pc, #72]	; (40431c <ip_reass_tmr+0x54>)
  4042d4:	681b      	ldr	r3, [r3, #0]
  4042d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
  4042d8:	e018      	b.n	40430c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  4042da:	68fb      	ldr	r3, [r7, #12]
  4042dc:	7fdb      	ldrb	r3, [r3, #31]
  4042de:	2b00      	cmp	r3, #0
  4042e0:	d00b      	beq.n	4042fa <ip_reass_tmr+0x32>
      r->timer--;
  4042e2:	68fb      	ldr	r3, [r7, #12]
  4042e4:	7fdb      	ldrb	r3, [r3, #31]
  4042e6:	3b01      	subs	r3, #1
  4042e8:	b2da      	uxtb	r2, r3
  4042ea:	68fb      	ldr	r3, [r7, #12]
  4042ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  4042ee:	68fb      	ldr	r3, [r7, #12]
  4042f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
  4042f2:	68fb      	ldr	r3, [r7, #12]
  4042f4:	681b      	ldr	r3, [r3, #0]
  4042f6:	60fb      	str	r3, [r7, #12]
  4042f8:	e008      	b.n	40430c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  4042fa:	68fb      	ldr	r3, [r7, #12]
  4042fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
  4042fe:	68fb      	ldr	r3, [r7, #12]
  404300:	681b      	ldr	r3, [r3, #0]
  404302:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  404304:	68b9      	ldr	r1, [r7, #8]
  404306:	6878      	ldr	r0, [r7, #4]
  404308:	4b05      	ldr	r3, [pc, #20]	; (404320 <ip_reass_tmr+0x58>)
  40430a:	4798      	blx	r3
  while (r != NULL) {
  40430c:	68fb      	ldr	r3, [r7, #12]
  40430e:	2b00      	cmp	r3, #0
  404310:	d1e3      	bne.n	4042da <ip_reass_tmr+0x12>
     }
   }
}
  404312:	bf00      	nop
  404314:	3710      	adds	r7, #16
  404316:	46bd      	mov	sp, r7
  404318:	bd80      	pop	{r7, pc}
  40431a:	bf00      	nop
  40431c:	20400530 	.word	0x20400530
  404320:	00404325 	.word	0x00404325

00404324 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  404324:	b580      	push	{r7, lr}
  404326:	b088      	sub	sp, #32
  404328:	af00      	add	r7, sp, #0
  40432a:	6078      	str	r0, [r7, #4]
  40432c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
  40432e:	2300      	movs	r3, #0
  404330:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  404332:	687b      	ldr	r3, [r7, #4]
  404334:	685b      	ldr	r3, [r3, #4]
  404336:	685b      	ldr	r3, [r3, #4]
  404338:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
  40433a:	697b      	ldr	r3, [r7, #20]
  40433c:	889b      	ldrh	r3, [r3, #4]
  40433e:	b29b      	uxth	r3, r3
  404340:	2b00      	cmp	r3, #0
  404342:	d11f      	bne.n	404384 <ip_reass_free_complete_datagram+0x60>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  404344:	687b      	ldr	r3, [r7, #4]
  404346:	685b      	ldr	r3, [r3, #4]
  404348:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
  40434a:	697b      	ldr	r3, [r7, #20]
  40434c:	681a      	ldr	r2, [r3, #0]
  40434e:	687b      	ldr	r3, [r7, #4]
  404350:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  404352:	69bb      	ldr	r3, [r7, #24]
  404354:	6858      	ldr	r0, [r3, #4]
  404356:	687b      	ldr	r3, [r7, #4]
  404358:	3308      	adds	r3, #8
  40435a:	2214      	movs	r2, #20
  40435c:	4619      	mov	r1, r3
  40435e:	4b1f      	ldr	r3, [pc, #124]	; (4043dc <ip_reass_free_complete_datagram+0xb8>)
  404360:	4798      	blx	r3
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  404362:	2101      	movs	r1, #1
  404364:	69b8      	ldr	r0, [r7, #24]
  404366:	4b1e      	ldr	r3, [pc, #120]	; (4043e0 <ip_reass_free_complete_datagram+0xbc>)
  404368:	4798      	blx	r3
    clen = pbuf_clen(p);
  40436a:	69b8      	ldr	r0, [r7, #24]
  40436c:	4b1d      	ldr	r3, [pc, #116]	; (4043e4 <ip_reass_free_complete_datagram+0xc0>)
  40436e:	4798      	blx	r3
  404370:	4603      	mov	r3, r0
  404372:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  404374:	7cfb      	ldrb	r3, [r7, #19]
  404376:	b29a      	uxth	r2, r3
  404378:	8bfb      	ldrh	r3, [r7, #30]
  40437a:	4413      	add	r3, r2
  40437c:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
  40437e:	69b8      	ldr	r0, [r7, #24]
  404380:	4b19      	ldr	r3, [pc, #100]	; (4043e8 <ip_reass_free_complete_datagram+0xc4>)
  404382:	4798      	blx	r3
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  404384:	687b      	ldr	r3, [r7, #4]
  404386:	685b      	ldr	r3, [r3, #4]
  404388:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
  40438a:	e014      	b.n	4043b6 <ip_reass_free_complete_datagram+0x92>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  40438c:	69bb      	ldr	r3, [r7, #24]
  40438e:	685b      	ldr	r3, [r3, #4]
  404390:	617b      	str	r3, [r7, #20]
    pcur = p;
  404392:	69bb      	ldr	r3, [r7, #24]
  404394:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  404396:	697b      	ldr	r3, [r7, #20]
  404398:	681b      	ldr	r3, [r3, #0]
  40439a:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
  40439c:	68f8      	ldr	r0, [r7, #12]
  40439e:	4b11      	ldr	r3, [pc, #68]	; (4043e4 <ip_reass_free_complete_datagram+0xc0>)
  4043a0:	4798      	blx	r3
  4043a2:	4603      	mov	r3, r0
  4043a4:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  4043a6:	7cfb      	ldrb	r3, [r7, #19]
  4043a8:	b29a      	uxth	r2, r3
  4043aa:	8bfb      	ldrh	r3, [r7, #30]
  4043ac:	4413      	add	r3, r2
  4043ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
  4043b0:	68f8      	ldr	r0, [r7, #12]
  4043b2:	4b0d      	ldr	r3, [pc, #52]	; (4043e8 <ip_reass_free_complete_datagram+0xc4>)
  4043b4:	4798      	blx	r3
  while (p != NULL) {
  4043b6:	69bb      	ldr	r3, [r7, #24]
  4043b8:	2b00      	cmp	r3, #0
  4043ba:	d1e7      	bne.n	40438c <ip_reass_free_complete_datagram+0x68>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  4043bc:	6839      	ldr	r1, [r7, #0]
  4043be:	6878      	ldr	r0, [r7, #4]
  4043c0:	4b0a      	ldr	r3, [pc, #40]	; (4043ec <ip_reass_free_complete_datagram+0xc8>)
  4043c2:	4798      	blx	r3
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
  4043c4:	4b0a      	ldr	r3, [pc, #40]	; (4043f0 <ip_reass_free_complete_datagram+0xcc>)
  4043c6:	881a      	ldrh	r2, [r3, #0]
  4043c8:	8bfb      	ldrh	r3, [r7, #30]
  4043ca:	1ad3      	subs	r3, r2, r3
  4043cc:	b29a      	uxth	r2, r3
  4043ce:	4b08      	ldr	r3, [pc, #32]	; (4043f0 <ip_reass_free_complete_datagram+0xcc>)
  4043d0:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
  4043d2:	8bfb      	ldrh	r3, [r7, #30]
}
  4043d4:	4618      	mov	r0, r3
  4043d6:	3720      	adds	r7, #32
  4043d8:	46bd      	mov	sp, r7
  4043da:	bd80      	pop	{r7, pc}
  4043dc:	0040c9e5 	.word	0x0040c9e5
  4043e0:	004039e9 	.word	0x004039e9
  4043e4:	00405a91 	.word	0x00405a91
  4043e8:	00405a01 	.word	0x00405a01
  4043ec:	00404535 	.word	0x00404535
  4043f0:	20400534 	.word	0x20400534

004043f4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  4043f4:	b580      	push	{r7, lr}
  4043f6:	b088      	sub	sp, #32
  4043f8:	af00      	add	r7, sp, #0
  4043fa:	6078      	str	r0, [r7, #4]
  4043fc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  4043fe:	2300      	movs	r3, #0
  404400:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  404402:	2300      	movs	r3, #0
  404404:	61bb      	str	r3, [r7, #24]
    prev = NULL;
  404406:	2300      	movs	r3, #0
  404408:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
  40440a:	2300      	movs	r3, #0
  40440c:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
  40440e:	4b26      	ldr	r3, [pc, #152]	; (4044a8 <ip_reass_remove_oldest_datagram+0xb4>)
  404410:	681b      	ldr	r3, [r3, #0]
  404412:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
  404414:	e02c      	b.n	404470 <ip_reass_remove_oldest_datagram+0x7c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  404416:	69fb      	ldr	r3, [r7, #28]
  404418:	695a      	ldr	r2, [r3, #20]
  40441a:	687b      	ldr	r3, [r7, #4]
  40441c:	68db      	ldr	r3, [r3, #12]
  40441e:	429a      	cmp	r2, r3
  404420:	d10c      	bne.n	40443c <ip_reass_remove_oldest_datagram+0x48>
  404422:	69fb      	ldr	r3, [r7, #28]
  404424:	699a      	ldr	r2, [r3, #24]
  404426:	687b      	ldr	r3, [r7, #4]
  404428:	691b      	ldr	r3, [r3, #16]
  40442a:	429a      	cmp	r2, r3
  40442c:	d106      	bne.n	40443c <ip_reass_remove_oldest_datagram+0x48>
  40442e:	69fb      	ldr	r3, [r7, #28]
  404430:	899a      	ldrh	r2, [r3, #12]
  404432:	687b      	ldr	r3, [r7, #4]
  404434:	889b      	ldrh	r3, [r3, #4]
  404436:	b29b      	uxth	r3, r3
  404438:	429a      	cmp	r2, r3
  40443a:	d010      	beq.n	40445e <ip_reass_remove_oldest_datagram+0x6a>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  40443c:	68fb      	ldr	r3, [r7, #12]
  40443e:	3301      	adds	r3, #1
  404440:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
  404442:	69bb      	ldr	r3, [r7, #24]
  404444:	2b00      	cmp	r3, #0
  404446:	d102      	bne.n	40444e <ip_reass_remove_oldest_datagram+0x5a>
          oldest = r;
  404448:	69fb      	ldr	r3, [r7, #28]
  40444a:	61bb      	str	r3, [r7, #24]
  40444c:	e007      	b.n	40445e <ip_reass_remove_oldest_datagram+0x6a>
        } else if (r->timer <= oldest->timer) {
  40444e:	69fb      	ldr	r3, [r7, #28]
  404450:	7fda      	ldrb	r2, [r3, #31]
  404452:	69bb      	ldr	r3, [r7, #24]
  404454:	7fdb      	ldrb	r3, [r3, #31]
  404456:	429a      	cmp	r2, r3
  404458:	d801      	bhi.n	40445e <ip_reass_remove_oldest_datagram+0x6a>
          /* older than the previous oldest */
          oldest = r;
  40445a:	69fb      	ldr	r3, [r7, #28]
  40445c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
  40445e:	69fb      	ldr	r3, [r7, #28]
  404460:	681b      	ldr	r3, [r3, #0]
  404462:	2b00      	cmp	r3, #0
  404464:	d001      	beq.n	40446a <ip_reass_remove_oldest_datagram+0x76>
        prev = r;
  404466:	69fb      	ldr	r3, [r7, #28]
  404468:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
  40446a:	69fb      	ldr	r3, [r7, #28]
  40446c:	681b      	ldr	r3, [r3, #0]
  40446e:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
  404470:	69fb      	ldr	r3, [r7, #28]
  404472:	2b00      	cmp	r3, #0
  404474:	d1cf      	bne.n	404416 <ip_reass_remove_oldest_datagram+0x22>
    }
    if (oldest != NULL) {
  404476:	69bb      	ldr	r3, [r7, #24]
  404478:	2b00      	cmp	r3, #0
  40447a:	d008      	beq.n	40448e <ip_reass_remove_oldest_datagram+0x9a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  40447c:	6979      	ldr	r1, [r7, #20]
  40447e:	69b8      	ldr	r0, [r7, #24]
  404480:	4b0a      	ldr	r3, [pc, #40]	; (4044ac <ip_reass_remove_oldest_datagram+0xb8>)
  404482:	4798      	blx	r3
  404484:	60b8      	str	r0, [r7, #8]
      pbufs_freed += pbufs_freed_current;
  404486:	693a      	ldr	r2, [r7, #16]
  404488:	68bb      	ldr	r3, [r7, #8]
  40448a:	4413      	add	r3, r2
  40448c:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  40448e:	693a      	ldr	r2, [r7, #16]
  404490:	683b      	ldr	r3, [r7, #0]
  404492:	429a      	cmp	r2, r3
  404494:	da02      	bge.n	40449c <ip_reass_remove_oldest_datagram+0xa8>
  404496:	68fb      	ldr	r3, [r7, #12]
  404498:	2b01      	cmp	r3, #1
  40449a:	dcb2      	bgt.n	404402 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
  40449c:	693b      	ldr	r3, [r7, #16]
}
  40449e:	4618      	mov	r0, r3
  4044a0:	3720      	adds	r7, #32
  4044a2:	46bd      	mov	sp, r7
  4044a4:	bd80      	pop	{r7, pc}
  4044a6:	bf00      	nop
  4044a8:	20400530 	.word	0x20400530
  4044ac:	00404325 	.word	0x00404325

004044b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  4044b0:	b580      	push	{r7, lr}
  4044b2:	b084      	sub	sp, #16
  4044b4:	af00      	add	r7, sp, #0
  4044b6:	6078      	str	r0, [r7, #4]
  4044b8:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  4044ba:	2004      	movs	r0, #4
  4044bc:	4b18      	ldr	r3, [pc, #96]	; (404520 <ip_reass_enqueue_new_datagram+0x70>)
  4044be:	4798      	blx	r3
  4044c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
  4044c2:	68fb      	ldr	r3, [r7, #12]
  4044c4:	2b00      	cmp	r3, #0
  4044c6:	d110      	bne.n	4044ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  4044c8:	6839      	ldr	r1, [r7, #0]
  4044ca:	6878      	ldr	r0, [r7, #4]
  4044cc:	4b15      	ldr	r3, [pc, #84]	; (404524 <ip_reass_enqueue_new_datagram+0x74>)
  4044ce:	4798      	blx	r3
  4044d0:	4602      	mov	r2, r0
  4044d2:	683b      	ldr	r3, [r7, #0]
  4044d4:	429a      	cmp	r2, r3
  4044d6:	db03      	blt.n	4044e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  4044d8:	2004      	movs	r0, #4
  4044da:	4b11      	ldr	r3, [pc, #68]	; (404520 <ip_reass_enqueue_new_datagram+0x70>)
  4044dc:	4798      	blx	r3
  4044de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
  4044e0:	68fb      	ldr	r3, [r7, #12]
  4044e2:	2b00      	cmp	r3, #0
  4044e4:	d101      	bne.n	4044ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  4044e6:	2300      	movs	r3, #0
  4044e8:	e016      	b.n	404518 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  4044ea:	2220      	movs	r2, #32
  4044ec:	2100      	movs	r1, #0
  4044ee:	68f8      	ldr	r0, [r7, #12]
  4044f0:	4b0d      	ldr	r3, [pc, #52]	; (404528 <ip_reass_enqueue_new_datagram+0x78>)
  4044f2:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  4044f4:	68fb      	ldr	r3, [r7, #12]
  4044f6:	2203      	movs	r2, #3
  4044f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  4044fa:	4b0c      	ldr	r3, [pc, #48]	; (40452c <ip_reass_enqueue_new_datagram+0x7c>)
  4044fc:	681a      	ldr	r2, [r3, #0]
  4044fe:	68fb      	ldr	r3, [r7, #12]
  404500:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
  404502:	4a0a      	ldr	r2, [pc, #40]	; (40452c <ip_reass_enqueue_new_datagram+0x7c>)
  404504:	68fb      	ldr	r3, [r7, #12]
  404506:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  404508:	68fb      	ldr	r3, [r7, #12]
  40450a:	3308      	adds	r3, #8
  40450c:	2214      	movs	r2, #20
  40450e:	6879      	ldr	r1, [r7, #4]
  404510:	4618      	mov	r0, r3
  404512:	4b07      	ldr	r3, [pc, #28]	; (404530 <ip_reass_enqueue_new_datagram+0x80>)
  404514:	4798      	blx	r3
  return ipr;
  404516:	68fb      	ldr	r3, [r7, #12]
}
  404518:	4618      	mov	r0, r3
  40451a:	3710      	adds	r7, #16
  40451c:	46bd      	mov	sp, r7
  40451e:	bd80      	pop	{r7, pc}
  404520:	00405325 	.word	0x00405325
  404524:	004043f5 	.word	0x004043f5
  404528:	0040cb19 	.word	0x0040cb19
  40452c:	20400530 	.word	0x20400530
  404530:	0040c9e5 	.word	0x0040c9e5

00404534 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  404534:	b580      	push	{r7, lr}
  404536:	b082      	sub	sp, #8
  404538:	af00      	add	r7, sp, #0
  40453a:	6078      	str	r0, [r7, #4]
  40453c:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  40453e:	4b0b      	ldr	r3, [pc, #44]	; (40456c <ip_reass_dequeue_datagram+0x38>)
  404540:	681a      	ldr	r2, [r3, #0]
  404542:	687b      	ldr	r3, [r7, #4]
  404544:	429a      	cmp	r2, r3
  404546:	d104      	bne.n	404552 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  404548:	687b      	ldr	r3, [r7, #4]
  40454a:	681b      	ldr	r3, [r3, #0]
  40454c:	4a07      	ldr	r2, [pc, #28]	; (40456c <ip_reass_dequeue_datagram+0x38>)
  40454e:	6013      	str	r3, [r2, #0]
  404550:	e003      	b.n	40455a <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  404552:	687b      	ldr	r3, [r7, #4]
  404554:	681a      	ldr	r2, [r3, #0]
  404556:	683b      	ldr	r3, [r7, #0]
  404558:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  40455a:	6879      	ldr	r1, [r7, #4]
  40455c:	2004      	movs	r0, #4
  40455e:	4b04      	ldr	r3, [pc, #16]	; (404570 <ip_reass_dequeue_datagram+0x3c>)
  404560:	4798      	blx	r3
}
  404562:	bf00      	nop
  404564:	3708      	adds	r7, #8
  404566:	46bd      	mov	sp, r7
  404568:	bd80      	pop	{r7, pc}
  40456a:	bf00      	nop
  40456c:	20400530 	.word	0x20400530
  404570:	00405365 	.word	0x00405365

00404574 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  404574:	b580      	push	{r7, lr}
  404576:	b08a      	sub	sp, #40	; 0x28
  404578:	af00      	add	r7, sp, #0
  40457a:	6078      	str	r0, [r7, #4]
  40457c:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  40457e:	2300      	movs	r3, #0
  404580:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  404582:	2301      	movs	r3, #1
  404584:	61fb      	str	r3, [r7, #28]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  404586:	683b      	ldr	r3, [r7, #0]
  404588:	685b      	ldr	r3, [r3, #4]
  40458a:	61bb      	str	r3, [r7, #24]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  40458c:	69bb      	ldr	r3, [r7, #24]
  40458e:	885b      	ldrh	r3, [r3, #2]
  404590:	b29b      	uxth	r3, r3
  404592:	4618      	mov	r0, r3
  404594:	4b71      	ldr	r3, [pc, #452]	; (40475c <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  404596:	4798      	blx	r3
  404598:	4603      	mov	r3, r0
  40459a:	461a      	mov	r2, r3
  40459c:	69bb      	ldr	r3, [r7, #24]
  40459e:	781b      	ldrb	r3, [r3, #0]
  4045a0:	b29b      	uxth	r3, r3
  4045a2:	f003 030f 	and.w	r3, r3, #15
  4045a6:	b29b      	uxth	r3, r3
  4045a8:	009b      	lsls	r3, r3, #2
  4045aa:	b29b      	uxth	r3, r3
  4045ac:	1ad3      	subs	r3, r2, r3
  4045ae:	82fb      	strh	r3, [r7, #22]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  4045b0:	69bb      	ldr	r3, [r7, #24]
  4045b2:	88db      	ldrh	r3, [r3, #6]
  4045b4:	b29b      	uxth	r3, r3
  4045b6:	4618      	mov	r0, r3
  4045b8:	4b68      	ldr	r3, [pc, #416]	; (40475c <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  4045ba:	4798      	blx	r3
  4045bc:	4603      	mov	r3, r0
  4045be:	f3c3 030c 	ubfx	r3, r3, #0, #13
  4045c2:	b29b      	uxth	r3, r3
  4045c4:	00db      	lsls	r3, r3, #3
  4045c6:	82bb      	strh	r3, [r7, #20]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  4045c8:	683b      	ldr	r3, [r7, #0]
  4045ca:	685b      	ldr	r3, [r3, #4]
  4045cc:	613b      	str	r3, [r7, #16]
  iprh->next_pbuf = NULL;
  4045ce:	693b      	ldr	r3, [r7, #16]
  4045d0:	2200      	movs	r2, #0
  4045d2:	701a      	strb	r2, [r3, #0]
  4045d4:	2200      	movs	r2, #0
  4045d6:	705a      	strb	r2, [r3, #1]
  4045d8:	2200      	movs	r2, #0
  4045da:	709a      	strb	r2, [r3, #2]
  4045dc:	2200      	movs	r2, #0
  4045de:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
  4045e0:	693b      	ldr	r3, [r7, #16]
  4045e2:	8aba      	ldrh	r2, [r7, #20]
  4045e4:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
  4045e6:	8aba      	ldrh	r2, [r7, #20]
  4045e8:	8afb      	ldrh	r3, [r7, #22]
  4045ea:	4413      	add	r3, r2
  4045ec:	b29a      	uxth	r2, r3
  4045ee:	693b      	ldr	r3, [r7, #16]
  4045f0:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  4045f2:	687b      	ldr	r3, [r7, #4]
  4045f4:	685b      	ldr	r3, [r3, #4]
  4045f6:	623b      	str	r3, [r7, #32]
  4045f8:	e04b      	b.n	404692 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  4045fa:	6a3b      	ldr	r3, [r7, #32]
  4045fc:	685b      	ldr	r3, [r3, #4]
  4045fe:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
  404600:	693b      	ldr	r3, [r7, #16]
  404602:	889b      	ldrh	r3, [r3, #4]
  404604:	b29a      	uxth	r2, r3
  404606:	68fb      	ldr	r3, [r7, #12]
  404608:	889b      	ldrh	r3, [r3, #4]
  40460a:	b29b      	uxth	r3, r3
  40460c:	429a      	cmp	r2, r3
  40460e:	d21e      	bcs.n	40464e <ip_reass_chain_frag_into_datagram_and_validate+0xda>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  404610:	693b      	ldr	r3, [r7, #16]
  404612:	6a3a      	ldr	r2, [r7, #32]
  404614:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
  404616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404618:	2b00      	cmp	r3, #0
  40461a:	d014      	beq.n	404646 <ip_reass_chain_frag_into_datagram_and_validate+0xd2>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  40461c:	693b      	ldr	r3, [r7, #16]
  40461e:	889b      	ldrh	r3, [r3, #4]
  404620:	b29a      	uxth	r2, r3
  404622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404624:	88db      	ldrh	r3, [r3, #6]
  404626:	b29b      	uxth	r3, r3
  404628:	429a      	cmp	r2, r3
  40462a:	f0c0 8082 	bcc.w	404732 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
  40462e:	693b      	ldr	r3, [r7, #16]
  404630:	88db      	ldrh	r3, [r3, #6]
  404632:	b29a      	uxth	r2, r3
  404634:	68fb      	ldr	r3, [r7, #12]
  404636:	889b      	ldrh	r3, [r3, #4]
  404638:	b29b      	uxth	r3, r3
  40463a:	429a      	cmp	r2, r3
  40463c:	d879      	bhi.n	404732 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  40463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404640:	683a      	ldr	r2, [r7, #0]
  404642:	601a      	str	r2, [r3, #0]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  404644:	e028      	b.n	404698 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        ipr->p = new_p;
  404646:	687b      	ldr	r3, [r7, #4]
  404648:	683a      	ldr	r2, [r7, #0]
  40464a:	605a      	str	r2, [r3, #4]
      break;
  40464c:	e024      	b.n	404698 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
    } else if(iprh->start == iprh_tmp->start) {
  40464e:	693b      	ldr	r3, [r7, #16]
  404650:	889b      	ldrh	r3, [r3, #4]
  404652:	b29a      	uxth	r2, r3
  404654:	68fb      	ldr	r3, [r7, #12]
  404656:	889b      	ldrh	r3, [r3, #4]
  404658:	b29b      	uxth	r3, r3
  40465a:	429a      	cmp	r2, r3
  40465c:	d066      	beq.n	40472c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  40465e:	693b      	ldr	r3, [r7, #16]
  404660:	889b      	ldrh	r3, [r3, #4]
  404662:	b29a      	uxth	r2, r3
  404664:	68fb      	ldr	r3, [r7, #12]
  404666:	88db      	ldrh	r3, [r3, #6]
  404668:	b29b      	uxth	r3, r3
  40466a:	429a      	cmp	r2, r3
  40466c:	d360      	bcc.n	404730 <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  40466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404670:	2b00      	cmp	r3, #0
  404672:	d009      	beq.n	404688 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
        if (iprh_prev->end != iprh_tmp->start) {
  404674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404676:	88db      	ldrh	r3, [r3, #6]
  404678:	b29a      	uxth	r2, r3
  40467a:	68fb      	ldr	r3, [r7, #12]
  40467c:	889b      	ldrh	r3, [r3, #4]
  40467e:	b29b      	uxth	r3, r3
  404680:	429a      	cmp	r2, r3
  404682:	d001      	beq.n	404688 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  404684:	2300      	movs	r3, #0
  404686:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  404688:	68fb      	ldr	r3, [r7, #12]
  40468a:	681b      	ldr	r3, [r3, #0]
  40468c:	623b      	str	r3, [r7, #32]
    iprh_prev = iprh_tmp;
  40468e:	68fb      	ldr	r3, [r7, #12]
  404690:	627b      	str	r3, [r7, #36]	; 0x24
  for (q = ipr->p; q != NULL;) {
  404692:	6a3b      	ldr	r3, [r7, #32]
  404694:	2b00      	cmp	r3, #0
  404696:	d1b0      	bne.n	4045fa <ip_reass_chain_frag_into_datagram_and_validate+0x86>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  404698:	6a3b      	ldr	r3, [r7, #32]
  40469a:	2b00      	cmp	r3, #0
  40469c:	d113      	bne.n	4046c6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    if (iprh_prev != NULL) {
  40469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046a0:	2b00      	cmp	r3, #0
  4046a2:	d00d      	beq.n	4046c0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  4046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046a6:	683a      	ldr	r2, [r7, #0]
  4046a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  4046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4046ac:	88db      	ldrh	r3, [r3, #6]
  4046ae:	b29a      	uxth	r2, r3
  4046b0:	693b      	ldr	r3, [r7, #16]
  4046b2:	889b      	ldrh	r3, [r3, #4]
  4046b4:	b29b      	uxth	r3, r3
  4046b6:	429a      	cmp	r2, r3
  4046b8:	d005      	beq.n	4046c6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        valid = 0;
  4046ba:	2300      	movs	r3, #0
  4046bc:	61fb      	str	r3, [r7, #28]
  4046be:	e002      	b.n	4046c6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  4046c0:	687b      	ldr	r3, [r7, #4]
  4046c2:	683a      	ldr	r2, [r7, #0]
  4046c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  4046c6:	687b      	ldr	r3, [r7, #4]
  4046c8:	7f9b      	ldrb	r3, [r3, #30]
  4046ca:	f003 0301 	and.w	r3, r3, #1
  4046ce:	2b00      	cmp	r3, #0
  4046d0:	d02a      	beq.n	404728 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
    /* and had no wholes so far */
    if (valid) {
  4046d2:	69fb      	ldr	r3, [r7, #28]
  4046d4:	2b00      	cmp	r3, #0
  4046d6:	d025      	beq.n	404724 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  4046d8:	687b      	ldr	r3, [r7, #4]
  4046da:	685b      	ldr	r3, [r3, #4]
  4046dc:	685b      	ldr	r3, [r3, #4]
  4046de:	889b      	ldrh	r3, [r3, #4]
  4046e0:	b29b      	uxth	r3, r3
  4046e2:	2b00      	cmp	r3, #0
  4046e4:	d002      	beq.n	4046ec <ip_reass_chain_frag_into_datagram_and_validate+0x178>
        valid = 0;
  4046e6:	2300      	movs	r3, #0
  4046e8:	61fb      	str	r3, [r7, #28]
  4046ea:	e01b      	b.n	404724 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
  4046ec:	693b      	ldr	r3, [r7, #16]
  4046ee:	627b      	str	r3, [r7, #36]	; 0x24
        q = iprh->next_pbuf;
  4046f0:	693b      	ldr	r3, [r7, #16]
  4046f2:	681b      	ldr	r3, [r3, #0]
  4046f4:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
  4046f6:	e012      	b.n	40471e <ip_reass_chain_frag_into_datagram_and_validate+0x1aa>
          iprh = (struct ip_reass_helper*)q->payload;
  4046f8:	6a3b      	ldr	r3, [r7, #32]
  4046fa:	685b      	ldr	r3, [r3, #4]
  4046fc:	613b      	str	r3, [r7, #16]
          if (iprh_prev->end != iprh->start) {
  4046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404700:	88db      	ldrh	r3, [r3, #6]
  404702:	b29a      	uxth	r2, r3
  404704:	693b      	ldr	r3, [r7, #16]
  404706:	889b      	ldrh	r3, [r3, #4]
  404708:	b29b      	uxth	r3, r3
  40470a:	429a      	cmp	r2, r3
  40470c:	d002      	beq.n	404714 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
            valid = 0;
  40470e:	2300      	movs	r3, #0
  404710:	61fb      	str	r3, [r7, #28]
            break;
  404712:	e007      	b.n	404724 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
          }
          iprh_prev = iprh;
  404714:	693b      	ldr	r3, [r7, #16]
  404716:	627b      	str	r3, [r7, #36]	; 0x24
          q = iprh->next_pbuf;
  404718:	693b      	ldr	r3, [r7, #16]
  40471a:	681b      	ldr	r3, [r3, #0]
  40471c:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
  40471e:	6a3b      	ldr	r3, [r7, #32]
  404720:	2b00      	cmp	r3, #0
  404722:	d1e9      	bne.n	4046f8 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  404724:	69fb      	ldr	r3, [r7, #28]
  404726:	e014      	b.n	404752 <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  404728:	2300      	movs	r3, #0
  40472a:	e012      	b.n	404752 <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
      goto freepbuf;
  40472c:	bf00      	nop
  40472e:	e000      	b.n	404732 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
      goto freepbuf;
  404730:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  404732:	6838      	ldr	r0, [r7, #0]
  404734:	4b0a      	ldr	r3, [pc, #40]	; (404760 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>)
  404736:	4798      	blx	r3
  404738:	4603      	mov	r3, r0
  40473a:	4619      	mov	r1, r3
  40473c:	4b09      	ldr	r3, [pc, #36]	; (404764 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  40473e:	881a      	ldrh	r2, [r3, #0]
  404740:	b28b      	uxth	r3, r1
  404742:	1ad3      	subs	r3, r2, r3
  404744:	b29a      	uxth	r2, r3
  404746:	4b07      	ldr	r3, [pc, #28]	; (404764 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  404748:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
  40474a:	6838      	ldr	r0, [r7, #0]
  40474c:	4b06      	ldr	r3, [pc, #24]	; (404768 <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>)
  40474e:	4798      	blx	r3
  return 0;
  404750:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  404752:	4618      	mov	r0, r3
  404754:	3728      	adds	r7, #40	; 0x28
  404756:	46bd      	mov	sp, r7
  404758:	bd80      	pop	{r7, pc}
  40475a:	bf00      	nop
  40475c:	00401e45 	.word	0x00401e45
  404760:	00405a91 	.word	0x00405a91
  404764:	20400534 	.word	0x20400534
  404768:	00405a01 	.word	0x00405a01

0040476c <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  40476c:	b580      	push	{r7, lr}
  40476e:	b08a      	sub	sp, #40	; 0x28
  404770:	af00      	add	r7, sp, #0
  404772:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
  404774:	2300      	movs	r3, #0
  404776:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  404778:	687b      	ldr	r3, [r7, #4]
  40477a:	685b      	ldr	r3, [r3, #4]
  40477c:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  40477e:	69bb      	ldr	r3, [r7, #24]
  404780:	781b      	ldrb	r3, [r3, #0]
  404782:	f003 030f 	and.w	r3, r3, #15
  404786:	009b      	lsls	r3, r3, #2
  404788:	2b14      	cmp	r3, #20
  40478a:	f040 8103 	bne.w	404994 <ip_reass+0x228>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  40478e:	69bb      	ldr	r3, [r7, #24]
  404790:	88db      	ldrh	r3, [r3, #6]
  404792:	b29b      	uxth	r3, r3
  404794:	4618      	mov	r0, r3
  404796:	4b84      	ldr	r3, [pc, #528]	; (4049a8 <ip_reass+0x23c>)
  404798:	4798      	blx	r3
  40479a:	4603      	mov	r3, r0
  40479c:	f3c3 030c 	ubfx	r3, r3, #0, #13
  4047a0:	b29b      	uxth	r3, r3
  4047a2:	00db      	lsls	r3, r3, #3
  4047a4:	82fb      	strh	r3, [r7, #22]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  4047a6:	69bb      	ldr	r3, [r7, #24]
  4047a8:	885b      	ldrh	r3, [r3, #2]
  4047aa:	b29b      	uxth	r3, r3
  4047ac:	4618      	mov	r0, r3
  4047ae:	4b7e      	ldr	r3, [pc, #504]	; (4049a8 <ip_reass+0x23c>)
  4047b0:	4798      	blx	r3
  4047b2:	4603      	mov	r3, r0
  4047b4:	461a      	mov	r2, r3
  4047b6:	69bb      	ldr	r3, [r7, #24]
  4047b8:	781b      	ldrb	r3, [r3, #0]
  4047ba:	b29b      	uxth	r3, r3
  4047bc:	f003 030f 	and.w	r3, r3, #15
  4047c0:	b29b      	uxth	r3, r3
  4047c2:	009b      	lsls	r3, r3, #2
  4047c4:	b29b      	uxth	r3, r3
  4047c6:	1ad3      	subs	r3, r2, r3
  4047c8:	82bb      	strh	r3, [r7, #20]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  4047ca:	6878      	ldr	r0, [r7, #4]
  4047cc:	4b77      	ldr	r3, [pc, #476]	; (4049ac <ip_reass+0x240>)
  4047ce:	4798      	blx	r3
  4047d0:	4603      	mov	r3, r0
  4047d2:	74fb      	strb	r3, [r7, #19]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  4047d4:	4b76      	ldr	r3, [pc, #472]	; (4049b0 <ip_reass+0x244>)
  4047d6:	881b      	ldrh	r3, [r3, #0]
  4047d8:	461a      	mov	r2, r3
  4047da:	7cfb      	ldrb	r3, [r7, #19]
  4047dc:	4413      	add	r3, r2
  4047de:	2b0a      	cmp	r3, #10
  4047e0:	dd10      	ble.n	404804 <ip_reass+0x98>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4047e2:	7cfb      	ldrb	r3, [r7, #19]
  4047e4:	4619      	mov	r1, r3
  4047e6:	69b8      	ldr	r0, [r7, #24]
  4047e8:	4b72      	ldr	r3, [pc, #456]	; (4049b4 <ip_reass+0x248>)
  4047ea:	4798      	blx	r3
  4047ec:	4603      	mov	r3, r0
  4047ee:	2b00      	cmp	r3, #0
  4047f0:	f000 80d1 	beq.w	404996 <ip_reass+0x22a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  4047f4:	4b6e      	ldr	r3, [pc, #440]	; (4049b0 <ip_reass+0x244>)
  4047f6:	881b      	ldrh	r3, [r3, #0]
  4047f8:	461a      	mov	r2, r3
  4047fa:	7cfb      	ldrb	r3, [r7, #19]
  4047fc:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  4047fe:	2b0a      	cmp	r3, #10
  404800:	f300 80c9 	bgt.w	404996 <ip_reass+0x22a>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  404804:	4b6c      	ldr	r3, [pc, #432]	; (4049b8 <ip_reass+0x24c>)
  404806:	681b      	ldr	r3, [r3, #0]
  404808:	623b      	str	r3, [r7, #32]
  40480a:	e017      	b.n	40483c <ip_reass+0xd0>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  40480c:	6a3b      	ldr	r3, [r7, #32]
  40480e:	695a      	ldr	r2, [r3, #20]
  404810:	69bb      	ldr	r3, [r7, #24]
  404812:	68db      	ldr	r3, [r3, #12]
  404814:	429a      	cmp	r2, r3
  404816:	d10c      	bne.n	404832 <ip_reass+0xc6>
  404818:	6a3b      	ldr	r3, [r7, #32]
  40481a:	699a      	ldr	r2, [r3, #24]
  40481c:	69bb      	ldr	r3, [r7, #24]
  40481e:	691b      	ldr	r3, [r3, #16]
  404820:	429a      	cmp	r2, r3
  404822:	d106      	bne.n	404832 <ip_reass+0xc6>
  404824:	6a3b      	ldr	r3, [r7, #32]
  404826:	899a      	ldrh	r2, [r3, #12]
  404828:	69bb      	ldr	r3, [r7, #24]
  40482a:	889b      	ldrh	r3, [r3, #4]
  40482c:	b29b      	uxth	r3, r3
  40482e:	429a      	cmp	r2, r3
  404830:	d008      	beq.n	404844 <ip_reass+0xd8>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
    }
    ipr_prev = ipr;
  404832:	6a3b      	ldr	r3, [r7, #32]
  404834:	61fb      	str	r3, [r7, #28]
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  404836:	6a3b      	ldr	r3, [r7, #32]
  404838:	681b      	ldr	r3, [r3, #0]
  40483a:	623b      	str	r3, [r7, #32]
  40483c:	6a3b      	ldr	r3, [r7, #32]
  40483e:	2b00      	cmp	r3, #0
  404840:	d1e4      	bne.n	40480c <ip_reass+0xa0>
  404842:	e000      	b.n	404846 <ip_reass+0xda>
      break;
  404844:	bf00      	nop
  }

  if (ipr == NULL) {
  404846:	6a3b      	ldr	r3, [r7, #32]
  404848:	2b00      	cmp	r3, #0
  40484a:	d109      	bne.n	404860 <ip_reass+0xf4>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  40484c:	7cfb      	ldrb	r3, [r7, #19]
  40484e:	4619      	mov	r1, r3
  404850:	69b8      	ldr	r0, [r7, #24]
  404852:	4b5a      	ldr	r3, [pc, #360]	; (4049bc <ip_reass+0x250>)
  404854:	4798      	blx	r3
  404856:	6238      	str	r0, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
  404858:	6a3b      	ldr	r3, [r7, #32]
  40485a:	2b00      	cmp	r3, #0
  40485c:	d11c      	bne.n	404898 <ip_reass+0x12c>
      goto nullreturn;
  40485e:	e09a      	b.n	404996 <ip_reass+0x22a>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  404860:	69bb      	ldr	r3, [r7, #24]
  404862:	88db      	ldrh	r3, [r3, #6]
  404864:	b29b      	uxth	r3, r3
  404866:	4618      	mov	r0, r3
  404868:	4b4f      	ldr	r3, [pc, #316]	; (4049a8 <ip_reass+0x23c>)
  40486a:	4798      	blx	r3
  40486c:	4603      	mov	r3, r0
  40486e:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404872:	2b00      	cmp	r3, #0
  404874:	d110      	bne.n	404898 <ip_reass+0x12c>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  404876:	6a3b      	ldr	r3, [r7, #32]
  404878:	89db      	ldrh	r3, [r3, #14]
  40487a:	4618      	mov	r0, r3
  40487c:	4b4a      	ldr	r3, [pc, #296]	; (4049a8 <ip_reass+0x23c>)
  40487e:	4798      	blx	r3
  404880:	4603      	mov	r3, r0
  404882:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  404886:	2b00      	cmp	r3, #0
  404888:	d006      	beq.n	404898 <ip_reass+0x12c>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  40488a:	6a3b      	ldr	r3, [r7, #32]
  40488c:	3308      	adds	r3, #8
  40488e:	2214      	movs	r2, #20
  404890:	69b9      	ldr	r1, [r7, #24]
  404892:	4618      	mov	r0, r3
  404894:	4b4a      	ldr	r3, [pc, #296]	; (4049c0 <ip_reass+0x254>)
  404896:	4798      	blx	r3
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  404898:	7cfb      	ldrb	r3, [r7, #19]
  40489a:	b29a      	uxth	r2, r3
  40489c:	4b44      	ldr	r3, [pc, #272]	; (4049b0 <ip_reass+0x244>)
  40489e:	881b      	ldrh	r3, [r3, #0]
  4048a0:	4413      	add	r3, r2
  4048a2:	b29a      	uxth	r2, r3
  4048a4:	4b42      	ldr	r3, [pc, #264]	; (4049b0 <ip_reass+0x244>)
  4048a6:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  4048a8:	69bb      	ldr	r3, [r7, #24]
  4048aa:	88db      	ldrh	r3, [r3, #6]
  4048ac:	b29b      	uxth	r3, r3
  4048ae:	f003 0320 	and.w	r3, r3, #32
  4048b2:	2b00      	cmp	r3, #0
  4048b4:	d10c      	bne.n	4048d0 <ip_reass+0x164>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  4048b6:	6a3b      	ldr	r3, [r7, #32]
  4048b8:	7f9b      	ldrb	r3, [r3, #30]
  4048ba:	f043 0301 	orr.w	r3, r3, #1
  4048be:	b2da      	uxtb	r2, r3
  4048c0:	6a3b      	ldr	r3, [r7, #32]
  4048c2:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  4048c4:	8afa      	ldrh	r2, [r7, #22]
  4048c6:	8abb      	ldrh	r3, [r7, #20]
  4048c8:	4413      	add	r3, r2
  4048ca:	b29a      	uxth	r2, r3
  4048cc:	6a3b      	ldr	r3, [r7, #32]
  4048ce:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  4048d0:	6879      	ldr	r1, [r7, #4]
  4048d2:	6a38      	ldr	r0, [r7, #32]
  4048d4:	4b3b      	ldr	r3, [pc, #236]	; (4049c4 <ip_reass+0x258>)
  4048d6:	4798      	blx	r3
  4048d8:	4603      	mov	r3, r0
  4048da:	2b00      	cmp	r3, #0
  4048dc:	d058      	beq.n	404990 <ip_reass+0x224>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  4048de:	6a3b      	ldr	r3, [r7, #32]
  4048e0:	8b9b      	ldrh	r3, [r3, #28]
  4048e2:	3314      	adds	r3, #20
  4048e4:	b29a      	uxth	r2, r3
  4048e6:	6a3b      	ldr	r3, [r7, #32]
  4048e8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  4048ea:	6a3b      	ldr	r3, [r7, #32]
  4048ec:	685b      	ldr	r3, [r3, #4]
  4048ee:	685b      	ldr	r3, [r3, #4]
  4048f0:	681b      	ldr	r3, [r3, #0]
  4048f2:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  4048f4:	6a3b      	ldr	r3, [r7, #32]
  4048f6:	685b      	ldr	r3, [r3, #4]
  4048f8:	685b      	ldr	r3, [r3, #4]
  4048fa:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  4048fc:	6a3b      	ldr	r3, [r7, #32]
  4048fe:	3308      	adds	r3, #8
  404900:	2214      	movs	r2, #20
  404902:	4619      	mov	r1, r3
  404904:	69b8      	ldr	r0, [r7, #24]
  404906:	4b2e      	ldr	r3, [pc, #184]	; (4049c0 <ip_reass+0x254>)
  404908:	4798      	blx	r3
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  40490a:	6a3b      	ldr	r3, [r7, #32]
  40490c:	8b9b      	ldrh	r3, [r3, #28]
  40490e:	4618      	mov	r0, r3
  404910:	4b2d      	ldr	r3, [pc, #180]	; (4049c8 <ip_reass+0x25c>)
  404912:	4798      	blx	r3
  404914:	4603      	mov	r3, r0
  404916:	461a      	mov	r2, r3
  404918:	69bb      	ldr	r3, [r7, #24]
  40491a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  40491c:	69bb      	ldr	r3, [r7, #24]
  40491e:	2200      	movs	r2, #0
  404920:	719a      	strb	r2, [r3, #6]
  404922:	2200      	movs	r2, #0
  404924:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  404926:	69bb      	ldr	r3, [r7, #24]
  404928:	2200      	movs	r2, #0
  40492a:	729a      	strb	r2, [r3, #10]
  40492c:	2200      	movs	r2, #0
  40492e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  404930:	2114      	movs	r1, #20
  404932:	69b8      	ldr	r0, [r7, #24]
  404934:	4b25      	ldr	r3, [pc, #148]	; (4049cc <ip_reass+0x260>)
  404936:	4798      	blx	r3
  404938:	4603      	mov	r3, r0
  40493a:	461a      	mov	r2, r3
  40493c:	69bb      	ldr	r3, [r7, #24]
  40493e:	815a      	strh	r2, [r3, #10]

    p = ipr->p;
  404940:	6a3b      	ldr	r3, [r7, #32]
  404942:	685b      	ldr	r3, [r3, #4]
  404944:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  404946:	e00e      	b.n	404966 <ip_reass+0x1fa>
      iprh = (struct ip_reass_helper*)r->payload;
  404948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40494a:	685b      	ldr	r3, [r3, #4]
  40494c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  40494e:	f06f 0113 	mvn.w	r1, #19
  404952:	6a78      	ldr	r0, [r7, #36]	; 0x24
  404954:	4b1e      	ldr	r3, [pc, #120]	; (4049d0 <ip_reass+0x264>)
  404956:	4798      	blx	r3
      pbuf_cat(p, r);
  404958:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40495a:	6878      	ldr	r0, [r7, #4]
  40495c:	4b1d      	ldr	r3, [pc, #116]	; (4049d4 <ip_reass+0x268>)
  40495e:	4798      	blx	r3
      r = iprh->next_pbuf;
  404960:	68fb      	ldr	r3, [r7, #12]
  404962:	681b      	ldr	r3, [r3, #0]
  404964:	627b      	str	r3, [r7, #36]	; 0x24
    while(r != NULL) {
  404966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404968:	2b00      	cmp	r3, #0
  40496a:	d1ed      	bne.n	404948 <ip_reass+0x1dc>
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  40496c:	69f9      	ldr	r1, [r7, #28]
  40496e:	6a38      	ldr	r0, [r7, #32]
  404970:	4b19      	ldr	r3, [pc, #100]	; (4049d8 <ip_reass+0x26c>)
  404972:	4798      	blx	r3

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  404974:	6878      	ldr	r0, [r7, #4]
  404976:	4b0d      	ldr	r3, [pc, #52]	; (4049ac <ip_reass+0x240>)
  404978:	4798      	blx	r3
  40497a:	4603      	mov	r3, r0
  40497c:	4619      	mov	r1, r3
  40497e:	4b0c      	ldr	r3, [pc, #48]	; (4049b0 <ip_reass+0x244>)
  404980:	881a      	ldrh	r2, [r3, #0]
  404982:	b28b      	uxth	r3, r1
  404984:	1ad3      	subs	r3, r2, r3
  404986:	b29a      	uxth	r2, r3
  404988:	4b09      	ldr	r3, [pc, #36]	; (4049b0 <ip_reass+0x244>)
  40498a:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
  40498c:	687b      	ldr	r3, [r7, #4]
  40498e:	e006      	b.n	40499e <ip_reass+0x232>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  404990:	2300      	movs	r3, #0
  404992:	e004      	b.n	40499e <ip_reass+0x232>
    goto nullreturn;
  404994:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  404996:	6878      	ldr	r0, [r7, #4]
  404998:	4b10      	ldr	r3, [pc, #64]	; (4049dc <ip_reass+0x270>)
  40499a:	4798      	blx	r3
  return NULL;
  40499c:	2300      	movs	r3, #0
}
  40499e:	4618      	mov	r0, r3
  4049a0:	3728      	adds	r7, #40	; 0x28
  4049a2:	46bd      	mov	sp, r7
  4049a4:	bd80      	pop	{r7, pc}
  4049a6:	bf00      	nop
  4049a8:	00401e45 	.word	0x00401e45
  4049ac:	00405a91 	.word	0x00405a91
  4049b0:	20400534 	.word	0x20400534
  4049b4:	004043f5 	.word	0x004043f5
  4049b8:	20400530 	.word	0x20400530
  4049bc:	004044b1 	.word	0x004044b1
  4049c0:	0040c9e5 	.word	0x0040c9e5
  4049c4:	00404575 	.word	0x00404575
  4049c8:	00401e19 	.word	0x00401e19
  4049cc:	00403c9d 	.word	0x00403c9d
  4049d0:	00405925 	.word	0x00405925
  4049d4:	00405ae5 	.word	0x00405ae5
  4049d8:	00404535 	.word	0x00404535
  4049dc:	00405a01 	.word	0x00405a01

004049e0 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  4049e0:	b590      	push	{r4, r7, lr}
  4049e2:	b08d      	sub	sp, #52	; 0x34
  4049e4:	af00      	add	r7, sp, #0
  4049e6:	60f8      	str	r0, [r7, #12]
  4049e8:	60b9      	str	r1, [r7, #8]
  4049ea:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  4049ec:	68bb      	ldr	r3, [r7, #8]
  4049ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4049f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  4049f2:	2314      	movs	r3, #20
  4049f4:	857b      	strh	r3, [r7, #42]	; 0x2a

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  4049f6:	68fb      	ldr	r3, [r7, #12]
  4049f8:	685b      	ldr	r3, [r3, #4]
  4049fa:	623b      	str	r3, [r7, #32]
  iphdr = original_iphdr;
  4049fc:	6a3b      	ldr	r3, [r7, #32]
  4049fe:	61fb      	str	r3, [r7, #28]
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  404a00:	69fb      	ldr	r3, [r7, #28]
  404a02:	88db      	ldrh	r3, [r3, #6]
  404a04:	b29b      	uxth	r3, r3
  404a06:	4618      	mov	r0, r3
  404a08:	4b50      	ldr	r3, [pc, #320]	; (404b4c <ip_frag+0x16c>)
  404a0a:	4798      	blx	r3
  404a0c:	4603      	mov	r3, r0
  404a0e:	853b      	strh	r3, [r7, #40]	; 0x28
  ofo = tmp & IP_OFFMASK;
  404a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404a12:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404a16:	85bb      	strh	r3, [r7, #44]	; 0x2c
  omf = tmp & IP_MF;
  404a18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  404a1e:	837b      	strh	r3, [r7, #26]

  left = p->tot_len - IP_HLEN;
  404a20:	68fb      	ldr	r3, [r7, #12]
  404a22:	891b      	ldrh	r3, [r3, #8]
  404a24:	3b14      	subs	r3, #20
  404a26:	85fb      	strh	r3, [r7, #46]	; 0x2e

  nfb = (mtu - IP_HLEN) / 8;
  404a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  404a2a:	3b14      	subs	r3, #20
  404a2c:	2b00      	cmp	r3, #0
  404a2e:	da00      	bge.n	404a32 <ip_frag+0x52>
  404a30:	3307      	adds	r3, #7
  404a32:	10db      	asrs	r3, r3, #3
  404a34:	833b      	strh	r3, [r7, #24]

  while (left) {
  404a36:	e07f      	b.n	404b38 <ip_frag+0x158>
    last = (left <= mtu - IP_HLEN);
  404a38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  404a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  404a3c:	3b14      	subs	r3, #20
  404a3e:	429a      	cmp	r2, r3
  404a40:	bfd4      	ite	le
  404a42:	2301      	movle	r3, #1
  404a44:	2300      	movgt	r3, #0
  404a46:	b2db      	uxtb	r3, r3
  404a48:	82fb      	strh	r3, [r7, #22]

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  404a4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  404a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404a50:	b29a      	uxth	r2, r3
  404a52:	8b7b      	ldrh	r3, [r7, #26]
  404a54:	4313      	orrs	r3, r2
  404a56:	853b      	strh	r3, [r7, #40]	; 0x28
    if (!last) {
  404a58:	8afb      	ldrh	r3, [r7, #22]
  404a5a:	2b00      	cmp	r3, #0
  404a5c:	d103      	bne.n	404a66 <ip_frag+0x86>
      tmp = tmp | IP_MF;
  404a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404a60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404a64:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  404a66:	8afb      	ldrh	r3, [r7, #22]
  404a68:	2b00      	cmp	r3, #0
  404a6a:	d103      	bne.n	404a74 <ip_frag+0x94>
  404a6c:	8b3b      	ldrh	r3, [r7, #24]
  404a6e:	00db      	lsls	r3, r3, #3
  404a70:	b29b      	uxth	r3, r3
  404a72:	e000      	b.n	404a76 <ip_frag+0x96>
  404a74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  404a76:	82bb      	strh	r3, [r7, #20]

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  404a78:	8abb      	ldrh	r3, [r7, #20]
  404a7a:	2200      	movs	r2, #0
  404a7c:	4619      	mov	r1, r3
  404a7e:	2001      	movs	r0, #1
  404a80:	4b33      	ldr	r3, [pc, #204]	; (404b50 <ip_frag+0x170>)
  404a82:	4798      	blx	r3
  404a84:	6138      	str	r0, [r7, #16]
    if (rambuf == NULL) {
  404a86:	693b      	ldr	r3, [r7, #16]
  404a88:	2b00      	cmp	r3, #0
  404a8a:	d102      	bne.n	404a92 <ip_frag+0xb2>
      return ERR_MEM;
  404a8c:	f04f 33ff 	mov.w	r3, #4294967295
  404a90:	e057      	b.n	404b42 <ip_frag+0x162>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  404a92:	693b      	ldr	r3, [r7, #16]
  404a94:	6859      	ldr	r1, [r3, #4]
  404a96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  404a98:	8aba      	ldrh	r2, [r7, #20]
  404a9a:	68f8      	ldr	r0, [r7, #12]
  404a9c:	4c2d      	ldr	r4, [pc, #180]	; (404b54 <ip_frag+0x174>)
  404a9e:	47a0      	blx	r4
  404aa0:	4603      	mov	r3, r0
  404aa2:	461a      	mov	r2, r3
  404aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  404aa6:	4413      	add	r3, r2
  404aa8:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  404aaa:	2114      	movs	r1, #20
  404aac:	6938      	ldr	r0, [r7, #16]
  404aae:	4b2a      	ldr	r3, [pc, #168]	; (404b58 <ip_frag+0x178>)
  404ab0:	4798      	blx	r3
  404ab2:	4603      	mov	r3, r0
  404ab4:	2b00      	cmp	r3, #0
  404ab6:	d005      	beq.n	404ac4 <ip_frag+0xe4>
      pbuf_free(rambuf);
  404ab8:	6938      	ldr	r0, [r7, #16]
  404aba:	4b28      	ldr	r3, [pc, #160]	; (404b5c <ip_frag+0x17c>)
  404abc:	4798      	blx	r3
      return ERR_MEM;
  404abe:	f04f 33ff 	mov.w	r3, #4294967295
  404ac2:	e03e      	b.n	404b42 <ip_frag+0x162>
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  404ac4:	693b      	ldr	r3, [r7, #16]
  404ac6:	685b      	ldr	r3, [r3, #4]
  404ac8:	2214      	movs	r2, #20
  404aca:	6a39      	ldr	r1, [r7, #32]
  404acc:	4618      	mov	r0, r3
  404ace:	4b24      	ldr	r3, [pc, #144]	; (404b60 <ip_frag+0x180>)
  404ad0:	4798      	blx	r3
    iphdr = rambuf->payload;
  404ad2:	693b      	ldr	r3, [r7, #16]
  404ad4:	685b      	ldr	r3, [r3, #4]
  404ad6:	61fb      	str	r3, [r7, #28]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  404ad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404ada:	4618      	mov	r0, r3
  404adc:	4b21      	ldr	r3, [pc, #132]	; (404b64 <ip_frag+0x184>)
  404ade:	4798      	blx	r3
  404ae0:	4603      	mov	r3, r0
  404ae2:	461a      	mov	r2, r3
  404ae4:	69fb      	ldr	r3, [r7, #28]
  404ae6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  404ae8:	8abb      	ldrh	r3, [r7, #20]
  404aea:	3314      	adds	r3, #20
  404aec:	b29b      	uxth	r3, r3
  404aee:	4618      	mov	r0, r3
  404af0:	4b1c      	ldr	r3, [pc, #112]	; (404b64 <ip_frag+0x184>)
  404af2:	4798      	blx	r3
  404af4:	4603      	mov	r3, r0
  404af6:	461a      	mov	r2, r3
  404af8:	69fb      	ldr	r3, [r7, #28]
  404afa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  404afc:	69fb      	ldr	r3, [r7, #28]
  404afe:	2200      	movs	r2, #0
  404b00:	729a      	strb	r2, [r3, #10]
  404b02:	2200      	movs	r2, #0
  404b04:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  404b06:	2114      	movs	r1, #20
  404b08:	69f8      	ldr	r0, [r7, #28]
  404b0a:	4b17      	ldr	r3, [pc, #92]	; (404b68 <ip_frag+0x188>)
  404b0c:	4798      	blx	r3
  404b0e:	4603      	mov	r3, r0
  404b10:	461a      	mov	r2, r3
  404b12:	69fb      	ldr	r3, [r7, #28]
  404b14:	815a      	strh	r2, [r3, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  404b16:	68bb      	ldr	r3, [r7, #8]
  404b18:	695b      	ldr	r3, [r3, #20]
  404b1a:	687a      	ldr	r2, [r7, #4]
  404b1c:	6939      	ldr	r1, [r7, #16]
  404b1e:	68b8      	ldr	r0, [r7, #8]
  404b20:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  404b22:	6938      	ldr	r0, [r7, #16]
  404b24:	4b0d      	ldr	r3, [pc, #52]	; (404b5c <ip_frag+0x17c>)
  404b26:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  404b28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  404b2a:	8abb      	ldrh	r3, [r7, #20]
  404b2c:	1ad3      	subs	r3, r2, r3
  404b2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    ofo += nfb;
  404b30:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  404b32:	8b3b      	ldrh	r3, [r7, #24]
  404b34:	4413      	add	r3, r2
  404b36:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (left) {
  404b38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  404b3a:	2b00      	cmp	r3, #0
  404b3c:	f47f af7c 	bne.w	404a38 <ip_frag+0x58>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  404b40:	2300      	movs	r3, #0
}
  404b42:	4618      	mov	r0, r3
  404b44:	3734      	adds	r7, #52	; 0x34
  404b46:	46bd      	mov	sp, r7
  404b48:	bd90      	pop	{r4, r7, pc}
  404b4a:	bf00      	nop
  404b4c:	00401e45 	.word	0x00401e45
  404b50:	0040565d 	.word	0x0040565d
  404b54:	00405c71 	.word	0x00405c71
  404b58:	00405925 	.word	0x00405925
  404b5c:	00405a01 	.word	0x00405a01
  404b60:	0040c9e5 	.word	0x0040c9e5
  404b64:	00401e19 	.word	0x00401e19
  404b68:	00403c9d 	.word	0x00403c9d

00404b6c <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  404b6c:	b580      	push	{r7, lr}
  404b6e:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  404b70:	4b06      	ldr	r3, [pc, #24]	; (404b8c <lwip_init+0x20>)
  404b72:	4798      	blx	r3
  memp_init();
  404b74:	4b06      	ldr	r3, [pc, #24]	; (404b90 <lwip_init+0x24>)
  404b76:	4798      	blx	r3
  pbuf_init();
  netif_init();
  404b78:	4b06      	ldr	r3, [pc, #24]	; (404b94 <lwip_init+0x28>)
  404b7a:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  404b7c:	4b06      	ldr	r3, [pc, #24]	; (404b98 <lwip_init+0x2c>)
  404b7e:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  404b80:	4b06      	ldr	r3, [pc, #24]	; (404b9c <lwip_init+0x30>)
  404b82:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  404b84:	4b06      	ldr	r3, [pc, #24]	; (404ba0 <lwip_init+0x34>)
  404b86:	4798      	blx	r3
#endif /* LWIP_TIMERS */
}
  404b88:	bf00      	nop
  404b8a:	bd80      	pop	{r7, pc}
  404b8c:	00404eed 	.word	0x00404eed
  404b90:	00405289 	.word	0x00405289
  404b94:	004053a5 	.word	0x004053a5
  404b98:	0040a32d 	.word	0x0040a32d
  404b9c:	00405d39 	.word	0x00405d39
  404ba0:	00404ce9 	.word	0x00404ce9

00404ba4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  404ba4:	b580      	push	{r7, lr}
  404ba6:	b082      	sub	sp, #8
  404ba8:	af00      	add	r7, sp, #0
  404baa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  404bac:	4b0b      	ldr	r3, [pc, #44]	; (404bdc <tcpip_tcp_timer+0x38>)
  404bae:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  404bb0:	4b0b      	ldr	r3, [pc, #44]	; (404be0 <tcpip_tcp_timer+0x3c>)
  404bb2:	681b      	ldr	r3, [r3, #0]
  404bb4:	2b00      	cmp	r3, #0
  404bb6:	d103      	bne.n	404bc0 <tcpip_tcp_timer+0x1c>
  404bb8:	4b0a      	ldr	r3, [pc, #40]	; (404be4 <tcpip_tcp_timer+0x40>)
  404bba:	681b      	ldr	r3, [r3, #0]
  404bbc:	2b00      	cmp	r3, #0
  404bbe:	d005      	beq.n	404bcc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  404bc0:	2200      	movs	r2, #0
  404bc2:	4909      	ldr	r1, [pc, #36]	; (404be8 <tcpip_tcp_timer+0x44>)
  404bc4:	20fa      	movs	r0, #250	; 0xfa
  404bc6:	4b09      	ldr	r3, [pc, #36]	; (404bec <tcpip_tcp_timer+0x48>)
  404bc8:	4798      	blx	r3
  404bca:	e002      	b.n	404bd2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  404bcc:	4b08      	ldr	r3, [pc, #32]	; (404bf0 <tcpip_tcp_timer+0x4c>)
  404bce:	2200      	movs	r2, #0
  404bd0:	601a      	str	r2, [r3, #0]
  }
}
  404bd2:	bf00      	nop
  404bd4:	3708      	adds	r7, #8
  404bd6:	46bd      	mov	sp, r7
  404bd8:	bd80      	pop	{r7, pc}
  404bda:	bf00      	nop
  404bdc:	00405d49 	.word	0x00405d49
  404be0:	204043e8 	.word	0x204043e8
  404be4:	204043fc 	.word	0x204043fc
  404be8:	00404ba5 	.word	0x00404ba5
  404bec:	00404d49 	.word	0x00404d49
  404bf0:	20400540 	.word	0x20400540

00404bf4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  404bf4:	b580      	push	{r7, lr}
  404bf6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  404bf8:	4b0a      	ldr	r3, [pc, #40]	; (404c24 <tcp_timer_needed+0x30>)
  404bfa:	681b      	ldr	r3, [r3, #0]
  404bfc:	2b00      	cmp	r3, #0
  404bfe:	d10f      	bne.n	404c20 <tcp_timer_needed+0x2c>
  404c00:	4b09      	ldr	r3, [pc, #36]	; (404c28 <tcp_timer_needed+0x34>)
  404c02:	681b      	ldr	r3, [r3, #0]
  404c04:	2b00      	cmp	r3, #0
  404c06:	d103      	bne.n	404c10 <tcp_timer_needed+0x1c>
  404c08:	4b08      	ldr	r3, [pc, #32]	; (404c2c <tcp_timer_needed+0x38>)
  404c0a:	681b      	ldr	r3, [r3, #0]
  404c0c:	2b00      	cmp	r3, #0
  404c0e:	d007      	beq.n	404c20 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  404c10:	4b04      	ldr	r3, [pc, #16]	; (404c24 <tcp_timer_needed+0x30>)
  404c12:	2201      	movs	r2, #1
  404c14:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  404c16:	2200      	movs	r2, #0
  404c18:	4905      	ldr	r1, [pc, #20]	; (404c30 <tcp_timer_needed+0x3c>)
  404c1a:	20fa      	movs	r0, #250	; 0xfa
  404c1c:	4b05      	ldr	r3, [pc, #20]	; (404c34 <tcp_timer_needed+0x40>)
  404c1e:	4798      	blx	r3
  }
}
  404c20:	bf00      	nop
  404c22:	bd80      	pop	{r7, pc}
  404c24:	20400540 	.word	0x20400540
  404c28:	204043e8 	.word	0x204043e8
  404c2c:	204043fc 	.word	0x204043fc
  404c30:	00404ba5 	.word	0x00404ba5
  404c34:	00404d49 	.word	0x00404d49

00404c38 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  404c38:	b580      	push	{r7, lr}
  404c3a:	b082      	sub	sp, #8
  404c3c:	af00      	add	r7, sp, #0
  404c3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  404c40:	4b05      	ldr	r3, [pc, #20]	; (404c58 <ip_reass_timer+0x20>)
  404c42:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  404c44:	2200      	movs	r2, #0
  404c46:	4905      	ldr	r1, [pc, #20]	; (404c5c <ip_reass_timer+0x24>)
  404c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404c4c:	4b04      	ldr	r3, [pc, #16]	; (404c60 <ip_reass_timer+0x28>)
  404c4e:	4798      	blx	r3
}
  404c50:	bf00      	nop
  404c52:	3708      	adds	r7, #8
  404c54:	46bd      	mov	sp, r7
  404c56:	bd80      	pop	{r7, pc}
  404c58:	004042c9 	.word	0x004042c9
  404c5c:	00404c39 	.word	0x00404c39
  404c60:	00404d49 	.word	0x00404d49

00404c64 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  404c64:	b580      	push	{r7, lr}
  404c66:	b082      	sub	sp, #8
  404c68:	af00      	add	r7, sp, #0
  404c6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  404c6c:	4b05      	ldr	r3, [pc, #20]	; (404c84 <arp_timer+0x20>)
  404c6e:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  404c70:	2200      	movs	r2, #0
  404c72:	4905      	ldr	r1, [pc, #20]	; (404c88 <arp_timer+0x24>)
  404c74:	f241 3088 	movw	r0, #5000	; 0x1388
  404c78:	4b04      	ldr	r3, [pc, #16]	; (404c8c <arp_timer+0x28>)
  404c7a:	4798      	blx	r3
}
  404c7c:	bf00      	nop
  404c7e:	3708      	adds	r7, #8
  404c80:	46bd      	mov	sp, r7
  404c82:	bd80      	pop	{r7, pc}
  404c84:	0040aa81 	.word	0x0040aa81
  404c88:	00404c65 	.word	0x00404c65
  404c8c:	00404d49 	.word	0x00404d49

00404c90 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
  404c90:	b580      	push	{r7, lr}
  404c92:	b082      	sub	sp, #8
  404c94:	af00      	add	r7, sp, #0
  404c96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  404c98:	4b05      	ldr	r3, [pc, #20]	; (404cb0 <dhcp_timer_coarse+0x20>)
  404c9a:	4798      	blx	r3
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  404c9c:	2200      	movs	r2, #0
  404c9e:	4905      	ldr	r1, [pc, #20]	; (404cb4 <dhcp_timer_coarse+0x24>)
  404ca0:	f64e 2060 	movw	r0, #60000	; 0xea60
  404ca4:	4b04      	ldr	r3, [pc, #16]	; (404cb8 <dhcp_timer_coarse+0x28>)
  404ca6:	4798      	blx	r3
}
  404ca8:	bf00      	nop
  404caa:	3708      	adds	r7, #8
  404cac:	46bd      	mov	sp, r7
  404cae:	bd80      	pop	{r7, pc}
  404cb0:	0040212d 	.word	0x0040212d
  404cb4:	00404c91 	.word	0x00404c91
  404cb8:	00404d49 	.word	0x00404d49

00404cbc <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
  404cbc:	b580      	push	{r7, lr}
  404cbe:	b082      	sub	sp, #8
  404cc0:	af00      	add	r7, sp, #0
  404cc2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  404cc4:	4b05      	ldr	r3, [pc, #20]	; (404cdc <dhcp_timer_fine+0x20>)
  404cc6:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  404cc8:	2200      	movs	r2, #0
  404cca:	4905      	ldr	r1, [pc, #20]	; (404ce0 <dhcp_timer_fine+0x24>)
  404ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404cd0:	4b04      	ldr	r3, [pc, #16]	; (404ce4 <dhcp_timer_fine+0x28>)
  404cd2:	4798      	blx	r3
}
  404cd4:	bf00      	nop
  404cd6:	3708      	adds	r7, #8
  404cd8:	46bd      	mov	sp, r7
  404cda:	bd80      	pop	{r7, pc}
  404cdc:	00402191 	.word	0x00402191
  404ce0:	00404cbd 	.word	0x00404cbd
  404ce4:	00404d49 	.word	0x00404d49

00404ce8 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
  404ce8:	b580      	push	{r7, lr}
  404cea:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  404cec:	2200      	movs	r2, #0
  404cee:	490f      	ldr	r1, [pc, #60]	; (404d2c <sys_timeouts_init+0x44>)
  404cf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404cf4:	4b0e      	ldr	r3, [pc, #56]	; (404d30 <sys_timeouts_init+0x48>)
  404cf6:	4798      	blx	r3
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  404cf8:	2200      	movs	r2, #0
  404cfa:	490e      	ldr	r1, [pc, #56]	; (404d34 <sys_timeouts_init+0x4c>)
  404cfc:	f241 3088 	movw	r0, #5000	; 0x1388
  404d00:	4b0b      	ldr	r3, [pc, #44]	; (404d30 <sys_timeouts_init+0x48>)
  404d02:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  404d04:	2200      	movs	r2, #0
  404d06:	490c      	ldr	r1, [pc, #48]	; (404d38 <sys_timeouts_init+0x50>)
  404d08:	f64e 2060 	movw	r0, #60000	; 0xea60
  404d0c:	4b08      	ldr	r3, [pc, #32]	; (404d30 <sys_timeouts_init+0x48>)
  404d0e:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  404d10:	2200      	movs	r2, #0
  404d12:	490a      	ldr	r1, [pc, #40]	; (404d3c <sys_timeouts_init+0x54>)
  404d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404d18:	4b05      	ldr	r3, [pc, #20]	; (404d30 <sys_timeouts_init+0x48>)
  404d1a:	4798      	blx	r3
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  404d1c:	4b08      	ldr	r3, [pc, #32]	; (404d40 <sys_timeouts_init+0x58>)
  404d1e:	4798      	blx	r3
  404d20:	4602      	mov	r2, r0
  404d22:	4b08      	ldr	r3, [pc, #32]	; (404d44 <sys_timeouts_init+0x5c>)
  404d24:	601a      	str	r2, [r3, #0]
#endif
}
  404d26:	bf00      	nop
  404d28:	bd80      	pop	{r7, pc}
  404d2a:	bf00      	nop
  404d2c:	00404c39 	.word	0x00404c39
  404d30:	00404d49 	.word	0x00404d49
  404d34:	00404c65 	.word	0x00404c65
  404d38:	00404c91 	.word	0x00404c91
  404d3c:	00404cbd 	.word	0x00404cbd
  404d40:	0040c61d 	.word	0x0040c61d
  404d44:	2040053c 	.word	0x2040053c

00404d48 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  404d48:	b580      	push	{r7, lr}
  404d4a:	b086      	sub	sp, #24
  404d4c:	af00      	add	r7, sp, #0
  404d4e:	60f8      	str	r0, [r7, #12]
  404d50:	60b9      	str	r1, [r7, #8]
  404d52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  404d54:	2005      	movs	r0, #5
  404d56:	4b33      	ldr	r3, [pc, #204]	; (404e24 <sys_timeout+0xdc>)
  404d58:	4798      	blx	r3
  404d5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
  404d5c:	693b      	ldr	r3, [r7, #16]
  404d5e:	2b00      	cmp	r3, #0
  404d60:	d05b      	beq.n	404e1a <sys_timeout+0xd2>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  404d62:	693b      	ldr	r3, [r7, #16]
  404d64:	2200      	movs	r2, #0
  404d66:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
  404d68:	693b      	ldr	r3, [r7, #16]
  404d6a:	68ba      	ldr	r2, [r7, #8]
  404d6c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
  404d6e:	693b      	ldr	r3, [r7, #16]
  404d70:	687a      	ldr	r2, [r7, #4]
  404d72:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
  404d74:	693b      	ldr	r3, [r7, #16]
  404d76:	68fa      	ldr	r2, [r7, #12]
  404d78:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  404d7a:	4b2b      	ldr	r3, [pc, #172]	; (404e28 <sys_timeout+0xe0>)
  404d7c:	681b      	ldr	r3, [r3, #0]
  404d7e:	2b00      	cmp	r3, #0
  404d80:	d103      	bne.n	404d8a <sys_timeout+0x42>
    next_timeout = timeout;
  404d82:	4a29      	ldr	r2, [pc, #164]	; (404e28 <sys_timeout+0xe0>)
  404d84:	693b      	ldr	r3, [r7, #16]
  404d86:	6013      	str	r3, [r2, #0]
    return;
  404d88:	e048      	b.n	404e1c <sys_timeout+0xd4>
  }

  if (next_timeout->time > msecs) {
  404d8a:	4b27      	ldr	r3, [pc, #156]	; (404e28 <sys_timeout+0xe0>)
  404d8c:	681b      	ldr	r3, [r3, #0]
  404d8e:	685a      	ldr	r2, [r3, #4]
  404d90:	68fb      	ldr	r3, [r7, #12]
  404d92:	429a      	cmp	r2, r3
  404d94:	d90f      	bls.n	404db6 <sys_timeout+0x6e>
    next_timeout->time -= msecs;
  404d96:	4b24      	ldr	r3, [pc, #144]	; (404e28 <sys_timeout+0xe0>)
  404d98:	681b      	ldr	r3, [r3, #0]
  404d9a:	4a23      	ldr	r2, [pc, #140]	; (404e28 <sys_timeout+0xe0>)
  404d9c:	6812      	ldr	r2, [r2, #0]
  404d9e:	6851      	ldr	r1, [r2, #4]
  404da0:	68fa      	ldr	r2, [r7, #12]
  404da2:	1a8a      	subs	r2, r1, r2
  404da4:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
  404da6:	4b20      	ldr	r3, [pc, #128]	; (404e28 <sys_timeout+0xe0>)
  404da8:	681a      	ldr	r2, [r3, #0]
  404daa:	693b      	ldr	r3, [r7, #16]
  404dac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
  404dae:	4a1e      	ldr	r2, [pc, #120]	; (404e28 <sys_timeout+0xe0>)
  404db0:	693b      	ldr	r3, [r7, #16]
  404db2:	6013      	str	r3, [r2, #0]
  404db4:	e032      	b.n	404e1c <sys_timeout+0xd4>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
  404db6:	4b1c      	ldr	r3, [pc, #112]	; (404e28 <sys_timeout+0xe0>)
  404db8:	681b      	ldr	r3, [r3, #0]
  404dba:	617b      	str	r3, [r7, #20]
  404dbc:	e029      	b.n	404e12 <sys_timeout+0xca>
      timeout->time -= t->time;
  404dbe:	693b      	ldr	r3, [r7, #16]
  404dc0:	685a      	ldr	r2, [r3, #4]
  404dc2:	697b      	ldr	r3, [r7, #20]
  404dc4:	685b      	ldr	r3, [r3, #4]
  404dc6:	1ad2      	subs	r2, r2, r3
  404dc8:	693b      	ldr	r3, [r7, #16]
  404dca:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  404dcc:	697b      	ldr	r3, [r7, #20]
  404dce:	681b      	ldr	r3, [r3, #0]
  404dd0:	2b00      	cmp	r3, #0
  404dd2:	d006      	beq.n	404de2 <sys_timeout+0x9a>
  404dd4:	697b      	ldr	r3, [r7, #20]
  404dd6:	681b      	ldr	r3, [r3, #0]
  404dd8:	685a      	ldr	r2, [r3, #4]
  404dda:	693b      	ldr	r3, [r7, #16]
  404ddc:	685b      	ldr	r3, [r3, #4]
  404dde:	429a      	cmp	r2, r3
  404de0:	d914      	bls.n	404e0c <sys_timeout+0xc4>
        if (t->next != NULL) {
  404de2:	697b      	ldr	r3, [r7, #20]
  404de4:	681b      	ldr	r3, [r3, #0]
  404de6:	2b00      	cmp	r3, #0
  404de8:	d008      	beq.n	404dfc <sys_timeout+0xb4>
          t->next->time -= timeout->time;
  404dea:	697b      	ldr	r3, [r7, #20]
  404dec:	681b      	ldr	r3, [r3, #0]
  404dee:	697a      	ldr	r2, [r7, #20]
  404df0:	6812      	ldr	r2, [r2, #0]
  404df2:	6851      	ldr	r1, [r2, #4]
  404df4:	693a      	ldr	r2, [r7, #16]
  404df6:	6852      	ldr	r2, [r2, #4]
  404df8:	1a8a      	subs	r2, r1, r2
  404dfa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  404dfc:	697b      	ldr	r3, [r7, #20]
  404dfe:	681a      	ldr	r2, [r3, #0]
  404e00:	693b      	ldr	r3, [r7, #16]
  404e02:	601a      	str	r2, [r3, #0]
        t->next = timeout;
  404e04:	697b      	ldr	r3, [r7, #20]
  404e06:	693a      	ldr	r2, [r7, #16]
  404e08:	601a      	str	r2, [r3, #0]
        break;
  404e0a:	e007      	b.n	404e1c <sys_timeout+0xd4>
    for(t = next_timeout; t != NULL; t = t->next) {
  404e0c:	697b      	ldr	r3, [r7, #20]
  404e0e:	681b      	ldr	r3, [r3, #0]
  404e10:	617b      	str	r3, [r7, #20]
  404e12:	697b      	ldr	r3, [r7, #20]
  404e14:	2b00      	cmp	r3, #0
  404e16:	d1d2      	bne.n	404dbe <sys_timeout+0x76>
  404e18:	e000      	b.n	404e1c <sys_timeout+0xd4>
    return;
  404e1a:	bf00      	nop
      }
    }
  }
}
  404e1c:	3718      	adds	r7, #24
  404e1e:	46bd      	mov	sp, r7
  404e20:	bd80      	pop	{r7, pc}
  404e22:	bf00      	nop
  404e24:	00405325 	.word	0x00405325
  404e28:	20400538 	.word	0x20400538

00404e2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
  404e2c:	b480      	push	{r7}
  404e2e:	b085      	sub	sp, #20
  404e30:	af00      	add	r7, sp, #0
  404e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  404e34:	4b2a      	ldr	r3, [pc, #168]	; (404ee0 <plug_holes+0xb4>)
  404e36:	681b      	ldr	r3, [r3, #0]
  404e38:	687a      	ldr	r2, [r7, #4]
  404e3a:	8812      	ldrh	r2, [r2, #0]
  404e3c:	4413      	add	r3, r2
  404e3e:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  404e40:	687a      	ldr	r2, [r7, #4]
  404e42:	68fb      	ldr	r3, [r7, #12]
  404e44:	429a      	cmp	r2, r3
  404e46:	d01f      	beq.n	404e88 <plug_holes+0x5c>
  404e48:	68fb      	ldr	r3, [r7, #12]
  404e4a:	791b      	ldrb	r3, [r3, #4]
  404e4c:	2b00      	cmp	r3, #0
  404e4e:	d11b      	bne.n	404e88 <plug_holes+0x5c>
  404e50:	4b24      	ldr	r3, [pc, #144]	; (404ee4 <plug_holes+0xb8>)
  404e52:	681b      	ldr	r3, [r3, #0]
  404e54:	68fa      	ldr	r2, [r7, #12]
  404e56:	429a      	cmp	r2, r3
  404e58:	d016      	beq.n	404e88 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  404e5a:	4b23      	ldr	r3, [pc, #140]	; (404ee8 <plug_holes+0xbc>)
  404e5c:	681a      	ldr	r2, [r3, #0]
  404e5e:	68fb      	ldr	r3, [r7, #12]
  404e60:	429a      	cmp	r2, r3
  404e62:	d102      	bne.n	404e6a <plug_holes+0x3e>
      lfree = mem;
  404e64:	4a20      	ldr	r2, [pc, #128]	; (404ee8 <plug_holes+0xbc>)
  404e66:	687b      	ldr	r3, [r7, #4]
  404e68:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
  404e6a:	68fb      	ldr	r3, [r7, #12]
  404e6c:	881a      	ldrh	r2, [r3, #0]
  404e6e:	687b      	ldr	r3, [r7, #4]
  404e70:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  404e72:	4b1b      	ldr	r3, [pc, #108]	; (404ee0 <plug_holes+0xb4>)
  404e74:	681b      	ldr	r3, [r3, #0]
  404e76:	68fa      	ldr	r2, [r7, #12]
  404e78:	8812      	ldrh	r2, [r2, #0]
  404e7a:	4413      	add	r3, r2
  404e7c:	687a      	ldr	r2, [r7, #4]
  404e7e:	4918      	ldr	r1, [pc, #96]	; (404ee0 <plug_holes+0xb4>)
  404e80:	6809      	ldr	r1, [r1, #0]
  404e82:	1a52      	subs	r2, r2, r1
  404e84:	b292      	uxth	r2, r2
  404e86:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
  404e88:	4b15      	ldr	r3, [pc, #84]	; (404ee0 <plug_holes+0xb4>)
  404e8a:	681b      	ldr	r3, [r3, #0]
  404e8c:	687a      	ldr	r2, [r7, #4]
  404e8e:	8852      	ldrh	r2, [r2, #2]
  404e90:	4413      	add	r3, r2
  404e92:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
  404e94:	68ba      	ldr	r2, [r7, #8]
  404e96:	687b      	ldr	r3, [r7, #4]
  404e98:	429a      	cmp	r2, r3
  404e9a:	d01a      	beq.n	404ed2 <plug_holes+0xa6>
  404e9c:	68bb      	ldr	r3, [r7, #8]
  404e9e:	791b      	ldrb	r3, [r3, #4]
  404ea0:	2b00      	cmp	r3, #0
  404ea2:	d116      	bne.n	404ed2 <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  404ea4:	4b10      	ldr	r3, [pc, #64]	; (404ee8 <plug_holes+0xbc>)
  404ea6:	681a      	ldr	r2, [r3, #0]
  404ea8:	687b      	ldr	r3, [r7, #4]
  404eaa:	429a      	cmp	r2, r3
  404eac:	d102      	bne.n	404eb4 <plug_holes+0x88>
      lfree = pmem;
  404eae:	4a0e      	ldr	r2, [pc, #56]	; (404ee8 <plug_holes+0xbc>)
  404eb0:	68bb      	ldr	r3, [r7, #8]
  404eb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
  404eb4:	687b      	ldr	r3, [r7, #4]
  404eb6:	881a      	ldrh	r2, [r3, #0]
  404eb8:	68bb      	ldr	r3, [r7, #8]
  404eba:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  404ebc:	4b08      	ldr	r3, [pc, #32]	; (404ee0 <plug_holes+0xb4>)
  404ebe:	681b      	ldr	r3, [r3, #0]
  404ec0:	687a      	ldr	r2, [r7, #4]
  404ec2:	8812      	ldrh	r2, [r2, #0]
  404ec4:	4413      	add	r3, r2
  404ec6:	68ba      	ldr	r2, [r7, #8]
  404ec8:	4905      	ldr	r1, [pc, #20]	; (404ee0 <plug_holes+0xb4>)
  404eca:	6809      	ldr	r1, [r1, #0]
  404ecc:	1a52      	subs	r2, r2, r1
  404ece:	b292      	uxth	r2, r2
  404ed0:	805a      	strh	r2, [r3, #2]
  }
}
  404ed2:	bf00      	nop
  404ed4:	3714      	adds	r7, #20
  404ed6:	46bd      	mov	sp, r7
  404ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
  404edc:	4770      	bx	lr
  404ede:	bf00      	nop
  404ee0:	20400544 	.word	0x20400544
  404ee4:	20400548 	.word	0x20400548
  404ee8:	2040054c 	.word	0x2040054c

00404eec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
  404eec:	b480      	push	{r7}
  404eee:	b083      	sub	sp, #12
  404ef0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  404ef2:	4b19      	ldr	r3, [pc, #100]	; (404f58 <mem_init+0x6c>)
  404ef4:	3303      	adds	r3, #3
  404ef6:	f023 0303 	bic.w	r3, r3, #3
  404efa:	461a      	mov	r2, r3
  404efc:	4b17      	ldr	r3, [pc, #92]	; (404f5c <mem_init+0x70>)
  404efe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  404f00:	4b16      	ldr	r3, [pc, #88]	; (404f5c <mem_init+0x70>)
  404f02:	681b      	ldr	r3, [r3, #0]
  404f04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
  404f06:	687b      	ldr	r3, [r7, #4]
  404f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404f0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
  404f0e:	687b      	ldr	r3, [r7, #4]
  404f10:	2200      	movs	r2, #0
  404f12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  404f14:	687b      	ldr	r3, [r7, #4]
  404f16:	2200      	movs	r2, #0
  404f18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  404f1a:	4b10      	ldr	r3, [pc, #64]	; (404f5c <mem_init+0x70>)
  404f1c:	681b      	ldr	r3, [r3, #0]
  404f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404f22:	4a0f      	ldr	r2, [pc, #60]	; (404f60 <mem_init+0x74>)
  404f24:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
  404f26:	4b0e      	ldr	r3, [pc, #56]	; (404f60 <mem_init+0x74>)
  404f28:	681b      	ldr	r3, [r3, #0]
  404f2a:	2201      	movs	r2, #1
  404f2c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  404f2e:	4b0c      	ldr	r3, [pc, #48]	; (404f60 <mem_init+0x74>)
  404f30:	681b      	ldr	r3, [r3, #0]
  404f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404f36:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  404f38:	4b09      	ldr	r3, [pc, #36]	; (404f60 <mem_init+0x74>)
  404f3a:	681b      	ldr	r3, [r3, #0]
  404f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  404f40:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  404f42:	4b06      	ldr	r3, [pc, #24]	; (404f5c <mem_init+0x70>)
  404f44:	681b      	ldr	r3, [r3, #0]
  404f46:	4a07      	ldr	r2, [pc, #28]	; (404f64 <mem_init+0x78>)
  404f48:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
  404f4a:	bf00      	nop
  404f4c:	370c      	adds	r7, #12
  404f4e:	46bd      	mov	sp, r7
  404f50:	f85d 7b04 	ldr.w	r7, [sp], #4
  404f54:	4770      	bx	lr
  404f56:	bf00      	nop
  404f58:	204033c4 	.word	0x204033c4
  404f5c:	20400544 	.word	0x20400544
  404f60:	20400548 	.word	0x20400548
  404f64:	2040054c 	.word	0x2040054c

00404f68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  404f68:	b580      	push	{r7, lr}
  404f6a:	b084      	sub	sp, #16
  404f6c:	af00      	add	r7, sp, #0
  404f6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  404f70:	687b      	ldr	r3, [r7, #4]
  404f72:	2b00      	cmp	r3, #0
  404f74:	d01b      	beq.n	404fae <mem_free+0x46>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  404f76:	4b11      	ldr	r3, [pc, #68]	; (404fbc <mem_free+0x54>)
  404f78:	681b      	ldr	r3, [r3, #0]
  404f7a:	687a      	ldr	r2, [r7, #4]
  404f7c:	429a      	cmp	r2, r3
  404f7e:	d318      	bcc.n	404fb2 <mem_free+0x4a>
  404f80:	4b0f      	ldr	r3, [pc, #60]	; (404fc0 <mem_free+0x58>)
  404f82:	681b      	ldr	r3, [r3, #0]
  404f84:	687a      	ldr	r2, [r7, #4]
  404f86:	429a      	cmp	r2, r3
  404f88:	d213      	bcs.n	404fb2 <mem_free+0x4a>
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  404f8a:	687b      	ldr	r3, [r7, #4]
  404f8c:	3b08      	subs	r3, #8
  404f8e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  404f90:	68fb      	ldr	r3, [r7, #12]
  404f92:	2200      	movs	r2, #0
  404f94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
  404f96:	4b0b      	ldr	r3, [pc, #44]	; (404fc4 <mem_free+0x5c>)
  404f98:	681b      	ldr	r3, [r3, #0]
  404f9a:	68fa      	ldr	r2, [r7, #12]
  404f9c:	429a      	cmp	r2, r3
  404f9e:	d202      	bcs.n	404fa6 <mem_free+0x3e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  404fa0:	4a08      	ldr	r2, [pc, #32]	; (404fc4 <mem_free+0x5c>)
  404fa2:	68fb      	ldr	r3, [r7, #12]
  404fa4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
  404fa6:	68f8      	ldr	r0, [r7, #12]
  404fa8:	4b07      	ldr	r3, [pc, #28]	; (404fc8 <mem_free+0x60>)
  404faa:	4798      	blx	r3
  404fac:	e002      	b.n	404fb4 <mem_free+0x4c>
    return;
  404fae:	bf00      	nop
  404fb0:	e000      	b.n	404fb4 <mem_free+0x4c>
    return;
  404fb2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  404fb4:	3710      	adds	r7, #16
  404fb6:	46bd      	mov	sp, r7
  404fb8:	bd80      	pop	{r7, pc}
  404fba:	bf00      	nop
  404fbc:	20400544 	.word	0x20400544
  404fc0:	20400548 	.word	0x20400548
  404fc4:	2040054c 	.word	0x2040054c
  404fc8:	00404e2d 	.word	0x00404e2d

00404fcc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
  404fcc:	b480      	push	{r7}
  404fce:	b087      	sub	sp, #28
  404fd0:	af00      	add	r7, sp, #0
  404fd2:	6078      	str	r0, [r7, #4]
  404fd4:	460b      	mov	r3, r1
  404fd6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  404fd8:	887b      	ldrh	r3, [r7, #2]
  404fda:	3303      	adds	r3, #3
  404fdc:	b29b      	uxth	r3, r3
  404fde:	f023 0303 	bic.w	r3, r3, #3
  404fe2:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
  404fe4:	887b      	ldrh	r3, [r7, #2]
  404fe6:	2b0b      	cmp	r3, #11
  404fe8:	d801      	bhi.n	404fee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  404fea:	230c      	movs	r3, #12
  404fec:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  404fee:	887b      	ldrh	r3, [r7, #2]
  404ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  404ff4:	d901      	bls.n	404ffa <mem_trim+0x2e>
    return NULL;
  404ff6:	2300      	movs	r3, #0
  404ff8:	e095      	b.n	405126 <mem_trim+0x15a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  404ffa:	4b4e      	ldr	r3, [pc, #312]	; (405134 <mem_trim+0x168>)
  404ffc:	681b      	ldr	r3, [r3, #0]
  404ffe:	687a      	ldr	r2, [r7, #4]
  405000:	429a      	cmp	r2, r3
  405002:	d304      	bcc.n	40500e <mem_trim+0x42>
  405004:	4b4c      	ldr	r3, [pc, #304]	; (405138 <mem_trim+0x16c>)
  405006:	681b      	ldr	r3, [r3, #0]
  405008:	687a      	ldr	r2, [r7, #4]
  40500a:	429a      	cmp	r2, r3
  40500c:	d301      	bcc.n	405012 <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  40500e:	687b      	ldr	r3, [r7, #4]
  405010:	e089      	b.n	405126 <mem_trim+0x15a>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  405012:	687b      	ldr	r3, [r7, #4]
  405014:	3b08      	subs	r3, #8
  405016:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  405018:	697b      	ldr	r3, [r7, #20]
  40501a:	4a46      	ldr	r2, [pc, #280]	; (405134 <mem_trim+0x168>)
  40501c:	6812      	ldr	r2, [r2, #0]
  40501e:	1a9b      	subs	r3, r3, r2
  405020:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  405022:	697b      	ldr	r3, [r7, #20]
  405024:	881a      	ldrh	r2, [r3, #0]
  405026:	8a7b      	ldrh	r3, [r7, #18]
  405028:	1ad3      	subs	r3, r2, r3
  40502a:	b29b      	uxth	r3, r3
  40502c:	3b08      	subs	r3, #8
  40502e:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  405030:	887a      	ldrh	r2, [r7, #2]
  405032:	8a3b      	ldrh	r3, [r7, #16]
  405034:	429a      	cmp	r2, r3
  405036:	d901      	bls.n	40503c <mem_trim+0x70>
    /* not supported */
    return NULL;
  405038:	2300      	movs	r3, #0
  40503a:	e074      	b.n	405126 <mem_trim+0x15a>
  }
  if (newsize == size) {
  40503c:	887a      	ldrh	r2, [r7, #2]
  40503e:	8a3b      	ldrh	r3, [r7, #16]
  405040:	429a      	cmp	r2, r3
  405042:	d101      	bne.n	405048 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
  405044:	687b      	ldr	r3, [r7, #4]
  405046:	e06e      	b.n	405126 <mem_trim+0x15a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  405048:	4b3a      	ldr	r3, [pc, #232]	; (405134 <mem_trim+0x168>)
  40504a:	681b      	ldr	r3, [r3, #0]
  40504c:	697a      	ldr	r2, [r7, #20]
  40504e:	8812      	ldrh	r2, [r2, #0]
  405050:	4413      	add	r3, r2
  405052:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
  405054:	68fb      	ldr	r3, [r7, #12]
  405056:	791b      	ldrb	r3, [r3, #4]
  405058:	2b00      	cmp	r3, #0
  40505a:	d131      	bne.n	4050c0 <mem_trim+0xf4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  40505c:	68fb      	ldr	r3, [r7, #12]
  40505e:	881b      	ldrh	r3, [r3, #0]
  405060:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  405062:	8a7a      	ldrh	r2, [r7, #18]
  405064:	887b      	ldrh	r3, [r7, #2]
  405066:	4413      	add	r3, r2
  405068:	b29b      	uxth	r3, r3
  40506a:	3308      	adds	r3, #8
  40506c:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
  40506e:	4b33      	ldr	r3, [pc, #204]	; (40513c <mem_trim+0x170>)
  405070:	681a      	ldr	r2, [r3, #0]
  405072:	68fb      	ldr	r3, [r7, #12]
  405074:	429a      	cmp	r2, r3
  405076:	d105      	bne.n	405084 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
  405078:	4b2e      	ldr	r3, [pc, #184]	; (405134 <mem_trim+0x168>)
  40507a:	681a      	ldr	r2, [r3, #0]
  40507c:	893b      	ldrh	r3, [r7, #8]
  40507e:	4413      	add	r3, r2
  405080:	4a2e      	ldr	r2, [pc, #184]	; (40513c <mem_trim+0x170>)
  405082:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  405084:	4b2b      	ldr	r3, [pc, #172]	; (405134 <mem_trim+0x168>)
  405086:	681a      	ldr	r2, [r3, #0]
  405088:	893b      	ldrh	r3, [r7, #8]
  40508a:	4413      	add	r3, r2
  40508c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
  40508e:	68fb      	ldr	r3, [r7, #12]
  405090:	2200      	movs	r2, #0
  405092:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
  405094:	68fb      	ldr	r3, [r7, #12]
  405096:	897a      	ldrh	r2, [r7, #10]
  405098:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
  40509a:	68fb      	ldr	r3, [r7, #12]
  40509c:	8a7a      	ldrh	r2, [r7, #18]
  40509e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
  4050a0:	697b      	ldr	r3, [r7, #20]
  4050a2:	893a      	ldrh	r2, [r7, #8]
  4050a4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  4050a6:	68fb      	ldr	r3, [r7, #12]
  4050a8:	881b      	ldrh	r3, [r3, #0]
  4050aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4050ae:	d039      	beq.n	405124 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  4050b0:	4b20      	ldr	r3, [pc, #128]	; (405134 <mem_trim+0x168>)
  4050b2:	681b      	ldr	r3, [r3, #0]
  4050b4:	68fa      	ldr	r2, [r7, #12]
  4050b6:	8812      	ldrh	r2, [r2, #0]
  4050b8:	4413      	add	r3, r2
  4050ba:	893a      	ldrh	r2, [r7, #8]
  4050bc:	805a      	strh	r2, [r3, #2]
  4050be:	e031      	b.n	405124 <mem_trim+0x158>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  4050c0:	887b      	ldrh	r3, [r7, #2]
  4050c2:	f103 0214 	add.w	r2, r3, #20
  4050c6:	8a3b      	ldrh	r3, [r7, #16]
  4050c8:	429a      	cmp	r2, r3
  4050ca:	d82b      	bhi.n	405124 <mem_trim+0x158>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4050cc:	8a7a      	ldrh	r2, [r7, #18]
  4050ce:	887b      	ldrh	r3, [r7, #2]
  4050d0:	4413      	add	r3, r2
  4050d2:	b29b      	uxth	r3, r3
  4050d4:	3308      	adds	r3, #8
  4050d6:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
  4050d8:	4b16      	ldr	r3, [pc, #88]	; (405134 <mem_trim+0x168>)
  4050da:	681a      	ldr	r2, [r3, #0]
  4050dc:	893b      	ldrh	r3, [r7, #8]
  4050de:	4413      	add	r3, r2
  4050e0:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
  4050e2:	4b16      	ldr	r3, [pc, #88]	; (40513c <mem_trim+0x170>)
  4050e4:	681b      	ldr	r3, [r3, #0]
  4050e6:	68fa      	ldr	r2, [r7, #12]
  4050e8:	429a      	cmp	r2, r3
  4050ea:	d202      	bcs.n	4050f2 <mem_trim+0x126>
      lfree = mem2;
  4050ec:	4a13      	ldr	r2, [pc, #76]	; (40513c <mem_trim+0x170>)
  4050ee:	68fb      	ldr	r3, [r7, #12]
  4050f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
  4050f2:	68fb      	ldr	r3, [r7, #12]
  4050f4:	2200      	movs	r2, #0
  4050f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
  4050f8:	697b      	ldr	r3, [r7, #20]
  4050fa:	881a      	ldrh	r2, [r3, #0]
  4050fc:	68fb      	ldr	r3, [r7, #12]
  4050fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
  405100:	68fb      	ldr	r3, [r7, #12]
  405102:	8a7a      	ldrh	r2, [r7, #18]
  405104:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
  405106:	697b      	ldr	r3, [r7, #20]
  405108:	893a      	ldrh	r2, [r7, #8]
  40510a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  40510c:	68fb      	ldr	r3, [r7, #12]
  40510e:	881b      	ldrh	r3, [r3, #0]
  405110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405114:	d006      	beq.n	405124 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405116:	4b07      	ldr	r3, [pc, #28]	; (405134 <mem_trim+0x168>)
  405118:	681b      	ldr	r3, [r3, #0]
  40511a:	68fa      	ldr	r2, [r7, #12]
  40511c:	8812      	ldrh	r2, [r2, #0]
  40511e:	4413      	add	r3, r2
  405120:	893a      	ldrh	r2, [r7, #8]
  405122:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
  405124:	687b      	ldr	r3, [r7, #4]
}
  405126:	4618      	mov	r0, r3
  405128:	371c      	adds	r7, #28
  40512a:	46bd      	mov	sp, r7
  40512c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405130:	4770      	bx	lr
  405132:	bf00      	nop
  405134:	20400544 	.word	0x20400544
  405138:	20400548 	.word	0x20400548
  40513c:	2040054c 	.word	0x2040054c

00405140 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  405140:	b480      	push	{r7}
  405142:	b089      	sub	sp, #36	; 0x24
  405144:	af00      	add	r7, sp, #0
  405146:	4603      	mov	r3, r0
  405148:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  40514a:	88fb      	ldrh	r3, [r7, #6]
  40514c:	2b00      	cmp	r3, #0
  40514e:	d101      	bne.n	405154 <mem_malloc+0x14>
    return NULL;
  405150:	2300      	movs	r3, #0
  405152:	e08c      	b.n	40526e <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  405154:	88fb      	ldrh	r3, [r7, #6]
  405156:	3303      	adds	r3, #3
  405158:	b29b      	uxth	r3, r3
  40515a:	f023 0303 	bic.w	r3, r3, #3
  40515e:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
  405160:	88fb      	ldrh	r3, [r7, #6]
  405162:	2b0b      	cmp	r3, #11
  405164:	d801      	bhi.n	40516a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  405166:	230c      	movs	r3, #12
  405168:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
  40516a:	88fb      	ldrh	r3, [r7, #6]
  40516c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405170:	d901      	bls.n	405176 <mem_malloc+0x36>
    return NULL;
  405172:	2300      	movs	r3, #0
  405174:	e07b      	b.n	40526e <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  405176:	4b41      	ldr	r3, [pc, #260]	; (40527c <mem_malloc+0x13c>)
  405178:	681b      	ldr	r3, [r3, #0]
  40517a:	461a      	mov	r2, r3
  40517c:	4b40      	ldr	r3, [pc, #256]	; (405280 <mem_malloc+0x140>)
  40517e:	681b      	ldr	r3, [r3, #0]
  405180:	1ad3      	subs	r3, r2, r3
  405182:	83fb      	strh	r3, [r7, #30]
  405184:	e06c      	b.n	405260 <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
  405186:	4b3e      	ldr	r3, [pc, #248]	; (405280 <mem_malloc+0x140>)
  405188:	681a      	ldr	r2, [r3, #0]
  40518a:	8bfb      	ldrh	r3, [r7, #30]
  40518c:	4413      	add	r3, r2
  40518e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  405190:	697b      	ldr	r3, [r7, #20]
  405192:	791b      	ldrb	r3, [r3, #4]
  405194:	2b00      	cmp	r3, #0
  405196:	d15d      	bne.n	405254 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  405198:	697b      	ldr	r3, [r7, #20]
  40519a:	881b      	ldrh	r3, [r3, #0]
  40519c:	461a      	mov	r2, r3
  40519e:	8bfb      	ldrh	r3, [r7, #30]
  4051a0:	1ad3      	subs	r3, r2, r3
  4051a2:	f1a3 0208 	sub.w	r2, r3, #8
  4051a6:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
  4051a8:	429a      	cmp	r2, r3
  4051aa:	d353      	bcc.n	405254 <mem_malloc+0x114>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  4051ac:	697b      	ldr	r3, [r7, #20]
  4051ae:	881b      	ldrh	r3, [r3, #0]
  4051b0:	461a      	mov	r2, r3
  4051b2:	8bfb      	ldrh	r3, [r7, #30]
  4051b4:	1ad3      	subs	r3, r2, r3
  4051b6:	f1a3 0208 	sub.w	r2, r3, #8
  4051ba:	88fb      	ldrh	r3, [r7, #6]
  4051bc:	3314      	adds	r3, #20
  4051be:	429a      	cmp	r2, r3
  4051c0:	d327      	bcc.n	405212 <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  4051c2:	8bfa      	ldrh	r2, [r7, #30]
  4051c4:	88fb      	ldrh	r3, [r7, #6]
  4051c6:	4413      	add	r3, r2
  4051c8:	b29b      	uxth	r3, r3
  4051ca:	3308      	adds	r3, #8
  4051cc:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
  4051ce:	4b2c      	ldr	r3, [pc, #176]	; (405280 <mem_malloc+0x140>)
  4051d0:	681a      	ldr	r2, [r3, #0]
  4051d2:	8a7b      	ldrh	r3, [r7, #18]
  4051d4:	4413      	add	r3, r2
  4051d6:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
  4051d8:	68fb      	ldr	r3, [r7, #12]
  4051da:	2200      	movs	r2, #0
  4051dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
  4051de:	697b      	ldr	r3, [r7, #20]
  4051e0:	881a      	ldrh	r2, [r3, #0]
  4051e2:	68fb      	ldr	r3, [r7, #12]
  4051e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
  4051e6:	68fb      	ldr	r3, [r7, #12]
  4051e8:	8bfa      	ldrh	r2, [r7, #30]
  4051ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  4051ec:	697b      	ldr	r3, [r7, #20]
  4051ee:	8a7a      	ldrh	r2, [r7, #18]
  4051f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
  4051f2:	697b      	ldr	r3, [r7, #20]
  4051f4:	2201      	movs	r2, #1
  4051f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
  4051f8:	68fb      	ldr	r3, [r7, #12]
  4051fa:	881b      	ldrh	r3, [r3, #0]
  4051fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405200:	d00a      	beq.n	405218 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405202:	4b1f      	ldr	r3, [pc, #124]	; (405280 <mem_malloc+0x140>)
  405204:	681b      	ldr	r3, [r3, #0]
  405206:	68fa      	ldr	r2, [r7, #12]
  405208:	8812      	ldrh	r2, [r2, #0]
  40520a:	4413      	add	r3, r2
  40520c:	8a7a      	ldrh	r2, [r7, #18]
  40520e:	805a      	strh	r2, [r3, #2]
  405210:	e002      	b.n	405218 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  405212:	697b      	ldr	r3, [r7, #20]
  405214:	2201      	movs	r2, #1
  405216:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  405218:	4b18      	ldr	r3, [pc, #96]	; (40527c <mem_malloc+0x13c>)
  40521a:	681b      	ldr	r3, [r3, #0]
  40521c:	697a      	ldr	r2, [r7, #20]
  40521e:	429a      	cmp	r2, r3
  405220:	d115      	bne.n	40524e <mem_malloc+0x10e>
          struct mem *cur = lfree;
  405222:	4b16      	ldr	r3, [pc, #88]	; (40527c <mem_malloc+0x13c>)
  405224:	681b      	ldr	r3, [r3, #0]
  405226:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  405228:	e005      	b.n	405236 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  40522a:	4b15      	ldr	r3, [pc, #84]	; (405280 <mem_malloc+0x140>)
  40522c:	681b      	ldr	r3, [r3, #0]
  40522e:	69ba      	ldr	r2, [r7, #24]
  405230:	8812      	ldrh	r2, [r2, #0]
  405232:	4413      	add	r3, r2
  405234:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
  405236:	69bb      	ldr	r3, [r7, #24]
  405238:	791b      	ldrb	r3, [r3, #4]
  40523a:	2b00      	cmp	r3, #0
  40523c:	d004      	beq.n	405248 <mem_malloc+0x108>
  40523e:	4b11      	ldr	r3, [pc, #68]	; (405284 <mem_malloc+0x144>)
  405240:	681b      	ldr	r3, [r3, #0]
  405242:	69ba      	ldr	r2, [r7, #24]
  405244:	429a      	cmp	r2, r3
  405246:	d1f0      	bne.n	40522a <mem_malloc+0xea>
          }
          lfree = cur;
  405248:	4a0c      	ldr	r2, [pc, #48]	; (40527c <mem_malloc+0x13c>)
  40524a:	69bb      	ldr	r3, [r7, #24]
  40524c:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  40524e:	697b      	ldr	r3, [r7, #20]
  405250:	3308      	adds	r3, #8
  405252:	e00c      	b.n	40526e <mem_malloc+0x12e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  405254:	4b0a      	ldr	r3, [pc, #40]	; (405280 <mem_malloc+0x140>)
  405256:	681a      	ldr	r2, [r3, #0]
  405258:	8bfb      	ldrh	r3, [r7, #30]
  40525a:	4413      	add	r3, r2
  40525c:	881b      	ldrh	r3, [r3, #0]
  40525e:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  405260:	8bfa      	ldrh	r2, [r7, #30]
  405262:	88fb      	ldrh	r3, [r7, #6]
  405264:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  405268:	429a      	cmp	r2, r3
  40526a:	db8c      	blt.n	405186 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  40526c:	2300      	movs	r3, #0
}
  40526e:	4618      	mov	r0, r3
  405270:	3724      	adds	r7, #36	; 0x24
  405272:	46bd      	mov	sp, r7
  405274:	f85d 7b04 	ldr.w	r7, [sp], #4
  405278:	4770      	bx	lr
  40527a:	bf00      	nop
  40527c:	2040054c 	.word	0x2040054c
  405280:	20400544 	.word	0x20400544
  405284:	20400548 	.word	0x20400548

00405288 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  405288:	b480      	push	{r7}
  40528a:	b083      	sub	sp, #12
  40528c:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
  40528e:	2300      	movs	r3, #0
  405290:	807b      	strh	r3, [r7, #2]
  405292:	e002      	b.n	40529a <memp_init+0x12>
  405294:	887b      	ldrh	r3, [r7, #2]
  405296:	3301      	adds	r3, #1
  405298:	807b      	strh	r3, [r7, #2]
  40529a:	887b      	ldrh	r3, [r7, #2]
  40529c:	2b07      	cmp	r3, #7
  40529e:	d9f9      	bls.n	405294 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  4052a0:	4b1c      	ldr	r3, [pc, #112]	; (405314 <memp_init+0x8c>)
  4052a2:	3303      	adds	r3, #3
  4052a4:	f023 0303 	bic.w	r3, r3, #3
  4052a8:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  4052aa:	2300      	movs	r3, #0
  4052ac:	807b      	strh	r3, [r7, #2]
  4052ae:	e027      	b.n	405300 <memp_init+0x78>
    memp_tab[i] = NULL;
  4052b0:	887b      	ldrh	r3, [r7, #2]
  4052b2:	4a19      	ldr	r2, [pc, #100]	; (405318 <memp_init+0x90>)
  4052b4:	2100      	movs	r1, #0
  4052b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  4052ba:	2300      	movs	r3, #0
  4052bc:	803b      	strh	r3, [r7, #0]
  4052be:	e015      	b.n	4052ec <memp_init+0x64>
      memp->next = memp_tab[i];
  4052c0:	887b      	ldrh	r3, [r7, #2]
  4052c2:	4a15      	ldr	r2, [pc, #84]	; (405318 <memp_init+0x90>)
  4052c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  4052c8:	687b      	ldr	r3, [r7, #4]
  4052ca:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
  4052cc:	887b      	ldrh	r3, [r7, #2]
  4052ce:	4912      	ldr	r1, [pc, #72]	; (405318 <memp_init+0x90>)
  4052d0:	687a      	ldr	r2, [r7, #4]
  4052d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  4052d6:	887b      	ldrh	r3, [r7, #2]
  4052d8:	4a10      	ldr	r2, [pc, #64]	; (40531c <memp_init+0x94>)
  4052da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  4052de:	461a      	mov	r2, r3
  4052e0:	687b      	ldr	r3, [r7, #4]
  4052e2:	4413      	add	r3, r2
  4052e4:	607b      	str	r3, [r7, #4]
    for (j = 0; j < memp_num[i]; ++j) {
  4052e6:	883b      	ldrh	r3, [r7, #0]
  4052e8:	3301      	adds	r3, #1
  4052ea:	803b      	strh	r3, [r7, #0]
  4052ec:	887b      	ldrh	r3, [r7, #2]
  4052ee:	4a0c      	ldr	r2, [pc, #48]	; (405320 <memp_init+0x98>)
  4052f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  4052f4:	883a      	ldrh	r2, [r7, #0]
  4052f6:	429a      	cmp	r2, r3
  4052f8:	d3e2      	bcc.n	4052c0 <memp_init+0x38>
  for (i = 0; i < MEMP_MAX; ++i) {
  4052fa:	887b      	ldrh	r3, [r7, #2]
  4052fc:	3301      	adds	r3, #1
  4052fe:	807b      	strh	r3, [r7, #2]
  405300:	887b      	ldrh	r3, [r7, #2]
  405302:	2b07      	cmp	r3, #7
  405304:	d9d4      	bls.n	4052b0 <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  405306:	bf00      	nop
  405308:	370c      	adds	r7, #12
  40530a:	46bd      	mov	sp, r7
  40530c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405310:	4770      	bx	lr
  405312:	bf00      	nop
  405314:	20400570 	.word	0x20400570
  405318:	20400550 	.word	0x20400550
  40531c:	0040cdc4 	.word	0x0040cdc4
  405320:	0040cdd4 	.word	0x0040cdd4

00405324 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  405324:	b480      	push	{r7}
  405326:	b085      	sub	sp, #20
  405328:	af00      	add	r7, sp, #0
  40532a:	4603      	mov	r3, r0
  40532c:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  40532e:	79fb      	ldrb	r3, [r7, #7]
  405330:	2b07      	cmp	r3, #7
  405332:	d900      	bls.n	405336 <memp_malloc+0x12>
  405334:	e7fe      	b.n	405334 <memp_malloc+0x10>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  405336:	79fb      	ldrb	r3, [r7, #7]
  405338:	4a09      	ldr	r2, [pc, #36]	; (405360 <memp_malloc+0x3c>)
  40533a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40533e:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
  405340:	68fb      	ldr	r3, [r7, #12]
  405342:	2b00      	cmp	r3, #0
  405344:	d005      	beq.n	405352 <memp_malloc+0x2e>
    memp_tab[type] = memp->next;
  405346:	79fb      	ldrb	r3, [r7, #7]
  405348:	68fa      	ldr	r2, [r7, #12]
  40534a:	6812      	ldr	r2, [r2, #0]
  40534c:	4904      	ldr	r1, [pc, #16]	; (405360 <memp_malloc+0x3c>)
  40534e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
  405352:	68fb      	ldr	r3, [r7, #12]
}
  405354:	4618      	mov	r0, r3
  405356:	3714      	adds	r7, #20
  405358:	46bd      	mov	sp, r7
  40535a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40535e:	4770      	bx	lr
  405360:	20400550 	.word	0x20400550

00405364 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  405364:	b480      	push	{r7}
  405366:	b085      	sub	sp, #20
  405368:	af00      	add	r7, sp, #0
  40536a:	4603      	mov	r3, r0
  40536c:	6039      	str	r1, [r7, #0]
  40536e:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  405370:	683b      	ldr	r3, [r7, #0]
  405372:	2b00      	cmp	r3, #0
  405374:	d00d      	beq.n	405392 <memp_free+0x2e>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  405376:	683b      	ldr	r3, [r7, #0]
  405378:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  40537a:	79fb      	ldrb	r3, [r7, #7]
  40537c:	4a08      	ldr	r2, [pc, #32]	; (4053a0 <memp_free+0x3c>)
  40537e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405382:	68fb      	ldr	r3, [r7, #12]
  405384:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
  405386:	79fb      	ldrb	r3, [r7, #7]
  405388:	4905      	ldr	r1, [pc, #20]	; (4053a0 <memp_free+0x3c>)
  40538a:	68fa      	ldr	r2, [r7, #12]
  40538c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405390:	e000      	b.n	405394 <memp_free+0x30>
    return;
  405392:	bf00      	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
  405394:	3714      	adds	r7, #20
  405396:	46bd      	mov	sp, r7
  405398:	f85d 7b04 	ldr.w	r7, [sp], #4
  40539c:	4770      	bx	lr
  40539e:	bf00      	nop
  4053a0:	20400550 	.word	0x20400550

004053a4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  4053a4:	b480      	push	{r7}
  4053a6:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  4053a8:	bf00      	nop
  4053aa:	46bd      	mov	sp, r7
  4053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053b0:	4770      	bx	lr
	...

004053b4 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
  4053b4:	b590      	push	{r4, r7, lr}
  4053b6:	b085      	sub	sp, #20
  4053b8:	af00      	add	r7, sp, #0
  4053ba:	60f8      	str	r0, [r7, #12]
  4053bc:	60b9      	str	r1, [r7, #8]
  4053be:	607a      	str	r2, [r7, #4]
  4053c0:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  4053c2:	68fb      	ldr	r3, [r7, #12]
  4053c4:	2200      	movs	r2, #0
  4053c6:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
  4053c8:	68fb      	ldr	r3, [r7, #12]
  4053ca:	2200      	movs	r2, #0
  4053cc:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
  4053ce:	68fb      	ldr	r3, [r7, #12]
  4053d0:	2200      	movs	r2, #0
  4053d2:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
  4053d4:	68fb      	ldr	r3, [r7, #12]
  4053d6:	2200      	movs	r2, #0
  4053d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
  4053dc:	68fb      	ldr	r3, [r7, #12]
  4053de:	2200      	movs	r2, #0
  4053e0:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  4053e2:	68fb      	ldr	r3, [r7, #12]
  4053e4:	6a3a      	ldr	r2, [r7, #32]
  4053e6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
  4053e8:	4b12      	ldr	r3, [pc, #72]	; (405434 <netif_add+0x80>)
  4053ea:	781b      	ldrb	r3, [r3, #0]
  4053ec:	1c5a      	adds	r2, r3, #1
  4053ee:	b2d1      	uxtb	r1, r2
  4053f0:	4a10      	ldr	r2, [pc, #64]	; (405434 <netif_add+0x80>)
  4053f2:	7011      	strb	r1, [r2, #0]
  4053f4:	68fa      	ldr	r2, [r7, #12]
  4053f6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  netif->input = input;
  4053fa:	68fb      	ldr	r3, [r7, #12]
  4053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4053fe:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  405400:	683b      	ldr	r3, [r7, #0]
  405402:	687a      	ldr	r2, [r7, #4]
  405404:	68b9      	ldr	r1, [r7, #8]
  405406:	68f8      	ldr	r0, [r7, #12]
  405408:	4c0b      	ldr	r4, [pc, #44]	; (405438 <netif_add+0x84>)
  40540a:	47a0      	blx	r4

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  40540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40540e:	68f8      	ldr	r0, [r7, #12]
  405410:	4798      	blx	r3
  405412:	4603      	mov	r3, r0
  405414:	2b00      	cmp	r3, #0
  405416:	d001      	beq.n	40541c <netif_add+0x68>
    return NULL;
  405418:	2300      	movs	r3, #0
  40541a:	e007      	b.n	40542c <netif_add+0x78>
  }

  /* add this netif to the list */
  netif->next = netif_list;
  40541c:	4b07      	ldr	r3, [pc, #28]	; (40543c <netif_add+0x88>)
  40541e:	681a      	ldr	r2, [r3, #0]
  405420:	68fb      	ldr	r3, [r7, #12]
  405422:	601a      	str	r2, [r3, #0]
  netif_list = netif;
  405424:	4a05      	ldr	r2, [pc, #20]	; (40543c <netif_add+0x88>)
  405426:	68fb      	ldr	r3, [r7, #12]
  405428:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  40542a:	68fb      	ldr	r3, [r7, #12]
}
  40542c:	4618      	mov	r0, r3
  40542e:	3714      	adds	r7, #20
  405430:	46bd      	mov	sp, r7
  405432:	bd90      	pop	{r4, r7, pc}
  405434:	2040204f 	.word	0x2040204f
  405438:	00405441 	.word	0x00405441
  40543c:	204043d8 	.word	0x204043d8

00405440 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
  405440:	b580      	push	{r7, lr}
  405442:	b084      	sub	sp, #16
  405444:	af00      	add	r7, sp, #0
  405446:	60f8      	str	r0, [r7, #12]
  405448:	60b9      	str	r1, [r7, #8]
  40544a:	607a      	str	r2, [r7, #4]
  40544c:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
  40544e:	68b9      	ldr	r1, [r7, #8]
  405450:	68f8      	ldr	r0, [r7, #12]
  405452:	4b07      	ldr	r3, [pc, #28]	; (405470 <netif_set_addr+0x30>)
  405454:	4798      	blx	r3
  netif_set_netmask(netif, netmask);
  405456:	6879      	ldr	r1, [r7, #4]
  405458:	68f8      	ldr	r0, [r7, #12]
  40545a:	4b06      	ldr	r3, [pc, #24]	; (405474 <netif_set_addr+0x34>)
  40545c:	4798      	blx	r3
  netif_set_gw(netif, gw);
  40545e:	6839      	ldr	r1, [r7, #0]
  405460:	68f8      	ldr	r0, [r7, #12]
  405462:	4b05      	ldr	r3, [pc, #20]	; (405478 <netif_set_addr+0x38>)
  405464:	4798      	blx	r3
}
  405466:	bf00      	nop
  405468:	3710      	adds	r7, #16
  40546a:	46bd      	mov	sp, r7
  40546c:	bd80      	pop	{r7, pc}
  40546e:	bf00      	nop
  405470:	0040547d 	.word	0x0040547d
  405474:	00405559 	.word	0x00405559
  405478:	00405531 	.word	0x00405531

0040547c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  40547c:	b580      	push	{r7, lr}
  40547e:	b086      	sub	sp, #24
  405480:	af00      	add	r7, sp, #0
  405482:	6078      	str	r0, [r7, #4]
  405484:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  405486:	683b      	ldr	r3, [r7, #0]
  405488:	2b00      	cmp	r3, #0
  40548a:	d03e      	beq.n	40550a <netif_set_ipaddr+0x8e>
  40548c:	683b      	ldr	r3, [r7, #0]
  40548e:	681a      	ldr	r2, [r3, #0]
  405490:	687b      	ldr	r3, [r7, #4]
  405492:	685b      	ldr	r3, [r3, #4]
  405494:	429a      	cmp	r2, r3
  405496:	d038      	beq.n	40550a <netif_set_ipaddr+0x8e>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  405498:	4b22      	ldr	r3, [pc, #136]	; (405524 <netif_set_ipaddr+0xa8>)
  40549a:	681b      	ldr	r3, [r3, #0]
  40549c:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
  40549e:	e011      	b.n	4054c4 <netif_set_ipaddr+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  4054a0:	697b      	ldr	r3, [r7, #20]
  4054a2:	681a      	ldr	r2, [r3, #0]
  4054a4:	687b      	ldr	r3, [r7, #4]
  4054a6:	685b      	ldr	r3, [r3, #4]
  4054a8:	429a      	cmp	r2, r3
  4054aa:	d108      	bne.n	4054be <netif_set_ipaddr+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  4054ac:	697b      	ldr	r3, [r7, #20]
  4054ae:	68db      	ldr	r3, [r3, #12]
  4054b0:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  4054b2:	6978      	ldr	r0, [r7, #20]
  4054b4:	4b1c      	ldr	r3, [pc, #112]	; (405528 <netif_set_ipaddr+0xac>)
  4054b6:	4798      	blx	r3
        pcb = next;
  4054b8:	68fb      	ldr	r3, [r7, #12]
  4054ba:	617b      	str	r3, [r7, #20]
  4054bc:	e002      	b.n	4054c4 <netif_set_ipaddr+0x48>
      } else {
        pcb = pcb->next;
  4054be:	697b      	ldr	r3, [r7, #20]
  4054c0:	68db      	ldr	r3, [r3, #12]
  4054c2:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
  4054c4:	697b      	ldr	r3, [r7, #20]
  4054c6:	2b00      	cmp	r3, #0
  4054c8:	d1ea      	bne.n	4054a0 <netif_set_ipaddr+0x24>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4054ca:	4b18      	ldr	r3, [pc, #96]	; (40552c <netif_set_ipaddr+0xb0>)
  4054cc:	681b      	ldr	r3, [r3, #0]
  4054ce:	613b      	str	r3, [r7, #16]
  4054d0:	e018      	b.n	405504 <netif_set_ipaddr+0x88>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  4054d2:	693b      	ldr	r3, [r7, #16]
  4054d4:	2b00      	cmp	r3, #0
  4054d6:	d012      	beq.n	4054fe <netif_set_ipaddr+0x82>
  4054d8:	693b      	ldr	r3, [r7, #16]
  4054da:	681b      	ldr	r3, [r3, #0]
  4054dc:	2b00      	cmp	r3, #0
  4054de:	d00e      	beq.n	4054fe <netif_set_ipaddr+0x82>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
  4054e0:	693b      	ldr	r3, [r7, #16]
  4054e2:	681a      	ldr	r2, [r3, #0]
  4054e4:	687b      	ldr	r3, [r7, #4]
  4054e6:	685b      	ldr	r3, [r3, #4]
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  4054e8:	429a      	cmp	r2, r3
  4054ea:	d108      	bne.n	4054fe <netif_set_ipaddr+0x82>
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  4054ec:	683b      	ldr	r3, [r7, #0]
  4054ee:	2b00      	cmp	r3, #0
  4054f0:	d002      	beq.n	4054f8 <netif_set_ipaddr+0x7c>
  4054f2:	683b      	ldr	r3, [r7, #0]
  4054f4:	681b      	ldr	r3, [r3, #0]
  4054f6:	e000      	b.n	4054fa <netif_set_ipaddr+0x7e>
  4054f8:	2300      	movs	r3, #0
  4054fa:	693a      	ldr	r2, [r7, #16]
  4054fc:	6013      	str	r3, [r2, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4054fe:	693b      	ldr	r3, [r7, #16]
  405500:	68db      	ldr	r3, [r3, #12]
  405502:	613b      	str	r3, [r7, #16]
  405504:	693b      	ldr	r3, [r7, #16]
  405506:	2b00      	cmp	r3, #0
  405508:	d1e3      	bne.n	4054d2 <netif_set_ipaddr+0x56>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  40550a:	683b      	ldr	r3, [r7, #0]
  40550c:	2b00      	cmp	r3, #0
  40550e:	d002      	beq.n	405516 <netif_set_ipaddr+0x9a>
  405510:	683b      	ldr	r3, [r7, #0]
  405512:	681b      	ldr	r3, [r3, #0]
  405514:	e000      	b.n	405518 <netif_set_ipaddr+0x9c>
  405516:	2300      	movs	r3, #0
  405518:	687a      	ldr	r2, [r7, #4]
  40551a:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  40551c:	bf00      	nop
  40551e:	3718      	adds	r7, #24
  405520:	46bd      	mov	sp, r7
  405522:	bd80      	pop	{r7, pc}
  405524:	204043e8 	.word	0x204043e8
  405528:	00406105 	.word	0x00406105
  40552c:	204043f0 	.word	0x204043f0

00405530 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  405530:	b480      	push	{r7}
  405532:	b083      	sub	sp, #12
  405534:	af00      	add	r7, sp, #0
  405536:	6078      	str	r0, [r7, #4]
  405538:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
  40553a:	683b      	ldr	r3, [r7, #0]
  40553c:	2b00      	cmp	r3, #0
  40553e:	d002      	beq.n	405546 <netif_set_gw+0x16>
  405540:	683b      	ldr	r3, [r7, #0]
  405542:	681b      	ldr	r3, [r3, #0]
  405544:	e000      	b.n	405548 <netif_set_gw+0x18>
  405546:	2300      	movs	r3, #0
  405548:	687a      	ldr	r2, [r7, #4]
  40554a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
  40554c:	bf00      	nop
  40554e:	370c      	adds	r7, #12
  405550:	46bd      	mov	sp, r7
  405552:	f85d 7b04 	ldr.w	r7, [sp], #4
  405556:	4770      	bx	lr

00405558 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  405558:	b480      	push	{r7}
  40555a:	b083      	sub	sp, #12
  40555c:	af00      	add	r7, sp, #0
  40555e:	6078      	str	r0, [r7, #4]
  405560:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  405562:	683b      	ldr	r3, [r7, #0]
  405564:	2b00      	cmp	r3, #0
  405566:	d002      	beq.n	40556e <netif_set_netmask+0x16>
  405568:	683b      	ldr	r3, [r7, #0]
  40556a:	681b      	ldr	r3, [r3, #0]
  40556c:	e000      	b.n	405570 <netif_set_netmask+0x18>
  40556e:	2300      	movs	r3, #0
  405570:	687a      	ldr	r2, [r7, #4]
  405572:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
  405574:	bf00      	nop
  405576:	370c      	adds	r7, #12
  405578:	46bd      	mov	sp, r7
  40557a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40557e:	4770      	bx	lr

00405580 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  405580:	b480      	push	{r7}
  405582:	b083      	sub	sp, #12
  405584:	af00      	add	r7, sp, #0
  405586:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  405588:	4a04      	ldr	r2, [pc, #16]	; (40559c <netif_set_default+0x1c>)
  40558a:	687b      	ldr	r3, [r7, #4]
  40558c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  40558e:	bf00      	nop
  405590:	370c      	adds	r7, #12
  405592:	46bd      	mov	sp, r7
  405594:	f85d 7b04 	ldr.w	r7, [sp], #4
  405598:	4770      	bx	lr
  40559a:	bf00      	nop
  40559c:	204043dc 	.word	0x204043dc

004055a0 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  4055a0:	b580      	push	{r7, lr}
  4055a2:	b082      	sub	sp, #8
  4055a4:	af00      	add	r7, sp, #0
  4055a6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  4055a8:	687b      	ldr	r3, [r7, #4]
  4055aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4055ae:	f003 0301 	and.w	r3, r3, #1
  4055b2:	2b00      	cmp	r3, #0
  4055b4:	d11c      	bne.n	4055f0 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
  4055b6:	687b      	ldr	r3, [r7, #4]
  4055b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4055bc:	f043 0301 	orr.w	r3, r3, #1
  4055c0:	b2da      	uxtb	r2, r3
  4055c2:	687b      	ldr	r3, [r7, #4]
  4055c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  4055c8:	687b      	ldr	r3, [r7, #4]
  4055ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4055ce:	f003 0310 	and.w	r3, r3, #16
  4055d2:	2b00      	cmp	r3, #0
  4055d4:	d00c      	beq.n	4055f0 <netif_set_up+0x50>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  4055d6:	687b      	ldr	r3, [r7, #4]
  4055d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4055dc:	f003 0320 	and.w	r3, r3, #32
  4055e0:	2b00      	cmp	r3, #0
  4055e2:	d005      	beq.n	4055f0 <netif_set_up+0x50>
        etharp_gratuitous(netif);
  4055e4:	687b      	ldr	r3, [r7, #4]
  4055e6:	3304      	adds	r3, #4
  4055e8:	4619      	mov	r1, r3
  4055ea:	6878      	ldr	r0, [r7, #4]
  4055ec:	4b02      	ldr	r3, [pc, #8]	; (4055f8 <netif_set_up+0x58>)
  4055ee:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  4055f0:	bf00      	nop
  4055f2:	3708      	adds	r7, #8
  4055f4:	46bd      	mov	sp, r7
  4055f6:	bd80      	pop	{r7, pc}
  4055f8:	0040b61d 	.word	0x0040b61d

004055fc <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  4055fc:	b580      	push	{r7, lr}
  4055fe:	b082      	sub	sp, #8
  405600:	af00      	add	r7, sp, #0
  405602:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
  405604:	687b      	ldr	r3, [r7, #4]
  405606:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40560a:	f003 0301 	and.w	r3, r3, #1
  40560e:	2b00      	cmp	r3, #0
  405610:	d012      	beq.n	405638 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
  405612:	687b      	ldr	r3, [r7, #4]
  405614:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  405618:	f023 0301 	bic.w	r3, r3, #1
  40561c:	b2da      	uxtb	r2, r3
  40561e:	687b      	ldr	r3, [r7, #4]
  405620:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  405624:	687b      	ldr	r3, [r7, #4]
  405626:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40562a:	f003 0320 	and.w	r3, r3, #32
  40562e:	2b00      	cmp	r3, #0
  405630:	d002      	beq.n	405638 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
  405632:	6878      	ldr	r0, [r7, #4]
  405634:	4b02      	ldr	r3, [pc, #8]	; (405640 <netif_set_down+0x44>)
  405636:	4798      	blx	r3
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
  405638:	bf00      	nop
  40563a:	3708      	adds	r7, #8
  40563c:	46bd      	mov	sp, r7
  40563e:	bd80      	pop	{r7, pc}
  405640:	0040aedd 	.word	0x0040aedd

00405644 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  405644:	b480      	push	{r7}
  405646:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  405648:	4b03      	ldr	r3, [pc, #12]	; (405658 <pbuf_pool_is_empty+0x14>)
  40564a:	2201      	movs	r2, #1
  40564c:	701a      	strb	r2, [r3, #0]
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  40564e:	bf00      	nop
  405650:	46bd      	mov	sp, r7
  405652:	f85d 7b04 	ldr.w	r7, [sp], #4
  405656:	4770      	bx	lr
  405658:	204043e0 	.word	0x204043e0

0040565c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  40565c:	b580      	push	{r7, lr}
  40565e:	b088      	sub	sp, #32
  405660:	af00      	add	r7, sp, #0
  405662:	4603      	mov	r3, r0
  405664:	71fb      	strb	r3, [r7, #7]
  405666:	460b      	mov	r3, r1
  405668:	80bb      	strh	r3, [r7, #4]
  40566a:	4613      	mov	r3, r2
  40566c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  40566e:	79fb      	ldrb	r3, [r7, #7]
  405670:	2b03      	cmp	r3, #3
  405672:	d817      	bhi.n	4056a4 <pbuf_alloc+0x48>
  405674:	a201      	add	r2, pc, #4	; (adr r2, 40567c <pbuf_alloc+0x20>)
  405676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40567a:	bf00      	nop
  40567c:	0040568d 	.word	0x0040568d
  405680:	00405693 	.word	0x00405693
  405684:	00405699 	.word	0x00405699
  405688:	0040569f 	.word	0x0040569f
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  40568c:	2336      	movs	r3, #54	; 0x36
  40568e:	82fb      	strh	r3, [r7, #22]
    break;
  405690:	e00a      	b.n	4056a8 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  405692:	2322      	movs	r3, #34	; 0x22
  405694:	82fb      	strh	r3, [r7, #22]
    break;
  405696:	e007      	b.n	4056a8 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
  405698:	230e      	movs	r3, #14
  40569a:	82fb      	strh	r3, [r7, #22]
    break;
  40569c:	e004      	b.n	4056a8 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
  40569e:	2300      	movs	r3, #0
  4056a0:	82fb      	strh	r3, [r7, #22]
    break;
  4056a2:	e001      	b.n	4056a8 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  4056a4:	2300      	movs	r3, #0
  4056a6:	e0d3      	b.n	405850 <pbuf_alloc+0x1f4>
  }

  switch (type) {
  4056a8:	79bb      	ldrb	r3, [r7, #6]
  4056aa:	2b03      	cmp	r3, #3
  4056ac:	f200 80c7 	bhi.w	40583e <pbuf_alloc+0x1e2>
  4056b0:	a201      	add	r2, pc, #4	; (adr r2, 4056b8 <pbuf_alloc+0x5c>)
  4056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4056b6:	bf00      	nop
  4056b8:	004057ad 	.word	0x004057ad
  4056bc:	0040580b 	.word	0x0040580b
  4056c0:	0040580b 	.word	0x0040580b
  4056c4:	004056c9 	.word	0x004056c9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4056c8:	2007      	movs	r0, #7
  4056ca:	4b63      	ldr	r3, [pc, #396]	; (405858 <pbuf_alloc+0x1fc>)
  4056cc:	4798      	blx	r3
  4056ce:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  4056d0:	69fb      	ldr	r3, [r7, #28]
  4056d2:	2b00      	cmp	r3, #0
  4056d4:	d103      	bne.n	4056de <pbuf_alloc+0x82>
      PBUF_POOL_IS_EMPTY();
  4056d6:	4b61      	ldr	r3, [pc, #388]	; (40585c <pbuf_alloc+0x200>)
  4056d8:	4798      	blx	r3
      return NULL;
  4056da:	2300      	movs	r3, #0
  4056dc:	e0b8      	b.n	405850 <pbuf_alloc+0x1f4>
    }
    p->type = type;
  4056de:	69fb      	ldr	r3, [r7, #28]
  4056e0:	79ba      	ldrb	r2, [r7, #6]
  4056e2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
  4056e4:	69fb      	ldr	r3, [r7, #28]
  4056e6:	2200      	movs	r2, #0
  4056e8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  4056ea:	8afb      	ldrh	r3, [r7, #22]
  4056ec:	3310      	adds	r3, #16
  4056ee:	69fa      	ldr	r2, [r7, #28]
  4056f0:	4413      	add	r3, r2
  4056f2:	3303      	adds	r3, #3
  4056f4:	f023 0303 	bic.w	r3, r3, #3
  4056f8:	461a      	mov	r2, r3
  4056fa:	69fb      	ldr	r3, [r7, #28]
  4056fc:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  4056fe:	69fb      	ldr	r3, [r7, #28]
  405700:	88ba      	ldrh	r2, [r7, #4]
  405702:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  405704:	8afb      	ldrh	r3, [r7, #22]
  405706:	3303      	adds	r3, #3
  405708:	f023 0303 	bic.w	r3, r3, #3
  40570c:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
  405710:	88bb      	ldrh	r3, [r7, #4]
  405712:	4293      	cmp	r3, r2
  405714:	bfa8      	it	ge
  405716:	4613      	movge	r3, r2
  405718:	b29a      	uxth	r2, r3
  40571a:	69fb      	ldr	r3, [r7, #28]
  40571c:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  40571e:	69fb      	ldr	r3, [r7, #28]
  405720:	2201      	movs	r2, #1
  405722:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  405724:	69fb      	ldr	r3, [r7, #28]
  405726:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  405728:	88bb      	ldrh	r3, [r7, #4]
  40572a:	69fa      	ldr	r2, [r7, #28]
  40572c:	8952      	ldrh	r2, [r2, #10]
  40572e:	1a9b      	subs	r3, r3, r2
  405730:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  405732:	e037      	b.n	4057a4 <pbuf_alloc+0x148>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  405734:	2007      	movs	r0, #7
  405736:	4b48      	ldr	r3, [pc, #288]	; (405858 <pbuf_alloc+0x1fc>)
  405738:	4798      	blx	r3
  40573a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
  40573c:	68fb      	ldr	r3, [r7, #12]
  40573e:	2b00      	cmp	r3, #0
  405740:	d106      	bne.n	405750 <pbuf_alloc+0xf4>
        PBUF_POOL_IS_EMPTY();
  405742:	4b46      	ldr	r3, [pc, #280]	; (40585c <pbuf_alloc+0x200>)
  405744:	4798      	blx	r3
        /* free chain so far allocated */
        pbuf_free(p);
  405746:	69f8      	ldr	r0, [r7, #28]
  405748:	4b45      	ldr	r3, [pc, #276]	; (405860 <pbuf_alloc+0x204>)
  40574a:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
  40574c:	2300      	movs	r3, #0
  40574e:	e07f      	b.n	405850 <pbuf_alloc+0x1f4>
      }
      q->type = type;
  405750:	68fb      	ldr	r3, [r7, #12]
  405752:	79ba      	ldrb	r2, [r7, #6]
  405754:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
  405756:	68fb      	ldr	r3, [r7, #12]
  405758:	2200      	movs	r2, #0
  40575a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
  40575c:	68fb      	ldr	r3, [r7, #12]
  40575e:	2200      	movs	r2, #0
  405760:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  405762:	69bb      	ldr	r3, [r7, #24]
  405764:	68fa      	ldr	r2, [r7, #12]
  405766:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
  405768:	693b      	ldr	r3, [r7, #16]
  40576a:	b29a      	uxth	r2, r3
  40576c:	68fb      	ldr	r3, [r7, #12]
  40576e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  405770:	693b      	ldr	r3, [r7, #16]
  405772:	b29b      	uxth	r3, r3
  405774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  405778:	bf28      	it	cs
  40577a:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  40577e:	b29a      	uxth	r2, r3
  405780:	68fb      	ldr	r3, [r7, #12]
  405782:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  405784:	68fb      	ldr	r3, [r7, #12]
  405786:	f103 0210 	add.w	r2, r3, #16
  40578a:	68fb      	ldr	r3, [r7, #12]
  40578c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  40578e:	68fb      	ldr	r3, [r7, #12]
  405790:	2201      	movs	r2, #1
  405792:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  405794:	68fb      	ldr	r3, [r7, #12]
  405796:	895b      	ldrh	r3, [r3, #10]
  405798:	461a      	mov	r2, r3
  40579a:	693b      	ldr	r3, [r7, #16]
  40579c:	1a9b      	subs	r3, r3, r2
  40579e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
  4057a0:	68fb      	ldr	r3, [r7, #12]
  4057a2:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
  4057a4:	693b      	ldr	r3, [r7, #16]
  4057a6:	2b00      	cmp	r3, #0
  4057a8:	dcc4      	bgt.n	405734 <pbuf_alloc+0xd8>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  4057aa:	e04a      	b.n	405842 <pbuf_alloc+0x1e6>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  4057ac:	8afb      	ldrh	r3, [r7, #22]
  4057ae:	3313      	adds	r3, #19
  4057b0:	b29b      	uxth	r3, r3
  4057b2:	f023 0303 	bic.w	r3, r3, #3
  4057b6:	b29a      	uxth	r2, r3
  4057b8:	88bb      	ldrh	r3, [r7, #4]
  4057ba:	3303      	adds	r3, #3
  4057bc:	b29b      	uxth	r3, r3
  4057be:	f023 0303 	bic.w	r3, r3, #3
  4057c2:	b29b      	uxth	r3, r3
  4057c4:	4413      	add	r3, r2
  4057c6:	b29b      	uxth	r3, r3
  4057c8:	4618      	mov	r0, r3
  4057ca:	4b26      	ldr	r3, [pc, #152]	; (405864 <pbuf_alloc+0x208>)
  4057cc:	4798      	blx	r3
  4057ce:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  4057d0:	69fb      	ldr	r3, [r7, #28]
  4057d2:	2b00      	cmp	r3, #0
  4057d4:	d101      	bne.n	4057da <pbuf_alloc+0x17e>
      return NULL;
  4057d6:	2300      	movs	r3, #0
  4057d8:	e03a      	b.n	405850 <pbuf_alloc+0x1f4>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  4057da:	8afb      	ldrh	r3, [r7, #22]
  4057dc:	3310      	adds	r3, #16
  4057de:	69fa      	ldr	r2, [r7, #28]
  4057e0:	4413      	add	r3, r2
  4057e2:	3303      	adds	r3, #3
  4057e4:	f023 0303 	bic.w	r3, r3, #3
  4057e8:	461a      	mov	r2, r3
  4057ea:	69fb      	ldr	r3, [r7, #28]
  4057ec:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  4057ee:	69fb      	ldr	r3, [r7, #28]
  4057f0:	88ba      	ldrh	r2, [r7, #4]
  4057f2:	811a      	strh	r2, [r3, #8]
  4057f4:	69fb      	ldr	r3, [r7, #28]
  4057f6:	891a      	ldrh	r2, [r3, #8]
  4057f8:	69fb      	ldr	r3, [r7, #28]
  4057fa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  4057fc:	69fb      	ldr	r3, [r7, #28]
  4057fe:	2200      	movs	r2, #0
  405800:	601a      	str	r2, [r3, #0]
    p->type = type;
  405802:	69fb      	ldr	r3, [r7, #28]
  405804:	79ba      	ldrb	r2, [r7, #6]
  405806:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  405808:	e01b      	b.n	405842 <pbuf_alloc+0x1e6>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  40580a:	2006      	movs	r0, #6
  40580c:	4b12      	ldr	r3, [pc, #72]	; (405858 <pbuf_alloc+0x1fc>)
  40580e:	4798      	blx	r3
  405810:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  405812:	69fb      	ldr	r3, [r7, #28]
  405814:	2b00      	cmp	r3, #0
  405816:	d101      	bne.n	40581c <pbuf_alloc+0x1c0>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  405818:	2300      	movs	r3, #0
  40581a:	e019      	b.n	405850 <pbuf_alloc+0x1f4>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  40581c:	69fb      	ldr	r3, [r7, #28]
  40581e:	2200      	movs	r2, #0
  405820:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  405822:	69fb      	ldr	r3, [r7, #28]
  405824:	88ba      	ldrh	r2, [r7, #4]
  405826:	811a      	strh	r2, [r3, #8]
  405828:	69fb      	ldr	r3, [r7, #28]
  40582a:	891a      	ldrh	r2, [r3, #8]
  40582c:	69fb      	ldr	r3, [r7, #28]
  40582e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  405830:	69fb      	ldr	r3, [r7, #28]
  405832:	2200      	movs	r2, #0
  405834:	601a      	str	r2, [r3, #0]
    p->type = type;
  405836:	69fb      	ldr	r3, [r7, #28]
  405838:	79ba      	ldrb	r2, [r7, #6]
  40583a:	731a      	strb	r2, [r3, #12]
    break;
  40583c:	e001      	b.n	405842 <pbuf_alloc+0x1e6>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  40583e:	2300      	movs	r3, #0
  405840:	e006      	b.n	405850 <pbuf_alloc+0x1f4>
  }
  /* set reference count */
  p->ref = 1;
  405842:	69fb      	ldr	r3, [r7, #28]
  405844:	2201      	movs	r2, #1
  405846:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  405848:	69fb      	ldr	r3, [r7, #28]
  40584a:	2200      	movs	r2, #0
  40584c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  40584e:	69fb      	ldr	r3, [r7, #28]
}
  405850:	4618      	mov	r0, r3
  405852:	3720      	adds	r7, #32
  405854:	46bd      	mov	sp, r7
  405856:	bd80      	pop	{r7, pc}
  405858:	00405325 	.word	0x00405325
  40585c:	00405645 	.word	0x00405645
  405860:	00405a01 	.word	0x00405a01
  405864:	00405141 	.word	0x00405141

00405868 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  405868:	b580      	push	{r7, lr}
  40586a:	b086      	sub	sp, #24
  40586c:	af00      	add	r7, sp, #0
  40586e:	6078      	str	r0, [r7, #4]
  405870:	460b      	mov	r3, r1
  405872:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  405874:	687b      	ldr	r3, [r7, #4]
  405876:	891b      	ldrh	r3, [r3, #8]
  405878:	887a      	ldrh	r2, [r7, #2]
  40587a:	429a      	cmp	r2, r3
  40587c:	d249      	bcs.n	405912 <pbuf_realloc+0xaa>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  40587e:	887b      	ldrh	r3, [r7, #2]
  405880:	687a      	ldr	r2, [r7, #4]
  405882:	8912      	ldrh	r2, [r2, #8]
  405884:	1a9b      	subs	r3, r3, r2
  405886:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  405888:	887b      	ldrh	r3, [r7, #2]
  40588a:	827b      	strh	r3, [r7, #18]
  q = p;
  40588c:	687b      	ldr	r3, [r7, #4]
  40588e:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  405890:	e00f      	b.n	4058b2 <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  405892:	697b      	ldr	r3, [r7, #20]
  405894:	895b      	ldrh	r3, [r3, #10]
  405896:	8a7a      	ldrh	r2, [r7, #18]
  405898:	1ad3      	subs	r3, r2, r3
  40589a:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
  40589c:	697b      	ldr	r3, [r7, #20]
  40589e:	891a      	ldrh	r2, [r3, #8]
  4058a0:	68fb      	ldr	r3, [r7, #12]
  4058a2:	b29b      	uxth	r3, r3
  4058a4:	4413      	add	r3, r2
  4058a6:	b29a      	uxth	r2, r3
  4058a8:	697b      	ldr	r3, [r7, #20]
  4058aa:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  4058ac:	697b      	ldr	r3, [r7, #20]
  4058ae:	681b      	ldr	r3, [r3, #0]
  4058b0:	617b      	str	r3, [r7, #20]
  while (rem_len > q->len) {
  4058b2:	697b      	ldr	r3, [r7, #20]
  4058b4:	895b      	ldrh	r3, [r3, #10]
  4058b6:	8a7a      	ldrh	r2, [r7, #18]
  4058b8:	429a      	cmp	r2, r3
  4058ba:	d8ea      	bhi.n	405892 <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  4058bc:	697b      	ldr	r3, [r7, #20]
  4058be:	7b1b      	ldrb	r3, [r3, #12]
  4058c0:	2b00      	cmp	r3, #0
  4058c2:	d112      	bne.n	4058ea <pbuf_realloc+0x82>
  4058c4:	697b      	ldr	r3, [r7, #20]
  4058c6:	895b      	ldrh	r3, [r3, #10]
  4058c8:	8a7a      	ldrh	r2, [r7, #18]
  4058ca:	429a      	cmp	r2, r3
  4058cc:	d00d      	beq.n	4058ea <pbuf_realloc+0x82>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  4058ce:	697b      	ldr	r3, [r7, #20]
  4058d0:	685b      	ldr	r3, [r3, #4]
  4058d2:	461a      	mov	r2, r3
  4058d4:	697b      	ldr	r3, [r7, #20]
  4058d6:	1ad3      	subs	r3, r2, r3
  4058d8:	b29a      	uxth	r2, r3
  4058da:	8a7b      	ldrh	r3, [r7, #18]
  4058dc:	4413      	add	r3, r2
  4058de:	b29b      	uxth	r3, r3
  4058e0:	4619      	mov	r1, r3
  4058e2:	6978      	ldr	r0, [r7, #20]
  4058e4:	4b0d      	ldr	r3, [pc, #52]	; (40591c <pbuf_realloc+0xb4>)
  4058e6:	4798      	blx	r3
  4058e8:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  4058ea:	697b      	ldr	r3, [r7, #20]
  4058ec:	8a7a      	ldrh	r2, [r7, #18]
  4058ee:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
  4058f0:	697b      	ldr	r3, [r7, #20]
  4058f2:	895a      	ldrh	r2, [r3, #10]
  4058f4:	697b      	ldr	r3, [r7, #20]
  4058f6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  4058f8:	697b      	ldr	r3, [r7, #20]
  4058fa:	681b      	ldr	r3, [r3, #0]
  4058fc:	2b00      	cmp	r3, #0
  4058fe:	d004      	beq.n	40590a <pbuf_realloc+0xa2>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  405900:	697b      	ldr	r3, [r7, #20]
  405902:	681b      	ldr	r3, [r3, #0]
  405904:	4618      	mov	r0, r3
  405906:	4b06      	ldr	r3, [pc, #24]	; (405920 <pbuf_realloc+0xb8>)
  405908:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
  40590a:	697b      	ldr	r3, [r7, #20]
  40590c:	2200      	movs	r2, #0
  40590e:	601a      	str	r2, [r3, #0]
  405910:	e000      	b.n	405914 <pbuf_realloc+0xac>
    return;
  405912:	bf00      	nop

}
  405914:	3718      	adds	r7, #24
  405916:	46bd      	mov	sp, r7
  405918:	bd80      	pop	{r7, pc}
  40591a:	bf00      	nop
  40591c:	00404fcd 	.word	0x00404fcd
  405920:	00405a01 	.word	0x00405a01

00405924 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  405924:	b480      	push	{r7}
  405926:	b085      	sub	sp, #20
  405928:	af00      	add	r7, sp, #0
  40592a:	6078      	str	r0, [r7, #4]
  40592c:	460b      	mov	r3, r1
  40592e:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  405930:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405934:	2b00      	cmp	r3, #0
  405936:	d002      	beq.n	40593e <pbuf_header+0x1a>
  405938:	687b      	ldr	r3, [r7, #4]
  40593a:	2b00      	cmp	r3, #0
  40593c:	d101      	bne.n	405942 <pbuf_header+0x1e>
    return 0;
  40593e:	2300      	movs	r3, #0
  405940:	e058      	b.n	4059f4 <pbuf_header+0xd0>
  }
 
  if (header_size_increment < 0){
  405942:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405946:	2b00      	cmp	r3, #0
  405948:	da08      	bge.n	40595c <pbuf_header+0x38>
    increment_magnitude = -header_size_increment;
  40594a:	887b      	ldrh	r3, [r7, #2]
  40594c:	425b      	negs	r3, r3
  40594e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  405950:	687b      	ldr	r3, [r7, #4]
  405952:	895b      	ldrh	r3, [r3, #10]
  405954:	89fa      	ldrh	r2, [r7, #14]
  405956:	429a      	cmp	r2, r3
  405958:	d902      	bls.n	405960 <pbuf_header+0x3c>
  40595a:	e7fe      	b.n	40595a <pbuf_header+0x36>
  } else {
    increment_magnitude = header_size_increment;
  40595c:	887b      	ldrh	r3, [r7, #2]
  40595e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  405960:	687b      	ldr	r3, [r7, #4]
  405962:	7b1b      	ldrb	r3, [r3, #12]
  405964:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
  405966:	687b      	ldr	r3, [r7, #4]
  405968:	685b      	ldr	r3, [r3, #4]
  40596a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  40596c:	89bb      	ldrh	r3, [r7, #12]
  40596e:	2b00      	cmp	r3, #0
  405970:	d002      	beq.n	405978 <pbuf_header+0x54>
  405972:	89bb      	ldrh	r3, [r7, #12]
  405974:	2b03      	cmp	r3, #3
  405976:	d112      	bne.n	40599e <pbuf_header+0x7a>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  405978:	687b      	ldr	r3, [r7, #4]
  40597a:	685a      	ldr	r2, [r3, #4]
  40597c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405980:	425b      	negs	r3, r3
  405982:	441a      	add	r2, r3
  405984:	687b      	ldr	r3, [r7, #4]
  405986:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  405988:	687b      	ldr	r3, [r7, #4]
  40598a:	685a      	ldr	r2, [r3, #4]
  40598c:	687b      	ldr	r3, [r7, #4]
  40598e:	3310      	adds	r3, #16
  405990:	429a      	cmp	r2, r3
  405992:	d220      	bcs.n	4059d6 <pbuf_header+0xb2>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
  405994:	687b      	ldr	r3, [r7, #4]
  405996:	68ba      	ldr	r2, [r7, #8]
  405998:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
  40599a:	2301      	movs	r3, #1
  40599c:	e02a      	b.n	4059f4 <pbuf_header+0xd0>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  40599e:	89bb      	ldrh	r3, [r7, #12]
  4059a0:	2b02      	cmp	r3, #2
  4059a2:	d002      	beq.n	4059aa <pbuf_header+0x86>
  4059a4:	89bb      	ldrh	r3, [r7, #12]
  4059a6:	2b01      	cmp	r3, #1
  4059a8:	d113      	bne.n	4059d2 <pbuf_header+0xae>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  4059aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4059ae:	2b00      	cmp	r3, #0
  4059b0:	da0d      	bge.n	4059ce <pbuf_header+0xaa>
  4059b2:	687b      	ldr	r3, [r7, #4]
  4059b4:	895b      	ldrh	r3, [r3, #10]
  4059b6:	89fa      	ldrh	r2, [r7, #14]
  4059b8:	429a      	cmp	r2, r3
  4059ba:	d808      	bhi.n	4059ce <pbuf_header+0xaa>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  4059bc:	687b      	ldr	r3, [r7, #4]
  4059be:	685a      	ldr	r2, [r3, #4]
  4059c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4059c4:	425b      	negs	r3, r3
  4059c6:	441a      	add	r2, r3
  4059c8:	687b      	ldr	r3, [r7, #4]
  4059ca:	605a      	str	r2, [r3, #4]
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  4059cc:	e003      	b.n	4059d6 <pbuf_header+0xb2>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  4059ce:	2301      	movs	r3, #1
  4059d0:	e010      	b.n	4059f4 <pbuf_header+0xd0>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  4059d2:	2301      	movs	r3, #1
  4059d4:	e00e      	b.n	4059f4 <pbuf_header+0xd0>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  4059d6:	687b      	ldr	r3, [r7, #4]
  4059d8:	895a      	ldrh	r2, [r3, #10]
  4059da:	887b      	ldrh	r3, [r7, #2]
  4059dc:	4413      	add	r3, r2
  4059de:	b29a      	uxth	r2, r3
  4059e0:	687b      	ldr	r3, [r7, #4]
  4059e2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  4059e4:	687b      	ldr	r3, [r7, #4]
  4059e6:	891a      	ldrh	r2, [r3, #8]
  4059e8:	887b      	ldrh	r3, [r7, #2]
  4059ea:	4413      	add	r3, r2
  4059ec:	b29a      	uxth	r2, r3
  4059ee:	687b      	ldr	r3, [r7, #4]
  4059f0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  4059f2:	2300      	movs	r3, #0
}
  4059f4:	4618      	mov	r0, r3
  4059f6:	3714      	adds	r7, #20
  4059f8:	46bd      	mov	sp, r7
  4059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4059fe:	4770      	bx	lr

00405a00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  405a00:	b580      	push	{r7, lr}
  405a02:	b086      	sub	sp, #24
  405a04:	af00      	add	r7, sp, #0
  405a06:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  405a08:	687b      	ldr	r3, [r7, #4]
  405a0a:	2b00      	cmp	r3, #0
  405a0c:	d101      	bne.n	405a12 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  405a0e:	2300      	movs	r3, #0
  405a10:	e036      	b.n	405a80 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  405a12:	2300      	movs	r3, #0
  405a14:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  405a16:	e02f      	b.n	405a78 <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  405a18:	687b      	ldr	r3, [r7, #4]
  405a1a:	89db      	ldrh	r3, [r3, #14]
  405a1c:	3b01      	subs	r3, #1
  405a1e:	b29a      	uxth	r2, r3
  405a20:	687b      	ldr	r3, [r7, #4]
  405a22:	81da      	strh	r2, [r3, #14]
  405a24:	687b      	ldr	r3, [r7, #4]
  405a26:	89db      	ldrh	r3, [r3, #14]
  405a28:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  405a2a:	8abb      	ldrh	r3, [r7, #20]
  405a2c:	2b00      	cmp	r3, #0
  405a2e:	d121      	bne.n	405a74 <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  405a30:	687b      	ldr	r3, [r7, #4]
  405a32:	681b      	ldr	r3, [r3, #0]
  405a34:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  405a36:	687b      	ldr	r3, [r7, #4]
  405a38:	7b1b      	ldrb	r3, [r3, #12]
  405a3a:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  405a3c:	89fb      	ldrh	r3, [r7, #14]
  405a3e:	2b03      	cmp	r3, #3
  405a40:	d104      	bne.n	405a4c <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
  405a42:	6879      	ldr	r1, [r7, #4]
  405a44:	2007      	movs	r0, #7
  405a46:	4b10      	ldr	r3, [pc, #64]	; (405a88 <pbuf_free+0x88>)
  405a48:	4798      	blx	r3
  405a4a:	e00d      	b.n	405a68 <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  405a4c:	89fb      	ldrh	r3, [r7, #14]
  405a4e:	2b01      	cmp	r3, #1
  405a50:	d002      	beq.n	405a58 <pbuf_free+0x58>
  405a52:	89fb      	ldrh	r3, [r7, #14]
  405a54:	2b02      	cmp	r3, #2
  405a56:	d104      	bne.n	405a62 <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
  405a58:	6879      	ldr	r1, [r7, #4]
  405a5a:	2006      	movs	r0, #6
  405a5c:	4b0a      	ldr	r3, [pc, #40]	; (405a88 <pbuf_free+0x88>)
  405a5e:	4798      	blx	r3
  405a60:	e002      	b.n	405a68 <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  405a62:	6878      	ldr	r0, [r7, #4]
  405a64:	4b09      	ldr	r3, [pc, #36]	; (405a8c <pbuf_free+0x8c>)
  405a66:	4798      	blx	r3
        }
      }
      count++;
  405a68:	7dfb      	ldrb	r3, [r7, #23]
  405a6a:	3301      	adds	r3, #1
  405a6c:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
  405a6e:	693b      	ldr	r3, [r7, #16]
  405a70:	607b      	str	r3, [r7, #4]
  405a72:	e001      	b.n	405a78 <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  405a74:	2300      	movs	r3, #0
  405a76:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
  405a78:	687b      	ldr	r3, [r7, #4]
  405a7a:	2b00      	cmp	r3, #0
  405a7c:	d1cc      	bne.n	405a18 <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  405a7e:	7dfb      	ldrb	r3, [r7, #23]
}
  405a80:	4618      	mov	r0, r3
  405a82:	3718      	adds	r7, #24
  405a84:	46bd      	mov	sp, r7
  405a86:	bd80      	pop	{r7, pc}
  405a88:	00405365 	.word	0x00405365
  405a8c:	00404f69 	.word	0x00404f69

00405a90 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
  405a90:	b480      	push	{r7}
  405a92:	b085      	sub	sp, #20
  405a94:	af00      	add	r7, sp, #0
  405a96:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
  405a98:	2300      	movs	r3, #0
  405a9a:	73fb      	strb	r3, [r7, #15]
  while (p != NULL) {
  405a9c:	e005      	b.n	405aaa <pbuf_clen+0x1a>
    ++len;
  405a9e:	7bfb      	ldrb	r3, [r7, #15]
  405aa0:	3301      	adds	r3, #1
  405aa2:	73fb      	strb	r3, [r7, #15]
    p = p->next;
  405aa4:	687b      	ldr	r3, [r7, #4]
  405aa6:	681b      	ldr	r3, [r3, #0]
  405aa8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
  405aaa:	687b      	ldr	r3, [r7, #4]
  405aac:	2b00      	cmp	r3, #0
  405aae:	d1f6      	bne.n	405a9e <pbuf_clen+0xe>
  }
  return len;
  405ab0:	7bfb      	ldrb	r3, [r7, #15]
}
  405ab2:	4618      	mov	r0, r3
  405ab4:	3714      	adds	r7, #20
  405ab6:	46bd      	mov	sp, r7
  405ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
  405abc:	4770      	bx	lr

00405abe <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  405abe:	b480      	push	{r7}
  405ac0:	b083      	sub	sp, #12
  405ac2:	af00      	add	r7, sp, #0
  405ac4:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  405ac6:	687b      	ldr	r3, [r7, #4]
  405ac8:	2b00      	cmp	r3, #0
  405aca:	d005      	beq.n	405ad8 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  405acc:	687b      	ldr	r3, [r7, #4]
  405ace:	89db      	ldrh	r3, [r3, #14]
  405ad0:	3301      	adds	r3, #1
  405ad2:	b29a      	uxth	r2, r3
  405ad4:	687b      	ldr	r3, [r7, #4]
  405ad6:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
  405ad8:	bf00      	nop
  405ada:	370c      	adds	r7, #12
  405adc:	46bd      	mov	sp, r7
  405ade:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ae2:	4770      	bx	lr

00405ae4 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  405ae4:	b480      	push	{r7}
  405ae6:	b085      	sub	sp, #20
  405ae8:	af00      	add	r7, sp, #0
  405aea:	6078      	str	r0, [r7, #4]
  405aec:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  405aee:	687b      	ldr	r3, [r7, #4]
  405af0:	2b00      	cmp	r3, #0
  405af2:	d002      	beq.n	405afa <pbuf_cat+0x16>
  405af4:	683b      	ldr	r3, [r7, #0]
  405af6:	2b00      	cmp	r3, #0
  405af8:	d100      	bne.n	405afc <pbuf_cat+0x18>
  405afa:	e7fe      	b.n	405afa <pbuf_cat+0x16>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  405afc:	687b      	ldr	r3, [r7, #4]
  405afe:	60fb      	str	r3, [r7, #12]
  405b00:	e00a      	b.n	405b18 <pbuf_cat+0x34>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  405b02:	68fb      	ldr	r3, [r7, #12]
  405b04:	891a      	ldrh	r2, [r3, #8]
  405b06:	683b      	ldr	r3, [r7, #0]
  405b08:	891b      	ldrh	r3, [r3, #8]
  405b0a:	4413      	add	r3, r2
  405b0c:	b29a      	uxth	r2, r3
  405b0e:	68fb      	ldr	r3, [r7, #12]
  405b10:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  405b12:	68fb      	ldr	r3, [r7, #12]
  405b14:	681b      	ldr	r3, [r3, #0]
  405b16:	60fb      	str	r3, [r7, #12]
  405b18:	68fb      	ldr	r3, [r7, #12]
  405b1a:	681b      	ldr	r3, [r3, #0]
  405b1c:	2b00      	cmp	r3, #0
  405b1e:	d1f0      	bne.n	405b02 <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  405b20:	68fb      	ldr	r3, [r7, #12]
  405b22:	891a      	ldrh	r2, [r3, #8]
  405b24:	683b      	ldr	r3, [r7, #0]
  405b26:	891b      	ldrh	r3, [r3, #8]
  405b28:	4413      	add	r3, r2
  405b2a:	b29a      	uxth	r2, r3
  405b2c:	68fb      	ldr	r3, [r7, #12]
  405b2e:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  405b30:	68fb      	ldr	r3, [r7, #12]
  405b32:	683a      	ldr	r2, [r7, #0]
  405b34:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  405b36:	bf00      	nop
  405b38:	3714      	adds	r7, #20
  405b3a:	46bd      	mov	sp, r7
  405b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b40:	4770      	bx	lr
	...

00405b44 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  405b44:	b580      	push	{r7, lr}
  405b46:	b082      	sub	sp, #8
  405b48:	af00      	add	r7, sp, #0
  405b4a:	6078      	str	r0, [r7, #4]
  405b4c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
  405b4e:	6839      	ldr	r1, [r7, #0]
  405b50:	6878      	ldr	r0, [r7, #4]
  405b52:	4b04      	ldr	r3, [pc, #16]	; (405b64 <pbuf_chain+0x20>)
  405b54:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  405b56:	6838      	ldr	r0, [r7, #0]
  405b58:	4b03      	ldr	r3, [pc, #12]	; (405b68 <pbuf_chain+0x24>)
  405b5a:	4798      	blx	r3
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  405b5c:	bf00      	nop
  405b5e:	3708      	adds	r7, #8
  405b60:	46bd      	mov	sp, r7
  405b62:	bd80      	pop	{r7, pc}
  405b64:	00405ae5 	.word	0x00405ae5
  405b68:	00405abf 	.word	0x00405abf

00405b6c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  405b6c:	b580      	push	{r7, lr}
  405b6e:	b084      	sub	sp, #16
  405b70:	af00      	add	r7, sp, #0
  405b72:	6078      	str	r0, [r7, #4]
  405b74:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
  405b76:	2300      	movs	r3, #0
  405b78:	81fb      	strh	r3, [r7, #14]
  405b7a:	2300      	movs	r3, #0
  405b7c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  405b7e:	687b      	ldr	r3, [r7, #4]
  405b80:	2b00      	cmp	r3, #0
  405b82:	d008      	beq.n	405b96 <pbuf_copy+0x2a>
  405b84:	683b      	ldr	r3, [r7, #0]
  405b86:	2b00      	cmp	r3, #0
  405b88:	d005      	beq.n	405b96 <pbuf_copy+0x2a>
  405b8a:	687b      	ldr	r3, [r7, #4]
  405b8c:	891a      	ldrh	r2, [r3, #8]
  405b8e:	683b      	ldr	r3, [r7, #0]
  405b90:	891b      	ldrh	r3, [r3, #8]
  405b92:	429a      	cmp	r2, r3
  405b94:	d200      	bcs.n	405b98 <pbuf_copy+0x2c>
  405b96:	e7fe      	b.n	405b96 <pbuf_copy+0x2a>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  405b98:	687b      	ldr	r3, [r7, #4]
  405b9a:	895b      	ldrh	r3, [r3, #10]
  405b9c:	461a      	mov	r2, r3
  405b9e:	89fb      	ldrh	r3, [r7, #14]
  405ba0:	1ad2      	subs	r2, r2, r3
  405ba2:	683b      	ldr	r3, [r7, #0]
  405ba4:	895b      	ldrh	r3, [r3, #10]
  405ba6:	4619      	mov	r1, r3
  405ba8:	89bb      	ldrh	r3, [r7, #12]
  405baa:	1acb      	subs	r3, r1, r3
  405bac:	429a      	cmp	r2, r3
  405bae:	db05      	blt.n	405bbc <pbuf_copy+0x50>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  405bb0:	683b      	ldr	r3, [r7, #0]
  405bb2:	895a      	ldrh	r2, [r3, #10]
  405bb4:	89bb      	ldrh	r3, [r7, #12]
  405bb6:	1ad3      	subs	r3, r2, r3
  405bb8:	817b      	strh	r3, [r7, #10]
  405bba:	e004      	b.n	405bc6 <pbuf_copy+0x5a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  405bbc:	687b      	ldr	r3, [r7, #4]
  405bbe:	895a      	ldrh	r2, [r3, #10]
  405bc0:	89fb      	ldrh	r3, [r7, #14]
  405bc2:	1ad3      	subs	r3, r2, r3
  405bc4:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  405bc6:	687b      	ldr	r3, [r7, #4]
  405bc8:	685a      	ldr	r2, [r3, #4]
  405bca:	89fb      	ldrh	r3, [r7, #14]
  405bcc:	18d0      	adds	r0, r2, r3
  405bce:	683b      	ldr	r3, [r7, #0]
  405bd0:	685a      	ldr	r2, [r3, #4]
  405bd2:	89bb      	ldrh	r3, [r7, #12]
  405bd4:	4413      	add	r3, r2
  405bd6:	897a      	ldrh	r2, [r7, #10]
  405bd8:	4619      	mov	r1, r3
  405bda:	4b24      	ldr	r3, [pc, #144]	; (405c6c <pbuf_copy+0x100>)
  405bdc:	4798      	blx	r3
    offset_to += len;
  405bde:	89fa      	ldrh	r2, [r7, #14]
  405be0:	897b      	ldrh	r3, [r7, #10]
  405be2:	4413      	add	r3, r2
  405be4:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
  405be6:	89ba      	ldrh	r2, [r7, #12]
  405be8:	897b      	ldrh	r3, [r7, #10]
  405bea:	4413      	add	r3, r2
  405bec:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
  405bee:	683b      	ldr	r3, [r7, #0]
  405bf0:	895b      	ldrh	r3, [r3, #10]
  405bf2:	89ba      	ldrh	r2, [r7, #12]
  405bf4:	429a      	cmp	r2, r3
  405bf6:	d304      	bcc.n	405c02 <pbuf_copy+0x96>
      /* on to next p_from (if any) */
      offset_from = 0;
  405bf8:	2300      	movs	r3, #0
  405bfa:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
  405bfc:	683b      	ldr	r3, [r7, #0]
  405bfe:	681b      	ldr	r3, [r3, #0]
  405c00:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
  405c02:	687b      	ldr	r3, [r7, #4]
  405c04:	895b      	ldrh	r3, [r3, #10]
  405c06:	89fa      	ldrh	r2, [r7, #14]
  405c08:	429a      	cmp	r2, r3
  405c0a:	d10b      	bne.n	405c24 <pbuf_copy+0xb8>
      /* on to next p_to (if any) */
      offset_to = 0;
  405c0c:	2300      	movs	r3, #0
  405c0e:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
  405c10:	687b      	ldr	r3, [r7, #4]
  405c12:	681b      	ldr	r3, [r3, #0]
  405c14:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  405c16:	687b      	ldr	r3, [r7, #4]
  405c18:	2b00      	cmp	r3, #0
  405c1a:	d103      	bne.n	405c24 <pbuf_copy+0xb8>
  405c1c:	683b      	ldr	r3, [r7, #0]
  405c1e:	2b00      	cmp	r3, #0
  405c20:	d000      	beq.n	405c24 <pbuf_copy+0xb8>
  405c22:	e7fe      	b.n	405c22 <pbuf_copy+0xb6>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  405c24:	683b      	ldr	r3, [r7, #0]
  405c26:	2b00      	cmp	r3, #0
  405c28:	d00a      	beq.n	405c40 <pbuf_copy+0xd4>
  405c2a:	683b      	ldr	r3, [r7, #0]
  405c2c:	895a      	ldrh	r2, [r3, #10]
  405c2e:	683b      	ldr	r3, [r7, #0]
  405c30:	891b      	ldrh	r3, [r3, #8]
  405c32:	429a      	cmp	r2, r3
  405c34:	d104      	bne.n	405c40 <pbuf_copy+0xd4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  405c36:	683b      	ldr	r3, [r7, #0]
  405c38:	681b      	ldr	r3, [r3, #0]
  405c3a:	2b00      	cmp	r3, #0
  405c3c:	d000      	beq.n	405c40 <pbuf_copy+0xd4>
  405c3e:	e7fe      	b.n	405c3e <pbuf_copy+0xd2>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  405c40:	687b      	ldr	r3, [r7, #4]
  405c42:	2b00      	cmp	r3, #0
  405c44:	d00a      	beq.n	405c5c <pbuf_copy+0xf0>
  405c46:	687b      	ldr	r3, [r7, #4]
  405c48:	895a      	ldrh	r2, [r3, #10]
  405c4a:	687b      	ldr	r3, [r7, #4]
  405c4c:	891b      	ldrh	r3, [r3, #8]
  405c4e:	429a      	cmp	r2, r3
  405c50:	d104      	bne.n	405c5c <pbuf_copy+0xf0>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  405c52:	687b      	ldr	r3, [r7, #4]
  405c54:	681b      	ldr	r3, [r3, #0]
  405c56:	2b00      	cmp	r3, #0
  405c58:	d000      	beq.n	405c5c <pbuf_copy+0xf0>
  405c5a:	e7fe      	b.n	405c5a <pbuf_copy+0xee>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  405c5c:	683b      	ldr	r3, [r7, #0]
  405c5e:	2b00      	cmp	r3, #0
  405c60:	d19a      	bne.n	405b98 <pbuf_copy+0x2c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  405c62:	2300      	movs	r3, #0
}
  405c64:	4618      	mov	r0, r3
  405c66:	3710      	adds	r7, #16
  405c68:	46bd      	mov	sp, r7
  405c6a:	bd80      	pop	{r7, pc}
  405c6c:	0040c9e5 	.word	0x0040c9e5

00405c70 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  405c70:	b580      	push	{r7, lr}
  405c72:	b088      	sub	sp, #32
  405c74:	af00      	add	r7, sp, #0
  405c76:	60f8      	str	r0, [r7, #12]
  405c78:	60b9      	str	r1, [r7, #8]
  405c7a:	4611      	mov	r1, r2
  405c7c:	461a      	mov	r2, r3
  405c7e:	460b      	mov	r3, r1
  405c80:	80fb      	strh	r3, [r7, #6]
  405c82:	4613      	mov	r3, r2
  405c84:	80bb      	strh	r3, [r7, #4]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  405c86:	2300      	movs	r3, #0
  405c88:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  405c8a:	68fb      	ldr	r3, [r7, #12]
  405c8c:	2b00      	cmp	r3, #0
  405c8e:	d100      	bne.n	405c92 <pbuf_copy_partial+0x22>
  405c90:	e7fe      	b.n	405c90 <pbuf_copy_partial+0x20>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  405c92:	68bb      	ldr	r3, [r7, #8]
  405c94:	2b00      	cmp	r3, #0
  405c96:	d100      	bne.n	405c9a <pbuf_copy_partial+0x2a>
  405c98:	e7fe      	b.n	405c98 <pbuf_copy_partial+0x28>

  left = 0;
  405c9a:	2300      	movs	r3, #0
  405c9c:	837b      	strh	r3, [r7, #26]

  if((buf == NULL) || (dataptr == NULL)) {
  405c9e:	68fb      	ldr	r3, [r7, #12]
  405ca0:	2b00      	cmp	r3, #0
  405ca2:	d002      	beq.n	405caa <pbuf_copy_partial+0x3a>
  405ca4:	68bb      	ldr	r3, [r7, #8]
  405ca6:	2b00      	cmp	r3, #0
  405ca8:	d101      	bne.n	405cae <pbuf_copy_partial+0x3e>
    return 0;
  405caa:	2300      	movs	r3, #0
  405cac:	e03e      	b.n	405d2c <pbuf_copy_partial+0xbc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  405cae:	68fb      	ldr	r3, [r7, #12]
  405cb0:	61fb      	str	r3, [r7, #28]
  405cb2:	e034      	b.n	405d1e <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
  405cb4:	88bb      	ldrh	r3, [r7, #4]
  405cb6:	2b00      	cmp	r3, #0
  405cb8:	d00a      	beq.n	405cd0 <pbuf_copy_partial+0x60>
  405cba:	69fb      	ldr	r3, [r7, #28]
  405cbc:	895b      	ldrh	r3, [r3, #10]
  405cbe:	88ba      	ldrh	r2, [r7, #4]
  405cc0:	429a      	cmp	r2, r3
  405cc2:	d305      	bcc.n	405cd0 <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  405cc4:	69fb      	ldr	r3, [r7, #28]
  405cc6:	895b      	ldrh	r3, [r3, #10]
  405cc8:	88ba      	ldrh	r2, [r7, #4]
  405cca:	1ad3      	subs	r3, r2, r3
  405ccc:	80bb      	strh	r3, [r7, #4]
  405cce:	e023      	b.n	405d18 <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  405cd0:	69fb      	ldr	r3, [r7, #28]
  405cd2:	895a      	ldrh	r2, [r3, #10]
  405cd4:	88bb      	ldrh	r3, [r7, #4]
  405cd6:	1ad3      	subs	r3, r2, r3
  405cd8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len)
  405cda:	8b3a      	ldrh	r2, [r7, #24]
  405cdc:	88fb      	ldrh	r3, [r7, #6]
  405cde:	429a      	cmp	r2, r3
  405ce0:	d901      	bls.n	405ce6 <pbuf_copy_partial+0x76>
          buf_copy_len = len;
  405ce2:	88fb      	ldrh	r3, [r7, #6]
  405ce4:	833b      	strh	r3, [r7, #24]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  405ce6:	8b7b      	ldrh	r3, [r7, #26]
  405ce8:	68ba      	ldr	r2, [r7, #8]
  405cea:	18d0      	adds	r0, r2, r3
  405cec:	69fb      	ldr	r3, [r7, #28]
  405cee:	685a      	ldr	r2, [r3, #4]
  405cf0:	88bb      	ldrh	r3, [r7, #4]
  405cf2:	4413      	add	r3, r2
  405cf4:	8b3a      	ldrh	r2, [r7, #24]
  405cf6:	4619      	mov	r1, r3
  405cf8:	4b0e      	ldr	r3, [pc, #56]	; (405d34 <pbuf_copy_partial+0xc4>)
  405cfa:	4798      	blx	r3
      copied_total += buf_copy_len;
  405cfc:	8afa      	ldrh	r2, [r7, #22]
  405cfe:	8b3b      	ldrh	r3, [r7, #24]
  405d00:	4413      	add	r3, r2
  405d02:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
  405d04:	8b7a      	ldrh	r2, [r7, #26]
  405d06:	8b3b      	ldrh	r3, [r7, #24]
  405d08:	4413      	add	r3, r2
  405d0a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
  405d0c:	88fa      	ldrh	r2, [r7, #6]
  405d0e:	8b3b      	ldrh	r3, [r7, #24]
  405d10:	1ad3      	subs	r3, r2, r3
  405d12:	80fb      	strh	r3, [r7, #6]
      offset = 0;
  405d14:	2300      	movs	r3, #0
  405d16:	80bb      	strh	r3, [r7, #4]
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  405d18:	69fb      	ldr	r3, [r7, #28]
  405d1a:	681b      	ldr	r3, [r3, #0]
  405d1c:	61fb      	str	r3, [r7, #28]
  405d1e:	88fb      	ldrh	r3, [r7, #6]
  405d20:	2b00      	cmp	r3, #0
  405d22:	d002      	beq.n	405d2a <pbuf_copy_partial+0xba>
  405d24:	69fb      	ldr	r3, [r7, #28]
  405d26:	2b00      	cmp	r3, #0
  405d28:	d1c4      	bne.n	405cb4 <pbuf_copy_partial+0x44>
    }
  }
  return copied_total;
  405d2a:	8afb      	ldrh	r3, [r7, #22]
}
  405d2c:	4618      	mov	r0, r3
  405d2e:	3720      	adds	r7, #32
  405d30:	46bd      	mov	sp, r7
  405d32:	bd80      	pop	{r7, pc}
  405d34:	0040c9e5 	.word	0x0040c9e5

00405d38 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  405d38:	b480      	push	{r7}
  405d3a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  405d3c:	bf00      	nop
  405d3e:	46bd      	mov	sp, r7
  405d40:	f85d 7b04 	ldr.w	r7, [sp], #4
  405d44:	4770      	bx	lr
	...

00405d48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  405d48:	b580      	push	{r7, lr}
  405d4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  405d4c:	4b08      	ldr	r3, [pc, #32]	; (405d70 <tcp_tmr+0x28>)
  405d4e:	4798      	blx	r3

  if (++tcp_timer & 1) {
  405d50:	4b08      	ldr	r3, [pc, #32]	; (405d74 <tcp_tmr+0x2c>)
  405d52:	781b      	ldrb	r3, [r3, #0]
  405d54:	3301      	adds	r3, #1
  405d56:	b2da      	uxtb	r2, r3
  405d58:	4b06      	ldr	r3, [pc, #24]	; (405d74 <tcp_tmr+0x2c>)
  405d5a:	701a      	strb	r2, [r3, #0]
  405d5c:	4b05      	ldr	r3, [pc, #20]	; (405d74 <tcp_tmr+0x2c>)
  405d5e:	781b      	ldrb	r3, [r3, #0]
  405d60:	f003 0301 	and.w	r3, r3, #1
  405d64:	2b00      	cmp	r3, #0
  405d66:	d001      	beq.n	405d6c <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  405d68:	4b03      	ldr	r3, [pc, #12]	; (405d78 <tcp_tmr+0x30>)
  405d6a:	4798      	blx	r3
  }
}
  405d6c:	bf00      	nop
  405d6e:	bd80      	pop	{r7, pc}
  405d70:	004068ed 	.word	0x004068ed
  405d74:	20402050 	.word	0x20402050
  405d78:	0040646d 	.word	0x0040646d

00405d7c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  405d7c:	b5b0      	push	{r4, r5, r7, lr}
  405d7e:	b086      	sub	sp, #24
  405d80:	af02      	add	r7, sp, #8
  405d82:	6078      	str	r0, [r7, #4]
  405d84:	460b      	mov	r3, r1
  405d86:	70fb      	strb	r3, [r7, #3]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  405d88:	78fb      	ldrb	r3, [r7, #3]
  405d8a:	2b00      	cmp	r3, #0
  405d8c:	d067      	beq.n	405e5e <tcp_close_shutdown+0xe2>
  405d8e:	687b      	ldr	r3, [r7, #4]
  405d90:	7e1b      	ldrb	r3, [r3, #24]
  405d92:	2b04      	cmp	r3, #4
  405d94:	d003      	beq.n	405d9e <tcp_close_shutdown+0x22>
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	7e1b      	ldrb	r3, [r3, #24]
  405d9a:	2b07      	cmp	r3, #7
  405d9c:	d15f      	bne.n	405e5e <tcp_close_shutdown+0xe2>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  405d9e:	687b      	ldr	r3, [r7, #4]
  405da0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  405da2:	2b00      	cmp	r3, #0
  405da4:	d105      	bne.n	405db2 <tcp_close_shutdown+0x36>
  405da6:	687b      	ldr	r3, [r7, #4]
  405da8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  405daa:	f640 3268 	movw	r2, #2920	; 0xb68
  405dae:	4293      	cmp	r3, r2
  405db0:	d055      	beq.n	405e5e <tcp_close_shutdown+0xe2>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  405db2:	687b      	ldr	r3, [r7, #4]
  405db4:	6d18      	ldr	r0, [r3, #80]	; 0x50
  405db6:	687b      	ldr	r3, [r7, #4]
  405db8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  405dba:	687c      	ldr	r4, [r7, #4]
  405dbc:	687b      	ldr	r3, [r7, #4]
  405dbe:	1d1d      	adds	r5, r3, #4
  405dc0:	687b      	ldr	r3, [r7, #4]
  405dc2:	8b5b      	ldrh	r3, [r3, #26]
  405dc4:	687a      	ldr	r2, [r7, #4]
  405dc6:	8b92      	ldrh	r2, [r2, #28]
  405dc8:	9201      	str	r2, [sp, #4]
  405dca:	9300      	str	r3, [sp, #0]
  405dcc:	462b      	mov	r3, r5
  405dce:	4622      	mov	r2, r4
  405dd0:	4c79      	ldr	r4, [pc, #484]	; (405fb8 <tcp_close_shutdown+0x23c>)
  405dd2:	47a0      	blx	r4
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  405dd4:	6878      	ldr	r0, [r7, #4]
  405dd6:	4b79      	ldr	r3, [pc, #484]	; (405fbc <tcp_close_shutdown+0x240>)
  405dd8:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  405dda:	4b79      	ldr	r3, [pc, #484]	; (405fc0 <tcp_close_shutdown+0x244>)
  405ddc:	681a      	ldr	r2, [r3, #0]
  405dde:	687b      	ldr	r3, [r7, #4]
  405de0:	429a      	cmp	r2, r3
  405de2:	d105      	bne.n	405df0 <tcp_close_shutdown+0x74>
  405de4:	4b76      	ldr	r3, [pc, #472]	; (405fc0 <tcp_close_shutdown+0x244>)
  405de6:	681b      	ldr	r3, [r3, #0]
  405de8:	68db      	ldr	r3, [r3, #12]
  405dea:	4a75      	ldr	r2, [pc, #468]	; (405fc0 <tcp_close_shutdown+0x244>)
  405dec:	6013      	str	r3, [r2, #0]
  405dee:	e019      	b.n	405e24 <tcp_close_shutdown+0xa8>
  405df0:	4b73      	ldr	r3, [pc, #460]	; (405fc0 <tcp_close_shutdown+0x244>)
  405df2:	681b      	ldr	r3, [r3, #0]
  405df4:	4a73      	ldr	r2, [pc, #460]	; (405fc4 <tcp_close_shutdown+0x248>)
  405df6:	6013      	str	r3, [r2, #0]
  405df8:	e010      	b.n	405e1c <tcp_close_shutdown+0xa0>
  405dfa:	4b72      	ldr	r3, [pc, #456]	; (405fc4 <tcp_close_shutdown+0x248>)
  405dfc:	681b      	ldr	r3, [r3, #0]
  405dfe:	68da      	ldr	r2, [r3, #12]
  405e00:	687b      	ldr	r3, [r7, #4]
  405e02:	429a      	cmp	r2, r3
  405e04:	d105      	bne.n	405e12 <tcp_close_shutdown+0x96>
  405e06:	4b6f      	ldr	r3, [pc, #444]	; (405fc4 <tcp_close_shutdown+0x248>)
  405e08:	681b      	ldr	r3, [r3, #0]
  405e0a:	687a      	ldr	r2, [r7, #4]
  405e0c:	68d2      	ldr	r2, [r2, #12]
  405e0e:	60da      	str	r2, [r3, #12]
  405e10:	e008      	b.n	405e24 <tcp_close_shutdown+0xa8>
  405e12:	4b6c      	ldr	r3, [pc, #432]	; (405fc4 <tcp_close_shutdown+0x248>)
  405e14:	681b      	ldr	r3, [r3, #0]
  405e16:	68db      	ldr	r3, [r3, #12]
  405e18:	4a6a      	ldr	r2, [pc, #424]	; (405fc4 <tcp_close_shutdown+0x248>)
  405e1a:	6013      	str	r3, [r2, #0]
  405e1c:	4b69      	ldr	r3, [pc, #420]	; (405fc4 <tcp_close_shutdown+0x248>)
  405e1e:	681b      	ldr	r3, [r3, #0]
  405e20:	2b00      	cmp	r3, #0
  405e22:	d1ea      	bne.n	405dfa <tcp_close_shutdown+0x7e>
  405e24:	687b      	ldr	r3, [r7, #4]
  405e26:	2200      	movs	r2, #0
  405e28:	60da      	str	r2, [r3, #12]
  405e2a:	4b67      	ldr	r3, [pc, #412]	; (405fc8 <tcp_close_shutdown+0x24c>)
  405e2c:	2201      	movs	r2, #1
  405e2e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  405e30:	687b      	ldr	r3, [r7, #4]
  405e32:	7e1b      	ldrb	r3, [r3, #24]
  405e34:	2b04      	cmp	r3, #4
  405e36:	d10c      	bne.n	405e52 <tcp_close_shutdown+0xd6>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  405e38:	687b      	ldr	r3, [r7, #4]
  405e3a:	220a      	movs	r2, #10
  405e3c:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  405e3e:	4b63      	ldr	r3, [pc, #396]	; (405fcc <tcp_close_shutdown+0x250>)
  405e40:	681a      	ldr	r2, [r3, #0]
  405e42:	687b      	ldr	r3, [r7, #4]
  405e44:	60da      	str	r2, [r3, #12]
  405e46:	4a61      	ldr	r2, [pc, #388]	; (405fcc <tcp_close_shutdown+0x250>)
  405e48:	687b      	ldr	r3, [r7, #4]
  405e4a:	6013      	str	r3, [r2, #0]
  405e4c:	4b60      	ldr	r3, [pc, #384]	; (405fd0 <tcp_close_shutdown+0x254>)
  405e4e:	4798      	blx	r3
  405e50:	e003      	b.n	405e5a <tcp_close_shutdown+0xde>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
  405e52:	6879      	ldr	r1, [r7, #4]
  405e54:	2001      	movs	r0, #1
  405e56:	4b5f      	ldr	r3, [pc, #380]	; (405fd4 <tcp_close_shutdown+0x258>)
  405e58:	4798      	blx	r3
      }
      return ERR_OK;
  405e5a:	2300      	movs	r3, #0
  405e5c:	e0a7      	b.n	405fae <tcp_close_shutdown+0x232>
    }
  }

  switch (pcb->state) {
  405e5e:	687b      	ldr	r3, [r7, #4]
  405e60:	7e1b      	ldrb	r3, [r3, #24]
  405e62:	2b07      	cmp	r3, #7
  405e64:	f200 808d 	bhi.w	405f82 <tcp_close_shutdown+0x206>
  405e68:	a201      	add	r2, pc, #4	; (adr r2, 405e70 <tcp_close_shutdown+0xf4>)
  405e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405e6e:	bf00      	nop
  405e70:	00405e91 	.word	0x00405e91
  405e74:	00405efb 	.word	0x00405efb
  405e78:	00405f15 	.word	0x00405f15
  405e7c:	00405f35 	.word	0x00405f35
  405e80:	00405f4f 	.word	0x00405f4f
  405e84:	00405f83 	.word	0x00405f83
  405e88:	00405f83 	.word	0x00405f83
  405e8c:	00405f69 	.word	0x00405f69
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
  405e90:	2300      	movs	r3, #0
  405e92:	73fb      	strb	r3, [r7, #15]
    if (pcb->local_port != 0) {
  405e94:	687b      	ldr	r3, [r7, #4]
  405e96:	8b5b      	ldrh	r3, [r3, #26]
  405e98:	2b00      	cmp	r3, #0
  405e9a:	d027      	beq.n	405eec <tcp_close_shutdown+0x170>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  405e9c:	4b4e      	ldr	r3, [pc, #312]	; (405fd8 <tcp_close_shutdown+0x25c>)
  405e9e:	681a      	ldr	r2, [r3, #0]
  405ea0:	687b      	ldr	r3, [r7, #4]
  405ea2:	429a      	cmp	r2, r3
  405ea4:	d105      	bne.n	405eb2 <tcp_close_shutdown+0x136>
  405ea6:	4b4c      	ldr	r3, [pc, #304]	; (405fd8 <tcp_close_shutdown+0x25c>)
  405ea8:	681b      	ldr	r3, [r3, #0]
  405eaa:	68db      	ldr	r3, [r3, #12]
  405eac:	4a4a      	ldr	r2, [pc, #296]	; (405fd8 <tcp_close_shutdown+0x25c>)
  405eae:	6013      	str	r3, [r2, #0]
  405eb0:	e019      	b.n	405ee6 <tcp_close_shutdown+0x16a>
  405eb2:	4b49      	ldr	r3, [pc, #292]	; (405fd8 <tcp_close_shutdown+0x25c>)
  405eb4:	681b      	ldr	r3, [r3, #0]
  405eb6:	4a43      	ldr	r2, [pc, #268]	; (405fc4 <tcp_close_shutdown+0x248>)
  405eb8:	6013      	str	r3, [r2, #0]
  405eba:	e010      	b.n	405ede <tcp_close_shutdown+0x162>
  405ebc:	4b41      	ldr	r3, [pc, #260]	; (405fc4 <tcp_close_shutdown+0x248>)
  405ebe:	681b      	ldr	r3, [r3, #0]
  405ec0:	68da      	ldr	r2, [r3, #12]
  405ec2:	687b      	ldr	r3, [r7, #4]
  405ec4:	429a      	cmp	r2, r3
  405ec6:	d105      	bne.n	405ed4 <tcp_close_shutdown+0x158>
  405ec8:	4b3e      	ldr	r3, [pc, #248]	; (405fc4 <tcp_close_shutdown+0x248>)
  405eca:	681b      	ldr	r3, [r3, #0]
  405ecc:	687a      	ldr	r2, [r7, #4]
  405ece:	68d2      	ldr	r2, [r2, #12]
  405ed0:	60da      	str	r2, [r3, #12]
  405ed2:	e008      	b.n	405ee6 <tcp_close_shutdown+0x16a>
  405ed4:	4b3b      	ldr	r3, [pc, #236]	; (405fc4 <tcp_close_shutdown+0x248>)
  405ed6:	681b      	ldr	r3, [r3, #0]
  405ed8:	68db      	ldr	r3, [r3, #12]
  405eda:	4a3a      	ldr	r2, [pc, #232]	; (405fc4 <tcp_close_shutdown+0x248>)
  405edc:	6013      	str	r3, [r2, #0]
  405ede:	4b39      	ldr	r3, [pc, #228]	; (405fc4 <tcp_close_shutdown+0x248>)
  405ee0:	681b      	ldr	r3, [r3, #0]
  405ee2:	2b00      	cmp	r3, #0
  405ee4:	d1ea      	bne.n	405ebc <tcp_close_shutdown+0x140>
  405ee6:	687b      	ldr	r3, [r7, #4]
  405ee8:	2200      	movs	r2, #0
  405eea:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  405eec:	6879      	ldr	r1, [r7, #4]
  405eee:	2001      	movs	r0, #1
  405ef0:	4b38      	ldr	r3, [pc, #224]	; (405fd4 <tcp_close_shutdown+0x258>)
  405ef2:	4798      	blx	r3
    pcb = NULL;
  405ef4:	2300      	movs	r3, #0
  405ef6:	607b      	str	r3, [r7, #4]
    break;
  405ef8:	e04d      	b.n	405f96 <tcp_close_shutdown+0x21a>
  case LISTEN:
    err = ERR_OK;
  405efa:	2300      	movs	r3, #0
  405efc:	73fb      	strb	r3, [r7, #15]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  405efe:	6879      	ldr	r1, [r7, #4]
  405f00:	4836      	ldr	r0, [pc, #216]	; (405fdc <tcp_close_shutdown+0x260>)
  405f02:	4b37      	ldr	r3, [pc, #220]	; (405fe0 <tcp_close_shutdown+0x264>)
  405f04:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  405f06:	6879      	ldr	r1, [r7, #4]
  405f08:	2002      	movs	r0, #2
  405f0a:	4b32      	ldr	r3, [pc, #200]	; (405fd4 <tcp_close_shutdown+0x258>)
  405f0c:	4798      	blx	r3
    pcb = NULL;
  405f0e:	2300      	movs	r3, #0
  405f10:	607b      	str	r3, [r7, #4]
    break;
  405f12:	e040      	b.n	405f96 <tcp_close_shutdown+0x21a>
  case SYN_SENT:
    err = ERR_OK;
  405f14:	2300      	movs	r3, #0
  405f16:	73fb      	strb	r3, [r7, #15]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  405f18:	6879      	ldr	r1, [r7, #4]
  405f1a:	4829      	ldr	r0, [pc, #164]	; (405fc0 <tcp_close_shutdown+0x244>)
  405f1c:	4b30      	ldr	r3, [pc, #192]	; (405fe0 <tcp_close_shutdown+0x264>)
  405f1e:	4798      	blx	r3
  405f20:	4b29      	ldr	r3, [pc, #164]	; (405fc8 <tcp_close_shutdown+0x24c>)
  405f22:	2201      	movs	r2, #1
  405f24:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  405f26:	6879      	ldr	r1, [r7, #4]
  405f28:	2001      	movs	r0, #1
  405f2a:	4b2a      	ldr	r3, [pc, #168]	; (405fd4 <tcp_close_shutdown+0x258>)
  405f2c:	4798      	blx	r3
    pcb = NULL;
  405f2e:	2300      	movs	r3, #0
  405f30:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
  405f32:	e030      	b.n	405f96 <tcp_close_shutdown+0x21a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  405f34:	6878      	ldr	r0, [r7, #4]
  405f36:	4b2b      	ldr	r3, [pc, #172]	; (405fe4 <tcp_close_shutdown+0x268>)
  405f38:	4798      	blx	r3
  405f3a:	4603      	mov	r3, r0
  405f3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  405f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
  405f42:	2b00      	cmp	r3, #0
  405f44:	d122      	bne.n	405f8c <tcp_close_shutdown+0x210>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  405f46:	687b      	ldr	r3, [r7, #4]
  405f48:	2205      	movs	r2, #5
  405f4a:	761a      	strb	r2, [r3, #24]
    }
    break;
  405f4c:	e01e      	b.n	405f8c <tcp_close_shutdown+0x210>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  405f4e:	6878      	ldr	r0, [r7, #4]
  405f50:	4b24      	ldr	r3, [pc, #144]	; (405fe4 <tcp_close_shutdown+0x268>)
  405f52:	4798      	blx	r3
  405f54:	4603      	mov	r3, r0
  405f56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  405f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
  405f5c:	2b00      	cmp	r3, #0
  405f5e:	d117      	bne.n	405f90 <tcp_close_shutdown+0x214>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  405f60:	687b      	ldr	r3, [r7, #4]
  405f62:	2205      	movs	r2, #5
  405f64:	761a      	strb	r2, [r3, #24]
    }
    break;
  405f66:	e013      	b.n	405f90 <tcp_close_shutdown+0x214>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  405f68:	6878      	ldr	r0, [r7, #4]
  405f6a:	4b1e      	ldr	r3, [pc, #120]	; (405fe4 <tcp_close_shutdown+0x268>)
  405f6c:	4798      	blx	r3
  405f6e:	4603      	mov	r3, r0
  405f70:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  405f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
  405f76:	2b00      	cmp	r3, #0
  405f78:	d10c      	bne.n	405f94 <tcp_close_shutdown+0x218>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  405f7a:	687b      	ldr	r3, [r7, #4]
  405f7c:	2209      	movs	r2, #9
  405f7e:	761a      	strb	r2, [r3, #24]
    }
    break;
  405f80:	e008      	b.n	405f94 <tcp_close_shutdown+0x218>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  405f82:	2300      	movs	r3, #0
  405f84:	73fb      	strb	r3, [r7, #15]
    pcb = NULL;
  405f86:	2300      	movs	r3, #0
  405f88:	607b      	str	r3, [r7, #4]
    break;
  405f8a:	e004      	b.n	405f96 <tcp_close_shutdown+0x21a>
    break;
  405f8c:	bf00      	nop
  405f8e:	e002      	b.n	405f96 <tcp_close_shutdown+0x21a>
    break;
  405f90:	bf00      	nop
  405f92:	e000      	b.n	405f96 <tcp_close_shutdown+0x21a>
    break;
  405f94:	bf00      	nop
  }

  if (pcb != NULL && err == ERR_OK) {
  405f96:	687b      	ldr	r3, [r7, #4]
  405f98:	2b00      	cmp	r3, #0
  405f9a:	d006      	beq.n	405faa <tcp_close_shutdown+0x22e>
  405f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  405fa0:	2b00      	cmp	r3, #0
  405fa2:	d102      	bne.n	405faa <tcp_close_shutdown+0x22e>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  405fa4:	6878      	ldr	r0, [r7, #4]
  405fa6:	4b10      	ldr	r3, [pc, #64]	; (405fe8 <tcp_close_shutdown+0x26c>)
  405fa8:	4798      	blx	r3
  }
  return err;
  405faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  405fae:	4618      	mov	r0, r3
  405fb0:	3710      	adds	r7, #16
  405fb2:	46bd      	mov	sp, r7
  405fb4:	bdb0      	pop	{r4, r5, r7, pc}
  405fb6:	bf00      	nop
  405fb8:	00409ee1 	.word	0x00409ee1
  405fbc:	00406e2d 	.word	0x00406e2d
  405fc0:	204043e8 	.word	0x204043e8
  405fc4:	204043f4 	.word	0x204043f4
  405fc8:	204043e4 	.word	0x204043e4
  405fcc:	204043fc 	.word	0x204043fc
  405fd0:	00404bf5 	.word	0x00404bf5
  405fd4:	00405365 	.word	0x00405365
  405fd8:	204043f8 	.word	0x204043f8
  405fdc:	204043f0 	.word	0x204043f0
  405fe0:	00406eb9 	.word	0x00406eb9
  405fe4:	00409149 	.word	0x00409149
  405fe8:	00409a95 	.word	0x00409a95

00405fec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  405fec:	b580      	push	{r7, lr}
  405fee:	b082      	sub	sp, #8
  405ff0:	af00      	add	r7, sp, #0
  405ff2:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
  405ff4:	687b      	ldr	r3, [r7, #4]
  405ff6:	7e1b      	ldrb	r3, [r3, #24]
  405ff8:	2b01      	cmp	r3, #1
  405ffa:	d006      	beq.n	40600a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  405ffc:	687b      	ldr	r3, [r7, #4]
  405ffe:	7f9b      	ldrb	r3, [r3, #30]
  406000:	f043 0310 	orr.w	r3, r3, #16
  406004:	b2da      	uxtb	r2, r3
  406006:	687b      	ldr	r3, [r7, #4]
  406008:	779a      	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  40600a:	2101      	movs	r1, #1
  40600c:	6878      	ldr	r0, [r7, #4]
  40600e:	4b03      	ldr	r3, [pc, #12]	; (40601c <tcp_close+0x30>)
  406010:	4798      	blx	r3
  406012:	4603      	mov	r3, r0
}
  406014:	4618      	mov	r0, r3
  406016:	3708      	adds	r7, #8
  406018:	46bd      	mov	sp, r7
  40601a:	bd80      	pop	{r7, pc}
  40601c:	00405d7d 	.word	0x00405d7d

00406020 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  406020:	b590      	push	{r4, r7, lr}
  406022:	b089      	sub	sp, #36	; 0x24
  406024:	af02      	add	r7, sp, #8
  406026:	6078      	str	r0, [r7, #4]
  406028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  40602a:	687b      	ldr	r3, [r7, #4]
  40602c:	7e1b      	ldrb	r3, [r3, #24]
  40602e:	2b0a      	cmp	r3, #10
  406030:	d108      	bne.n	406044 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  406032:	6879      	ldr	r1, [r7, #4]
  406034:	482c      	ldr	r0, [pc, #176]	; (4060e8 <tcp_abandon+0xc8>)
  406036:	4b2d      	ldr	r3, [pc, #180]	; (4060ec <tcp_abandon+0xcc>)
  406038:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  40603a:	6879      	ldr	r1, [r7, #4]
  40603c:	2001      	movs	r0, #1
  40603e:	4b2c      	ldr	r3, [pc, #176]	; (4060f0 <tcp_abandon+0xd0>)
  406040:	4798      	blx	r3
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
  406042:	e04c      	b.n	4060de <tcp_abandon+0xbe>
    seqno = pcb->snd_nxt;
  406044:	687b      	ldr	r3, [r7, #4]
  406046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  406048:	617b      	str	r3, [r7, #20]
    ackno = pcb->rcv_nxt;
  40604a:	687b      	ldr	r3, [r7, #4]
  40604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40604e:	613b      	str	r3, [r7, #16]
    errf = pcb->errf;
  406050:	687b      	ldr	r3, [r7, #4]
  406052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  406056:	60fb      	str	r3, [r7, #12]
    errf_arg = pcb->callback_arg;
  406058:	687b      	ldr	r3, [r7, #4]
  40605a:	691b      	ldr	r3, [r3, #16]
  40605c:	60bb      	str	r3, [r7, #8]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  40605e:	6879      	ldr	r1, [r7, #4]
  406060:	4824      	ldr	r0, [pc, #144]	; (4060f4 <tcp_abandon+0xd4>)
  406062:	4b22      	ldr	r3, [pc, #136]	; (4060ec <tcp_abandon+0xcc>)
  406064:	4798      	blx	r3
  406066:	4b24      	ldr	r3, [pc, #144]	; (4060f8 <tcp_abandon+0xd8>)
  406068:	2201      	movs	r2, #1
  40606a:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  40606c:	687b      	ldr	r3, [r7, #4]
  40606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406070:	2b00      	cmp	r3, #0
  406072:	d004      	beq.n	40607e <tcp_abandon+0x5e>
      tcp_segs_free(pcb->unacked);
  406074:	687b      	ldr	r3, [r7, #4]
  406076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406078:	4618      	mov	r0, r3
  40607a:	4b20      	ldr	r3, [pc, #128]	; (4060fc <tcp_abandon+0xdc>)
  40607c:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  40607e:	687b      	ldr	r3, [r7, #4]
  406080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  406082:	2b00      	cmp	r3, #0
  406084:	d004      	beq.n	406090 <tcp_abandon+0x70>
      tcp_segs_free(pcb->unsent);
  406086:	687b      	ldr	r3, [r7, #4]
  406088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40608a:	4618      	mov	r0, r3
  40608c:	4b1b      	ldr	r3, [pc, #108]	; (4060fc <tcp_abandon+0xdc>)
  40608e:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  406090:	687b      	ldr	r3, [r7, #4]
  406092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406094:	2b00      	cmp	r3, #0
  406096:	d004      	beq.n	4060a2 <tcp_abandon+0x82>
      tcp_segs_free(pcb->ooseq);
  406098:	687b      	ldr	r3, [r7, #4]
  40609a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40609c:	4618      	mov	r0, r3
  40609e:	4b17      	ldr	r3, [pc, #92]	; (4060fc <tcp_abandon+0xdc>)
  4060a0:	4798      	blx	r3
    if (reset) {
  4060a2:	683b      	ldr	r3, [r7, #0]
  4060a4:	2b00      	cmp	r3, #0
  4060a6:	d00e      	beq.n	4060c6 <tcp_abandon+0xa6>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  4060a8:	6879      	ldr	r1, [r7, #4]
  4060aa:	687b      	ldr	r3, [r7, #4]
  4060ac:	1d18      	adds	r0, r3, #4
  4060ae:	687b      	ldr	r3, [r7, #4]
  4060b0:	8b5b      	ldrh	r3, [r3, #26]
  4060b2:	687a      	ldr	r2, [r7, #4]
  4060b4:	8b92      	ldrh	r2, [r2, #28]
  4060b6:	9201      	str	r2, [sp, #4]
  4060b8:	9300      	str	r3, [sp, #0]
  4060ba:	4603      	mov	r3, r0
  4060bc:	460a      	mov	r2, r1
  4060be:	6939      	ldr	r1, [r7, #16]
  4060c0:	6978      	ldr	r0, [r7, #20]
  4060c2:	4c0f      	ldr	r4, [pc, #60]	; (406100 <tcp_abandon+0xe0>)
  4060c4:	47a0      	blx	r4
    memp_free(MEMP_TCP_PCB, pcb);
  4060c6:	6879      	ldr	r1, [r7, #4]
  4060c8:	2001      	movs	r0, #1
  4060ca:	4b09      	ldr	r3, [pc, #36]	; (4060f0 <tcp_abandon+0xd0>)
  4060cc:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  4060ce:	68fb      	ldr	r3, [r7, #12]
  4060d0:	2b00      	cmp	r3, #0
  4060d2:	d004      	beq.n	4060de <tcp_abandon+0xbe>
  4060d4:	68fb      	ldr	r3, [r7, #12]
  4060d6:	f06f 0109 	mvn.w	r1, #9
  4060da:	68b8      	ldr	r0, [r7, #8]
  4060dc:	4798      	blx	r3
}
  4060de:	bf00      	nop
  4060e0:	371c      	adds	r7, #28
  4060e2:	46bd      	mov	sp, r7
  4060e4:	bd90      	pop	{r4, r7, pc}
  4060e6:	bf00      	nop
  4060e8:	204043fc 	.word	0x204043fc
  4060ec:	00406eb9 	.word	0x00406eb9
  4060f0:	00405365 	.word	0x00405365
  4060f4:	204043e8 	.word	0x204043e8
  4060f8:	204043e4 	.word	0x204043e4
  4060fc:	00406a6d 	.word	0x00406a6d
  406100:	00409ee1 	.word	0x00409ee1

00406104 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  406104:	b580      	push	{r7, lr}
  406106:	b082      	sub	sp, #8
  406108:	af00      	add	r7, sp, #0
  40610a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
  40610c:	2101      	movs	r1, #1
  40610e:	6878      	ldr	r0, [r7, #4]
  406110:	4b02      	ldr	r3, [pc, #8]	; (40611c <tcp_abort+0x18>)
  406112:	4798      	blx	r3
}
  406114:	bf00      	nop
  406116:	3708      	adds	r7, #8
  406118:	46bd      	mov	sp, r7
  40611a:	bd80      	pop	{r7, pc}
  40611c:	00406021 	.word	0x00406021

00406120 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  406120:	b480      	push	{r7}
  406122:	b085      	sub	sp, #20
  406124:	af00      	add	r7, sp, #0
  406126:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  406128:	687b      	ldr	r3, [r7, #4]
  40612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40612c:	687a      	ldr	r2, [r7, #4]
  40612e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  406130:	4413      	add	r3, r2
  406132:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  406134:	687b      	ldr	r3, [r7, #4]
  406136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406138:	687a      	ldr	r2, [r7, #4]
  40613a:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  40613c:	f240 51b4 	movw	r1, #1460	; 0x5b4
  406140:	428a      	cmp	r2, r1
  406142:	d802      	bhi.n	40614a <tcp_update_rcv_ann_wnd+0x2a>
  406144:	687a      	ldr	r2, [r7, #4]
  406146:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  406148:	e001      	b.n	40614e <tcp_update_rcv_ann_wnd+0x2e>
  40614a:	f240 52b4 	movw	r2, #1460	; 0x5b4
  40614e:	4413      	add	r3, r2
  406150:	68fa      	ldr	r2, [r7, #12]
  406152:	1ad3      	subs	r3, r2, r3
  406154:	2b00      	cmp	r3, #0
  406156:	db08      	blt.n	40616a <tcp_update_rcv_ann_wnd+0x4a>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  406158:	687b      	ldr	r3, [r7, #4]
  40615a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  40615c:	687b      	ldr	r3, [r7, #4]
  40615e:	85da      	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  406160:	687b      	ldr	r3, [r7, #4]
  406162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406164:	68fa      	ldr	r2, [r7, #12]
  406166:	1ad3      	subs	r3, r2, r3
  406168:	e015      	b.n	406196 <tcp_update_rcv_ann_wnd+0x76>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  40616a:	687b      	ldr	r3, [r7, #4]
  40616c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40616e:	687b      	ldr	r3, [r7, #4]
  406170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406172:	1ad3      	subs	r3, r2, r3
  406174:	2b00      	cmp	r3, #0
  406176:	dd03      	ble.n	406180 <tcp_update_rcv_ann_wnd+0x60>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  406178:	687b      	ldr	r3, [r7, #4]
  40617a:	2200      	movs	r2, #0
  40617c:	85da      	strh	r2, [r3, #46]	; 0x2e
  40617e:	e009      	b.n	406194 <tcp_update_rcv_ann_wnd+0x74>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  406180:	687b      	ldr	r3, [r7, #4]
  406182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406184:	687b      	ldr	r3, [r7, #4]
  406186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406188:	1ad3      	subs	r3, r2, r3
  40618a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  40618c:	68bb      	ldr	r3, [r7, #8]
  40618e:	b29a      	uxth	r2, r3
  406190:	687b      	ldr	r3, [r7, #4]
  406192:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  406194:	2300      	movs	r3, #0
  }
}
  406196:	4618      	mov	r0, r3
  406198:	3714      	adds	r7, #20
  40619a:	46bd      	mov	sp, r7
  40619c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4061a0:	4770      	bx	lr
	...

004061a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  4061a4:	b580      	push	{r7, lr}
  4061a6:	b084      	sub	sp, #16
  4061a8:	af00      	add	r7, sp, #0
  4061aa:	6078      	str	r0, [r7, #4]
  4061ac:	460b      	mov	r3, r1
  4061ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  4061b0:	687b      	ldr	r3, [r7, #4]
  4061b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  4061b4:	887b      	ldrh	r3, [r7, #2]
  4061b6:	4413      	add	r3, r2
  4061b8:	b29a      	uxth	r2, r3
  4061ba:	687b      	ldr	r3, [r7, #4]
  4061bc:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
  4061be:	687b      	ldr	r3, [r7, #4]
  4061c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  4061c2:	f640 3268 	movw	r2, #2920	; 0xb68
  4061c6:	4293      	cmp	r3, r2
  4061c8:	d903      	bls.n	4061d2 <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND;
  4061ca:	687b      	ldr	r3, [r7, #4]
  4061cc:	f640 3268 	movw	r2, #2920	; 0xb68
  4061d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  4061d2:	6878      	ldr	r0, [r7, #4]
  4061d4:	4b0b      	ldr	r3, [pc, #44]	; (406204 <tcp_recved+0x60>)
  4061d6:	4798      	blx	r3
  4061d8:	4603      	mov	r3, r0
  4061da:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  4061dc:	68fb      	ldr	r3, [r7, #12]
  4061de:	f240 22d9 	movw	r2, #729	; 0x2d9
  4061e2:	4293      	cmp	r3, r2
  4061e4:	dd09      	ble.n	4061fa <tcp_recved+0x56>
    tcp_ack_now(pcb);
  4061e6:	687b      	ldr	r3, [r7, #4]
  4061e8:	7f9b      	ldrb	r3, [r3, #30]
  4061ea:	f043 0302 	orr.w	r3, r3, #2
  4061ee:	b2da      	uxtb	r2, r3
  4061f0:	687b      	ldr	r3, [r7, #4]
  4061f2:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  4061f4:	6878      	ldr	r0, [r7, #4]
  4061f6:	4b04      	ldr	r3, [pc, #16]	; (406208 <tcp_recved+0x64>)
  4061f8:	4798      	blx	r3
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
  4061fa:	bf00      	nop
  4061fc:	3710      	adds	r7, #16
  4061fe:	46bd      	mov	sp, r7
  406200:	bd80      	pop	{r7, pc}
  406202:	bf00      	nop
  406204:	00406121 	.word	0x00406121
  406208:	00409a95 	.word	0x00409a95

0040620c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  40620c:	b480      	push	{r7}
  40620e:	b083      	sub	sp, #12
  406210:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
  406212:	2300      	movs	r3, #0
  406214:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  406216:	4b1d      	ldr	r3, [pc, #116]	; (40628c <tcp_new_port+0x80>)
  406218:	881b      	ldrh	r3, [r3, #0]
  40621a:	1c5a      	adds	r2, r3, #1
  40621c:	b291      	uxth	r1, r2
  40621e:	4a1b      	ldr	r2, [pc, #108]	; (40628c <tcp_new_port+0x80>)
  406220:	8011      	strh	r1, [r2, #0]
  406222:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406226:	4293      	cmp	r3, r2
  406228:	d103      	bne.n	406232 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  40622a:	4b18      	ldr	r3, [pc, #96]	; (40628c <tcp_new_port+0x80>)
  40622c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  406230:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  406232:	2300      	movs	r3, #0
  406234:	71fb      	strb	r3, [r7, #7]
  406236:	e01e      	b.n	406276 <tcp_new_port+0x6a>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  406238:	79fb      	ldrb	r3, [r7, #7]
  40623a:	4a15      	ldr	r2, [pc, #84]	; (406290 <tcp_new_port+0x84>)
  40623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  406240:	681b      	ldr	r3, [r3, #0]
  406242:	603b      	str	r3, [r7, #0]
  406244:	e011      	b.n	40626a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
  406246:	683b      	ldr	r3, [r7, #0]
  406248:	8b5a      	ldrh	r2, [r3, #26]
  40624a:	4b10      	ldr	r3, [pc, #64]	; (40628c <tcp_new_port+0x80>)
  40624c:	881b      	ldrh	r3, [r3, #0]
  40624e:	429a      	cmp	r2, r3
  406250:	d108      	bne.n	406264 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  406252:	88bb      	ldrh	r3, [r7, #4]
  406254:	3301      	adds	r3, #1
  406256:	80bb      	strh	r3, [r7, #4]
  406258:	88bb      	ldrh	r3, [r7, #4]
  40625a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40625e:	d3da      	bcc.n	406216 <tcp_new_port+0xa>
          return 0;
  406260:	2300      	movs	r3, #0
  406262:	e00d      	b.n	406280 <tcp_new_port+0x74>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  406264:	683b      	ldr	r3, [r7, #0]
  406266:	68db      	ldr	r3, [r3, #12]
  406268:	603b      	str	r3, [r7, #0]
  40626a:	683b      	ldr	r3, [r7, #0]
  40626c:	2b00      	cmp	r3, #0
  40626e:	d1ea      	bne.n	406246 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  406270:	79fb      	ldrb	r3, [r7, #7]
  406272:	3301      	adds	r3, #1
  406274:	71fb      	strb	r3, [r7, #7]
  406276:	79fb      	ldrb	r3, [r7, #7]
  406278:	2b03      	cmp	r3, #3
  40627a:	d9dd      	bls.n	406238 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  40627c:	4b03      	ldr	r3, [pc, #12]	; (40628c <tcp_new_port+0x80>)
  40627e:	881b      	ldrh	r3, [r3, #0]
}
  406280:	4618      	mov	r0, r3
  406282:	370c      	adds	r7, #12
  406284:	46bd      	mov	sp, r7
  406286:	f85d 7b04 	ldr.w	r7, [sp], #4
  40628a:	4770      	bx	lr
  40628c:	2040000c 	.word	0x2040000c
  406290:	0040cdfc 	.word	0x0040cdfc

00406294 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  406294:	b580      	push	{r7, lr}
  406296:	b088      	sub	sp, #32
  406298:	af00      	add	r7, sp, #0
  40629a:	60f8      	str	r0, [r7, #12]
  40629c:	60b9      	str	r1, [r7, #8]
  40629e:	603b      	str	r3, [r7, #0]
  4062a0:	4613      	mov	r3, r2
  4062a2:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  4062a4:	68fb      	ldr	r3, [r7, #12]
  4062a6:	7e1b      	ldrb	r3, [r3, #24]
  4062a8:	2b00      	cmp	r3, #0
  4062aa:	d000      	beq.n	4062ae <tcp_connect+0x1a>
  4062ac:	e7fe      	b.n	4062ac <tcp_connect+0x18>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
  4062ae:	68bb      	ldr	r3, [r7, #8]
  4062b0:	2b00      	cmp	r3, #0
  4062b2:	d00a      	beq.n	4062ca <tcp_connect+0x36>
    pcb->remote_ip = *ipaddr;
  4062b4:	68fb      	ldr	r3, [r7, #12]
  4062b6:	68ba      	ldr	r2, [r7, #8]
  4062b8:	6812      	ldr	r2, [r2, #0]
  4062ba:	605a      	str	r2, [r3, #4]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
  4062bc:	68fb      	ldr	r3, [r7, #12]
  4062be:	88fa      	ldrh	r2, [r7, #6]
  4062c0:	839a      	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
  4062c2:	68fb      	ldr	r3, [r7, #12]
  4062c4:	2b00      	cmp	r3, #0
  4062c6:	d007      	beq.n	4062d8 <tcp_connect+0x44>
  4062c8:	e002      	b.n	4062d0 <tcp_connect+0x3c>
    return ERR_VAL;
  4062ca:	f06f 0305 	mvn.w	r3, #5
  4062ce:	e0b2      	b.n	406436 <tcp_connect+0x1a2>
  if (ip_addr_isany(&(pcb->local_ip))) {
  4062d0:	68fb      	ldr	r3, [r7, #12]
  4062d2:	681b      	ldr	r3, [r3, #0]
  4062d4:	2b00      	cmp	r3, #0
  4062d6:	d10f      	bne.n	4062f8 <tcp_connect+0x64>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
  4062d8:	68fb      	ldr	r3, [r7, #12]
  4062da:	3304      	adds	r3, #4
  4062dc:	4618      	mov	r0, r3
  4062de:	4b58      	ldr	r3, [pc, #352]	; (406440 <tcp_connect+0x1ac>)
  4062e0:	4798      	blx	r3
  4062e2:	61f8      	str	r0, [r7, #28]
    if (netif == NULL) {
  4062e4:	69fb      	ldr	r3, [r7, #28]
  4062e6:	2b00      	cmp	r3, #0
  4062e8:	d102      	bne.n	4062f0 <tcp_connect+0x5c>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  4062ea:	f06f 0303 	mvn.w	r3, #3
  4062ee:	e0a2      	b.n	406436 <tcp_connect+0x1a2>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  4062f0:	69fb      	ldr	r3, [r7, #28]
  4062f2:	685a      	ldr	r2, [r3, #4]
  4062f4:	68fb      	ldr	r3, [r7, #12]
  4062f6:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
  4062f8:	68fb      	ldr	r3, [r7, #12]
  4062fa:	8b5b      	ldrh	r3, [r3, #26]
  4062fc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
  4062fe:	68fb      	ldr	r3, [r7, #12]
  406300:	8b5b      	ldrh	r3, [r3, #26]
  406302:	2b00      	cmp	r3, #0
  406304:	d10c      	bne.n	406320 <tcp_connect+0x8c>
    pcb->local_port = tcp_new_port();
  406306:	4b4f      	ldr	r3, [pc, #316]	; (406444 <tcp_connect+0x1b0>)
  406308:	4798      	blx	r3
  40630a:	4603      	mov	r3, r0
  40630c:	461a      	mov	r2, r3
  40630e:	68fb      	ldr	r3, [r7, #12]
  406310:	835a      	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  406312:	68fb      	ldr	r3, [r7, #12]
  406314:	8b5b      	ldrh	r3, [r3, #26]
  406316:	2b00      	cmp	r3, #0
  406318:	d102      	bne.n	406320 <tcp_connect+0x8c>
      return ERR_BUF;
  40631a:	f06f 0301 	mvn.w	r3, #1
  40631e:	e08a      	b.n	406436 <tcp_connect+0x1a2>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
  406320:	4b49      	ldr	r3, [pc, #292]	; (406448 <tcp_connect+0x1b4>)
  406322:	4798      	blx	r3
  406324:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
  406326:	68fb      	ldr	r3, [r7, #12]
  406328:	2200      	movs	r2, #0
  40632a:	629a      	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  40632c:	68fb      	ldr	r3, [r7, #12]
  40632e:	697a      	ldr	r2, [r7, #20]
  406330:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  406332:	697b      	ldr	r3, [r7, #20]
  406334:	1e5a      	subs	r2, r3, #1
  406336:	68fb      	ldr	r3, [r7, #12]
  406338:	649a      	str	r2, [r3, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
  40633a:	697b      	ldr	r3, [r7, #20]
  40633c:	1e5a      	subs	r2, r3, #1
  40633e:	68fb      	ldr	r3, [r7, #12]
  406340:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->rcv_wnd = TCP_WND;
  406342:	68fb      	ldr	r3, [r7, #12]
  406344:	f640 3268 	movw	r2, #2920	; 0xb68
  406348:	859a      	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_wnd = TCP_WND;
  40634a:	68fb      	ldr	r3, [r7, #12]
  40634c:	f640 3268 	movw	r2, #2920	; 0xb68
  406350:	85da      	strh	r2, [r3, #46]	; 0x2e
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  406352:	68fb      	ldr	r3, [r7, #12]
  406354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  406356:	68fb      	ldr	r3, [r7, #12]
  406358:	631a      	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  40635a:	68fb      	ldr	r3, [r7, #12]
  40635c:	f640 3268 	movw	r2, #2920	; 0xb68
  406360:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  406364:	68fb      	ldr	r3, [r7, #12]
  406366:	f44f 7206 	mov.w	r2, #536	; 0x218
  40636a:	86da      	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
  40636c:	68fb      	ldr	r3, [r7, #12]
  40636e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406370:	68b9      	ldr	r1, [r7, #8]
  406372:	4618      	mov	r0, r3
  406374:	4b35      	ldr	r3, [pc, #212]	; (40644c <tcp_connect+0x1b8>)
  406376:	4798      	blx	r3
  406378:	4603      	mov	r3, r0
  40637a:	461a      	mov	r2, r3
  40637c:	68fb      	ldr	r3, [r7, #12]
  40637e:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  406380:	68fb      	ldr	r3, [r7, #12]
  406382:	2201      	movs	r2, #1
  406384:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pcb->ssthresh = pcb->mss * 10;
  406388:	68fb      	ldr	r3, [r7, #12]
  40638a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40638c:	461a      	mov	r2, r3
  40638e:	0092      	lsls	r2, r2, #2
  406390:	4413      	add	r3, r2
  406392:	005b      	lsls	r3, r3, #1
  406394:	b29a      	uxth	r2, r3
  406396:	68fb      	ldr	r3, [r7, #12]
  406398:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  40639c:	68fb      	ldr	r3, [r7, #12]
  40639e:	683a      	ldr	r2, [r7, #0]
  4063a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  4063a4:	2102      	movs	r1, #2
  4063a6:	68f8      	ldr	r0, [r7, #12]
  4063a8:	4b29      	ldr	r3, [pc, #164]	; (406450 <tcp_connect+0x1bc>)
  4063aa:	4798      	blx	r3
  4063ac:	4603      	mov	r3, r0
  4063ae:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
  4063b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
  4063b4:	2b00      	cmp	r3, #0
  4063b6:	d13c      	bne.n	406432 <tcp_connect+0x19e>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  4063b8:	68fb      	ldr	r3, [r7, #12]
  4063ba:	2202      	movs	r2, #2
  4063bc:	761a      	strb	r2, [r3, #24]
    if (old_local_port != 0) {
  4063be:	8b7b      	ldrh	r3, [r7, #26]
  4063c0:	2b00      	cmp	r3, #0
  4063c2:	d027      	beq.n	406414 <tcp_connect+0x180>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  4063c4:	4b23      	ldr	r3, [pc, #140]	; (406454 <tcp_connect+0x1c0>)
  4063c6:	681a      	ldr	r2, [r3, #0]
  4063c8:	68fb      	ldr	r3, [r7, #12]
  4063ca:	429a      	cmp	r2, r3
  4063cc:	d105      	bne.n	4063da <tcp_connect+0x146>
  4063ce:	4b21      	ldr	r3, [pc, #132]	; (406454 <tcp_connect+0x1c0>)
  4063d0:	681b      	ldr	r3, [r3, #0]
  4063d2:	68db      	ldr	r3, [r3, #12]
  4063d4:	4a1f      	ldr	r2, [pc, #124]	; (406454 <tcp_connect+0x1c0>)
  4063d6:	6013      	str	r3, [r2, #0]
  4063d8:	e019      	b.n	40640e <tcp_connect+0x17a>
  4063da:	4b1e      	ldr	r3, [pc, #120]	; (406454 <tcp_connect+0x1c0>)
  4063dc:	681b      	ldr	r3, [r3, #0]
  4063de:	4a1e      	ldr	r2, [pc, #120]	; (406458 <tcp_connect+0x1c4>)
  4063e0:	6013      	str	r3, [r2, #0]
  4063e2:	e010      	b.n	406406 <tcp_connect+0x172>
  4063e4:	4b1c      	ldr	r3, [pc, #112]	; (406458 <tcp_connect+0x1c4>)
  4063e6:	681b      	ldr	r3, [r3, #0]
  4063e8:	68da      	ldr	r2, [r3, #12]
  4063ea:	68fb      	ldr	r3, [r7, #12]
  4063ec:	429a      	cmp	r2, r3
  4063ee:	d105      	bne.n	4063fc <tcp_connect+0x168>
  4063f0:	4b19      	ldr	r3, [pc, #100]	; (406458 <tcp_connect+0x1c4>)
  4063f2:	681b      	ldr	r3, [r3, #0]
  4063f4:	68fa      	ldr	r2, [r7, #12]
  4063f6:	68d2      	ldr	r2, [r2, #12]
  4063f8:	60da      	str	r2, [r3, #12]
  4063fa:	e008      	b.n	40640e <tcp_connect+0x17a>
  4063fc:	4b16      	ldr	r3, [pc, #88]	; (406458 <tcp_connect+0x1c4>)
  4063fe:	681b      	ldr	r3, [r3, #0]
  406400:	68db      	ldr	r3, [r3, #12]
  406402:	4a15      	ldr	r2, [pc, #84]	; (406458 <tcp_connect+0x1c4>)
  406404:	6013      	str	r3, [r2, #0]
  406406:	4b14      	ldr	r3, [pc, #80]	; (406458 <tcp_connect+0x1c4>)
  406408:	681b      	ldr	r3, [r3, #0]
  40640a:	2b00      	cmp	r3, #0
  40640c:	d1ea      	bne.n	4063e4 <tcp_connect+0x150>
  40640e:	68fb      	ldr	r3, [r7, #12]
  406410:	2200      	movs	r2, #0
  406412:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  406414:	4b11      	ldr	r3, [pc, #68]	; (40645c <tcp_connect+0x1c8>)
  406416:	681a      	ldr	r2, [r3, #0]
  406418:	68fb      	ldr	r3, [r7, #12]
  40641a:	60da      	str	r2, [r3, #12]
  40641c:	4a0f      	ldr	r2, [pc, #60]	; (40645c <tcp_connect+0x1c8>)
  40641e:	68fb      	ldr	r3, [r7, #12]
  406420:	6013      	str	r3, [r2, #0]
  406422:	4b0f      	ldr	r3, [pc, #60]	; (406460 <tcp_connect+0x1cc>)
  406424:	4798      	blx	r3
  406426:	4b0f      	ldr	r3, [pc, #60]	; (406464 <tcp_connect+0x1d0>)
  406428:	2201      	movs	r2, #1
  40642a:	701a      	strb	r2, [r3, #0]
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
  40642c:	68f8      	ldr	r0, [r7, #12]
  40642e:	4b0e      	ldr	r3, [pc, #56]	; (406468 <tcp_connect+0x1d4>)
  406430:	4798      	blx	r3
  }
  return ret;
  406432:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  406436:	4618      	mov	r0, r3
  406438:	3720      	adds	r7, #32
  40643a:	46bd      	mov	sp, r7
  40643c:	bd80      	pop	{r7, pc}
  40643e:	bf00      	nop
  406440:	00403d5d 	.word	0x00403d5d
  406444:	0040620d 	.word	0x0040620d
  406448:	00406f65 	.word	0x00406f65
  40644c:	00406f8d 	.word	0x00406f8d
  406450:	00409861 	.word	0x00409861
  406454:	204043f8 	.word	0x204043f8
  406458:	204043f4 	.word	0x204043f4
  40645c:	204043e8 	.word	0x204043e8
  406460:	00404bf5 	.word	0x00404bf5
  406464:	204043e4 	.word	0x204043e4
  406468:	00409a95 	.word	0x00409a95

0040646c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  40646c:	b5b0      	push	{r4, r5, r7, lr}
  40646e:	b08a      	sub	sp, #40	; 0x28
  406470:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  406472:	2300      	movs	r3, #0
  406474:	757b      	strb	r3, [r7, #21]

  ++tcp_ticks;
  406476:	4b7f      	ldr	r3, [pc, #508]	; (406674 <tcp_slowtmr+0x208>)
  406478:	681b      	ldr	r3, [r3, #0]
  40647a:	3301      	adds	r3, #1
  40647c:	4a7d      	ldr	r2, [pc, #500]	; (406674 <tcp_slowtmr+0x208>)
  40647e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  406480:	4b7d      	ldr	r3, [pc, #500]	; (406678 <tcp_slowtmr+0x20c>)
  406482:	781b      	ldrb	r3, [r3, #0]
  406484:	3301      	adds	r3, #1
  406486:	b2da      	uxtb	r2, r3
  406488:	4b7b      	ldr	r3, [pc, #492]	; (406678 <tcp_slowtmr+0x20c>)
  40648a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  40648c:	2300      	movs	r3, #0
  40648e:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
  406490:	4b7a      	ldr	r3, [pc, #488]	; (40667c <tcp_slowtmr+0x210>)
  406492:	681b      	ldr	r3, [r3, #0]
  406494:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  406496:	e1d3      	b.n	406840 <tcp_slowtmr+0x3d4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  406498:	69fb      	ldr	r3, [r7, #28]
  40649a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  40649e:	4b76      	ldr	r3, [pc, #472]	; (406678 <tcp_slowtmr+0x20c>)
  4064a0:	781b      	ldrb	r3, [r3, #0]
  4064a2:	429a      	cmp	r2, r3
  4064a4:	d103      	bne.n	4064ae <tcp_slowtmr+0x42>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  4064a6:	69fb      	ldr	r3, [r7, #28]
  4064a8:	68db      	ldr	r3, [r3, #12]
  4064aa:	61fb      	str	r3, [r7, #28]
      continue;
  4064ac:	e1c8      	b.n	406840 <tcp_slowtmr+0x3d4>
    }
    pcb->last_timer = tcp_timer_ctr;
  4064ae:	4b72      	ldr	r3, [pc, #456]	; (406678 <tcp_slowtmr+0x20c>)
  4064b0:	781a      	ldrb	r2, [r3, #0]
  4064b2:	69fb      	ldr	r3, [r7, #28]
  4064b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  4064b8:	2300      	movs	r3, #0
  4064ba:	75fb      	strb	r3, [r7, #23]
    pcb_reset = 0;
  4064bc:	2300      	movs	r3, #0
  4064be:	75bb      	strb	r3, [r7, #22]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  4064c0:	69fb      	ldr	r3, [r7, #28]
  4064c2:	7e1b      	ldrb	r3, [r3, #24]
  4064c4:	2b02      	cmp	r3, #2
  4064c6:	d108      	bne.n	4064da <tcp_slowtmr+0x6e>
  4064c8:	69fb      	ldr	r3, [r7, #28]
  4064ca:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  4064ce:	2b06      	cmp	r3, #6
  4064d0:	d103      	bne.n	4064da <tcp_slowtmr+0x6e>
      ++pcb_remove;
  4064d2:	7dfb      	ldrb	r3, [r7, #23]
  4064d4:	3301      	adds	r3, #1
  4064d6:	75fb      	strb	r3, [r7, #23]
  4064d8:	e093      	b.n	406602 <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  4064da:	69fb      	ldr	r3, [r7, #28]
  4064dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  4064e0:	2b0c      	cmp	r3, #12
  4064e2:	d103      	bne.n	4064ec <tcp_slowtmr+0x80>
      ++pcb_remove;
  4064e4:	7dfb      	ldrb	r3, [r7, #23]
  4064e6:	3301      	adds	r3, #1
  4064e8:	75fb      	strb	r3, [r7, #23]
  4064ea:	e08a      	b.n	406602 <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  4064ec:	69fb      	ldr	r3, [r7, #28]
  4064ee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  4064f2:	2b00      	cmp	r3, #0
  4064f4:	d027      	beq.n	406546 <tcp_slowtmr+0xda>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  4064f6:	69fb      	ldr	r3, [r7, #28]
  4064f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  4064fc:	3301      	adds	r3, #1
  4064fe:	b2da      	uxtb	r2, r3
  406500:	69fb      	ldr	r3, [r7, #28]
  406502:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  406506:	69fb      	ldr	r3, [r7, #28]
  406508:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
  40650c:	69fb      	ldr	r3, [r7, #28]
  40650e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406512:	3b01      	subs	r3, #1
  406514:	495a      	ldr	r1, [pc, #360]	; (406680 <tcp_slowtmr+0x214>)
  406516:	5ccb      	ldrb	r3, [r1, r3]
  406518:	429a      	cmp	r2, r3
  40651a:	d372      	bcc.n	406602 <tcp_slowtmr+0x196>
          pcb->persist_cnt = 0;
  40651c:	69fb      	ldr	r3, [r7, #28]
  40651e:	2200      	movs	r2, #0
  406520:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  406524:	69fb      	ldr	r3, [r7, #28]
  406526:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  40652a:	2b06      	cmp	r3, #6
  40652c:	d807      	bhi.n	40653e <tcp_slowtmr+0xd2>
            pcb->persist_backoff++;
  40652e:	69fb      	ldr	r3, [r7, #28]
  406530:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406534:	3301      	adds	r3, #1
  406536:	b2da      	uxtb	r2, r3
  406538:	69fb      	ldr	r3, [r7, #28]
  40653a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
          }
          tcp_zero_window_probe(pcb);
  40653e:	69f8      	ldr	r0, [r7, #28]
  406540:	4b50      	ldr	r3, [pc, #320]	; (406684 <tcp_slowtmr+0x218>)
  406542:	4798      	blx	r3
  406544:	e05d      	b.n	406602 <tcp_slowtmr+0x196>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
  406546:	69fb      	ldr	r3, [r7, #28]
  406548:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  40654c:	2b00      	cmp	r3, #0
  40654e:	db08      	blt.n	406562 <tcp_slowtmr+0xf6>
          ++pcb->rtime;
  406550:	69fb      	ldr	r3, [r7, #28]
  406552:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  406556:	b29b      	uxth	r3, r3
  406558:	3301      	adds	r3, #1
  40655a:	b29b      	uxth	r3, r3
  40655c:	b21a      	sxth	r2, r3
  40655e:	69fb      	ldr	r3, [r7, #28]
  406560:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  406562:	69fb      	ldr	r3, [r7, #28]
  406564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406566:	2b00      	cmp	r3, #0
  406568:	d04b      	beq.n	406602 <tcp_slowtmr+0x196>
  40656a:	69fb      	ldr	r3, [r7, #28]
  40656c:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
  406570:	69fb      	ldr	r3, [r7, #28]
  406572:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  406576:	429a      	cmp	r2, r3
  406578:	db43      	blt.n	406602 <tcp_slowtmr+0x196>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  40657a:	69fb      	ldr	r3, [r7, #28]
  40657c:	7e1b      	ldrb	r3, [r3, #24]
  40657e:	2b02      	cmp	r3, #2
  406580:	d014      	beq.n	4065ac <tcp_slowtmr+0x140>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  406582:	69fb      	ldr	r3, [r7, #28]
  406584:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  406588:	10db      	asrs	r3, r3, #3
  40658a:	b21b      	sxth	r3, r3
  40658c:	461a      	mov	r2, r3
  40658e:	69fb      	ldr	r3, [r7, #28]
  406590:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  406594:	4413      	add	r3, r2
  406596:	69fa      	ldr	r2, [r7, #28]
  406598:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
  40659c:	4611      	mov	r1, r2
  40659e:	4a3a      	ldr	r2, [pc, #232]	; (406688 <tcp_slowtmr+0x21c>)
  4065a0:	5c52      	ldrb	r2, [r2, r1]
  4065a2:	4093      	lsls	r3, r2
  4065a4:	b21a      	sxth	r2, r3
  4065a6:	69fb      	ldr	r3, [r7, #28]
  4065a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  4065ac:	69fb      	ldr	r3, [r7, #28]
  4065ae:	2200      	movs	r2, #0
  4065b0:	869a      	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  4065b2:	69fb      	ldr	r3, [r7, #28]
  4065b4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  4065b8:	69fb      	ldr	r3, [r7, #28]
  4065ba:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  4065be:	4293      	cmp	r3, r2
  4065c0:	bf28      	it	cs
  4065c2:	4613      	movcs	r3, r2
  4065c4:	827b      	strh	r3, [r7, #18]
          pcb->ssthresh = eff_wnd >> 1;
  4065c6:	8a7b      	ldrh	r3, [r7, #18]
  4065c8:	085b      	lsrs	r3, r3, #1
  4065ca:	b29a      	uxth	r2, r3
  4065cc:	69fb      	ldr	r3, [r7, #28]
  4065ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  4065d2:	69fb      	ldr	r3, [r7, #28]
  4065d4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  4065d8:	461a      	mov	r2, r3
  4065da:	69fb      	ldr	r3, [r7, #28]
  4065dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  4065de:	005b      	lsls	r3, r3, #1
  4065e0:	429a      	cmp	r2, r3
  4065e2:	da06      	bge.n	4065f2 <tcp_slowtmr+0x186>
            pcb->ssthresh = (pcb->mss << 1);
  4065e4:	69fb      	ldr	r3, [r7, #28]
  4065e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  4065e8:	005b      	lsls	r3, r3, #1
  4065ea:	b29a      	uxth	r2, r3
  4065ec:	69fb      	ldr	r3, [r7, #28]
  4065ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  4065f2:	69fb      	ldr	r3, [r7, #28]
  4065f4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  4065f6:	69fb      	ldr	r3, [r7, #28]
  4065f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  4065fc:	69f8      	ldr	r0, [r7, #28]
  4065fe:	4b23      	ldr	r3, [pc, #140]	; (40668c <tcp_slowtmr+0x220>)
  406600:	4798      	blx	r3
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  406602:	69fb      	ldr	r3, [r7, #28]
  406604:	7e1b      	ldrb	r3, [r3, #24]
  406606:	2b06      	cmp	r3, #6
  406608:	d10f      	bne.n	40662a <tcp_slowtmr+0x1be>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  40660a:	69fb      	ldr	r3, [r7, #28]
  40660c:	7f9b      	ldrb	r3, [r3, #30]
  40660e:	f003 0310 	and.w	r3, r3, #16
  406612:	2b00      	cmp	r3, #0
  406614:	d009      	beq.n	40662a <tcp_slowtmr+0x1be>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  406616:	4b17      	ldr	r3, [pc, #92]	; (406674 <tcp_slowtmr+0x208>)
  406618:	681a      	ldr	r2, [r3, #0]
  40661a:	69fb      	ldr	r3, [r7, #28]
  40661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40661e:	1ad3      	subs	r3, r2, r3
  406620:	2b28      	cmp	r3, #40	; 0x28
  406622:	d902      	bls.n	40662a <tcp_slowtmr+0x1be>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  406624:	7dfb      	ldrb	r3, [r7, #23]
  406626:	3301      	adds	r3, #1
  406628:	75fb      	strb	r3, [r7, #23]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  40662a:	69fb      	ldr	r3, [r7, #28]
  40662c:	7a1b      	ldrb	r3, [r3, #8]
  40662e:	f003 0308 	and.w	r3, r3, #8
  406632:	2b00      	cmp	r3, #0
  406634:	d051      	beq.n	4066da <tcp_slowtmr+0x26e>
       ((pcb->state == ESTABLISHED) ||
  406636:	69fb      	ldr	r3, [r7, #28]
  406638:	7e1b      	ldrb	r3, [r3, #24]
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  40663a:	2b04      	cmp	r3, #4
  40663c:	d003      	beq.n	406646 <tcp_slowtmr+0x1da>
        (pcb->state == CLOSE_WAIT))) {
  40663e:	69fb      	ldr	r3, [r7, #28]
  406640:	7e1b      	ldrb	r3, [r3, #24]
       ((pcb->state == ESTABLISHED) ||
  406642:	2b07      	cmp	r3, #7
  406644:	d149      	bne.n	4066da <tcp_slowtmr+0x26e>
      if((u32_t)(tcp_ticks - pcb->tmr) >
  406646:	4b0b      	ldr	r3, [pc, #44]	; (406674 <tcp_slowtmr+0x208>)
  406648:	681a      	ldr	r2, [r3, #0]
  40664a:	69fb      	ldr	r3, [r7, #28]
  40664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40664e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  406650:	69fb      	ldr	r3, [r7, #28]
  406652:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  406656:	4b0e      	ldr	r3, [pc, #56]	; (406690 <tcp_slowtmr+0x224>)
  406658:	440b      	add	r3, r1
  40665a:	490e      	ldr	r1, [pc, #56]	; (406694 <tcp_slowtmr+0x228>)
  40665c:	fba1 1303 	umull	r1, r3, r1, r3
  406660:	095b      	lsrs	r3, r3, #5
      if((u32_t)(tcp_ticks - pcb->tmr) >
  406662:	429a      	cmp	r2, r3
  406664:	d918      	bls.n	406698 <tcp_slowtmr+0x22c>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
  406666:	7dfb      	ldrb	r3, [r7, #23]
  406668:	3301      	adds	r3, #1
  40666a:	75fb      	strb	r3, [r7, #23]
        ++pcb_reset;
  40666c:	7dbb      	ldrb	r3, [r7, #22]
  40666e:	3301      	adds	r3, #1
  406670:	75bb      	strb	r3, [r7, #22]
  406672:	e032      	b.n	4066da <tcp_slowtmr+0x26e>
  406674:	204043ec 	.word	0x204043ec
  406678:	20402051 	.word	0x20402051
  40667c:	204043e8 	.word	0x204043e8
  406680:	0040cdf4 	.word	0x0040cdf4
  406684:	0040a205 	.word	0x0040a205
  406688:	0040cde4 	.word	0x0040cde4
  40668c:	00409fcd 	.word	0x00409fcd
  406690:	000a4cb8 	.word	0x000a4cb8
  406694:	10624dd3 	.word	0x10624dd3
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  406698:	4b88      	ldr	r3, [pc, #544]	; (4068bc <tcp_slowtmr+0x450>)
  40669a:	681a      	ldr	r2, [r3, #0]
  40669c:	69fb      	ldr	r3, [r7, #28]
  40669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4066a0:	1ad2      	subs	r2, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  4066a2:	69fb      	ldr	r3, [r7, #28]
  4066a4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  4066a8:	69fb      	ldr	r3, [r7, #28]
  4066aa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  4066ae:	4618      	mov	r0, r3
  4066b0:	4b83      	ldr	r3, [pc, #524]	; (4068c0 <tcp_slowtmr+0x454>)
  4066b2:	fb03 f300 	mul.w	r3, r3, r0
  4066b6:	440b      	add	r3, r1
              / TCP_SLOW_INTERVAL)
  4066b8:	4982      	ldr	r1, [pc, #520]	; (4068c4 <tcp_slowtmr+0x458>)
  4066ba:	fba1 1303 	umull	r1, r3, r1, r3
  4066be:	095b      	lsrs	r3, r3, #5
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  4066c0:	429a      	cmp	r2, r3
  4066c2:	d90a      	bls.n	4066da <tcp_slowtmr+0x26e>
      {
        tcp_keepalive(pcb);
  4066c4:	69f8      	ldr	r0, [r7, #28]
  4066c6:	4b80      	ldr	r3, [pc, #512]	; (4068c8 <tcp_slowtmr+0x45c>)
  4066c8:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  4066ca:	69fb      	ldr	r3, [r7, #28]
  4066cc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  4066d0:	3301      	adds	r3, #1
  4066d2:	b2da      	uxtb	r2, r3
  4066d4:	69fb      	ldr	r3, [r7, #28]
  4066d6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  4066da:	69fb      	ldr	r3, [r7, #28]
  4066dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4066de:	2b00      	cmp	r3, #0
  4066e0:	d016      	beq.n	406710 <tcp_slowtmr+0x2a4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  4066e2:	4b76      	ldr	r3, [pc, #472]	; (4068bc <tcp_slowtmr+0x450>)
  4066e4:	681a      	ldr	r2, [r3, #0]
  4066e6:	69fb      	ldr	r3, [r7, #28]
  4066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4066ea:	1ad2      	subs	r2, r2, r3
  4066ec:	69fb      	ldr	r3, [r7, #28]
  4066ee:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  4066f2:	4619      	mov	r1, r3
  4066f4:	460b      	mov	r3, r1
  4066f6:	005b      	lsls	r3, r3, #1
  4066f8:	440b      	add	r3, r1
  4066fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
  4066fc:	429a      	cmp	r2, r3
  4066fe:	d307      	bcc.n	406710 <tcp_slowtmr+0x2a4>
      tcp_segs_free(pcb->ooseq);
  406700:	69fb      	ldr	r3, [r7, #28]
  406702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406704:	4618      	mov	r0, r3
  406706:	4b71      	ldr	r3, [pc, #452]	; (4068cc <tcp_slowtmr+0x460>)
  406708:	4798      	blx	r3
      pcb->ooseq = NULL;
  40670a:	69fb      	ldr	r3, [r7, #28]
  40670c:	2200      	movs	r2, #0
  40670e:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  406710:	69fb      	ldr	r3, [r7, #28]
  406712:	7e1b      	ldrb	r3, [r3, #24]
  406714:	2b03      	cmp	r3, #3
  406716:	d109      	bne.n	40672c <tcp_slowtmr+0x2c0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  406718:	4b68      	ldr	r3, [pc, #416]	; (4068bc <tcp_slowtmr+0x450>)
  40671a:	681a      	ldr	r2, [r3, #0]
  40671c:	69fb      	ldr	r3, [r7, #28]
  40671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406720:	1ad3      	subs	r3, r2, r3
  406722:	2b28      	cmp	r3, #40	; 0x28
  406724:	d902      	bls.n	40672c <tcp_slowtmr+0x2c0>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  406726:	7dfb      	ldrb	r3, [r7, #23]
  406728:	3301      	adds	r3, #1
  40672a:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  40672c:	69fb      	ldr	r3, [r7, #28]
  40672e:	7e1b      	ldrb	r3, [r3, #24]
  406730:	2b09      	cmp	r3, #9
  406732:	d109      	bne.n	406748 <tcp_slowtmr+0x2dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406734:	4b61      	ldr	r3, [pc, #388]	; (4068bc <tcp_slowtmr+0x450>)
  406736:	681a      	ldr	r2, [r3, #0]
  406738:	69fb      	ldr	r3, [r7, #28]
  40673a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40673c:	1ad3      	subs	r3, r2, r3
  40673e:	2bf0      	cmp	r3, #240	; 0xf0
  406740:	d902      	bls.n	406748 <tcp_slowtmr+0x2dc>
        ++pcb_remove;
  406742:	7dfb      	ldrb	r3, [r7, #23]
  406744:	3301      	adds	r3, #1
  406746:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  406748:	7dfb      	ldrb	r3, [r7, #23]
  40674a:	2b00      	cmp	r3, #0
  40674c:	d042      	beq.n	4067d4 <tcp_slowtmr+0x368>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
  40674e:	69f8      	ldr	r0, [r7, #28]
  406750:	4b5f      	ldr	r3, [pc, #380]	; (4068d0 <tcp_slowtmr+0x464>)
  406752:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  406754:	69bb      	ldr	r3, [r7, #24]
  406756:	2b00      	cmp	r3, #0
  406758:	d004      	beq.n	406764 <tcp_slowtmr+0x2f8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
  40675a:	69fb      	ldr	r3, [r7, #28]
  40675c:	68da      	ldr	r2, [r3, #12]
  40675e:	69bb      	ldr	r3, [r7, #24]
  406760:	60da      	str	r2, [r3, #12]
  406762:	e003      	b.n	40676c <tcp_slowtmr+0x300>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
  406764:	69fb      	ldr	r3, [r7, #28]
  406766:	68db      	ldr	r3, [r3, #12]
  406768:	4a5a      	ldr	r2, [pc, #360]	; (4068d4 <tcp_slowtmr+0x468>)
  40676a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
  40676c:	7dbb      	ldrb	r3, [r7, #22]
  40676e:	2b00      	cmp	r3, #0
  406770:	d010      	beq.n	406794 <tcp_slowtmr+0x328>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  406772:	69fb      	ldr	r3, [r7, #28]
  406774:	6d18      	ldr	r0, [r3, #80]	; 0x50
  406776:	69fb      	ldr	r3, [r7, #28]
  406778:	6a99      	ldr	r1, [r3, #40]	; 0x28
  40677a:	69fc      	ldr	r4, [r7, #28]
  40677c:	69fb      	ldr	r3, [r7, #28]
  40677e:	1d1d      	adds	r5, r3, #4
  406780:	69fb      	ldr	r3, [r7, #28]
  406782:	8b5b      	ldrh	r3, [r3, #26]
  406784:	69fa      	ldr	r2, [r7, #28]
  406786:	8b92      	ldrh	r2, [r2, #28]
  406788:	9201      	str	r2, [sp, #4]
  40678a:	9300      	str	r3, [sp, #0]
  40678c:	462b      	mov	r3, r5
  40678e:	4622      	mov	r2, r4
  406790:	4c51      	ldr	r4, [pc, #324]	; (4068d8 <tcp_slowtmr+0x46c>)
  406792:	47a0      	blx	r4
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
  406794:	69fb      	ldr	r3, [r7, #28]
  406796:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  40679a:	60fb      	str	r3, [r7, #12]
      err_arg = pcb->callback_arg;
  40679c:	69fb      	ldr	r3, [r7, #28]
  40679e:	691b      	ldr	r3, [r3, #16]
  4067a0:	60bb      	str	r3, [r7, #8]
      pcb2 = pcb;
  4067a2:	69fb      	ldr	r3, [r7, #28]
  4067a4:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
  4067a6:	69fb      	ldr	r3, [r7, #28]
  4067a8:	68db      	ldr	r3, [r3, #12]
  4067aa:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  4067ac:	6879      	ldr	r1, [r7, #4]
  4067ae:	2001      	movs	r0, #1
  4067b0:	4b4a      	ldr	r3, [pc, #296]	; (4068dc <tcp_slowtmr+0x470>)
  4067b2:	4798      	blx	r3

      tcp_active_pcbs_changed = 0;
  4067b4:	4b4a      	ldr	r3, [pc, #296]	; (4068e0 <tcp_slowtmr+0x474>)
  4067b6:	2200      	movs	r2, #0
  4067b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  4067ba:	68fb      	ldr	r3, [r7, #12]
  4067bc:	2b00      	cmp	r3, #0
  4067be:	d004      	beq.n	4067ca <tcp_slowtmr+0x35e>
  4067c0:	68fb      	ldr	r3, [r7, #12]
  4067c2:	f06f 0109 	mvn.w	r1, #9
  4067c6:	68b8      	ldr	r0, [r7, #8]
  4067c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
  4067ca:	4b45      	ldr	r3, [pc, #276]	; (4068e0 <tcp_slowtmr+0x474>)
  4067cc:	781b      	ldrb	r3, [r3, #0]
  4067ce:	2b00      	cmp	r3, #0
  4067d0:	d036      	beq.n	406840 <tcp_slowtmr+0x3d4>
        goto tcp_slowtmr_start;
  4067d2:	e65b      	b.n	40648c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  4067d4:	69fb      	ldr	r3, [r7, #28]
  4067d6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  4067d8:	69fb      	ldr	r3, [r7, #28]
  4067da:	68db      	ldr	r3, [r3, #12]
  4067dc:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  4067de:	69bb      	ldr	r3, [r7, #24]
  4067e0:	7fdb      	ldrb	r3, [r3, #31]
  4067e2:	3301      	adds	r3, #1
  4067e4:	b2da      	uxtb	r2, r3
  4067e6:	69bb      	ldr	r3, [r7, #24]
  4067e8:	77da      	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  4067ea:	69bb      	ldr	r3, [r7, #24]
  4067ec:	7fda      	ldrb	r2, [r3, #31]
  4067ee:	69bb      	ldr	r3, [r7, #24]
  4067f0:	f893 3020 	ldrb.w	r3, [r3, #32]
  4067f4:	429a      	cmp	r2, r3
  4067f6:	d323      	bcc.n	406840 <tcp_slowtmr+0x3d4>
        prev->polltmr = 0;
  4067f8:	69bb      	ldr	r3, [r7, #24]
  4067fa:	2200      	movs	r2, #0
  4067fc:	77da      	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  4067fe:	4b38      	ldr	r3, [pc, #224]	; (4068e0 <tcp_slowtmr+0x474>)
  406800:	2200      	movs	r2, #0
  406802:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
  406804:	69bb      	ldr	r3, [r7, #24]
  406806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  40680a:	2b00      	cmp	r3, #0
  40680c:	d00a      	beq.n	406824 <tcp_slowtmr+0x3b8>
  40680e:	69bb      	ldr	r3, [r7, #24]
  406810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  406814:	69ba      	ldr	r2, [r7, #24]
  406816:	6912      	ldr	r2, [r2, #16]
  406818:	69b9      	ldr	r1, [r7, #24]
  40681a:	4610      	mov	r0, r2
  40681c:	4798      	blx	r3
  40681e:	4603      	mov	r3, r0
  406820:	757b      	strb	r3, [r7, #21]
  406822:	e001      	b.n	406828 <tcp_slowtmr+0x3bc>
  406824:	2300      	movs	r3, #0
  406826:	757b      	strb	r3, [r7, #21]
        if (tcp_active_pcbs_changed) {
  406828:	4b2d      	ldr	r3, [pc, #180]	; (4068e0 <tcp_slowtmr+0x474>)
  40682a:	781b      	ldrb	r3, [r3, #0]
  40682c:	2b00      	cmp	r3, #0
  40682e:	d000      	beq.n	406832 <tcp_slowtmr+0x3c6>
          goto tcp_slowtmr_start;
  406830:	e62c      	b.n	40648c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  406832:	f997 3015 	ldrsb.w	r3, [r7, #21]
  406836:	2b00      	cmp	r3, #0
  406838:	d102      	bne.n	406840 <tcp_slowtmr+0x3d4>
          tcp_output(prev);
  40683a:	69b8      	ldr	r0, [r7, #24]
  40683c:	4b29      	ldr	r3, [pc, #164]	; (4068e4 <tcp_slowtmr+0x478>)
  40683e:	4798      	blx	r3
  while (pcb != NULL) {
  406840:	69fb      	ldr	r3, [r7, #28]
  406842:	2b00      	cmp	r3, #0
  406844:	f47f ae28 	bne.w	406498 <tcp_slowtmr+0x2c>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  406848:	2300      	movs	r3, #0
  40684a:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
  40684c:	4b26      	ldr	r3, [pc, #152]	; (4068e8 <tcp_slowtmr+0x47c>)
  40684e:	681b      	ldr	r3, [r3, #0]
  406850:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
  406852:	e02c      	b.n	4068ae <tcp_slowtmr+0x442>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
  406854:	2300      	movs	r3, #0
  406856:	75fb      	strb	r3, [r7, #23]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406858:	4b18      	ldr	r3, [pc, #96]	; (4068bc <tcp_slowtmr+0x450>)
  40685a:	681a      	ldr	r2, [r3, #0]
  40685c:	69fb      	ldr	r3, [r7, #28]
  40685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406860:	1ad3      	subs	r3, r2, r3
  406862:	2bf0      	cmp	r3, #240	; 0xf0
  406864:	d902      	bls.n	40686c <tcp_slowtmr+0x400>
      ++pcb_remove;
  406866:	7dfb      	ldrb	r3, [r7, #23]
  406868:	3301      	adds	r3, #1
  40686a:	75fb      	strb	r3, [r7, #23]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  40686c:	7dfb      	ldrb	r3, [r7, #23]
  40686e:	2b00      	cmp	r3, #0
  406870:	d018      	beq.n	4068a4 <tcp_slowtmr+0x438>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  406872:	69f8      	ldr	r0, [r7, #28]
  406874:	4b16      	ldr	r3, [pc, #88]	; (4068d0 <tcp_slowtmr+0x464>)
  406876:	4798      	blx	r3
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  406878:	69bb      	ldr	r3, [r7, #24]
  40687a:	2b00      	cmp	r3, #0
  40687c:	d004      	beq.n	406888 <tcp_slowtmr+0x41c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
  40687e:	69fb      	ldr	r3, [r7, #28]
  406880:	68da      	ldr	r2, [r3, #12]
  406882:	69bb      	ldr	r3, [r7, #24]
  406884:	60da      	str	r2, [r3, #12]
  406886:	e003      	b.n	406890 <tcp_slowtmr+0x424>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
  406888:	69fb      	ldr	r3, [r7, #28]
  40688a:	68db      	ldr	r3, [r3, #12]
  40688c:	4a16      	ldr	r2, [pc, #88]	; (4068e8 <tcp_slowtmr+0x47c>)
  40688e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
  406890:	69fb      	ldr	r3, [r7, #28]
  406892:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
  406894:	69fb      	ldr	r3, [r7, #28]
  406896:	68db      	ldr	r3, [r3, #12]
  406898:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  40689a:	6839      	ldr	r1, [r7, #0]
  40689c:	2001      	movs	r0, #1
  40689e:	4b0f      	ldr	r3, [pc, #60]	; (4068dc <tcp_slowtmr+0x470>)
  4068a0:	4798      	blx	r3
  4068a2:	e004      	b.n	4068ae <tcp_slowtmr+0x442>
    } else {
      prev = pcb;
  4068a4:	69fb      	ldr	r3, [r7, #28]
  4068a6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  4068a8:	69fb      	ldr	r3, [r7, #28]
  4068aa:	68db      	ldr	r3, [r3, #12]
  4068ac:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
  4068ae:	69fb      	ldr	r3, [r7, #28]
  4068b0:	2b00      	cmp	r3, #0
  4068b2:	d1cf      	bne.n	406854 <tcp_slowtmr+0x3e8>
    }
  }
}
  4068b4:	bf00      	nop
  4068b6:	3720      	adds	r7, #32
  4068b8:	46bd      	mov	sp, r7
  4068ba:	bdb0      	pop	{r4, r5, r7, pc}
  4068bc:	204043ec 	.word	0x204043ec
  4068c0:	000124f8 	.word	0x000124f8
  4068c4:	10624dd3 	.word	0x10624dd3
  4068c8:	0040a17d 	.word	0x0040a17d
  4068cc:	00406a6d 	.word	0x00406a6d
  4068d0:	00406e2d 	.word	0x00406e2d
  4068d4:	204043e8 	.word	0x204043e8
  4068d8:	00409ee1 	.word	0x00409ee1
  4068dc:	00405365 	.word	0x00405365
  4068e0:	204043e4 	.word	0x204043e4
  4068e4:	00409a95 	.word	0x00409a95
  4068e8:	204043fc 	.word	0x204043fc

004068ec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  4068ec:	b580      	push	{r7, lr}
  4068ee:	b082      	sub	sp, #8
  4068f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  4068f2:	4b24      	ldr	r3, [pc, #144]	; (406984 <tcp_fasttmr+0x98>)
  4068f4:	781b      	ldrb	r3, [r3, #0]
  4068f6:	3301      	adds	r3, #1
  4068f8:	b2da      	uxtb	r2, r3
  4068fa:	4b22      	ldr	r3, [pc, #136]	; (406984 <tcp_fasttmr+0x98>)
  4068fc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  4068fe:	4b22      	ldr	r3, [pc, #136]	; (406988 <tcp_fasttmr+0x9c>)
  406900:	681b      	ldr	r3, [r3, #0]
  406902:	607b      	str	r3, [r7, #4]

  while(pcb != NULL) {
  406904:	e036      	b.n	406974 <tcp_fasttmr+0x88>
    if (pcb->last_timer != tcp_timer_ctr) {
  406906:	687b      	ldr	r3, [r7, #4]
  406908:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  40690c:	4b1d      	ldr	r3, [pc, #116]	; (406984 <tcp_fasttmr+0x98>)
  40690e:	781b      	ldrb	r3, [r3, #0]
  406910:	429a      	cmp	r2, r3
  406912:	d02f      	beq.n	406974 <tcp_fasttmr+0x88>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  406914:	4b1b      	ldr	r3, [pc, #108]	; (406984 <tcp_fasttmr+0x98>)
  406916:	781a      	ldrb	r2, [r3, #0]
  406918:	687b      	ldr	r3, [r7, #4]
  40691a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  40691e:	687b      	ldr	r3, [r7, #4]
  406920:	7f9b      	ldrb	r3, [r3, #30]
  406922:	f003 0301 	and.w	r3, r3, #1
  406926:	2b00      	cmp	r3, #0
  406928:	d010      	beq.n	40694c <tcp_fasttmr+0x60>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  40692a:	687b      	ldr	r3, [r7, #4]
  40692c:	7f9b      	ldrb	r3, [r3, #30]
  40692e:	f043 0302 	orr.w	r3, r3, #2
  406932:	b2da      	uxtb	r2, r3
  406934:	687b      	ldr	r3, [r7, #4]
  406936:	779a      	strb	r2, [r3, #30]
        tcp_output(pcb);
  406938:	6878      	ldr	r0, [r7, #4]
  40693a:	4b14      	ldr	r3, [pc, #80]	; (40698c <tcp_fasttmr+0xa0>)
  40693c:	4798      	blx	r3
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  40693e:	687b      	ldr	r3, [r7, #4]
  406940:	7f9b      	ldrb	r3, [r3, #30]
  406942:	f023 0303 	bic.w	r3, r3, #3
  406946:	b2da      	uxtb	r2, r3
  406948:	687b      	ldr	r3, [r7, #4]
  40694a:	779a      	strb	r2, [r3, #30]
      }

      next = pcb->next;
  40694c:	687b      	ldr	r3, [r7, #4]
  40694e:	68db      	ldr	r3, [r3, #12]
  406950:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  406952:	687b      	ldr	r3, [r7, #4]
  406954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406956:	2b00      	cmp	r3, #0
  406958:	d00a      	beq.n	406970 <tcp_fasttmr+0x84>
        tcp_active_pcbs_changed = 0;
  40695a:	4b0d      	ldr	r3, [pc, #52]	; (406990 <tcp_fasttmr+0xa4>)
  40695c:	2200      	movs	r2, #0
  40695e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
  406960:	6878      	ldr	r0, [r7, #4]
  406962:	4b0c      	ldr	r3, [pc, #48]	; (406994 <tcp_fasttmr+0xa8>)
  406964:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  406966:	4b0a      	ldr	r3, [pc, #40]	; (406990 <tcp_fasttmr+0xa4>)
  406968:	781b      	ldrb	r3, [r3, #0]
  40696a:	2b00      	cmp	r3, #0
  40696c:	d000      	beq.n	406970 <tcp_fasttmr+0x84>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  40696e:	e7c6      	b.n	4068fe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
  406970:	683b      	ldr	r3, [r7, #0]
  406972:	607b      	str	r3, [r7, #4]
  while(pcb != NULL) {
  406974:	687b      	ldr	r3, [r7, #4]
  406976:	2b00      	cmp	r3, #0
  406978:	d1c5      	bne.n	406906 <tcp_fasttmr+0x1a>
    }
  }
}
  40697a:	bf00      	nop
  40697c:	3708      	adds	r7, #8
  40697e:	46bd      	mov	sp, r7
  406980:	bd80      	pop	{r7, pc}
  406982:	bf00      	nop
  406984:	20402051 	.word	0x20402051
  406988:	204043e8 	.word	0x204043e8
  40698c:	00409a95 	.word	0x00409a95
  406990:	204043e4 	.word	0x204043e4
  406994:	00406999 	.word	0x00406999

00406998 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  406998:	b590      	push	{r4, r7, lr}
  40699a:	b085      	sub	sp, #20
  40699c:	af00      	add	r7, sp, #0
  40699e:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  4069a0:	687b      	ldr	r3, [r7, #4]
  4069a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  4069a4:	7b5b      	ldrb	r3, [r3, #13]
  4069a6:	73bb      	strb	r3, [r7, #14]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  4069a8:	687b      	ldr	r3, [r7, #4]
  4069aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  4069ac:	60bb      	str	r3, [r7, #8]
  pcb->refused_data = NULL;
  4069ae:	687b      	ldr	r3, [r7, #4]
  4069b0:	2200      	movs	r2, #0
  4069b2:	679a      	str	r2, [r3, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  4069b4:	687b      	ldr	r3, [r7, #4]
  4069b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4069ba:	2b00      	cmp	r3, #0
  4069bc:	d00b      	beq.n	4069d6 <tcp_process_refused_data+0x3e>
  4069be:	687b      	ldr	r3, [r7, #4]
  4069c0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  4069c4:	687b      	ldr	r3, [r7, #4]
  4069c6:	6918      	ldr	r0, [r3, #16]
  4069c8:	2300      	movs	r3, #0
  4069ca:	68ba      	ldr	r2, [r7, #8]
  4069cc:	6879      	ldr	r1, [r7, #4]
  4069ce:	47a0      	blx	r4
  4069d0:	4603      	mov	r3, r0
  4069d2:	73fb      	strb	r3, [r7, #15]
  4069d4:	e007      	b.n	4069e6 <tcp_process_refused_data+0x4e>
  4069d6:	2300      	movs	r3, #0
  4069d8:	68ba      	ldr	r2, [r7, #8]
  4069da:	6879      	ldr	r1, [r7, #4]
  4069dc:	2000      	movs	r0, #0
  4069de:	4c22      	ldr	r4, [pc, #136]	; (406a68 <tcp_process_refused_data+0xd0>)
  4069e0:	47a0      	blx	r4
  4069e2:	4603      	mov	r3, r0
  4069e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
  4069e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4069ea:	2b00      	cmp	r3, #0
  4069ec:	d12b      	bne.n	406a46 <tcp_process_refused_data+0xae>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  4069ee:	7bbb      	ldrb	r3, [r7, #14]
  4069f0:	f003 0320 	and.w	r3, r3, #32
  4069f4:	2b00      	cmp	r3, #0
  4069f6:	d031      	beq.n	406a5c <tcp_process_refused_data+0xc4>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
  4069f8:	687b      	ldr	r3, [r7, #4]
  4069fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  4069fc:	f640 3268 	movw	r2, #2920	; 0xb68
  406a00:	4293      	cmp	r3, r2
  406a02:	d005      	beq.n	406a10 <tcp_process_refused_data+0x78>
        pcb->rcv_wnd++;
  406a04:	687b      	ldr	r3, [r7, #4]
  406a06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406a08:	3301      	adds	r3, #1
  406a0a:	b29a      	uxth	r2, r3
  406a0c:	687b      	ldr	r3, [r7, #4]
  406a0e:	859a      	strh	r2, [r3, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
  406a10:	687b      	ldr	r3, [r7, #4]
  406a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  406a16:	2b00      	cmp	r3, #0
  406a18:	d00b      	beq.n	406a32 <tcp_process_refused_data+0x9a>
  406a1a:	687b      	ldr	r3, [r7, #4]
  406a1c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  406a20:	687b      	ldr	r3, [r7, #4]
  406a22:	6918      	ldr	r0, [r3, #16]
  406a24:	2300      	movs	r3, #0
  406a26:	2200      	movs	r2, #0
  406a28:	6879      	ldr	r1, [r7, #4]
  406a2a:	47a0      	blx	r4
  406a2c:	4603      	mov	r3, r0
  406a2e:	73fb      	strb	r3, [r7, #15]
  406a30:	e001      	b.n	406a36 <tcp_process_refused_data+0x9e>
  406a32:	2300      	movs	r3, #0
  406a34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_ABRT) {
  406a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406a3a:	f113 0f0a 	cmn.w	r3, #10
  406a3e:	d10d      	bne.n	406a5c <tcp_process_refused_data+0xc4>
        return ERR_ABRT;
  406a40:	f06f 0309 	mvn.w	r3, #9
  406a44:	e00b      	b.n	406a5e <tcp_process_refused_data+0xc6>
      }
    }
  } else if (err == ERR_ABRT) {
  406a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406a4a:	f113 0f0a 	cmn.w	r3, #10
  406a4e:	d102      	bne.n	406a56 <tcp_process_refused_data+0xbe>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  406a50:	f06f 0309 	mvn.w	r3, #9
  406a54:	e003      	b.n	406a5e <tcp_process_refused_data+0xc6>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  406a56:	687b      	ldr	r3, [r7, #4]
  406a58:	68ba      	ldr	r2, [r7, #8]
  406a5a:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return ERR_OK;
  406a5c:	2300      	movs	r3, #0
}
  406a5e:	4618      	mov	r0, r3
  406a60:	3714      	adds	r7, #20
  406a62:	46bd      	mov	sp, r7
  406a64:	bd90      	pop	{r4, r7, pc}
  406a66:	bf00      	nop
  406a68:	00406b15 	.word	0x00406b15

00406a6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  406a6c:	b580      	push	{r7, lr}
  406a6e:	b084      	sub	sp, #16
  406a70:	af00      	add	r7, sp, #0
  406a72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
  406a74:	e007      	b.n	406a86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
  406a76:	687b      	ldr	r3, [r7, #4]
  406a78:	681b      	ldr	r3, [r3, #0]
  406a7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
  406a7c:	6878      	ldr	r0, [r7, #4]
  406a7e:	4b05      	ldr	r3, [pc, #20]	; (406a94 <tcp_segs_free+0x28>)
  406a80:	4798      	blx	r3
    seg = next;
  406a82:	68fb      	ldr	r3, [r7, #12]
  406a84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
  406a86:	687b      	ldr	r3, [r7, #4]
  406a88:	2b00      	cmp	r3, #0
  406a8a:	d1f4      	bne.n	406a76 <tcp_segs_free+0xa>
  }
}
  406a8c:	bf00      	nop
  406a8e:	3710      	adds	r7, #16
  406a90:	46bd      	mov	sp, r7
  406a92:	bd80      	pop	{r7, pc}
  406a94:	00406a99 	.word	0x00406a99

00406a98 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  406a98:	b580      	push	{r7, lr}
  406a9a:	b082      	sub	sp, #8
  406a9c:	af00      	add	r7, sp, #0
  406a9e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
  406aa0:	687b      	ldr	r3, [r7, #4]
  406aa2:	2b00      	cmp	r3, #0
  406aa4:	d00c      	beq.n	406ac0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
  406aa6:	687b      	ldr	r3, [r7, #4]
  406aa8:	685b      	ldr	r3, [r3, #4]
  406aaa:	2b00      	cmp	r3, #0
  406aac:	d004      	beq.n	406ab8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
  406aae:	687b      	ldr	r3, [r7, #4]
  406ab0:	685b      	ldr	r3, [r3, #4]
  406ab2:	4618      	mov	r0, r3
  406ab4:	4b04      	ldr	r3, [pc, #16]	; (406ac8 <tcp_seg_free+0x30>)
  406ab6:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  406ab8:	6879      	ldr	r1, [r7, #4]
  406aba:	2003      	movs	r0, #3
  406abc:	4b03      	ldr	r3, [pc, #12]	; (406acc <tcp_seg_free+0x34>)
  406abe:	4798      	blx	r3
  }
}
  406ac0:	bf00      	nop
  406ac2:	3708      	adds	r7, #8
  406ac4:	46bd      	mov	sp, r7
  406ac6:	bd80      	pop	{r7, pc}
  406ac8:	00405a01 	.word	0x00405a01
  406acc:	00405365 	.word	0x00405365

00406ad0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  406ad0:	b580      	push	{r7, lr}
  406ad2:	b084      	sub	sp, #16
  406ad4:	af00      	add	r7, sp, #0
  406ad6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  406ad8:	2003      	movs	r0, #3
  406ada:	4b0b      	ldr	r3, [pc, #44]	; (406b08 <tcp_seg_copy+0x38>)
  406adc:	4798      	blx	r3
  406ade:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
  406ae0:	68fb      	ldr	r3, [r7, #12]
  406ae2:	2b00      	cmp	r3, #0
  406ae4:	d101      	bne.n	406aea <tcp_seg_copy+0x1a>
    return NULL;
  406ae6:	2300      	movs	r3, #0
  406ae8:	e00a      	b.n	406b00 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  406aea:	2210      	movs	r2, #16
  406aec:	6879      	ldr	r1, [r7, #4]
  406aee:	68f8      	ldr	r0, [r7, #12]
  406af0:	4b06      	ldr	r3, [pc, #24]	; (406b0c <tcp_seg_copy+0x3c>)
  406af2:	4798      	blx	r3
  pbuf_ref(cseg->p);
  406af4:	68fb      	ldr	r3, [r7, #12]
  406af6:	685b      	ldr	r3, [r3, #4]
  406af8:	4618      	mov	r0, r3
  406afa:	4b05      	ldr	r3, [pc, #20]	; (406b10 <tcp_seg_copy+0x40>)
  406afc:	4798      	blx	r3
  return cseg;
  406afe:	68fb      	ldr	r3, [r7, #12]
}
  406b00:	4618      	mov	r0, r3
  406b02:	3710      	adds	r7, #16
  406b04:	46bd      	mov	sp, r7
  406b06:	bd80      	pop	{r7, pc}
  406b08:	00405325 	.word	0x00405325
  406b0c:	0040c9e5 	.word	0x0040c9e5
  406b10:	00405abf 	.word	0x00405abf

00406b14 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  406b14:	b580      	push	{r7, lr}
  406b16:	b084      	sub	sp, #16
  406b18:	af00      	add	r7, sp, #0
  406b1a:	60f8      	str	r0, [r7, #12]
  406b1c:	60b9      	str	r1, [r7, #8]
  406b1e:	607a      	str	r2, [r7, #4]
  406b20:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  406b22:	687b      	ldr	r3, [r7, #4]
  406b24:	2b00      	cmp	r3, #0
  406b26:	d009      	beq.n	406b3c <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
  406b28:	687b      	ldr	r3, [r7, #4]
  406b2a:	891b      	ldrh	r3, [r3, #8]
  406b2c:	4619      	mov	r1, r3
  406b2e:	68b8      	ldr	r0, [r7, #8]
  406b30:	4b09      	ldr	r3, [pc, #36]	; (406b58 <tcp_recv_null+0x44>)
  406b32:	4798      	blx	r3
    pbuf_free(p);
  406b34:	6878      	ldr	r0, [r7, #4]
  406b36:	4b09      	ldr	r3, [pc, #36]	; (406b5c <tcp_recv_null+0x48>)
  406b38:	4798      	blx	r3
  406b3a:	e008      	b.n	406b4e <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
  406b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
  406b40:	2b00      	cmp	r3, #0
  406b42:	d104      	bne.n	406b4e <tcp_recv_null+0x3a>
    return tcp_close(pcb);
  406b44:	68b8      	ldr	r0, [r7, #8]
  406b46:	4b06      	ldr	r3, [pc, #24]	; (406b60 <tcp_recv_null+0x4c>)
  406b48:	4798      	blx	r3
  406b4a:	4603      	mov	r3, r0
  406b4c:	e000      	b.n	406b50 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
  406b4e:	2300      	movs	r3, #0
}
  406b50:	4618      	mov	r0, r3
  406b52:	3710      	adds	r7, #16
  406b54:	46bd      	mov	sp, r7
  406b56:	bd80      	pop	{r7, pc}
  406b58:	004061a5 	.word	0x004061a5
  406b5c:	00405a01 	.word	0x00405a01
  406b60:	00405fed 	.word	0x00405fed

00406b64 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  406b64:	b580      	push	{r7, lr}
  406b66:	b086      	sub	sp, #24
  406b68:	af00      	add	r7, sp, #0
  406b6a:	4603      	mov	r3, r0
  406b6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
  406b6e:	237f      	movs	r3, #127	; 0x7f
  406b70:	72fb      	strb	r3, [r7, #11]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  406b72:	2300      	movs	r3, #0
  406b74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
  406b76:	2300      	movs	r3, #0
  406b78:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  406b7a:	4b18      	ldr	r3, [pc, #96]	; (406bdc <tcp_kill_prio+0x78>)
  406b7c:	681b      	ldr	r3, [r3, #0]
  406b7e:	617b      	str	r3, [r7, #20]
  406b80:	e01f      	b.n	406bc2 <tcp_kill_prio+0x5e>
    if (pcb->prio <= prio &&
  406b82:	697b      	ldr	r3, [r7, #20]
  406b84:	7e5b      	ldrb	r3, [r3, #25]
  406b86:	79fa      	ldrb	r2, [r7, #7]
  406b88:	429a      	cmp	r2, r3
  406b8a:	d317      	bcc.n	406bbc <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
  406b8c:	697b      	ldr	r3, [r7, #20]
  406b8e:	7e5b      	ldrb	r3, [r3, #25]
    if (pcb->prio <= prio &&
  406b90:	7afa      	ldrb	r2, [r7, #11]
  406b92:	429a      	cmp	r2, r3
  406b94:	d312      	bcc.n	406bbc <tcp_kill_prio+0x58>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  406b96:	4b12      	ldr	r3, [pc, #72]	; (406be0 <tcp_kill_prio+0x7c>)
  406b98:	681a      	ldr	r2, [r3, #0]
  406b9a:	697b      	ldr	r3, [r7, #20]
  406b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406b9e:	1ad2      	subs	r2, r2, r3
       pcb->prio <= mprio &&
  406ba0:	68fb      	ldr	r3, [r7, #12]
  406ba2:	429a      	cmp	r2, r3
  406ba4:	d30a      	bcc.n	406bbc <tcp_kill_prio+0x58>
      inactivity = tcp_ticks - pcb->tmr;
  406ba6:	4b0e      	ldr	r3, [pc, #56]	; (406be0 <tcp_kill_prio+0x7c>)
  406ba8:	681a      	ldr	r2, [r3, #0]
  406baa:	697b      	ldr	r3, [r7, #20]
  406bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406bae:	1ad3      	subs	r3, r2, r3
  406bb0:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
  406bb2:	697b      	ldr	r3, [r7, #20]
  406bb4:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
  406bb6:	697b      	ldr	r3, [r7, #20]
  406bb8:	7e5b      	ldrb	r3, [r3, #25]
  406bba:	72fb      	strb	r3, [r7, #11]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  406bbc:	697b      	ldr	r3, [r7, #20]
  406bbe:	68db      	ldr	r3, [r3, #12]
  406bc0:	617b      	str	r3, [r7, #20]
  406bc2:	697b      	ldr	r3, [r7, #20]
  406bc4:	2b00      	cmp	r3, #0
  406bc6:	d1dc      	bne.n	406b82 <tcp_kill_prio+0x1e>
    }
  }
  if (inactive != NULL) {
  406bc8:	693b      	ldr	r3, [r7, #16]
  406bca:	2b00      	cmp	r3, #0
  406bcc:	d002      	beq.n	406bd4 <tcp_kill_prio+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  406bce:	6938      	ldr	r0, [r7, #16]
  406bd0:	4b04      	ldr	r3, [pc, #16]	; (406be4 <tcp_kill_prio+0x80>)
  406bd2:	4798      	blx	r3
  }
}
  406bd4:	bf00      	nop
  406bd6:	3718      	adds	r7, #24
  406bd8:	46bd      	mov	sp, r7
  406bda:	bd80      	pop	{r7, pc}
  406bdc:	204043e8 	.word	0x204043e8
  406be0:	204043ec 	.word	0x204043ec
  406be4:	00406105 	.word	0x00406105

00406be8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  406be8:	b580      	push	{r7, lr}
  406bea:	b084      	sub	sp, #16
  406bec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  406bee:	2300      	movs	r3, #0
  406bf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
  406bf2:	2300      	movs	r3, #0
  406bf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  406bf6:	4b12      	ldr	r3, [pc, #72]	; (406c40 <tcp_kill_timewait+0x58>)
  406bf8:	681b      	ldr	r3, [r3, #0]
  406bfa:	60fb      	str	r3, [r7, #12]
  406bfc:	e012      	b.n	406c24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  406bfe:	4b11      	ldr	r3, [pc, #68]	; (406c44 <tcp_kill_timewait+0x5c>)
  406c00:	681a      	ldr	r2, [r3, #0]
  406c02:	68fb      	ldr	r3, [r7, #12]
  406c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c06:	1ad2      	subs	r2, r2, r3
  406c08:	687b      	ldr	r3, [r7, #4]
  406c0a:	429a      	cmp	r2, r3
  406c0c:	d307      	bcc.n	406c1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
  406c0e:	4b0d      	ldr	r3, [pc, #52]	; (406c44 <tcp_kill_timewait+0x5c>)
  406c10:	681a      	ldr	r2, [r3, #0]
  406c12:	68fb      	ldr	r3, [r7, #12]
  406c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c16:	1ad3      	subs	r3, r2, r3
  406c18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
  406c1a:	68fb      	ldr	r3, [r7, #12]
  406c1c:	60bb      	str	r3, [r7, #8]
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  406c1e:	68fb      	ldr	r3, [r7, #12]
  406c20:	68db      	ldr	r3, [r3, #12]
  406c22:	60fb      	str	r3, [r7, #12]
  406c24:	68fb      	ldr	r3, [r7, #12]
  406c26:	2b00      	cmp	r3, #0
  406c28:	d1e9      	bne.n	406bfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
  406c2a:	68bb      	ldr	r3, [r7, #8]
  406c2c:	2b00      	cmp	r3, #0
  406c2e:	d002      	beq.n	406c36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  406c30:	68b8      	ldr	r0, [r7, #8]
  406c32:	4b05      	ldr	r3, [pc, #20]	; (406c48 <tcp_kill_timewait+0x60>)
  406c34:	4798      	blx	r3
  }
}
  406c36:	bf00      	nop
  406c38:	3710      	adds	r7, #16
  406c3a:	46bd      	mov	sp, r7
  406c3c:	bd80      	pop	{r7, pc}
  406c3e:	bf00      	nop
  406c40:	204043fc 	.word	0x204043fc
  406c44:	204043ec 	.word	0x204043ec
  406c48:	00406105 	.word	0x00406105

00406c4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  406c4c:	b580      	push	{r7, lr}
  406c4e:	b084      	sub	sp, #16
  406c50:	af00      	add	r7, sp, #0
  406c52:	4603      	mov	r3, r0
  406c54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  406c56:	2001      	movs	r0, #1
  406c58:	4b3e      	ldr	r3, [pc, #248]	; (406d54 <tcp_alloc+0x108>)
  406c5a:	4798      	blx	r3
  406c5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
  406c5e:	68fb      	ldr	r3, [r7, #12]
  406c60:	2b00      	cmp	r3, #0
  406c62:	d110      	bne.n	406c86 <tcp_alloc+0x3a>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  406c64:	4b3c      	ldr	r3, [pc, #240]	; (406d58 <tcp_alloc+0x10c>)
  406c66:	4798      	blx	r3
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  406c68:	2001      	movs	r0, #1
  406c6a:	4b3a      	ldr	r3, [pc, #232]	; (406d54 <tcp_alloc+0x108>)
  406c6c:	4798      	blx	r3
  406c6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
  406c70:	68fb      	ldr	r3, [r7, #12]
  406c72:	2b00      	cmp	r3, #0
  406c74:	d107      	bne.n	406c86 <tcp_alloc+0x3a>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
  406c76:	79fb      	ldrb	r3, [r7, #7]
  406c78:	4618      	mov	r0, r3
  406c7a:	4b38      	ldr	r3, [pc, #224]	; (406d5c <tcp_alloc+0x110>)
  406c7c:	4798      	blx	r3
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  406c7e:	2001      	movs	r0, #1
  406c80:	4b34      	ldr	r3, [pc, #208]	; (406d54 <tcp_alloc+0x108>)
  406c82:	4798      	blx	r3
  406c84:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
  406c86:	68fb      	ldr	r3, [r7, #12]
  406c88:	2b00      	cmp	r3, #0
  406c8a:	d05d      	beq.n	406d48 <tcp_alloc+0xfc>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  406c8c:	2298      	movs	r2, #152	; 0x98
  406c8e:	2100      	movs	r1, #0
  406c90:	68f8      	ldr	r0, [r7, #12]
  406c92:	4b33      	ldr	r3, [pc, #204]	; (406d60 <tcp_alloc+0x114>)
  406c94:	4798      	blx	r3
    pcb->prio = prio;
  406c96:	68fb      	ldr	r3, [r7, #12]
  406c98:	79fa      	ldrb	r2, [r7, #7]
  406c9a:	765a      	strb	r2, [r3, #25]
    pcb->snd_buf = TCP_SND_BUF;
  406c9c:	68fb      	ldr	r3, [r7, #12]
  406c9e:	f640 3268 	movw	r2, #2920	; 0xb68
  406ca2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    pcb->snd_queuelen = 0;
  406ca6:	68fb      	ldr	r3, [r7, #12]
  406ca8:	2200      	movs	r2, #0
  406caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  406cae:	68fb      	ldr	r3, [r7, #12]
  406cb0:	f640 3268 	movw	r2, #2920	; 0xb68
  406cb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  406cb6:	68fb      	ldr	r3, [r7, #12]
  406cb8:	f640 3268 	movw	r2, #2920	; 0xb68
  406cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    pcb->tos = 0;
  406cbe:	68fb      	ldr	r3, [r7, #12]
  406cc0:	2200      	movs	r2, #0
  406cc2:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
  406cc4:	68fb      	ldr	r3, [r7, #12]
  406cc6:	22ff      	movs	r2, #255	; 0xff
  406cc8:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  406cca:	68fb      	ldr	r3, [r7, #12]
  406ccc:	f44f 7206 	mov.w	r2, #536	; 0x218
  406cd0:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  406cd2:	68fb      	ldr	r3, [r7, #12]
  406cd4:	2206      	movs	r2, #6
  406cd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    pcb->sa = 0;
  406cda:	68fb      	ldr	r3, [r7, #12]
  406cdc:	2200      	movs	r2, #0
  406cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  406ce2:	68fb      	ldr	r3, [r7, #12]
  406ce4:	2206      	movs	r2, #6
  406ce6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  406cea:	68fb      	ldr	r3, [r7, #12]
  406cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406cf0:	869a      	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  406cf2:	68fb      	ldr	r3, [r7, #12]
  406cf4:	2201      	movs	r2, #1
  406cf6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    iss = tcp_next_iss();
  406cfa:	4b1a      	ldr	r3, [pc, #104]	; (406d64 <tcp_alloc+0x118>)
  406cfc:	4798      	blx	r3
  406cfe:	60b8      	str	r0, [r7, #8]
    pcb->snd_wl2 = iss;
  406d00:	68fb      	ldr	r3, [r7, #12]
  406d02:	68ba      	ldr	r2, [r7, #8]
  406d04:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->snd_nxt = iss;
  406d06:	68fb      	ldr	r3, [r7, #12]
  406d08:	68ba      	ldr	r2, [r7, #8]
  406d0a:	651a      	str	r2, [r3, #80]	; 0x50
    pcb->lastack = iss;
  406d0c:	68fb      	ldr	r3, [r7, #12]
  406d0e:	68ba      	ldr	r2, [r7, #8]
  406d10:	649a      	str	r2, [r3, #72]	; 0x48
    pcb->snd_lbb = iss;   
  406d12:	68fb      	ldr	r3, [r7, #12]
  406d14:	68ba      	ldr	r2, [r7, #8]
  406d16:	65da      	str	r2, [r3, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  406d18:	4b13      	ldr	r3, [pc, #76]	; (406d68 <tcp_alloc+0x11c>)
  406d1a:	681a      	ldr	r2, [r3, #0]
  406d1c:	68fb      	ldr	r3, [r7, #12]
  406d1e:	625a      	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  406d20:	4b12      	ldr	r3, [pc, #72]	; (406d6c <tcp_alloc+0x120>)
  406d22:	781a      	ldrb	r2, [r3, #0]
  406d24:	68fb      	ldr	r3, [r7, #12]
  406d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb->polltmr = 0;
  406d2a:	68fb      	ldr	r3, [r7, #12]
  406d2c:	2200      	movs	r2, #0
  406d2e:	77da      	strb	r2, [r3, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  406d30:	68fb      	ldr	r3, [r7, #12]
  406d32:	4a0f      	ldr	r2, [pc, #60]	; (406d70 <tcp_alloc+0x124>)
  406d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  406d38:	68fb      	ldr	r3, [r7, #12]
  406d3a:	4a0e      	ldr	r2, [pc, #56]	; (406d74 <tcp_alloc+0x128>)
  406d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  406d40:	68fb      	ldr	r3, [r7, #12]
  406d42:	2200      	movs	r2, #0
  406d44:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }
  return pcb;
  406d48:	68fb      	ldr	r3, [r7, #12]
}
  406d4a:	4618      	mov	r0, r3
  406d4c:	3710      	adds	r7, #16
  406d4e:	46bd      	mov	sp, r7
  406d50:	bd80      	pop	{r7, pc}
  406d52:	bf00      	nop
  406d54:	00405325 	.word	0x00405325
  406d58:	00406be9 	.word	0x00406be9
  406d5c:	00406b65 	.word	0x00406b65
  406d60:	0040cb19 	.word	0x0040cb19
  406d64:	00406f65 	.word	0x00406f65
  406d68:	204043ec 	.word	0x204043ec
  406d6c:	20402051 	.word	0x20402051
  406d70:	00406b15 	.word	0x00406b15
  406d74:	006ddd00 	.word	0x006ddd00

00406d78 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  406d78:	b580      	push	{r7, lr}
  406d7a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
  406d7c:	2040      	movs	r0, #64	; 0x40
  406d7e:	4b02      	ldr	r3, [pc, #8]	; (406d88 <tcp_new+0x10>)
  406d80:	4798      	blx	r3
  406d82:	4603      	mov	r3, r0
}
  406d84:	4618      	mov	r0, r3
  406d86:	bd80      	pop	{r7, pc}
  406d88:	00406c4d 	.word	0x00406c4d

00406d8c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  406d8c:	b480      	push	{r7}
  406d8e:	b083      	sub	sp, #12
  406d90:	af00      	add	r7, sp, #0
  406d92:	6078      	str	r0, [r7, #4]
  406d94:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  406d96:	687b      	ldr	r3, [r7, #4]
  406d98:	683a      	ldr	r2, [r7, #0]
  406d9a:	611a      	str	r2, [r3, #16]
}
  406d9c:	bf00      	nop
  406d9e:	370c      	adds	r7, #12
  406da0:	46bd      	mov	sp, r7
  406da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  406da6:	4770      	bx	lr

00406da8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  406da8:	b480      	push	{r7}
  406daa:	b083      	sub	sp, #12
  406dac:	af00      	add	r7, sp, #0
  406dae:	6078      	str	r0, [r7, #4]
  406db0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  406db2:	687b      	ldr	r3, [r7, #4]
  406db4:	683a      	ldr	r2, [r7, #0]
  406db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
  406dba:	bf00      	nop
  406dbc:	370c      	adds	r7, #12
  406dbe:	46bd      	mov	sp, r7
  406dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
  406dc4:	4770      	bx	lr

00406dc6 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  406dc6:	b480      	push	{r7}
  406dc8:	b083      	sub	sp, #12
  406dca:	af00      	add	r7, sp, #0
  406dcc:	6078      	str	r0, [r7, #4]
  406dce:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  406dd0:	687b      	ldr	r3, [r7, #4]
  406dd2:	683a      	ldr	r2, [r7, #0]
  406dd4:	67da      	str	r2, [r3, #124]	; 0x7c
}
  406dd6:	bf00      	nop
  406dd8:	370c      	adds	r7, #12
  406dda:	46bd      	mov	sp, r7
  406ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
  406de0:	4770      	bx	lr

00406de2 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  406de2:	b480      	push	{r7}
  406de4:	b083      	sub	sp, #12
  406de6:	af00      	add	r7, sp, #0
  406de8:	6078      	str	r0, [r7, #4]
  406dea:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  406dec:	687b      	ldr	r3, [r7, #4]
  406dee:	683a      	ldr	r2, [r7, #0]
  406df0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  406df4:	bf00      	nop
  406df6:	370c      	adds	r7, #12
  406df8:	46bd      	mov	sp, r7
  406dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
  406dfe:	4770      	bx	lr

00406e00 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  406e00:	b480      	push	{r7}
  406e02:	b085      	sub	sp, #20
  406e04:	af00      	add	r7, sp, #0
  406e06:	60f8      	str	r0, [r7, #12]
  406e08:	60b9      	str	r1, [r7, #8]
  406e0a:	4613      	mov	r3, r2
  406e0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  406e0e:	68fb      	ldr	r3, [r7, #12]
  406e10:	68ba      	ldr	r2, [r7, #8]
  406e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  406e16:	68fb      	ldr	r3, [r7, #12]
  406e18:	79fa      	ldrb	r2, [r7, #7]
  406e1a:	f883 2020 	strb.w	r2, [r3, #32]
}
  406e1e:	bf00      	nop
  406e20:	3714      	adds	r7, #20
  406e22:	46bd      	mov	sp, r7
  406e24:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e28:	4770      	bx	lr
	...

00406e2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  406e2c:	b580      	push	{r7, lr}
  406e2e:	b082      	sub	sp, #8
  406e30:	af00      	add	r7, sp, #0
  406e32:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
  406e34:	687b      	ldr	r3, [r7, #4]
  406e36:	7e1b      	ldrb	r3, [r3, #24]
  406e38:	2b00      	cmp	r3, #0
  406e3a:	d034      	beq.n	406ea6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
  406e3c:	687b      	ldr	r3, [r7, #4]
  406e3e:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != CLOSED &&
  406e40:	2b0a      	cmp	r3, #10
  406e42:	d030      	beq.n	406ea6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
  406e44:	687b      	ldr	r3, [r7, #4]
  406e46:	7e1b      	ldrb	r3, [r3, #24]
     pcb->state != TIME_WAIT &&
  406e48:	2b01      	cmp	r3, #1
  406e4a:	d02c      	beq.n	406ea6 <tcp_pcb_purge+0x7a>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  406e4c:	687b      	ldr	r3, [r7, #4]
  406e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406e50:	2b00      	cmp	r3, #0
  406e52:	d007      	beq.n	406e64 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  406e54:	687b      	ldr	r3, [r7, #4]
  406e56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406e58:	4618      	mov	r0, r3
  406e5a:	4b15      	ldr	r3, [pc, #84]	; (406eb0 <tcp_pcb_purge+0x84>)
  406e5c:	4798      	blx	r3
      pcb->refused_data = NULL;
  406e5e:	687b      	ldr	r3, [r7, #4]
  406e60:	2200      	movs	r2, #0
  406e62:	679a      	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  406e64:	687b      	ldr	r3, [r7, #4]
  406e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406e68:	4618      	mov	r0, r3
  406e6a:	4b12      	ldr	r3, [pc, #72]	; (406eb4 <tcp_pcb_purge+0x88>)
  406e6c:	4798      	blx	r3
    pcb->ooseq = NULL;
  406e6e:	687b      	ldr	r3, [r7, #4]
  406e70:	2200      	movs	r2, #0
  406e72:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  406e74:	687b      	ldr	r3, [r7, #4]
  406e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
  406e7a:	869a      	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  406e7c:	687b      	ldr	r3, [r7, #4]
  406e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  406e80:	4618      	mov	r0, r3
  406e82:	4b0c      	ldr	r3, [pc, #48]	; (406eb4 <tcp_pcb_purge+0x88>)
  406e84:	4798      	blx	r3
    tcp_segs_free(pcb->unacked);
  406e86:	687b      	ldr	r3, [r7, #4]
  406e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  406e8a:	4618      	mov	r0, r3
  406e8c:	4b09      	ldr	r3, [pc, #36]	; (406eb4 <tcp_pcb_purge+0x88>)
  406e8e:	4798      	blx	r3
    pcb->unacked = pcb->unsent = NULL;
  406e90:	687b      	ldr	r3, [r7, #4]
  406e92:	2200      	movs	r2, #0
  406e94:	66da      	str	r2, [r3, #108]	; 0x6c
  406e96:	687b      	ldr	r3, [r7, #4]
  406e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  406e9a:	687b      	ldr	r3, [r7, #4]
  406e9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  406e9e:	687b      	ldr	r3, [r7, #4]
  406ea0:	2200      	movs	r2, #0
  406ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */
  }
}
  406ea6:	bf00      	nop
  406ea8:	3708      	adds	r7, #8
  406eaa:	46bd      	mov	sp, r7
  406eac:	bd80      	pop	{r7, pc}
  406eae:	bf00      	nop
  406eb0:	00405a01 	.word	0x00405a01
  406eb4:	00406a6d 	.word	0x00406a6d

00406eb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  406eb8:	b580      	push	{r7, lr}
  406eba:	b082      	sub	sp, #8
  406ebc:	af00      	add	r7, sp, #0
  406ebe:	6078      	str	r0, [r7, #4]
  406ec0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
  406ec2:	687b      	ldr	r3, [r7, #4]
  406ec4:	681a      	ldr	r2, [r3, #0]
  406ec6:	683b      	ldr	r3, [r7, #0]
  406ec8:	429a      	cmp	r2, r3
  406eca:	d105      	bne.n	406ed8 <tcp_pcb_remove+0x20>
  406ecc:	687b      	ldr	r3, [r7, #4]
  406ece:	681b      	ldr	r3, [r3, #0]
  406ed0:	68da      	ldr	r2, [r3, #12]
  406ed2:	687b      	ldr	r3, [r7, #4]
  406ed4:	601a      	str	r2, [r3, #0]
  406ed6:	e019      	b.n	406f0c <tcp_pcb_remove+0x54>
  406ed8:	687b      	ldr	r3, [r7, #4]
  406eda:	681b      	ldr	r3, [r3, #0]
  406edc:	4a1e      	ldr	r2, [pc, #120]	; (406f58 <tcp_pcb_remove+0xa0>)
  406ede:	6013      	str	r3, [r2, #0]
  406ee0:	e010      	b.n	406f04 <tcp_pcb_remove+0x4c>
  406ee2:	4b1d      	ldr	r3, [pc, #116]	; (406f58 <tcp_pcb_remove+0xa0>)
  406ee4:	681b      	ldr	r3, [r3, #0]
  406ee6:	68da      	ldr	r2, [r3, #12]
  406ee8:	683b      	ldr	r3, [r7, #0]
  406eea:	429a      	cmp	r2, r3
  406eec:	d105      	bne.n	406efa <tcp_pcb_remove+0x42>
  406eee:	4b1a      	ldr	r3, [pc, #104]	; (406f58 <tcp_pcb_remove+0xa0>)
  406ef0:	681b      	ldr	r3, [r3, #0]
  406ef2:	683a      	ldr	r2, [r7, #0]
  406ef4:	68d2      	ldr	r2, [r2, #12]
  406ef6:	60da      	str	r2, [r3, #12]
  406ef8:	e008      	b.n	406f0c <tcp_pcb_remove+0x54>
  406efa:	4b17      	ldr	r3, [pc, #92]	; (406f58 <tcp_pcb_remove+0xa0>)
  406efc:	681b      	ldr	r3, [r3, #0]
  406efe:	68db      	ldr	r3, [r3, #12]
  406f00:	4a15      	ldr	r2, [pc, #84]	; (406f58 <tcp_pcb_remove+0xa0>)
  406f02:	6013      	str	r3, [r2, #0]
  406f04:	4b14      	ldr	r3, [pc, #80]	; (406f58 <tcp_pcb_remove+0xa0>)
  406f06:	681b      	ldr	r3, [r3, #0]
  406f08:	2b00      	cmp	r3, #0
  406f0a:	d1ea      	bne.n	406ee2 <tcp_pcb_remove+0x2a>
  406f0c:	683b      	ldr	r3, [r7, #0]
  406f0e:	2200      	movs	r2, #0
  406f10:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  406f12:	6838      	ldr	r0, [r7, #0]
  406f14:	4b11      	ldr	r3, [pc, #68]	; (406f5c <tcp_pcb_remove+0xa4>)
  406f16:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  406f18:	683b      	ldr	r3, [r7, #0]
  406f1a:	7e1b      	ldrb	r3, [r3, #24]
  406f1c:	2b0a      	cmp	r3, #10
  406f1e:	d013      	beq.n	406f48 <tcp_pcb_remove+0x90>
     pcb->state != LISTEN &&
  406f20:	683b      	ldr	r3, [r7, #0]
  406f22:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != TIME_WAIT &&
  406f24:	2b01      	cmp	r3, #1
  406f26:	d00f      	beq.n	406f48 <tcp_pcb_remove+0x90>
     pcb->flags & TF_ACK_DELAY) {
  406f28:	683b      	ldr	r3, [r7, #0]
  406f2a:	7f9b      	ldrb	r3, [r3, #30]
  406f2c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
  406f30:	2b00      	cmp	r3, #0
  406f32:	d009      	beq.n	406f48 <tcp_pcb_remove+0x90>
    pcb->flags |= TF_ACK_NOW;
  406f34:	683b      	ldr	r3, [r7, #0]
  406f36:	7f9b      	ldrb	r3, [r3, #30]
  406f38:	f043 0302 	orr.w	r3, r3, #2
  406f3c:	b2da      	uxtb	r2, r3
  406f3e:	683b      	ldr	r3, [r7, #0]
  406f40:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  406f42:	6838      	ldr	r0, [r7, #0]
  406f44:	4b06      	ldr	r3, [pc, #24]	; (406f60 <tcp_pcb_remove+0xa8>)
  406f46:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  406f48:	683b      	ldr	r3, [r7, #0]
  406f4a:	2200      	movs	r2, #0
  406f4c:	761a      	strb	r2, [r3, #24]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  406f4e:	bf00      	nop
  406f50:	3708      	adds	r7, #8
  406f52:	46bd      	mov	sp, r7
  406f54:	bd80      	pop	{r7, pc}
  406f56:	bf00      	nop
  406f58:	204043f4 	.word	0x204043f4
  406f5c:	00406e2d 	.word	0x00406e2d
  406f60:	00409a95 	.word	0x00409a95

00406f64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
  406f64:	b480      	push	{r7}
  406f66:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  406f68:	4b06      	ldr	r3, [pc, #24]	; (406f84 <tcp_next_iss+0x20>)
  406f6a:	681a      	ldr	r2, [r3, #0]
  406f6c:	4b06      	ldr	r3, [pc, #24]	; (406f88 <tcp_next_iss+0x24>)
  406f6e:	681b      	ldr	r3, [r3, #0]
  406f70:	4413      	add	r3, r2
  406f72:	4a04      	ldr	r2, [pc, #16]	; (406f84 <tcp_next_iss+0x20>)
  406f74:	6013      	str	r3, [r2, #0]
  return iss;
  406f76:	4b03      	ldr	r3, [pc, #12]	; (406f84 <tcp_next_iss+0x20>)
  406f78:	681b      	ldr	r3, [r3, #0]
}
  406f7a:	4618      	mov	r0, r3
  406f7c:	46bd      	mov	sp, r7
  406f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406f82:	4770      	bx	lr
  406f84:	20400010 	.word	0x20400010
  406f88:	204043ec 	.word	0x204043ec

00406f8c <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  406f8c:	b580      	push	{r7, lr}
  406f8e:	b084      	sub	sp, #16
  406f90:	af00      	add	r7, sp, #0
  406f92:	4603      	mov	r3, r0
  406f94:	6039      	str	r1, [r7, #0]
  406f96:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  406f98:	6838      	ldr	r0, [r7, #0]
  406f9a:	4b0c      	ldr	r3, [pc, #48]	; (406fcc <tcp_eff_send_mss+0x40>)
  406f9c:	4798      	blx	r3
  406f9e:	60f8      	str	r0, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
  406fa0:	68fb      	ldr	r3, [r7, #12]
  406fa2:	2b00      	cmp	r3, #0
  406fa4:	d00d      	beq.n	406fc2 <tcp_eff_send_mss+0x36>
  406fa6:	68fb      	ldr	r3, [r7, #12]
  406fa8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  406faa:	2b00      	cmp	r3, #0
  406fac:	d009      	beq.n	406fc2 <tcp_eff_send_mss+0x36>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  406fae:	68fb      	ldr	r3, [r7, #12]
  406fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  406fb2:	3b28      	subs	r3, #40	; 0x28
  406fb4:	817b      	strh	r3, [r7, #10]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  406fb6:	897a      	ldrh	r2, [r7, #10]
  406fb8:	88fb      	ldrh	r3, [r7, #6]
  406fba:	4293      	cmp	r3, r2
  406fbc:	bf28      	it	cs
  406fbe:	4613      	movcs	r3, r2
  406fc0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
  406fc2:	88fb      	ldrh	r3, [r7, #6]
}
  406fc4:	4618      	mov	r0, r3
  406fc6:	3710      	adds	r7, #16
  406fc8:	46bd      	mov	sp, r7
  406fca:	bd80      	pop	{r7, pc}
  406fcc:	00403d5d 	.word	0x00403d5d

00406fd0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  406fd0:	b590      	push	{r4, r7, lr}
  406fd2:	b089      	sub	sp, #36	; 0x24
  406fd4:	af02      	add	r7, sp, #8
  406fd6:	6078      	str	r0, [r7, #4]
  406fd8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  406fda:	687b      	ldr	r3, [r7, #4]
  406fdc:	685b      	ldr	r3, [r3, #4]
  406fde:	4a95      	ldr	r2, [pc, #596]	; (407234 <tcp_input+0x264>)
  406fe0:	6013      	str	r3, [r2, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  406fe2:	687b      	ldr	r3, [r7, #4]
  406fe4:	685b      	ldr	r3, [r3, #4]
  406fe6:	4a93      	ldr	r2, [pc, #588]	; (407234 <tcp_input+0x264>)
  406fe8:	6812      	ldr	r2, [r2, #0]
  406fea:	7812      	ldrb	r2, [r2, #0]
  406fec:	f002 020f 	and.w	r2, r2, #15
  406ff0:	0092      	lsls	r2, r2, #2
  406ff2:	4413      	add	r3, r2
  406ff4:	4a90      	ldr	r2, [pc, #576]	; (407238 <tcp_input+0x268>)
  406ff6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  406ff8:	4b8e      	ldr	r3, [pc, #568]	; (407234 <tcp_input+0x264>)
  406ffa:	681b      	ldr	r3, [r3, #0]
  406ffc:	781b      	ldrb	r3, [r3, #0]
  406ffe:	b29b      	uxth	r3, r3
  407000:	f003 030f 	and.w	r3, r3, #15
  407004:	b29b      	uxth	r3, r3
  407006:	009b      	lsls	r3, r3, #2
  407008:	b29b      	uxth	r3, r3
  40700a:	425b      	negs	r3, r3
  40700c:	b29b      	uxth	r3, r3
  40700e:	b21b      	sxth	r3, r3
  407010:	4619      	mov	r1, r3
  407012:	6878      	ldr	r0, [r7, #4]
  407014:	4b89      	ldr	r3, [pc, #548]	; (40723c <tcp_input+0x26c>)
  407016:	4798      	blx	r3
  407018:	4603      	mov	r3, r0
  40701a:	2b00      	cmp	r3, #0
  40701c:	f040 82ea 	bne.w	4075f4 <tcp_input+0x624>
  407020:	687b      	ldr	r3, [r7, #4]
  407022:	891b      	ldrh	r3, [r3, #8]
  407024:	2b13      	cmp	r3, #19
  407026:	f240 82e5 	bls.w	4075f4 <tcp_input+0x624>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40702a:	4b85      	ldr	r3, [pc, #532]	; (407240 <tcp_input+0x270>)
  40702c:	681b      	ldr	r3, [r3, #0]
  40702e:	6839      	ldr	r1, [r7, #0]
  407030:	4618      	mov	r0, r3
  407032:	4b84      	ldr	r3, [pc, #528]	; (407244 <tcp_input+0x274>)
  407034:	4798      	blx	r3
  407036:	4603      	mov	r3, r0
  407038:	2b00      	cmp	r3, #0
  40703a:	f040 82db 	bne.w	4075f4 <tcp_input+0x624>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  40703e:	4b80      	ldr	r3, [pc, #512]	; (407240 <tcp_input+0x270>)
  407040:	681b      	ldr	r3, [r3, #0]
  407042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  407046:	2be0      	cmp	r3, #224	; 0xe0
  407048:	f000 82d4 	beq.w	4075f4 <tcp_input+0x624>
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40704c:	687b      	ldr	r3, [r7, #4]
  40704e:	891b      	ldrh	r3, [r3, #8]
  407050:	9300      	str	r3, [sp, #0]
  407052:	2306      	movs	r3, #6
  407054:	4a7a      	ldr	r2, [pc, #488]	; (407240 <tcp_input+0x270>)
  407056:	497c      	ldr	r1, [pc, #496]	; (407248 <tcp_input+0x278>)
  407058:	6878      	ldr	r0, [r7, #4]
  40705a:	4c7c      	ldr	r4, [pc, #496]	; (40724c <tcp_input+0x27c>)
  40705c:	47a0      	blx	r4
  40705e:	4603      	mov	r3, r0
  407060:	2b00      	cmp	r3, #0
  407062:	f040 82c4 	bne.w	4075ee <tcp_input+0x61e>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  407066:	4b74      	ldr	r3, [pc, #464]	; (407238 <tcp_input+0x268>)
  407068:	681b      	ldr	r3, [r3, #0]
  40706a:	899b      	ldrh	r3, [r3, #12]
  40706c:	b29b      	uxth	r3, r3
  40706e:	4618      	mov	r0, r3
  407070:	4b77      	ldr	r3, [pc, #476]	; (407250 <tcp_input+0x280>)
  407072:	4798      	blx	r3
  407074:	4603      	mov	r3, r0
  407076:	0b1b      	lsrs	r3, r3, #12
  407078:	b29b      	uxth	r3, r3
  40707a:	72bb      	strb	r3, [r7, #10]
  if(pbuf_header(p, -(hdrlen * 4))){
  40707c:	7abb      	ldrb	r3, [r7, #10]
  40707e:	b29b      	uxth	r3, r3
  407080:	461a      	mov	r2, r3
  407082:	0392      	lsls	r2, r2, #14
  407084:	1ad3      	subs	r3, r2, r3
  407086:	009b      	lsls	r3, r3, #2
  407088:	b29b      	uxth	r3, r3
  40708a:	b21b      	sxth	r3, r3
  40708c:	4619      	mov	r1, r3
  40708e:	6878      	ldr	r0, [r7, #4]
  407090:	4b6a      	ldr	r3, [pc, #424]	; (40723c <tcp_input+0x26c>)
  407092:	4798      	blx	r3
  407094:	4603      	mov	r3, r0
  407096:	2b00      	cmp	r3, #0
  407098:	f040 82ab 	bne.w	4075f2 <tcp_input+0x622>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  40709c:	4b66      	ldr	r3, [pc, #408]	; (407238 <tcp_input+0x268>)
  40709e:	681c      	ldr	r4, [r3, #0]
  4070a0:	4b65      	ldr	r3, [pc, #404]	; (407238 <tcp_input+0x268>)
  4070a2:	681b      	ldr	r3, [r3, #0]
  4070a4:	881b      	ldrh	r3, [r3, #0]
  4070a6:	b29b      	uxth	r3, r3
  4070a8:	4618      	mov	r0, r3
  4070aa:	4b69      	ldr	r3, [pc, #420]	; (407250 <tcp_input+0x280>)
  4070ac:	4798      	blx	r3
  4070ae:	4603      	mov	r3, r0
  4070b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  4070b2:	4b61      	ldr	r3, [pc, #388]	; (407238 <tcp_input+0x268>)
  4070b4:	681c      	ldr	r4, [r3, #0]
  4070b6:	4b60      	ldr	r3, [pc, #384]	; (407238 <tcp_input+0x268>)
  4070b8:	681b      	ldr	r3, [r3, #0]
  4070ba:	885b      	ldrh	r3, [r3, #2]
  4070bc:	b29b      	uxth	r3, r3
  4070be:	4618      	mov	r0, r3
  4070c0:	4b63      	ldr	r3, [pc, #396]	; (407250 <tcp_input+0x280>)
  4070c2:	4798      	blx	r3
  4070c4:	4603      	mov	r3, r0
  4070c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  4070c8:	4b5b      	ldr	r3, [pc, #364]	; (407238 <tcp_input+0x268>)
  4070ca:	681c      	ldr	r4, [r3, #0]
  4070cc:	4b5a      	ldr	r3, [pc, #360]	; (407238 <tcp_input+0x268>)
  4070ce:	681b      	ldr	r3, [r3, #0]
  4070d0:	685b      	ldr	r3, [r3, #4]
  4070d2:	4618      	mov	r0, r3
  4070d4:	4b5f      	ldr	r3, [pc, #380]	; (407254 <tcp_input+0x284>)
  4070d6:	4798      	blx	r3
  4070d8:	4603      	mov	r3, r0
  4070da:	6063      	str	r3, [r4, #4]
  4070dc:	6863      	ldr	r3, [r4, #4]
  4070de:	4a5e      	ldr	r2, [pc, #376]	; (407258 <tcp_input+0x288>)
  4070e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  4070e2:	4b55      	ldr	r3, [pc, #340]	; (407238 <tcp_input+0x268>)
  4070e4:	681c      	ldr	r4, [r3, #0]
  4070e6:	4b54      	ldr	r3, [pc, #336]	; (407238 <tcp_input+0x268>)
  4070e8:	681b      	ldr	r3, [r3, #0]
  4070ea:	689b      	ldr	r3, [r3, #8]
  4070ec:	4618      	mov	r0, r3
  4070ee:	4b59      	ldr	r3, [pc, #356]	; (407254 <tcp_input+0x284>)
  4070f0:	4798      	blx	r3
  4070f2:	4603      	mov	r3, r0
  4070f4:	60a3      	str	r3, [r4, #8]
  4070f6:	68a3      	ldr	r3, [r4, #8]
  4070f8:	4a58      	ldr	r2, [pc, #352]	; (40725c <tcp_input+0x28c>)
  4070fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  4070fc:	4b4e      	ldr	r3, [pc, #312]	; (407238 <tcp_input+0x268>)
  4070fe:	681c      	ldr	r4, [r3, #0]
  407100:	4b4d      	ldr	r3, [pc, #308]	; (407238 <tcp_input+0x268>)
  407102:	681b      	ldr	r3, [r3, #0]
  407104:	89db      	ldrh	r3, [r3, #14]
  407106:	b29b      	uxth	r3, r3
  407108:	4618      	mov	r0, r3
  40710a:	4b51      	ldr	r3, [pc, #324]	; (407250 <tcp_input+0x280>)
  40710c:	4798      	blx	r3
  40710e:	4603      	mov	r3, r0
  407110:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  407112:	4b49      	ldr	r3, [pc, #292]	; (407238 <tcp_input+0x268>)
  407114:	681b      	ldr	r3, [r3, #0]
  407116:	899b      	ldrh	r3, [r3, #12]
  407118:	b29b      	uxth	r3, r3
  40711a:	4618      	mov	r0, r3
  40711c:	4b4c      	ldr	r3, [pc, #304]	; (407250 <tcp_input+0x280>)
  40711e:	4798      	blx	r3
  407120:	4603      	mov	r3, r0
  407122:	b2db      	uxtb	r3, r3
  407124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  407128:	b2da      	uxtb	r2, r3
  40712a:	4b4d      	ldr	r3, [pc, #308]	; (407260 <tcp_input+0x290>)
  40712c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  40712e:	687b      	ldr	r3, [r7, #4]
  407130:	891a      	ldrh	r2, [r3, #8]
  407132:	4b4b      	ldr	r3, [pc, #300]	; (407260 <tcp_input+0x290>)
  407134:	781b      	ldrb	r3, [r3, #0]
  407136:	f003 0303 	and.w	r3, r3, #3
  40713a:	2b00      	cmp	r3, #0
  40713c:	bf14      	ite	ne
  40713e:	2301      	movne	r3, #1
  407140:	2300      	moveq	r3, #0
  407142:	b2db      	uxtb	r3, r3
  407144:	b29b      	uxth	r3, r3
  407146:	4413      	add	r3, r2
  407148:	b29a      	uxth	r2, r3
  40714a:	4b46      	ldr	r3, [pc, #280]	; (407264 <tcp_input+0x294>)
  40714c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  40714e:	2300      	movs	r3, #0
  407150:	613b      	str	r3, [r7, #16]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  407152:	4b45      	ldr	r3, [pc, #276]	; (407268 <tcp_input+0x298>)
  407154:	681b      	ldr	r3, [r3, #0]
  407156:	617b      	str	r3, [r7, #20]
  407158:	e02f      	b.n	4071ba <tcp_input+0x1ea>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  40715a:	697b      	ldr	r3, [r7, #20]
  40715c:	8b9a      	ldrh	r2, [r3, #28]
  40715e:	4b36      	ldr	r3, [pc, #216]	; (407238 <tcp_input+0x268>)
  407160:	681b      	ldr	r3, [r3, #0]
  407162:	881b      	ldrh	r3, [r3, #0]
  407164:	b29b      	uxth	r3, r3
  407166:	429a      	cmp	r2, r3
  407168:	d122      	bne.n	4071b0 <tcp_input+0x1e0>
       pcb->local_port == tcphdr->dest &&
  40716a:	697b      	ldr	r3, [r7, #20]
  40716c:	8b5a      	ldrh	r2, [r3, #26]
  40716e:	4b32      	ldr	r3, [pc, #200]	; (407238 <tcp_input+0x268>)
  407170:	681b      	ldr	r3, [r3, #0]
  407172:	885b      	ldrh	r3, [r3, #2]
  407174:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  407176:	429a      	cmp	r2, r3
  407178:	d11a      	bne.n	4071b0 <tcp_input+0x1e0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40717a:	697b      	ldr	r3, [r7, #20]
  40717c:	685a      	ldr	r2, [r3, #4]
  40717e:	4b32      	ldr	r3, [pc, #200]	; (407248 <tcp_input+0x278>)
  407180:	681b      	ldr	r3, [r3, #0]
       pcb->local_port == tcphdr->dest &&
  407182:	429a      	cmp	r2, r3
  407184:	d114      	bne.n	4071b0 <tcp_input+0x1e0>
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  407186:	697b      	ldr	r3, [r7, #20]
  407188:	681a      	ldr	r2, [r3, #0]
  40718a:	4b2d      	ldr	r3, [pc, #180]	; (407240 <tcp_input+0x270>)
  40718c:	681b      	ldr	r3, [r3, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40718e:	429a      	cmp	r2, r3
  407190:	d10e      	bne.n	4071b0 <tcp_input+0x1e0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
  407192:	693b      	ldr	r3, [r7, #16]
  407194:	2b00      	cmp	r3, #0
  407196:	d014      	beq.n	4071c2 <tcp_input+0x1f2>
        prev->next = pcb->next;
  407198:	697b      	ldr	r3, [r7, #20]
  40719a:	68da      	ldr	r2, [r3, #12]
  40719c:	693b      	ldr	r3, [r7, #16]
  40719e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  4071a0:	4b31      	ldr	r3, [pc, #196]	; (407268 <tcp_input+0x298>)
  4071a2:	681a      	ldr	r2, [r3, #0]
  4071a4:	697b      	ldr	r3, [r7, #20]
  4071a6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  4071a8:	4a2f      	ldr	r2, [pc, #188]	; (407268 <tcp_input+0x298>)
  4071aa:	697b      	ldr	r3, [r7, #20]
  4071ac:	6013      	str	r3, [r2, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
  4071ae:	e008      	b.n	4071c2 <tcp_input+0x1f2>
    }
    prev = pcb;
  4071b0:	697b      	ldr	r3, [r7, #20]
  4071b2:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  4071b4:	697b      	ldr	r3, [r7, #20]
  4071b6:	68db      	ldr	r3, [r3, #12]
  4071b8:	617b      	str	r3, [r7, #20]
  4071ba:	697b      	ldr	r3, [r7, #20]
  4071bc:	2b00      	cmp	r3, #0
  4071be:	d1cc      	bne.n	40715a <tcp_input+0x18a>
  4071c0:	e000      	b.n	4071c4 <tcp_input+0x1f4>
      break;
  4071c2:	bf00      	nop
  }

  if (pcb == NULL) {
  4071c4:	697b      	ldr	r3, [r7, #20]
  4071c6:	2b00      	cmp	r3, #0
  4071c8:	f040 808d 	bne.w	4072e6 <tcp_input+0x316>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4071cc:	4b27      	ldr	r3, [pc, #156]	; (40726c <tcp_input+0x29c>)
  4071ce:	681b      	ldr	r3, [r3, #0]
  4071d0:	617b      	str	r3, [r7, #20]
  4071d2:	e025      	b.n	407220 <tcp_input+0x250>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  4071d4:	697b      	ldr	r3, [r7, #20]
  4071d6:	8b9a      	ldrh	r2, [r3, #28]
  4071d8:	4b17      	ldr	r3, [pc, #92]	; (407238 <tcp_input+0x268>)
  4071da:	681b      	ldr	r3, [r3, #0]
  4071dc:	881b      	ldrh	r3, [r3, #0]
  4071de:	b29b      	uxth	r3, r3
  4071e0:	429a      	cmp	r2, r3
  4071e2:	d11a      	bne.n	40721a <tcp_input+0x24a>
         pcb->local_port == tcphdr->dest &&
  4071e4:	697b      	ldr	r3, [r7, #20]
  4071e6:	8b5a      	ldrh	r2, [r3, #26]
  4071e8:	4b13      	ldr	r3, [pc, #76]	; (407238 <tcp_input+0x268>)
  4071ea:	681b      	ldr	r3, [r3, #0]
  4071ec:	885b      	ldrh	r3, [r3, #2]
  4071ee:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  4071f0:	429a      	cmp	r2, r3
  4071f2:	d112      	bne.n	40721a <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4071f4:	697b      	ldr	r3, [r7, #20]
  4071f6:	685a      	ldr	r2, [r3, #4]
  4071f8:	4b13      	ldr	r3, [pc, #76]	; (407248 <tcp_input+0x278>)
  4071fa:	681b      	ldr	r3, [r3, #0]
         pcb->local_port == tcphdr->dest &&
  4071fc:	429a      	cmp	r2, r3
  4071fe:	d10c      	bne.n	40721a <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  407200:	697b      	ldr	r3, [r7, #20]
  407202:	681a      	ldr	r2, [r3, #0]
  407204:	4b0e      	ldr	r3, [pc, #56]	; (407240 <tcp_input+0x270>)
  407206:	681b      	ldr	r3, [r3, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  407208:	429a      	cmp	r2, r3
  40720a:	d106      	bne.n	40721a <tcp_input+0x24a>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  40720c:	6978      	ldr	r0, [r7, #20]
  40720e:	4b18      	ldr	r3, [pc, #96]	; (407270 <tcp_input+0x2a0>)
  407210:	4798      	blx	r3
        pbuf_free(p);
  407212:	6878      	ldr	r0, [r7, #4]
  407214:	4b17      	ldr	r3, [pc, #92]	; (407274 <tcp_input+0x2a4>)
  407216:	4798      	blx	r3
        return;
  407218:	e1f1      	b.n	4075fe <tcp_input+0x62e>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  40721a:	697b      	ldr	r3, [r7, #20]
  40721c:	68db      	ldr	r3, [r3, #12]
  40721e:	617b      	str	r3, [r7, #20]
  407220:	697b      	ldr	r3, [r7, #20]
  407222:	2b00      	cmp	r3, #0
  407224:	d1d6      	bne.n	4071d4 <tcp_input+0x204>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  407226:	2300      	movs	r3, #0
  407228:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40722a:	4b13      	ldr	r3, [pc, #76]	; (407278 <tcp_input+0x2a8>)
  40722c:	681b      	ldr	r3, [r3, #0]
  40722e:	60fb      	str	r3, [r7, #12]
  407230:	e03e      	b.n	4072b0 <tcp_input+0x2e0>
  407232:	bf00      	nop
  407234:	20402068 	.word	0x20402068
  407238:	20402064 	.word	0x20402064
  40723c:	00405925 	.word	0x00405925
  407240:	204033bc 	.word	0x204033bc
  407244:	00404251 	.word	0x00404251
  407248:	204033b4 	.word	0x204033b4
  40724c:	00403b89 	.word	0x00403b89
  407250:	00401e45 	.word	0x00401e45
  407254:	00401e99 	.word	0x00401e99
  407258:	2040206c 	.word	0x2040206c
  40725c:	20402070 	.word	0x20402070
  407260:	20402074 	.word	0x20402074
  407264:	20402076 	.word	0x20402076
  407268:	204043e8 	.word	0x204043e8
  40726c:	204043fc 	.word	0x204043fc
  407270:	004077ed 	.word	0x004077ed
  407274:	00405a01 	.word	0x00405a01
  407278:	204043f0 	.word	0x204043f0
      if (lpcb->local_port == tcphdr->dest) {
  40727c:	68fb      	ldr	r3, [r7, #12]
  40727e:	8b5a      	ldrh	r2, [r3, #26]
  407280:	4b94      	ldr	r3, [pc, #592]	; (4074d4 <tcp_input+0x504>)
  407282:	681b      	ldr	r3, [r3, #0]
  407284:	885b      	ldrh	r3, [r3, #2]
  407286:	b29b      	uxth	r3, r3
  407288:	429a      	cmp	r2, r3
  40728a:	d10c      	bne.n	4072a6 <tcp_input+0x2d6>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40728c:	68fb      	ldr	r3, [r7, #12]
  40728e:	681a      	ldr	r2, [r3, #0]
  407290:	4b91      	ldr	r3, [pc, #580]	; (4074d8 <tcp_input+0x508>)
  407292:	681b      	ldr	r3, [r3, #0]
  407294:	429a      	cmp	r2, r3
  407296:	d00e      	beq.n	4072b6 <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  407298:	68fb      	ldr	r3, [r7, #12]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40729a:	2b00      	cmp	r3, #0
  40729c:	d00b      	beq.n	4072b6 <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  40729e:	68fb      	ldr	r3, [r7, #12]
  4072a0:	681b      	ldr	r3, [r3, #0]
  4072a2:	2b00      	cmp	r3, #0
  4072a4:	d007      	beq.n	4072b6 <tcp_input+0x2e6>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
  4072a6:	68fb      	ldr	r3, [r7, #12]
  4072a8:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  4072aa:	68fb      	ldr	r3, [r7, #12]
  4072ac:	68db      	ldr	r3, [r3, #12]
  4072ae:	60fb      	str	r3, [r7, #12]
  4072b0:	68fb      	ldr	r3, [r7, #12]
  4072b2:	2b00      	cmp	r3, #0
  4072b4:	d1e2      	bne.n	40727c <tcp_input+0x2ac>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  4072b6:	68fb      	ldr	r3, [r7, #12]
  4072b8:	2b00      	cmp	r3, #0
  4072ba:	d014      	beq.n	4072e6 <tcp_input+0x316>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  4072bc:	693b      	ldr	r3, [r7, #16]
  4072be:	2b00      	cmp	r3, #0
  4072c0:	d00a      	beq.n	4072d8 <tcp_input+0x308>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  4072c2:	68fb      	ldr	r3, [r7, #12]
  4072c4:	68da      	ldr	r2, [r3, #12]
  4072c6:	693b      	ldr	r3, [r7, #16]
  4072c8:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  4072ca:	4b84      	ldr	r3, [pc, #528]	; (4074dc <tcp_input+0x50c>)
  4072cc:	681a      	ldr	r2, [r3, #0]
  4072ce:	68fb      	ldr	r3, [r7, #12]
  4072d0:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  4072d2:	4a82      	ldr	r2, [pc, #520]	; (4074dc <tcp_input+0x50c>)
  4072d4:	68fb      	ldr	r3, [r7, #12]
  4072d6:	6013      	str	r3, [r2, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  4072d8:	68f8      	ldr	r0, [r7, #12]
  4072da:	4b81      	ldr	r3, [pc, #516]	; (4074e0 <tcp_input+0x510>)
  4072dc:	4798      	blx	r3
      pbuf_free(p);
  4072de:	6878      	ldr	r0, [r7, #4]
  4072e0:	4b80      	ldr	r3, [pc, #512]	; (4074e4 <tcp_input+0x514>)
  4072e2:	4798      	blx	r3
      return;
  4072e4:	e18b      	b.n	4075fe <tcp_input+0x62e>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  4072e6:	697b      	ldr	r3, [r7, #20]
  4072e8:	2b00      	cmp	r3, #0
  4072ea:	f000 815a 	beq.w	4075a2 <tcp_input+0x5d2>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  4072ee:	4b7e      	ldr	r3, [pc, #504]	; (4074e8 <tcp_input+0x518>)
  4072f0:	2200      	movs	r2, #0
  4072f2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  4072f4:	687b      	ldr	r3, [r7, #4]
  4072f6:	891a      	ldrh	r2, [r3, #8]
  4072f8:	4b7b      	ldr	r3, [pc, #492]	; (4074e8 <tcp_input+0x518>)
  4072fa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
  4072fc:	4a7a      	ldr	r2, [pc, #488]	; (4074e8 <tcp_input+0x518>)
  4072fe:	687b      	ldr	r3, [r7, #4]
  407300:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
  407302:	4b74      	ldr	r3, [pc, #464]	; (4074d4 <tcp_input+0x504>)
  407304:	681b      	ldr	r3, [r3, #0]
  407306:	4a78      	ldr	r2, [pc, #480]	; (4074e8 <tcp_input+0x518>)
  407308:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
  40730a:	4b78      	ldr	r3, [pc, #480]	; (4074ec <tcp_input+0x51c>)
  40730c:	2200      	movs	r2, #0
  40730e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  407310:	4b77      	ldr	r3, [pc, #476]	; (4074f0 <tcp_input+0x520>)
  407312:	2200      	movs	r2, #0
  407314:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
  407316:	4b77      	ldr	r3, [pc, #476]	; (4074f4 <tcp_input+0x524>)
  407318:	781b      	ldrb	r3, [r3, #0]
  40731a:	f003 0308 	and.w	r3, r3, #8
  40731e:	2b00      	cmp	r3, #0
  407320:	d006      	beq.n	407330 <tcp_input+0x360>
      p->flags |= PBUF_FLAG_PUSH;
  407322:	687b      	ldr	r3, [r7, #4]
  407324:	7b5b      	ldrb	r3, [r3, #13]
  407326:	f043 0301 	orr.w	r3, r3, #1
  40732a:	b2da      	uxtb	r2, r3
  40732c:	687b      	ldr	r3, [r7, #4]
  40732e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  407330:	697b      	ldr	r3, [r7, #20]
  407332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407334:	2b00      	cmp	r3, #0
  407336:	d010      	beq.n	40735a <tcp_input+0x38a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  407338:	6978      	ldr	r0, [r7, #20]
  40733a:	4b6f      	ldr	r3, [pc, #444]	; (4074f8 <tcp_input+0x528>)
  40733c:	4798      	blx	r3
  40733e:	4603      	mov	r3, r0
  407340:	f113 0f0a 	cmn.w	r3, #10
  407344:	f000 811a 	beq.w	40757c <tcp_input+0x5ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407348:	697b      	ldr	r3, [r7, #20]
  40734a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  40734c:	2b00      	cmp	r3, #0
  40734e:	d004      	beq.n	40735a <tcp_input+0x38a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407350:	4b6a      	ldr	r3, [pc, #424]	; (4074fc <tcp_input+0x52c>)
  407352:	881b      	ldrh	r3, [r3, #0]
  407354:	2b00      	cmp	r3, #0
  407356:	f040 8111 	bne.w	40757c <tcp_input+0x5ac>
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
  40735a:	4a69      	ldr	r2, [pc, #420]	; (407500 <tcp_input+0x530>)
  40735c:	697b      	ldr	r3, [r7, #20]
  40735e:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
  407360:	6978      	ldr	r0, [r7, #20]
  407362:	4b68      	ldr	r3, [pc, #416]	; (407504 <tcp_input+0x534>)
  407364:	4798      	blx	r3
  407366:	4603      	mov	r3, r0
  407368:	72fb      	strb	r3, [r7, #11]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  40736a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40736e:	f113 0f0a 	cmn.w	r3, #10
  407372:	f000 8103 	beq.w	40757c <tcp_input+0x5ac>
      if (recv_flags & TF_RESET) {
  407376:	4b5e      	ldr	r3, [pc, #376]	; (4074f0 <tcp_input+0x520>)
  407378:	781b      	ldrb	r3, [r3, #0]
  40737a:	f003 0308 	and.w	r3, r3, #8
  40737e:	2b00      	cmp	r3, #0
  407380:	d016      	beq.n	4073b0 <tcp_input+0x3e0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  407382:	697b      	ldr	r3, [r7, #20]
  407384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407388:	2b00      	cmp	r3, #0
  40738a:	d008      	beq.n	40739e <tcp_input+0x3ce>
  40738c:	697b      	ldr	r3, [r7, #20]
  40738e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407392:	697a      	ldr	r2, [r7, #20]
  407394:	6912      	ldr	r2, [r2, #16]
  407396:	f06f 010a 	mvn.w	r1, #10
  40739a:	4610      	mov	r0, r2
  40739c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  40739e:	6979      	ldr	r1, [r7, #20]
  4073a0:	4859      	ldr	r0, [pc, #356]	; (407508 <tcp_input+0x538>)
  4073a2:	4b5a      	ldr	r3, [pc, #360]	; (40750c <tcp_input+0x53c>)
  4073a4:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  4073a6:	6979      	ldr	r1, [r7, #20]
  4073a8:	2001      	movs	r0, #1
  4073aa:	4b59      	ldr	r3, [pc, #356]	; (407510 <tcp_input+0x540>)
  4073ac:	4798      	blx	r3
  4073ae:	e0e5      	b.n	40757c <tcp_input+0x5ac>
      } else if (recv_flags & TF_CLOSED) {
  4073b0:	4b4f      	ldr	r3, [pc, #316]	; (4074f0 <tcp_input+0x520>)
  4073b2:	781b      	ldrb	r3, [r3, #0]
  4073b4:	f003 0310 	and.w	r3, r3, #16
  4073b8:	2b00      	cmp	r3, #0
  4073ba:	d01c      	beq.n	4073f6 <tcp_input+0x426>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
  4073bc:	697b      	ldr	r3, [r7, #20]
  4073be:	7f9b      	ldrb	r3, [r3, #30]
  4073c0:	f003 0310 	and.w	r3, r3, #16
  4073c4:	2b00      	cmp	r3, #0
  4073c6:	d10d      	bne.n	4073e4 <tcp_input+0x414>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  4073c8:	697b      	ldr	r3, [r7, #20]
  4073ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4073ce:	2b00      	cmp	r3, #0
  4073d0:	d008      	beq.n	4073e4 <tcp_input+0x414>
  4073d2:	697b      	ldr	r3, [r7, #20]
  4073d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4073d8:	697a      	ldr	r2, [r7, #20]
  4073da:	6912      	ldr	r2, [r2, #16]
  4073dc:	f06f 010b 	mvn.w	r1, #11
  4073e0:	4610      	mov	r0, r2
  4073e2:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  4073e4:	6979      	ldr	r1, [r7, #20]
  4073e6:	4848      	ldr	r0, [pc, #288]	; (407508 <tcp_input+0x538>)
  4073e8:	4b48      	ldr	r3, [pc, #288]	; (40750c <tcp_input+0x53c>)
  4073ea:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  4073ec:	6979      	ldr	r1, [r7, #20]
  4073ee:	2001      	movs	r0, #1
  4073f0:	4b47      	ldr	r3, [pc, #284]	; (407510 <tcp_input+0x540>)
  4073f2:	4798      	blx	r3
  4073f4:	e0c2      	b.n	40757c <tcp_input+0x5ac>
      } else {
        err = ERR_OK;
  4073f6:	2300      	movs	r3, #0
  4073f8:	72fb      	strb	r3, [r7, #11]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  4073fa:	697b      	ldr	r3, [r7, #20]
  4073fc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  407400:	2b00      	cmp	r3, #0
  407402:	d017      	beq.n	407434 <tcp_input+0x464>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  407404:	697b      	ldr	r3, [r7, #20]
  407406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  407408:	2b00      	cmp	r3, #0
  40740a:	d00b      	beq.n	407424 <tcp_input+0x454>
  40740c:	697b      	ldr	r3, [r7, #20]
  40740e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  407410:	697a      	ldr	r2, [r7, #20]
  407412:	6910      	ldr	r0, [r2, #16]
  407414:	697a      	ldr	r2, [r7, #20]
  407416:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
  40741a:	6979      	ldr	r1, [r7, #20]
  40741c:	4798      	blx	r3
  40741e:	4603      	mov	r3, r0
  407420:	72fb      	strb	r3, [r7, #11]
  407422:	e001      	b.n	407428 <tcp_input+0x458>
  407424:	2300      	movs	r3, #0
  407426:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407428:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40742c:	f113 0f0a 	cmn.w	r3, #10
  407430:	f000 809f 	beq.w	407572 <tcp_input+0x5a2>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
  407434:	4b2d      	ldr	r3, [pc, #180]	; (4074ec <tcp_input+0x51c>)
  407436:	681b      	ldr	r3, [r3, #0]
  407438:	2b00      	cmp	r3, #0
  40743a:	d036      	beq.n	4074aa <tcp_input+0x4da>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
  40743c:	697b      	ldr	r3, [r7, #20]
  40743e:	7f9b      	ldrb	r3, [r3, #30]
  407440:	f003 0310 	and.w	r3, r3, #16
  407444:	2b00      	cmp	r3, #0
  407446:	d008      	beq.n	40745a <tcp_input+0x48a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  407448:	4b28      	ldr	r3, [pc, #160]	; (4074ec <tcp_input+0x51c>)
  40744a:	681b      	ldr	r3, [r3, #0]
  40744c:	4618      	mov	r0, r3
  40744e:	4b25      	ldr	r3, [pc, #148]	; (4074e4 <tcp_input+0x514>)
  407450:	4798      	blx	r3
            tcp_abort(pcb);
  407452:	6978      	ldr	r0, [r7, #20]
  407454:	4b2f      	ldr	r3, [pc, #188]	; (407514 <tcp_input+0x544>)
  407456:	4798      	blx	r3
            goto aborted;
  407458:	e090      	b.n	40757c <tcp_input+0x5ac>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  40745a:	697b      	ldr	r3, [r7, #20]
  40745c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  407460:	2b00      	cmp	r3, #0
  407462:	d00c      	beq.n	40747e <tcp_input+0x4ae>
  407464:	697b      	ldr	r3, [r7, #20]
  407466:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  40746a:	697b      	ldr	r3, [r7, #20]
  40746c:	6918      	ldr	r0, [r3, #16]
  40746e:	4b1f      	ldr	r3, [pc, #124]	; (4074ec <tcp_input+0x51c>)
  407470:	681a      	ldr	r2, [r3, #0]
  407472:	2300      	movs	r3, #0
  407474:	6979      	ldr	r1, [r7, #20]
  407476:	47a0      	blx	r4
  407478:	4603      	mov	r3, r0
  40747a:	72fb      	strb	r3, [r7, #11]
  40747c:	e008      	b.n	407490 <tcp_input+0x4c0>
  40747e:	4b1b      	ldr	r3, [pc, #108]	; (4074ec <tcp_input+0x51c>)
  407480:	681a      	ldr	r2, [r3, #0]
  407482:	2300      	movs	r3, #0
  407484:	6979      	ldr	r1, [r7, #20]
  407486:	2000      	movs	r0, #0
  407488:	4c23      	ldr	r4, [pc, #140]	; (407518 <tcp_input+0x548>)
  40748a:	47a0      	blx	r4
  40748c:	4603      	mov	r3, r0
  40748e:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407490:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407494:	f113 0f0a 	cmn.w	r3, #10
  407498:	d06d      	beq.n	407576 <tcp_input+0x5a6>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  40749a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40749e:	2b00      	cmp	r3, #0
  4074a0:	d003      	beq.n	4074aa <tcp_input+0x4da>
            pcb->refused_data = recv_data;
  4074a2:	4b12      	ldr	r3, [pc, #72]	; (4074ec <tcp_input+0x51c>)
  4074a4:	681a      	ldr	r2, [r3, #0]
  4074a6:	697b      	ldr	r3, [r7, #20]
  4074a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  4074aa:	4b11      	ldr	r3, [pc, #68]	; (4074f0 <tcp_input+0x520>)
  4074ac:	781b      	ldrb	r3, [r3, #0]
  4074ae:	f003 0320 	and.w	r3, r3, #32
  4074b2:	2b00      	cmp	r3, #0
  4074b4:	d056      	beq.n	407564 <tcp_input+0x594>
          if (pcb->refused_data != NULL) {
  4074b6:	697b      	ldr	r3, [r7, #20]
  4074b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  4074ba:	2b00      	cmp	r3, #0
  4074bc:	d02e      	beq.n	40751c <tcp_input+0x54c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  4074be:	697b      	ldr	r3, [r7, #20]
  4074c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  4074c2:	697a      	ldr	r2, [r7, #20]
  4074c4:	6f92      	ldr	r2, [r2, #120]	; 0x78
  4074c6:	7b52      	ldrb	r2, [r2, #13]
  4074c8:	f042 0220 	orr.w	r2, r2, #32
  4074cc:	b2d2      	uxtb	r2, r2
  4074ce:	735a      	strb	r2, [r3, #13]
  4074d0:	e048      	b.n	407564 <tcp_input+0x594>
  4074d2:	bf00      	nop
  4074d4:	20402064 	.word	0x20402064
  4074d8:	204033bc 	.word	0x204033bc
  4074dc:	204043f0 	.word	0x204043f0
  4074e0:	00407639 	.word	0x00407639
  4074e4:	00405a01 	.word	0x00405a01
  4074e8:	20402054 	.word	0x20402054
  4074ec:	2040207c 	.word	0x2040207c
  4074f0:	20402078 	.word	0x20402078
  4074f4:	20402074 	.word	0x20402074
  4074f8:	00406999 	.word	0x00406999
  4074fc:	20402076 	.word	0x20402076
  407500:	20404400 	.word	0x20404400
  407504:	004078c9 	.word	0x004078c9
  407508:	204043e8 	.word	0x204043e8
  40750c:	00406eb9 	.word	0x00406eb9
  407510:	00405365 	.word	0x00405365
  407514:	00406105 	.word	0x00406105
  407518:	00406b15 	.word	0x00406b15
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
  40751c:	697b      	ldr	r3, [r7, #20]
  40751e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  407520:	f640 3268 	movw	r2, #2920	; 0xb68
  407524:	4293      	cmp	r3, r2
  407526:	d005      	beq.n	407534 <tcp_input+0x564>
              pcb->rcv_wnd++;
  407528:	697b      	ldr	r3, [r7, #20]
  40752a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  40752c:	3301      	adds	r3, #1
  40752e:	b29a      	uxth	r2, r3
  407530:	697b      	ldr	r3, [r7, #20]
  407532:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  407534:	697b      	ldr	r3, [r7, #20]
  407536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40753a:	2b00      	cmp	r3, #0
  40753c:	d00b      	beq.n	407556 <tcp_input+0x586>
  40753e:	697b      	ldr	r3, [r7, #20]
  407540:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  407544:	697b      	ldr	r3, [r7, #20]
  407546:	6918      	ldr	r0, [r3, #16]
  407548:	2300      	movs	r3, #0
  40754a:	2200      	movs	r2, #0
  40754c:	6979      	ldr	r1, [r7, #20]
  40754e:	47a0      	blx	r4
  407550:	4603      	mov	r3, r0
  407552:	72fb      	strb	r3, [r7, #11]
  407554:	e001      	b.n	40755a <tcp_input+0x58a>
  407556:	2300      	movs	r3, #0
  407558:	72fb      	strb	r3, [r7, #11]
            if (err == ERR_ABRT) {
  40755a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40755e:	f113 0f0a 	cmn.w	r3, #10
  407562:	d00a      	beq.n	40757a <tcp_input+0x5aa>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  407564:	4b27      	ldr	r3, [pc, #156]	; (407604 <tcp_input+0x634>)
  407566:	2200      	movs	r2, #0
  407568:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
  40756a:	6978      	ldr	r0, [r7, #20]
  40756c:	4b26      	ldr	r3, [pc, #152]	; (407608 <tcp_input+0x638>)
  40756e:	4798      	blx	r3
  407570:	e004      	b.n	40757c <tcp_input+0x5ac>
            goto aborted;
  407572:	bf00      	nop
  407574:	e002      	b.n	40757c <tcp_input+0x5ac>
            goto aborted;
  407576:	bf00      	nop
  407578:	e000      	b.n	40757c <tcp_input+0x5ac>
              goto aborted;
  40757a:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
  40757c:	4b21      	ldr	r3, [pc, #132]	; (407604 <tcp_input+0x634>)
  40757e:	2200      	movs	r2, #0
  407580:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
  407582:	4b22      	ldr	r3, [pc, #136]	; (40760c <tcp_input+0x63c>)
  407584:	2200      	movs	r2, #0
  407586:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  407588:	4b21      	ldr	r3, [pc, #132]	; (407610 <tcp_input+0x640>)
  40758a:	685b      	ldr	r3, [r3, #4]
  40758c:	2b00      	cmp	r3, #0
  40758e:	d035      	beq.n	4075fc <tcp_input+0x62c>
    {
      pbuf_free(inseg.p);
  407590:	4b1f      	ldr	r3, [pc, #124]	; (407610 <tcp_input+0x640>)
  407592:	685b      	ldr	r3, [r3, #4]
  407594:	4618      	mov	r0, r3
  407596:	4b1f      	ldr	r3, [pc, #124]	; (407614 <tcp_input+0x644>)
  407598:	4798      	blx	r3
      inseg.p = NULL;
  40759a:	4b1d      	ldr	r3, [pc, #116]	; (407610 <tcp_input+0x640>)
  40759c:	2200      	movs	r2, #0
  40759e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  4075a0:	e02c      	b.n	4075fc <tcp_input+0x62c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  4075a2:	4b1d      	ldr	r3, [pc, #116]	; (407618 <tcp_input+0x648>)
  4075a4:	681b      	ldr	r3, [r3, #0]
  4075a6:	899b      	ldrh	r3, [r3, #12]
  4075a8:	b29b      	uxth	r3, r3
  4075aa:	4618      	mov	r0, r3
  4075ac:	4b1b      	ldr	r3, [pc, #108]	; (40761c <tcp_input+0x64c>)
  4075ae:	4798      	blx	r3
  4075b0:	4603      	mov	r3, r0
  4075b2:	f003 0304 	and.w	r3, r3, #4
  4075b6:	2b00      	cmp	r3, #0
  4075b8:	d115      	bne.n	4075e6 <tcp_input+0x616>
      tcp_rst(ackno, seqno + tcplen,
  4075ba:	4b19      	ldr	r3, [pc, #100]	; (407620 <tcp_input+0x650>)
  4075bc:	6818      	ldr	r0, [r3, #0]
  4075be:	4b19      	ldr	r3, [pc, #100]	; (407624 <tcp_input+0x654>)
  4075c0:	881b      	ldrh	r3, [r3, #0]
  4075c2:	461a      	mov	r2, r3
  4075c4:	4b18      	ldr	r3, [pc, #96]	; (407628 <tcp_input+0x658>)
  4075c6:	681b      	ldr	r3, [r3, #0]
  4075c8:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  4075ca:	4b13      	ldr	r3, [pc, #76]	; (407618 <tcp_input+0x648>)
  4075cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
  4075ce:	885b      	ldrh	r3, [r3, #2]
  4075d0:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  4075d2:	4a11      	ldr	r2, [pc, #68]	; (407618 <tcp_input+0x648>)
  4075d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen,
  4075d6:	8812      	ldrh	r2, [r2, #0]
  4075d8:	b292      	uxth	r2, r2
  4075da:	9201      	str	r2, [sp, #4]
  4075dc:	9300      	str	r3, [sp, #0]
  4075de:	4b13      	ldr	r3, [pc, #76]	; (40762c <tcp_input+0x65c>)
  4075e0:	4a13      	ldr	r2, [pc, #76]	; (407630 <tcp_input+0x660>)
  4075e2:	4c14      	ldr	r4, [pc, #80]	; (407634 <tcp_input+0x664>)
  4075e4:	47a0      	blx	r4
    pbuf_free(p);
  4075e6:	6878      	ldr	r0, [r7, #4]
  4075e8:	4b0a      	ldr	r3, [pc, #40]	; (407614 <tcp_input+0x644>)
  4075ea:	4798      	blx	r3
  return;
  4075ec:	e006      	b.n	4075fc <tcp_input+0x62c>
    goto dropped;
  4075ee:	bf00      	nop
  4075f0:	e000      	b.n	4075f4 <tcp_input+0x624>
    goto dropped;
  4075f2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
  4075f4:	6878      	ldr	r0, [r7, #4]
  4075f6:	4b07      	ldr	r3, [pc, #28]	; (407614 <tcp_input+0x644>)
  4075f8:	4798      	blx	r3
  4075fa:	e000      	b.n	4075fe <tcp_input+0x62e>
  return;
  4075fc:	bf00      	nop
}
  4075fe:	371c      	adds	r7, #28
  407600:	46bd      	mov	sp, r7
  407602:	bd90      	pop	{r4, r7, pc}
  407604:	20404400 	.word	0x20404400
  407608:	00409a95 	.word	0x00409a95
  40760c:	2040207c 	.word	0x2040207c
  407610:	20402054 	.word	0x20402054
  407614:	00405a01 	.word	0x00405a01
  407618:	20402064 	.word	0x20402064
  40761c:	00401e45 	.word	0x00401e45
  407620:	20402070 	.word	0x20402070
  407624:	20402076 	.word	0x20402076
  407628:	2040206c 	.word	0x2040206c
  40762c:	204033b4 	.word	0x204033b4
  407630:	204033bc 	.word	0x204033bc
  407634:	00409ee1 	.word	0x00409ee1

00407638 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  407638:	b590      	push	{r4, r7, lr}
  40763a:	b087      	sub	sp, #28
  40763c:	af02      	add	r7, sp, #8
  40763e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
  407640:	4b59      	ldr	r3, [pc, #356]	; (4077a8 <tcp_listen_input+0x170>)
  407642:	781b      	ldrb	r3, [r3, #0]
  407644:	f003 0304 	and.w	r3, r3, #4
  407648:	2b00      	cmp	r3, #0
  40764a:	d001      	beq.n	407650 <tcp_listen_input+0x18>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
  40764c:	2300      	movs	r3, #0
  40764e:	e0a7      	b.n	4077a0 <tcp_listen_input+0x168>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  407650:	4b55      	ldr	r3, [pc, #340]	; (4077a8 <tcp_listen_input+0x170>)
  407652:	781b      	ldrb	r3, [r3, #0]
  407654:	f003 0310 	and.w	r3, r3, #16
  407658:	2b00      	cmp	r3, #0
  40765a:	d016      	beq.n	40768a <tcp_listen_input+0x52>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  40765c:	4b53      	ldr	r3, [pc, #332]	; (4077ac <tcp_listen_input+0x174>)
  40765e:	6818      	ldr	r0, [r3, #0]
  407660:	4b53      	ldr	r3, [pc, #332]	; (4077b0 <tcp_listen_input+0x178>)
  407662:	881b      	ldrh	r3, [r3, #0]
  407664:	461a      	mov	r2, r3
  407666:	4b53      	ldr	r3, [pc, #332]	; (4077b4 <tcp_listen_input+0x17c>)
  407668:	681b      	ldr	r3, [r3, #0]
  40766a:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  40766c:	4b52      	ldr	r3, [pc, #328]	; (4077b8 <tcp_listen_input+0x180>)
  40766e:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407670:	885b      	ldrh	r3, [r3, #2]
  407672:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  407674:	4a50      	ldr	r2, [pc, #320]	; (4077b8 <tcp_listen_input+0x180>)
  407676:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407678:	8812      	ldrh	r2, [r2, #0]
  40767a:	b292      	uxth	r2, r2
  40767c:	9201      	str	r2, [sp, #4]
  40767e:	9300      	str	r3, [sp, #0]
  407680:	4b4e      	ldr	r3, [pc, #312]	; (4077bc <tcp_listen_input+0x184>)
  407682:	4a4f      	ldr	r2, [pc, #316]	; (4077c0 <tcp_listen_input+0x188>)
  407684:	4c4f      	ldr	r4, [pc, #316]	; (4077c4 <tcp_listen_input+0x18c>)
  407686:	47a0      	blx	r4
  407688:	e089      	b.n	40779e <tcp_listen_input+0x166>
  } else if (flags & TCP_SYN) {
  40768a:	4b47      	ldr	r3, [pc, #284]	; (4077a8 <tcp_listen_input+0x170>)
  40768c:	781b      	ldrb	r3, [r3, #0]
  40768e:	f003 0302 	and.w	r3, r3, #2
  407692:	2b00      	cmp	r3, #0
  407694:	f000 8083 	beq.w	40779e <tcp_listen_input+0x166>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  407698:	687b      	ldr	r3, [r7, #4]
  40769a:	7e5b      	ldrb	r3, [r3, #25]
  40769c:	4618      	mov	r0, r3
  40769e:	4b4a      	ldr	r3, [pc, #296]	; (4077c8 <tcp_listen_input+0x190>)
  4076a0:	4798      	blx	r3
  4076a2:	60f8      	str	r0, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  4076a4:	68fb      	ldr	r3, [r7, #12]
  4076a6:	2b00      	cmp	r3, #0
  4076a8:	d102      	bne.n	4076b0 <tcp_listen_input+0x78>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      return ERR_MEM;
  4076aa:	f04f 33ff 	mov.w	r3, #4294967295
  4076ae:	e077      	b.n	4077a0 <tcp_listen_input+0x168>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  4076b0:	4b43      	ldr	r3, [pc, #268]	; (4077c0 <tcp_listen_input+0x188>)
  4076b2:	681a      	ldr	r2, [r3, #0]
  4076b4:	68fb      	ldr	r3, [r7, #12]
  4076b6:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
  4076b8:	687b      	ldr	r3, [r7, #4]
  4076ba:	8b5a      	ldrh	r2, [r3, #26]
  4076bc:	68fb      	ldr	r3, [r7, #12]
  4076be:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  4076c0:	4b3e      	ldr	r3, [pc, #248]	; (4077bc <tcp_listen_input+0x184>)
  4076c2:	681a      	ldr	r2, [r3, #0]
  4076c4:	68fb      	ldr	r3, [r7, #12]
  4076c6:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
  4076c8:	4b3b      	ldr	r3, [pc, #236]	; (4077b8 <tcp_listen_input+0x180>)
  4076ca:	681b      	ldr	r3, [r3, #0]
  4076cc:	881b      	ldrh	r3, [r3, #0]
  4076ce:	b29a      	uxth	r2, r3
  4076d0:	68fb      	ldr	r3, [r7, #12]
  4076d2:	839a      	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  4076d4:	68fb      	ldr	r3, [r7, #12]
  4076d6:	2203      	movs	r2, #3
  4076d8:	761a      	strb	r2, [r3, #24]
    npcb->rcv_nxt = seqno + 1;
  4076da:	4b36      	ldr	r3, [pc, #216]	; (4077b4 <tcp_listen_input+0x17c>)
  4076dc:	681b      	ldr	r3, [r3, #0]
  4076de:	1c5a      	adds	r2, r3, #1
  4076e0:	68fb      	ldr	r3, [r7, #12]
  4076e2:	629a      	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  4076e4:	68fb      	ldr	r3, [r7, #12]
  4076e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4076e8:	68fb      	ldr	r3, [r7, #12]
  4076ea:	631a      	str	r2, [r3, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  4076ec:	4b32      	ldr	r3, [pc, #200]	; (4077b8 <tcp_listen_input+0x180>)
  4076ee:	681b      	ldr	r3, [r3, #0]
  4076f0:	89db      	ldrh	r3, [r3, #14]
  4076f2:	b29a      	uxth	r2, r3
  4076f4:	68fb      	ldr	r3, [r7, #12]
  4076f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  4076fa:	4b2f      	ldr	r3, [pc, #188]	; (4077b8 <tcp_listen_input+0x180>)
  4076fc:	681b      	ldr	r3, [r3, #0]
  4076fe:	89db      	ldrh	r3, [r3, #14]
  407700:	b29a      	uxth	r2, r3
  407702:	68fb      	ldr	r3, [r7, #12]
  407704:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  407708:	68fb      	ldr	r3, [r7, #12]
  40770a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  40770e:	68fb      	ldr	r3, [r7, #12]
  407710:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  407714:	4b27      	ldr	r3, [pc, #156]	; (4077b4 <tcp_listen_input+0x17c>)
  407716:	681b      	ldr	r3, [r3, #0]
  407718:	1e5a      	subs	r2, r3, #1
  40771a:	68fb      	ldr	r3, [r7, #12]
  40771c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  40771e:	687b      	ldr	r3, [r7, #4]
  407720:	691a      	ldr	r2, [r3, #16]
  407722:	68fb      	ldr	r3, [r7, #12]
  407724:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  407726:	687b      	ldr	r3, [r7, #4]
  407728:	695a      	ldr	r2, [r3, #20]
  40772a:	68fb      	ldr	r3, [r7, #12]
  40772c:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  40772e:	687b      	ldr	r3, [r7, #4]
  407730:	7a1b      	ldrb	r3, [r3, #8]
  407732:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  407736:	b2da      	uxtb	r2, r3
  407738:	68fb      	ldr	r3, [r7, #12]
  40773a:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
  40773c:	4b23      	ldr	r3, [pc, #140]	; (4077cc <tcp_listen_input+0x194>)
  40773e:	681a      	ldr	r2, [r3, #0]
  407740:	68fb      	ldr	r3, [r7, #12]
  407742:	60da      	str	r2, [r3, #12]
  407744:	4a21      	ldr	r2, [pc, #132]	; (4077cc <tcp_listen_input+0x194>)
  407746:	68fb      	ldr	r3, [r7, #12]
  407748:	6013      	str	r3, [r2, #0]
  40774a:	4b21      	ldr	r3, [pc, #132]	; (4077d0 <tcp_listen_input+0x198>)
  40774c:	4798      	blx	r3
  40774e:	4b21      	ldr	r3, [pc, #132]	; (4077d4 <tcp_listen_input+0x19c>)
  407750:	2201      	movs	r2, #1
  407752:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  407754:	68f8      	ldr	r0, [r7, #12]
  407756:	4b20      	ldr	r3, [pc, #128]	; (4077d8 <tcp_listen_input+0x1a0>)
  407758:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  40775a:	68fb      	ldr	r3, [r7, #12]
  40775c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  40775e:	68fb      	ldr	r3, [r7, #12]
  407760:	3304      	adds	r3, #4
  407762:	4619      	mov	r1, r3
  407764:	4610      	mov	r0, r2
  407766:	4b1d      	ldr	r3, [pc, #116]	; (4077dc <tcp_listen_input+0x1a4>)
  407768:	4798      	blx	r3
  40776a:	4603      	mov	r3, r0
  40776c:	461a      	mov	r2, r3
  40776e:	68fb      	ldr	r3, [r7, #12]
  407770:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  407772:	2112      	movs	r1, #18
  407774:	68f8      	ldr	r0, [r7, #12]
  407776:	4b1a      	ldr	r3, [pc, #104]	; (4077e0 <tcp_listen_input+0x1a8>)
  407778:	4798      	blx	r3
  40777a:	4603      	mov	r3, r0
  40777c:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
  40777e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407782:	2b00      	cmp	r3, #0
  407784:	d006      	beq.n	407794 <tcp_listen_input+0x15c>
      tcp_abandon(npcb, 0);
  407786:	2100      	movs	r1, #0
  407788:	68f8      	ldr	r0, [r7, #12]
  40778a:	4b16      	ldr	r3, [pc, #88]	; (4077e4 <tcp_listen_input+0x1ac>)
  40778c:	4798      	blx	r3
      return rc;
  40778e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407792:	e005      	b.n	4077a0 <tcp_listen_input+0x168>
    }
    return tcp_output(npcb);
  407794:	68f8      	ldr	r0, [r7, #12]
  407796:	4b14      	ldr	r3, [pc, #80]	; (4077e8 <tcp_listen_input+0x1b0>)
  407798:	4798      	blx	r3
  40779a:	4603      	mov	r3, r0
  40779c:	e000      	b.n	4077a0 <tcp_listen_input+0x168>
  }
  return ERR_OK;
  40779e:	2300      	movs	r3, #0
}
  4077a0:	4618      	mov	r0, r3
  4077a2:	3714      	adds	r7, #20
  4077a4:	46bd      	mov	sp, r7
  4077a6:	bd90      	pop	{r4, r7, pc}
  4077a8:	20402074 	.word	0x20402074
  4077ac:	20402070 	.word	0x20402070
  4077b0:	20402076 	.word	0x20402076
  4077b4:	2040206c 	.word	0x2040206c
  4077b8:	20402064 	.word	0x20402064
  4077bc:	204033b4 	.word	0x204033b4
  4077c0:	204033bc 	.word	0x204033bc
  4077c4:	00409ee1 	.word	0x00409ee1
  4077c8:	00406c4d 	.word	0x00406c4d
  4077cc:	204043e8 	.word	0x204043e8
  4077d0:	00404bf5 	.word	0x00404bf5
  4077d4:	204043e4 	.word	0x204043e4
  4077d8:	00408f61 	.word	0x00408f61
  4077dc:	00406f8d 	.word	0x00406f8d
  4077e0:	00409861 	.word	0x00409861
  4077e4:	00406021 	.word	0x00406021
  4077e8:	00409a95 	.word	0x00409a95

004077ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
  4077ec:	b590      	push	{r4, r7, lr}
  4077ee:	b085      	sub	sp, #20
  4077f0:	af02      	add	r7, sp, #8
  4077f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
  4077f4:	4b2a      	ldr	r3, [pc, #168]	; (4078a0 <tcp_timewait_input+0xb4>)
  4077f6:	781b      	ldrb	r3, [r3, #0]
  4077f8:	f003 0304 	and.w	r3, r3, #4
  4077fc:	2b00      	cmp	r3, #0
  4077fe:	d001      	beq.n	407804 <tcp_timewait_input+0x18>
    return ERR_OK;
  407800:	2300      	movs	r3, #0
  407802:	e049      	b.n	407898 <tcp_timewait_input+0xac>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  407804:	4b26      	ldr	r3, [pc, #152]	; (4078a0 <tcp_timewait_input+0xb4>)
  407806:	781b      	ldrb	r3, [r3, #0]
  407808:	f003 0302 	and.w	r3, r3, #2
  40780c:	2b00      	cmp	r3, #0
  40780e:	d028      	beq.n	407862 <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  407810:	4b24      	ldr	r3, [pc, #144]	; (4078a4 <tcp_timewait_input+0xb8>)
  407812:	681a      	ldr	r2, [r3, #0]
  407814:	687b      	ldr	r3, [r7, #4]
  407816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407818:	1ad3      	subs	r3, r2, r3
  40781a:	2b00      	cmp	r3, #0
  40781c:	db2b      	blt.n	407876 <tcp_timewait_input+0x8a>
  40781e:	4b21      	ldr	r3, [pc, #132]	; (4078a4 <tcp_timewait_input+0xb8>)
  407820:	681a      	ldr	r2, [r3, #0]
  407822:	687b      	ldr	r3, [r7, #4]
  407824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407826:	6879      	ldr	r1, [r7, #4]
  407828:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  40782a:	440b      	add	r3, r1
  40782c:	1ad3      	subs	r3, r2, r3
  40782e:	2b00      	cmp	r3, #0
  407830:	dc21      	bgt.n	407876 <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407832:	4b1d      	ldr	r3, [pc, #116]	; (4078a8 <tcp_timewait_input+0xbc>)
  407834:	6818      	ldr	r0, [r3, #0]
  407836:	4b1d      	ldr	r3, [pc, #116]	; (4078ac <tcp_timewait_input+0xc0>)
  407838:	881b      	ldrh	r3, [r3, #0]
  40783a:	461a      	mov	r2, r3
  40783c:	4b19      	ldr	r3, [pc, #100]	; (4078a4 <tcp_timewait_input+0xb8>)
  40783e:	681b      	ldr	r3, [r3, #0]
  407840:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  407842:	4b1b      	ldr	r3, [pc, #108]	; (4078b0 <tcp_timewait_input+0xc4>)
  407844:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407846:	885b      	ldrh	r3, [r3, #2]
  407848:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  40784a:	4a19      	ldr	r2, [pc, #100]	; (4078b0 <tcp_timewait_input+0xc4>)
  40784c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40784e:	8812      	ldrh	r2, [r2, #0]
  407850:	b292      	uxth	r2, r2
  407852:	9201      	str	r2, [sp, #4]
  407854:	9300      	str	r3, [sp, #0]
  407856:	4b17      	ldr	r3, [pc, #92]	; (4078b4 <tcp_timewait_input+0xc8>)
  407858:	4a17      	ldr	r2, [pc, #92]	; (4078b8 <tcp_timewait_input+0xcc>)
  40785a:	4c18      	ldr	r4, [pc, #96]	; (4078bc <tcp_timewait_input+0xd0>)
  40785c:	47a0      	blx	r4
      return ERR_OK;
  40785e:	2300      	movs	r3, #0
  407860:	e01a      	b.n	407898 <tcp_timewait_input+0xac>
    }
  } else if (flags & TCP_FIN) {
  407862:	4b0f      	ldr	r3, [pc, #60]	; (4078a0 <tcp_timewait_input+0xb4>)
  407864:	781b      	ldrb	r3, [r3, #0]
  407866:	f003 0301 	and.w	r3, r3, #1
  40786a:	2b00      	cmp	r3, #0
  40786c:	d003      	beq.n	407876 <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  40786e:	4b14      	ldr	r3, [pc, #80]	; (4078c0 <tcp_timewait_input+0xd4>)
  407870:	681a      	ldr	r2, [r3, #0]
  407872:	687b      	ldr	r3, [r7, #4]
  407874:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0))  {
  407876:	4b0d      	ldr	r3, [pc, #52]	; (4078ac <tcp_timewait_input+0xc0>)
  407878:	881b      	ldrh	r3, [r3, #0]
  40787a:	2b00      	cmp	r3, #0
  40787c:	d00b      	beq.n	407896 <tcp_timewait_input+0xaa>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  40787e:	687b      	ldr	r3, [r7, #4]
  407880:	7f9b      	ldrb	r3, [r3, #30]
  407882:	f043 0302 	orr.w	r3, r3, #2
  407886:	b2da      	uxtb	r2, r3
  407888:	687b      	ldr	r3, [r7, #4]
  40788a:	779a      	strb	r2, [r3, #30]
    return tcp_output(pcb);
  40788c:	6878      	ldr	r0, [r7, #4]
  40788e:	4b0d      	ldr	r3, [pc, #52]	; (4078c4 <tcp_timewait_input+0xd8>)
  407890:	4798      	blx	r3
  407892:	4603      	mov	r3, r0
  407894:	e000      	b.n	407898 <tcp_timewait_input+0xac>
  }
  return ERR_OK;
  407896:	2300      	movs	r3, #0
}
  407898:	4618      	mov	r0, r3
  40789a:	370c      	adds	r7, #12
  40789c:	46bd      	mov	sp, r7
  40789e:	bd90      	pop	{r4, r7, pc}
  4078a0:	20402074 	.word	0x20402074
  4078a4:	2040206c 	.word	0x2040206c
  4078a8:	20402070 	.word	0x20402070
  4078ac:	20402076 	.word	0x20402076
  4078b0:	20402064 	.word	0x20402064
  4078b4:	204033b4 	.word	0x204033b4
  4078b8:	204033bc 	.word	0x204033bc
  4078bc:	00409ee1 	.word	0x00409ee1
  4078c0:	204043ec 	.word	0x204043ec
  4078c4:	00409a95 	.word	0x00409a95

004078c8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  4078c8:	b590      	push	{r4, r7, lr}
  4078ca:	b089      	sub	sp, #36	; 0x24
  4078cc:	af02      	add	r7, sp, #8
  4078ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  4078d0:	2300      	movs	r3, #0
  4078d2:	75fb      	strb	r3, [r7, #23]
  err_t err;

  err = ERR_OK;
  4078d4:	2300      	movs	r3, #0
  4078d6:	75bb      	strb	r3, [r7, #22]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  4078d8:	4b96      	ldr	r3, [pc, #600]	; (407b34 <tcp_process+0x26c>)
  4078da:	781b      	ldrb	r3, [r3, #0]
  4078dc:	f003 0304 	and.w	r3, r3, #4
  4078e0:	2b00      	cmp	r3, #0
  4078e2:	d035      	beq.n	407950 <tcp_process+0x88>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  4078e4:	687b      	ldr	r3, [r7, #4]
  4078e6:	7e1b      	ldrb	r3, [r3, #24]
  4078e8:	2b02      	cmp	r3, #2
  4078ea:	d108      	bne.n	4078fe <tcp_process+0x36>
      if (ackno == pcb->snd_nxt) {
  4078ec:	687b      	ldr	r3, [r7, #4]
  4078ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4078f0:	4b91      	ldr	r3, [pc, #580]	; (407b38 <tcp_process+0x270>)
  4078f2:	681b      	ldr	r3, [r3, #0]
  4078f4:	429a      	cmp	r2, r3
  4078f6:	d115      	bne.n	407924 <tcp_process+0x5c>
        acceptable = 1;
  4078f8:	2301      	movs	r3, #1
  4078fa:	75fb      	strb	r3, [r7, #23]
  4078fc:	e012      	b.n	407924 <tcp_process+0x5c>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4078fe:	4b8f      	ldr	r3, [pc, #572]	; (407b3c <tcp_process+0x274>)
  407900:	681a      	ldr	r2, [r3, #0]
  407902:	687b      	ldr	r3, [r7, #4]
  407904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407906:	1ad3      	subs	r3, r2, r3
  407908:	2b00      	cmp	r3, #0
  40790a:	db0b      	blt.n	407924 <tcp_process+0x5c>
  40790c:	4b8b      	ldr	r3, [pc, #556]	; (407b3c <tcp_process+0x274>)
  40790e:	681a      	ldr	r2, [r3, #0]
  407910:	687b      	ldr	r3, [r7, #4]
  407912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407914:	6879      	ldr	r1, [r7, #4]
  407916:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  407918:	440b      	add	r3, r1
  40791a:	1ad3      	subs	r3, r2, r3
  40791c:	2b00      	cmp	r3, #0
  40791e:	dc01      	bgt.n	407924 <tcp_process+0x5c>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
  407920:	2301      	movs	r3, #1
  407922:	75fb      	strb	r3, [r7, #23]
      }
    }

    if (acceptable) {
  407924:	7dfb      	ldrb	r3, [r7, #23]
  407926:	2b00      	cmp	r3, #0
  407928:	d010      	beq.n	40794c <tcp_process+0x84>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
  40792a:	4b85      	ldr	r3, [pc, #532]	; (407b40 <tcp_process+0x278>)
  40792c:	781b      	ldrb	r3, [r3, #0]
  40792e:	f043 0308 	orr.w	r3, r3, #8
  407932:	b2da      	uxtb	r2, r3
  407934:	4b82      	ldr	r3, [pc, #520]	; (407b40 <tcp_process+0x278>)
  407936:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  407938:	687b      	ldr	r3, [r7, #4]
  40793a:	7f9b      	ldrb	r3, [r3, #30]
  40793c:	f023 0301 	bic.w	r3, r3, #1
  407940:	b2da      	uxtb	r2, r3
  407942:	687b      	ldr	r3, [r7, #4]
  407944:	779a      	strb	r2, [r3, #30]
      return ERR_RST;
  407946:	f06f 030a 	mvn.w	r3, #10
  40794a:	e324      	b.n	407f96 <tcp_process+0x6ce>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  40794c:	2300      	movs	r3, #0
  40794e:	e322      	b.n	407f96 <tcp_process+0x6ce>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  407950:	4b78      	ldr	r3, [pc, #480]	; (407b34 <tcp_process+0x26c>)
  407952:	781b      	ldrb	r3, [r3, #0]
  407954:	f003 0302 	and.w	r3, r3, #2
  407958:	2b00      	cmp	r3, #0
  40795a:	d010      	beq.n	40797e <tcp_process+0xb6>
  40795c:	687b      	ldr	r3, [r7, #4]
  40795e:	7e1b      	ldrb	r3, [r3, #24]
  407960:	2b02      	cmp	r3, #2
  407962:	d00c      	beq.n	40797e <tcp_process+0xb6>
  407964:	687b      	ldr	r3, [r7, #4]
  407966:	7e1b      	ldrb	r3, [r3, #24]
  407968:	2b03      	cmp	r3, #3
  40796a:	d008      	beq.n	40797e <tcp_process+0xb6>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  40796c:	687b      	ldr	r3, [r7, #4]
  40796e:	7f9b      	ldrb	r3, [r3, #30]
  407970:	f043 0302 	orr.w	r3, r3, #2
  407974:	b2da      	uxtb	r2, r3
  407976:	687b      	ldr	r3, [r7, #4]
  407978:	779a      	strb	r2, [r3, #30]
    return ERR_OK;
  40797a:	2300      	movs	r3, #0
  40797c:	e30b      	b.n	407f96 <tcp_process+0x6ce>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  40797e:	687b      	ldr	r3, [r7, #4]
  407980:	7f9b      	ldrb	r3, [r3, #30]
  407982:	f003 0310 	and.w	r3, r3, #16
  407986:	2b00      	cmp	r3, #0
  407988:	d103      	bne.n	407992 <tcp_process+0xca>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  40798a:	4b6e      	ldr	r3, [pc, #440]	; (407b44 <tcp_process+0x27c>)
  40798c:	681a      	ldr	r2, [r3, #0]
  40798e:	687b      	ldr	r3, [r7, #4]
  407990:	625a      	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  407992:	687b      	ldr	r3, [r7, #4]
  407994:	2200      	movs	r2, #0
  407996:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
  40799a:	6878      	ldr	r0, [r7, #4]
  40799c:	4b6a      	ldr	r3, [pc, #424]	; (407b48 <tcp_process+0x280>)
  40799e:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  4079a0:	687b      	ldr	r3, [r7, #4]
  4079a2:	7e1b      	ldrb	r3, [r3, #24]
  4079a4:	3b02      	subs	r3, #2
  4079a6:	2b07      	cmp	r3, #7
  4079a8:	f200 82e5 	bhi.w	407f76 <tcp_process+0x6ae>
  4079ac:	a201      	add	r2, pc, #4	; (adr r2, 4079b4 <tcp_process+0xec>)
  4079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4079b2:	bf00      	nop
  4079b4:	004079d5 	.word	0x004079d5
  4079b8:	00407b99 	.word	0x00407b99
  4079bc:	00407cc3 	.word	0x00407cc3
  4079c0:	00407ced 	.word	0x00407ced
  4079c4:	00407e1d 	.word	0x00407e1d
  4079c8:	00407cc3 	.word	0x00407cc3
  4079cc:	00407eb5 	.word	0x00407eb5
  4079d0:	00407f49 	.word	0x00407f49
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  4079d4:	4b57      	ldr	r3, [pc, #348]	; (407b34 <tcp_process+0x26c>)
  4079d6:	781b      	ldrb	r3, [r3, #0]
  4079d8:	f003 0310 	and.w	r3, r3, #16
  4079dc:	2b00      	cmp	r3, #0
  4079de:	f000 80bd 	beq.w	407b5c <tcp_process+0x294>
  4079e2:	4b54      	ldr	r3, [pc, #336]	; (407b34 <tcp_process+0x26c>)
  4079e4:	781b      	ldrb	r3, [r3, #0]
  4079e6:	f003 0302 	and.w	r3, r3, #2
  4079ea:	2b00      	cmp	r3, #0
  4079ec:	f000 80b6 	beq.w	407b5c <tcp_process+0x294>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  4079f0:	687b      	ldr	r3, [r7, #4]
  4079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4079f4:	68db      	ldr	r3, [r3, #12]
  4079f6:	685b      	ldr	r3, [r3, #4]
  4079f8:	4618      	mov	r0, r3
  4079fa:	4b54      	ldr	r3, [pc, #336]	; (407b4c <tcp_process+0x284>)
  4079fc:	4798      	blx	r3
  4079fe:	4603      	mov	r3, r0
  407a00:	1c5a      	adds	r2, r3, #1
  407a02:	4b4d      	ldr	r3, [pc, #308]	; (407b38 <tcp_process+0x270>)
  407a04:	681b      	ldr	r3, [r3, #0]
  407a06:	429a      	cmp	r2, r3
  407a08:	f040 80a8 	bne.w	407b5c <tcp_process+0x294>
      pcb->snd_buf++;
  407a0c:	687b      	ldr	r3, [r7, #4]
  407a0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  407a12:	3301      	adds	r3, #1
  407a14:	b29a      	uxth	r2, r3
  407a16:	687b      	ldr	r3, [r7, #4]
  407a18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  407a1c:	4b47      	ldr	r3, [pc, #284]	; (407b3c <tcp_process+0x274>)
  407a1e:	681b      	ldr	r3, [r3, #0]
  407a20:	1c5a      	adds	r2, r3, #1
  407a22:	687b      	ldr	r3, [r7, #4]
  407a24:	629a      	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  407a26:	687b      	ldr	r3, [r7, #4]
  407a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407a2a:	687b      	ldr	r3, [r7, #4]
  407a2c:	631a      	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  407a2e:	4b42      	ldr	r3, [pc, #264]	; (407b38 <tcp_process+0x270>)
  407a30:	681a      	ldr	r2, [r3, #0]
  407a32:	687b      	ldr	r3, [r7, #4]
  407a34:	649a      	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  407a36:	4b46      	ldr	r3, [pc, #280]	; (407b50 <tcp_process+0x288>)
  407a38:	681b      	ldr	r3, [r3, #0]
  407a3a:	89db      	ldrh	r3, [r3, #14]
  407a3c:	b29a      	uxth	r2, r3
  407a3e:	687b      	ldr	r3, [r7, #4]
  407a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  407a44:	4b42      	ldr	r3, [pc, #264]	; (407b50 <tcp_process+0x288>)
  407a46:	681b      	ldr	r3, [r3, #0]
  407a48:	89db      	ldrh	r3, [r3, #14]
  407a4a:	b29a      	uxth	r2, r3
  407a4c:	687b      	ldr	r3, [r7, #4]
  407a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  407a52:	4b3a      	ldr	r3, [pc, #232]	; (407b3c <tcp_process+0x274>)
  407a54:	681b      	ldr	r3, [r3, #0]
  407a56:	1e5a      	subs	r2, r3, #1
  407a58:	687b      	ldr	r3, [r7, #4]
  407a5a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  407a5c:	687b      	ldr	r3, [r7, #4]
  407a5e:	2204      	movs	r2, #4
  407a60:	761a      	strb	r2, [r3, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  407a62:	687b      	ldr	r3, [r7, #4]
  407a64:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  407a66:	687b      	ldr	r3, [r7, #4]
  407a68:	3304      	adds	r3, #4
  407a6a:	4619      	mov	r1, r3
  407a6c:	4610      	mov	r0, r2
  407a6e:	4b39      	ldr	r3, [pc, #228]	; (407b54 <tcp_process+0x28c>)
  407a70:	4798      	blx	r3
  407a72:	4603      	mov	r3, r0
  407a74:	461a      	mov	r2, r3
  407a76:	687b      	ldr	r3, [r7, #4]
  407a78:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  407a7a:	687b      	ldr	r3, [r7, #4]
  407a7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407a7e:	461a      	mov	r2, r3
  407a80:	0092      	lsls	r2, r2, #2
  407a82:	4413      	add	r3, r2
  407a84:	005b      	lsls	r3, r3, #1
  407a86:	b29a      	uxth	r2, r3
  407a88:	687b      	ldr	r3, [r7, #4]
  407a8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  407a8e:	687b      	ldr	r3, [r7, #4]
  407a90:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  407a94:	2b01      	cmp	r3, #1
  407a96:	d104      	bne.n	407aa2 <tcp_process+0x1da>
  407a98:	687b      	ldr	r3, [r7, #4]
  407a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407a9c:	005b      	lsls	r3, r3, #1
  407a9e:	b29b      	uxth	r3, r3
  407aa0:	e001      	b.n	407aa6 <tcp_process+0x1de>
  407aa2:	687b      	ldr	r3, [r7, #4]
  407aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407aa6:	687a      	ldr	r2, [r7, #4]
  407aa8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
  407aac:	687b      	ldr	r3, [r7, #4]
  407aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  407ab2:	3b01      	subs	r3, #1
  407ab4:	b29a      	uxth	r2, r3
  407ab6:	687b      	ldr	r3, [r7, #4]
  407ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  407abc:	687b      	ldr	r3, [r7, #4]
  407abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407ac0:	613b      	str	r3, [r7, #16]
      pcb->unacked = rseg->next;
  407ac2:	693b      	ldr	r3, [r7, #16]
  407ac4:	681a      	ldr	r2, [r3, #0]
  407ac6:	687b      	ldr	r3, [r7, #4]
  407ac8:	671a      	str	r2, [r3, #112]	; 0x70
      tcp_seg_free(rseg);
  407aca:	6938      	ldr	r0, [r7, #16]
  407acc:	4b22      	ldr	r3, [pc, #136]	; (407b58 <tcp_process+0x290>)
  407ace:	4798      	blx	r3

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  407ad0:	687b      	ldr	r3, [r7, #4]
  407ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407ad4:	2b00      	cmp	r3, #0
  407ad6:	d104      	bne.n	407ae2 <tcp_process+0x21a>
        pcb->rtime = -1;
  407ad8:	687b      	ldr	r3, [r7, #4]
  407ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407ade:	869a      	strh	r2, [r3, #52]	; 0x34
  407ae0:	e006      	b.n	407af0 <tcp_process+0x228>
      else {
        pcb->rtime = 0;
  407ae2:	687b      	ldr	r3, [r7, #4]
  407ae4:	2200      	movs	r2, #0
  407ae6:	869a      	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  407ae8:	687b      	ldr	r3, [r7, #4]
  407aea:	2200      	movs	r2, #0
  407aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  407af0:	687b      	ldr	r3, [r7, #4]
  407af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  407af6:	2b00      	cmp	r3, #0
  407af8:	d00a      	beq.n	407b10 <tcp_process+0x248>
  407afa:	687b      	ldr	r3, [r7, #4]
  407afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  407b00:	687a      	ldr	r2, [r7, #4]
  407b02:	6910      	ldr	r0, [r2, #16]
  407b04:	2200      	movs	r2, #0
  407b06:	6879      	ldr	r1, [r7, #4]
  407b08:	4798      	blx	r3
  407b0a:	4603      	mov	r3, r0
  407b0c:	75bb      	strb	r3, [r7, #22]
  407b0e:	e001      	b.n	407b14 <tcp_process+0x24c>
  407b10:	2300      	movs	r3, #0
  407b12:	75bb      	strb	r3, [r7, #22]
      if (err == ERR_ABRT) {
  407b14:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407b18:	f113 0f0a 	cmn.w	r3, #10
  407b1c:	d102      	bne.n	407b24 <tcp_process+0x25c>
        return ERR_ABRT;
  407b1e:	f06f 0309 	mvn.w	r3, #9
  407b22:	e238      	b.n	407f96 <tcp_process+0x6ce>
      }
      tcp_ack_now(pcb);
  407b24:	687b      	ldr	r3, [r7, #4]
  407b26:	7f9b      	ldrb	r3, [r3, #30]
  407b28:	f043 0302 	orr.w	r3, r3, #2
  407b2c:	b2da      	uxtb	r2, r3
  407b2e:	687b      	ldr	r3, [r7, #4]
  407b30:	779a      	strb	r2, [r3, #30]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
  407b32:	e222      	b.n	407f7a <tcp_process+0x6b2>
  407b34:	20402074 	.word	0x20402074
  407b38:	20402070 	.word	0x20402070
  407b3c:	2040206c 	.word	0x2040206c
  407b40:	20402078 	.word	0x20402078
  407b44:	204043ec 	.word	0x204043ec
  407b48:	00408f61 	.word	0x00408f61
  407b4c:	00401e99 	.word	0x00401e99
  407b50:	20402064 	.word	0x20402064
  407b54:	00406f8d 	.word	0x00406f8d
  407b58:	00406a99 	.word	0x00406a99
    else if (flags & TCP_ACK) {
  407b5c:	4b94      	ldr	r3, [pc, #592]	; (407db0 <tcp_process+0x4e8>)
  407b5e:	781b      	ldrb	r3, [r3, #0]
  407b60:	f003 0310 	and.w	r3, r3, #16
  407b64:	2b00      	cmp	r3, #0
  407b66:	f000 8208 	beq.w	407f7a <tcp_process+0x6b2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407b6a:	4b92      	ldr	r3, [pc, #584]	; (407db4 <tcp_process+0x4ec>)
  407b6c:	6818      	ldr	r0, [r3, #0]
  407b6e:	4b92      	ldr	r3, [pc, #584]	; (407db8 <tcp_process+0x4f0>)
  407b70:	881b      	ldrh	r3, [r3, #0]
  407b72:	461a      	mov	r2, r3
  407b74:	4b91      	ldr	r3, [pc, #580]	; (407dbc <tcp_process+0x4f4>)
  407b76:	681b      	ldr	r3, [r3, #0]
  407b78:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  407b7a:	4b91      	ldr	r3, [pc, #580]	; (407dc0 <tcp_process+0x4f8>)
  407b7c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407b7e:	885b      	ldrh	r3, [r3, #2]
  407b80:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  407b82:	4a8f      	ldr	r2, [pc, #572]	; (407dc0 <tcp_process+0x4f8>)
  407b84:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407b86:	8812      	ldrh	r2, [r2, #0]
  407b88:	b292      	uxth	r2, r2
  407b8a:	9201      	str	r2, [sp, #4]
  407b8c:	9300      	str	r3, [sp, #0]
  407b8e:	4b8d      	ldr	r3, [pc, #564]	; (407dc4 <tcp_process+0x4fc>)
  407b90:	4a8d      	ldr	r2, [pc, #564]	; (407dc8 <tcp_process+0x500>)
  407b92:	4c8e      	ldr	r4, [pc, #568]	; (407dcc <tcp_process+0x504>)
  407b94:	47a0      	blx	r4
    break;
  407b96:	e1f0      	b.n	407f7a <tcp_process+0x6b2>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  407b98:	4b85      	ldr	r3, [pc, #532]	; (407db0 <tcp_process+0x4e8>)
  407b9a:	781b      	ldrb	r3, [r3, #0]
  407b9c:	f003 0310 	and.w	r3, r3, #16
  407ba0:	2b00      	cmp	r3, #0
  407ba2:	d079      	beq.n	407c98 <tcp_process+0x3d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  407ba4:	4b83      	ldr	r3, [pc, #524]	; (407db4 <tcp_process+0x4ec>)
  407ba6:	681a      	ldr	r2, [r3, #0]
  407ba8:	687b      	ldr	r3, [r7, #4]
  407baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  407bac:	1ad3      	subs	r3, r2, r3
  407bae:	3b01      	subs	r3, #1
  407bb0:	2b00      	cmp	r3, #0
  407bb2:	db5a      	blt.n	407c6a <tcp_process+0x3a2>
  407bb4:	4b7f      	ldr	r3, [pc, #508]	; (407db4 <tcp_process+0x4ec>)
  407bb6:	681a      	ldr	r2, [r3, #0]
  407bb8:	687b      	ldr	r3, [r7, #4]
  407bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  407bbc:	1ad3      	subs	r3, r2, r3
  407bbe:	2b00      	cmp	r3, #0
  407bc0:	dc53      	bgt.n	407c6a <tcp_process+0x3a2>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  407bc2:	687b      	ldr	r3, [r7, #4]
  407bc4:	2204      	movs	r2, #4
  407bc6:	761a      	strb	r2, [r3, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  407bc8:	687b      	ldr	r3, [r7, #4]
  407bca:	695b      	ldr	r3, [r3, #20]
  407bcc:	2b00      	cmp	r3, #0
  407bce:	d009      	beq.n	407be4 <tcp_process+0x31c>
  407bd0:	687b      	ldr	r3, [r7, #4]
  407bd2:	695b      	ldr	r3, [r3, #20]
  407bd4:	687a      	ldr	r2, [r7, #4]
  407bd6:	6910      	ldr	r0, [r2, #16]
  407bd8:	2200      	movs	r2, #0
  407bda:	6879      	ldr	r1, [r7, #4]
  407bdc:	4798      	blx	r3
  407bde:	4603      	mov	r3, r0
  407be0:	75bb      	strb	r3, [r7, #22]
  407be2:	e001      	b.n	407be8 <tcp_process+0x320>
  407be4:	23f2      	movs	r3, #242	; 0xf2
  407be6:	75bb      	strb	r3, [r7, #22]
        if (err != ERR_OK) {
  407be8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407bec:	2b00      	cmp	r3, #0
  407bee:	d00a      	beq.n	407c06 <tcp_process+0x33e>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  407bf0:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407bf4:	f113 0f0a 	cmn.w	r3, #10
  407bf8:	d002      	beq.n	407c00 <tcp_process+0x338>
            tcp_abort(pcb);
  407bfa:	6878      	ldr	r0, [r7, #4]
  407bfc:	4b74      	ldr	r3, [pc, #464]	; (407dd0 <tcp_process+0x508>)
  407bfe:	4798      	blx	r3
          }
          return ERR_ABRT;
  407c00:	f06f 0309 	mvn.w	r3, #9
  407c04:	e1c7      	b.n	407f96 <tcp_process+0x6ce>
        }
        old_cwnd = pcb->cwnd;
  407c06:	687b      	ldr	r3, [r7, #4]
  407c08:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  407c0c:	81fb      	strh	r3, [r7, #14]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  407c0e:	6878      	ldr	r0, [r7, #4]
  407c10:	4b70      	ldr	r3, [pc, #448]	; (407dd4 <tcp_process+0x50c>)
  407c12:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
  407c14:	687b      	ldr	r3, [r7, #4]
  407c16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  407c1a:	2b00      	cmp	r3, #0
  407c1c:	d007      	beq.n	407c2e <tcp_process+0x366>
          pcb->acked--;
  407c1e:	687b      	ldr	r3, [r7, #4]
  407c20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  407c24:	3b01      	subs	r3, #1
  407c26:	b29a      	uxth	r2, r3
  407c28:	687b      	ldr	r3, [r7, #4]
  407c2a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  407c2e:	89fb      	ldrh	r3, [r7, #14]
  407c30:	2b01      	cmp	r3, #1
  407c32:	d104      	bne.n	407c3e <tcp_process+0x376>
  407c34:	687b      	ldr	r3, [r7, #4]
  407c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407c38:	005b      	lsls	r3, r3, #1
  407c3a:	b29b      	uxth	r3, r3
  407c3c:	e001      	b.n	407c42 <tcp_process+0x37a>
  407c3e:	687b      	ldr	r3, [r7, #4]
  407c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407c42:	687a      	ldr	r2, [r7, #4]
  407c44:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c

        if (recv_flags & TF_GOT_FIN) {
  407c48:	4b63      	ldr	r3, [pc, #396]	; (407dd8 <tcp_process+0x510>)
  407c4a:	781b      	ldrb	r3, [r3, #0]
  407c4c:	f003 0320 	and.w	r3, r3, #32
  407c50:	2b00      	cmp	r3, #0
  407c52:	d034      	beq.n	407cbe <tcp_process+0x3f6>
          tcp_ack_now(pcb);
  407c54:	687b      	ldr	r3, [r7, #4]
  407c56:	7f9b      	ldrb	r3, [r3, #30]
  407c58:	f043 0302 	orr.w	r3, r3, #2
  407c5c:	b2da      	uxtb	r2, r3
  407c5e:	687b      	ldr	r3, [r7, #4]
  407c60:	779a      	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  407c62:	687b      	ldr	r3, [r7, #4]
  407c64:	2207      	movs	r2, #7
  407c66:	761a      	strb	r2, [r3, #24]
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  407c68:	e029      	b.n	407cbe <tcp_process+0x3f6>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c6a:	4b52      	ldr	r3, [pc, #328]	; (407db4 <tcp_process+0x4ec>)
  407c6c:	6818      	ldr	r0, [r3, #0]
  407c6e:	4b52      	ldr	r3, [pc, #328]	; (407db8 <tcp_process+0x4f0>)
  407c70:	881b      	ldrh	r3, [r3, #0]
  407c72:	461a      	mov	r2, r3
  407c74:	4b51      	ldr	r3, [pc, #324]	; (407dbc <tcp_process+0x4f4>)
  407c76:	681b      	ldr	r3, [r3, #0]
  407c78:	18d1      	adds	r1, r2, r3
                tcphdr->dest, tcphdr->src);
  407c7a:	4b51      	ldr	r3, [pc, #324]	; (407dc0 <tcp_process+0x4f8>)
  407c7c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c7e:	885b      	ldrh	r3, [r3, #2]
  407c80:	b29b      	uxth	r3, r3
                tcphdr->dest, tcphdr->src);
  407c82:	4a4f      	ldr	r2, [pc, #316]	; (407dc0 <tcp_process+0x4f8>)
  407c84:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c86:	8812      	ldrh	r2, [r2, #0]
  407c88:	b292      	uxth	r2, r2
  407c8a:	9201      	str	r2, [sp, #4]
  407c8c:	9300      	str	r3, [sp, #0]
  407c8e:	4b4d      	ldr	r3, [pc, #308]	; (407dc4 <tcp_process+0x4fc>)
  407c90:	4a4d      	ldr	r2, [pc, #308]	; (407dc8 <tcp_process+0x500>)
  407c92:	4c4e      	ldr	r4, [pc, #312]	; (407dcc <tcp_process+0x504>)
  407c94:	47a0      	blx	r4
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  407c96:	e172      	b.n	407f7e <tcp_process+0x6b6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  407c98:	4b45      	ldr	r3, [pc, #276]	; (407db0 <tcp_process+0x4e8>)
  407c9a:	781b      	ldrb	r3, [r3, #0]
  407c9c:	f003 0302 	and.w	r3, r3, #2
  407ca0:	2b00      	cmp	r3, #0
  407ca2:	f000 816c 	beq.w	407f7e <tcp_process+0x6b6>
  407ca6:	687b      	ldr	r3, [r7, #4]
  407ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407caa:	1e5a      	subs	r2, r3, #1
  407cac:	4b43      	ldr	r3, [pc, #268]	; (407dbc <tcp_process+0x4f4>)
  407cae:	681b      	ldr	r3, [r3, #0]
  407cb0:	429a      	cmp	r2, r3
  407cb2:	f040 8164 	bne.w	407f7e <tcp_process+0x6b6>
      tcp_rexmit(pcb);
  407cb6:	6878      	ldr	r0, [r7, #4]
  407cb8:	4b48      	ldr	r3, [pc, #288]	; (407ddc <tcp_process+0x514>)
  407cba:	4798      	blx	r3
    break;
  407cbc:	e15f      	b.n	407f7e <tcp_process+0x6b6>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  407cbe:	bf00      	nop
    break;
  407cc0:	e15d      	b.n	407f7e <tcp_process+0x6b6>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  407cc2:	6878      	ldr	r0, [r7, #4]
  407cc4:	4b43      	ldr	r3, [pc, #268]	; (407dd4 <tcp_process+0x50c>)
  407cc6:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  407cc8:	4b43      	ldr	r3, [pc, #268]	; (407dd8 <tcp_process+0x510>)
  407cca:	781b      	ldrb	r3, [r3, #0]
  407ccc:	f003 0320 	and.w	r3, r3, #32
  407cd0:	2b00      	cmp	r3, #0
  407cd2:	f000 8156 	beq.w	407f82 <tcp_process+0x6ba>
      tcp_ack_now(pcb);
  407cd6:	687b      	ldr	r3, [r7, #4]
  407cd8:	7f9b      	ldrb	r3, [r3, #30]
  407cda:	f043 0302 	orr.w	r3, r3, #2
  407cde:	b2da      	uxtb	r2, r3
  407ce0:	687b      	ldr	r3, [r7, #4]
  407ce2:	779a      	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  407ce4:	687b      	ldr	r3, [r7, #4]
  407ce6:	2207      	movs	r2, #7
  407ce8:	761a      	strb	r2, [r3, #24]
    }
    break;
  407cea:	e14a      	b.n	407f82 <tcp_process+0x6ba>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  407cec:	6878      	ldr	r0, [r7, #4]
  407cee:	4b39      	ldr	r3, [pc, #228]	; (407dd4 <tcp_process+0x50c>)
  407cf0:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  407cf2:	4b39      	ldr	r3, [pc, #228]	; (407dd8 <tcp_process+0x510>)
  407cf4:	781b      	ldrb	r3, [r3, #0]
  407cf6:	f003 0320 	and.w	r3, r3, #32
  407cfa:	2b00      	cmp	r3, #0
  407cfc:	d07c      	beq.n	407df8 <tcp_process+0x530>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  407cfe:	4b2c      	ldr	r3, [pc, #176]	; (407db0 <tcp_process+0x4e8>)
  407d00:	781b      	ldrb	r3, [r3, #0]
  407d02:	f003 0310 	and.w	r3, r3, #16
  407d06:	2b00      	cmp	r3, #0
  407d08:	d047      	beq.n	407d9a <tcp_process+0x4d2>
  407d0a:	687b      	ldr	r3, [r7, #4]
  407d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407d0e:	4b29      	ldr	r3, [pc, #164]	; (407db4 <tcp_process+0x4ec>)
  407d10:	681b      	ldr	r3, [r3, #0]
  407d12:	429a      	cmp	r2, r3
  407d14:	d141      	bne.n	407d9a <tcp_process+0x4d2>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  407d16:	687b      	ldr	r3, [r7, #4]
  407d18:	7f9b      	ldrb	r3, [r3, #30]
  407d1a:	f043 0302 	orr.w	r3, r3, #2
  407d1e:	b2da      	uxtb	r2, r3
  407d20:	687b      	ldr	r3, [r7, #4]
  407d22:	779a      	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  407d24:	6878      	ldr	r0, [r7, #4]
  407d26:	4b2e      	ldr	r3, [pc, #184]	; (407de0 <tcp_process+0x518>)
  407d28:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  407d2a:	4b2e      	ldr	r3, [pc, #184]	; (407de4 <tcp_process+0x51c>)
  407d2c:	681a      	ldr	r2, [r3, #0]
  407d2e:	687b      	ldr	r3, [r7, #4]
  407d30:	429a      	cmp	r2, r3
  407d32:	d105      	bne.n	407d40 <tcp_process+0x478>
  407d34:	4b2b      	ldr	r3, [pc, #172]	; (407de4 <tcp_process+0x51c>)
  407d36:	681b      	ldr	r3, [r3, #0]
  407d38:	68db      	ldr	r3, [r3, #12]
  407d3a:	4a2a      	ldr	r2, [pc, #168]	; (407de4 <tcp_process+0x51c>)
  407d3c:	6013      	str	r3, [r2, #0]
  407d3e:	e019      	b.n	407d74 <tcp_process+0x4ac>
  407d40:	4b28      	ldr	r3, [pc, #160]	; (407de4 <tcp_process+0x51c>)
  407d42:	681b      	ldr	r3, [r3, #0]
  407d44:	4a28      	ldr	r2, [pc, #160]	; (407de8 <tcp_process+0x520>)
  407d46:	6013      	str	r3, [r2, #0]
  407d48:	e010      	b.n	407d6c <tcp_process+0x4a4>
  407d4a:	4b27      	ldr	r3, [pc, #156]	; (407de8 <tcp_process+0x520>)
  407d4c:	681b      	ldr	r3, [r3, #0]
  407d4e:	68da      	ldr	r2, [r3, #12]
  407d50:	687b      	ldr	r3, [r7, #4]
  407d52:	429a      	cmp	r2, r3
  407d54:	d105      	bne.n	407d62 <tcp_process+0x49a>
  407d56:	4b24      	ldr	r3, [pc, #144]	; (407de8 <tcp_process+0x520>)
  407d58:	681b      	ldr	r3, [r3, #0]
  407d5a:	687a      	ldr	r2, [r7, #4]
  407d5c:	68d2      	ldr	r2, [r2, #12]
  407d5e:	60da      	str	r2, [r3, #12]
  407d60:	e008      	b.n	407d74 <tcp_process+0x4ac>
  407d62:	4b21      	ldr	r3, [pc, #132]	; (407de8 <tcp_process+0x520>)
  407d64:	681b      	ldr	r3, [r3, #0]
  407d66:	68db      	ldr	r3, [r3, #12]
  407d68:	4a1f      	ldr	r2, [pc, #124]	; (407de8 <tcp_process+0x520>)
  407d6a:	6013      	str	r3, [r2, #0]
  407d6c:	4b1e      	ldr	r3, [pc, #120]	; (407de8 <tcp_process+0x520>)
  407d6e:	681b      	ldr	r3, [r3, #0]
  407d70:	2b00      	cmp	r3, #0
  407d72:	d1ea      	bne.n	407d4a <tcp_process+0x482>
  407d74:	687b      	ldr	r3, [r7, #4]
  407d76:	2200      	movs	r2, #0
  407d78:	60da      	str	r2, [r3, #12]
  407d7a:	4b1c      	ldr	r3, [pc, #112]	; (407dec <tcp_process+0x524>)
  407d7c:	2201      	movs	r2, #1
  407d7e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  407d80:	687b      	ldr	r3, [r7, #4]
  407d82:	220a      	movs	r2, #10
  407d84:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  407d86:	4b1a      	ldr	r3, [pc, #104]	; (407df0 <tcp_process+0x528>)
  407d88:	681a      	ldr	r2, [r3, #0]
  407d8a:	687b      	ldr	r3, [r7, #4]
  407d8c:	60da      	str	r2, [r3, #12]
  407d8e:	4a18      	ldr	r2, [pc, #96]	; (407df0 <tcp_process+0x528>)
  407d90:	687b      	ldr	r3, [r7, #4]
  407d92:	6013      	str	r3, [r2, #0]
  407d94:	4b17      	ldr	r3, [pc, #92]	; (407df4 <tcp_process+0x52c>)
  407d96:	4798      	blx	r3
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  407d98:	e0f5      	b.n	407f86 <tcp_process+0x6be>
        tcp_ack_now(pcb);
  407d9a:	687b      	ldr	r3, [r7, #4]
  407d9c:	7f9b      	ldrb	r3, [r3, #30]
  407d9e:	f043 0302 	orr.w	r3, r3, #2
  407da2:	b2da      	uxtb	r2, r3
  407da4:	687b      	ldr	r3, [r7, #4]
  407da6:	779a      	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  407da8:	687b      	ldr	r3, [r7, #4]
  407daa:	2208      	movs	r2, #8
  407dac:	761a      	strb	r2, [r3, #24]
    break;
  407dae:	e0ea      	b.n	407f86 <tcp_process+0x6be>
  407db0:	20402074 	.word	0x20402074
  407db4:	20402070 	.word	0x20402070
  407db8:	20402076 	.word	0x20402076
  407dbc:	2040206c 	.word	0x2040206c
  407dc0:	20402064 	.word	0x20402064
  407dc4:	204033b4 	.word	0x204033b4
  407dc8:	204033bc 	.word	0x204033bc
  407dcc:	00409ee1 	.word	0x00409ee1
  407dd0:	00406105 	.word	0x00406105
  407dd4:	004080c9 	.word	0x004080c9
  407dd8:	20402078 	.word	0x20402078
  407ddc:	0040a035 	.word	0x0040a035
  407de0:	00406e2d 	.word	0x00406e2d
  407de4:	204043e8 	.word	0x204043e8
  407de8:	204043f4 	.word	0x204043f4
  407dec:	204043e4 	.word	0x204043e4
  407df0:	204043fc 	.word	0x204043fc
  407df4:	00404bf5 	.word	0x00404bf5
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  407df8:	4b69      	ldr	r3, [pc, #420]	; (407fa0 <tcp_process+0x6d8>)
  407dfa:	781b      	ldrb	r3, [r3, #0]
  407dfc:	f003 0310 	and.w	r3, r3, #16
  407e00:	2b00      	cmp	r3, #0
  407e02:	f000 80c0 	beq.w	407f86 <tcp_process+0x6be>
  407e06:	687b      	ldr	r3, [r7, #4]
  407e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407e0a:	4b66      	ldr	r3, [pc, #408]	; (407fa4 <tcp_process+0x6dc>)
  407e0c:	681b      	ldr	r3, [r3, #0]
  407e0e:	429a      	cmp	r2, r3
  407e10:	f040 80b9 	bne.w	407f86 <tcp_process+0x6be>
      pcb->state = FIN_WAIT_2;
  407e14:	687b      	ldr	r3, [r7, #4]
  407e16:	2206      	movs	r2, #6
  407e18:	761a      	strb	r2, [r3, #24]
    break;
  407e1a:	e0b4      	b.n	407f86 <tcp_process+0x6be>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  407e1c:	6878      	ldr	r0, [r7, #4]
  407e1e:	4b62      	ldr	r3, [pc, #392]	; (407fa8 <tcp_process+0x6e0>)
  407e20:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  407e22:	4b62      	ldr	r3, [pc, #392]	; (407fac <tcp_process+0x6e4>)
  407e24:	781b      	ldrb	r3, [r3, #0]
  407e26:	f003 0320 	and.w	r3, r3, #32
  407e2a:	2b00      	cmp	r3, #0
  407e2c:	f000 80ad 	beq.w	407f8a <tcp_process+0x6c2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  407e30:	687b      	ldr	r3, [r7, #4]
  407e32:	7f9b      	ldrb	r3, [r3, #30]
  407e34:	f043 0302 	orr.w	r3, r3, #2
  407e38:	b2da      	uxtb	r2, r3
  407e3a:	687b      	ldr	r3, [r7, #4]
  407e3c:	779a      	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  407e3e:	6878      	ldr	r0, [r7, #4]
  407e40:	4b5b      	ldr	r3, [pc, #364]	; (407fb0 <tcp_process+0x6e8>)
  407e42:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  407e44:	4b5b      	ldr	r3, [pc, #364]	; (407fb4 <tcp_process+0x6ec>)
  407e46:	681a      	ldr	r2, [r3, #0]
  407e48:	687b      	ldr	r3, [r7, #4]
  407e4a:	429a      	cmp	r2, r3
  407e4c:	d105      	bne.n	407e5a <tcp_process+0x592>
  407e4e:	4b59      	ldr	r3, [pc, #356]	; (407fb4 <tcp_process+0x6ec>)
  407e50:	681b      	ldr	r3, [r3, #0]
  407e52:	68db      	ldr	r3, [r3, #12]
  407e54:	4a57      	ldr	r2, [pc, #348]	; (407fb4 <tcp_process+0x6ec>)
  407e56:	6013      	str	r3, [r2, #0]
  407e58:	e019      	b.n	407e8e <tcp_process+0x5c6>
  407e5a:	4b56      	ldr	r3, [pc, #344]	; (407fb4 <tcp_process+0x6ec>)
  407e5c:	681b      	ldr	r3, [r3, #0]
  407e5e:	4a56      	ldr	r2, [pc, #344]	; (407fb8 <tcp_process+0x6f0>)
  407e60:	6013      	str	r3, [r2, #0]
  407e62:	e010      	b.n	407e86 <tcp_process+0x5be>
  407e64:	4b54      	ldr	r3, [pc, #336]	; (407fb8 <tcp_process+0x6f0>)
  407e66:	681b      	ldr	r3, [r3, #0]
  407e68:	68da      	ldr	r2, [r3, #12]
  407e6a:	687b      	ldr	r3, [r7, #4]
  407e6c:	429a      	cmp	r2, r3
  407e6e:	d105      	bne.n	407e7c <tcp_process+0x5b4>
  407e70:	4b51      	ldr	r3, [pc, #324]	; (407fb8 <tcp_process+0x6f0>)
  407e72:	681b      	ldr	r3, [r3, #0]
  407e74:	687a      	ldr	r2, [r7, #4]
  407e76:	68d2      	ldr	r2, [r2, #12]
  407e78:	60da      	str	r2, [r3, #12]
  407e7a:	e008      	b.n	407e8e <tcp_process+0x5c6>
  407e7c:	4b4e      	ldr	r3, [pc, #312]	; (407fb8 <tcp_process+0x6f0>)
  407e7e:	681b      	ldr	r3, [r3, #0]
  407e80:	68db      	ldr	r3, [r3, #12]
  407e82:	4a4d      	ldr	r2, [pc, #308]	; (407fb8 <tcp_process+0x6f0>)
  407e84:	6013      	str	r3, [r2, #0]
  407e86:	4b4c      	ldr	r3, [pc, #304]	; (407fb8 <tcp_process+0x6f0>)
  407e88:	681b      	ldr	r3, [r3, #0]
  407e8a:	2b00      	cmp	r3, #0
  407e8c:	d1ea      	bne.n	407e64 <tcp_process+0x59c>
  407e8e:	687b      	ldr	r3, [r7, #4]
  407e90:	2200      	movs	r2, #0
  407e92:	60da      	str	r2, [r3, #12]
  407e94:	4b49      	ldr	r3, [pc, #292]	; (407fbc <tcp_process+0x6f4>)
  407e96:	2201      	movs	r2, #1
  407e98:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  407e9a:	687b      	ldr	r3, [r7, #4]
  407e9c:	220a      	movs	r2, #10
  407e9e:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  407ea0:	4b47      	ldr	r3, [pc, #284]	; (407fc0 <tcp_process+0x6f8>)
  407ea2:	681a      	ldr	r2, [r3, #0]
  407ea4:	687b      	ldr	r3, [r7, #4]
  407ea6:	60da      	str	r2, [r3, #12]
  407ea8:	4a45      	ldr	r2, [pc, #276]	; (407fc0 <tcp_process+0x6f8>)
  407eaa:	687b      	ldr	r3, [r7, #4]
  407eac:	6013      	str	r3, [r2, #0]
  407eae:	4b45      	ldr	r3, [pc, #276]	; (407fc4 <tcp_process+0x6fc>)
  407eb0:	4798      	blx	r3
    }
    break;
  407eb2:	e06a      	b.n	407f8a <tcp_process+0x6c2>
  case CLOSING:
    tcp_receive(pcb);
  407eb4:	6878      	ldr	r0, [r7, #4]
  407eb6:	4b3c      	ldr	r3, [pc, #240]	; (407fa8 <tcp_process+0x6e0>)
  407eb8:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  407eba:	4b39      	ldr	r3, [pc, #228]	; (407fa0 <tcp_process+0x6d8>)
  407ebc:	781b      	ldrb	r3, [r3, #0]
  407ebe:	f003 0310 	and.w	r3, r3, #16
  407ec2:	2b00      	cmp	r3, #0
  407ec4:	d063      	beq.n	407f8e <tcp_process+0x6c6>
  407ec6:	687b      	ldr	r3, [r7, #4]
  407ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407eca:	4b36      	ldr	r3, [pc, #216]	; (407fa4 <tcp_process+0x6dc>)
  407ecc:	681b      	ldr	r3, [r3, #0]
  407ece:	429a      	cmp	r2, r3
  407ed0:	d15d      	bne.n	407f8e <tcp_process+0x6c6>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  407ed2:	6878      	ldr	r0, [r7, #4]
  407ed4:	4b36      	ldr	r3, [pc, #216]	; (407fb0 <tcp_process+0x6e8>)
  407ed6:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  407ed8:	4b36      	ldr	r3, [pc, #216]	; (407fb4 <tcp_process+0x6ec>)
  407eda:	681a      	ldr	r2, [r3, #0]
  407edc:	687b      	ldr	r3, [r7, #4]
  407ede:	429a      	cmp	r2, r3
  407ee0:	d105      	bne.n	407eee <tcp_process+0x626>
  407ee2:	4b34      	ldr	r3, [pc, #208]	; (407fb4 <tcp_process+0x6ec>)
  407ee4:	681b      	ldr	r3, [r3, #0]
  407ee6:	68db      	ldr	r3, [r3, #12]
  407ee8:	4a32      	ldr	r2, [pc, #200]	; (407fb4 <tcp_process+0x6ec>)
  407eea:	6013      	str	r3, [r2, #0]
  407eec:	e019      	b.n	407f22 <tcp_process+0x65a>
  407eee:	4b31      	ldr	r3, [pc, #196]	; (407fb4 <tcp_process+0x6ec>)
  407ef0:	681b      	ldr	r3, [r3, #0]
  407ef2:	4a31      	ldr	r2, [pc, #196]	; (407fb8 <tcp_process+0x6f0>)
  407ef4:	6013      	str	r3, [r2, #0]
  407ef6:	e010      	b.n	407f1a <tcp_process+0x652>
  407ef8:	4b2f      	ldr	r3, [pc, #188]	; (407fb8 <tcp_process+0x6f0>)
  407efa:	681b      	ldr	r3, [r3, #0]
  407efc:	68da      	ldr	r2, [r3, #12]
  407efe:	687b      	ldr	r3, [r7, #4]
  407f00:	429a      	cmp	r2, r3
  407f02:	d105      	bne.n	407f10 <tcp_process+0x648>
  407f04:	4b2c      	ldr	r3, [pc, #176]	; (407fb8 <tcp_process+0x6f0>)
  407f06:	681b      	ldr	r3, [r3, #0]
  407f08:	687a      	ldr	r2, [r7, #4]
  407f0a:	68d2      	ldr	r2, [r2, #12]
  407f0c:	60da      	str	r2, [r3, #12]
  407f0e:	e008      	b.n	407f22 <tcp_process+0x65a>
  407f10:	4b29      	ldr	r3, [pc, #164]	; (407fb8 <tcp_process+0x6f0>)
  407f12:	681b      	ldr	r3, [r3, #0]
  407f14:	68db      	ldr	r3, [r3, #12]
  407f16:	4a28      	ldr	r2, [pc, #160]	; (407fb8 <tcp_process+0x6f0>)
  407f18:	6013      	str	r3, [r2, #0]
  407f1a:	4b27      	ldr	r3, [pc, #156]	; (407fb8 <tcp_process+0x6f0>)
  407f1c:	681b      	ldr	r3, [r3, #0]
  407f1e:	2b00      	cmp	r3, #0
  407f20:	d1ea      	bne.n	407ef8 <tcp_process+0x630>
  407f22:	687b      	ldr	r3, [r7, #4]
  407f24:	2200      	movs	r2, #0
  407f26:	60da      	str	r2, [r3, #12]
  407f28:	4b24      	ldr	r3, [pc, #144]	; (407fbc <tcp_process+0x6f4>)
  407f2a:	2201      	movs	r2, #1
  407f2c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  407f2e:	687b      	ldr	r3, [r7, #4]
  407f30:	220a      	movs	r2, #10
  407f32:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  407f34:	4b22      	ldr	r3, [pc, #136]	; (407fc0 <tcp_process+0x6f8>)
  407f36:	681a      	ldr	r2, [r3, #0]
  407f38:	687b      	ldr	r3, [r7, #4]
  407f3a:	60da      	str	r2, [r3, #12]
  407f3c:	4a20      	ldr	r2, [pc, #128]	; (407fc0 <tcp_process+0x6f8>)
  407f3e:	687b      	ldr	r3, [r7, #4]
  407f40:	6013      	str	r3, [r2, #0]
  407f42:	4b20      	ldr	r3, [pc, #128]	; (407fc4 <tcp_process+0x6fc>)
  407f44:	4798      	blx	r3
    }
    break;
  407f46:	e022      	b.n	407f8e <tcp_process+0x6c6>
  case LAST_ACK:
    tcp_receive(pcb);
  407f48:	6878      	ldr	r0, [r7, #4]
  407f4a:	4b17      	ldr	r3, [pc, #92]	; (407fa8 <tcp_process+0x6e0>)
  407f4c:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  407f4e:	4b14      	ldr	r3, [pc, #80]	; (407fa0 <tcp_process+0x6d8>)
  407f50:	781b      	ldrb	r3, [r3, #0]
  407f52:	f003 0310 	and.w	r3, r3, #16
  407f56:	2b00      	cmp	r3, #0
  407f58:	d01b      	beq.n	407f92 <tcp_process+0x6ca>
  407f5a:	687b      	ldr	r3, [r7, #4]
  407f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407f5e:	4b11      	ldr	r3, [pc, #68]	; (407fa4 <tcp_process+0x6dc>)
  407f60:	681b      	ldr	r3, [r3, #0]
  407f62:	429a      	cmp	r2, r3
  407f64:	d115      	bne.n	407f92 <tcp_process+0x6ca>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  407f66:	4b11      	ldr	r3, [pc, #68]	; (407fac <tcp_process+0x6e4>)
  407f68:	781b      	ldrb	r3, [r3, #0]
  407f6a:	f043 0310 	orr.w	r3, r3, #16
  407f6e:	b2da      	uxtb	r2, r3
  407f70:	4b0e      	ldr	r3, [pc, #56]	; (407fac <tcp_process+0x6e4>)
  407f72:	701a      	strb	r2, [r3, #0]
    }
    break;
  407f74:	e00d      	b.n	407f92 <tcp_process+0x6ca>
  default:
    break;
  407f76:	bf00      	nop
  407f78:	e00c      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f7a:	bf00      	nop
  407f7c:	e00a      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f7e:	bf00      	nop
  407f80:	e008      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f82:	bf00      	nop
  407f84:	e006      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f86:	bf00      	nop
  407f88:	e004      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f8a:	bf00      	nop
  407f8c:	e002      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f8e:	bf00      	nop
  407f90:	e000      	b.n	407f94 <tcp_process+0x6cc>
    break;
  407f92:	bf00      	nop
  }
  return ERR_OK;
  407f94:	2300      	movs	r3, #0
}
  407f96:	4618      	mov	r0, r3
  407f98:	371c      	adds	r7, #28
  407f9a:	46bd      	mov	sp, r7
  407f9c:	bd90      	pop	{r4, r7, pc}
  407f9e:	bf00      	nop
  407fa0:	20402074 	.word	0x20402074
  407fa4:	20402070 	.word	0x20402070
  407fa8:	004080c9 	.word	0x004080c9
  407fac:	20402078 	.word	0x20402078
  407fb0:	00406e2d 	.word	0x00406e2d
  407fb4:	204043e8 	.word	0x204043e8
  407fb8:	204043f4 	.word	0x204043f4
  407fbc:	204043e4 	.word	0x204043e4
  407fc0:	204043fc 	.word	0x204043fc
  407fc4:	00404bf5 	.word	0x00404bf5

00407fc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  407fc8:	b5b0      	push	{r4, r5, r7, lr}
  407fca:	b084      	sub	sp, #16
  407fcc:	af00      	add	r7, sp, #0
  407fce:	6078      	str	r0, [r7, #4]
  407fd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  407fd2:	687b      	ldr	r3, [r7, #4]
  407fd4:	68db      	ldr	r3, [r3, #12]
  407fd6:	899b      	ldrh	r3, [r3, #12]
  407fd8:	b29b      	uxth	r3, r3
  407fda:	4618      	mov	r0, r3
  407fdc:	4b34      	ldr	r3, [pc, #208]	; (4080b0 <tcp_oos_insert_segment+0xe8>)
  407fde:	4798      	blx	r3
  407fe0:	4603      	mov	r3, r0
  407fe2:	f003 0301 	and.w	r3, r3, #1
  407fe6:	2b00      	cmp	r3, #0
  407fe8:	d026      	beq.n	408038 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  407fea:	6838      	ldr	r0, [r7, #0]
  407fec:	4b31      	ldr	r3, [pc, #196]	; (4080b4 <tcp_oos_insert_segment+0xec>)
  407fee:	4798      	blx	r3
    next = NULL;
  407ff0:	2300      	movs	r3, #0
  407ff2:	603b      	str	r3, [r7, #0]
  407ff4:	e054      	b.n	4080a0 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  407ff6:	683b      	ldr	r3, [r7, #0]
  407ff8:	68db      	ldr	r3, [r3, #12]
  407ffa:	899b      	ldrh	r3, [r3, #12]
  407ffc:	b29b      	uxth	r3, r3
  407ffe:	4618      	mov	r0, r3
  408000:	4b2b      	ldr	r3, [pc, #172]	; (4080b0 <tcp_oos_insert_segment+0xe8>)
  408002:	4798      	blx	r3
  408004:	4603      	mov	r3, r0
  408006:	f003 0301 	and.w	r3, r3, #1
  40800a:	2b00      	cmp	r3, #0
  40800c:	d00c      	beq.n	408028 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  40800e:	687b      	ldr	r3, [r7, #4]
  408010:	68dc      	ldr	r4, [r3, #12]
  408012:	687b      	ldr	r3, [r7, #4]
  408014:	68db      	ldr	r3, [r3, #12]
  408016:	899b      	ldrh	r3, [r3, #12]
  408018:	b29d      	uxth	r5, r3
  40801a:	2001      	movs	r0, #1
  40801c:	4b26      	ldr	r3, [pc, #152]	; (4080b8 <tcp_oos_insert_segment+0xf0>)
  40801e:	4798      	blx	r3
  408020:	4603      	mov	r3, r0
  408022:	432b      	orrs	r3, r5
  408024:	b29b      	uxth	r3, r3
  408026:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
  408028:	683b      	ldr	r3, [r7, #0]
  40802a:	60fb      	str	r3, [r7, #12]
      next = next->next;
  40802c:	683b      	ldr	r3, [r7, #0]
  40802e:	681b      	ldr	r3, [r3, #0]
  408030:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
  408032:	68f8      	ldr	r0, [r7, #12]
  408034:	4b21      	ldr	r3, [pc, #132]	; (4080bc <tcp_oos_insert_segment+0xf4>)
  408036:	4798      	blx	r3
    while (next &&
  408038:	683b      	ldr	r3, [r7, #0]
  40803a:	2b00      	cmp	r3, #0
  40803c:	d00e      	beq.n	40805c <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
  40803e:	687b      	ldr	r3, [r7, #4]
  408040:	891b      	ldrh	r3, [r3, #8]
  408042:	461a      	mov	r2, r3
  408044:	4b1e      	ldr	r3, [pc, #120]	; (4080c0 <tcp_oos_insert_segment+0xf8>)
  408046:	681b      	ldr	r3, [r3, #0]
  408048:	441a      	add	r2, r3
  40804a:	683b      	ldr	r3, [r7, #0]
  40804c:	68db      	ldr	r3, [r3, #12]
  40804e:	685b      	ldr	r3, [r3, #4]
  408050:	6839      	ldr	r1, [r7, #0]
  408052:	8909      	ldrh	r1, [r1, #8]
  408054:	440b      	add	r3, r1
  408056:	1ad3      	subs	r3, r2, r3
    while (next &&
  408058:	2b00      	cmp	r3, #0
  40805a:	dacc      	bge.n	407ff6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
  40805c:	683b      	ldr	r3, [r7, #0]
  40805e:	2b00      	cmp	r3, #0
  408060:	d01e      	beq.n	4080a0 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  408062:	687b      	ldr	r3, [r7, #4]
  408064:	891b      	ldrh	r3, [r3, #8]
  408066:	461a      	mov	r2, r3
  408068:	4b15      	ldr	r3, [pc, #84]	; (4080c0 <tcp_oos_insert_segment+0xf8>)
  40806a:	681b      	ldr	r3, [r3, #0]
  40806c:	441a      	add	r2, r3
  40806e:	683b      	ldr	r3, [r7, #0]
  408070:	68db      	ldr	r3, [r3, #12]
  408072:	685b      	ldr	r3, [r3, #4]
  408074:	1ad3      	subs	r3, r2, r3
    if (next &&
  408076:	2b00      	cmp	r3, #0
  408078:	dd12      	ble.n	4080a0 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  40807a:	683b      	ldr	r3, [r7, #0]
  40807c:	68db      	ldr	r3, [r3, #12]
  40807e:	685b      	ldr	r3, [r3, #4]
  408080:	b29a      	uxth	r2, r3
  408082:	4b0f      	ldr	r3, [pc, #60]	; (4080c0 <tcp_oos_insert_segment+0xf8>)
  408084:	681b      	ldr	r3, [r3, #0]
  408086:	b29b      	uxth	r3, r3
  408088:	1ad3      	subs	r3, r2, r3
  40808a:	b29a      	uxth	r2, r3
  40808c:	687b      	ldr	r3, [r7, #4]
  40808e:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  408090:	687b      	ldr	r3, [r7, #4]
  408092:	685a      	ldr	r2, [r3, #4]
  408094:	687b      	ldr	r3, [r7, #4]
  408096:	891b      	ldrh	r3, [r3, #8]
  408098:	4619      	mov	r1, r3
  40809a:	4610      	mov	r0, r2
  40809c:	4b09      	ldr	r3, [pc, #36]	; (4080c4 <tcp_oos_insert_segment+0xfc>)
  40809e:	4798      	blx	r3
    }
  }
  cseg->next = next;
  4080a0:	687b      	ldr	r3, [r7, #4]
  4080a2:	683a      	ldr	r2, [r7, #0]
  4080a4:	601a      	str	r2, [r3, #0]
}
  4080a6:	bf00      	nop
  4080a8:	3710      	adds	r7, #16
  4080aa:	46bd      	mov	sp, r7
  4080ac:	bdb0      	pop	{r4, r5, r7, pc}
  4080ae:	bf00      	nop
  4080b0:	00401e45 	.word	0x00401e45
  4080b4:	00406a6d 	.word	0x00406a6d
  4080b8:	00401e19 	.word	0x00401e19
  4080bc:	00406a99 	.word	0x00406a99
  4080c0:	2040206c 	.word	0x2040206c
  4080c4:	00405869 	.word	0x00405869

004080c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  4080c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080ca:	b08d      	sub	sp, #52	; 0x34
  4080cc:	af00      	add	r7, sp, #0
  4080ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  4080d0:	2300      	movs	r3, #0
  4080d2:	61bb      	str	r3, [r7, #24]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
  4080d4:	4ba4      	ldr	r3, [pc, #656]	; (408368 <tcp_receive+0x2a0>)
  4080d6:	781b      	ldrb	r3, [r3, #0]
  4080d8:	f003 0310 	and.w	r3, r3, #16
  4080dc:	2b00      	cmp	r3, #0
  4080de:	f000 82aa 	beq.w	408636 <tcp_receive+0x56e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  4080e2:	687b      	ldr	r3, [r7, #4]
  4080e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  4080e8:	461a      	mov	r2, r3
  4080ea:	687b      	ldr	r3, [r7, #4]
  4080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4080ee:	4413      	add	r3, r2
  4080f0:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  4080f2:	687b      	ldr	r3, [r7, #4]
  4080f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4080f6:	4b9d      	ldr	r3, [pc, #628]	; (40836c <tcp_receive+0x2a4>)
  4080f8:	681b      	ldr	r3, [r3, #0]
  4080fa:	1ad3      	subs	r3, r2, r3
  4080fc:	2b00      	cmp	r3, #0
  4080fe:	db1b      	blt.n	408138 <tcp_receive+0x70>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  408100:	687b      	ldr	r3, [r7, #4]
  408102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  408104:	4b99      	ldr	r3, [pc, #612]	; (40836c <tcp_receive+0x2a4>)
  408106:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  408108:	429a      	cmp	r2, r3
  40810a:	d106      	bne.n	40811a <tcp_receive+0x52>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  40810c:	687b      	ldr	r3, [r7, #4]
  40810e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  408110:	4b97      	ldr	r3, [pc, #604]	; (408370 <tcp_receive+0x2a8>)
  408112:	681b      	ldr	r3, [r3, #0]
  408114:	1ad3      	subs	r3, r2, r3
  408116:	2b00      	cmp	r3, #0
  408118:	db0e      	blt.n	408138 <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  40811a:	687b      	ldr	r3, [r7, #4]
  40811c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  40811e:	4b94      	ldr	r3, [pc, #592]	; (408370 <tcp_receive+0x2a8>)
  408120:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  408122:	429a      	cmp	r2, r3
  408124:	d143      	bne.n	4081ae <tcp_receive+0xe6>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  408126:	4b93      	ldr	r3, [pc, #588]	; (408374 <tcp_receive+0x2ac>)
  408128:	681b      	ldr	r3, [r3, #0]
  40812a:	89db      	ldrh	r3, [r3, #14]
  40812c:	b29a      	uxth	r2, r3
  40812e:	687b      	ldr	r3, [r7, #4]
  408130:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  408134:	429a      	cmp	r2, r3
  408136:	d93a      	bls.n	4081ae <tcp_receive+0xe6>
      pcb->snd_wnd = tcphdr->wnd;
  408138:	4b8e      	ldr	r3, [pc, #568]	; (408374 <tcp_receive+0x2ac>)
  40813a:	681b      	ldr	r3, [r3, #0]
  40813c:	89db      	ldrh	r3, [r3, #14]
  40813e:	b29a      	uxth	r2, r3
  408140:	687b      	ldr	r3, [r7, #4]
  408142:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  408146:	687b      	ldr	r3, [r7, #4]
  408148:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
  40814c:	4b89      	ldr	r3, [pc, #548]	; (408374 <tcp_receive+0x2ac>)
  40814e:	681b      	ldr	r3, [r3, #0]
  408150:	89db      	ldrh	r3, [r3, #14]
  408152:	b29b      	uxth	r3, r3
  408154:	429a      	cmp	r2, r3
  408156:	d206      	bcs.n	408166 <tcp_receive+0x9e>
        pcb->snd_wnd_max = tcphdr->wnd;
  408158:	4b86      	ldr	r3, [pc, #536]	; (408374 <tcp_receive+0x2ac>)
  40815a:	681b      	ldr	r3, [r3, #0]
  40815c:	89db      	ldrh	r3, [r3, #14]
  40815e:	b29a      	uxth	r2, r3
  408160:	687b      	ldr	r3, [r7, #4]
  408162:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  408166:	4b81      	ldr	r3, [pc, #516]	; (40836c <tcp_receive+0x2a4>)
  408168:	681a      	ldr	r2, [r3, #0]
  40816a:	687b      	ldr	r3, [r7, #4]
  40816c:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  40816e:	4b80      	ldr	r3, [pc, #512]	; (408370 <tcp_receive+0x2a8>)
  408170:	681a      	ldr	r2, [r3, #0]
  408172:	687b      	ldr	r3, [r7, #4]
  408174:	659a      	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  408176:	687b      	ldr	r3, [r7, #4]
  408178:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40817c:	2b00      	cmp	r3, #0
  40817e:	d10d      	bne.n	40819c <tcp_receive+0xd4>
        if (pcb->persist_backoff == 0) {
  408180:	687b      	ldr	r3, [r7, #4]
  408182:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  408186:	2b00      	cmp	r3, #0
  408188:	d111      	bne.n	4081ae <tcp_receive+0xe6>
          /* start persist timer */
          pcb->persist_cnt = 0;
  40818a:	687b      	ldr	r3, [r7, #4]
  40818c:	2200      	movs	r2, #0
  40818e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
  408192:	687b      	ldr	r3, [r7, #4]
  408194:	2201      	movs	r2, #1
  408196:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
  40819a:	e008      	b.n	4081ae <tcp_receive+0xe6>
        }
      } else if (pcb->persist_backoff > 0) {
  40819c:	687b      	ldr	r3, [r7, #4]
  40819e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  4081a2:	2b00      	cmp	r3, #0
  4081a4:	d003      	beq.n	4081ae <tcp_receive+0xe6>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  4081a6:	687b      	ldr	r3, [r7, #4]
  4081a8:	2200      	movs	r2, #0
  4081aa:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  4081ae:	4b70      	ldr	r3, [pc, #448]	; (408370 <tcp_receive+0x2a8>)
  4081b0:	681a      	ldr	r2, [r3, #0]
  4081b2:	687b      	ldr	r3, [r7, #4]
  4081b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4081b6:	1ad3      	subs	r3, r2, r3
  4081b8:	2b00      	cmp	r3, #0
  4081ba:	dc5c      	bgt.n	408276 <tcp_receive+0x1ae>
      pcb->acked = 0;
  4081bc:	687b      	ldr	r3, [r7, #4]
  4081be:	2200      	movs	r2, #0
  4081c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
  4081c4:	4b6c      	ldr	r3, [pc, #432]	; (408378 <tcp_receive+0x2b0>)
  4081c6:	881b      	ldrh	r3, [r3, #0]
  4081c8:	2b00      	cmp	r3, #0
  4081ca:	d14b      	bne.n	408264 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  4081cc:	687b      	ldr	r3, [r7, #4]
  4081ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4081d0:	687a      	ldr	r2, [r7, #4]
  4081d2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
  4081d6:	441a      	add	r2, r3
  4081d8:	697b      	ldr	r3, [r7, #20]
  4081da:	429a      	cmp	r2, r3
  4081dc:	d142      	bne.n	408264 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  4081de:	687b      	ldr	r3, [r7, #4]
  4081e0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  4081e4:	2b00      	cmp	r3, #0
  4081e6:	db3d      	blt.n	408264 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  4081e8:	687b      	ldr	r3, [r7, #4]
  4081ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4081ec:	4b60      	ldr	r3, [pc, #384]	; (408370 <tcp_receive+0x2a8>)
  4081ee:	681b      	ldr	r3, [r3, #0]
  4081f0:	429a      	cmp	r2, r3
  4081f2:	d137      	bne.n	408264 <tcp_receive+0x19c>
              found_dupack = 1;
  4081f4:	2301      	movs	r3, #1
  4081f6:	61bb      	str	r3, [r7, #24]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4081f8:	687b      	ldr	r3, [r7, #4]
  4081fa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4081fe:	3301      	adds	r3, #1
  408200:	b2da      	uxtb	r2, r3
  408202:	687b      	ldr	r3, [r7, #4]
  408204:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408208:	429a      	cmp	r2, r3
  40820a:	d907      	bls.n	40821c <tcp_receive+0x154>
                ++pcb->dupacks;
  40820c:	687b      	ldr	r3, [r7, #4]
  40820e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408212:	3301      	adds	r3, #1
  408214:	b2da      	uxtb	r2, r3
  408216:	687b      	ldr	r3, [r7, #4]
  408218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  40821c:	687b      	ldr	r3, [r7, #4]
  40821e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408222:	2b03      	cmp	r3, #3
  408224:	d916      	bls.n	408254 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  408226:	687b      	ldr	r3, [r7, #4]
  408228:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40822c:	687b      	ldr	r3, [r7, #4]
  40822e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408230:	4413      	add	r3, r2
  408232:	b29a      	uxth	r2, r3
  408234:	687b      	ldr	r3, [r7, #4]
  408236:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40823a:	429a      	cmp	r2, r3
  40823c:	d912      	bls.n	408264 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
  40823e:	687b      	ldr	r3, [r7, #4]
  408240:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408244:	687b      	ldr	r3, [r7, #4]
  408246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408248:	4413      	add	r3, r2
  40824a:	b29a      	uxth	r2, r3
  40824c:	687b      	ldr	r3, [r7, #4]
  40824e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  408252:	e007      	b.n	408264 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
  408254:	687b      	ldr	r3, [r7, #4]
  408256:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  40825a:	2b03      	cmp	r3, #3
  40825c:	d102      	bne.n	408264 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  40825e:	6878      	ldr	r0, [r7, #4]
  408260:	4b46      	ldr	r3, [pc, #280]	; (40837c <tcp_receive+0x2b4>)
  408262:	4798      	blx	r3
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  408264:	69bb      	ldr	r3, [r7, #24]
  408266:	2b00      	cmp	r3, #0
  408268:	f040 815e 	bne.w	408528 <tcp_receive+0x460>
        pcb->dupacks = 0;
  40826c:	687b      	ldr	r3, [r7, #4]
  40826e:	2200      	movs	r2, #0
  408270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  408274:	e158      	b.n	408528 <tcp_receive+0x460>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  408276:	4b3e      	ldr	r3, [pc, #248]	; (408370 <tcp_receive+0x2a8>)
  408278:	681a      	ldr	r2, [r3, #0]
  40827a:	687b      	ldr	r3, [r7, #4]
  40827c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40827e:	1ad3      	subs	r3, r2, r3
  408280:	3b01      	subs	r3, #1
  408282:	2b00      	cmp	r3, #0
  408284:	f2c0 8104 	blt.w	408490 <tcp_receive+0x3c8>
  408288:	4b39      	ldr	r3, [pc, #228]	; (408370 <tcp_receive+0x2a8>)
  40828a:	681a      	ldr	r2, [r3, #0]
  40828c:	687b      	ldr	r3, [r7, #4]
  40828e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  408290:	1ad3      	subs	r3, r2, r3
  408292:	2b00      	cmp	r3, #0
  408294:	f300 80fc 	bgt.w	408490 <tcp_receive+0x3c8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  408298:	687b      	ldr	r3, [r7, #4]
  40829a:	7f9b      	ldrb	r3, [r3, #30]
  40829c:	f003 0304 	and.w	r3, r3, #4
  4082a0:	2b00      	cmp	r3, #0
  4082a2:	d00c      	beq.n	4082be <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
  4082a4:	687b      	ldr	r3, [r7, #4]
  4082a6:	7f9b      	ldrb	r3, [r3, #30]
  4082a8:	f023 0304 	bic.w	r3, r3, #4
  4082ac:	b2da      	uxtb	r2, r3
  4082ae:	687b      	ldr	r3, [r7, #4]
  4082b0:	779a      	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  4082b2:	687b      	ldr	r3, [r7, #4]
  4082b4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  4082b8:	687b      	ldr	r3, [r7, #4]
  4082ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  4082be:	687b      	ldr	r3, [r7, #4]
  4082c0:	2200      	movs	r2, #0
  4082c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4082c6:	687b      	ldr	r3, [r7, #4]
  4082c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4082cc:	10db      	asrs	r3, r3, #3
  4082ce:	b21b      	sxth	r3, r3
  4082d0:	b29a      	uxth	r2, r3
  4082d2:	687b      	ldr	r3, [r7, #4]
  4082d4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4082d8:	b29b      	uxth	r3, r3
  4082da:	4413      	add	r3, r2
  4082dc:	b29b      	uxth	r3, r3
  4082de:	b21a      	sxth	r2, r3
  4082e0:	687b      	ldr	r3, [r7, #4]
  4082e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  4082e6:	4b22      	ldr	r3, [pc, #136]	; (408370 <tcp_receive+0x2a8>)
  4082e8:	681b      	ldr	r3, [r3, #0]
  4082ea:	b29a      	uxth	r2, r3
  4082ec:	687b      	ldr	r3, [r7, #4]
  4082ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4082f0:	b29b      	uxth	r3, r3
  4082f2:	1ad3      	subs	r3, r2, r3
  4082f4:	b29a      	uxth	r2, r3
  4082f6:	687b      	ldr	r3, [r7, #4]
  4082f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
  4082fc:	687b      	ldr	r3, [r7, #4]
  4082fe:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  408302:	687b      	ldr	r3, [r7, #4]
  408304:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408308:	4413      	add	r3, r2
  40830a:	b29a      	uxth	r2, r3
  40830c:	687b      	ldr	r3, [r7, #4]
  40830e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  408312:	687b      	ldr	r3, [r7, #4]
  408314:	2200      	movs	r2, #0
  408316:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  40831a:	4b15      	ldr	r3, [pc, #84]	; (408370 <tcp_receive+0x2a8>)
  40831c:	681a      	ldr	r2, [r3, #0]
  40831e:	687b      	ldr	r3, [r7, #4]
  408320:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  408322:	687b      	ldr	r3, [r7, #4]
  408324:	7e1b      	ldrb	r3, [r3, #24]
  408326:	2b03      	cmp	r3, #3
  408328:	d97b      	bls.n	408422 <tcp_receive+0x35a>
        if (pcb->cwnd < pcb->ssthresh) {
  40832a:	687b      	ldr	r3, [r7, #4]
  40832c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408330:	687b      	ldr	r3, [r7, #4]
  408332:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  408336:	429a      	cmp	r2, r3
  408338:	d222      	bcs.n	408380 <tcp_receive+0x2b8>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  40833a:	687b      	ldr	r3, [r7, #4]
  40833c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408340:	687b      	ldr	r3, [r7, #4]
  408342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408344:	4413      	add	r3, r2
  408346:	b29a      	uxth	r2, r3
  408348:	687b      	ldr	r3, [r7, #4]
  40834a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40834e:	429a      	cmp	r2, r3
  408350:	d967      	bls.n	408422 <tcp_receive+0x35a>
            pcb->cwnd += pcb->mss;
  408352:	687b      	ldr	r3, [r7, #4]
  408354:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408358:	687b      	ldr	r3, [r7, #4]
  40835a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40835c:	4413      	add	r3, r2
  40835e:	b29a      	uxth	r2, r3
  408360:	687b      	ldr	r3, [r7, #4]
  408362:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  408366:	e05c      	b.n	408422 <tcp_receive+0x35a>
  408368:	20402074 	.word	0x20402074
  40836c:	2040206c 	.word	0x2040206c
  408370:	20402070 	.word	0x20402070
  408374:	20402064 	.word	0x20402064
  408378:	20402076 	.word	0x20402076
  40837c:	0040a0d1 	.word	0x0040a0d1
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  408380:	687b      	ldr	r3, [r7, #4]
  408382:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408386:	687b      	ldr	r3, [r7, #4]
  408388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40838a:	4619      	mov	r1, r3
  40838c:	687b      	ldr	r3, [r7, #4]
  40838e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408390:	fb03 f301 	mul.w	r3, r3, r1
  408394:	6879      	ldr	r1, [r7, #4]
  408396:	f8b1 104c 	ldrh.w	r1, [r1, #76]	; 0x4c
  40839a:	fb93 f3f1 	sdiv	r3, r3, r1
  40839e:	b29b      	uxth	r3, r3
  4083a0:	4413      	add	r3, r2
  4083a2:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
  4083a4:	687b      	ldr	r3, [r7, #4]
  4083a6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  4083aa:	8a7a      	ldrh	r2, [r7, #18]
  4083ac:	429a      	cmp	r2, r3
  4083ae:	d938      	bls.n	408422 <tcp_receive+0x35a>
            pcb->cwnd = new_cwnd;
  4083b0:	687b      	ldr	r3, [r7, #4]
  4083b2:	8a7a      	ldrh	r2, [r7, #18]
  4083b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  4083b8:	e033      	b.n	408422 <tcp_receive+0x35a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  4083ba:	687b      	ldr	r3, [r7, #4]
  4083bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4083be:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
  4083c0:	687b      	ldr	r3, [r7, #4]
  4083c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4083c4:	681a      	ldr	r2, [r3, #0]
  4083c6:	687b      	ldr	r3, [r7, #4]
  4083c8:	671a      	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4083ca:	687b      	ldr	r3, [r7, #4]
  4083cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4083d0:	2b00      	cmp	r3, #0
  4083d2:	d013      	beq.n	4083fc <tcp_receive+0x334>
  4083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4083d6:	68db      	ldr	r3, [r3, #12]
  4083d8:	899b      	ldrh	r3, [r3, #12]
  4083da:	b29b      	uxth	r3, r3
  4083dc:	4618      	mov	r0, r3
  4083de:	4b2f      	ldr	r3, [pc, #188]	; (40849c <tcp_receive+0x3d4>)
  4083e0:	4798      	blx	r3
  4083e2:	4603      	mov	r3, r0
  4083e4:	f003 0301 	and.w	r3, r3, #1
  4083e8:	2b00      	cmp	r3, #0
  4083ea:	d007      	beq.n	4083fc <tcp_receive+0x334>
          pcb->acked--;
  4083ec:	687b      	ldr	r3, [r7, #4]
  4083ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4083f2:	3b01      	subs	r3, #1
  4083f4:	b29a      	uxth	r2, r3
  4083f6:	687b      	ldr	r3, [r7, #4]
  4083f8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
  4083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4083fe:	685b      	ldr	r3, [r3, #4]
  408400:	4618      	mov	r0, r3
  408402:	4b27      	ldr	r3, [pc, #156]	; (4084a0 <tcp_receive+0x3d8>)
  408404:	4798      	blx	r3
  408406:	4603      	mov	r3, r0
  408408:	4619      	mov	r1, r3
  40840a:	687b      	ldr	r3, [r7, #4]
  40840c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  408410:	b28b      	uxth	r3, r1
  408412:	1ad3      	subs	r3, r2, r3
  408414:	b29a      	uxth	r2, r3
  408416:	687b      	ldr	r3, [r7, #4]
  408418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        tcp_seg_free(next);
  40841c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  40841e:	4b21      	ldr	r3, [pc, #132]	; (4084a4 <tcp_receive+0x3dc>)
  408420:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  408422:	687b      	ldr	r3, [r7, #4]
  408424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408426:	2b00      	cmp	r3, #0
  408428:	d022      	beq.n	408470 <tcp_receive+0x3a8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  40842a:	687b      	ldr	r3, [r7, #4]
  40842c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40842e:	68db      	ldr	r3, [r3, #12]
  408430:	685b      	ldr	r3, [r3, #4]
  408432:	4618      	mov	r0, r3
  408434:	4b1c      	ldr	r3, [pc, #112]	; (4084a8 <tcp_receive+0x3e0>)
  408436:	4798      	blx	r3
  408438:	4604      	mov	r4, r0
  40843a:	687b      	ldr	r3, [r7, #4]
  40843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40843e:	891b      	ldrh	r3, [r3, #8]
  408440:	461d      	mov	r5, r3
  408442:	687b      	ldr	r3, [r7, #4]
  408444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408446:	68db      	ldr	r3, [r3, #12]
  408448:	899b      	ldrh	r3, [r3, #12]
  40844a:	b29b      	uxth	r3, r3
  40844c:	4618      	mov	r0, r3
  40844e:	4b13      	ldr	r3, [pc, #76]	; (40849c <tcp_receive+0x3d4>)
  408450:	4798      	blx	r3
  408452:	4603      	mov	r3, r0
  408454:	f003 0303 	and.w	r3, r3, #3
  408458:	2b00      	cmp	r3, #0
  40845a:	bf14      	ite	ne
  40845c:	2301      	movne	r3, #1
  40845e:	2300      	moveq	r3, #0
  408460:	b2db      	uxtb	r3, r3
  408462:	442b      	add	r3, r5
  408464:	18e2      	adds	r2, r4, r3
  408466:	4b11      	ldr	r3, [pc, #68]	; (4084ac <tcp_receive+0x3e4>)
  408468:	681b      	ldr	r3, [r3, #0]
  40846a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
  40846c:	2b00      	cmp	r3, #0
  40846e:	dda4      	ble.n	4083ba <tcp_receive+0x2f2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  408470:	687b      	ldr	r3, [r7, #4]
  408472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408474:	2b00      	cmp	r3, #0
  408476:	d104      	bne.n	408482 <tcp_receive+0x3ba>
        pcb->rtime = -1;
  408478:	687b      	ldr	r3, [r7, #4]
  40847a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40847e:	869a      	strh	r2, [r3, #52]	; 0x34
  408480:	e002      	b.n	408488 <tcp_receive+0x3c0>
      else
        pcb->rtime = 0;
  408482:	687b      	ldr	r3, [r7, #4]
  408484:	2200      	movs	r2, #0
  408486:	869a      	strh	r2, [r3, #52]	; 0x34

      pcb->polltmr = 0;
  408488:	687b      	ldr	r3, [r7, #4]
  40848a:	2200      	movs	r2, #0
  40848c:	77da      	strb	r2, [r3, #31]
  40848e:	e003      	b.n	408498 <tcp_receive+0x3d0>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  408490:	687b      	ldr	r3, [r7, #4]
  408492:	2200      	movs	r2, #0
  408494:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  408498:	e046      	b.n	408528 <tcp_receive+0x460>
  40849a:	bf00      	nop
  40849c:	00401e45 	.word	0x00401e45
  4084a0:	00405a91 	.word	0x00405a91
  4084a4:	00406a99 	.word	0x00406a99
  4084a8:	00401e99 	.word	0x00401e99
  4084ac:	20402070 	.word	0x20402070
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  4084b0:	687b      	ldr	r3, [r7, #4]
  4084b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4084b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
  4084b6:	687b      	ldr	r3, [r7, #4]
  4084b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4084ba:	681a      	ldr	r2, [r3, #0]
  4084bc:	687b      	ldr	r3, [r7, #4]
  4084be:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  4084c0:	687b      	ldr	r3, [r7, #4]
  4084c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4084c4:	2b00      	cmp	r3, #0
  4084c6:	d103      	bne.n	4084d0 <tcp_receive+0x408>
        pcb->unsent_oversize = 0;
  4084c8:	687b      	ldr	r3, [r7, #4]
  4084ca:	2200      	movs	r2, #0
  4084cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4084d0:	687b      	ldr	r3, [r7, #4]
  4084d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4084d6:	2b00      	cmp	r3, #0
  4084d8:	d013      	beq.n	408502 <tcp_receive+0x43a>
  4084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4084dc:	68db      	ldr	r3, [r3, #12]
  4084de:	899b      	ldrh	r3, [r3, #12]
  4084e0:	b29b      	uxth	r3, r3
  4084e2:	4618      	mov	r0, r3
  4084e4:	4b90      	ldr	r3, [pc, #576]	; (408728 <tcp_receive+0x660>)
  4084e6:	4798      	blx	r3
  4084e8:	4603      	mov	r3, r0
  4084ea:	f003 0301 	and.w	r3, r3, #1
  4084ee:	2b00      	cmp	r3, #0
  4084f0:	d007      	beq.n	408502 <tcp_receive+0x43a>
        pcb->acked--;
  4084f2:	687b      	ldr	r3, [r7, #4]
  4084f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4084f8:	3b01      	subs	r3, #1
  4084fa:	b29a      	uxth	r2, r3
  4084fc:	687b      	ldr	r3, [r7, #4]
  4084fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
  408502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408504:	685b      	ldr	r3, [r3, #4]
  408506:	4618      	mov	r0, r3
  408508:	4b88      	ldr	r3, [pc, #544]	; (40872c <tcp_receive+0x664>)
  40850a:	4798      	blx	r3
  40850c:	4603      	mov	r3, r0
  40850e:	4619      	mov	r1, r3
  408510:	687b      	ldr	r3, [r7, #4]
  408512:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  408516:	b28b      	uxth	r3, r1
  408518:	1ad3      	subs	r3, r2, r3
  40851a:	b29a      	uxth	r2, r3
  40851c:	687b      	ldr	r3, [r7, #4]
  40851e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      tcp_seg_free(next);
  408522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  408524:	4b82      	ldr	r3, [pc, #520]	; (408730 <tcp_receive+0x668>)
  408526:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  408528:	687b      	ldr	r3, [r7, #4]
  40852a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40852c:	2b00      	cmp	r3, #0
  40852e:	d029      	beq.n	408584 <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408530:	4b80      	ldr	r3, [pc, #512]	; (408734 <tcp_receive+0x66c>)
  408532:	681c      	ldr	r4, [r3, #0]
  408534:	687b      	ldr	r3, [r7, #4]
  408536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408538:	68db      	ldr	r3, [r3, #12]
  40853a:	685b      	ldr	r3, [r3, #4]
  40853c:	4618      	mov	r0, r3
  40853e:	4b7e      	ldr	r3, [pc, #504]	; (408738 <tcp_receive+0x670>)
  408540:	4798      	blx	r3
  408542:	4605      	mov	r5, r0
  408544:	687b      	ldr	r3, [r7, #4]
  408546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408548:	891b      	ldrh	r3, [r3, #8]
  40854a:	461e      	mov	r6, r3
  40854c:	687b      	ldr	r3, [r7, #4]
  40854e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408550:	68db      	ldr	r3, [r3, #12]
  408552:	899b      	ldrh	r3, [r3, #12]
  408554:	b29b      	uxth	r3, r3
  408556:	4618      	mov	r0, r3
  408558:	4b73      	ldr	r3, [pc, #460]	; (408728 <tcp_receive+0x660>)
  40855a:	4798      	blx	r3
  40855c:	4603      	mov	r3, r0
  40855e:	f003 0303 	and.w	r3, r3, #3
  408562:	2b00      	cmp	r3, #0
  408564:	bf14      	ite	ne
  408566:	2301      	movne	r3, #1
  408568:	2300      	moveq	r3, #0
  40856a:	b2db      	uxtb	r3, r3
  40856c:	4433      	add	r3, r6
  40856e:	442b      	add	r3, r5
  408570:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
  408572:	2b00      	cmp	r3, #0
  408574:	db06      	blt.n	408584 <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408576:	4b6f      	ldr	r3, [pc, #444]	; (408734 <tcp_receive+0x66c>)
  408578:	681a      	ldr	r2, [r3, #0]
  40857a:	687b      	ldr	r3, [r7, #4]
  40857c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40857e:	1ad3      	subs	r3, r2, r3
  408580:	2b00      	cmp	r3, #0
  408582:	dd95      	ble.n	4084b0 <tcp_receive+0x3e8>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  408584:	687b      	ldr	r3, [r7, #4]
  408586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408588:	2b00      	cmp	r3, #0
  40858a:	d054      	beq.n	408636 <tcp_receive+0x56e>
  40858c:	687b      	ldr	r3, [r7, #4]
  40858e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  408590:	4b68      	ldr	r3, [pc, #416]	; (408734 <tcp_receive+0x66c>)
  408592:	681b      	ldr	r3, [r3, #0]
  408594:	1ad3      	subs	r3, r2, r3
  408596:	2b00      	cmp	r3, #0
  408598:	da4d      	bge.n	408636 <tcp_receive+0x56e>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  40859a:	4b68      	ldr	r3, [pc, #416]	; (40873c <tcp_receive+0x674>)
  40859c:	681b      	ldr	r3, [r3, #0]
  40859e:	b29a      	uxth	r2, r3
  4085a0:	687b      	ldr	r3, [r7, #4]
  4085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  4085a4:	b29b      	uxth	r3, r3
  4085a6:	1ad3      	subs	r3, r2, r3
  4085a8:	b29b      	uxth	r3, r3
  4085aa:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  4085ac:	8bfa      	ldrh	r2, [r7, #30]
  4085ae:	687b      	ldr	r3, [r7, #4]
  4085b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4085b4:	10db      	asrs	r3, r3, #3
  4085b6:	b21b      	sxth	r3, r3
  4085b8:	b29b      	uxth	r3, r3
  4085ba:	1ad3      	subs	r3, r2, r3
  4085bc:	b29b      	uxth	r3, r3
  4085be:	83fb      	strh	r3, [r7, #30]
      pcb->sa += m;
  4085c0:	687b      	ldr	r3, [r7, #4]
  4085c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4085c6:	b29a      	uxth	r2, r3
  4085c8:	8bfb      	ldrh	r3, [r7, #30]
  4085ca:	4413      	add	r3, r2
  4085cc:	b29b      	uxth	r3, r3
  4085ce:	b21a      	sxth	r2, r3
  4085d0:	687b      	ldr	r3, [r7, #4]
  4085d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      if (m < 0) {
  4085d6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  4085da:	2b00      	cmp	r3, #0
  4085dc:	da03      	bge.n	4085e6 <tcp_receive+0x51e>
        m = -m;
  4085de:	8bfb      	ldrh	r3, [r7, #30]
  4085e0:	425b      	negs	r3, r3
  4085e2:	b29b      	uxth	r3, r3
  4085e4:	83fb      	strh	r3, [r7, #30]
      }
      m = m - (pcb->sv >> 2);
  4085e6:	8bfa      	ldrh	r2, [r7, #30]
  4085e8:	687b      	ldr	r3, [r7, #4]
  4085ea:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4085ee:	109b      	asrs	r3, r3, #2
  4085f0:	b21b      	sxth	r3, r3
  4085f2:	b29b      	uxth	r3, r3
  4085f4:	1ad3      	subs	r3, r2, r3
  4085f6:	b29b      	uxth	r3, r3
  4085f8:	83fb      	strh	r3, [r7, #30]
      pcb->sv += m;
  4085fa:	687b      	ldr	r3, [r7, #4]
  4085fc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408600:	b29a      	uxth	r2, r3
  408602:	8bfb      	ldrh	r3, [r7, #30]
  408604:	4413      	add	r3, r2
  408606:	b29b      	uxth	r3, r3
  408608:	b21a      	sxth	r2, r3
  40860a:	687b      	ldr	r3, [r7, #4]
  40860c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  408610:	687b      	ldr	r3, [r7, #4]
  408612:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  408616:	10db      	asrs	r3, r3, #3
  408618:	b21b      	sxth	r3, r3
  40861a:	b29a      	uxth	r2, r3
  40861c:	687b      	ldr	r3, [r7, #4]
  40861e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408622:	b29b      	uxth	r3, r3
  408624:	4413      	add	r3, r2
  408626:	b29b      	uxth	r3, r3
  408628:	b21a      	sxth	r2, r3
  40862a:	687b      	ldr	r3, [r7, #4]
  40862c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  408630:	687b      	ldr	r3, [r7, #4]
  408632:	2200      	movs	r2, #0
  408634:	639a      	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  408636:	4b42      	ldr	r3, [pc, #264]	; (408740 <tcp_receive+0x678>)
  408638:	881b      	ldrh	r3, [r3, #0]
  40863a:	2b00      	cmp	r3, #0
  40863c:	f000 8462 	beq.w	408f04 <tcp_receive+0xe3c>
  408640:	687b      	ldr	r3, [r7, #4]
  408642:	7e1b      	ldrb	r3, [r3, #24]
  408644:	2b06      	cmp	r3, #6
  408646:	f200 845d 	bhi.w	408f04 <tcp_receive+0xe3c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  40864a:	687b      	ldr	r3, [r7, #4]
  40864c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40864e:	4b3d      	ldr	r3, [pc, #244]	; (408744 <tcp_receive+0x67c>)
  408650:	681b      	ldr	r3, [r3, #0]
  408652:	1ad3      	subs	r3, r2, r3
  408654:	3b01      	subs	r3, #1
  408656:	2b00      	cmp	r3, #0
  408658:	db7a      	blt.n	408750 <tcp_receive+0x688>
  40865a:	687b      	ldr	r3, [r7, #4]
  40865c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40865e:	4b38      	ldr	r3, [pc, #224]	; (408740 <tcp_receive+0x678>)
  408660:	881b      	ldrh	r3, [r3, #0]
  408662:	4619      	mov	r1, r3
  408664:	4b37      	ldr	r3, [pc, #220]	; (408744 <tcp_receive+0x67c>)
  408666:	681b      	ldr	r3, [r3, #0]
  408668:	440b      	add	r3, r1
  40866a:	1ad3      	subs	r3, r2, r3
  40866c:	3301      	adds	r3, #1
  40866e:	2b00      	cmp	r3, #0
  408670:	dc6e      	bgt.n	408750 <tcp_receive+0x688>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  408672:	687b      	ldr	r3, [r7, #4]
  408674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408676:	4b33      	ldr	r3, [pc, #204]	; (408744 <tcp_receive+0x67c>)
  408678:	681b      	ldr	r3, [r3, #0]
  40867a:	1ad3      	subs	r3, r2, r3
  40867c:	623b      	str	r3, [r7, #32]
      p = inseg.p;
  40867e:	4b32      	ldr	r3, [pc, #200]	; (408748 <tcp_receive+0x680>)
  408680:	685b      	ldr	r3, [r3, #4]
  408682:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
  408684:	4b30      	ldr	r3, [pc, #192]	; (408748 <tcp_receive+0x680>)
  408686:	685b      	ldr	r3, [r3, #4]
  408688:	895b      	ldrh	r3, [r3, #10]
  40868a:	461a      	mov	r2, r3
  40868c:	6a3b      	ldr	r3, [r7, #32]
  40868e:	429a      	cmp	r2, r3
  408690:	da26      	bge.n	4086e0 <tcp_receive+0x618>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  408692:	4b2d      	ldr	r3, [pc, #180]	; (408748 <tcp_receive+0x680>)
  408694:	685b      	ldr	r3, [r3, #4]
  408696:	891a      	ldrh	r2, [r3, #8]
  408698:	6a3b      	ldr	r3, [r7, #32]
  40869a:	b29b      	uxth	r3, r3
  40869c:	1ad3      	subs	r3, r2, r3
  40869e:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
  4086a0:	e00e      	b.n	4086c0 <tcp_receive+0x5f8>
          off -= p->len;
  4086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4086a4:	895b      	ldrh	r3, [r3, #10]
  4086a6:	461a      	mov	r2, r3
  4086a8:	6a3b      	ldr	r3, [r7, #32]
  4086aa:	1a9b      	subs	r3, r3, r2
  4086ac:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  4086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4086b0:	8a3a      	ldrh	r2, [r7, #16]
  4086b2:	811a      	strh	r2, [r3, #8]
          p->len = 0;
  4086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4086b6:	2200      	movs	r2, #0
  4086b8:	815a      	strh	r2, [r3, #10]
          p = p->next;
  4086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4086bc:	681b      	ldr	r3, [r3, #0]
  4086be:	627b      	str	r3, [r7, #36]	; 0x24
        while (p->len < off) {
  4086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4086c2:	895b      	ldrh	r3, [r3, #10]
  4086c4:	461a      	mov	r2, r3
  4086c6:	6a3b      	ldr	r3, [r7, #32]
  4086c8:	429a      	cmp	r2, r3
  4086ca:	dbea      	blt.n	4086a2 <tcp_receive+0x5da>
        }
        if(pbuf_header(p, (s16_t)-off)) {
  4086cc:	6a3b      	ldr	r3, [r7, #32]
  4086ce:	b29b      	uxth	r3, r3
  4086d0:	425b      	negs	r3, r3
  4086d2:	b29b      	uxth	r3, r3
  4086d4:	b21b      	sxth	r3, r3
  4086d6:	4619      	mov	r1, r3
  4086d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
  4086da:	4b1c      	ldr	r3, [pc, #112]	; (40874c <tcp_receive+0x684>)
  4086dc:	4798      	blx	r3
  4086de:	e00a      	b.n	4086f6 <tcp_receive+0x62e>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  4086e0:	4b19      	ldr	r3, [pc, #100]	; (408748 <tcp_receive+0x680>)
  4086e2:	685b      	ldr	r3, [r3, #4]
  4086e4:	6a3a      	ldr	r2, [r7, #32]
  4086e6:	b292      	uxth	r2, r2
  4086e8:	4252      	negs	r2, r2
  4086ea:	b292      	uxth	r2, r2
  4086ec:	b212      	sxth	r2, r2
  4086ee:	4611      	mov	r1, r2
  4086f0:	4618      	mov	r0, r3
  4086f2:	4b16      	ldr	r3, [pc, #88]	; (40874c <tcp_receive+0x684>)
  4086f4:	4798      	blx	r3
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  4086f6:	4b14      	ldr	r3, [pc, #80]	; (408748 <tcp_receive+0x680>)
  4086f8:	891a      	ldrh	r2, [r3, #8]
  4086fa:	4b12      	ldr	r3, [pc, #72]	; (408744 <tcp_receive+0x67c>)
  4086fc:	681b      	ldr	r3, [r3, #0]
  4086fe:	b299      	uxth	r1, r3
  408700:	687b      	ldr	r3, [r7, #4]
  408702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408704:	b29b      	uxth	r3, r3
  408706:	1acb      	subs	r3, r1, r3
  408708:	b29b      	uxth	r3, r3
  40870a:	4413      	add	r3, r2
  40870c:	b29a      	uxth	r2, r3
  40870e:	4b0e      	ldr	r3, [pc, #56]	; (408748 <tcp_receive+0x680>)
  408710:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  408712:	4b0d      	ldr	r3, [pc, #52]	; (408748 <tcp_receive+0x680>)
  408714:	68db      	ldr	r3, [r3, #12]
  408716:	687a      	ldr	r2, [r7, #4]
  408718:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40871a:	490a      	ldr	r1, [pc, #40]	; (408744 <tcp_receive+0x67c>)
  40871c:	600a      	str	r2, [r1, #0]
  40871e:	4a09      	ldr	r2, [pc, #36]	; (408744 <tcp_receive+0x67c>)
  408720:	6812      	ldr	r2, [r2, #0]
  408722:	605a      	str	r2, [r3, #4]
  408724:	e022      	b.n	40876c <tcp_receive+0x6a4>
  408726:	bf00      	nop
  408728:	00401e45 	.word	0x00401e45
  40872c:	00405a91 	.word	0x00405a91
  408730:	00406a99 	.word	0x00406a99
  408734:	20402070 	.word	0x20402070
  408738:	00401e99 	.word	0x00401e99
  40873c:	204043ec 	.word	0x204043ec
  408740:	20402076 	.word	0x20402076
  408744:	2040206c 	.word	0x2040206c
  408748:	20402054 	.word	0x20402054
  40874c:	00405925 	.word	0x00405925
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  408750:	4b64      	ldr	r3, [pc, #400]	; (4088e4 <tcp_receive+0x81c>)
  408752:	681a      	ldr	r2, [r3, #0]
  408754:	687b      	ldr	r3, [r7, #4]
  408756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408758:	1ad3      	subs	r3, r2, r3
  40875a:	2b00      	cmp	r3, #0
  40875c:	da06      	bge.n	40876c <tcp_receive+0x6a4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  40875e:	687b      	ldr	r3, [r7, #4]
  408760:	7f9b      	ldrb	r3, [r3, #30]
  408762:	f043 0302 	orr.w	r3, r3, #2
  408766:	b2da      	uxtb	r2, r3
  408768:	687b      	ldr	r3, [r7, #4]
  40876a:	779a      	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  40876c:	4b5d      	ldr	r3, [pc, #372]	; (4088e4 <tcp_receive+0x81c>)
  40876e:	681a      	ldr	r2, [r3, #0]
  408770:	687b      	ldr	r3, [r7, #4]
  408772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408774:	1ad3      	subs	r3, r2, r3
  408776:	2b00      	cmp	r3, #0
  408778:	f2c0 83bf 	blt.w	408efa <tcp_receive+0xe32>
  40877c:	4b59      	ldr	r3, [pc, #356]	; (4088e4 <tcp_receive+0x81c>)
  40877e:	681a      	ldr	r2, [r3, #0]
  408780:	687b      	ldr	r3, [r7, #4]
  408782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408784:	6879      	ldr	r1, [r7, #4]
  408786:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408788:	440b      	add	r3, r1
  40878a:	1ad3      	subs	r3, r2, r3
  40878c:	3301      	adds	r3, #1
  40878e:	2b00      	cmp	r3, #0
  408790:	f300 83b3 	bgt.w	408efa <tcp_receive+0xe32>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  408794:	687b      	ldr	r3, [r7, #4]
  408796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408798:	4b52      	ldr	r3, [pc, #328]	; (4088e4 <tcp_receive+0x81c>)
  40879a:	681b      	ldr	r3, [r3, #0]
  40879c:	429a      	cmp	r2, r3
  40879e:	f040 823d 	bne.w	408c1c <tcp_receive+0xb54>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  4087a2:	4b51      	ldr	r3, [pc, #324]	; (4088e8 <tcp_receive+0x820>)
  4087a4:	891c      	ldrh	r4, [r3, #8]
  4087a6:	4b50      	ldr	r3, [pc, #320]	; (4088e8 <tcp_receive+0x820>)
  4087a8:	68db      	ldr	r3, [r3, #12]
  4087aa:	899b      	ldrh	r3, [r3, #12]
  4087ac:	b29b      	uxth	r3, r3
  4087ae:	4618      	mov	r0, r3
  4087b0:	4b4e      	ldr	r3, [pc, #312]	; (4088ec <tcp_receive+0x824>)
  4087b2:	4798      	blx	r3
  4087b4:	4603      	mov	r3, r0
  4087b6:	f003 0303 	and.w	r3, r3, #3
  4087ba:	2b00      	cmp	r3, #0
  4087bc:	bf14      	ite	ne
  4087be:	2301      	movne	r3, #1
  4087c0:	2300      	moveq	r3, #0
  4087c2:	b2db      	uxtb	r3, r3
  4087c4:	b29b      	uxth	r3, r3
  4087c6:	4423      	add	r3, r4
  4087c8:	b29a      	uxth	r2, r3
  4087ca:	4b49      	ldr	r3, [pc, #292]	; (4088f0 <tcp_receive+0x828>)
  4087cc:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
  4087ce:	687b      	ldr	r3, [r7, #4]
  4087d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  4087d2:	4b47      	ldr	r3, [pc, #284]	; (4088f0 <tcp_receive+0x828>)
  4087d4:	881b      	ldrh	r3, [r3, #0]
  4087d6:	429a      	cmp	r2, r3
  4087d8:	d25d      	bcs.n	408896 <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4087da:	4b43      	ldr	r3, [pc, #268]	; (4088e8 <tcp_receive+0x820>)
  4087dc:	68db      	ldr	r3, [r3, #12]
  4087de:	899b      	ldrh	r3, [r3, #12]
  4087e0:	b29b      	uxth	r3, r3
  4087e2:	4618      	mov	r0, r3
  4087e4:	4b41      	ldr	r3, [pc, #260]	; (4088ec <tcp_receive+0x824>)
  4087e6:	4798      	blx	r3
  4087e8:	4603      	mov	r3, r0
  4087ea:	f003 0301 	and.w	r3, r3, #1
  4087ee:	2b00      	cmp	r3, #0
  4087f0:	d01d      	beq.n	40882e <tcp_receive+0x766>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  4087f2:	4b3d      	ldr	r3, [pc, #244]	; (4088e8 <tcp_receive+0x820>)
  4087f4:	68dc      	ldr	r4, [r3, #12]
  4087f6:	4b3c      	ldr	r3, [pc, #240]	; (4088e8 <tcp_receive+0x820>)
  4087f8:	68db      	ldr	r3, [r3, #12]
  4087fa:	899b      	ldrh	r3, [r3, #12]
  4087fc:	b29b      	uxth	r3, r3
  4087fe:	b21b      	sxth	r3, r3
  408800:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  408804:	b21d      	sxth	r5, r3
  408806:	4b38      	ldr	r3, [pc, #224]	; (4088e8 <tcp_receive+0x820>)
  408808:	68db      	ldr	r3, [r3, #12]
  40880a:	899b      	ldrh	r3, [r3, #12]
  40880c:	b29b      	uxth	r3, r3
  40880e:	4618      	mov	r0, r3
  408810:	4b36      	ldr	r3, [pc, #216]	; (4088ec <tcp_receive+0x824>)
  408812:	4798      	blx	r3
  408814:	4603      	mov	r3, r0
  408816:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  40881a:	b29b      	uxth	r3, r3
  40881c:	4618      	mov	r0, r3
  40881e:	4b35      	ldr	r3, [pc, #212]	; (4088f4 <tcp_receive+0x82c>)
  408820:	4798      	blx	r3
  408822:	4603      	mov	r3, r0
  408824:	b21b      	sxth	r3, r3
  408826:	432b      	orrs	r3, r5
  408828:	b21b      	sxth	r3, r3
  40882a:	b29b      	uxth	r3, r3
  40882c:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
  40882e:	687b      	ldr	r3, [r7, #4]
  408830:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408832:	4b2d      	ldr	r3, [pc, #180]	; (4088e8 <tcp_receive+0x820>)
  408834:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  408836:	4b2c      	ldr	r3, [pc, #176]	; (4088e8 <tcp_receive+0x820>)
  408838:	68db      	ldr	r3, [r3, #12]
  40883a:	899b      	ldrh	r3, [r3, #12]
  40883c:	b29b      	uxth	r3, r3
  40883e:	4618      	mov	r0, r3
  408840:	4b2a      	ldr	r3, [pc, #168]	; (4088ec <tcp_receive+0x824>)
  408842:	4798      	blx	r3
  408844:	4603      	mov	r3, r0
  408846:	f003 0302 	and.w	r3, r3, #2
  40884a:	2b00      	cmp	r3, #0
  40884c:	d005      	beq.n	40885a <tcp_receive+0x792>
            inseg.len -= 1;
  40884e:	4b26      	ldr	r3, [pc, #152]	; (4088e8 <tcp_receive+0x820>)
  408850:	891b      	ldrh	r3, [r3, #8]
  408852:	3b01      	subs	r3, #1
  408854:	b29a      	uxth	r2, r3
  408856:	4b24      	ldr	r3, [pc, #144]	; (4088e8 <tcp_receive+0x820>)
  408858:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  40885a:	4b23      	ldr	r3, [pc, #140]	; (4088e8 <tcp_receive+0x820>)
  40885c:	685a      	ldr	r2, [r3, #4]
  40885e:	4b22      	ldr	r3, [pc, #136]	; (4088e8 <tcp_receive+0x820>)
  408860:	891b      	ldrh	r3, [r3, #8]
  408862:	4619      	mov	r1, r3
  408864:	4610      	mov	r0, r2
  408866:	4b24      	ldr	r3, [pc, #144]	; (4088f8 <tcp_receive+0x830>)
  408868:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  40886a:	4b1f      	ldr	r3, [pc, #124]	; (4088e8 <tcp_receive+0x820>)
  40886c:	891c      	ldrh	r4, [r3, #8]
  40886e:	4b1e      	ldr	r3, [pc, #120]	; (4088e8 <tcp_receive+0x820>)
  408870:	68db      	ldr	r3, [r3, #12]
  408872:	899b      	ldrh	r3, [r3, #12]
  408874:	b29b      	uxth	r3, r3
  408876:	4618      	mov	r0, r3
  408878:	4b1c      	ldr	r3, [pc, #112]	; (4088ec <tcp_receive+0x824>)
  40887a:	4798      	blx	r3
  40887c:	4603      	mov	r3, r0
  40887e:	f003 0303 	and.w	r3, r3, #3
  408882:	2b00      	cmp	r3, #0
  408884:	bf14      	ite	ne
  408886:	2301      	movne	r3, #1
  408888:	2300      	moveq	r3, #0
  40888a:	b2db      	uxtb	r3, r3
  40888c:	b29b      	uxth	r3, r3
  40888e:	4423      	add	r3, r4
  408890:	b29a      	uxth	r2, r3
  408892:	4b17      	ldr	r3, [pc, #92]	; (4088f0 <tcp_receive+0x828>)
  408894:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  408896:	687b      	ldr	r3, [r7, #4]
  408898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40889a:	2b00      	cmp	r3, #0
  40889c:	f000 80d2 	beq.w	408a44 <tcp_receive+0x97c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  4088a0:	4b11      	ldr	r3, [pc, #68]	; (4088e8 <tcp_receive+0x820>)
  4088a2:	68db      	ldr	r3, [r3, #12]
  4088a4:	899b      	ldrh	r3, [r3, #12]
  4088a6:	b29b      	uxth	r3, r3
  4088a8:	4618      	mov	r0, r3
  4088aa:	4b10      	ldr	r3, [pc, #64]	; (4088ec <tcp_receive+0x824>)
  4088ac:	4798      	blx	r3
  4088ae:	4603      	mov	r3, r0
  4088b0:	f003 0301 	and.w	r3, r3, #1
  4088b4:	2b00      	cmp	r3, #0
  4088b6:	d010      	beq.n	4088da <tcp_receive+0x812>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  4088b8:	e00a      	b.n	4088d0 <tcp_receive+0x808>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  4088ba:	687b      	ldr	r3, [r7, #4]
  4088bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4088be:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
  4088c0:	687b      	ldr	r3, [r7, #4]
  4088c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4088c4:	681a      	ldr	r2, [r3, #0]
  4088c6:	687b      	ldr	r3, [r7, #4]
  4088c8:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  4088ca:	68f8      	ldr	r0, [r7, #12]
  4088cc:	4b0b      	ldr	r3, [pc, #44]	; (4088fc <tcp_receive+0x834>)
  4088ce:	4798      	blx	r3
            while (pcb->ooseq != NULL) {
  4088d0:	687b      	ldr	r3, [r7, #4]
  4088d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4088d4:	2b00      	cmp	r3, #0
  4088d6:	d1f0      	bne.n	4088ba <tcp_receive+0x7f2>
  4088d8:	e0b4      	b.n	408a44 <tcp_receive+0x97c>
            }
          } else {
            next = pcb->ooseq;
  4088da:	687b      	ldr	r3, [r7, #4]
  4088dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4088de:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  4088e0:	e051      	b.n	408986 <tcp_receive+0x8be>
  4088e2:	bf00      	nop
  4088e4:	2040206c 	.word	0x2040206c
  4088e8:	20402054 	.word	0x20402054
  4088ec:	00401e45 	.word	0x00401e45
  4088f0:	20402076 	.word	0x20402076
  4088f4:	00401e19 	.word	0x00401e19
  4088f8:	00405869 	.word	0x00405869
  4088fc:	00406a99 	.word	0x00406a99
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  408900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408902:	68db      	ldr	r3, [r3, #12]
  408904:	899b      	ldrh	r3, [r3, #12]
  408906:	b29b      	uxth	r3, r3
  408908:	4618      	mov	r0, r3
  40890a:	4b90      	ldr	r3, [pc, #576]	; (408b4c <tcp_receive+0xa84>)
  40890c:	4798      	blx	r3
  40890e:	4603      	mov	r3, r0
  408910:	f003 0301 	and.w	r3, r3, #1
  408914:	2b00      	cmp	r3, #0
  408916:	d02e      	beq.n	408976 <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  408918:	4b8d      	ldr	r3, [pc, #564]	; (408b50 <tcp_receive+0xa88>)
  40891a:	68db      	ldr	r3, [r3, #12]
  40891c:	899b      	ldrh	r3, [r3, #12]
  40891e:	b29b      	uxth	r3, r3
  408920:	4618      	mov	r0, r3
  408922:	4b8a      	ldr	r3, [pc, #552]	; (408b4c <tcp_receive+0xa84>)
  408924:	4798      	blx	r3
  408926:	4603      	mov	r3, r0
  408928:	f003 0302 	and.w	r3, r3, #2
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  40892c:	2b00      	cmp	r3, #0
  40892e:	d122      	bne.n	408976 <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  408930:	4b87      	ldr	r3, [pc, #540]	; (408b50 <tcp_receive+0xa88>)
  408932:	68dc      	ldr	r4, [r3, #12]
  408934:	4b86      	ldr	r3, [pc, #536]	; (408b50 <tcp_receive+0xa88>)
  408936:	68db      	ldr	r3, [r3, #12]
  408938:	899b      	ldrh	r3, [r3, #12]
  40893a:	b29d      	uxth	r5, r3
  40893c:	2001      	movs	r0, #1
  40893e:	4b85      	ldr	r3, [pc, #532]	; (408b54 <tcp_receive+0xa8c>)
  408940:	4798      	blx	r3
  408942:	4603      	mov	r3, r0
  408944:	432b      	orrs	r3, r5
  408946:	b29b      	uxth	r3, r3
  408948:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
  40894a:	4b81      	ldr	r3, [pc, #516]	; (408b50 <tcp_receive+0xa88>)
  40894c:	891c      	ldrh	r4, [r3, #8]
  40894e:	4b80      	ldr	r3, [pc, #512]	; (408b50 <tcp_receive+0xa88>)
  408950:	68db      	ldr	r3, [r3, #12]
  408952:	899b      	ldrh	r3, [r3, #12]
  408954:	b29b      	uxth	r3, r3
  408956:	4618      	mov	r0, r3
  408958:	4b7c      	ldr	r3, [pc, #496]	; (408b4c <tcp_receive+0xa84>)
  40895a:	4798      	blx	r3
  40895c:	4603      	mov	r3, r0
  40895e:	f003 0303 	and.w	r3, r3, #3
  408962:	2b00      	cmp	r3, #0
  408964:	bf14      	ite	ne
  408966:	2301      	movne	r3, #1
  408968:	2300      	moveq	r3, #0
  40896a:	b2db      	uxtb	r3, r3
  40896c:	b29b      	uxth	r3, r3
  40896e:	4423      	add	r3, r4
  408970:	b29a      	uxth	r2, r3
  408972:	4b79      	ldr	r3, [pc, #484]	; (408b58 <tcp_receive+0xa90>)
  408974:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
  408976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408978:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
  40897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40897c:	681b      	ldr	r3, [r3, #0]
  40897e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
  408980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  408982:	4b76      	ldr	r3, [pc, #472]	; (408b5c <tcp_receive+0xa94>)
  408984:	4798      	blx	r3
            while (next &&
  408986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408988:	2b00      	cmp	r3, #0
  40898a:	d00e      	beq.n	4089aa <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
  40898c:	4b72      	ldr	r3, [pc, #456]	; (408b58 <tcp_receive+0xa90>)
  40898e:	881b      	ldrh	r3, [r3, #0]
  408990:	461a      	mov	r2, r3
  408992:	4b73      	ldr	r3, [pc, #460]	; (408b60 <tcp_receive+0xa98>)
  408994:	681b      	ldr	r3, [r3, #0]
  408996:	441a      	add	r2, r3
  408998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40899a:	68db      	ldr	r3, [r3, #12]
  40899c:	685b      	ldr	r3, [r3, #4]
  40899e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  4089a0:	8909      	ldrh	r1, [r1, #8]
  4089a2:	440b      	add	r3, r1
  4089a4:	1ad3      	subs	r3, r2, r3
            while (next &&
  4089a6:	2b00      	cmp	r3, #0
  4089a8:	daaa      	bge.n	408900 <tcp_receive+0x838>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  4089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4089ac:	2b00      	cmp	r3, #0
  4089ae:	d046      	beq.n	408a3e <tcp_receive+0x976>
                TCP_SEQ_GT(seqno + tcplen,
  4089b0:	4b69      	ldr	r3, [pc, #420]	; (408b58 <tcp_receive+0xa90>)
  4089b2:	881b      	ldrh	r3, [r3, #0]
  4089b4:	461a      	mov	r2, r3
  4089b6:	4b6a      	ldr	r3, [pc, #424]	; (408b60 <tcp_receive+0xa98>)
  4089b8:	681b      	ldr	r3, [r3, #0]
  4089ba:	441a      	add	r2, r3
  4089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4089be:	68db      	ldr	r3, [r3, #12]
  4089c0:	685b      	ldr	r3, [r3, #4]
  4089c2:	1ad3      	subs	r3, r2, r3
            if (next &&
  4089c4:	2b00      	cmp	r3, #0
  4089c6:	dd3a      	ble.n	408a3e <tcp_receive+0x976>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  4089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4089ca:	68db      	ldr	r3, [r3, #12]
  4089cc:	685b      	ldr	r3, [r3, #4]
  4089ce:	b29a      	uxth	r2, r3
  4089d0:	4b63      	ldr	r3, [pc, #396]	; (408b60 <tcp_receive+0xa98>)
  4089d2:	681b      	ldr	r3, [r3, #0]
  4089d4:	b29b      	uxth	r3, r3
  4089d6:	1ad3      	subs	r3, r2, r3
  4089d8:	b29a      	uxth	r2, r3
  4089da:	4b5d      	ldr	r3, [pc, #372]	; (408b50 <tcp_receive+0xa88>)
  4089dc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  4089de:	4b5c      	ldr	r3, [pc, #368]	; (408b50 <tcp_receive+0xa88>)
  4089e0:	68db      	ldr	r3, [r3, #12]
  4089e2:	899b      	ldrh	r3, [r3, #12]
  4089e4:	b29b      	uxth	r3, r3
  4089e6:	4618      	mov	r0, r3
  4089e8:	4b58      	ldr	r3, [pc, #352]	; (408b4c <tcp_receive+0xa84>)
  4089ea:	4798      	blx	r3
  4089ec:	4603      	mov	r3, r0
  4089ee:	f003 0302 	and.w	r3, r3, #2
  4089f2:	2b00      	cmp	r3, #0
  4089f4:	d005      	beq.n	408a02 <tcp_receive+0x93a>
                inseg.len -= 1;
  4089f6:	4b56      	ldr	r3, [pc, #344]	; (408b50 <tcp_receive+0xa88>)
  4089f8:	891b      	ldrh	r3, [r3, #8]
  4089fa:	3b01      	subs	r3, #1
  4089fc:	b29a      	uxth	r2, r3
  4089fe:	4b54      	ldr	r3, [pc, #336]	; (408b50 <tcp_receive+0xa88>)
  408a00:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  408a02:	4b53      	ldr	r3, [pc, #332]	; (408b50 <tcp_receive+0xa88>)
  408a04:	685a      	ldr	r2, [r3, #4]
  408a06:	4b52      	ldr	r3, [pc, #328]	; (408b50 <tcp_receive+0xa88>)
  408a08:	891b      	ldrh	r3, [r3, #8]
  408a0a:	4619      	mov	r1, r3
  408a0c:	4610      	mov	r0, r2
  408a0e:	4b55      	ldr	r3, [pc, #340]	; (408b64 <tcp_receive+0xa9c>)
  408a10:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  408a12:	4b4f      	ldr	r3, [pc, #316]	; (408b50 <tcp_receive+0xa88>)
  408a14:	891c      	ldrh	r4, [r3, #8]
  408a16:	4b4e      	ldr	r3, [pc, #312]	; (408b50 <tcp_receive+0xa88>)
  408a18:	68db      	ldr	r3, [r3, #12]
  408a1a:	899b      	ldrh	r3, [r3, #12]
  408a1c:	b29b      	uxth	r3, r3
  408a1e:	4618      	mov	r0, r3
  408a20:	4b4a      	ldr	r3, [pc, #296]	; (408b4c <tcp_receive+0xa84>)
  408a22:	4798      	blx	r3
  408a24:	4603      	mov	r3, r0
  408a26:	f003 0303 	and.w	r3, r3, #3
  408a2a:	2b00      	cmp	r3, #0
  408a2c:	bf14      	ite	ne
  408a2e:	2301      	movne	r3, #1
  408a30:	2300      	moveq	r3, #0
  408a32:	b2db      	uxtb	r3, r3
  408a34:	b29b      	uxth	r3, r3
  408a36:	4423      	add	r3, r4
  408a38:	b29a      	uxth	r2, r3
  408a3a:	4b47      	ldr	r3, [pc, #284]	; (408b58 <tcp_receive+0xa90>)
  408a3c:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  408a3e:	687b      	ldr	r3, [r7, #4]
  408a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  408a42:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  408a44:	4b44      	ldr	r3, [pc, #272]	; (408b58 <tcp_receive+0xa90>)
  408a46:	881b      	ldrh	r3, [r3, #0]
  408a48:	461a      	mov	r2, r3
  408a4a:	4b45      	ldr	r3, [pc, #276]	; (408b60 <tcp_receive+0xa98>)
  408a4c:	681b      	ldr	r3, [r3, #0]
  408a4e:	441a      	add	r2, r3
  408a50:	687b      	ldr	r3, [r7, #4]
  408a52:	629a      	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
  408a54:	687b      	ldr	r3, [r7, #4]
  408a56:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408a58:	4b3f      	ldr	r3, [pc, #252]	; (408b58 <tcp_receive+0xa90>)
  408a5a:	881b      	ldrh	r3, [r3, #0]
  408a5c:	1ad3      	subs	r3, r2, r3
  408a5e:	b29a      	uxth	r2, r3
  408a60:	687b      	ldr	r3, [r7, #4]
  408a62:	859a      	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  408a64:	6878      	ldr	r0, [r7, #4]
  408a66:	4b40      	ldr	r3, [pc, #256]	; (408b68 <tcp_receive+0xaa0>)
  408a68:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  408a6a:	4b39      	ldr	r3, [pc, #228]	; (408b50 <tcp_receive+0xa88>)
  408a6c:	685b      	ldr	r3, [r3, #4]
  408a6e:	891b      	ldrh	r3, [r3, #8]
  408a70:	2b00      	cmp	r3, #0
  408a72:	d006      	beq.n	408a82 <tcp_receive+0x9ba>
          recv_data = inseg.p;
  408a74:	4b36      	ldr	r3, [pc, #216]	; (408b50 <tcp_receive+0xa88>)
  408a76:	685b      	ldr	r3, [r3, #4]
  408a78:	4a3c      	ldr	r2, [pc, #240]	; (408b6c <tcp_receive+0xaa4>)
  408a7a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  408a7c:	4b34      	ldr	r3, [pc, #208]	; (408b50 <tcp_receive+0xa88>)
  408a7e:	2200      	movs	r2, #0
  408a80:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408a82:	4b33      	ldr	r3, [pc, #204]	; (408b50 <tcp_receive+0xa88>)
  408a84:	68db      	ldr	r3, [r3, #12]
  408a86:	899b      	ldrh	r3, [r3, #12]
  408a88:	b29b      	uxth	r3, r3
  408a8a:	4618      	mov	r0, r3
  408a8c:	4b2f      	ldr	r3, [pc, #188]	; (408b4c <tcp_receive+0xa84>)
  408a8e:	4798      	blx	r3
  408a90:	4603      	mov	r3, r0
  408a92:	f003 0301 	and.w	r3, r3, #1
  408a96:	2b00      	cmp	r3, #0
  408a98:	f000 8096 	beq.w	408bc8 <tcp_receive+0xb00>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  408a9c:	4b34      	ldr	r3, [pc, #208]	; (408b70 <tcp_receive+0xaa8>)
  408a9e:	781b      	ldrb	r3, [r3, #0]
  408aa0:	f043 0320 	orr.w	r3, r3, #32
  408aa4:	b2da      	uxtb	r2, r3
  408aa6:	4b32      	ldr	r3, [pc, #200]	; (408b70 <tcp_receive+0xaa8>)
  408aa8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  408aaa:	e08d      	b.n	408bc8 <tcp_receive+0xb00>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  408aac:	687b      	ldr	r3, [r7, #4]
  408aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408ab0:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
  408ab2:	687b      	ldr	r3, [r7, #4]
  408ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408ab6:	68db      	ldr	r3, [r3, #12]
  408ab8:	685b      	ldr	r3, [r3, #4]
  408aba:	4a29      	ldr	r2, [pc, #164]	; (408b60 <tcp_receive+0xa98>)
  408abc:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  408abe:	68bb      	ldr	r3, [r7, #8]
  408ac0:	891b      	ldrh	r3, [r3, #8]
  408ac2:	461c      	mov	r4, r3
  408ac4:	68bb      	ldr	r3, [r7, #8]
  408ac6:	68db      	ldr	r3, [r3, #12]
  408ac8:	899b      	ldrh	r3, [r3, #12]
  408aca:	b29b      	uxth	r3, r3
  408acc:	4618      	mov	r0, r3
  408ace:	4b1f      	ldr	r3, [pc, #124]	; (408b4c <tcp_receive+0xa84>)
  408ad0:	4798      	blx	r3
  408ad2:	4603      	mov	r3, r0
  408ad4:	f003 0303 	and.w	r3, r3, #3
  408ad8:	2b00      	cmp	r3, #0
  408ada:	bf14      	ite	ne
  408adc:	2301      	movne	r3, #1
  408ade:	2300      	moveq	r3, #0
  408ae0:	b2db      	uxtb	r3, r3
  408ae2:	18e2      	adds	r2, r4, r3
  408ae4:	687b      	ldr	r3, [r7, #4]
  408ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408ae8:	441a      	add	r2, r3
  408aea:	687b      	ldr	r3, [r7, #4]
  408aec:	629a      	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  408aee:	68bb      	ldr	r3, [r7, #8]
  408af0:	891b      	ldrh	r3, [r3, #8]
  408af2:	461c      	mov	r4, r3
  408af4:	68bb      	ldr	r3, [r7, #8]
  408af6:	68db      	ldr	r3, [r3, #12]
  408af8:	899b      	ldrh	r3, [r3, #12]
  408afa:	b29b      	uxth	r3, r3
  408afc:	4618      	mov	r0, r3
  408afe:	4b13      	ldr	r3, [pc, #76]	; (408b4c <tcp_receive+0xa84>)
  408b00:	4798      	blx	r3
  408b02:	4603      	mov	r3, r0
  408b04:	f003 0303 	and.w	r3, r3, #3
  408b08:	2b00      	cmp	r3, #0
  408b0a:	bf14      	ite	ne
  408b0c:	2301      	movne	r3, #1
  408b0e:	2300      	moveq	r3, #0
  408b10:	b2db      	uxtb	r3, r3
  408b12:	18e1      	adds	r1, r4, r3
  408b14:	687b      	ldr	r3, [r7, #4]
  408b16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408b18:	b28b      	uxth	r3, r1
  408b1a:	1ad3      	subs	r3, r2, r3
  408b1c:	b29a      	uxth	r2, r3
  408b1e:	687b      	ldr	r3, [r7, #4]
  408b20:	859a      	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  408b22:	6878      	ldr	r0, [r7, #4]
  408b24:	4b10      	ldr	r3, [pc, #64]	; (408b68 <tcp_receive+0xaa0>)
  408b26:	4798      	blx	r3

          if (cseg->p->tot_len > 0) {
  408b28:	68bb      	ldr	r3, [r7, #8]
  408b2a:	685b      	ldr	r3, [r3, #4]
  408b2c:	891b      	ldrh	r3, [r3, #8]
  408b2e:	2b00      	cmp	r3, #0
  408b30:	d029      	beq.n	408b86 <tcp_receive+0xabe>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  408b32:	4b0e      	ldr	r3, [pc, #56]	; (408b6c <tcp_receive+0xaa4>)
  408b34:	681b      	ldr	r3, [r3, #0]
  408b36:	2b00      	cmp	r3, #0
  408b38:	d01e      	beq.n	408b78 <tcp_receive+0xab0>
              pbuf_cat(recv_data, cseg->p);
  408b3a:	4b0c      	ldr	r3, [pc, #48]	; (408b6c <tcp_receive+0xaa4>)
  408b3c:	681a      	ldr	r2, [r3, #0]
  408b3e:	68bb      	ldr	r3, [r7, #8]
  408b40:	685b      	ldr	r3, [r3, #4]
  408b42:	4619      	mov	r1, r3
  408b44:	4610      	mov	r0, r2
  408b46:	4b0b      	ldr	r3, [pc, #44]	; (408b74 <tcp_receive+0xaac>)
  408b48:	4798      	blx	r3
  408b4a:	e019      	b.n	408b80 <tcp_receive+0xab8>
  408b4c:	00401e45 	.word	0x00401e45
  408b50:	20402054 	.word	0x20402054
  408b54:	00401e19 	.word	0x00401e19
  408b58:	20402076 	.word	0x20402076
  408b5c:	00406a99 	.word	0x00406a99
  408b60:	2040206c 	.word	0x2040206c
  408b64:	00405869 	.word	0x00405869
  408b68:	00406121 	.word	0x00406121
  408b6c:	2040207c 	.word	0x2040207c
  408b70:	20402078 	.word	0x20402078
  408b74:	00405ae5 	.word	0x00405ae5
            } else {
              recv_data = cseg->p;
  408b78:	68bb      	ldr	r3, [r7, #8]
  408b7a:	685b      	ldr	r3, [r3, #4]
  408b7c:	4a71      	ldr	r2, [pc, #452]	; (408d44 <tcp_receive+0xc7c>)
  408b7e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
  408b80:	68bb      	ldr	r3, [r7, #8]
  408b82:	2200      	movs	r2, #0
  408b84:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  408b86:	68bb      	ldr	r3, [r7, #8]
  408b88:	68db      	ldr	r3, [r3, #12]
  408b8a:	899b      	ldrh	r3, [r3, #12]
  408b8c:	b29b      	uxth	r3, r3
  408b8e:	4618      	mov	r0, r3
  408b90:	4b6d      	ldr	r3, [pc, #436]	; (408d48 <tcp_receive+0xc80>)
  408b92:	4798      	blx	r3
  408b94:	4603      	mov	r3, r0
  408b96:	f003 0301 	and.w	r3, r3, #1
  408b9a:	2b00      	cmp	r3, #0
  408b9c:	d00d      	beq.n	408bba <tcp_receive+0xaf2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  408b9e:	4b6b      	ldr	r3, [pc, #428]	; (408d4c <tcp_receive+0xc84>)
  408ba0:	781b      	ldrb	r3, [r3, #0]
  408ba2:	f043 0320 	orr.w	r3, r3, #32
  408ba6:	b2da      	uxtb	r2, r3
  408ba8:	4b68      	ldr	r3, [pc, #416]	; (408d4c <tcp_receive+0xc84>)
  408baa:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  408bac:	687b      	ldr	r3, [r7, #4]
  408bae:	7e1b      	ldrb	r3, [r3, #24]
  408bb0:	2b04      	cmp	r3, #4
  408bb2:	d102      	bne.n	408bba <tcp_receive+0xaf2>
              pcb->state = CLOSE_WAIT;
  408bb4:	687b      	ldr	r3, [r7, #4]
  408bb6:	2207      	movs	r2, #7
  408bb8:	761a      	strb	r2, [r3, #24]
            } 
          }

          pcb->ooseq = cseg->next;
  408bba:	68bb      	ldr	r3, [r7, #8]
  408bbc:	681a      	ldr	r2, [r3, #0]
  408bbe:	687b      	ldr	r3, [r7, #4]
  408bc0:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  408bc2:	68b8      	ldr	r0, [r7, #8]
  408bc4:	4b62      	ldr	r3, [pc, #392]	; (408d50 <tcp_receive+0xc88>)
  408bc6:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  408bc8:	687b      	ldr	r3, [r7, #4]
  408bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408bcc:	2b00      	cmp	r3, #0
  408bce:	d008      	beq.n	408be2 <tcp_receive+0xb1a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  408bd0:	687b      	ldr	r3, [r7, #4]
  408bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408bd4:	68db      	ldr	r3, [r3, #12]
  408bd6:	685a      	ldr	r2, [r3, #4]
  408bd8:	687b      	ldr	r3, [r7, #4]
  408bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  408bdc:	429a      	cmp	r2, r3
  408bde:	f43f af65 	beq.w	408aac <tcp_receive+0x9e4>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  408be2:	687b      	ldr	r3, [r7, #4]
  408be4:	7f9b      	ldrb	r3, [r3, #30]
  408be6:	f003 0301 	and.w	r3, r3, #1
  408bea:	2b00      	cmp	r3, #0
  408bec:	d00e      	beq.n	408c0c <tcp_receive+0xb44>
  408bee:	687b      	ldr	r3, [r7, #4]
  408bf0:	7f9b      	ldrb	r3, [r3, #30]
  408bf2:	f023 0301 	bic.w	r3, r3, #1
  408bf6:	b2da      	uxtb	r2, r3
  408bf8:	687b      	ldr	r3, [r7, #4]
  408bfa:	779a      	strb	r2, [r3, #30]
  408bfc:	687b      	ldr	r3, [r7, #4]
  408bfe:	7f9b      	ldrb	r3, [r3, #30]
  408c00:	f043 0302 	orr.w	r3, r3, #2
  408c04:	b2da      	uxtb	r2, r3
  408c06:	687b      	ldr	r3, [r7, #4]
  408c08:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  408c0a:	e17a      	b.n	408f02 <tcp_receive+0xe3a>
        tcp_ack(pcb);
  408c0c:	687b      	ldr	r3, [r7, #4]
  408c0e:	7f9b      	ldrb	r3, [r3, #30]
  408c10:	f043 0301 	orr.w	r3, r3, #1
  408c14:	b2da      	uxtb	r2, r3
  408c16:	687b      	ldr	r3, [r7, #4]
  408c18:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  408c1a:	e172      	b.n	408f02 <tcp_receive+0xe3a>

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  408c1c:	6878      	ldr	r0, [r7, #4]
  408c1e:	4b4d      	ldr	r3, [pc, #308]	; (408d54 <tcp_receive+0xc8c>)
  408c20:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  408c22:	687b      	ldr	r3, [r7, #4]
  408c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408c26:	2b00      	cmp	r3, #0
  408c28:	d106      	bne.n	408c38 <tcp_receive+0xb70>
          pcb->ooseq = tcp_seg_copy(&inseg);
  408c2a:	484b      	ldr	r0, [pc, #300]	; (408d58 <tcp_receive+0xc90>)
  408c2c:	4b4b      	ldr	r3, [pc, #300]	; (408d5c <tcp_receive+0xc94>)
  408c2e:	4798      	blx	r3
  408c30:	4602      	mov	r2, r0
  408c32:	687b      	ldr	r3, [r7, #4]
  408c34:	675a      	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  408c36:	e164      	b.n	408f02 <tcp_receive+0xe3a>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  408c38:	2300      	movs	r3, #0
  408c3a:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  408c3c:	687b      	ldr	r3, [r7, #4]
  408c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  408c42:	e149      	b.n	408ed8 <tcp_receive+0xe10>
            if (seqno == next->tcphdr->seqno) {
  408c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408c46:	68db      	ldr	r3, [r3, #12]
  408c48:	685a      	ldr	r2, [r3, #4]
  408c4a:	4b45      	ldr	r3, [pc, #276]	; (408d60 <tcp_receive+0xc98>)
  408c4c:	681b      	ldr	r3, [r3, #0]
  408c4e:	429a      	cmp	r2, r3
  408c50:	d11d      	bne.n	408c8e <tcp_receive+0xbc6>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  408c52:	4b41      	ldr	r3, [pc, #260]	; (408d58 <tcp_receive+0xc90>)
  408c54:	891a      	ldrh	r2, [r3, #8]
  408c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408c58:	891b      	ldrh	r3, [r3, #8]
  408c5a:	429a      	cmp	r2, r3
  408c5c:	f240 8141 	bls.w	408ee2 <tcp_receive+0xe1a>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  408c60:	483d      	ldr	r0, [pc, #244]	; (408d58 <tcp_receive+0xc90>)
  408c62:	4b3e      	ldr	r3, [pc, #248]	; (408d5c <tcp_receive+0xc94>)
  408c64:	4798      	blx	r3
  408c66:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
  408c68:	68bb      	ldr	r3, [r7, #8]
  408c6a:	2b00      	cmp	r3, #0
  408c6c:	f000 813b 	beq.w	408ee6 <tcp_receive+0xe1e>
                  if (prev != NULL) {
  408c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408c72:	2b00      	cmp	r3, #0
  408c74:	d003      	beq.n	408c7e <tcp_receive+0xbb6>
                    prev->next = cseg;
  408c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408c78:	68ba      	ldr	r2, [r7, #8]
  408c7a:	601a      	str	r2, [r3, #0]
  408c7c:	e002      	b.n	408c84 <tcp_receive+0xbbc>
                  } else {
                    pcb->ooseq = cseg;
  408c7e:	687b      	ldr	r3, [r7, #4]
  408c80:	68ba      	ldr	r2, [r7, #8]
  408c82:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  408c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  408c86:	68b8      	ldr	r0, [r7, #8]
  408c88:	4b36      	ldr	r3, [pc, #216]	; (408d64 <tcp_receive+0xc9c>)
  408c8a:	4798      	blx	r3
                }
                break;
  408c8c:	e12b      	b.n	408ee6 <tcp_receive+0xe1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  408c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408c90:	2b00      	cmp	r3, #0
  408c92:	d117      	bne.n	408cc4 <tcp_receive+0xbfc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  408c94:	4b32      	ldr	r3, [pc, #200]	; (408d60 <tcp_receive+0xc98>)
  408c96:	681a      	ldr	r2, [r3, #0]
  408c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408c9a:	68db      	ldr	r3, [r3, #12]
  408c9c:	685b      	ldr	r3, [r3, #4]
  408c9e:	1ad3      	subs	r3, r2, r3
  408ca0:	2b00      	cmp	r3, #0
  408ca2:	da63      	bge.n	408d6c <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  408ca4:	482c      	ldr	r0, [pc, #176]	; (408d58 <tcp_receive+0xc90>)
  408ca6:	4b2d      	ldr	r3, [pc, #180]	; (408d5c <tcp_receive+0xc94>)
  408ca8:	4798      	blx	r3
  408caa:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  408cac:	68bb      	ldr	r3, [r7, #8]
  408cae:	2b00      	cmp	r3, #0
  408cb0:	f000 811b 	beq.w	408eea <tcp_receive+0xe22>
                    pcb->ooseq = cseg;
  408cb4:	687b      	ldr	r3, [r7, #4]
  408cb6:	68ba      	ldr	r2, [r7, #8]
  408cb8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  408cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  408cbc:	68b8      	ldr	r0, [r7, #8]
  408cbe:	4b29      	ldr	r3, [pc, #164]	; (408d64 <tcp_receive+0xc9c>)
  408cc0:	4798      	blx	r3
                  }
                  break;
  408cc2:	e112      	b.n	408eea <tcp_receive+0xe22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  408cc4:	4b26      	ldr	r3, [pc, #152]	; (408d60 <tcp_receive+0xc98>)
  408cc6:	681a      	ldr	r2, [r3, #0]
  408cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408cca:	68db      	ldr	r3, [r3, #12]
  408ccc:	685b      	ldr	r3, [r3, #4]
  408cce:	1ad3      	subs	r3, r2, r3
  408cd0:	3b01      	subs	r3, #1
  408cd2:	2b00      	cmp	r3, #0
  408cd4:	db4a      	blt.n	408d6c <tcp_receive+0xca4>
  408cd6:	4b22      	ldr	r3, [pc, #136]	; (408d60 <tcp_receive+0xc98>)
  408cd8:	681a      	ldr	r2, [r3, #0]
  408cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408cdc:	68db      	ldr	r3, [r3, #12]
  408cde:	685b      	ldr	r3, [r3, #4]
  408ce0:	1ad3      	subs	r3, r2, r3
  408ce2:	3301      	adds	r3, #1
  408ce4:	2b00      	cmp	r3, #0
  408ce6:	dc41      	bgt.n	408d6c <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  408ce8:	481b      	ldr	r0, [pc, #108]	; (408d58 <tcp_receive+0xc90>)
  408cea:	4b1c      	ldr	r3, [pc, #112]	; (408d5c <tcp_receive+0xc94>)
  408cec:	4798      	blx	r3
  408cee:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  408cf0:	68bb      	ldr	r3, [r7, #8]
  408cf2:	2b00      	cmp	r3, #0
  408cf4:	f000 80fb 	beq.w	408eee <tcp_receive+0xe26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  408cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408cfa:	68db      	ldr	r3, [r3, #12]
  408cfc:	685b      	ldr	r3, [r3, #4]
  408cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
  408d00:	8912      	ldrh	r2, [r2, #8]
  408d02:	441a      	add	r2, r3
  408d04:	4b16      	ldr	r3, [pc, #88]	; (408d60 <tcp_receive+0xc98>)
  408d06:	681b      	ldr	r3, [r3, #0]
  408d08:	1ad3      	subs	r3, r2, r3
  408d0a:	2b00      	cmp	r3, #0
  408d0c:	dd12      	ble.n	408d34 <tcp_receive+0xc6c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  408d0e:	4b14      	ldr	r3, [pc, #80]	; (408d60 <tcp_receive+0xc98>)
  408d10:	681b      	ldr	r3, [r3, #0]
  408d12:	b29a      	uxth	r2, r3
  408d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408d16:	68db      	ldr	r3, [r3, #12]
  408d18:	685b      	ldr	r3, [r3, #4]
  408d1a:	b29b      	uxth	r3, r3
  408d1c:	1ad3      	subs	r3, r2, r3
  408d1e:	b29a      	uxth	r2, r3
  408d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408d22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  408d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408d26:	685a      	ldr	r2, [r3, #4]
  408d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408d2a:	891b      	ldrh	r3, [r3, #8]
  408d2c:	4619      	mov	r1, r3
  408d2e:	4610      	mov	r0, r2
  408d30:	4b0d      	ldr	r3, [pc, #52]	; (408d68 <tcp_receive+0xca0>)
  408d32:	4798      	blx	r3
                    }
                    prev->next = cseg;
  408d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
  408d36:	68ba      	ldr	r2, [r7, #8]
  408d38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
  408d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  408d3c:	68b8      	ldr	r0, [r7, #8]
  408d3e:	4b09      	ldr	r3, [pc, #36]	; (408d64 <tcp_receive+0xc9c>)
  408d40:	4798      	blx	r3
                  }
                  break;
  408d42:	e0d4      	b.n	408eee <tcp_receive+0xe26>
  408d44:	2040207c 	.word	0x2040207c
  408d48:	00401e45 	.word	0x00401e45
  408d4c:	20402078 	.word	0x20402078
  408d50:	00406a99 	.word	0x00406a99
  408d54:	004099ed 	.word	0x004099ed
  408d58:	20402054 	.word	0x20402054
  408d5c:	00406ad1 	.word	0x00406ad1
  408d60:	2040206c 	.word	0x2040206c
  408d64:	00407fc9 	.word	0x00407fc9
  408d68:	00405869 	.word	0x00405869
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  408d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d6e:	681b      	ldr	r3, [r3, #0]
  408d70:	2b00      	cmp	r3, #0
  408d72:	f040 80ac 	bne.w	408ece <tcp_receive+0xe06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  408d76:	4b72      	ldr	r3, [pc, #456]	; (408f40 <tcp_receive+0xe78>)
  408d78:	681a      	ldr	r2, [r3, #0]
  408d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d7c:	68db      	ldr	r3, [r3, #12]
  408d7e:	685b      	ldr	r3, [r3, #4]
  408d80:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
  408d82:	2b00      	cmp	r3, #0
  408d84:	f340 80a3 	ble.w	408ece <tcp_receive+0xe06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  408d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d8a:	68db      	ldr	r3, [r3, #12]
  408d8c:	899b      	ldrh	r3, [r3, #12]
  408d8e:	b29b      	uxth	r3, r3
  408d90:	4618      	mov	r0, r3
  408d92:	4b6c      	ldr	r3, [pc, #432]	; (408f44 <tcp_receive+0xe7c>)
  408d94:	4798      	blx	r3
  408d96:	4603      	mov	r3, r0
  408d98:	f003 0301 	and.w	r3, r3, #1
  408d9c:	2b00      	cmp	r3, #0
  408d9e:	f040 80a8 	bne.w	408ef2 <tcp_receive+0xe2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  408da2:	4869      	ldr	r0, [pc, #420]	; (408f48 <tcp_receive+0xe80>)
  408da4:	4b69      	ldr	r3, [pc, #420]	; (408f4c <tcp_receive+0xe84>)
  408da6:	4798      	blx	r3
  408da8:	4602      	mov	r2, r0
  408daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408dac:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
  408dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408db0:	681b      	ldr	r3, [r3, #0]
  408db2:	2b00      	cmp	r3, #0
  408db4:	f000 809f 	beq.w	408ef6 <tcp_receive+0xe2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  408db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408dba:	68db      	ldr	r3, [r3, #12]
  408dbc:	685b      	ldr	r3, [r3, #4]
  408dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  408dc0:	8912      	ldrh	r2, [r2, #8]
  408dc2:	441a      	add	r2, r3
  408dc4:	4b5e      	ldr	r3, [pc, #376]	; (408f40 <tcp_receive+0xe78>)
  408dc6:	681b      	ldr	r3, [r3, #0]
  408dc8:	1ad3      	subs	r3, r2, r3
  408dca:	2b00      	cmp	r3, #0
  408dcc:	dd12      	ble.n	408df4 <tcp_receive+0xd2c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  408dce:	4b5c      	ldr	r3, [pc, #368]	; (408f40 <tcp_receive+0xe78>)
  408dd0:	681b      	ldr	r3, [r3, #0]
  408dd2:	b29a      	uxth	r2, r3
  408dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408dd6:	68db      	ldr	r3, [r3, #12]
  408dd8:	685b      	ldr	r3, [r3, #4]
  408dda:	b29b      	uxth	r3, r3
  408ddc:	1ad3      	subs	r3, r2, r3
  408dde:	b29a      	uxth	r2, r3
  408de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408de2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  408de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408de6:	685a      	ldr	r2, [r3, #4]
  408de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408dea:	891b      	ldrh	r3, [r3, #8]
  408dec:	4619      	mov	r1, r3
  408dee:	4610      	mov	r0, r2
  408df0:	4b57      	ldr	r3, [pc, #348]	; (408f50 <tcp_receive+0xe88>)
  408df2:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  408df4:	4b57      	ldr	r3, [pc, #348]	; (408f54 <tcp_receive+0xe8c>)
  408df6:	881b      	ldrh	r3, [r3, #0]
  408df8:	461a      	mov	r2, r3
  408dfa:	4b51      	ldr	r3, [pc, #324]	; (408f40 <tcp_receive+0xe78>)
  408dfc:	681b      	ldr	r3, [r3, #0]
  408dfe:	441a      	add	r2, r3
  408e00:	687b      	ldr	r3, [r7, #4]
  408e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408e04:	6879      	ldr	r1, [r7, #4]
  408e06:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408e08:	440b      	add	r3, r1
  408e0a:	429a      	cmp	r2, r3
  408e0c:	d973      	bls.n	408ef6 <tcp_receive+0xe2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  408e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e10:	681b      	ldr	r3, [r3, #0]
  408e12:	68db      	ldr	r3, [r3, #12]
  408e14:	899b      	ldrh	r3, [r3, #12]
  408e16:	b29b      	uxth	r3, r3
  408e18:	4618      	mov	r0, r3
  408e1a:	4b4a      	ldr	r3, [pc, #296]	; (408f44 <tcp_receive+0xe7c>)
  408e1c:	4798      	blx	r3
  408e1e:	4603      	mov	r3, r0
  408e20:	f003 0301 	and.w	r3, r3, #1
  408e24:	2b00      	cmp	r3, #0
  408e26:	d020      	beq.n	408e6a <tcp_receive+0xda2>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  408e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e2a:	681b      	ldr	r3, [r3, #0]
  408e2c:	68dc      	ldr	r4, [r3, #12]
  408e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e30:	681b      	ldr	r3, [r3, #0]
  408e32:	68db      	ldr	r3, [r3, #12]
  408e34:	899b      	ldrh	r3, [r3, #12]
  408e36:	b29b      	uxth	r3, r3
  408e38:	b21b      	sxth	r3, r3
  408e3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  408e3e:	b21d      	sxth	r5, r3
  408e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e42:	681b      	ldr	r3, [r3, #0]
  408e44:	68db      	ldr	r3, [r3, #12]
  408e46:	899b      	ldrh	r3, [r3, #12]
  408e48:	b29b      	uxth	r3, r3
  408e4a:	4618      	mov	r0, r3
  408e4c:	4b3d      	ldr	r3, [pc, #244]	; (408f44 <tcp_receive+0xe7c>)
  408e4e:	4798      	blx	r3
  408e50:	4603      	mov	r3, r0
  408e52:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  408e56:	b29b      	uxth	r3, r3
  408e58:	4618      	mov	r0, r3
  408e5a:	4b3f      	ldr	r3, [pc, #252]	; (408f58 <tcp_receive+0xe90>)
  408e5c:	4798      	blx	r3
  408e5e:	4603      	mov	r3, r0
  408e60:	b21b      	sxth	r3, r3
  408e62:	432b      	orrs	r3, r5
  408e64:	b21b      	sxth	r3, r3
  408e66:	b29b      	uxth	r3, r3
  408e68:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  408e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e6c:	681b      	ldr	r3, [r3, #0]
  408e6e:	687a      	ldr	r2, [r7, #4]
  408e70:	6a92      	ldr	r2, [r2, #40]	; 0x28
  408e72:	b291      	uxth	r1, r2
  408e74:	687a      	ldr	r2, [r7, #4]
  408e76:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  408e78:	440a      	add	r2, r1
  408e7a:	b291      	uxth	r1, r2
  408e7c:	4a30      	ldr	r2, [pc, #192]	; (408f40 <tcp_receive+0xe78>)
  408e7e:	6812      	ldr	r2, [r2, #0]
  408e80:	b292      	uxth	r2, r2
  408e82:	1a8a      	subs	r2, r1, r2
  408e84:	b292      	uxth	r2, r2
  408e86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  408e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e8a:	681b      	ldr	r3, [r3, #0]
  408e8c:	685a      	ldr	r2, [r3, #4]
  408e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e90:	681b      	ldr	r3, [r3, #0]
  408e92:	891b      	ldrh	r3, [r3, #8]
  408e94:	4619      	mov	r1, r3
  408e96:	4610      	mov	r0, r2
  408e98:	4b2d      	ldr	r3, [pc, #180]	; (408f50 <tcp_receive+0xe88>)
  408e9a:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  408e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408e9e:	681b      	ldr	r3, [r3, #0]
  408ea0:	891c      	ldrh	r4, [r3, #8]
  408ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ea4:	681b      	ldr	r3, [r3, #0]
  408ea6:	68db      	ldr	r3, [r3, #12]
  408ea8:	899b      	ldrh	r3, [r3, #12]
  408eaa:	b29b      	uxth	r3, r3
  408eac:	4618      	mov	r0, r3
  408eae:	4b25      	ldr	r3, [pc, #148]	; (408f44 <tcp_receive+0xe7c>)
  408eb0:	4798      	blx	r3
  408eb2:	4603      	mov	r3, r0
  408eb4:	f003 0303 	and.w	r3, r3, #3
  408eb8:	2b00      	cmp	r3, #0
  408eba:	bf14      	ite	ne
  408ebc:	2301      	movne	r3, #1
  408ebe:	2300      	moveq	r3, #0
  408ec0:	b2db      	uxtb	r3, r3
  408ec2:	b29b      	uxth	r3, r3
  408ec4:	4423      	add	r3, r4
  408ec6:	b29a      	uxth	r2, r3
  408ec8:	4b22      	ldr	r3, [pc, #136]	; (408f54 <tcp_receive+0xe8c>)
  408eca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  408ecc:	e013      	b.n	408ef6 <tcp_receive+0xe2e>
              }
            }
            prev = next;
  408ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ed0:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  408ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ed4:	681b      	ldr	r3, [r3, #0]
  408ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  408ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408eda:	2b00      	cmp	r3, #0
  408edc:	f47f aeb2 	bne.w	408c44 <tcp_receive+0xb7c>
      if (pcb->rcv_nxt == seqno) {
  408ee0:	e00f      	b.n	408f02 <tcp_receive+0xe3a>
                break;
  408ee2:	bf00      	nop
  408ee4:	e00d      	b.n	408f02 <tcp_receive+0xe3a>
                break;
  408ee6:	bf00      	nop
  408ee8:	e00b      	b.n	408f02 <tcp_receive+0xe3a>
                  break;
  408eea:	bf00      	nop
  408eec:	e009      	b.n	408f02 <tcp_receive+0xe3a>
                  break;
  408eee:	bf00      	nop
  408ef0:	e007      	b.n	408f02 <tcp_receive+0xe3a>
                  break;
  408ef2:	bf00      	nop
  408ef4:	e005      	b.n	408f02 <tcp_receive+0xe3a>
                break;
  408ef6:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
  408ef8:	e003      	b.n	408f02 <tcp_receive+0xe3a>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
  408efa:	6878      	ldr	r0, [r7, #4]
  408efc:	4b17      	ldr	r3, [pc, #92]	; (408f5c <tcp_receive+0xe94>)
  408efe:	4798      	blx	r3
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  408f00:	e01a      	b.n	408f38 <tcp_receive+0xe70>
  408f02:	e019      	b.n	408f38 <tcp_receive+0xe70>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  408f04:	4b0e      	ldr	r3, [pc, #56]	; (408f40 <tcp_receive+0xe78>)
  408f06:	681a      	ldr	r2, [r3, #0]
  408f08:	687b      	ldr	r3, [r7, #4]
  408f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408f0c:	1ad3      	subs	r3, r2, r3
  408f0e:	2b00      	cmp	r3, #0
  408f10:	db0a      	blt.n	408f28 <tcp_receive+0xe60>
  408f12:	4b0b      	ldr	r3, [pc, #44]	; (408f40 <tcp_receive+0xe78>)
  408f14:	681a      	ldr	r2, [r3, #0]
  408f16:	687b      	ldr	r3, [r7, #4]
  408f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408f1a:	6879      	ldr	r1, [r7, #4]
  408f1c:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408f1e:	440b      	add	r3, r1
  408f20:	1ad3      	subs	r3, r2, r3
  408f22:	3301      	adds	r3, #1
  408f24:	2b00      	cmp	r3, #0
  408f26:	dd07      	ble.n	408f38 <tcp_receive+0xe70>
      tcp_ack_now(pcb);
  408f28:	687b      	ldr	r3, [r7, #4]
  408f2a:	7f9b      	ldrb	r3, [r3, #30]
  408f2c:	f043 0302 	orr.w	r3, r3, #2
  408f30:	b2da      	uxtb	r2, r3
  408f32:	687b      	ldr	r3, [r7, #4]
  408f34:	779a      	strb	r2, [r3, #30]
    }
  }
}
  408f36:	e7ff      	b.n	408f38 <tcp_receive+0xe70>
  408f38:	bf00      	nop
  408f3a:	3734      	adds	r7, #52	; 0x34
  408f3c:	46bd      	mov	sp, r7
  408f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408f40:	2040206c 	.word	0x2040206c
  408f44:	00401e45 	.word	0x00401e45
  408f48:	20402054 	.word	0x20402054
  408f4c:	00406ad1 	.word	0x00406ad1
  408f50:	00405869 	.word	0x00405869
  408f54:	20402076 	.word	0x20402076
  408f58:	00401e19 	.word	0x00401e19
  408f5c:	004099ed 	.word	0x004099ed

00408f60 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  408f60:	b580      	push	{r7, lr}
  408f62:	b086      	sub	sp, #24
  408f64:	af00      	add	r7, sp, #0
  408f66:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  408f68:	4b3e      	ldr	r3, [pc, #248]	; (409064 <tcp_parseopt+0x104>)
  408f6a:	681b      	ldr	r3, [r3, #0]
  408f6c:	3314      	adds	r3, #20
  408f6e:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  408f70:	4b3c      	ldr	r3, [pc, #240]	; (409064 <tcp_parseopt+0x104>)
  408f72:	681b      	ldr	r3, [r3, #0]
  408f74:	899b      	ldrh	r3, [r3, #12]
  408f76:	b29b      	uxth	r3, r3
  408f78:	4618      	mov	r0, r3
  408f7a:	4b3b      	ldr	r3, [pc, #236]	; (409068 <tcp_parseopt+0x108>)
  408f7c:	4798      	blx	r3
  408f7e:	4603      	mov	r3, r0
  408f80:	0b1b      	lsrs	r3, r3, #12
  408f82:	b29b      	uxth	r3, r3
  408f84:	2b05      	cmp	r3, #5
  408f86:	d969      	bls.n	40905c <tcp_parseopt+0xfc>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  408f88:	4b36      	ldr	r3, [pc, #216]	; (409064 <tcp_parseopt+0x104>)
  408f8a:	681b      	ldr	r3, [r3, #0]
  408f8c:	899b      	ldrh	r3, [r3, #12]
  408f8e:	b29b      	uxth	r3, r3
  408f90:	4618      	mov	r0, r3
  408f92:	4b35      	ldr	r3, [pc, #212]	; (409068 <tcp_parseopt+0x108>)
  408f94:	4798      	blx	r3
  408f96:	4603      	mov	r3, r0
  408f98:	0b1b      	lsrs	r3, r3, #12
  408f9a:	b29b      	uxth	r3, r3
  408f9c:	3b05      	subs	r3, #5
  408f9e:	b29b      	uxth	r3, r3
  408fa0:	009b      	lsls	r3, r3, #2
  408fa2:	81fb      	strh	r3, [r7, #14]
    for (c = 0; c < max_c; ) {
  408fa4:	2300      	movs	r3, #0
  408fa6:	82fb      	strh	r3, [r7, #22]
  408fa8:	e04e      	b.n	409048 <tcp_parseopt+0xe8>
      opt = opts[c];
  408faa:	8afb      	ldrh	r3, [r7, #22]
  408fac:	693a      	ldr	r2, [r7, #16]
  408fae:	4413      	add	r3, r2
  408fb0:	781b      	ldrb	r3, [r3, #0]
  408fb2:	737b      	strb	r3, [r7, #13]
      switch (opt) {
  408fb4:	7b7b      	ldrb	r3, [r7, #13]
  408fb6:	2b01      	cmp	r3, #1
  408fb8:	d004      	beq.n	408fc4 <tcp_parseopt+0x64>
  408fba:	2b02      	cmp	r3, #2
  408fbc:	d006      	beq.n	408fcc <tcp_parseopt+0x6c>
  408fbe:	2b00      	cmp	r3, #0
  408fc0:	d047      	beq.n	409052 <tcp_parseopt+0xf2>
  408fc2:	e031      	b.n	409028 <tcp_parseopt+0xc8>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
  408fc4:	8afb      	ldrh	r3, [r7, #22]
  408fc6:	3301      	adds	r3, #1
  408fc8:	82fb      	strh	r3, [r7, #22]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
  408fca:	e03d      	b.n	409048 <tcp_parseopt+0xe8>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  408fcc:	8afb      	ldrh	r3, [r7, #22]
  408fce:	3301      	adds	r3, #1
  408fd0:	693a      	ldr	r2, [r7, #16]
  408fd2:	4413      	add	r3, r2
  408fd4:	781b      	ldrb	r3, [r3, #0]
  408fd6:	2b04      	cmp	r3, #4
  408fd8:	d13d      	bne.n	409056 <tcp_parseopt+0xf6>
  408fda:	8afb      	ldrh	r3, [r7, #22]
  408fdc:	1d1a      	adds	r2, r3, #4
  408fde:	89fb      	ldrh	r3, [r7, #14]
  408fe0:	429a      	cmp	r2, r3
  408fe2:	dc38      	bgt.n	409056 <tcp_parseopt+0xf6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  408fe4:	8afb      	ldrh	r3, [r7, #22]
  408fe6:	3302      	adds	r3, #2
  408fe8:	693a      	ldr	r2, [r7, #16]
  408fea:	4413      	add	r3, r2
  408fec:	781b      	ldrb	r3, [r3, #0]
  408fee:	021b      	lsls	r3, r3, #8
  408ff0:	b21a      	sxth	r2, r3
  408ff2:	8afb      	ldrh	r3, [r7, #22]
  408ff4:	3303      	adds	r3, #3
  408ff6:	6939      	ldr	r1, [r7, #16]
  408ff8:	440b      	add	r3, r1
  408ffa:	781b      	ldrb	r3, [r3, #0]
  408ffc:	b21b      	sxth	r3, r3
  408ffe:	4313      	orrs	r3, r2
  409000:	b21b      	sxth	r3, r3
  409002:	817b      	strh	r3, [r7, #10]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  409004:	897b      	ldrh	r3, [r7, #10]
  409006:	f240 52b4 	movw	r2, #1460	; 0x5b4
  40900a:	4293      	cmp	r3, r2
  40900c:	d804      	bhi.n	409018 <tcp_parseopt+0xb8>
  40900e:	897b      	ldrh	r3, [r7, #10]
  409010:	2b00      	cmp	r3, #0
  409012:	d001      	beq.n	409018 <tcp_parseopt+0xb8>
  409014:	897a      	ldrh	r2, [r7, #10]
  409016:	e001      	b.n	40901c <tcp_parseopt+0xbc>
  409018:	f240 52b4 	movw	r2, #1460	; 0x5b4
  40901c:	687b      	ldr	r3, [r7, #4]
  40901e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
  409020:	8afb      	ldrh	r3, [r7, #22]
  409022:	3304      	adds	r3, #4
  409024:	82fb      	strh	r3, [r7, #22]
        break;
  409026:	e00f      	b.n	409048 <tcp_parseopt+0xe8>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  409028:	8afb      	ldrh	r3, [r7, #22]
  40902a:	3301      	adds	r3, #1
  40902c:	693a      	ldr	r2, [r7, #16]
  40902e:	4413      	add	r3, r2
  409030:	781b      	ldrb	r3, [r3, #0]
  409032:	2b00      	cmp	r3, #0
  409034:	d011      	beq.n	40905a <tcp_parseopt+0xfa>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  409036:	8afb      	ldrh	r3, [r7, #22]
  409038:	3301      	adds	r3, #1
  40903a:	693a      	ldr	r2, [r7, #16]
  40903c:	4413      	add	r3, r2
  40903e:	781b      	ldrb	r3, [r3, #0]
  409040:	b29a      	uxth	r2, r3
  409042:	8afb      	ldrh	r3, [r7, #22]
  409044:	4413      	add	r3, r2
  409046:	82fb      	strh	r3, [r7, #22]
    for (c = 0; c < max_c; ) {
  409048:	8afa      	ldrh	r2, [r7, #22]
  40904a:	89fb      	ldrh	r3, [r7, #14]
  40904c:	429a      	cmp	r2, r3
  40904e:	d3ac      	bcc.n	408faa <tcp_parseopt+0x4a>
  409050:	e004      	b.n	40905c <tcp_parseopt+0xfc>
        return;
  409052:	bf00      	nop
  409054:	e002      	b.n	40905c <tcp_parseopt+0xfc>
          return;
  409056:	bf00      	nop
  409058:	e000      	b.n	40905c <tcp_parseopt+0xfc>
          return;
  40905a:	bf00      	nop
      }
    }
  }
}
  40905c:	3718      	adds	r7, #24
  40905e:	46bd      	mov	sp, r7
  409060:	bd80      	pop	{r7, pc}
  409062:	bf00      	nop
  409064:	20402064 	.word	0x20402064
  409068:	00401e45 	.word	0x00401e45

0040906c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  40906c:	b580      	push	{r7, lr}
  40906e:	b086      	sub	sp, #24
  409070:	af00      	add	r7, sp, #0
  409072:	60f8      	str	r0, [r7, #12]
  409074:	607b      	str	r3, [r7, #4]
  409076:	460b      	mov	r3, r1
  409078:	817b      	strh	r3, [r7, #10]
  40907a:	4613      	mov	r3, r2
  40907c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  40907e:	897a      	ldrh	r2, [r7, #10]
  409080:	893b      	ldrh	r3, [r7, #8]
  409082:	4413      	add	r3, r2
  409084:	b29b      	uxth	r3, r3
  409086:	3314      	adds	r3, #20
  409088:	b29b      	uxth	r3, r3
  40908a:	2200      	movs	r2, #0
  40908c:	4619      	mov	r1, r3
  40908e:	2001      	movs	r0, #1
  409090:	4b2a      	ldr	r3, [pc, #168]	; (40913c <tcp_output_alloc_header+0xd0>)
  409092:	4798      	blx	r3
  409094:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
  409096:	697b      	ldr	r3, [r7, #20]
  409098:	2b00      	cmp	r3, #0
  40909a:	d04a      	beq.n	409132 <tcp_output_alloc_header+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  40909c:	697b      	ldr	r3, [r7, #20]
  40909e:	685b      	ldr	r3, [r3, #4]
  4090a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
  4090a2:	68fb      	ldr	r3, [r7, #12]
  4090a4:	8b5b      	ldrh	r3, [r3, #26]
  4090a6:	4618      	mov	r0, r3
  4090a8:	4b25      	ldr	r3, [pc, #148]	; (409140 <tcp_output_alloc_header+0xd4>)
  4090aa:	4798      	blx	r3
  4090ac:	4603      	mov	r3, r0
  4090ae:	461a      	mov	r2, r3
  4090b0:	693b      	ldr	r3, [r7, #16]
  4090b2:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = htons(pcb->remote_port);
  4090b4:	68fb      	ldr	r3, [r7, #12]
  4090b6:	8b9b      	ldrh	r3, [r3, #28]
  4090b8:	4618      	mov	r0, r3
  4090ba:	4b21      	ldr	r3, [pc, #132]	; (409140 <tcp_output_alloc_header+0xd4>)
  4090bc:	4798      	blx	r3
  4090be:	4603      	mov	r3, r0
  4090c0:	461a      	mov	r2, r3
  4090c2:	693b      	ldr	r3, [r7, #16]
  4090c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  4090c6:	693b      	ldr	r3, [r7, #16]
  4090c8:	687a      	ldr	r2, [r7, #4]
  4090ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  4090cc:	68fb      	ldr	r3, [r7, #12]
  4090ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4090d0:	4618      	mov	r0, r3
  4090d2:	4b1c      	ldr	r3, [pc, #112]	; (409144 <tcp_output_alloc_header+0xd8>)
  4090d4:	4798      	blx	r3
  4090d6:	4602      	mov	r2, r0
  4090d8:	693b      	ldr	r3, [r7, #16]
  4090da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  4090dc:	897b      	ldrh	r3, [r7, #10]
  4090de:	089b      	lsrs	r3, r3, #2
  4090e0:	b29b      	uxth	r3, r3
  4090e2:	3305      	adds	r3, #5
  4090e4:	b29b      	uxth	r3, r3
  4090e6:	031b      	lsls	r3, r3, #12
  4090e8:	b29b      	uxth	r3, r3
  4090ea:	f043 0310 	orr.w	r3, r3, #16
  4090ee:	b29b      	uxth	r3, r3
  4090f0:	4618      	mov	r0, r3
  4090f2:	4b13      	ldr	r3, [pc, #76]	; (409140 <tcp_output_alloc_header+0xd4>)
  4090f4:	4798      	blx	r3
  4090f6:	4603      	mov	r3, r0
  4090f8:	461a      	mov	r2, r3
  4090fa:	693b      	ldr	r3, [r7, #16]
  4090fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4090fe:	68fb      	ldr	r3, [r7, #12]
  409100:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  409102:	4618      	mov	r0, r3
  409104:	4b0e      	ldr	r3, [pc, #56]	; (409140 <tcp_output_alloc_header+0xd4>)
  409106:	4798      	blx	r3
  409108:	4603      	mov	r3, r0
  40910a:	461a      	mov	r2, r3
  40910c:	693b      	ldr	r3, [r7, #16]
  40910e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  409110:	693b      	ldr	r3, [r7, #16]
  409112:	2200      	movs	r2, #0
  409114:	741a      	strb	r2, [r3, #16]
  409116:	2200      	movs	r2, #0
  409118:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  40911a:	693b      	ldr	r3, [r7, #16]
  40911c:	2200      	movs	r2, #0
  40911e:	749a      	strb	r2, [r3, #18]
  409120:	2200      	movs	r2, #0
  409122:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  409124:	68fb      	ldr	r3, [r7, #12]
  409126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409128:	68fa      	ldr	r2, [r7, #12]
  40912a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  40912c:	441a      	add	r2, r3
  40912e:	68fb      	ldr	r3, [r7, #12]
  409130:	631a      	str	r2, [r3, #48]	; 0x30
  }
  return p;
  409132:	697b      	ldr	r3, [r7, #20]
}
  409134:	4618      	mov	r0, r3
  409136:	3718      	adds	r7, #24
  409138:	46bd      	mov	sp, r7
  40913a:	bd80      	pop	{r7, pc}
  40913c:	0040565d 	.word	0x0040565d
  409140:	00401e19 	.word	0x00401e19
  409144:	00401e65 	.word	0x00401e65

00409148 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  409148:	b5b0      	push	{r4, r5, r7, lr}
  40914a:	b084      	sub	sp, #16
  40914c:	af00      	add	r7, sp, #0
  40914e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  409150:	687b      	ldr	r3, [r7, #4]
  409152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409154:	2b00      	cmp	r3, #0
  409156:	d02c      	beq.n	4091b2 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409158:	687b      	ldr	r3, [r7, #4]
  40915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40915c:	60fb      	str	r3, [r7, #12]
  40915e:	e002      	b.n	409166 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
  409160:	68fb      	ldr	r3, [r7, #12]
  409162:	681b      	ldr	r3, [r3, #0]
  409164:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409166:	68fb      	ldr	r3, [r7, #12]
  409168:	681b      	ldr	r3, [r3, #0]
  40916a:	2b00      	cmp	r3, #0
  40916c:	d1f8      	bne.n	409160 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  40916e:	68fb      	ldr	r3, [r7, #12]
  409170:	68db      	ldr	r3, [r3, #12]
  409172:	899b      	ldrh	r3, [r3, #12]
  409174:	b29b      	uxth	r3, r3
  409176:	4618      	mov	r0, r3
  409178:	4b12      	ldr	r3, [pc, #72]	; (4091c4 <tcp_send_fin+0x7c>)
  40917a:	4798      	blx	r3
  40917c:	4603      	mov	r3, r0
  40917e:	f003 0307 	and.w	r3, r3, #7
  409182:	2b00      	cmp	r3, #0
  409184:	d115      	bne.n	4091b2 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  409186:	68fb      	ldr	r3, [r7, #12]
  409188:	68dc      	ldr	r4, [r3, #12]
  40918a:	68fb      	ldr	r3, [r7, #12]
  40918c:	68db      	ldr	r3, [r3, #12]
  40918e:	899b      	ldrh	r3, [r3, #12]
  409190:	b29d      	uxth	r5, r3
  409192:	2001      	movs	r0, #1
  409194:	4b0c      	ldr	r3, [pc, #48]	; (4091c8 <tcp_send_fin+0x80>)
  409196:	4798      	blx	r3
  409198:	4603      	mov	r3, r0
  40919a:	432b      	orrs	r3, r5
  40919c:	b29b      	uxth	r3, r3
  40919e:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
  4091a0:	687b      	ldr	r3, [r7, #4]
  4091a2:	7f9b      	ldrb	r3, [r3, #30]
  4091a4:	f043 0320 	orr.w	r3, r3, #32
  4091a8:	b2da      	uxtb	r2, r3
  4091aa:	687b      	ldr	r3, [r7, #4]
  4091ac:	779a      	strb	r2, [r3, #30]
      return ERR_OK;
  4091ae:	2300      	movs	r3, #0
  4091b0:	e004      	b.n	4091bc <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  4091b2:	2101      	movs	r1, #1
  4091b4:	6878      	ldr	r0, [r7, #4]
  4091b6:	4b05      	ldr	r3, [pc, #20]	; (4091cc <tcp_send_fin+0x84>)
  4091b8:	4798      	blx	r3
  4091ba:	4603      	mov	r3, r0
}
  4091bc:	4618      	mov	r0, r3
  4091be:	3710      	adds	r7, #16
  4091c0:	46bd      	mov	sp, r7
  4091c2:	bdb0      	pop	{r4, r5, r7, pc}
  4091c4:	00401e45 	.word	0x00401e45
  4091c8:	00401e19 	.word	0x00401e19
  4091cc:	00409861 	.word	0x00409861

004091d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  4091d0:	b590      	push	{r4, r7, lr}
  4091d2:	b087      	sub	sp, #28
  4091d4:	af00      	add	r7, sp, #0
  4091d6:	60f8      	str	r0, [r7, #12]
  4091d8:	60b9      	str	r1, [r7, #8]
  4091da:	603b      	str	r3, [r7, #0]
  4091dc:	4613      	mov	r3, r2
  4091de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  4091e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4091e4:	f003 0301 	and.w	r3, r3, #1
  4091e8:	2b00      	cmp	r3, #0
  4091ea:	d001      	beq.n	4091f0 <tcp_create_segment+0x20>
  4091ec:	2204      	movs	r2, #4
  4091ee:	e000      	b.n	4091f2 <tcp_create_segment+0x22>
  4091f0:	2200      	movs	r2, #0
  4091f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4091f6:	f003 0302 	and.w	r3, r3, #2
  4091fa:	2b00      	cmp	r3, #0
  4091fc:	d001      	beq.n	409202 <tcp_create_segment+0x32>
  4091fe:	230c      	movs	r3, #12
  409200:	e000      	b.n	409204 <tcp_create_segment+0x34>
  409202:	2300      	movs	r3, #0
  409204:	4413      	add	r3, r2
  409206:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  409208:	2003      	movs	r0, #3
  40920a:	4b32      	ldr	r3, [pc, #200]	; (4092d4 <tcp_create_segment+0x104>)
  40920c:	4798      	blx	r3
  40920e:	6138      	str	r0, [r7, #16]
  409210:	693b      	ldr	r3, [r7, #16]
  409212:	2b00      	cmp	r3, #0
  409214:	d104      	bne.n	409220 <tcp_create_segment+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  409216:	68b8      	ldr	r0, [r7, #8]
  409218:	4b2f      	ldr	r3, [pc, #188]	; (4092d8 <tcp_create_segment+0x108>)
  40921a:	4798      	blx	r3
    return NULL;
  40921c:	2300      	movs	r3, #0
  40921e:	e054      	b.n	4092ca <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
  409220:	693b      	ldr	r3, [r7, #16]
  409222:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  409226:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
  409228:	693b      	ldr	r3, [r7, #16]
  40922a:	2200      	movs	r2, #0
  40922c:	601a      	str	r2, [r3, #0]
  seg->p = p;
  40922e:	693b      	ldr	r3, [r7, #16]
  409230:	68ba      	ldr	r2, [r7, #8]
  409232:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
  409234:	68bb      	ldr	r3, [r7, #8]
  409236:	891a      	ldrh	r2, [r3, #8]
  409238:	7dfb      	ldrb	r3, [r7, #23]
  40923a:	b29b      	uxth	r3, r3
  40923c:	1ad3      	subs	r3, r2, r3
  40923e:	b29a      	uxth	r2, r3
  409240:	693b      	ldr	r3, [r7, #16]
  409242:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  409244:	2114      	movs	r1, #20
  409246:	68b8      	ldr	r0, [r7, #8]
  409248:	4b24      	ldr	r3, [pc, #144]	; (4092dc <tcp_create_segment+0x10c>)
  40924a:	4798      	blx	r3
  40924c:	4603      	mov	r3, r0
  40924e:	2b00      	cmp	r3, #0
  409250:	d004      	beq.n	40925c <tcp_create_segment+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
  409252:	6938      	ldr	r0, [r7, #16]
  409254:	4b22      	ldr	r3, [pc, #136]	; (4092e0 <tcp_create_segment+0x110>)
  409256:	4798      	blx	r3
    return NULL;
  409258:	2300      	movs	r3, #0
  40925a:	e036      	b.n	4092ca <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  40925c:	693b      	ldr	r3, [r7, #16]
  40925e:	685b      	ldr	r3, [r3, #4]
  409260:	685a      	ldr	r2, [r3, #4]
  409262:	693b      	ldr	r3, [r7, #16]
  409264:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  409266:	693b      	ldr	r3, [r7, #16]
  409268:	68dc      	ldr	r4, [r3, #12]
  40926a:	68fb      	ldr	r3, [r7, #12]
  40926c:	8b5b      	ldrh	r3, [r3, #26]
  40926e:	4618      	mov	r0, r3
  409270:	4b1c      	ldr	r3, [pc, #112]	; (4092e4 <tcp_create_segment+0x114>)
  409272:	4798      	blx	r3
  409274:	4603      	mov	r3, r0
  409276:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
  409278:	693b      	ldr	r3, [r7, #16]
  40927a:	68dc      	ldr	r4, [r3, #12]
  40927c:	68fb      	ldr	r3, [r7, #12]
  40927e:	8b9b      	ldrh	r3, [r3, #28]
  409280:	4618      	mov	r0, r3
  409282:	4b18      	ldr	r3, [pc, #96]	; (4092e4 <tcp_create_segment+0x114>)
  409284:	4798      	blx	r3
  409286:	4603      	mov	r3, r0
  409288:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = htonl(seqno);
  40928a:	693b      	ldr	r3, [r7, #16]
  40928c:	68dc      	ldr	r4, [r3, #12]
  40928e:	6838      	ldr	r0, [r7, #0]
  409290:	4b15      	ldr	r3, [pc, #84]	; (4092e8 <tcp_create_segment+0x118>)
  409292:	4798      	blx	r3
  409294:	4603      	mov	r3, r0
  409296:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  409298:	693b      	ldr	r3, [r7, #16]
  40929a:	68dc      	ldr	r4, [r3, #12]
  40929c:	7dfb      	ldrb	r3, [r7, #23]
  40929e:	089b      	lsrs	r3, r3, #2
  4092a0:	b2db      	uxtb	r3, r3
  4092a2:	3305      	adds	r3, #5
  4092a4:	031b      	lsls	r3, r3, #12
  4092a6:	b21a      	sxth	r2, r3
  4092a8:	79fb      	ldrb	r3, [r7, #7]
  4092aa:	b21b      	sxth	r3, r3
  4092ac:	4313      	orrs	r3, r2
  4092ae:	b21b      	sxth	r3, r3
  4092b0:	b29b      	uxth	r3, r3
  4092b2:	4618      	mov	r0, r3
  4092b4:	4b0b      	ldr	r3, [pc, #44]	; (4092e4 <tcp_create_segment+0x114>)
  4092b6:	4798      	blx	r3
  4092b8:	4603      	mov	r3, r0
  4092ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  4092bc:	693b      	ldr	r3, [r7, #16]
  4092be:	68db      	ldr	r3, [r3, #12]
  4092c0:	2200      	movs	r2, #0
  4092c2:	749a      	strb	r2, [r3, #18]
  4092c4:	2200      	movs	r2, #0
  4092c6:	74da      	strb	r2, [r3, #19]
  return seg;
  4092c8:	693b      	ldr	r3, [r7, #16]
} 
  4092ca:	4618      	mov	r0, r3
  4092cc:	371c      	adds	r7, #28
  4092ce:	46bd      	mov	sp, r7
  4092d0:	bd90      	pop	{r4, r7, pc}
  4092d2:	bf00      	nop
  4092d4:	00405325 	.word	0x00405325
  4092d8:	00405a01 	.word	0x00405a01
  4092dc:	00405925 	.word	0x00405925
  4092e0:	00406a99 	.word	0x00406a99
  4092e4:	00401e19 	.word	0x00401e19
  4092e8:	00401e65 	.word	0x00401e65

004092ec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  4092ec:	b580      	push	{r7, lr}
  4092ee:	b086      	sub	sp, #24
  4092f0:	af00      	add	r7, sp, #0
  4092f2:	607b      	str	r3, [r7, #4]
  4092f4:	4603      	mov	r3, r0
  4092f6:	73fb      	strb	r3, [r7, #15]
  4092f8:	460b      	mov	r3, r1
  4092fa:	81bb      	strh	r3, [r7, #12]
  4092fc:	4613      	mov	r3, r2
  4092fe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
  409300:	89bb      	ldrh	r3, [r7, #12]
  409302:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(max_length);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
  409304:	897b      	ldrh	r3, [r7, #10]
  409306:	82fb      	strh	r3, [r7, #22]
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  409308:	8af9      	ldrh	r1, [r7, #22]
  40930a:	7bfb      	ldrb	r3, [r7, #15]
  40930c:	2200      	movs	r2, #0
  40930e:	4618      	mov	r0, r3
  409310:	4b0d      	ldr	r3, [pc, #52]	; (409348 <tcp_pbuf_prealloc+0x5c>)
  409312:	4798      	blx	r3
  409314:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  409316:	693b      	ldr	r3, [r7, #16]
  409318:	2b00      	cmp	r3, #0
  40931a:	d101      	bne.n	409320 <tcp_pbuf_prealloc+0x34>
    return NULL;
  40931c:	2300      	movs	r3, #0
  40931e:	e00e      	b.n	40933e <tcp_pbuf_prealloc+0x52>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  409320:	693b      	ldr	r3, [r7, #16]
  409322:	895a      	ldrh	r2, [r3, #10]
  409324:	89bb      	ldrh	r3, [r7, #12]
  409326:	1ad3      	subs	r3, r2, r3
  409328:	b29a      	uxth	r2, r3
  40932a:	687b      	ldr	r3, [r7, #4]
  40932c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  40932e:	693b      	ldr	r3, [r7, #16]
  409330:	89ba      	ldrh	r2, [r7, #12]
  409332:	811a      	strh	r2, [r3, #8]
  409334:	693b      	ldr	r3, [r7, #16]
  409336:	891a      	ldrh	r2, [r3, #8]
  409338:	693b      	ldr	r3, [r7, #16]
  40933a:	815a      	strh	r2, [r3, #10]
  return p;
  40933c:	693b      	ldr	r3, [r7, #16]
}
  40933e:	4618      	mov	r0, r3
  409340:	3718      	adds	r7, #24
  409342:	46bd      	mov	sp, r7
  409344:	bd80      	pop	{r7, pc}
  409346:	bf00      	nop
  409348:	0040565d 	.word	0x0040565d

0040934c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  40934c:	b480      	push	{r7}
  40934e:	b083      	sub	sp, #12
  409350:	af00      	add	r7, sp, #0
  409352:	6078      	str	r0, [r7, #4]
  409354:	460b      	mov	r3, r1
  409356:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  409358:	687b      	ldr	r3, [r7, #4]
  40935a:	7e1b      	ldrb	r3, [r3, #24]
  40935c:	2b04      	cmp	r3, #4
  40935e:	d00e      	beq.n	40937e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
  409360:	687b      	ldr	r3, [r7, #4]
  409362:	7e1b      	ldrb	r3, [r3, #24]
  if ((pcb->state != ESTABLISHED) &&
  409364:	2b07      	cmp	r3, #7
  409366:	d00a      	beq.n	40937e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
  409368:	687b      	ldr	r3, [r7, #4]
  40936a:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != CLOSE_WAIT) &&
  40936c:	2b02      	cmp	r3, #2
  40936e:	d006      	beq.n	40937e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
  409370:	687b      	ldr	r3, [r7, #4]
  409372:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != SYN_SENT) &&
  409374:	2b03      	cmp	r3, #3
  409376:	d002      	beq.n	40937e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  409378:	f06f 030c 	mvn.w	r3, #12
  40937c:	e02b      	b.n	4093d6 <tcp_write_checks+0x8a>
  } else if (len == 0) {
  40937e:	887b      	ldrh	r3, [r7, #2]
  409380:	2b00      	cmp	r3, #0
  409382:	d101      	bne.n	409388 <tcp_write_checks+0x3c>
    return ERR_OK;
  409384:	2300      	movs	r3, #0
  409386:	e026      	b.n	4093d6 <tcp_write_checks+0x8a>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  409388:	687b      	ldr	r3, [r7, #4]
  40938a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40938e:	887a      	ldrh	r2, [r7, #2]
  409390:	429a      	cmp	r2, r3
  409392:	d909      	bls.n	4093a8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  409394:	687b      	ldr	r3, [r7, #4]
  409396:	7f9b      	ldrb	r3, [r3, #30]
  409398:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40939c:	b2da      	uxtb	r2, r3
  40939e:	687b      	ldr	r3, [r7, #4]
  4093a0:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  4093a2:	f04f 33ff 	mov.w	r3, #4294967295
  4093a6:	e016      	b.n	4093d6 <tcp_write_checks+0x8a>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  4093a8:	687b      	ldr	r3, [r7, #4]
  4093aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  4093ae:	2b07      	cmp	r3, #7
  4093b0:	d806      	bhi.n	4093c0 <tcp_write_checks+0x74>
  4093b2:	687b      	ldr	r3, [r7, #4]
  4093b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  4093b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  4093bc:	4293      	cmp	r3, r2
  4093be:	d909      	bls.n	4093d4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  4093c0:	687b      	ldr	r3, [r7, #4]
  4093c2:	7f9b      	ldrb	r3, [r3, #30]
  4093c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4093c8:	b2da      	uxtb	r2, r3
  4093ca:	687b      	ldr	r3, [r7, #4]
  4093cc:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  4093ce:	f04f 33ff 	mov.w	r3, #4294967295
  4093d2:	e000      	b.n	4093d6 <tcp_write_checks+0x8a>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  4093d4:	2300      	movs	r3, #0
}
  4093d6:	4618      	mov	r0, r3
  4093d8:	370c      	adds	r7, #12
  4093da:	46bd      	mov	sp, r7
  4093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4093e0:	4770      	bx	lr
	...

004093e4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  4093e4:	b5b0      	push	{r4, r5, r7, lr}
  4093e6:	b098      	sub	sp, #96	; 0x60
  4093e8:	af04      	add	r7, sp, #16
  4093ea:	60f8      	str	r0, [r7, #12]
  4093ec:	60b9      	str	r1, [r7, #8]
  4093ee:	4611      	mov	r1, r2
  4093f0:	461a      	mov	r2, r3
  4093f2:	460b      	mov	r3, r1
  4093f4:	80fb      	strh	r3, [r7, #6]
  4093f6:	4613      	mov	r3, r2
  4093f8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
  4093fa:	2300      	movs	r3, #0
  4093fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  4093fe:	2300      	movs	r3, #0
  409400:	64bb      	str	r3, [r7, #72]	; 0x48
  409402:	2300      	movs	r3, #0
  409404:	647b      	str	r3, [r7, #68]	; 0x44
  409406:	2300      	movs	r3, #0
  409408:	643b      	str	r3, [r7, #64]	; 0x40
  40940a:	2300      	movs	r3, #0
  40940c:	63fb      	str	r3, [r7, #60]	; 0x3c
  u16_t pos = 0; /* position in 'arg' data */
  40940e:	2300      	movs	r3, #0
  409410:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t queuelen;
  u8_t optlen = 0;
  409412:	2300      	movs	r3, #0
  409414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  u8_t optflags = 0;
  409418:	2300      	movs	r3, #0
  40941a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
#if TCP_OVERSIZE
  u16_t oversize = 0;
  40941e:	2300      	movs	r3, #0
  409420:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
  409422:	2300      	movs	r3, #0
  409424:	86fb      	strh	r3, [r7, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  409426:	68fb      	ldr	r3, [r7, #12]
  409428:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  40942c:	085b      	lsrs	r3, r3, #1
  40942e:	b29a      	uxth	r2, r3
  409430:	68fb      	ldr	r3, [r7, #12]
  409432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  409434:	4293      	cmp	r3, r2
  409436:	bf28      	it	cs
  409438:	4613      	movcs	r3, r2
  40943a:	853b      	strh	r3, [r7, #40]	; 0x28

#if LWIP_NETIF_TX_SINGLE_PBUF
  /* Always copy to try to create single pbufs for TX */
  apiflags |= TCP_WRITE_FLAG_COPY;
  40943c:	797b      	ldrb	r3, [r7, #5]
  40943e:	f043 0301 	orr.w	r3, r3, #1
  409442:	717b      	strb	r3, [r7, #5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  409444:	68bb      	ldr	r3, [r7, #8]
  409446:	2b00      	cmp	r3, #0
  409448:	d100      	bne.n	40944c <tcp_write+0x68>
  40944a:	e7fe      	b.n	40944a <tcp_write+0x66>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  40944c:	88fb      	ldrh	r3, [r7, #6]
  40944e:	4619      	mov	r1, r3
  409450:	68f8      	ldr	r0, [r7, #12]
  409452:	4b93      	ldr	r3, [pc, #588]	; (4096a0 <tcp_write+0x2bc>)
  409454:	4798      	blx	r3
  409456:	4603      	mov	r3, r0
  409458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
  40945c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409460:	2b00      	cmp	r3, #0
  409462:	d002      	beq.n	40946a <tcp_write+0x86>
    return err;
  409464:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409468:	e1e9      	b.n	40983e <tcp_write+0x45a>
  }
  queuelen = pcb->snd_queuelen;
  40946a:	68fb      	ldr	r3, [r7, #12]
  40946c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409470:	873b      	strh	r3, [r7, #56]	; 0x38
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  409472:	68fb      	ldr	r3, [r7, #12]
  409474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409476:	2b00      	cmp	r3, #0
  409478:	f000 8141 	beq.w	4096fe <tcp_write+0x31a>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40947c:	68fb      	ldr	r3, [r7, #12]
  40947e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409480:	64bb      	str	r3, [r7, #72]	; 0x48
  409482:	e002      	b.n	40948a <tcp_write+0xa6>
         last_unsent = last_unsent->next);
  409484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409486:	681b      	ldr	r3, [r3, #0]
  409488:	64bb      	str	r3, [r7, #72]	; 0x48
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40948a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40948c:	681b      	ldr	r3, [r3, #0]
  40948e:	2b00      	cmp	r3, #0
  409490:	d1f8      	bne.n	409484 <tcp_write+0xa0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  409492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409494:	7a9b      	ldrb	r3, [r3, #10]
  409496:	f003 0301 	and.w	r3, r3, #1
  40949a:	2b00      	cmp	r3, #0
  40949c:	d001      	beq.n	4094a2 <tcp_write+0xbe>
  40949e:	2204      	movs	r2, #4
  4094a0:	e000      	b.n	4094a4 <tcp_write+0xc0>
  4094a2:	2200      	movs	r2, #0
  4094a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4094a6:	7a9b      	ldrb	r3, [r3, #10]
  4094a8:	f003 0302 	and.w	r3, r3, #2
  4094ac:	2b00      	cmp	r3, #0
  4094ae:	d001      	beq.n	4094b4 <tcp_write+0xd0>
  4094b0:	230c      	movs	r3, #12
  4094b2:	e000      	b.n	4094b6 <tcp_write+0xd2>
  4094b4:	2300      	movs	r3, #0
  4094b6:	4413      	add	r3, r2
  4094b8:	84bb      	strh	r3, [r7, #36]	; 0x24
    space = mss_local - (last_unsent->len + unsent_optlen);
  4094ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4094bc:	891a      	ldrh	r2, [r3, #8]
  4094be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4094c0:	4413      	add	r3, r2
  4094c2:	b29b      	uxth	r3, r3
  4094c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4094c6:	1ad3      	subs	r3, r2, r3
  4094c8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  4094ca:	68fb      	ldr	r3, [r7, #12]
  4094cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
  4094d0:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
  4094d2:	8afb      	ldrh	r3, [r7, #22]
  4094d4:	2b00      	cmp	r3, #0
  4094d6:	d014      	beq.n	409502 <tcp_write+0x11e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
  4094d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4094da:	647b      	str	r3, [r7, #68]	; 0x44
      oversize_used = oversize < len ? oversize : len;
  4094dc:	8afb      	ldrh	r3, [r7, #22]
  4094de:	88fa      	ldrh	r2, [r7, #6]
  4094e0:	4293      	cmp	r3, r2
  4094e2:	bf28      	it	cs
  4094e4:	4613      	movcs	r3, r2
  4094e6:	86fb      	strh	r3, [r7, #54]	; 0x36
      pos += oversize_used;
  4094e8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4094ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4094ec:	4413      	add	r3, r2
  4094ee:	877b      	strh	r3, [r7, #58]	; 0x3a
      oversize -= oversize_used;
  4094f0:	8afa      	ldrh	r2, [r7, #22]
  4094f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4094f4:	1ad3      	subs	r3, r2, r3
  4094f6:	b29b      	uxth	r3, r3
  4094f8:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
  4094fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  4094fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4094fe:	1ad3      	subs	r3, r2, r3
  409500:	86bb      	strh	r3, [r7, #52]	; 0x34
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  409502:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409504:	88fb      	ldrh	r3, [r7, #6]
  409506:	429a      	cmp	r2, r3
  409508:	f080 80f9 	bcs.w	4096fe <tcp_write+0x31a>
  40950c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40950e:	2b00      	cmp	r3, #0
  409510:	f000 80f5 	beq.w	4096fe <tcp_write+0x31a>
  409514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409516:	891b      	ldrh	r3, [r3, #8]
  409518:	2b00      	cmp	r3, #0
  40951a:	f000 80f0 	beq.w	4096fe <tcp_write+0x31a>
      u16_t seglen = space < len - pos ? space : len - pos;
  40951e:	88fa      	ldrh	r2, [r7, #6]
  409520:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409522:	1ad2      	subs	r2, r2, r3
  409524:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  409526:	4293      	cmp	r3, r2
  409528:	bfa8      	it	ge
  40952a:	4613      	movge	r3, r2
  40952c:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
  40952e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409530:	647b      	str	r3, [r7, #68]	; 0x44

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  409532:	797b      	ldrb	r3, [r7, #5]
  409534:	f003 0301 	and.w	r3, r3, #1
  409538:	2b00      	cmp	r3, #0
  40953a:	d01c      	beq.n	409576 <tcp_write+0x192>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  40953c:	f107 0016 	add.w	r0, r7, #22
  409540:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  409542:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  409544:	2301      	movs	r3, #1
  409546:	9302      	str	r3, [sp, #8]
  409548:	797b      	ldrb	r3, [r7, #5]
  40954a:	9301      	str	r3, [sp, #4]
  40954c:	68fb      	ldr	r3, [r7, #12]
  40954e:	9300      	str	r3, [sp, #0]
  409550:	4603      	mov	r3, r0
  409552:	2003      	movs	r0, #3
  409554:	4c53      	ldr	r4, [pc, #332]	; (4096a4 <tcp_write+0x2c0>)
  409556:	47a0      	blx	r4
  409558:	64f8      	str	r0, [r7, #76]	; 0x4c
  40955a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40955c:	2b00      	cmp	r3, #0
  40955e:	f000 8150 	beq.w	409802 <tcp_write+0x41e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  409562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409564:	6858      	ldr	r0, [r3, #4]
  409566:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409568:	68ba      	ldr	r2, [r7, #8]
  40956a:	4413      	add	r3, r2
  40956c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
  40956e:	4619      	mov	r1, r3
  409570:	4b4d      	ldr	r3, [pc, #308]	; (4096a8 <tcp_write+0x2c4>)
  409572:	4798      	blx	r3
  409574:	e00f      	b.n	409596 <tcp_write+0x1b2>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  409576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  409578:	2201      	movs	r2, #1
  40957a:	4619      	mov	r1, r3
  40957c:	2003      	movs	r0, #3
  40957e:	4b4b      	ldr	r3, [pc, #300]	; (4096ac <tcp_write+0x2c8>)
  409580:	4798      	blx	r3
  409582:	64f8      	str	r0, [r7, #76]	; 0x4c
  409584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409586:	2b00      	cmp	r3, #0
  409588:	f000 813d 	beq.w	409806 <tcp_write+0x422>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
  40958c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  40958e:	68ba      	ldr	r2, [r7, #8]
  409590:	441a      	add	r2, r3
  409592:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409594:	605a      	str	r2, [r3, #4]
      }

      pos += seglen;
  409596:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  40959a:	4413      	add	r3, r2
  40959c:	877b      	strh	r3, [r7, #58]	; 0x3a
      queuelen += pbuf_clen(concat_p);
  40959e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  4095a0:	4b43      	ldr	r3, [pc, #268]	; (4096b0 <tcp_write+0x2cc>)
  4095a2:	4798      	blx	r3
  4095a4:	4603      	mov	r3, r0
  4095a6:	b29a      	uxth	r2, r3
  4095a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  4095aa:	4413      	add	r3, r2
  4095ac:	873b      	strh	r3, [r7, #56]	; 0x38
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  4095ae:	e0a6      	b.n	4096fe <tcp_write+0x31a>
    struct pbuf *p;
    u16_t left = len - pos;
  4095b0:	88fa      	ldrh	r2, [r7, #6]
  4095b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  4095b4:	1ad3      	subs	r3, r2, r3
  4095b6:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
  4095b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4095bc:	b29b      	uxth	r3, r3
  4095be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4095c0:	1ad3      	subs	r3, r2, r3
  4095c2:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = left > max_len ? max_len : left;
  4095c4:	8c3a      	ldrh	r2, [r7, #32]
  4095c6:	8bfb      	ldrh	r3, [r7, #30]
  4095c8:	4293      	cmp	r3, r2
  4095ca:	bf28      	it	cs
  4095cc:	4613      	movcs	r3, r2
  4095ce:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  4095d0:	797b      	ldrb	r3, [r7, #5]
  4095d2:	f003 0301 	and.w	r3, r3, #1
  4095d6:	2b00      	cmp	r3, #0
  4095d8:	d029      	beq.n	40962e <tcp_write+0x24a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  4095da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4095de:	b29a      	uxth	r2, r3
  4095e0:	8bbb      	ldrh	r3, [r7, #28]
  4095e2:	4413      	add	r3, r2
  4095e4:	b299      	uxth	r1, r3
  4095e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4095e8:	2b00      	cmp	r3, #0
  4095ea:	bf0c      	ite	eq
  4095ec:	2301      	moveq	r3, #1
  4095ee:	2300      	movne	r3, #0
  4095f0:	b2db      	uxtb	r3, r3
  4095f2:	f107 0016 	add.w	r0, r7, #22
  4095f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4095f8:	9302      	str	r3, [sp, #8]
  4095fa:	797b      	ldrb	r3, [r7, #5]
  4095fc:	9301      	str	r3, [sp, #4]
  4095fe:	68fb      	ldr	r3, [r7, #12]
  409600:	9300      	str	r3, [sp, #0]
  409602:	4603      	mov	r3, r0
  409604:	2000      	movs	r0, #0
  409606:	4c27      	ldr	r4, [pc, #156]	; (4096a4 <tcp_write+0x2c0>)
  409608:	47a0      	blx	r4
  40960a:	6338      	str	r0, [r7, #48]	; 0x30
  40960c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40960e:	2b00      	cmp	r3, #0
  409610:	f000 80fb 	beq.w	40980a <tcp_write+0x426>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  409614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409616:	685a      	ldr	r2, [r3, #4]
  409618:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40961c:	18d0      	adds	r0, r2, r3
  40961e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409620:	68ba      	ldr	r2, [r7, #8]
  409622:	4413      	add	r3, r2
  409624:	8bba      	ldrh	r2, [r7, #28]
  409626:	4619      	mov	r1, r3
  409628:	4b1f      	ldr	r3, [pc, #124]	; (4096a8 <tcp_write+0x2c4>)
  40962a:	4798      	blx	r3
  40962c:	e023      	b.n	409676 <tcp_write+0x292>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  40962e:	8bbb      	ldrh	r3, [r7, #28]
  409630:	2201      	movs	r2, #1
  409632:	4619      	mov	r1, r3
  409634:	2000      	movs	r0, #0
  409636:	4b1d      	ldr	r3, [pc, #116]	; (4096ac <tcp_write+0x2c8>)
  409638:	4798      	blx	r3
  40963a:	61b8      	str	r0, [r7, #24]
  40963c:	69bb      	ldr	r3, [r7, #24]
  40963e:	2b00      	cmp	r3, #0
  409640:	f000 80e5 	beq.w	40980e <tcp_write+0x42a>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
  409644:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409646:	68ba      	ldr	r2, [r7, #8]
  409648:	441a      	add	r2, r3
  40964a:	69bb      	ldr	r3, [r7, #24]
  40964c:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  40964e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409652:	b29b      	uxth	r3, r3
  409654:	2200      	movs	r2, #0
  409656:	4619      	mov	r1, r3
  409658:	2000      	movs	r0, #0
  40965a:	4b14      	ldr	r3, [pc, #80]	; (4096ac <tcp_write+0x2c8>)
  40965c:	4798      	blx	r3
  40965e:	6338      	str	r0, [r7, #48]	; 0x30
  409660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409662:	2b00      	cmp	r3, #0
  409664:	d103      	bne.n	40966e <tcp_write+0x28a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  409666:	69b8      	ldr	r0, [r7, #24]
  409668:	4b12      	ldr	r3, [pc, #72]	; (4096b4 <tcp_write+0x2d0>)
  40966a:	4798      	blx	r3
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  40966c:	e0d2      	b.n	409814 <tcp_write+0x430>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  40966e:	69b9      	ldr	r1, [r7, #24]
  409670:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409672:	4b11      	ldr	r3, [pc, #68]	; (4096b8 <tcp_write+0x2d4>)
  409674:	4798      	blx	r3
    }

    queuelen += pbuf_clen(p);
  409676:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409678:	4b0d      	ldr	r3, [pc, #52]	; (4096b0 <tcp_write+0x2cc>)
  40967a:	4798      	blx	r3
  40967c:	4603      	mov	r3, r0
  40967e:	b29a      	uxth	r2, r3
  409680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409682:	4413      	add	r3, r2
  409684:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409686:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409688:	2b08      	cmp	r3, #8
  40968a:	d804      	bhi.n	409696 <tcp_write+0x2b2>
  40968c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  40968e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409692:	4293      	cmp	r3, r2
  409694:	d912      	bls.n	4096bc <tcp_write+0x2d8>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  409696:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409698:	4b06      	ldr	r3, [pc, #24]	; (4096b4 <tcp_write+0x2d0>)
  40969a:	4798      	blx	r3
      goto memerr;
  40969c:	e0ba      	b.n	409814 <tcp_write+0x430>
  40969e:	bf00      	nop
  4096a0:	0040934d 	.word	0x0040934d
  4096a4:	004092ed 	.word	0x004092ed
  4096a8:	0040c9e5 	.word	0x0040c9e5
  4096ac:	0040565d 	.word	0x0040565d
  4096b0:	00405a91 	.word	0x00405a91
  4096b4:	00405a01 	.word	0x00405a01
  4096b8:	00405ae5 	.word	0x00405ae5
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  4096bc:	68fb      	ldr	r3, [r7, #12]
  4096be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  4096c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  4096c2:	441a      	add	r2, r3
  4096c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
  4096c8:	9300      	str	r3, [sp, #0]
  4096ca:	4613      	mov	r3, r2
  4096cc:	2200      	movs	r2, #0
  4096ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
  4096d0:	68f8      	ldr	r0, [r7, #12]
  4096d2:	4c5d      	ldr	r4, [pc, #372]	; (409848 <tcp_write+0x464>)
  4096d4:	47a0      	blx	r4
  4096d6:	6478      	str	r0, [r7, #68]	; 0x44
  4096d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4096da:	2b00      	cmp	r3, #0
  4096dc:	f000 8099 	beq.w	409812 <tcp_write+0x42e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  4096e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4096e2:	2b00      	cmp	r3, #0
  4096e4:	d102      	bne.n	4096ec <tcp_write+0x308>
      queue = seg;
  4096e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  4096ea:	e002      	b.n	4096f2 <tcp_write+0x30e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
  4096ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  4096ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  4096f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  4096f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4096f4:	643b      	str	r3, [r7, #64]	; 0x40

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  4096f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4096f8:	8bbb      	ldrh	r3, [r7, #28]
  4096fa:	4413      	add	r3, r2
  4096fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  while (pos < len) {
  4096fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409700:	88fb      	ldrh	r3, [r7, #6]
  409702:	429a      	cmp	r2, r3
  409704:	f4ff af54 	bcc.w	4095b0 <tcp_write+0x1cc>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  409708:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40970a:	2b00      	cmp	r3, #0
  40970c:	d02c      	beq.n	409768 <tcp_write+0x384>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  40970e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409710:	685b      	ldr	r3, [r3, #4]
  409712:	62fb      	str	r3, [r7, #44]	; 0x2c
  409714:	e01e      	b.n	409754 <tcp_write+0x370>
      p->tot_len += oversize_used;
  409716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409718:	891a      	ldrh	r2, [r3, #8]
  40971a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  40971c:	4413      	add	r3, r2
  40971e:	b29a      	uxth	r2, r3
  409720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409722:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
  409724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409726:	681b      	ldr	r3, [r3, #0]
  409728:	2b00      	cmp	r3, #0
  40972a:	d110      	bne.n	40974e <tcp_write+0x36a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  40972c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40972e:	685b      	ldr	r3, [r3, #4]
  409730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  409732:	8952      	ldrh	r2, [r2, #10]
  409734:	4413      	add	r3, r2
  409736:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  409738:	68b9      	ldr	r1, [r7, #8]
  40973a:	4618      	mov	r0, r3
  40973c:	4b43      	ldr	r3, [pc, #268]	; (40984c <tcp_write+0x468>)
  40973e:	4798      	blx	r3
        p->len += oversize_used;
  409740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409742:	895a      	ldrh	r2, [r3, #10]
  409744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409746:	4413      	add	r3, r2
  409748:	b29a      	uxth	r2, r3
  40974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40974c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  40974e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409750:	681b      	ldr	r3, [r3, #0]
  409752:	62fb      	str	r3, [r7, #44]	; 0x2c
  409754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409756:	2b00      	cmp	r3, #0
  409758:	d1dd      	bne.n	409716 <tcp_write+0x332>
      }
    }
    last_unsent->len += oversize_used;
  40975a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40975c:	891a      	ldrh	r2, [r3, #8]
  40975e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409760:	4413      	add	r3, r2
  409762:	b29a      	uxth	r2, r3
  409764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409766:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  409768:	8afa      	ldrh	r2, [r7, #22]
  40976a:	68fb      	ldr	r3, [r7, #12]
  40976c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
  409770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409772:	2b00      	cmp	r3, #0
  409774:	d00d      	beq.n	409792 <tcp_write+0x3ae>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  409776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409778:	685b      	ldr	r3, [r3, #4]
  40977a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  40977c:	4618      	mov	r0, r3
  40977e:	4b34      	ldr	r3, [pc, #208]	; (409850 <tcp_write+0x46c>)
  409780:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  409782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409784:	891a      	ldrh	r2, [r3, #8]
  409786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409788:	891b      	ldrh	r3, [r3, #8]
  40978a:	4413      	add	r3, r2
  40978c:	b29a      	uxth	r2, r3
  40978e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409790:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  409792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409794:	2b00      	cmp	r3, #0
  409796:	d103      	bne.n	4097a0 <tcp_write+0x3bc>
    pcb->unsent = queue;
  409798:	68fb      	ldr	r3, [r7, #12]
  40979a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  40979c:	66da      	str	r2, [r3, #108]	; 0x6c
  40979e:	e002      	b.n	4097a6 <tcp_write+0x3c2>
  } else {
    last_unsent->next = queue;
  4097a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4097a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  4097a4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  4097a6:	68fb      	ldr	r3, [r7, #12]
  4097a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  4097aa:	88fb      	ldrh	r3, [r7, #6]
  4097ac:	441a      	add	r2, r3
  4097ae:	68fb      	ldr	r3, [r7, #12]
  4097b0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  4097b2:	68fb      	ldr	r3, [r7, #12]
  4097b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  4097b8:	88fb      	ldrh	r3, [r7, #6]
  4097ba:	1ad3      	subs	r3, r2, r3
  4097bc:	b29a      	uxth	r2, r3
  4097be:	68fb      	ldr	r3, [r7, #12]
  4097c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  4097c4:	68fb      	ldr	r3, [r7, #12]
  4097c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
  4097c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  4097cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4097ce:	2b00      	cmp	r3, #0
  4097d0:	d015      	beq.n	4097fe <tcp_write+0x41a>
  4097d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4097d4:	68db      	ldr	r3, [r3, #12]
  4097d6:	2b00      	cmp	r3, #0
  4097d8:	d011      	beq.n	4097fe <tcp_write+0x41a>
  4097da:	797b      	ldrb	r3, [r7, #5]
  4097dc:	f003 0302 	and.w	r3, r3, #2
  4097e0:	2b00      	cmp	r3, #0
  4097e2:	d10c      	bne.n	4097fe <tcp_write+0x41a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  4097e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4097e6:	68dc      	ldr	r4, [r3, #12]
  4097e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  4097ea:	68db      	ldr	r3, [r3, #12]
  4097ec:	899b      	ldrh	r3, [r3, #12]
  4097ee:	b29d      	uxth	r5, r3
  4097f0:	2008      	movs	r0, #8
  4097f2:	4b18      	ldr	r3, [pc, #96]	; (409854 <tcp_write+0x470>)
  4097f4:	4798      	blx	r3
  4097f6:	4603      	mov	r3, r0
  4097f8:	432b      	orrs	r3, r5
  4097fa:	b29b      	uxth	r3, r3
  4097fc:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
  4097fe:	2300      	movs	r3, #0
  409800:	e01d      	b.n	40983e <tcp_write+0x45a>
          goto memerr;
  409802:	bf00      	nop
  409804:	e006      	b.n	409814 <tcp_write+0x430>
          goto memerr;
  409806:	bf00      	nop
  409808:	e004      	b.n	409814 <tcp_write+0x430>
        goto memerr;
  40980a:	bf00      	nop
  40980c:	e002      	b.n	409814 <tcp_write+0x430>
        goto memerr;
  40980e:	bf00      	nop
  409810:	e000      	b.n	409814 <tcp_write+0x430>
      goto memerr;
  409812:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  409814:	68fb      	ldr	r3, [r7, #12]
  409816:	7f9b      	ldrb	r3, [r3, #30]
  409818:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40981c:	b2da      	uxtb	r2, r3
  40981e:	68fb      	ldr	r3, [r7, #12]
  409820:	779a      	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  409822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409824:	2b00      	cmp	r3, #0
  409826:	d002      	beq.n	40982e <tcp_write+0x44a>
    pbuf_free(concat_p);
  409828:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  40982a:	4b0b      	ldr	r3, [pc, #44]	; (409858 <tcp_write+0x474>)
  40982c:	4798      	blx	r3
  }
  if (queue != NULL) {
  40982e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409830:	2b00      	cmp	r3, #0
  409832:	d002      	beq.n	40983a <tcp_write+0x456>
    tcp_segs_free(queue);
  409834:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  409836:	4b09      	ldr	r3, [pc, #36]	; (40985c <tcp_write+0x478>)
  409838:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  40983a:	f04f 33ff 	mov.w	r3, #4294967295
}
  40983e:	4618      	mov	r0, r3
  409840:	3750      	adds	r7, #80	; 0x50
  409842:	46bd      	mov	sp, r7
  409844:	bdb0      	pop	{r4, r5, r7, pc}
  409846:	bf00      	nop
  409848:	004091d1 	.word	0x004091d1
  40984c:	0040c9e5 	.word	0x0040c9e5
  409850:	00405ae5 	.word	0x00405ae5
  409854:	00401e19 	.word	0x00401e19
  409858:	00405a01 	.word	0x00405a01
  40985c:	00406a6d 	.word	0x00406a6d

00409860 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  409860:	b590      	push	{r4, r7, lr}
  409862:	b08b      	sub	sp, #44	; 0x2c
  409864:	af02      	add	r7, sp, #8
  409866:	6078      	str	r0, [r7, #4]
  409868:	460b      	mov	r3, r1
  40986a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  40986c:	2300      	movs	r3, #0
  40986e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
  409870:	2300      	movs	r3, #0
  409872:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409874:	687b      	ldr	r3, [r7, #4]
  409876:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  40987a:	2b07      	cmp	r3, #7
  40987c:	d806      	bhi.n	40988c <tcp_enqueue_flags+0x2c>
  40987e:	687b      	ldr	r3, [r7, #4]
  409880:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409884:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409888:	4293      	cmp	r3, r2
  40988a:	d909      	bls.n	4098a0 <tcp_enqueue_flags+0x40>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  40988c:	687b      	ldr	r3, [r7, #4]
  40988e:	7f9b      	ldrb	r3, [r3, #30]
  409890:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409894:	b2da      	uxtb	r2, r3
  409896:	687b      	ldr	r3, [r7, #4]
  409898:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  40989a:	f04f 33ff 	mov.w	r3, #4294967295
  40989e:	e09b      	b.n	4099d8 <tcp_enqueue_flags+0x178>
  }

  if (flags & TCP_SYN) {
  4098a0:	78fb      	ldrb	r3, [r7, #3]
  4098a2:	f003 0302 	and.w	r3, r3, #2
  4098a6:	2b00      	cmp	r3, #0
  4098a8:	d001      	beq.n	4098ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
  4098aa:	2301      	movs	r3, #1
  4098ac:	77fb      	strb	r3, [r7, #31]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  4098ae:	7ffb      	ldrb	r3, [r7, #31]
  4098b0:	f003 0301 	and.w	r3, r3, #1
  4098b4:	2b00      	cmp	r3, #0
  4098b6:	d001      	beq.n	4098bc <tcp_enqueue_flags+0x5c>
  4098b8:	2204      	movs	r2, #4
  4098ba:	e000      	b.n	4098be <tcp_enqueue_flags+0x5e>
  4098bc:	2200      	movs	r2, #0
  4098be:	7ffb      	ldrb	r3, [r7, #31]
  4098c0:	f003 0302 	and.w	r3, r3, #2
  4098c4:	2b00      	cmp	r3, #0
  4098c6:	d001      	beq.n	4098cc <tcp_enqueue_flags+0x6c>
  4098c8:	230c      	movs	r3, #12
  4098ca:	e000      	b.n	4098ce <tcp_enqueue_flags+0x6e>
  4098cc:	2300      	movs	r3, #0
  4098ce:	4413      	add	r3, r2
  4098d0:	75fb      	strb	r3, [r7, #23]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  4098d2:	687b      	ldr	r3, [r7, #4]
  4098d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  4098d8:	2b00      	cmp	r3, #0
  4098da:	d102      	bne.n	4098e2 <tcp_enqueue_flags+0x82>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  4098dc:	f04f 33ff 	mov.w	r3, #4294967295
  4098e0:	e07a      	b.n	4099d8 <tcp_enqueue_flags+0x178>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  4098e2:	7dfb      	ldrb	r3, [r7, #23]
  4098e4:	b29b      	uxth	r3, r3
  4098e6:	2200      	movs	r2, #0
  4098e8:	4619      	mov	r1, r3
  4098ea:	2000      	movs	r0, #0
  4098ec:	4b3c      	ldr	r3, [pc, #240]	; (4099e0 <tcp_enqueue_flags+0x180>)
  4098ee:	4798      	blx	r3
  4098f0:	6138      	str	r0, [r7, #16]
  4098f2:	693b      	ldr	r3, [r7, #16]
  4098f4:	2b00      	cmp	r3, #0
  4098f6:	d109      	bne.n	40990c <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
  4098f8:	687b      	ldr	r3, [r7, #4]
  4098fa:	7f9b      	ldrb	r3, [r3, #30]
  4098fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409900:	b2da      	uxtb	r2, r3
  409902:	687b      	ldr	r3, [r7, #4]
  409904:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409906:	f04f 33ff 	mov.w	r3, #4294967295
  40990a:	e065      	b.n	4099d8 <tcp_enqueue_flags+0x178>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  40990c:	687b      	ldr	r3, [r7, #4]
  40990e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
  409910:	78fa      	ldrb	r2, [r7, #3]
  409912:	7ffb      	ldrb	r3, [r7, #31]
  409914:	9300      	str	r3, [sp, #0]
  409916:	460b      	mov	r3, r1
  409918:	6939      	ldr	r1, [r7, #16]
  40991a:	6878      	ldr	r0, [r7, #4]
  40991c:	4c31      	ldr	r4, [pc, #196]	; (4099e4 <tcp_enqueue_flags+0x184>)
  40991e:	47a0      	blx	r4
  409920:	60f8      	str	r0, [r7, #12]
  409922:	68fb      	ldr	r3, [r7, #12]
  409924:	2b00      	cmp	r3, #0
  409926:	d109      	bne.n	40993c <tcp_enqueue_flags+0xdc>
    pcb->flags |= TF_NAGLEMEMERR;
  409928:	687b      	ldr	r3, [r7, #4]
  40992a:	7f9b      	ldrb	r3, [r3, #30]
  40992c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409930:	b2da      	uxtb	r2, r3
  409932:	687b      	ldr	r3, [r7, #4]
  409934:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409936:	f04f 33ff 	mov.w	r3, #4294967295
  40993a:	e04d      	b.n	4099d8 <tcp_enqueue_flags+0x178>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  40993c:	687b      	ldr	r3, [r7, #4]
  40993e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409940:	2b00      	cmp	r3, #0
  409942:	d103      	bne.n	40994c <tcp_enqueue_flags+0xec>
    pcb->unsent = seg;
  409944:	687b      	ldr	r3, [r7, #4]
  409946:	68fa      	ldr	r2, [r7, #12]
  409948:	66da      	str	r2, [r3, #108]	; 0x6c
  40994a:	e00d      	b.n	409968 <tcp_enqueue_flags+0x108>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  40994c:	687b      	ldr	r3, [r7, #4]
  40994e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409950:	61bb      	str	r3, [r7, #24]
  409952:	e002      	b.n	40995a <tcp_enqueue_flags+0xfa>
  409954:	69bb      	ldr	r3, [r7, #24]
  409956:	681b      	ldr	r3, [r3, #0]
  409958:	61bb      	str	r3, [r7, #24]
  40995a:	69bb      	ldr	r3, [r7, #24]
  40995c:	681b      	ldr	r3, [r3, #0]
  40995e:	2b00      	cmp	r3, #0
  409960:	d1f8      	bne.n	409954 <tcp_enqueue_flags+0xf4>
    useg->next = seg;
  409962:	69bb      	ldr	r3, [r7, #24]
  409964:	68fa      	ldr	r2, [r7, #12]
  409966:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  409968:	687b      	ldr	r3, [r7, #4]
  40996a:	2200      	movs	r2, #0
  40996c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  409970:	78fb      	ldrb	r3, [r7, #3]
  409972:	f003 0302 	and.w	r3, r3, #2
  409976:	2b00      	cmp	r3, #0
  409978:	d104      	bne.n	409984 <tcp_enqueue_flags+0x124>
  40997a:	78fb      	ldrb	r3, [r7, #3]
  40997c:	f003 0301 	and.w	r3, r3, #1
  409980:	2b00      	cmp	r3, #0
  409982:	d00c      	beq.n	40999e <tcp_enqueue_flags+0x13e>
    pcb->snd_lbb++;
  409984:	687b      	ldr	r3, [r7, #4]
  409986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  409988:	1c5a      	adds	r2, r3, #1
  40998a:	687b      	ldr	r3, [r7, #4]
  40998c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  40998e:	687b      	ldr	r3, [r7, #4]
  409990:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409994:	3b01      	subs	r3, #1
  409996:	b29a      	uxth	r2, r3
  409998:	687b      	ldr	r3, [r7, #4]
  40999a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  40999e:	78fb      	ldrb	r3, [r7, #3]
  4099a0:	f003 0301 	and.w	r3, r3, #1
  4099a4:	2b00      	cmp	r3, #0
  4099a6:	d006      	beq.n	4099b6 <tcp_enqueue_flags+0x156>
    pcb->flags |= TF_FIN;
  4099a8:	687b      	ldr	r3, [r7, #4]
  4099aa:	7f9b      	ldrb	r3, [r3, #30]
  4099ac:	f043 0320 	orr.w	r3, r3, #32
  4099b0:	b2da      	uxtb	r2, r3
  4099b2:	687b      	ldr	r3, [r7, #4]
  4099b4:	779a      	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  4099b6:	68fb      	ldr	r3, [r7, #12]
  4099b8:	685b      	ldr	r3, [r3, #4]
  4099ba:	4618      	mov	r0, r3
  4099bc:	4b0a      	ldr	r3, [pc, #40]	; (4099e8 <tcp_enqueue_flags+0x188>)
  4099be:	4798      	blx	r3
  4099c0:	4603      	mov	r3, r0
  4099c2:	4619      	mov	r1, r3
  4099c4:	687b      	ldr	r3, [r7, #4]
  4099c6:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  4099ca:	b28b      	uxth	r3, r1
  4099cc:	4413      	add	r3, r2
  4099ce:	b29a      	uxth	r2, r3
  4099d0:	687b      	ldr	r3, [r7, #4]
  4099d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  4099d6:	2300      	movs	r3, #0
}
  4099d8:	4618      	mov	r0, r3
  4099da:	3724      	adds	r7, #36	; 0x24
  4099dc:	46bd      	mov	sp, r7
  4099de:	bd90      	pop	{r4, r7, pc}
  4099e0:	0040565d 	.word	0x0040565d
  4099e4:	004091d1 	.word	0x004091d1
  4099e8:	00405a91 	.word	0x00405a91

004099ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  4099ec:	b590      	push	{r4, r7, lr}
  4099ee:	b089      	sub	sp, #36	; 0x24
  4099f0:	af02      	add	r7, sp, #8
  4099f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
  4099f4:	2300      	movs	r3, #0
  4099f6:	75fb      	strb	r3, [r7, #23]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  4099f8:	7dfb      	ldrb	r3, [r7, #23]
  4099fa:	b29c      	uxth	r4, r3
  4099fc:	687b      	ldr	r3, [r7, #4]
  4099fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  409a00:	4618      	mov	r0, r3
  409a02:	4b1f      	ldr	r3, [pc, #124]	; (409a80 <tcp_send_empty_ack+0x94>)
  409a04:	4798      	blx	r3
  409a06:	4603      	mov	r3, r0
  409a08:	2200      	movs	r2, #0
  409a0a:	4621      	mov	r1, r4
  409a0c:	6878      	ldr	r0, [r7, #4]
  409a0e:	4c1d      	ldr	r4, [pc, #116]	; (409a84 <tcp_send_empty_ack+0x98>)
  409a10:	47a0      	blx	r4
  409a12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  409a14:	693b      	ldr	r3, [r7, #16]
  409a16:	2b00      	cmp	r3, #0
  409a18:	d102      	bne.n	409a20 <tcp_send_empty_ack+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  409a1a:	f06f 0301 	mvn.w	r3, #1
  409a1e:	e02a      	b.n	409a76 <tcp_send_empty_ack+0x8a>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  409a20:	693b      	ldr	r3, [r7, #16]
  409a22:	685b      	ldr	r3, [r3, #4]
  409a24:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  409a26:	687b      	ldr	r3, [r7, #4]
  409a28:	7f9b      	ldrb	r3, [r3, #30]
  409a2a:	f023 0303 	bic.w	r3, r3, #3
  409a2e:	b2da      	uxtb	r2, r3
  409a30:	687b      	ldr	r3, [r7, #4]
  409a32:	779a      	strb	r2, [r3, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  409a34:	6879      	ldr	r1, [r7, #4]
  409a36:	687b      	ldr	r3, [r7, #4]
  409a38:	1d1a      	adds	r2, r3, #4
  409a3a:	693b      	ldr	r3, [r7, #16]
  409a3c:	891b      	ldrh	r3, [r3, #8]
  409a3e:	9300      	str	r3, [sp, #0]
  409a40:	2306      	movs	r3, #6
  409a42:	6938      	ldr	r0, [r7, #16]
  409a44:	4c10      	ldr	r4, [pc, #64]	; (409a88 <tcp_send_empty_ack+0x9c>)
  409a46:	47a0      	blx	r4
  409a48:	4603      	mov	r3, r0
  409a4a:	461a      	mov	r2, r3
  409a4c:	68fb      	ldr	r3, [r7, #12]
  409a4e:	821a      	strh	r2, [r3, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  409a50:	6879      	ldr	r1, [r7, #4]
  409a52:	687b      	ldr	r3, [r7, #4]
  409a54:	1d18      	adds	r0, r3, #4
  409a56:	687b      	ldr	r3, [r7, #4]
  409a58:	7a9c      	ldrb	r4, [r3, #10]
  409a5a:	687b      	ldr	r3, [r7, #4]
  409a5c:	7a5b      	ldrb	r3, [r3, #9]
  409a5e:	2206      	movs	r2, #6
  409a60:	9201      	str	r2, [sp, #4]
  409a62:	9300      	str	r3, [sp, #0]
  409a64:	4623      	mov	r3, r4
  409a66:	4602      	mov	r2, r0
  409a68:	6938      	ldr	r0, [r7, #16]
  409a6a:	4c08      	ldr	r4, [pc, #32]	; (409a8c <tcp_send_empty_ack+0xa0>)
  409a6c:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  409a6e:	6938      	ldr	r0, [r7, #16]
  409a70:	4b07      	ldr	r3, [pc, #28]	; (409a90 <tcp_send_empty_ack+0xa4>)
  409a72:	4798      	blx	r3

  return ERR_OK;
  409a74:	2300      	movs	r3, #0
}
  409a76:	4618      	mov	r0, r3
  409a78:	371c      	adds	r7, #28
  409a7a:	46bd      	mov	sp, r7
  409a7c:	bd90      	pop	{r4, r7, pc}
  409a7e:	bf00      	nop
  409a80:	00401e65 	.word	0x00401e65
  409a84:	0040906d 	.word	0x0040906d
  409a88:	00403b89 	.word	0x00403b89
  409a8c:	004041fd 	.word	0x004041fd
  409a90:	00405a01 	.word	0x00405a01

00409a94 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  409a94:	b5b0      	push	{r4, r5, r7, lr}
  409a96:	b088      	sub	sp, #32
  409a98:	af00      	add	r7, sp, #0
  409a9a:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  409a9c:	4b8d      	ldr	r3, [pc, #564]	; (409cd4 <tcp_output+0x240>)
  409a9e:	681a      	ldr	r2, [r3, #0]
  409aa0:	687b      	ldr	r3, [r7, #4]
  409aa2:	429a      	cmp	r2, r3
  409aa4:	d101      	bne.n	409aaa <tcp_output+0x16>
    return ERR_OK;
  409aa6:	2300      	movs	r3, #0
  409aa8:	e14c      	b.n	409d44 <tcp_output+0x2b0>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  409aaa:	687b      	ldr	r3, [r7, #4]
  409aac:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  409ab0:	687b      	ldr	r3, [r7, #4]
  409ab2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  409ab6:	429a      	cmp	r2, r3
  409ab8:	d203      	bcs.n	409ac2 <tcp_output+0x2e>
  409aba:	687b      	ldr	r3, [r7, #4]
  409abc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  409ac0:	e002      	b.n	409ac8 <tcp_output+0x34>
  409ac2:	687b      	ldr	r3, [r7, #4]
  409ac4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  409ac8:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
  409aca:	687b      	ldr	r3, [r7, #4]
  409acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409ace:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  409ad0:	687b      	ldr	r3, [r7, #4]
  409ad2:	7f9b      	ldrb	r3, [r3, #30]
  409ad4:	f003 0302 	and.w	r3, r3, #2
  409ad8:	2b00      	cmp	r3, #0
  409ada:	d017      	beq.n	409b0c <tcp_output+0x78>
  409adc:	69fb      	ldr	r3, [r7, #28]
  409ade:	2b00      	cmp	r3, #0
  409ae0:	d00f      	beq.n	409b02 <tcp_output+0x6e>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  409ae2:	69fb      	ldr	r3, [r7, #28]
  409ae4:	68db      	ldr	r3, [r3, #12]
  409ae6:	685b      	ldr	r3, [r3, #4]
  409ae8:	4618      	mov	r0, r3
  409aea:	4b7b      	ldr	r3, [pc, #492]	; (409cd8 <tcp_output+0x244>)
  409aec:	4798      	blx	r3
  409aee:	4602      	mov	r2, r0
  409af0:	687b      	ldr	r3, [r7, #4]
  409af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409af4:	1ad3      	subs	r3, r2, r3
  409af6:	69fa      	ldr	r2, [r7, #28]
  409af8:	8912      	ldrh	r2, [r2, #8]
  409afa:	441a      	add	r2, r3
     (seg == NULL ||
  409afc:	693b      	ldr	r3, [r7, #16]
  409afe:	429a      	cmp	r2, r3
  409b00:	d904      	bls.n	409b0c <tcp_output+0x78>
     return tcp_send_empty_ack(pcb);
  409b02:	6878      	ldr	r0, [r7, #4]
  409b04:	4b75      	ldr	r3, [pc, #468]	; (409cdc <tcp_output+0x248>)
  409b06:	4798      	blx	r3
  409b08:	4603      	mov	r3, r0
  409b0a:	e11b      	b.n	409d44 <tcp_output+0x2b0>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  409b0c:	687b      	ldr	r3, [r7, #4]
  409b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409b10:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
  409b12:	69bb      	ldr	r3, [r7, #24]
  409b14:	2b00      	cmp	r3, #0
  409b16:	f000 80ef 	beq.w	409cf8 <tcp_output+0x264>
    for (; useg->next != NULL; useg = useg->next);
  409b1a:	e002      	b.n	409b22 <tcp_output+0x8e>
  409b1c:	69bb      	ldr	r3, [r7, #24]
  409b1e:	681b      	ldr	r3, [r3, #0]
  409b20:	61bb      	str	r3, [r7, #24]
  409b22:	69bb      	ldr	r3, [r7, #24]
  409b24:	681b      	ldr	r3, [r3, #0]
  409b26:	2b00      	cmp	r3, #0
  409b28:	d1f8      	bne.n	409b1c <tcp_output+0x88>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  409b2a:	e0e5      	b.n	409cf8 <tcp_output+0x264>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  409b2c:	687b      	ldr	r3, [r7, #4]
  409b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409b30:	2b00      	cmp	r3, #0
  409b32:	d01f      	beq.n	409b74 <tcp_output+0xe0>
  409b34:	687b      	ldr	r3, [r7, #4]
  409b36:	7f9b      	ldrb	r3, [r3, #30]
  409b38:	f003 0344 	and.w	r3, r3, #68	; 0x44
  409b3c:	2b00      	cmp	r3, #0
  409b3e:	d119      	bne.n	409b74 <tcp_output+0xe0>
  409b40:	687b      	ldr	r3, [r7, #4]
  409b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409b44:	2b00      	cmp	r3, #0
  409b46:	d00b      	beq.n	409b60 <tcp_output+0xcc>
  409b48:	687b      	ldr	r3, [r7, #4]
  409b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409b4c:	681b      	ldr	r3, [r3, #0]
  409b4e:	2b00      	cmp	r3, #0
  409b50:	d110      	bne.n	409b74 <tcp_output+0xe0>
  409b52:	687b      	ldr	r3, [r7, #4]
  409b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409b56:	891a      	ldrh	r2, [r3, #8]
  409b58:	687b      	ldr	r3, [r7, #4]
  409b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  409b5c:	429a      	cmp	r2, r3
  409b5e:	d209      	bcs.n	409b74 <tcp_output+0xe0>
  409b60:	687b      	ldr	r3, [r7, #4]
  409b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409b66:	2b00      	cmp	r3, #0
  409b68:	d004      	beq.n	409b74 <tcp_output+0xe0>
  409b6a:	687b      	ldr	r3, [r7, #4]
  409b6c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409b70:	2b07      	cmp	r3, #7
  409b72:	d901      	bls.n	409b78 <tcp_output+0xe4>
  409b74:	2301      	movs	r3, #1
  409b76:	e000      	b.n	409b7a <tcp_output+0xe6>
  409b78:	2300      	movs	r3, #0
  409b7a:	2b00      	cmp	r3, #0
  409b7c:	d106      	bne.n	409b8c <tcp_output+0xf8>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
  409b7e:	687b      	ldr	r3, [r7, #4]
  409b80:	7f9b      	ldrb	r3, [r3, #30]
  409b82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if((tcp_do_output_nagle(pcb) == 0) &&
  409b86:	2b00      	cmp	r3, #0
  409b88:	f000 80cb 	beq.w	409d22 <tcp_output+0x28e>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  409b8c:	69fb      	ldr	r3, [r7, #28]
  409b8e:	681a      	ldr	r2, [r3, #0]
  409b90:	687b      	ldr	r3, [r7, #4]
  409b92:	66da      	str	r2, [r3, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
  409b94:	687b      	ldr	r3, [r7, #4]
  409b96:	7e1b      	ldrb	r3, [r3, #24]
  409b98:	2b02      	cmp	r3, #2
  409b9a:	d013      	beq.n	409bc4 <tcp_output+0x130>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  409b9c:	69fb      	ldr	r3, [r7, #28]
  409b9e:	68dc      	ldr	r4, [r3, #12]
  409ba0:	69fb      	ldr	r3, [r7, #28]
  409ba2:	68db      	ldr	r3, [r3, #12]
  409ba4:	899b      	ldrh	r3, [r3, #12]
  409ba6:	b29d      	uxth	r5, r3
  409ba8:	2010      	movs	r0, #16
  409baa:	4b4d      	ldr	r3, [pc, #308]	; (409ce0 <tcp_output+0x24c>)
  409bac:	4798      	blx	r3
  409bae:	4603      	mov	r3, r0
  409bb0:	432b      	orrs	r3, r5
  409bb2:	b29b      	uxth	r3, r3
  409bb4:	81a3      	strh	r3, [r4, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  409bb6:	687b      	ldr	r3, [r7, #4]
  409bb8:	7f9b      	ldrb	r3, [r3, #30]
  409bba:	f023 0303 	bic.w	r3, r3, #3
  409bbe:	b2da      	uxtb	r2, r3
  409bc0:	687b      	ldr	r3, [r7, #4]
  409bc2:	779a      	strb	r2, [r3, #30]
    }

    tcp_output_segment(seg, pcb);
  409bc4:	6879      	ldr	r1, [r7, #4]
  409bc6:	69f8      	ldr	r0, [r7, #28]
  409bc8:	4b46      	ldr	r3, [pc, #280]	; (409ce4 <tcp_output+0x250>)
  409bca:	4798      	blx	r3
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  409bcc:	69fb      	ldr	r3, [r7, #28]
  409bce:	68db      	ldr	r3, [r3, #12]
  409bd0:	685b      	ldr	r3, [r3, #4]
  409bd2:	4618      	mov	r0, r3
  409bd4:	4b40      	ldr	r3, [pc, #256]	; (409cd8 <tcp_output+0x244>)
  409bd6:	4798      	blx	r3
  409bd8:	4604      	mov	r4, r0
  409bda:	69fb      	ldr	r3, [r7, #28]
  409bdc:	891b      	ldrh	r3, [r3, #8]
  409bde:	461d      	mov	r5, r3
  409be0:	69fb      	ldr	r3, [r7, #28]
  409be2:	68db      	ldr	r3, [r3, #12]
  409be4:	899b      	ldrh	r3, [r3, #12]
  409be6:	b29b      	uxth	r3, r3
  409be8:	4618      	mov	r0, r3
  409bea:	4b3f      	ldr	r3, [pc, #252]	; (409ce8 <tcp_output+0x254>)
  409bec:	4798      	blx	r3
  409bee:	4603      	mov	r3, r0
  409bf0:	f003 0303 	and.w	r3, r3, #3
  409bf4:	2b00      	cmp	r3, #0
  409bf6:	bf14      	ite	ne
  409bf8:	2301      	movne	r3, #1
  409bfa:	2300      	moveq	r3, #0
  409bfc:	b2db      	uxtb	r3, r3
  409bfe:	442b      	add	r3, r5
  409c00:	4423      	add	r3, r4
  409c02:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  409c04:	687b      	ldr	r3, [r7, #4]
  409c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  409c08:	68fb      	ldr	r3, [r7, #12]
  409c0a:	1ad3      	subs	r3, r2, r3
  409c0c:	2b00      	cmp	r3, #0
  409c0e:	da02      	bge.n	409c16 <tcp_output+0x182>
      pcb->snd_nxt = snd_nxt;
  409c10:	687b      	ldr	r3, [r7, #4]
  409c12:	68fa      	ldr	r2, [r7, #12]
  409c14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  409c16:	69fb      	ldr	r3, [r7, #28]
  409c18:	891b      	ldrh	r3, [r3, #8]
  409c1a:	461c      	mov	r4, r3
  409c1c:	69fb      	ldr	r3, [r7, #28]
  409c1e:	68db      	ldr	r3, [r3, #12]
  409c20:	899b      	ldrh	r3, [r3, #12]
  409c22:	b29b      	uxth	r3, r3
  409c24:	4618      	mov	r0, r3
  409c26:	4b30      	ldr	r3, [pc, #192]	; (409ce8 <tcp_output+0x254>)
  409c28:	4798      	blx	r3
  409c2a:	4603      	mov	r3, r0
  409c2c:	f003 0303 	and.w	r3, r3, #3
  409c30:	2b00      	cmp	r3, #0
  409c32:	bf14      	ite	ne
  409c34:	2301      	movne	r3, #1
  409c36:	2300      	moveq	r3, #0
  409c38:	b2db      	uxtb	r3, r3
  409c3a:	4423      	add	r3, r4
  409c3c:	2b00      	cmp	r3, #0
  409c3e:	dd55      	ble.n	409cec <tcp_output+0x258>
      seg->next = NULL;
  409c40:	69fb      	ldr	r3, [r7, #28]
  409c42:	2200      	movs	r2, #0
  409c44:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  409c46:	687b      	ldr	r3, [r7, #4]
  409c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409c4a:	2b00      	cmp	r3, #0
  409c4c:	d105      	bne.n	409c5a <tcp_output+0x1c6>
        pcb->unacked = seg;
  409c4e:	687b      	ldr	r3, [r7, #4]
  409c50:	69fa      	ldr	r2, [r7, #28]
  409c52:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
  409c54:	69fb      	ldr	r3, [r7, #28]
  409c56:	61bb      	str	r3, [r7, #24]
  409c58:	e04b      	b.n	409cf2 <tcp_output+0x25e>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  409c5a:	69fb      	ldr	r3, [r7, #28]
  409c5c:	68db      	ldr	r3, [r3, #12]
  409c5e:	685b      	ldr	r3, [r3, #4]
  409c60:	4618      	mov	r0, r3
  409c62:	4b1d      	ldr	r3, [pc, #116]	; (409cd8 <tcp_output+0x244>)
  409c64:	4798      	blx	r3
  409c66:	4604      	mov	r4, r0
  409c68:	69bb      	ldr	r3, [r7, #24]
  409c6a:	68db      	ldr	r3, [r3, #12]
  409c6c:	685b      	ldr	r3, [r3, #4]
  409c6e:	4618      	mov	r0, r3
  409c70:	4b19      	ldr	r3, [pc, #100]	; (409cd8 <tcp_output+0x244>)
  409c72:	4798      	blx	r3
  409c74:	4603      	mov	r3, r0
  409c76:	1ae3      	subs	r3, r4, r3
  409c78:	2b00      	cmp	r3, #0
  409c7a:	da24      	bge.n	409cc6 <tcp_output+0x232>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  409c7c:	687b      	ldr	r3, [r7, #4]
  409c7e:	3370      	adds	r3, #112	; 0x70
  409c80:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
  409c82:	e002      	b.n	409c8a <tcp_output+0x1f6>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  409c84:	697b      	ldr	r3, [r7, #20]
  409c86:	681b      	ldr	r3, [r3, #0]
  409c88:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
  409c8a:	697b      	ldr	r3, [r7, #20]
  409c8c:	681b      	ldr	r3, [r3, #0]
  409c8e:	2b00      	cmp	r3, #0
  409c90:	d011      	beq.n	409cb6 <tcp_output+0x222>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  409c92:	697b      	ldr	r3, [r7, #20]
  409c94:	681b      	ldr	r3, [r3, #0]
  409c96:	68db      	ldr	r3, [r3, #12]
  409c98:	685b      	ldr	r3, [r3, #4]
  409c9a:	4618      	mov	r0, r3
  409c9c:	4b0e      	ldr	r3, [pc, #56]	; (409cd8 <tcp_output+0x244>)
  409c9e:	4798      	blx	r3
  409ca0:	4604      	mov	r4, r0
  409ca2:	69fb      	ldr	r3, [r7, #28]
  409ca4:	68db      	ldr	r3, [r3, #12]
  409ca6:	685b      	ldr	r3, [r3, #4]
  409ca8:	4618      	mov	r0, r3
  409caa:	4b0b      	ldr	r3, [pc, #44]	; (409cd8 <tcp_output+0x244>)
  409cac:	4798      	blx	r3
  409cae:	4603      	mov	r3, r0
  409cb0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
  409cb2:	2b00      	cmp	r3, #0
  409cb4:	dbe6      	blt.n	409c84 <tcp_output+0x1f0>
          }
          seg->next = (*cur_seg);
  409cb6:	697b      	ldr	r3, [r7, #20]
  409cb8:	681a      	ldr	r2, [r3, #0]
  409cba:	69fb      	ldr	r3, [r7, #28]
  409cbc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
  409cbe:	697b      	ldr	r3, [r7, #20]
  409cc0:	69fa      	ldr	r2, [r7, #28]
  409cc2:	601a      	str	r2, [r3, #0]
  409cc4:	e015      	b.n	409cf2 <tcp_output+0x25e>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  409cc6:	69bb      	ldr	r3, [r7, #24]
  409cc8:	69fa      	ldr	r2, [r7, #28]
  409cca:	601a      	str	r2, [r3, #0]
          useg = useg->next;
  409ccc:	69bb      	ldr	r3, [r7, #24]
  409cce:	681b      	ldr	r3, [r3, #0]
  409cd0:	61bb      	str	r3, [r7, #24]
  409cd2:	e00e      	b.n	409cf2 <tcp_output+0x25e>
  409cd4:	20404400 	.word	0x20404400
  409cd8:	00401e99 	.word	0x00401e99
  409cdc:	004099ed 	.word	0x004099ed
  409ce0:	00401e19 	.word	0x00401e19
  409ce4:	00409d55 	.word	0x00409d55
  409ce8:	00401e45 	.word	0x00401e45
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  409cec:	69f8      	ldr	r0, [r7, #28]
  409cee:	4b17      	ldr	r3, [pc, #92]	; (409d4c <tcp_output+0x2b8>)
  409cf0:	4798      	blx	r3
    }
    seg = pcb->unsent;
  409cf2:	687b      	ldr	r3, [r7, #4]
  409cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409cf6:	61fb      	str	r3, [r7, #28]
  while (seg != NULL &&
  409cf8:	69fb      	ldr	r3, [r7, #28]
  409cfa:	2b00      	cmp	r3, #0
  409cfc:	d012      	beq.n	409d24 <tcp_output+0x290>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  409cfe:	69fb      	ldr	r3, [r7, #28]
  409d00:	68db      	ldr	r3, [r3, #12]
  409d02:	685b      	ldr	r3, [r3, #4]
  409d04:	4618      	mov	r0, r3
  409d06:	4b12      	ldr	r3, [pc, #72]	; (409d50 <tcp_output+0x2bc>)
  409d08:	4798      	blx	r3
  409d0a:	4602      	mov	r2, r0
  409d0c:	687b      	ldr	r3, [r7, #4]
  409d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409d10:	1ad3      	subs	r3, r2, r3
  409d12:	69fa      	ldr	r2, [r7, #28]
  409d14:	8912      	ldrh	r2, [r2, #8]
  409d16:	441a      	add	r2, r3
  while (seg != NULL &&
  409d18:	693b      	ldr	r3, [r7, #16]
  409d1a:	429a      	cmp	r2, r3
  409d1c:	f67f af06 	bls.w	409b2c <tcp_output+0x98>
  409d20:	e000      	b.n	409d24 <tcp_output+0x290>
      break;
  409d22:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  409d24:	687b      	ldr	r3, [r7, #4]
  409d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409d28:	2b00      	cmp	r3, #0
  409d2a:	d103      	bne.n	409d34 <tcp_output+0x2a0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  409d2c:	687b      	ldr	r3, [r7, #4]
  409d2e:	2200      	movs	r2, #0
  409d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  409d34:	687b      	ldr	r3, [r7, #4]
  409d36:	7f9b      	ldrb	r3, [r3, #30]
  409d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  409d3c:	b2da      	uxtb	r2, r3
  409d3e:	687b      	ldr	r3, [r7, #4]
  409d40:	779a      	strb	r2, [r3, #30]
  return ERR_OK;
  409d42:	2300      	movs	r3, #0
}
  409d44:	4618      	mov	r0, r3
  409d46:	3720      	adds	r7, #32
  409d48:	46bd      	mov	sp, r7
  409d4a:	bdb0      	pop	{r4, r5, r7, pc}
  409d4c:	00406a99 	.word	0x00406a99
  409d50:	00401e99 	.word	0x00401e99

00409d54 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
  409d54:	b5b0      	push	{r4, r5, r7, lr}
  409d56:	b088      	sub	sp, #32
  409d58:	af02      	add	r7, sp, #8
  409d5a:	6078      	str	r0, [r7, #4]
  409d5c:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  409d5e:	687b      	ldr	r3, [r7, #4]
  409d60:	68dc      	ldr	r4, [r3, #12]
  409d62:	683b      	ldr	r3, [r7, #0]
  409d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409d66:	4618      	mov	r0, r3
  409d68:	4b55      	ldr	r3, [pc, #340]	; (409ec0 <tcp_output_segment+0x16c>)
  409d6a:	4798      	blx	r3
  409d6c:	4603      	mov	r3, r0
  409d6e:	60a3      	str	r3, [r4, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  409d70:	687b      	ldr	r3, [r7, #4]
  409d72:	68dc      	ldr	r4, [r3, #12]
  409d74:	683b      	ldr	r3, [r7, #0]
  409d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  409d78:	4618      	mov	r0, r3
  409d7a:	4b52      	ldr	r3, [pc, #328]	; (409ec4 <tcp_output_segment+0x170>)
  409d7c:	4798      	blx	r3
  409d7e:	4603      	mov	r3, r0
  409d80:	81e3      	strh	r3, [r4, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  409d82:	683b      	ldr	r3, [r7, #0]
  409d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409d86:	683a      	ldr	r2, [r7, #0]
  409d88:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  409d8a:	441a      	add	r2, r3
  409d8c:	683b      	ldr	r3, [r7, #0]
  409d8e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  409d90:	687b      	ldr	r3, [r7, #4]
  409d92:	68db      	ldr	r3, [r3, #12]
  409d94:	3314      	adds	r3, #20
  409d96:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  409d98:	687b      	ldr	r3, [r7, #4]
  409d9a:	7a9b      	ldrb	r3, [r3, #10]
  409d9c:	f003 0301 	and.w	r3, r3, #1
  409da0:	2b00      	cmp	r3, #0
  409da2:	d014      	beq.n	409dce <tcp_output_segment+0x7a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  409da4:	683b      	ldr	r3, [r7, #0]
  409da6:	3304      	adds	r3, #4
  409da8:	4619      	mov	r1, r3
  409daa:	f240 50b4 	movw	r0, #1460	; 0x5b4
  409dae:	4b46      	ldr	r3, [pc, #280]	; (409ec8 <tcp_output_segment+0x174>)
  409db0:	4798      	blx	r3
  409db2:	4603      	mov	r3, r0
  409db4:	827b      	strh	r3, [r7, #18]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  409db6:	8a7b      	ldrh	r3, [r7, #18]
  409db8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
  409dbc:	4618      	mov	r0, r3
  409dbe:	4b40      	ldr	r3, [pc, #256]	; (409ec0 <tcp_output_segment+0x16c>)
  409dc0:	4798      	blx	r3
  409dc2:	4602      	mov	r2, r0
  409dc4:	697b      	ldr	r3, [r7, #20]
  409dc6:	601a      	str	r2, [r3, #0]
    opts += 1;
  409dc8:	697b      	ldr	r3, [r7, #20]
  409dca:	3304      	adds	r3, #4
  409dcc:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  409dce:	683b      	ldr	r3, [r7, #0]
  409dd0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  409dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
  409dd8:	d102      	bne.n	409de0 <tcp_output_segment+0x8c>
    pcb->rtime = 0;
  409dda:	683b      	ldr	r3, [r7, #0]
  409ddc:	2200      	movs	r2, #0
  409dde:	869a      	strh	r2, [r3, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  409de0:	683b      	ldr	r3, [r7, #0]
  409de2:	2b00      	cmp	r3, #0
  409de4:	d003      	beq.n	409dee <tcp_output_segment+0x9a>
  409de6:	683b      	ldr	r3, [r7, #0]
  409de8:	681b      	ldr	r3, [r3, #0]
  409dea:	2b00      	cmp	r3, #0
  409dec:	d10c      	bne.n	409e08 <tcp_output_segment+0xb4>
    netif = ip_route(&(pcb->remote_ip));
  409dee:	683b      	ldr	r3, [r7, #0]
  409df0:	3304      	adds	r3, #4
  409df2:	4618      	mov	r0, r3
  409df4:	4b35      	ldr	r3, [pc, #212]	; (409ecc <tcp_output_segment+0x178>)
  409df6:	4798      	blx	r3
  409df8:	60f8      	str	r0, [r7, #12]
    if (netif == NULL) {
  409dfa:	68fb      	ldr	r3, [r7, #12]
  409dfc:	2b00      	cmp	r3, #0
  409dfe:	d05a      	beq.n	409eb6 <tcp_output_segment+0x162>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  409e00:	68fb      	ldr	r3, [r7, #12]
  409e02:	685a      	ldr	r2, [r3, #4]
  409e04:	683b      	ldr	r3, [r7, #0]
  409e06:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
  409e08:	683b      	ldr	r3, [r7, #0]
  409e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  409e0c:	2b00      	cmp	r3, #0
  409e0e:	d10c      	bne.n	409e2a <tcp_output_segment+0xd6>
    pcb->rttest = tcp_ticks;
  409e10:	4b2f      	ldr	r3, [pc, #188]	; (409ed0 <tcp_output_segment+0x17c>)
  409e12:	681a      	ldr	r2, [r3, #0]
  409e14:	683b      	ldr	r3, [r7, #0]
  409e16:	639a      	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  409e18:	687b      	ldr	r3, [r7, #4]
  409e1a:	68db      	ldr	r3, [r3, #12]
  409e1c:	685b      	ldr	r3, [r3, #4]
  409e1e:	4618      	mov	r0, r3
  409e20:	4b2c      	ldr	r3, [pc, #176]	; (409ed4 <tcp_output_segment+0x180>)
  409e22:	4798      	blx	r3
  409e24:	4602      	mov	r2, r0
  409e26:	683b      	ldr	r3, [r7, #0]
  409e28:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  409e2a:	687b      	ldr	r3, [r7, #4]
  409e2c:	68db      	ldr	r3, [r3, #12]
  409e2e:	461a      	mov	r2, r3
  409e30:	687b      	ldr	r3, [r7, #4]
  409e32:	685b      	ldr	r3, [r3, #4]
  409e34:	685b      	ldr	r3, [r3, #4]
  409e36:	1ad3      	subs	r3, r2, r3
  409e38:	817b      	strh	r3, [r7, #10]

  seg->p->len -= len;
  409e3a:	687b      	ldr	r3, [r7, #4]
  409e3c:	685b      	ldr	r3, [r3, #4]
  409e3e:	687a      	ldr	r2, [r7, #4]
  409e40:	6852      	ldr	r2, [r2, #4]
  409e42:	8951      	ldrh	r1, [r2, #10]
  409e44:	897a      	ldrh	r2, [r7, #10]
  409e46:	1a8a      	subs	r2, r1, r2
  409e48:	b292      	uxth	r2, r2
  409e4a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  409e4c:	687b      	ldr	r3, [r7, #4]
  409e4e:	685b      	ldr	r3, [r3, #4]
  409e50:	687a      	ldr	r2, [r7, #4]
  409e52:	6852      	ldr	r2, [r2, #4]
  409e54:	8911      	ldrh	r1, [r2, #8]
  409e56:	897a      	ldrh	r2, [r7, #10]
  409e58:	1a8a      	subs	r2, r1, r2
  409e5a:	b292      	uxth	r2, r2
  409e5c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  409e5e:	687b      	ldr	r3, [r7, #4]
  409e60:	685b      	ldr	r3, [r3, #4]
  409e62:	687a      	ldr	r2, [r7, #4]
  409e64:	68d2      	ldr	r2, [r2, #12]
  409e66:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  409e68:	687b      	ldr	r3, [r7, #4]
  409e6a:	68db      	ldr	r3, [r3, #12]
  409e6c:	2200      	movs	r2, #0
  409e6e:	741a      	strb	r2, [r3, #16]
  409e70:	2200      	movs	r2, #0
  409e72:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  409e74:	687b      	ldr	r3, [r7, #4]
  409e76:	68dc      	ldr	r4, [r3, #12]
  409e78:	687b      	ldr	r3, [r7, #4]
  409e7a:	6858      	ldr	r0, [r3, #4]
  409e7c:	6839      	ldr	r1, [r7, #0]
  409e7e:	683b      	ldr	r3, [r7, #0]
  409e80:	1d1a      	adds	r2, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
  409e82:	687b      	ldr	r3, [r7, #4]
  409e84:	685b      	ldr	r3, [r3, #4]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  409e86:	891b      	ldrh	r3, [r3, #8]
  409e88:	9300      	str	r3, [sp, #0]
  409e8a:	2306      	movs	r3, #6
  409e8c:	4d12      	ldr	r5, [pc, #72]	; (409ed8 <tcp_output_segment+0x184>)
  409e8e:	47a8      	blx	r5
  409e90:	4603      	mov	r3, r0
  409e92:	8223      	strh	r3, [r4, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  409e94:	687b      	ldr	r3, [r7, #4]
  409e96:	6858      	ldr	r0, [r3, #4]
  409e98:	6839      	ldr	r1, [r7, #0]
  409e9a:	683b      	ldr	r3, [r7, #0]
  409e9c:	1d1c      	adds	r4, r3, #4
  409e9e:	683b      	ldr	r3, [r7, #0]
  409ea0:	7a9d      	ldrb	r5, [r3, #10]
  409ea2:	683b      	ldr	r3, [r7, #0]
  409ea4:	7a5b      	ldrb	r3, [r3, #9]
  409ea6:	2206      	movs	r2, #6
  409ea8:	9201      	str	r2, [sp, #4]
  409eaa:	9300      	str	r3, [sp, #0]
  409eac:	462b      	mov	r3, r5
  409eae:	4622      	mov	r2, r4
  409eb0:	4c0a      	ldr	r4, [pc, #40]	; (409edc <tcp_output_segment+0x188>)
  409eb2:	47a0      	blx	r4
  409eb4:	e000      	b.n	409eb8 <tcp_output_segment+0x164>
      return;
  409eb6:	bf00      	nop
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
  409eb8:	3718      	adds	r7, #24
  409eba:	46bd      	mov	sp, r7
  409ebc:	bdb0      	pop	{r4, r5, r7, pc}
  409ebe:	bf00      	nop
  409ec0:	00401e65 	.word	0x00401e65
  409ec4:	00401e19 	.word	0x00401e19
  409ec8:	00406f8d 	.word	0x00406f8d
  409ecc:	00403d5d 	.word	0x00403d5d
  409ed0:	204043ec 	.word	0x204043ec
  409ed4:	00401e99 	.word	0x00401e99
  409ed8:	00403b89 	.word	0x00403b89
  409edc:	004041fd 	.word	0x004041fd

00409ee0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  409ee0:	b590      	push	{r4, r7, lr}
  409ee2:	b089      	sub	sp, #36	; 0x24
  409ee4:	af02      	add	r7, sp, #8
  409ee6:	60f8      	str	r0, [r7, #12]
  409ee8:	60b9      	str	r1, [r7, #8]
  409eea:	607a      	str	r2, [r7, #4]
  409eec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  409eee:	2200      	movs	r2, #0
  409ef0:	2114      	movs	r1, #20
  409ef2:	2001      	movs	r0, #1
  409ef4:	4b2f      	ldr	r3, [pc, #188]	; (409fb4 <tcp_rst+0xd4>)
  409ef6:	4798      	blx	r3
  409ef8:	6178      	str	r0, [r7, #20]
  if (p == NULL) {
  409efa:	697b      	ldr	r3, [r7, #20]
  409efc:	2b00      	cmp	r3, #0
  409efe:	d054      	beq.n	409faa <tcp_rst+0xca>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  409f00:	697b      	ldr	r3, [r7, #20]
  409f02:	685b      	ldr	r3, [r3, #4]
  409f04:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
  409f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  409f08:	4618      	mov	r0, r3
  409f0a:	4b2b      	ldr	r3, [pc, #172]	; (409fb8 <tcp_rst+0xd8>)
  409f0c:	4798      	blx	r3
  409f0e:	4603      	mov	r3, r0
  409f10:	461a      	mov	r2, r3
  409f12:	693b      	ldr	r3, [r7, #16]
  409f14:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = htons(remote_port);
  409f16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  409f18:	4618      	mov	r0, r3
  409f1a:	4b27      	ldr	r3, [pc, #156]	; (409fb8 <tcp_rst+0xd8>)
  409f1c:	4798      	blx	r3
  409f1e:	4603      	mov	r3, r0
  409f20:	461a      	mov	r2, r3
  409f22:	693b      	ldr	r3, [r7, #16]
  409f24:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = htonl(seqno);
  409f26:	68f8      	ldr	r0, [r7, #12]
  409f28:	4b24      	ldr	r3, [pc, #144]	; (409fbc <tcp_rst+0xdc>)
  409f2a:	4798      	blx	r3
  409f2c:	4602      	mov	r2, r0
  409f2e:	693b      	ldr	r3, [r7, #16]
  409f30:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = htonl(ackno);
  409f32:	68b8      	ldr	r0, [r7, #8]
  409f34:	4b21      	ldr	r3, [pc, #132]	; (409fbc <tcp_rst+0xdc>)
  409f36:	4798      	blx	r3
  409f38:	4602      	mov	r2, r0
  409f3a:	693b      	ldr	r3, [r7, #16]
  409f3c:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  409f3e:	f245 0014 	movw	r0, #20500	; 0x5014
  409f42:	4b1d      	ldr	r3, [pc, #116]	; (409fb8 <tcp_rst+0xd8>)
  409f44:	4798      	blx	r3
  409f46:	4603      	mov	r3, r0
  409f48:	461a      	mov	r2, r3
  409f4a:	693b      	ldr	r3, [r7, #16]
  409f4c:	819a      	strh	r2, [r3, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  409f4e:	693b      	ldr	r3, [r7, #16]
  409f50:	2200      	movs	r2, #0
  409f52:	f042 020b 	orr.w	r2, r2, #11
  409f56:	739a      	strb	r2, [r3, #14]
  409f58:	2200      	movs	r2, #0
  409f5a:	f042 0268 	orr.w	r2, r2, #104	; 0x68
  409f5e:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
  409f60:	693b      	ldr	r3, [r7, #16]
  409f62:	2200      	movs	r2, #0
  409f64:	741a      	strb	r2, [r3, #16]
  409f66:	2200      	movs	r2, #0
  409f68:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  409f6a:	693b      	ldr	r3, [r7, #16]
  409f6c:	2200      	movs	r2, #0
  409f6e:	749a      	strb	r2, [r3, #18]
  409f70:	2200      	movs	r2, #0
  409f72:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  409f74:	697b      	ldr	r3, [r7, #20]
  409f76:	891b      	ldrh	r3, [r3, #8]
  409f78:	9300      	str	r3, [sp, #0]
  409f7a:	2306      	movs	r3, #6
  409f7c:	683a      	ldr	r2, [r7, #0]
  409f7e:	6879      	ldr	r1, [r7, #4]
  409f80:	6978      	ldr	r0, [r7, #20]
  409f82:	4c0f      	ldr	r4, [pc, #60]	; (409fc0 <tcp_rst+0xe0>)
  409f84:	47a0      	blx	r4
  409f86:	4603      	mov	r3, r0
  409f88:	461a      	mov	r2, r3
  409f8a:	693b      	ldr	r3, [r7, #16]
  409f8c:	821a      	strh	r2, [r3, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  409f8e:	2306      	movs	r3, #6
  409f90:	9301      	str	r3, [sp, #4]
  409f92:	2300      	movs	r3, #0
  409f94:	9300      	str	r3, [sp, #0]
  409f96:	23ff      	movs	r3, #255	; 0xff
  409f98:	683a      	ldr	r2, [r7, #0]
  409f9a:	6879      	ldr	r1, [r7, #4]
  409f9c:	6978      	ldr	r0, [r7, #20]
  409f9e:	4c09      	ldr	r4, [pc, #36]	; (409fc4 <tcp_rst+0xe4>)
  409fa0:	47a0      	blx	r4
  pbuf_free(p);
  409fa2:	6978      	ldr	r0, [r7, #20]
  409fa4:	4b08      	ldr	r3, [pc, #32]	; (409fc8 <tcp_rst+0xe8>)
  409fa6:	4798      	blx	r3
  409fa8:	e000      	b.n	409fac <tcp_rst+0xcc>
      return;
  409faa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  409fac:	371c      	adds	r7, #28
  409fae:	46bd      	mov	sp, r7
  409fb0:	bd90      	pop	{r4, r7, pc}
  409fb2:	bf00      	nop
  409fb4:	0040565d 	.word	0x0040565d
  409fb8:	00401e19 	.word	0x00401e19
  409fbc:	00401e65 	.word	0x00401e65
  409fc0:	00403b89 	.word	0x00403b89
  409fc4:	004041fd 	.word	0x004041fd
  409fc8:	00405a01 	.word	0x00405a01

00409fcc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  409fcc:	b580      	push	{r7, lr}
  409fce:	b084      	sub	sp, #16
  409fd0:	af00      	add	r7, sp, #0
  409fd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  409fd4:	687b      	ldr	r3, [r7, #4]
  409fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409fd8:	2b00      	cmp	r3, #0
  409fda:	d024      	beq.n	40a026 <tcp_rexmit_rto+0x5a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  409fdc:	687b      	ldr	r3, [r7, #4]
  409fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409fe0:	60fb      	str	r3, [r7, #12]
  409fe2:	e002      	b.n	409fea <tcp_rexmit_rto+0x1e>
  409fe4:	68fb      	ldr	r3, [r7, #12]
  409fe6:	681b      	ldr	r3, [r3, #0]
  409fe8:	60fb      	str	r3, [r7, #12]
  409fea:	68fb      	ldr	r3, [r7, #12]
  409fec:	681b      	ldr	r3, [r3, #0]
  409fee:	2b00      	cmp	r3, #0
  409ff0:	d1f8      	bne.n	409fe4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  409ff2:	687b      	ldr	r3, [r7, #4]
  409ff4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  409ff6:	68fb      	ldr	r3, [r7, #12]
  409ff8:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  409ffa:	687b      	ldr	r3, [r7, #4]
  409ffc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  409ffe:	687b      	ldr	r3, [r7, #4]
  40a000:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  40a002:	687b      	ldr	r3, [r7, #4]
  40a004:	2200      	movs	r2, #0
  40a006:	671a      	str	r2, [r3, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  40a008:	687b      	ldr	r3, [r7, #4]
  40a00a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a00e:	3301      	adds	r3, #1
  40a010:	b2da      	uxtb	r2, r3
  40a012:	687b      	ldr	r3, [r7, #4]
  40a014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  40a018:	687b      	ldr	r3, [r7, #4]
  40a01a:	2200      	movs	r2, #0
  40a01c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  40a01e:	6878      	ldr	r0, [r7, #4]
  40a020:	4b03      	ldr	r3, [pc, #12]	; (40a030 <tcp_rexmit_rto+0x64>)
  40a022:	4798      	blx	r3
  40a024:	e000      	b.n	40a028 <tcp_rexmit_rto+0x5c>
    return;
  40a026:	bf00      	nop
}
  40a028:	3710      	adds	r7, #16
  40a02a:	46bd      	mov	sp, r7
  40a02c:	bd80      	pop	{r7, pc}
  40a02e:	bf00      	nop
  40a030:	00409a95 	.word	0x00409a95

0040a034 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  40a034:	b590      	push	{r4, r7, lr}
  40a036:	b085      	sub	sp, #20
  40a038:	af00      	add	r7, sp, #0
  40a03a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  40a03c:	687b      	ldr	r3, [r7, #4]
  40a03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a040:	2b00      	cmp	r3, #0
  40a042:	d03e      	beq.n	40a0c2 <tcp_rexmit+0x8e>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  40a044:	687b      	ldr	r3, [r7, #4]
  40a046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a048:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
  40a04a:	68bb      	ldr	r3, [r7, #8]
  40a04c:	681a      	ldr	r2, [r3, #0]
  40a04e:	687b      	ldr	r3, [r7, #4]
  40a050:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  40a052:	687b      	ldr	r3, [r7, #4]
  40a054:	336c      	adds	r3, #108	; 0x6c
  40a056:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
  40a058:	e002      	b.n	40a060 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  40a05a:	68fb      	ldr	r3, [r7, #12]
  40a05c:	681b      	ldr	r3, [r3, #0]
  40a05e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
  40a060:	68fb      	ldr	r3, [r7, #12]
  40a062:	681b      	ldr	r3, [r3, #0]
  40a064:	2b00      	cmp	r3, #0
  40a066:	d011      	beq.n	40a08c <tcp_rexmit+0x58>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40a068:	68fb      	ldr	r3, [r7, #12]
  40a06a:	681b      	ldr	r3, [r3, #0]
  40a06c:	68db      	ldr	r3, [r3, #12]
  40a06e:	685b      	ldr	r3, [r3, #4]
  40a070:	4618      	mov	r0, r3
  40a072:	4b16      	ldr	r3, [pc, #88]	; (40a0cc <tcp_rexmit+0x98>)
  40a074:	4798      	blx	r3
  40a076:	4604      	mov	r4, r0
  40a078:	68bb      	ldr	r3, [r7, #8]
  40a07a:	68db      	ldr	r3, [r3, #12]
  40a07c:	685b      	ldr	r3, [r3, #4]
  40a07e:	4618      	mov	r0, r3
  40a080:	4b12      	ldr	r3, [pc, #72]	; (40a0cc <tcp_rexmit+0x98>)
  40a082:	4798      	blx	r3
  40a084:	4603      	mov	r3, r0
  40a086:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
  40a088:	2b00      	cmp	r3, #0
  40a08a:	dbe6      	blt.n	40a05a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
  40a08c:	68fb      	ldr	r3, [r7, #12]
  40a08e:	681a      	ldr	r2, [r3, #0]
  40a090:	68bb      	ldr	r3, [r7, #8]
  40a092:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
  40a094:	68fb      	ldr	r3, [r7, #12]
  40a096:	68ba      	ldr	r2, [r7, #8]
  40a098:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  40a09a:	68bb      	ldr	r3, [r7, #8]
  40a09c:	681b      	ldr	r3, [r3, #0]
  40a09e:	2b00      	cmp	r3, #0
  40a0a0:	d103      	bne.n	40a0aa <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40a0a2:	687b      	ldr	r3, [r7, #4]
  40a0a4:	2200      	movs	r2, #0
  40a0a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  40a0aa:	687b      	ldr	r3, [r7, #4]
  40a0ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a0b0:	3301      	adds	r3, #1
  40a0b2:	b2da      	uxtb	r2, r3
  40a0b4:	687b      	ldr	r3, [r7, #4]
  40a0b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  40a0ba:	687b      	ldr	r3, [r7, #4]
  40a0bc:	2200      	movs	r2, #0
  40a0be:	639a      	str	r2, [r3, #56]	; 0x38
  40a0c0:	e000      	b.n	40a0c4 <tcp_rexmit+0x90>
    return;
  40a0c2:	bf00      	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  40a0c4:	3714      	adds	r7, #20
  40a0c6:	46bd      	mov	sp, r7
  40a0c8:	bd90      	pop	{r4, r7, pc}
  40a0ca:	bf00      	nop
  40a0cc:	00401e99 	.word	0x00401e99

0040a0d0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  40a0d0:	b580      	push	{r7, lr}
  40a0d2:	b082      	sub	sp, #8
  40a0d4:	af00      	add	r7, sp, #0
  40a0d6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  40a0d8:	687b      	ldr	r3, [r7, #4]
  40a0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a0dc:	2b00      	cmp	r3, #0
  40a0de:	d046      	beq.n	40a16e <tcp_rexmit_fast+0x9e>
  40a0e0:	687b      	ldr	r3, [r7, #4]
  40a0e2:	7f9b      	ldrb	r3, [r3, #30]
  40a0e4:	f003 0304 	and.w	r3, r3, #4
  40a0e8:	2b00      	cmp	r3, #0
  40a0ea:	d140      	bne.n	40a16e <tcp_rexmit_fast+0x9e>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  40a0ec:	6878      	ldr	r0, [r7, #4]
  40a0ee:	4b22      	ldr	r3, [pc, #136]	; (40a178 <tcp_rexmit_fast+0xa8>)
  40a0f0:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  40a0f2:	687b      	ldr	r3, [r7, #4]
  40a0f4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40a0f8:	687b      	ldr	r3, [r7, #4]
  40a0fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a0fe:	429a      	cmp	r2, r3
  40a100:	d908      	bls.n	40a114 <tcp_rexmit_fast+0x44>
      pcb->ssthresh = pcb->snd_wnd / 2;
  40a102:	687b      	ldr	r3, [r7, #4]
  40a104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a108:	085b      	lsrs	r3, r3, #1
  40a10a:	b29a      	uxth	r2, r3
  40a10c:	687b      	ldr	r3, [r7, #4]
  40a10e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  40a112:	e007      	b.n	40a124 <tcp_rexmit_fast+0x54>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
  40a114:	687b      	ldr	r3, [r7, #4]
  40a116:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40a11a:	085b      	lsrs	r3, r3, #1
  40a11c:	b29a      	uxth	r2, r3
  40a11e:	687b      	ldr	r3, [r7, #4]
  40a120:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  40a124:	687b      	ldr	r3, [r7, #4]
  40a126:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  40a12a:	461a      	mov	r2, r3
  40a12c:	687b      	ldr	r3, [r7, #4]
  40a12e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a130:	005b      	lsls	r3, r3, #1
  40a132:	429a      	cmp	r2, r3
  40a134:	da06      	bge.n	40a144 <tcp_rexmit_fast+0x74>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  40a136:	687b      	ldr	r3, [r7, #4]
  40a138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a13a:	005b      	lsls	r3, r3, #1
  40a13c:	b29a      	uxth	r2, r3
  40a13e:	687b      	ldr	r3, [r7, #4]
  40a140:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  40a144:	687b      	ldr	r3, [r7, #4]
  40a146:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  40a14a:	687b      	ldr	r3, [r7, #4]
  40a14c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a14e:	4619      	mov	r1, r3
  40a150:	0049      	lsls	r1, r1, #1
  40a152:	440b      	add	r3, r1
  40a154:	b29b      	uxth	r3, r3
  40a156:	4413      	add	r3, r2
  40a158:	b29a      	uxth	r2, r3
  40a15a:	687b      	ldr	r3, [r7, #4]
  40a15c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  40a160:	687b      	ldr	r3, [r7, #4]
  40a162:	7f9b      	ldrb	r3, [r3, #30]
  40a164:	f043 0304 	orr.w	r3, r3, #4
  40a168:	b2da      	uxtb	r2, r3
  40a16a:	687b      	ldr	r3, [r7, #4]
  40a16c:	779a      	strb	r2, [r3, #30]
  } 
}
  40a16e:	bf00      	nop
  40a170:	3708      	adds	r7, #8
  40a172:	46bd      	mov	sp, r7
  40a174:	bd80      	pop	{r7, pc}
  40a176:	bf00      	nop
  40a178:	0040a035 	.word	0x0040a035

0040a17c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  40a17c:	b590      	push	{r4, r7, lr}
  40a17e:	b087      	sub	sp, #28
  40a180:	af02      	add	r7, sp, #8
  40a182:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  40a184:	687b      	ldr	r3, [r7, #4]
  40a186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40a188:	3b01      	subs	r3, #1
  40a18a:	4618      	mov	r0, r3
  40a18c:	4b18      	ldr	r3, [pc, #96]	; (40a1f0 <tcp_keepalive+0x74>)
  40a18e:	4798      	blx	r3
  40a190:	4603      	mov	r3, r0
  40a192:	2200      	movs	r2, #0
  40a194:	2100      	movs	r1, #0
  40a196:	6878      	ldr	r0, [r7, #4]
  40a198:	4c16      	ldr	r4, [pc, #88]	; (40a1f4 <tcp_keepalive+0x78>)
  40a19a:	47a0      	blx	r4
  40a19c:	60f8      	str	r0, [r7, #12]
  if(p == NULL) {
  40a19e:	68fb      	ldr	r3, [r7, #12]
  40a1a0:	2b00      	cmp	r3, #0
  40a1a2:	d021      	beq.n	40a1e8 <tcp_keepalive+0x6c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a1a4:	68fb      	ldr	r3, [r7, #12]
  40a1a6:	685b      	ldr	r3, [r3, #4]
  40a1a8:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a1aa:	6879      	ldr	r1, [r7, #4]
  40a1ac:	687b      	ldr	r3, [r7, #4]
  40a1ae:	1d1a      	adds	r2, r3, #4
  40a1b0:	68fb      	ldr	r3, [r7, #12]
  40a1b2:	891b      	ldrh	r3, [r3, #8]
  40a1b4:	9300      	str	r3, [sp, #0]
  40a1b6:	2306      	movs	r3, #6
  40a1b8:	68f8      	ldr	r0, [r7, #12]
  40a1ba:	4c0f      	ldr	r4, [pc, #60]	; (40a1f8 <tcp_keepalive+0x7c>)
  40a1bc:	47a0      	blx	r4
  40a1be:	4603      	mov	r3, r0
  40a1c0:	461a      	mov	r2, r3
  40a1c2:	68bb      	ldr	r3, [r7, #8]
  40a1c4:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a1c6:	6879      	ldr	r1, [r7, #4]
  40a1c8:	687b      	ldr	r3, [r7, #4]
  40a1ca:	1d1a      	adds	r2, r3, #4
  40a1cc:	687b      	ldr	r3, [r7, #4]
  40a1ce:	7a98      	ldrb	r0, [r3, #10]
  40a1d0:	2306      	movs	r3, #6
  40a1d2:	9301      	str	r3, [sp, #4]
  40a1d4:	2300      	movs	r3, #0
  40a1d6:	9300      	str	r3, [sp, #0]
  40a1d8:	4603      	mov	r3, r0
  40a1da:	68f8      	ldr	r0, [r7, #12]
  40a1dc:	4c07      	ldr	r4, [pc, #28]	; (40a1fc <tcp_keepalive+0x80>)
  40a1de:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a1e0:	68f8      	ldr	r0, [r7, #12]
  40a1e2:	4b07      	ldr	r3, [pc, #28]	; (40a200 <tcp_keepalive+0x84>)
  40a1e4:	4798      	blx	r3
  40a1e6:	e000      	b.n	40a1ea <tcp_keepalive+0x6e>
    return;
  40a1e8:	bf00      	nop

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a1ea:	3714      	adds	r7, #20
  40a1ec:	46bd      	mov	sp, r7
  40a1ee:	bd90      	pop	{r4, r7, pc}
  40a1f0:	00401e65 	.word	0x00401e65
  40a1f4:	0040906d 	.word	0x0040906d
  40a1f8:	00403b89 	.word	0x00403b89
  40a1fc:	004041fd 	.word	0x004041fd
  40a200:	00405a01 	.word	0x00405a01

0040a204 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  40a204:	b590      	push	{r4, r7, lr}
  40a206:	b08b      	sub	sp, #44	; 0x2c
  40a208:	af02      	add	r7, sp, #8
  40a20a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  40a20c:	687b      	ldr	r3, [r7, #4]
  40a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a210:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
  40a212:	69fb      	ldr	r3, [r7, #28]
  40a214:	2b00      	cmp	r3, #0
  40a216:	d102      	bne.n	40a21e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
  40a218:	687b      	ldr	r3, [r7, #4]
  40a21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a21c:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
  40a21e:	69fb      	ldr	r3, [r7, #28]
  40a220:	2b00      	cmp	r3, #0
  40a222:	d06e      	beq.n	40a302 <tcp_zero_window_probe+0xfe>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  40a224:	69fb      	ldr	r3, [r7, #28]
  40a226:	68db      	ldr	r3, [r3, #12]
  40a228:	899b      	ldrh	r3, [r3, #12]
  40a22a:	b29b      	uxth	r3, r3
  40a22c:	4618      	mov	r0, r3
  40a22e:	4b38      	ldr	r3, [pc, #224]	; (40a310 <tcp_zero_window_probe+0x10c>)
  40a230:	4798      	blx	r3
  40a232:	4603      	mov	r3, r0
  40a234:	f003 0301 	and.w	r3, r3, #1
  40a238:	2b00      	cmp	r3, #0
  40a23a:	d005      	beq.n	40a248 <tcp_zero_window_probe+0x44>
  40a23c:	69fb      	ldr	r3, [r7, #28]
  40a23e:	891b      	ldrh	r3, [r3, #8]
  40a240:	2b00      	cmp	r3, #0
  40a242:	d101      	bne.n	40a248 <tcp_zero_window_probe+0x44>
  40a244:	2301      	movs	r3, #1
  40a246:	e000      	b.n	40a24a <tcp_zero_window_probe+0x46>
  40a248:	2300      	movs	r3, #0
  40a24a:	76fb      	strb	r3, [r7, #27]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  40a24c:	7efb      	ldrb	r3, [r7, #27]
  40a24e:	2b00      	cmp	r3, #0
  40a250:	bf0c      	ite	eq
  40a252:	2301      	moveq	r3, #1
  40a254:	2300      	movne	r3, #0
  40a256:	b2db      	uxtb	r3, r3
  40a258:	833b      	strh	r3, [r7, #24]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  40a25a:	69fb      	ldr	r3, [r7, #28]
  40a25c:	68db      	ldr	r3, [r3, #12]
  40a25e:	685b      	ldr	r3, [r3, #4]
  40a260:	8b3a      	ldrh	r2, [r7, #24]
  40a262:	2100      	movs	r1, #0
  40a264:	6878      	ldr	r0, [r7, #4]
  40a266:	4c2b      	ldr	r4, [pc, #172]	; (40a314 <tcp_zero_window_probe+0x110>)
  40a268:	47a0      	blx	r4
  40a26a:	6178      	str	r0, [r7, #20]
  if(p == NULL) {
  40a26c:	697b      	ldr	r3, [r7, #20]
  40a26e:	2b00      	cmp	r3, #0
  40a270:	d049      	beq.n	40a306 <tcp_zero_window_probe+0x102>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a272:	697b      	ldr	r3, [r7, #20]
  40a274:	685b      	ldr	r3, [r3, #4]
  40a276:	613b      	str	r3, [r7, #16]

  if (is_fin) {
  40a278:	7efb      	ldrb	r3, [r7, #27]
  40a27a:	2b00      	cmp	r3, #0
  40a27c:	d011      	beq.n	40a2a2 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  40a27e:	693b      	ldr	r3, [r7, #16]
  40a280:	899b      	ldrh	r3, [r3, #12]
  40a282:	b29b      	uxth	r3, r3
  40a284:	b21b      	sxth	r3, r3
  40a286:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  40a28a:	b21c      	sxth	r4, r3
  40a28c:	2011      	movs	r0, #17
  40a28e:	4b22      	ldr	r3, [pc, #136]	; (40a318 <tcp_zero_window_probe+0x114>)
  40a290:	4798      	blx	r3
  40a292:	4603      	mov	r3, r0
  40a294:	b21b      	sxth	r3, r3
  40a296:	4323      	orrs	r3, r4
  40a298:	b21b      	sxth	r3, r3
  40a29a:	b29a      	uxth	r2, r3
  40a29c:	693b      	ldr	r3, [r7, #16]
  40a29e:	819a      	strh	r2, [r3, #12]
  40a2a0:	e010      	b.n	40a2c4 <tcp_zero_window_probe+0xc0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  40a2a2:	697b      	ldr	r3, [r7, #20]
  40a2a4:	685b      	ldr	r3, [r3, #4]
  40a2a6:	3314      	adds	r3, #20
  40a2a8:	60fb      	str	r3, [r7, #12]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  40a2aa:	69fb      	ldr	r3, [r7, #28]
  40a2ac:	6858      	ldr	r0, [r3, #4]
  40a2ae:	69fb      	ldr	r3, [r7, #28]
  40a2b0:	685b      	ldr	r3, [r3, #4]
  40a2b2:	891a      	ldrh	r2, [r3, #8]
  40a2b4:	69fb      	ldr	r3, [r7, #28]
  40a2b6:	891b      	ldrh	r3, [r3, #8]
  40a2b8:	1ad3      	subs	r3, r2, r3
  40a2ba:	b29b      	uxth	r3, r3
  40a2bc:	2201      	movs	r2, #1
  40a2be:	68f9      	ldr	r1, [r7, #12]
  40a2c0:	4c16      	ldr	r4, [pc, #88]	; (40a31c <tcp_zero_window_probe+0x118>)
  40a2c2:	47a0      	blx	r4
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a2c4:	6879      	ldr	r1, [r7, #4]
  40a2c6:	687b      	ldr	r3, [r7, #4]
  40a2c8:	1d1a      	adds	r2, r3, #4
  40a2ca:	697b      	ldr	r3, [r7, #20]
  40a2cc:	891b      	ldrh	r3, [r3, #8]
  40a2ce:	9300      	str	r3, [sp, #0]
  40a2d0:	2306      	movs	r3, #6
  40a2d2:	6978      	ldr	r0, [r7, #20]
  40a2d4:	4c12      	ldr	r4, [pc, #72]	; (40a320 <tcp_zero_window_probe+0x11c>)
  40a2d6:	47a0      	blx	r4
  40a2d8:	4603      	mov	r3, r0
  40a2da:	461a      	mov	r2, r3
  40a2dc:	693b      	ldr	r3, [r7, #16]
  40a2de:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a2e0:	6879      	ldr	r1, [r7, #4]
  40a2e2:	687b      	ldr	r3, [r7, #4]
  40a2e4:	1d1a      	adds	r2, r3, #4
  40a2e6:	687b      	ldr	r3, [r7, #4]
  40a2e8:	7a98      	ldrb	r0, [r3, #10]
  40a2ea:	2306      	movs	r3, #6
  40a2ec:	9301      	str	r3, [sp, #4]
  40a2ee:	2300      	movs	r3, #0
  40a2f0:	9300      	str	r3, [sp, #0]
  40a2f2:	4603      	mov	r3, r0
  40a2f4:	6978      	ldr	r0, [r7, #20]
  40a2f6:	4c0b      	ldr	r4, [pc, #44]	; (40a324 <tcp_zero_window_probe+0x120>)
  40a2f8:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a2fa:	6978      	ldr	r0, [r7, #20]
  40a2fc:	4b0a      	ldr	r3, [pc, #40]	; (40a328 <tcp_zero_window_probe+0x124>)
  40a2fe:	4798      	blx	r3
  40a300:	e002      	b.n	40a308 <tcp_zero_window_probe+0x104>
    return;
  40a302:	bf00      	nop
  40a304:	e000      	b.n	40a308 <tcp_zero_window_probe+0x104>
    return;
  40a306:	bf00      	nop

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a308:	3724      	adds	r7, #36	; 0x24
  40a30a:	46bd      	mov	sp, r7
  40a30c:	bd90      	pop	{r4, r7, pc}
  40a30e:	bf00      	nop
  40a310:	00401e45 	.word	0x00401e45
  40a314:	0040906d 	.word	0x0040906d
  40a318:	00401e19 	.word	0x00401e19
  40a31c:	00405c71 	.word	0x00405c71
  40a320:	00403b89 	.word	0x00403b89
  40a324:	004041fd 	.word	0x004041fd
  40a328:	00405a01 	.word	0x00405a01

0040a32c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  40a32c:	b480      	push	{r7}
  40a32e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  40a330:	bf00      	nop
  40a332:	46bd      	mov	sp, r7
  40a334:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a338:	4770      	bx	lr
	...

0040a33c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  40a33c:	b480      	push	{r7}
  40a33e:	b083      	sub	sp, #12
  40a340:	af00      	add	r7, sp, #0
  u16_t n = 0;
  40a342:	2300      	movs	r3, #0
  40a344:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  40a346:	4b17      	ldr	r3, [pc, #92]	; (40a3a4 <udp_new_port+0x68>)
  40a348:	881b      	ldrh	r3, [r3, #0]
  40a34a:	1c5a      	adds	r2, r3, #1
  40a34c:	b291      	uxth	r1, r2
  40a34e:	4a15      	ldr	r2, [pc, #84]	; (40a3a4 <udp_new_port+0x68>)
  40a350:	8011      	strh	r1, [r2, #0]
  40a352:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40a356:	4293      	cmp	r3, r2
  40a358:	d103      	bne.n	40a362 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  40a35a:	4b12      	ldr	r3, [pc, #72]	; (40a3a4 <udp_new_port+0x68>)
  40a35c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  40a360:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a362:	4b11      	ldr	r3, [pc, #68]	; (40a3a8 <udp_new_port+0x6c>)
  40a364:	681b      	ldr	r3, [r3, #0]
  40a366:	603b      	str	r3, [r7, #0]
  40a368:	e011      	b.n	40a38e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
  40a36a:	683b      	ldr	r3, [r7, #0]
  40a36c:	8a5a      	ldrh	r2, [r3, #18]
  40a36e:	4b0d      	ldr	r3, [pc, #52]	; (40a3a4 <udp_new_port+0x68>)
  40a370:	881b      	ldrh	r3, [r3, #0]
  40a372:	429a      	cmp	r2, r3
  40a374:	d108      	bne.n	40a388 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  40a376:	88fb      	ldrh	r3, [r7, #6]
  40a378:	3301      	adds	r3, #1
  40a37a:	80fb      	strh	r3, [r7, #6]
  40a37c:	88fb      	ldrh	r3, [r7, #6]
  40a37e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40a382:	d3e0      	bcc.n	40a346 <udp_new_port+0xa>
        return 0;
  40a384:	2300      	movs	r3, #0
  40a386:	e007      	b.n	40a398 <udp_new_port+0x5c>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a388:	683b      	ldr	r3, [r7, #0]
  40a38a:	68db      	ldr	r3, [r3, #12]
  40a38c:	603b      	str	r3, [r7, #0]
  40a38e:	683b      	ldr	r3, [r7, #0]
  40a390:	2b00      	cmp	r3, #0
  40a392:	d1ea      	bne.n	40a36a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
  40a394:	4b03      	ldr	r3, [pc, #12]	; (40a3a4 <udp_new_port+0x68>)
  40a396:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
  40a398:	4618      	mov	r0, r3
  40a39a:	370c      	adds	r7, #12
  40a39c:	46bd      	mov	sp, r7
  40a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a3a2:	4770      	bx	lr
  40a3a4:	20400014 	.word	0x20400014
  40a3a8:	20404404 	.word	0x20404404

0040a3ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  40a3ac:	b590      	push	{r4, r7, lr}
  40a3ae:	b08d      	sub	sp, #52	; 0x34
  40a3b0:	af02      	add	r7, sp, #8
  40a3b2:	6078      	str	r0, [r7, #4]
  40a3b4:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  40a3b6:	687b      	ldr	r3, [r7, #4]
  40a3b8:	685b      	ldr	r3, [r3, #4]
  40a3ba:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  40a3bc:	687b      	ldr	r3, [r7, #4]
  40a3be:	891b      	ldrh	r3, [r3, #8]
  40a3c0:	461a      	mov	r2, r3
  40a3c2:	697b      	ldr	r3, [r7, #20]
  40a3c4:	781b      	ldrb	r3, [r3, #0]
  40a3c6:	f003 030f 	and.w	r3, r3, #15
  40a3ca:	3302      	adds	r3, #2
  40a3cc:	009b      	lsls	r3, r3, #2
  40a3ce:	429a      	cmp	r2, r3
  40a3d0:	db11      	blt.n	40a3f6 <udp_input+0x4a>
  40a3d2:	697b      	ldr	r3, [r7, #20]
  40a3d4:	781b      	ldrb	r3, [r3, #0]
  40a3d6:	b29b      	uxth	r3, r3
  40a3d8:	f003 030f 	and.w	r3, r3, #15
  40a3dc:	b29b      	uxth	r3, r3
  40a3de:	009b      	lsls	r3, r3, #2
  40a3e0:	b29b      	uxth	r3, r3
  40a3e2:	425b      	negs	r3, r3
  40a3e4:	b29b      	uxth	r3, r3
  40a3e6:	b21b      	sxth	r3, r3
  40a3e8:	4619      	mov	r1, r3
  40a3ea:	6878      	ldr	r0, [r7, #4]
  40a3ec:	4b92      	ldr	r3, [pc, #584]	; (40a638 <udp_input+0x28c>)
  40a3ee:	4798      	blx	r3
  40a3f0:	4603      	mov	r3, r0
  40a3f2:	2b00      	cmp	r3, #0
  40a3f4:	d003      	beq.n	40a3fe <udp_input+0x52>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  40a3f6:	6878      	ldr	r0, [r7, #4]
  40a3f8:	4b90      	ldr	r3, [pc, #576]	; (40a63c <udp_input+0x290>)
  40a3fa:	4798      	blx	r3
    goto end;
  40a3fc:	e131      	b.n	40a662 <udp_input+0x2b6>
  }

  udphdr = (struct udp_hdr *)p->payload;
  40a3fe:	687b      	ldr	r3, [r7, #4]
  40a400:	685b      	ldr	r3, [r3, #4]
  40a402:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  40a404:	4b8e      	ldr	r3, [pc, #568]	; (40a640 <udp_input+0x294>)
  40a406:	681b      	ldr	r3, [r3, #0]
  40a408:	6839      	ldr	r1, [r7, #0]
  40a40a:	4618      	mov	r0, r3
  40a40c:	4b8d      	ldr	r3, [pc, #564]	; (40a644 <udp_input+0x298>)
  40a40e:	4798      	blx	r3
  40a410:	4603      	mov	r3, r0
  40a412:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  40a414:	693b      	ldr	r3, [r7, #16]
  40a416:	881b      	ldrh	r3, [r3, #0]
  40a418:	b29b      	uxth	r3, r3
  40a41a:	4618      	mov	r0, r3
  40a41c:	4b8a      	ldr	r3, [pc, #552]	; (40a648 <udp_input+0x29c>)
  40a41e:	4798      	blx	r3
  40a420:	4603      	mov	r3, r0
  40a422:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
  40a424:	693b      	ldr	r3, [r7, #16]
  40a426:	885b      	ldrh	r3, [r3, #2]
  40a428:	b29b      	uxth	r3, r3
  40a42a:	4618      	mov	r0, r3
  40a42c:	4b86      	ldr	r3, [pc, #536]	; (40a648 <udp_input+0x29c>)
  40a42e:	4798      	blx	r3
  40a430:	4603      	mov	r3, r0
  40a432:	817b      	strh	r3, [r7, #10]
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
  40a434:	2300      	movs	r3, #0
  40a436:	627b      	str	r3, [r7, #36]	; 0x24
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
  40a438:	897b      	ldrh	r3, [r7, #10]
  40a43a:	2b44      	cmp	r3, #68	; 0x44
  40a43c:	d127      	bne.n	40a48e <udp_input+0xe2>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
  40a43e:	89bb      	ldrh	r3, [r7, #12]
  40a440:	2b43      	cmp	r3, #67	; 0x43
  40a442:	f040 809a 	bne.w	40a57a <udp_input+0x1ce>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
  40a446:	683b      	ldr	r3, [r7, #0]
  40a448:	6a1b      	ldr	r3, [r3, #32]
  40a44a:	2b00      	cmp	r3, #0
  40a44c:	f000 8095 	beq.w	40a57a <udp_input+0x1ce>
  40a450:	683b      	ldr	r3, [r7, #0]
  40a452:	6a1b      	ldr	r3, [r3, #32]
  40a454:	685b      	ldr	r3, [r3, #4]
  40a456:	2b00      	cmp	r3, #0
  40a458:	f000 808f 	beq.w	40a57a <udp_input+0x1ce>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40a45c:	683b      	ldr	r3, [r7, #0]
  40a45e:	6a1b      	ldr	r3, [r3, #32]
  40a460:	685b      	ldr	r3, [r3, #4]
  40a462:	3304      	adds	r3, #4
  40a464:	2b00      	cmp	r3, #0
  40a466:	d00d      	beq.n	40a484 <udp_input+0xd8>
  40a468:	683b      	ldr	r3, [r7, #0]
  40a46a:	6a1b      	ldr	r3, [r3, #32]
  40a46c:	685b      	ldr	r3, [r3, #4]
  40a46e:	685b      	ldr	r3, [r3, #4]
  40a470:	2b00      	cmp	r3, #0
  40a472:	d007      	beq.n	40a484 <udp_input+0xd8>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
  40a474:	683b      	ldr	r3, [r7, #0]
  40a476:	6a1b      	ldr	r3, [r3, #32]
  40a478:	685b      	ldr	r3, [r3, #4]
  40a47a:	685a      	ldr	r2, [r3, #4]
  40a47c:	4b73      	ldr	r3, [pc, #460]	; (40a64c <udp_input+0x2a0>)
  40a47e:	681b      	ldr	r3, [r3, #0]
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40a480:	429a      	cmp	r2, r3
  40a482:	d17a      	bne.n	40a57a <udp_input+0x1ce>
          pcb = inp->dhcp->pcb;
  40a484:	683b      	ldr	r3, [r7, #0]
  40a486:	6a1b      	ldr	r3, [r3, #32]
  40a488:	685b      	ldr	r3, [r3, #4]
  40a48a:	627b      	str	r3, [r7, #36]	; 0x24
  40a48c:	e075      	b.n	40a57a <udp_input+0x1ce>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
  40a48e:	2300      	movs	r3, #0
  40a490:	623b      	str	r3, [r7, #32]
    local_match = 0;
  40a492:	2300      	movs	r3, #0
  40a494:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
  40a496:	2300      	movs	r3, #0
  40a498:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a49a:	4b6d      	ldr	r3, [pc, #436]	; (40a650 <udp_input+0x2a4>)
  40a49c:	681b      	ldr	r3, [r3, #0]
  40a49e:	627b      	str	r3, [r7, #36]	; 0x24
  40a4a0:	e061      	b.n	40a566 <udp_input+0x1ba>
      local_match = 0;
  40a4a2:	2300      	movs	r3, #0
  40a4a4:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
  40a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4a8:	8a5b      	ldrh	r3, [r3, #18]
  40a4aa:	897a      	ldrh	r2, [r7, #10]
  40a4ac:	429a      	cmp	r2, r3
  40a4ae:	d130      	bne.n	40a512 <udp_input+0x166>
        if (
  40a4b0:	7bfb      	ldrb	r3, [r7, #15]
  40a4b2:	2b00      	cmp	r3, #0
  40a4b4:	d106      	bne.n	40a4c4 <udp_input+0x118>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4b8:	2b00      	cmp	r3, #0
  40a4ba:	d01d      	beq.n	40a4f8 <udp_input+0x14c>
  40a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4be:	681b      	ldr	r3, [r3, #0]
  40a4c0:	2b00      	cmp	r3, #0
  40a4c2:	d019      	beq.n	40a4f8 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4c6:	681a      	ldr	r2, [r3, #0]
  40a4c8:	4b5d      	ldr	r3, [pc, #372]	; (40a640 <udp_input+0x294>)
  40a4ca:	681b      	ldr	r3, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40a4cc:	429a      	cmp	r2, r3
  40a4ce:	d013      	beq.n	40a4f8 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40a4d0:	7bfb      	ldrb	r3, [r7, #15]
  40a4d2:	2b00      	cmp	r3, #0
  40a4d4:	d01d      	beq.n	40a512 <udp_input+0x166>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
  40a4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            (broadcast &&
  40a4d8:	2b00      	cmp	r3, #0
  40a4da:	d00d      	beq.n	40a4f8 <udp_input+0x14c>
             (ip_addr_isany(&pcb->local_ip) ||
  40a4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4de:	681b      	ldr	r3, [r3, #0]
  40a4e0:	2b00      	cmp	r3, #0
  40a4e2:	d009      	beq.n	40a4f8 <udp_input+0x14c>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  40a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a4e6:	681a      	ldr	r2, [r3, #0]
  40a4e8:	4b55      	ldr	r3, [pc, #340]	; (40a640 <udp_input+0x294>)
  40a4ea:	681b      	ldr	r3, [r3, #0]
  40a4ec:	405a      	eors	r2, r3
  40a4ee:	683b      	ldr	r3, [r7, #0]
  40a4f0:	689b      	ldr	r3, [r3, #8]
  40a4f2:	4013      	ands	r3, r2
             (ip_addr_isany(&pcb->local_ip) ||
  40a4f4:	2b00      	cmp	r3, #0
  40a4f6:	d10c      	bne.n	40a512 <udp_input+0x166>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
  40a4f8:	2301      	movs	r3, #1
  40a4fa:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
  40a4fc:	69fb      	ldr	r3, [r7, #28]
  40a4fe:	2b00      	cmp	r3, #0
  40a500:	d107      	bne.n	40a512 <udp_input+0x166>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
  40a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a504:	7c1b      	ldrb	r3, [r3, #16]
  40a506:	f003 0304 	and.w	r3, r3, #4
          if ((uncon_pcb == NULL) && 
  40a50a:	2b00      	cmp	r3, #0
  40a50c:	d101      	bne.n	40a512 <udp_input+0x166>
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
  40a50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a510:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  40a512:	7efb      	ldrb	r3, [r7, #27]
  40a514:	2b00      	cmp	r3, #0
  40a516:	d021      	beq.n	40a55c <udp_input+0x1b0>
          (pcb->remote_port == src) &&
  40a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a51a:	8a9b      	ldrh	r3, [r3, #20]
      if ((local_match != 0) &&
  40a51c:	89ba      	ldrh	r2, [r7, #12]
  40a51e:	429a      	cmp	r2, r3
  40a520:	d11c      	bne.n	40a55c <udp_input+0x1b0>
          (ip_addr_isany(&pcb->remote_ip) ||
  40a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a524:	3304      	adds	r3, #4
          (pcb->remote_port == src) &&
  40a526:	2b00      	cmp	r3, #0
  40a528:	d009      	beq.n	40a53e <udp_input+0x192>
          (ip_addr_isany(&pcb->remote_ip) ||
  40a52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a52c:	685b      	ldr	r3, [r3, #4]
  40a52e:	2b00      	cmp	r3, #0
  40a530:	d005      	beq.n	40a53e <udp_input+0x192>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  40a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a534:	685a      	ldr	r2, [r3, #4]
  40a536:	4b45      	ldr	r3, [pc, #276]	; (40a64c <udp_input+0x2a0>)
  40a538:	681b      	ldr	r3, [r3, #0]
          (ip_addr_isany(&pcb->remote_ip) ||
  40a53a:	429a      	cmp	r2, r3
  40a53c:	d10e      	bne.n	40a55c <udp_input+0x1b0>
        /* the first fully matching PCB */
        if (prev != NULL) {
  40a53e:	6a3b      	ldr	r3, [r7, #32]
  40a540:	2b00      	cmp	r3, #0
  40a542:	d014      	beq.n	40a56e <udp_input+0x1c2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  40a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a546:	68da      	ldr	r2, [r3, #12]
  40a548:	6a3b      	ldr	r3, [r7, #32]
  40a54a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  40a54c:	4b40      	ldr	r3, [pc, #256]	; (40a650 <udp_input+0x2a4>)
  40a54e:	681a      	ldr	r2, [r3, #0]
  40a550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a552:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
  40a554:	4a3e      	ldr	r2, [pc, #248]	; (40a650 <udp_input+0x2a4>)
  40a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a558:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  40a55a:	e008      	b.n	40a56e <udp_input+0x1c2>
      }
      prev = pcb;
  40a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a55e:	623b      	str	r3, [r7, #32]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a562:	68db      	ldr	r3, [r3, #12]
  40a564:	627b      	str	r3, [r7, #36]	; 0x24
  40a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a568:	2b00      	cmp	r3, #0
  40a56a:	d19a      	bne.n	40a4a2 <udp_input+0xf6>
  40a56c:	e000      	b.n	40a570 <udp_input+0x1c4>
        break;
  40a56e:	bf00      	nop
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
  40a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a572:	2b00      	cmp	r3, #0
  40a574:	d101      	bne.n	40a57a <udp_input+0x1ce>
      pcb = uncon_pcb;
  40a576:	69fb      	ldr	r3, [r7, #28]
  40a578:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  40a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a57c:	2b00      	cmp	r3, #0
  40a57e:	d105      	bne.n	40a58c <udp_input+0x1e0>
  40a580:	683b      	ldr	r3, [r7, #0]
  40a582:	685a      	ldr	r2, [r3, #4]
  40a584:	4b2e      	ldr	r3, [pc, #184]	; (40a640 <udp_input+0x294>)
  40a586:	681b      	ldr	r3, [r3, #0]
  40a588:	429a      	cmp	r2, r3
  40a58a:	d167      	bne.n	40a65c <udp_input+0x2b0>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  40a58c:	693b      	ldr	r3, [r7, #16]
  40a58e:	88db      	ldrh	r3, [r3, #6]
  40a590:	b29b      	uxth	r3, r3
  40a592:	2b00      	cmp	r3, #0
  40a594:	d00f      	beq.n	40a5b6 <udp_input+0x20a>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40a596:	687b      	ldr	r3, [r7, #4]
  40a598:	891b      	ldrh	r3, [r3, #8]
  40a59a:	9300      	str	r3, [sp, #0]
  40a59c:	2311      	movs	r3, #17
  40a59e:	4a28      	ldr	r2, [pc, #160]	; (40a640 <udp_input+0x294>)
  40a5a0:	492a      	ldr	r1, [pc, #168]	; (40a64c <udp_input+0x2a0>)
  40a5a2:	6878      	ldr	r0, [r7, #4]
  40a5a4:	4c2b      	ldr	r4, [pc, #172]	; (40a654 <udp_input+0x2a8>)
  40a5a6:	47a0      	blx	r4
  40a5a8:	4603      	mov	r3, r0
  40a5aa:	2b00      	cmp	r3, #0
  40a5ac:	d003      	beq.n	40a5b6 <udp_input+0x20a>
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  40a5ae:	6878      	ldr	r0, [r7, #4]
  40a5b0:	4b22      	ldr	r3, [pc, #136]	; (40a63c <udp_input+0x290>)
  40a5b2:	4798      	blx	r3
          goto end;
  40a5b4:	e055      	b.n	40a662 <udp_input+0x2b6>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  40a5b6:	f06f 0107 	mvn.w	r1, #7
  40a5ba:	6878      	ldr	r0, [r7, #4]
  40a5bc:	4b1e      	ldr	r3, [pc, #120]	; (40a638 <udp_input+0x28c>)
  40a5be:	4798      	blx	r3
  40a5c0:	4603      	mov	r3, r0
  40a5c2:	2b00      	cmp	r3, #0
  40a5c4:	d003      	beq.n	40a5ce <udp_input+0x222>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
  40a5c6:	6878      	ldr	r0, [r7, #4]
  40a5c8:	4b1c      	ldr	r3, [pc, #112]	; (40a63c <udp_input+0x290>)
  40a5ca:	4798      	blx	r3
      goto end;
  40a5cc:	e049      	b.n	40a662 <udp_input+0x2b6>
    }
    if (pcb != NULL) {
  40a5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a5d0:	2b00      	cmp	r3, #0
  40a5d2:	d012      	beq.n	40a5fa <udp_input+0x24e>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  40a5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a5d6:	699b      	ldr	r3, [r3, #24]
  40a5d8:	2b00      	cmp	r3, #0
  40a5da:	d00a      	beq.n	40a5f2 <udp_input+0x246>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  40a5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a5de:	699c      	ldr	r4, [r3, #24]
  40a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a5e2:	69d8      	ldr	r0, [r3, #28]
  40a5e4:	89bb      	ldrh	r3, [r7, #12]
  40a5e6:	9300      	str	r3, [sp, #0]
  40a5e8:	4b18      	ldr	r3, [pc, #96]	; (40a64c <udp_input+0x2a0>)
  40a5ea:	687a      	ldr	r2, [r7, #4]
  40a5ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40a5ee:	47a0      	blx	r4
    if (pcb != NULL) {
  40a5f0:	e037      	b.n	40a662 <udp_input+0x2b6>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  40a5f2:	6878      	ldr	r0, [r7, #4]
  40a5f4:	4b11      	ldr	r3, [pc, #68]	; (40a63c <udp_input+0x290>)
  40a5f6:	4798      	blx	r3
        goto end;
  40a5f8:	e033      	b.n	40a662 <udp_input+0x2b6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  40a5fa:	7bfb      	ldrb	r3, [r7, #15]
  40a5fc:	2b00      	cmp	r3, #0
  40a5fe:	d116      	bne.n	40a62e <udp_input+0x282>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  40a600:	4b0f      	ldr	r3, [pc, #60]	; (40a640 <udp_input+0x294>)
  40a602:	681b      	ldr	r3, [r3, #0]
  40a604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
  40a608:	2be0      	cmp	r3, #224	; 0xe0
  40a60a:	d010      	beq.n	40a62e <udp_input+0x282>
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  40a60c:	697b      	ldr	r3, [r7, #20]
  40a60e:	781b      	ldrb	r3, [r3, #0]
  40a610:	f003 030f 	and.w	r3, r3, #15
  40a614:	3302      	adds	r3, #2
  40a616:	b29b      	uxth	r3, r3
  40a618:	009b      	lsls	r3, r3, #2
  40a61a:	b29b      	uxth	r3, r3
  40a61c:	b21b      	sxth	r3, r3
  40a61e:	4619      	mov	r1, r3
  40a620:	6878      	ldr	r0, [r7, #4]
  40a622:	4b05      	ldr	r3, [pc, #20]	; (40a638 <udp_input+0x28c>)
  40a624:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  40a626:	2103      	movs	r1, #3
  40a628:	6878      	ldr	r0, [r7, #4]
  40a62a:	4b0b      	ldr	r3, [pc, #44]	; (40a658 <udp_input+0x2ac>)
  40a62c:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  40a62e:	6878      	ldr	r0, [r7, #4]
  40a630:	4b02      	ldr	r3, [pc, #8]	; (40a63c <udp_input+0x290>)
  40a632:	4798      	blx	r3
    if (pcb != NULL) {
  40a634:	e015      	b.n	40a662 <udp_input+0x2b6>
  40a636:	bf00      	nop
  40a638:	00405925 	.word	0x00405925
  40a63c:	00405a01 	.word	0x00405a01
  40a640:	204033bc 	.word	0x204033bc
  40a644:	00404251 	.word	0x00404251
  40a648:	00401e45 	.word	0x00401e45
  40a64c:	204033b4 	.word	0x204033b4
  40a650:	20404404 	.word	0x20404404
  40a654:	00403b89 	.word	0x00403b89
  40a658:	004039c5 	.word	0x004039c5
    }
  } else {
    pbuf_free(p);
  40a65c:	6878      	ldr	r0, [r7, #4]
  40a65e:	4b03      	ldr	r3, [pc, #12]	; (40a66c <udp_input+0x2c0>)
  40a660:	4798      	blx	r3
  }
end:
  PERF_STOP("udp_input");
}
  40a662:	bf00      	nop
  40a664:	372c      	adds	r7, #44	; 0x2c
  40a666:	46bd      	mov	sp, r7
  40a668:	bd90      	pop	{r4, r7, pc}
  40a66a:	bf00      	nop
  40a66c:	00405a01 	.word	0x00405a01

0040a670 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  40a670:	b590      	push	{r4, r7, lr}
  40a672:	b08d      	sub	sp, #52	; 0x34
  40a674:	af04      	add	r7, sp, #16
  40a676:	60f8      	str	r0, [r7, #12]
  40a678:	60b9      	str	r1, [r7, #8]
  40a67a:	607a      	str	r2, [r7, #4]
  40a67c:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  40a67e:	68fb      	ldr	r3, [r7, #12]
  40a680:	8a5b      	ldrh	r3, [r3, #18]
  40a682:	2b00      	cmp	r3, #0
  40a684:	d10f      	bne.n	40a6a6 <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40a686:	68f9      	ldr	r1, [r7, #12]
  40a688:	68fb      	ldr	r3, [r7, #12]
  40a68a:	8a5b      	ldrh	r3, [r3, #18]
  40a68c:	461a      	mov	r2, r3
  40a68e:	68f8      	ldr	r0, [r7, #12]
  40a690:	4b51      	ldr	r3, [pc, #324]	; (40a7d8 <udp_sendto_if+0x168>)
  40a692:	4798      	blx	r3
  40a694:	4603      	mov	r3, r0
  40a696:	757b      	strb	r3, [r7, #21]
    if (err != ERR_OK) {
  40a698:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40a69c:	2b00      	cmp	r3, #0
  40a69e:	d002      	beq.n	40a6a6 <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  40a6a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40a6a4:	e094      	b.n	40a7d0 <udp_sendto_if+0x160>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  40a6a6:	2108      	movs	r1, #8
  40a6a8:	68b8      	ldr	r0, [r7, #8]
  40a6aa:	4b4c      	ldr	r3, [pc, #304]	; (40a7dc <udp_sendto_if+0x16c>)
  40a6ac:	4798      	blx	r3
  40a6ae:	4603      	mov	r3, r0
  40a6b0:	2b00      	cmp	r3, #0
  40a6b2:	d014      	beq.n	40a6de <udp_sendto_if+0x6e>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  40a6b4:	2200      	movs	r2, #0
  40a6b6:	2108      	movs	r1, #8
  40a6b8:	2001      	movs	r0, #1
  40a6ba:	4b49      	ldr	r3, [pc, #292]	; (40a7e0 <udp_sendto_if+0x170>)
  40a6bc:	4798      	blx	r3
  40a6be:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  40a6c0:	69bb      	ldr	r3, [r7, #24]
  40a6c2:	2b00      	cmp	r3, #0
  40a6c4:	d102      	bne.n	40a6cc <udp_sendto_if+0x5c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  40a6c6:	f04f 33ff 	mov.w	r3, #4294967295
  40a6ca:	e081      	b.n	40a7d0 <udp_sendto_if+0x160>
    }
    if (p->tot_len != 0) {
  40a6cc:	68bb      	ldr	r3, [r7, #8]
  40a6ce:	891b      	ldrh	r3, [r3, #8]
  40a6d0:	2b00      	cmp	r3, #0
  40a6d2:	d006      	beq.n	40a6e2 <udp_sendto_if+0x72>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  40a6d4:	68b9      	ldr	r1, [r7, #8]
  40a6d6:	69b8      	ldr	r0, [r7, #24]
  40a6d8:	4b42      	ldr	r3, [pc, #264]	; (40a7e4 <udp_sendto_if+0x174>)
  40a6da:	4798      	blx	r3
  40a6dc:	e001      	b.n	40a6e2 <udp_sendto_if+0x72>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  40a6de:	68bb      	ldr	r3, [r7, #8]
  40a6e0:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  40a6e2:	69bb      	ldr	r3, [r7, #24]
  40a6e4:	685b      	ldr	r3, [r3, #4]
  40a6e6:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
  40a6e8:	68fb      	ldr	r3, [r7, #12]
  40a6ea:	8a5b      	ldrh	r3, [r3, #18]
  40a6ec:	4618      	mov	r0, r3
  40a6ee:	4b3e      	ldr	r3, [pc, #248]	; (40a7e8 <udp_sendto_if+0x178>)
  40a6f0:	4798      	blx	r3
  40a6f2:	4603      	mov	r3, r0
  40a6f4:	461a      	mov	r2, r3
  40a6f6:	693b      	ldr	r3, [r7, #16]
  40a6f8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
  40a6fa:	887b      	ldrh	r3, [r7, #2]
  40a6fc:	4618      	mov	r0, r3
  40a6fe:	4b3a      	ldr	r3, [pc, #232]	; (40a7e8 <udp_sendto_if+0x178>)
  40a700:	4798      	blx	r3
  40a702:	4603      	mov	r3, r0
  40a704:	461a      	mov	r2, r3
  40a706:	693b      	ldr	r3, [r7, #16]
  40a708:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  40a70a:	693b      	ldr	r3, [r7, #16]
  40a70c:	2200      	movs	r2, #0
  40a70e:	719a      	strb	r2, [r3, #6]
  40a710:	2200      	movs	r2, #0
  40a712:	71da      	strb	r2, [r3, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  40a714:	68fb      	ldr	r3, [r7, #12]
  40a716:	2b00      	cmp	r3, #0
  40a718:	d003      	beq.n	40a722 <udp_sendto_if+0xb2>
  40a71a:	68fb      	ldr	r3, [r7, #12]
  40a71c:	681b      	ldr	r3, [r3, #0]
  40a71e:	2b00      	cmp	r3, #0
  40a720:	d103      	bne.n	40a72a <udp_sendto_if+0xba>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  40a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40a724:	3304      	adds	r3, #4
  40a726:	61fb      	str	r3, [r7, #28]
  40a728:	e013      	b.n	40a752 <udp_sendto_if+0xe2>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  40a72a:	68fb      	ldr	r3, [r7, #12]
  40a72c:	681a      	ldr	r2, [r3, #0]
  40a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40a730:	685b      	ldr	r3, [r3, #4]
  40a732:	429a      	cmp	r2, r3
  40a734:	d00b      	beq.n	40a74e <udp_sendto_if+0xde>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  40a736:	69ba      	ldr	r2, [r7, #24]
  40a738:	68bb      	ldr	r3, [r7, #8]
  40a73a:	429a      	cmp	r2, r3
  40a73c:	d004      	beq.n	40a748 <udp_sendto_if+0xd8>
        /* free the header pbuf */
        pbuf_free(q);
  40a73e:	69b8      	ldr	r0, [r7, #24]
  40a740:	4b2a      	ldr	r3, [pc, #168]	; (40a7ec <udp_sendto_if+0x17c>)
  40a742:	4798      	blx	r3
        q = NULL;
  40a744:	2300      	movs	r3, #0
  40a746:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  40a748:	f06f 0305 	mvn.w	r3, #5
  40a74c:	e040      	b.n	40a7d0 <udp_sendto_if+0x160>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
  40a74e:	68fb      	ldr	r3, [r7, #12]
  40a750:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  40a752:	69bb      	ldr	r3, [r7, #24]
  40a754:	891b      	ldrh	r3, [r3, #8]
  40a756:	4618      	mov	r0, r3
  40a758:	4b23      	ldr	r3, [pc, #140]	; (40a7e8 <udp_sendto_if+0x178>)
  40a75a:	4798      	blx	r3
  40a75c:	4603      	mov	r3, r0
  40a75e:	461a      	mov	r2, r3
  40a760:	693b      	ldr	r3, [r7, #16]
  40a762:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  40a764:	68fb      	ldr	r3, [r7, #12]
  40a766:	7c1b      	ldrb	r3, [r3, #16]
  40a768:	f003 0301 	and.w	r3, r3, #1
  40a76c:	2b00      	cmp	r3, #0
  40a76e:	d113      	bne.n	40a798 <udp_sendto_if+0x128>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  40a770:	69bb      	ldr	r3, [r7, #24]
  40a772:	891b      	ldrh	r3, [r3, #8]
  40a774:	9300      	str	r3, [sp, #0]
  40a776:	2311      	movs	r3, #17
  40a778:	687a      	ldr	r2, [r7, #4]
  40a77a:	69f9      	ldr	r1, [r7, #28]
  40a77c:	69b8      	ldr	r0, [r7, #24]
  40a77e:	4c1c      	ldr	r4, [pc, #112]	; (40a7f0 <udp_sendto_if+0x180>)
  40a780:	47a0      	blx	r4
  40a782:	4603      	mov	r3, r0
  40a784:	82fb      	strh	r3, [r7, #22]
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
  40a786:	8afb      	ldrh	r3, [r7, #22]
  40a788:	2b00      	cmp	r3, #0
  40a78a:	d102      	bne.n	40a792 <udp_sendto_if+0x122>
        udpchksum = 0xffff;
  40a78c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40a790:	82fb      	strh	r3, [r7, #22]
      }
      udphdr->chksum = udpchksum;
  40a792:	693b      	ldr	r3, [r7, #16]
  40a794:	8afa      	ldrh	r2, [r7, #22]
  40a796:	80da      	strh	r2, [r3, #6]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
  40a798:	68fb      	ldr	r3, [r7, #12]
  40a79a:	7a99      	ldrb	r1, [r3, #10]
  40a79c:	68fb      	ldr	r3, [r7, #12]
  40a79e:	7a5b      	ldrb	r3, [r3, #9]
  40a7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40a7a2:	9202      	str	r2, [sp, #8]
  40a7a4:	2211      	movs	r2, #17
  40a7a6:	9201      	str	r2, [sp, #4]
  40a7a8:	9300      	str	r3, [sp, #0]
  40a7aa:	460b      	mov	r3, r1
  40a7ac:	687a      	ldr	r2, [r7, #4]
  40a7ae:	69f9      	ldr	r1, [r7, #28]
  40a7b0:	69b8      	ldr	r0, [r7, #24]
  40a7b2:	4c10      	ldr	r4, [pc, #64]	; (40a7f4 <udp_sendto_if+0x184>)
  40a7b4:	47a0      	blx	r4
  40a7b6:	4603      	mov	r3, r0
  40a7b8:	757b      	strb	r3, [r7, #21]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  40a7ba:	69ba      	ldr	r2, [r7, #24]
  40a7bc:	68bb      	ldr	r3, [r7, #8]
  40a7be:	429a      	cmp	r2, r3
  40a7c0:	d004      	beq.n	40a7cc <udp_sendto_if+0x15c>
    /* free the header pbuf */
    pbuf_free(q);
  40a7c2:	69b8      	ldr	r0, [r7, #24]
  40a7c4:	4b09      	ldr	r3, [pc, #36]	; (40a7ec <udp_sendto_if+0x17c>)
  40a7c6:	4798      	blx	r3
    q = NULL;
  40a7c8:	2300      	movs	r3, #0
  40a7ca:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  40a7cc:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
  40a7d0:	4618      	mov	r0, r3
  40a7d2:	3724      	adds	r7, #36	; 0x24
  40a7d4:	46bd      	mov	sp, r7
  40a7d6:	bd90      	pop	{r4, r7, pc}
  40a7d8:	0040a7f9 	.word	0x0040a7f9
  40a7dc:	00405925 	.word	0x00405925
  40a7e0:	0040565d 	.word	0x0040565d
  40a7e4:	00405b45 	.word	0x00405b45
  40a7e8:	00401e19 	.word	0x00401e19
  40a7ec:	00405a01 	.word	0x00405a01
  40a7f0:	00403b89 	.word	0x00403b89
  40a7f4:	00404049 	.word	0x00404049

0040a7f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40a7f8:	b580      	push	{r7, lr}
  40a7fa:	b086      	sub	sp, #24
  40a7fc:	af00      	add	r7, sp, #0
  40a7fe:	60f8      	str	r0, [r7, #12]
  40a800:	60b9      	str	r1, [r7, #8]
  40a802:	4613      	mov	r3, r2
  40a804:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  40a806:	2300      	movs	r3, #0
  40a808:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40a80a:	4b2a      	ldr	r3, [pc, #168]	; (40a8b4 <udp_bind+0xbc>)
  40a80c:	681b      	ldr	r3, [r3, #0]
  40a80e:	617b      	str	r3, [r7, #20]
  40a810:	e025      	b.n	40a85e <udp_bind+0x66>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  40a812:	68fa      	ldr	r2, [r7, #12]
  40a814:	697b      	ldr	r3, [r7, #20]
  40a816:	429a      	cmp	r2, r3
  40a818:	d102      	bne.n	40a820 <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  40a81a:	2301      	movs	r3, #1
  40a81c:	74fb      	strb	r3, [r7, #19]
  40a81e:	e01b      	b.n	40a858 <udp_bind+0x60>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  40a820:	697b      	ldr	r3, [r7, #20]
  40a822:	8a5b      	ldrh	r3, [r3, #18]
  40a824:	88fa      	ldrh	r2, [r7, #6]
  40a826:	429a      	cmp	r2, r3
  40a828:	d116      	bne.n	40a858 <udp_bind+0x60>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40a82a:	697b      	ldr	r3, [r7, #20]
      if ((ipcb->local_port == port) &&
  40a82c:	2b00      	cmp	r3, #0
  40a82e:	d010      	beq.n	40a852 <udp_bind+0x5a>
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40a830:	697b      	ldr	r3, [r7, #20]
  40a832:	681b      	ldr	r3, [r3, #0]
  40a834:	2b00      	cmp	r3, #0
  40a836:	d00c      	beq.n	40a852 <udp_bind+0x5a>
  40a838:	68bb      	ldr	r3, [r7, #8]
  40a83a:	2b00      	cmp	r3, #0
  40a83c:	d009      	beq.n	40a852 <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
  40a83e:	68bb      	ldr	r3, [r7, #8]
  40a840:	681b      	ldr	r3, [r3, #0]
  40a842:	2b00      	cmp	r3, #0
  40a844:	d005      	beq.n	40a852 <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
  40a846:	697b      	ldr	r3, [r7, #20]
  40a848:	681a      	ldr	r2, [r3, #0]
  40a84a:	68bb      	ldr	r3, [r7, #8]
  40a84c:	681b      	ldr	r3, [r3, #0]
           ip_addr_isany(ipaddr) ||
  40a84e:	429a      	cmp	r2, r3
  40a850:	d102      	bne.n	40a858 <udp_bind+0x60>
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
  40a852:	f06f 0307 	mvn.w	r3, #7
  40a856:	e029      	b.n	40a8ac <udp_bind+0xb4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40a858:	697b      	ldr	r3, [r7, #20]
  40a85a:	68db      	ldr	r3, [r3, #12]
  40a85c:	617b      	str	r3, [r7, #20]
  40a85e:	697b      	ldr	r3, [r7, #20]
  40a860:	2b00      	cmp	r3, #0
  40a862:	d1d6      	bne.n	40a812 <udp_bind+0x1a>
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  40a864:	68bb      	ldr	r3, [r7, #8]
  40a866:	2b00      	cmp	r3, #0
  40a868:	d002      	beq.n	40a870 <udp_bind+0x78>
  40a86a:	68bb      	ldr	r3, [r7, #8]
  40a86c:	681b      	ldr	r3, [r3, #0]
  40a86e:	e000      	b.n	40a872 <udp_bind+0x7a>
  40a870:	2300      	movs	r3, #0
  40a872:	68fa      	ldr	r2, [r7, #12]
  40a874:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
  40a876:	88fb      	ldrh	r3, [r7, #6]
  40a878:	2b00      	cmp	r3, #0
  40a87a:	d109      	bne.n	40a890 <udp_bind+0x98>
    port = udp_new_port();
  40a87c:	4b0e      	ldr	r3, [pc, #56]	; (40a8b8 <udp_bind+0xc0>)
  40a87e:	4798      	blx	r3
  40a880:	4603      	mov	r3, r0
  40a882:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
  40a884:	88fb      	ldrh	r3, [r7, #6]
  40a886:	2b00      	cmp	r3, #0
  40a888:	d102      	bne.n	40a890 <udp_bind+0x98>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  40a88a:	f06f 0307 	mvn.w	r3, #7
  40a88e:	e00d      	b.n	40a8ac <udp_bind+0xb4>
    }
  }
  pcb->local_port = port;
  40a890:	68fb      	ldr	r3, [r7, #12]
  40a892:	88fa      	ldrh	r2, [r7, #6]
  40a894:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  40a896:	7cfb      	ldrb	r3, [r7, #19]
  40a898:	2b00      	cmp	r3, #0
  40a89a:	d106      	bne.n	40a8aa <udp_bind+0xb2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  40a89c:	4b05      	ldr	r3, [pc, #20]	; (40a8b4 <udp_bind+0xbc>)
  40a89e:	681a      	ldr	r2, [r3, #0]
  40a8a0:	68fb      	ldr	r3, [r7, #12]
  40a8a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
  40a8a4:	4a03      	ldr	r2, [pc, #12]	; (40a8b4 <udp_bind+0xbc>)
  40a8a6:	68fb      	ldr	r3, [r7, #12]
  40a8a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  40a8aa:	2300      	movs	r3, #0
}
  40a8ac:	4618      	mov	r0, r3
  40a8ae:	3718      	adds	r7, #24
  40a8b0:	46bd      	mov	sp, r7
  40a8b2:	bd80      	pop	{r7, pc}
  40a8b4:	20404404 	.word	0x20404404
  40a8b8:	0040a33d 	.word	0x0040a33d

0040a8bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40a8bc:	b580      	push	{r7, lr}
  40a8be:	b086      	sub	sp, #24
  40a8c0:	af00      	add	r7, sp, #0
  40a8c2:	60f8      	str	r0, [r7, #12]
  40a8c4:	60b9      	str	r1, [r7, #8]
  40a8c6:	4613      	mov	r3, r2
  40a8c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  40a8ca:	68fb      	ldr	r3, [r7, #12]
  40a8cc:	8a5b      	ldrh	r3, [r3, #18]
  40a8ce:	2b00      	cmp	r3, #0
  40a8d0:	d10f      	bne.n	40a8f2 <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40a8d2:	68f9      	ldr	r1, [r7, #12]
  40a8d4:	68fb      	ldr	r3, [r7, #12]
  40a8d6:	8a5b      	ldrh	r3, [r3, #18]
  40a8d8:	461a      	mov	r2, r3
  40a8da:	68f8      	ldr	r0, [r7, #12]
  40a8dc:	4b1c      	ldr	r3, [pc, #112]	; (40a950 <udp_connect+0x94>)
  40a8de:	4798      	blx	r3
  40a8e0:	4603      	mov	r3, r0
  40a8e2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
  40a8e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40a8e8:	2b00      	cmp	r3, #0
  40a8ea:	d002      	beq.n	40a8f2 <udp_connect+0x36>
      return err;
  40a8ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40a8f0:	e02a      	b.n	40a948 <udp_connect+0x8c>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  40a8f2:	68bb      	ldr	r3, [r7, #8]
  40a8f4:	2b00      	cmp	r3, #0
  40a8f6:	d002      	beq.n	40a8fe <udp_connect+0x42>
  40a8f8:	68bb      	ldr	r3, [r7, #8]
  40a8fa:	681b      	ldr	r3, [r3, #0]
  40a8fc:	e000      	b.n	40a900 <udp_connect+0x44>
  40a8fe:	2300      	movs	r3, #0
  40a900:	68fa      	ldr	r2, [r7, #12]
  40a902:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
  40a904:	68fb      	ldr	r3, [r7, #12]
  40a906:	88fa      	ldrh	r2, [r7, #6]
  40a908:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  40a90a:	68fb      	ldr	r3, [r7, #12]
  40a90c:	7c1b      	ldrb	r3, [r3, #16]
  40a90e:	f043 0304 	orr.w	r3, r3, #4
  40a912:	b2da      	uxtb	r2, r3
  40a914:	68fb      	ldr	r3, [r7, #12]
  40a916:	741a      	strb	r2, [r3, #16]
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40a918:	4b0e      	ldr	r3, [pc, #56]	; (40a954 <udp_connect+0x98>)
  40a91a:	681b      	ldr	r3, [r3, #0]
  40a91c:	617b      	str	r3, [r7, #20]
  40a91e:	e008      	b.n	40a932 <udp_connect+0x76>
    if (pcb == ipcb) {
  40a920:	68fa      	ldr	r2, [r7, #12]
  40a922:	697b      	ldr	r3, [r7, #20]
  40a924:	429a      	cmp	r2, r3
  40a926:	d101      	bne.n	40a92c <udp_connect+0x70>
      /* already on the list, just return */
      return ERR_OK;
  40a928:	2300      	movs	r3, #0
  40a92a:	e00d      	b.n	40a948 <udp_connect+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40a92c:	697b      	ldr	r3, [r7, #20]
  40a92e:	68db      	ldr	r3, [r3, #12]
  40a930:	617b      	str	r3, [r7, #20]
  40a932:	697b      	ldr	r3, [r7, #20]
  40a934:	2b00      	cmp	r3, #0
  40a936:	d1f3      	bne.n	40a920 <udp_connect+0x64>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  40a938:	4b06      	ldr	r3, [pc, #24]	; (40a954 <udp_connect+0x98>)
  40a93a:	681a      	ldr	r2, [r3, #0]
  40a93c:	68fb      	ldr	r3, [r7, #12]
  40a93e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
  40a940:	4a04      	ldr	r2, [pc, #16]	; (40a954 <udp_connect+0x98>)
  40a942:	68fb      	ldr	r3, [r7, #12]
  40a944:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  40a946:	2300      	movs	r3, #0
}
  40a948:	4618      	mov	r0, r3
  40a94a:	3718      	adds	r7, #24
  40a94c:	46bd      	mov	sp, r7
  40a94e:	bd80      	pop	{r7, pc}
  40a950:	0040a7f9 	.word	0x0040a7f9
  40a954:	20404404 	.word	0x20404404

0040a958 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  40a958:	b480      	push	{r7}
  40a95a:	b085      	sub	sp, #20
  40a95c:	af00      	add	r7, sp, #0
  40a95e:	60f8      	str	r0, [r7, #12]
  40a960:	60b9      	str	r1, [r7, #8]
  40a962:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  40a964:	68fb      	ldr	r3, [r7, #12]
  40a966:	68ba      	ldr	r2, [r7, #8]
  40a968:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
  40a96a:	68fb      	ldr	r3, [r7, #12]
  40a96c:	687a      	ldr	r2, [r7, #4]
  40a96e:	61da      	str	r2, [r3, #28]
}
  40a970:	bf00      	nop
  40a972:	3714      	adds	r7, #20
  40a974:	46bd      	mov	sp, r7
  40a976:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a97a:	4770      	bx	lr

0040a97c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  40a97c:	b580      	push	{r7, lr}
  40a97e:	b084      	sub	sp, #16
  40a980:	af00      	add	r7, sp, #0
  40a982:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  40a984:	4b14      	ldr	r3, [pc, #80]	; (40a9d8 <udp_remove+0x5c>)
  40a986:	681a      	ldr	r2, [r3, #0]
  40a988:	687b      	ldr	r3, [r7, #4]
  40a98a:	429a      	cmp	r2, r3
  40a98c:	d105      	bne.n	40a99a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  40a98e:	4b12      	ldr	r3, [pc, #72]	; (40a9d8 <udp_remove+0x5c>)
  40a990:	681b      	ldr	r3, [r3, #0]
  40a992:	68db      	ldr	r3, [r3, #12]
  40a994:	4a10      	ldr	r2, [pc, #64]	; (40a9d8 <udp_remove+0x5c>)
  40a996:	6013      	str	r3, [r2, #0]
  40a998:	e016      	b.n	40a9c8 <udp_remove+0x4c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40a99a:	4b0f      	ldr	r3, [pc, #60]	; (40a9d8 <udp_remove+0x5c>)
  40a99c:	681b      	ldr	r3, [r3, #0]
  40a99e:	60fb      	str	r3, [r7, #12]
  40a9a0:	e00f      	b.n	40a9c2 <udp_remove+0x46>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  40a9a2:	68fb      	ldr	r3, [r7, #12]
  40a9a4:	68db      	ldr	r3, [r3, #12]
  40a9a6:	2b00      	cmp	r3, #0
  40a9a8:	d008      	beq.n	40a9bc <udp_remove+0x40>
  40a9aa:	68fb      	ldr	r3, [r7, #12]
  40a9ac:	68da      	ldr	r2, [r3, #12]
  40a9ae:	687b      	ldr	r3, [r7, #4]
  40a9b0:	429a      	cmp	r2, r3
  40a9b2:	d103      	bne.n	40a9bc <udp_remove+0x40>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  40a9b4:	687b      	ldr	r3, [r7, #4]
  40a9b6:	68da      	ldr	r2, [r3, #12]
  40a9b8:	68fb      	ldr	r3, [r7, #12]
  40a9ba:	60da      	str	r2, [r3, #12]
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40a9bc:	68fb      	ldr	r3, [r7, #12]
  40a9be:	68db      	ldr	r3, [r3, #12]
  40a9c0:	60fb      	str	r3, [r7, #12]
  40a9c2:	68fb      	ldr	r3, [r7, #12]
  40a9c4:	2b00      	cmp	r3, #0
  40a9c6:	d1ec      	bne.n	40a9a2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  40a9c8:	6879      	ldr	r1, [r7, #4]
  40a9ca:	2000      	movs	r0, #0
  40a9cc:	4b03      	ldr	r3, [pc, #12]	; (40a9dc <udp_remove+0x60>)
  40a9ce:	4798      	blx	r3
}
  40a9d0:	bf00      	nop
  40a9d2:	3710      	adds	r7, #16
  40a9d4:	46bd      	mov	sp, r7
  40a9d6:	bd80      	pop	{r7, pc}
  40a9d8:	20404404 	.word	0x20404404
  40a9dc:	00405365 	.word	0x00405365

0040a9e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  40a9e0:	b580      	push	{r7, lr}
  40a9e2:	b082      	sub	sp, #8
  40a9e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  40a9e6:	2000      	movs	r0, #0
  40a9e8:	4b09      	ldr	r3, [pc, #36]	; (40aa10 <udp_new+0x30>)
  40a9ea:	4798      	blx	r3
  40a9ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  40a9ee:	687b      	ldr	r3, [r7, #4]
  40a9f0:	2b00      	cmp	r3, #0
  40a9f2:	d007      	beq.n	40aa04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  40a9f4:	2220      	movs	r2, #32
  40a9f6:	2100      	movs	r1, #0
  40a9f8:	6878      	ldr	r0, [r7, #4]
  40a9fa:	4b06      	ldr	r3, [pc, #24]	; (40aa14 <udp_new+0x34>)
  40a9fc:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
  40a9fe:	687b      	ldr	r3, [r7, #4]
  40aa00:	22ff      	movs	r2, #255	; 0xff
  40aa02:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
  40aa04:	687b      	ldr	r3, [r7, #4]
}
  40aa06:	4618      	mov	r0, r3
  40aa08:	3708      	adds	r7, #8
  40aa0a:	46bd      	mov	sp, r7
  40aa0c:	bd80      	pop	{r7, pc}
  40aa0e:	bf00      	nop
  40aa10:	00405325 	.word	0x00405325
  40aa14:	0040cb19 	.word	0x0040cb19

0040aa18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  40aa18:	b580      	push	{r7, lr}
  40aa1a:	b082      	sub	sp, #8
  40aa1c:	af00      	add	r7, sp, #0
  40aa1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  40aa20:	4915      	ldr	r1, [pc, #84]	; (40aa78 <etharp_free_entry+0x60>)
  40aa22:	687a      	ldr	r2, [r7, #4]
  40aa24:	4613      	mov	r3, r2
  40aa26:	009b      	lsls	r3, r3, #2
  40aa28:	4413      	add	r3, r2
  40aa2a:	009b      	lsls	r3, r3, #2
  40aa2c:	440b      	add	r3, r1
  40aa2e:	681b      	ldr	r3, [r3, #0]
  40aa30:	2b00      	cmp	r3, #0
  40aa32:	d013      	beq.n	40aa5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  40aa34:	4910      	ldr	r1, [pc, #64]	; (40aa78 <etharp_free_entry+0x60>)
  40aa36:	687a      	ldr	r2, [r7, #4]
  40aa38:	4613      	mov	r3, r2
  40aa3a:	009b      	lsls	r3, r3, #2
  40aa3c:	4413      	add	r3, r2
  40aa3e:	009b      	lsls	r3, r3, #2
  40aa40:	440b      	add	r3, r1
  40aa42:	681b      	ldr	r3, [r3, #0]
  40aa44:	4618      	mov	r0, r3
  40aa46:	4b0d      	ldr	r3, [pc, #52]	; (40aa7c <etharp_free_entry+0x64>)
  40aa48:	4798      	blx	r3
    arp_table[i].q = NULL;
  40aa4a:	490b      	ldr	r1, [pc, #44]	; (40aa78 <etharp_free_entry+0x60>)
  40aa4c:	687a      	ldr	r2, [r7, #4]
  40aa4e:	4613      	mov	r3, r2
  40aa50:	009b      	lsls	r3, r3, #2
  40aa52:	4413      	add	r3, r2
  40aa54:	009b      	lsls	r3, r3, #2
  40aa56:	440b      	add	r3, r1
  40aa58:	2200      	movs	r2, #0
  40aa5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  40aa5c:	4906      	ldr	r1, [pc, #24]	; (40aa78 <etharp_free_entry+0x60>)
  40aa5e:	687a      	ldr	r2, [r7, #4]
  40aa60:	4613      	mov	r3, r2
  40aa62:	009b      	lsls	r3, r3, #2
  40aa64:	4413      	add	r3, r2
  40aa66:	009b      	lsls	r3, r3, #2
  40aa68:	440b      	add	r3, r1
  40aa6a:	3312      	adds	r3, #18
  40aa6c:	2200      	movs	r2, #0
  40aa6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  40aa70:	bf00      	nop
  40aa72:	3708      	adds	r7, #8
  40aa74:	46bd      	mov	sp, r7
  40aa76:	bd80      	pop	{r7, pc}
  40aa78:	20402080 	.word	0x20402080
  40aa7c:	00405a01 	.word	0x00405a01

0040aa80 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  40aa80:	b580      	push	{r7, lr}
  40aa82:	b082      	sub	sp, #8
  40aa84:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40aa86:	2300      	movs	r3, #0
  40aa88:	71fb      	strb	r3, [r7, #7]
  40aa8a:	e05e      	b.n	40ab4a <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
  40aa8c:	79fa      	ldrb	r2, [r7, #7]
  40aa8e:	4932      	ldr	r1, [pc, #200]	; (40ab58 <etharp_tmr+0xd8>)
  40aa90:	4613      	mov	r3, r2
  40aa92:	009b      	lsls	r3, r3, #2
  40aa94:	4413      	add	r3, r2
  40aa96:	009b      	lsls	r3, r3, #2
  40aa98:	440b      	add	r3, r1
  40aa9a:	3312      	adds	r3, #18
  40aa9c:	781b      	ldrb	r3, [r3, #0]
  40aa9e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
  40aaa0:	79bb      	ldrb	r3, [r7, #6]
  40aaa2:	2b00      	cmp	r3, #0
  40aaa4:	d04e      	beq.n	40ab44 <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  40aaa6:	79fa      	ldrb	r2, [r7, #7]
  40aaa8:	492b      	ldr	r1, [pc, #172]	; (40ab58 <etharp_tmr+0xd8>)
  40aaaa:	4613      	mov	r3, r2
  40aaac:	009b      	lsls	r3, r3, #2
  40aaae:	4413      	add	r3, r2
  40aab0:	009b      	lsls	r3, r3, #2
  40aab2:	440b      	add	r3, r1
  40aab4:	3313      	adds	r3, #19
  40aab6:	781b      	ldrb	r3, [r3, #0]
  40aab8:	3301      	adds	r3, #1
  40aaba:	b2d8      	uxtb	r0, r3
  40aabc:	4926      	ldr	r1, [pc, #152]	; (40ab58 <etharp_tmr+0xd8>)
  40aabe:	4613      	mov	r3, r2
  40aac0:	009b      	lsls	r3, r3, #2
  40aac2:	4413      	add	r3, r2
  40aac4:	009b      	lsls	r3, r3, #2
  40aac6:	440b      	add	r3, r1
  40aac8:	3313      	adds	r3, #19
  40aaca:	4602      	mov	r2, r0
  40aacc:	701a      	strb	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40aace:	79fa      	ldrb	r2, [r7, #7]
  40aad0:	4921      	ldr	r1, [pc, #132]	; (40ab58 <etharp_tmr+0xd8>)
  40aad2:	4613      	mov	r3, r2
  40aad4:	009b      	lsls	r3, r3, #2
  40aad6:	4413      	add	r3, r2
  40aad8:	009b      	lsls	r3, r3, #2
  40aada:	440b      	add	r3, r1
  40aadc:	3313      	adds	r3, #19
  40aade:	781b      	ldrb	r3, [r3, #0]
  40aae0:	2bef      	cmp	r3, #239	; 0xef
  40aae2:	d815      	bhi.n	40ab10 <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40aae4:	79fa      	ldrb	r2, [r7, #7]
  40aae6:	491c      	ldr	r1, [pc, #112]	; (40ab58 <etharp_tmr+0xd8>)
  40aae8:	4613      	mov	r3, r2
  40aaea:	009b      	lsls	r3, r3, #2
  40aaec:	4413      	add	r3, r2
  40aaee:	009b      	lsls	r3, r3, #2
  40aaf0:	440b      	add	r3, r1
  40aaf2:	3312      	adds	r3, #18
  40aaf4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40aaf6:	2b01      	cmp	r3, #1
  40aaf8:	d10f      	bne.n	40ab1a <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  40aafa:	79fa      	ldrb	r2, [r7, #7]
  40aafc:	4916      	ldr	r1, [pc, #88]	; (40ab58 <etharp_tmr+0xd8>)
  40aafe:	4613      	mov	r3, r2
  40ab00:	009b      	lsls	r3, r3, #2
  40ab02:	4413      	add	r3, r2
  40ab04:	009b      	lsls	r3, r3, #2
  40ab06:	440b      	add	r3, r1
  40ab08:	3313      	adds	r3, #19
  40ab0a:	781b      	ldrb	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40ab0c:	2b01      	cmp	r3, #1
  40ab0e:	d904      	bls.n	40ab1a <etharp_tmr+0x9a>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  40ab10:	79fb      	ldrb	r3, [r7, #7]
  40ab12:	4618      	mov	r0, r3
  40ab14:	4b11      	ldr	r3, [pc, #68]	; (40ab5c <etharp_tmr+0xdc>)
  40ab16:	4798      	blx	r3
  40ab18:	e014      	b.n	40ab44 <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  40ab1a:	79fa      	ldrb	r2, [r7, #7]
  40ab1c:	490e      	ldr	r1, [pc, #56]	; (40ab58 <etharp_tmr+0xd8>)
  40ab1e:	4613      	mov	r3, r2
  40ab20:	009b      	lsls	r3, r3, #2
  40ab22:	4413      	add	r3, r2
  40ab24:	009b      	lsls	r3, r3, #2
  40ab26:	440b      	add	r3, r1
  40ab28:	3312      	adds	r3, #18
  40ab2a:	781b      	ldrb	r3, [r3, #0]
  40ab2c:	2b03      	cmp	r3, #3
  40ab2e:	d109      	bne.n	40ab44 <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  40ab30:	79fa      	ldrb	r2, [r7, #7]
  40ab32:	4909      	ldr	r1, [pc, #36]	; (40ab58 <etharp_tmr+0xd8>)
  40ab34:	4613      	mov	r3, r2
  40ab36:	009b      	lsls	r3, r3, #2
  40ab38:	4413      	add	r3, r2
  40ab3a:	009b      	lsls	r3, r3, #2
  40ab3c:	440b      	add	r3, r1
  40ab3e:	3312      	adds	r3, #18
  40ab40:	2202      	movs	r2, #2
  40ab42:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40ab44:	79fb      	ldrb	r3, [r7, #7]
  40ab46:	3301      	adds	r3, #1
  40ab48:	71fb      	strb	r3, [r7, #7]
  40ab4a:	79fb      	ldrb	r3, [r7, #7]
  40ab4c:	2b09      	cmp	r3, #9
  40ab4e:	d99d      	bls.n	40aa8c <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
  40ab50:	bf00      	nop
  40ab52:	3708      	adds	r7, #8
  40ab54:	46bd      	mov	sp, r7
  40ab56:	bd80      	pop	{r7, pc}
  40ab58:	20402080 	.word	0x20402080
  40ab5c:	0040aa19 	.word	0x0040aa19

0040ab60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  40ab60:	b580      	push	{r7, lr}
  40ab62:	b086      	sub	sp, #24
  40ab64:	af00      	add	r7, sp, #0
  40ab66:	6078      	str	r0, [r7, #4]
  40ab68:	460b      	mov	r3, r1
  40ab6a:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  40ab6c:	230a      	movs	r3, #10
  40ab6e:	75fb      	strb	r3, [r7, #23]
  40ab70:	230a      	movs	r3, #10
  40ab72:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
  40ab74:	230a      	movs	r3, #10
  40ab76:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
  40ab78:	2300      	movs	r3, #0
  40ab7a:	753b      	strb	r3, [r7, #20]
  40ab7c:	2300      	movs	r3, #0
  40ab7e:	74fb      	strb	r3, [r7, #19]
  40ab80:	2300      	movs	r3, #0
  40ab82:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  40ab84:	230a      	movs	r3, #10
  40ab86:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
  40ab88:	2300      	movs	r3, #0
  40ab8a:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40ab8c:	2300      	movs	r3, #0
  40ab8e:	753b      	strb	r3, [r7, #20]
  40ab90:	e086      	b.n	40aca0 <etharp_find_entry+0x140>
    u8_t state = arp_table[i].state;
  40ab92:	7d3a      	ldrb	r2, [r7, #20]
  40ab94:	496d      	ldr	r1, [pc, #436]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ab96:	4613      	mov	r3, r2
  40ab98:	009b      	lsls	r3, r3, #2
  40ab9a:	4413      	add	r3, r2
  40ab9c:	009b      	lsls	r3, r3, #2
  40ab9e:	440b      	add	r3, r1
  40aba0:	3312      	adds	r3, #18
  40aba2:	781b      	ldrb	r3, [r3, #0]
  40aba4:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  40aba6:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40abaa:	2b0a      	cmp	r3, #10
  40abac:	d105      	bne.n	40abba <etharp_find_entry+0x5a>
  40abae:	7bfb      	ldrb	r3, [r7, #15]
  40abb0:	2b00      	cmp	r3, #0
  40abb2:	d102      	bne.n	40abba <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  40abb4:	7d3b      	ldrb	r3, [r7, #20]
  40abb6:	757b      	strb	r3, [r7, #21]
  40abb8:	e06f      	b.n	40ac9a <etharp_find_entry+0x13a>
    } else if (state != ETHARP_STATE_EMPTY) {
  40abba:	7bfb      	ldrb	r3, [r7, #15]
  40abbc:	2b00      	cmp	r3, #0
  40abbe:	d06c      	beq.n	40ac9a <etharp_find_entry+0x13a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  40abc0:	687b      	ldr	r3, [r7, #4]
  40abc2:	2b00      	cmp	r3, #0
  40abc4:	d00f      	beq.n	40abe6 <etharp_find_entry+0x86>
  40abc6:	687b      	ldr	r3, [r7, #4]
  40abc8:	6819      	ldr	r1, [r3, #0]
  40abca:	7d3a      	ldrb	r2, [r7, #20]
  40abcc:	485f      	ldr	r0, [pc, #380]	; (40ad4c <etharp_find_entry+0x1ec>)
  40abce:	4613      	mov	r3, r2
  40abd0:	009b      	lsls	r3, r3, #2
  40abd2:	4413      	add	r3, r2
  40abd4:	009b      	lsls	r3, r3, #2
  40abd6:	4403      	add	r3, r0
  40abd8:	3304      	adds	r3, #4
  40abda:	681b      	ldr	r3, [r3, #0]
  40abdc:	4299      	cmp	r1, r3
  40abde:	d102      	bne.n	40abe6 <etharp_find_entry+0x86>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  40abe0:	f997 3014 	ldrsb.w	r3, [r7, #20]
  40abe4:	e0ae      	b.n	40ad44 <etharp_find_entry+0x1e4>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  40abe6:	7bfb      	ldrb	r3, [r7, #15]
  40abe8:	2b01      	cmp	r3, #1
  40abea:	d13b      	bne.n	40ac64 <etharp_find_entry+0x104>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  40abec:	7d3a      	ldrb	r2, [r7, #20]
  40abee:	4957      	ldr	r1, [pc, #348]	; (40ad4c <etharp_find_entry+0x1ec>)
  40abf0:	4613      	mov	r3, r2
  40abf2:	009b      	lsls	r3, r3, #2
  40abf4:	4413      	add	r3, r2
  40abf6:	009b      	lsls	r3, r3, #2
  40abf8:	440b      	add	r3, r1
  40abfa:	681b      	ldr	r3, [r3, #0]
  40abfc:	2b00      	cmp	r3, #0
  40abfe:	d018      	beq.n	40ac32 <etharp_find_entry+0xd2>
          if (arp_table[i].ctime >= age_queue) {
  40ac00:	7d3a      	ldrb	r2, [r7, #20]
  40ac02:	4952      	ldr	r1, [pc, #328]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac04:	4613      	mov	r3, r2
  40ac06:	009b      	lsls	r3, r3, #2
  40ac08:	4413      	add	r3, r2
  40ac0a:	009b      	lsls	r3, r3, #2
  40ac0c:	440b      	add	r3, r1
  40ac0e:	3313      	adds	r3, #19
  40ac10:	781b      	ldrb	r3, [r3, #0]
  40ac12:	7c3a      	ldrb	r2, [r7, #16]
  40ac14:	429a      	cmp	r2, r3
  40ac16:	d840      	bhi.n	40ac9a <etharp_find_entry+0x13a>
            old_queue = i;
  40ac18:	7d3b      	ldrb	r3, [r7, #20]
  40ac1a:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
  40ac1c:	7d3a      	ldrb	r2, [r7, #20]
  40ac1e:	494b      	ldr	r1, [pc, #300]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac20:	4613      	mov	r3, r2
  40ac22:	009b      	lsls	r3, r3, #2
  40ac24:	4413      	add	r3, r2
  40ac26:	009b      	lsls	r3, r3, #2
  40ac28:	440b      	add	r3, r1
  40ac2a:	3313      	adds	r3, #19
  40ac2c:	781b      	ldrb	r3, [r3, #0]
  40ac2e:	743b      	strb	r3, [r7, #16]
  40ac30:	e033      	b.n	40ac9a <etharp_find_entry+0x13a>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  40ac32:	7d3a      	ldrb	r2, [r7, #20]
  40ac34:	4945      	ldr	r1, [pc, #276]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac36:	4613      	mov	r3, r2
  40ac38:	009b      	lsls	r3, r3, #2
  40ac3a:	4413      	add	r3, r2
  40ac3c:	009b      	lsls	r3, r3, #2
  40ac3e:	440b      	add	r3, r1
  40ac40:	3313      	adds	r3, #19
  40ac42:	781b      	ldrb	r3, [r3, #0]
  40ac44:	7cfa      	ldrb	r2, [r7, #19]
  40ac46:	429a      	cmp	r2, r3
  40ac48:	d827      	bhi.n	40ac9a <etharp_find_entry+0x13a>
            old_pending = i;
  40ac4a:	7d3b      	ldrb	r3, [r7, #20]
  40ac4c:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
  40ac4e:	7d3a      	ldrb	r2, [r7, #20]
  40ac50:	493e      	ldr	r1, [pc, #248]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac52:	4613      	mov	r3, r2
  40ac54:	009b      	lsls	r3, r3, #2
  40ac56:	4413      	add	r3, r2
  40ac58:	009b      	lsls	r3, r3, #2
  40ac5a:	440b      	add	r3, r1
  40ac5c:	3313      	adds	r3, #19
  40ac5e:	781b      	ldrb	r3, [r3, #0]
  40ac60:	74fb      	strb	r3, [r7, #19]
  40ac62:	e01a      	b.n	40ac9a <etharp_find_entry+0x13a>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  40ac64:	7bfb      	ldrb	r3, [r7, #15]
  40ac66:	2b01      	cmp	r3, #1
  40ac68:	d917      	bls.n	40ac9a <etharp_find_entry+0x13a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  40ac6a:	7d3a      	ldrb	r2, [r7, #20]
  40ac6c:	4937      	ldr	r1, [pc, #220]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac6e:	4613      	mov	r3, r2
  40ac70:	009b      	lsls	r3, r3, #2
  40ac72:	4413      	add	r3, r2
  40ac74:	009b      	lsls	r3, r3, #2
  40ac76:	440b      	add	r3, r1
  40ac78:	3313      	adds	r3, #19
  40ac7a:	781b      	ldrb	r3, [r3, #0]
  40ac7c:	7cba      	ldrb	r2, [r7, #18]
  40ac7e:	429a      	cmp	r2, r3
  40ac80:	d80b      	bhi.n	40ac9a <etharp_find_entry+0x13a>
            old_stable = i;
  40ac82:	7d3b      	ldrb	r3, [r7, #20]
  40ac84:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
  40ac86:	7d3a      	ldrb	r2, [r7, #20]
  40ac88:	4930      	ldr	r1, [pc, #192]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ac8a:	4613      	mov	r3, r2
  40ac8c:	009b      	lsls	r3, r3, #2
  40ac8e:	4413      	add	r3, r2
  40ac90:	009b      	lsls	r3, r3, #2
  40ac92:	440b      	add	r3, r1
  40ac94:	3313      	adds	r3, #19
  40ac96:	781b      	ldrb	r3, [r3, #0]
  40ac98:	74bb      	strb	r3, [r7, #18]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40ac9a:	7d3b      	ldrb	r3, [r7, #20]
  40ac9c:	3301      	adds	r3, #1
  40ac9e:	753b      	strb	r3, [r7, #20]
  40aca0:	7d3b      	ldrb	r3, [r7, #20]
  40aca2:	2b09      	cmp	r3, #9
  40aca4:	f67f af75 	bls.w	40ab92 <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  40aca8:	78fb      	ldrb	r3, [r7, #3]
  40acaa:	f003 0302 	and.w	r3, r3, #2
  40acae:	2b00      	cmp	r3, #0
  40acb0:	d108      	bne.n	40acc4 <etharp_find_entry+0x164>
  40acb2:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40acb6:	2b0a      	cmp	r3, #10
  40acb8:	d107      	bne.n	40acca <etharp_find_entry+0x16a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40acba:	78fb      	ldrb	r3, [r7, #3]
  40acbc:	f003 0301 	and.w	r3, r3, #1
  40acc0:	2b00      	cmp	r3, #0
  40acc2:	d102      	bne.n	40acca <etharp_find_entry+0x16a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  40acc4:	f04f 33ff 	mov.w	r3, #4294967295
  40acc8:	e03c      	b.n	40ad44 <etharp_find_entry+0x1e4>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  40acca:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40acce:	2b09      	cmp	r3, #9
  40acd0:	dc02      	bgt.n	40acd8 <etharp_find_entry+0x178>
    i = empty;
  40acd2:	7d7b      	ldrb	r3, [r7, #21]
  40acd4:	753b      	strb	r3, [r7, #20]
  40acd6:	e01b      	b.n	40ad10 <etharp_find_entry+0x1b0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  40acd8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  40acdc:	2b09      	cmp	r3, #9
  40acde:	dc02      	bgt.n	40ace6 <etharp_find_entry+0x186>
      /* recycle oldest stable*/
      i = old_stable;
  40ace0:	7dbb      	ldrb	r3, [r7, #22]
  40ace2:	753b      	strb	r3, [r7, #20]
  40ace4:	e010      	b.n	40ad08 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  40ace6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40acea:	2b09      	cmp	r3, #9
  40acec:	dc02      	bgt.n	40acf4 <etharp_find_entry+0x194>
      /* recycle oldest pending */
      i = old_pending;
  40acee:	7dfb      	ldrb	r3, [r7, #23]
  40acf0:	753b      	strb	r3, [r7, #20]
  40acf2:	e009      	b.n	40ad08 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  40acf4:	f997 3011 	ldrsb.w	r3, [r7, #17]
  40acf8:	2b09      	cmp	r3, #9
  40acfa:	dc02      	bgt.n	40ad02 <etharp_find_entry+0x1a2>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  40acfc:	7c7b      	ldrb	r3, [r7, #17]
  40acfe:	753b      	strb	r3, [r7, #20]
  40ad00:	e002      	b.n	40ad08 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  40ad02:	f04f 33ff 	mov.w	r3, #4294967295
  40ad06:	e01d      	b.n	40ad44 <etharp_find_entry+0x1e4>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  40ad08:	7d3b      	ldrb	r3, [r7, #20]
  40ad0a:	4618      	mov	r0, r3
  40ad0c:	4b10      	ldr	r3, [pc, #64]	; (40ad50 <etharp_find_entry+0x1f0>)
  40ad0e:	4798      	blx	r3
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  40ad10:	687b      	ldr	r3, [r7, #4]
  40ad12:	2b00      	cmp	r3, #0
  40ad14:	d00a      	beq.n	40ad2c <etharp_find_entry+0x1cc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  40ad16:	7d3a      	ldrb	r2, [r7, #20]
  40ad18:	687b      	ldr	r3, [r7, #4]
  40ad1a:	6819      	ldr	r1, [r3, #0]
  40ad1c:	480b      	ldr	r0, [pc, #44]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ad1e:	4613      	mov	r3, r2
  40ad20:	009b      	lsls	r3, r3, #2
  40ad22:	4413      	add	r3, r2
  40ad24:	009b      	lsls	r3, r3, #2
  40ad26:	4403      	add	r3, r0
  40ad28:	3304      	adds	r3, #4
  40ad2a:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
  40ad2c:	7d3a      	ldrb	r2, [r7, #20]
  40ad2e:	4907      	ldr	r1, [pc, #28]	; (40ad4c <etharp_find_entry+0x1ec>)
  40ad30:	4613      	mov	r3, r2
  40ad32:	009b      	lsls	r3, r3, #2
  40ad34:	4413      	add	r3, r2
  40ad36:	009b      	lsls	r3, r3, #2
  40ad38:	440b      	add	r3, r1
  40ad3a:	3313      	adds	r3, #19
  40ad3c:	2200      	movs	r2, #0
  40ad3e:	701a      	strb	r2, [r3, #0]
  return (err_t)i;
  40ad40:	f997 3014 	ldrsb.w	r3, [r7, #20]
}
  40ad44:	4618      	mov	r0, r3
  40ad46:	3718      	adds	r7, #24
  40ad48:	46bd      	mov	sp, r7
  40ad4a:	bd80      	pop	{r7, pc}
  40ad4c:	20402080 	.word	0x20402080
  40ad50:	0040aa19 	.word	0x0040aa19

0040ad54 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  40ad54:	b580      	push	{r7, lr}
  40ad56:	b086      	sub	sp, #24
  40ad58:	af00      	add	r7, sp, #0
  40ad5a:	60f8      	str	r0, [r7, #12]
  40ad5c:	60b9      	str	r1, [r7, #8]
  40ad5e:	607a      	str	r2, [r7, #4]
  40ad60:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  40ad62:	68bb      	ldr	r3, [r7, #8]
  40ad64:	685b      	ldr	r3, [r3, #4]
  40ad66:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  40ad68:	697b      	ldr	r3, [r7, #20]
  40ad6a:	2206      	movs	r2, #6
  40ad6c:	6839      	ldr	r1, [r7, #0]
  40ad6e:	4618      	mov	r0, r3
  40ad70:	4b0c      	ldr	r3, [pc, #48]	; (40ada4 <etharp_send_ip+0x50>)
  40ad72:	4798      	blx	r3
  ETHADDR16_COPY(&ethhdr->src, src);
  40ad74:	697b      	ldr	r3, [r7, #20]
  40ad76:	3306      	adds	r3, #6
  40ad78:	2206      	movs	r2, #6
  40ad7a:	6879      	ldr	r1, [r7, #4]
  40ad7c:	4618      	mov	r0, r3
  40ad7e:	4b09      	ldr	r3, [pc, #36]	; (40ada4 <etharp_send_ip+0x50>)
  40ad80:	4798      	blx	r3
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  40ad82:	697b      	ldr	r3, [r7, #20]
  40ad84:	2200      	movs	r2, #0
  40ad86:	f042 0208 	orr.w	r2, r2, #8
  40ad8a:	731a      	strb	r2, [r3, #12]
  40ad8c:	2200      	movs	r2, #0
  40ad8e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  40ad90:	68fb      	ldr	r3, [r7, #12]
  40ad92:	699b      	ldr	r3, [r3, #24]
  40ad94:	68b9      	ldr	r1, [r7, #8]
  40ad96:	68f8      	ldr	r0, [r7, #12]
  40ad98:	4798      	blx	r3
  40ad9a:	4603      	mov	r3, r0
}
  40ad9c:	4618      	mov	r0, r3
  40ad9e:	3718      	adds	r7, #24
  40ada0:	46bd      	mov	sp, r7
  40ada2:	bd80      	pop	{r7, pc}
  40ada4:	0040c9e5 	.word	0x0040c9e5

0040ada8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  40ada8:	b590      	push	{r4, r7, lr}
  40adaa:	b087      	sub	sp, #28
  40adac:	af00      	add	r7, sp, #0
  40adae:	60f8      	str	r0, [r7, #12]
  40adb0:	60b9      	str	r1, [r7, #8]
  40adb2:	607a      	str	r2, [r7, #4]
  40adb4:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  40adb6:	68bb      	ldr	r3, [r7, #8]
  40adb8:	2b00      	cmp	r3, #0
  40adba:	d012      	beq.n	40ade2 <etharp_update_arp_entry+0x3a>
  40adbc:	68bb      	ldr	r3, [r7, #8]
  40adbe:	681b      	ldr	r3, [r3, #0]
  40adc0:	2b00      	cmp	r3, #0
  40adc2:	d00e      	beq.n	40ade2 <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
  40adc4:	68bb      	ldr	r3, [r7, #8]
  40adc6:	681b      	ldr	r3, [r3, #0]
  40adc8:	68f9      	ldr	r1, [r7, #12]
  40adca:	4618      	mov	r0, r3
  40adcc:	4b3d      	ldr	r3, [pc, #244]	; (40aec4 <etharp_update_arp_entry+0x11c>)
  40adce:	4798      	blx	r3
  40add0:	4603      	mov	r3, r0
  if (ip_addr_isany(ipaddr) ||
  40add2:	2b00      	cmp	r3, #0
  40add4:	d105      	bne.n	40ade2 <etharp_update_arp_entry+0x3a>
      ip_addr_ismulticast(ipaddr)) {
  40add6:	68bb      	ldr	r3, [r7, #8]
  40add8:	681b      	ldr	r3, [r3, #0]
  40adda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
  40adde:	2be0      	cmp	r3, #224	; 0xe0
  40ade0:	d102      	bne.n	40ade8 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40ade2:	f06f 030d 	mvn.w	r3, #13
  40ade6:	e068      	b.n	40aeba <etharp_update_arp_entry+0x112>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
  40ade8:	78fb      	ldrb	r3, [r7, #3]
  40adea:	4619      	mov	r1, r3
  40adec:	68b8      	ldr	r0, [r7, #8]
  40adee:	4b36      	ldr	r3, [pc, #216]	; (40aec8 <etharp_update_arp_entry+0x120>)
  40adf0:	4798      	blx	r3
  40adf2:	4603      	mov	r3, r0
  40adf4:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
  40adf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40adfa:	2b00      	cmp	r3, #0
  40adfc:	da02      	bge.n	40ae04 <etharp_update_arp_entry+0x5c>
    return (err_t)i;
  40adfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40ae02:	e05a      	b.n	40aeba <etharp_update_arp_entry+0x112>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  40ae04:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae08:	4930      	ldr	r1, [pc, #192]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae0a:	4613      	mov	r3, r2
  40ae0c:	009b      	lsls	r3, r3, #2
  40ae0e:	4413      	add	r3, r2
  40ae10:	009b      	lsls	r3, r3, #2
  40ae12:	440b      	add	r3, r1
  40ae14:	3312      	adds	r3, #18
  40ae16:	2202      	movs	r2, #2
  40ae18:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  40ae1a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae1e:	492b      	ldr	r1, [pc, #172]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae20:	4613      	mov	r3, r2
  40ae22:	009b      	lsls	r3, r3, #2
  40ae24:	4413      	add	r3, r2
  40ae26:	009b      	lsls	r3, r3, #2
  40ae28:	440b      	add	r3, r1
  40ae2a:	3308      	adds	r3, #8
  40ae2c:	68fa      	ldr	r2, [r7, #12]
  40ae2e:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  40ae30:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae34:	4613      	mov	r3, r2
  40ae36:	009b      	lsls	r3, r3, #2
  40ae38:	4413      	add	r3, r2
  40ae3a:	009b      	lsls	r3, r3, #2
  40ae3c:	3308      	adds	r3, #8
  40ae3e:	4a23      	ldr	r2, [pc, #140]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae40:	4413      	add	r3, r2
  40ae42:	3304      	adds	r3, #4
  40ae44:	2206      	movs	r2, #6
  40ae46:	6879      	ldr	r1, [r7, #4]
  40ae48:	4618      	mov	r0, r3
  40ae4a:	4b21      	ldr	r3, [pc, #132]	; (40aed0 <etharp_update_arp_entry+0x128>)
  40ae4c:	4798      	blx	r3
  /* reset time stamp */
  arp_table[i].ctime = 0;
  40ae4e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae52:	491e      	ldr	r1, [pc, #120]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae54:	4613      	mov	r3, r2
  40ae56:	009b      	lsls	r3, r3, #2
  40ae58:	4413      	add	r3, r2
  40ae5a:	009b      	lsls	r3, r3, #2
  40ae5c:	440b      	add	r3, r1
  40ae5e:	3313      	adds	r3, #19
  40ae60:	2200      	movs	r2, #0
  40ae62:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
  40ae64:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae68:	4918      	ldr	r1, [pc, #96]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae6a:	4613      	mov	r3, r2
  40ae6c:	009b      	lsls	r3, r3, #2
  40ae6e:	4413      	add	r3, r2
  40ae70:	009b      	lsls	r3, r3, #2
  40ae72:	440b      	add	r3, r1
  40ae74:	681b      	ldr	r3, [r3, #0]
  40ae76:	2b00      	cmp	r3, #0
  40ae78:	d01e      	beq.n	40aeb8 <etharp_update_arp_entry+0x110>
    struct pbuf *p = arp_table[i].q;
  40ae7a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae7e:	4913      	ldr	r1, [pc, #76]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae80:	4613      	mov	r3, r2
  40ae82:	009b      	lsls	r3, r3, #2
  40ae84:	4413      	add	r3, r2
  40ae86:	009b      	lsls	r3, r3, #2
  40ae88:	440b      	add	r3, r1
  40ae8a:	681b      	ldr	r3, [r3, #0]
  40ae8c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
  40ae8e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40ae92:	490e      	ldr	r1, [pc, #56]	; (40aecc <etharp_update_arp_entry+0x124>)
  40ae94:	4613      	mov	r3, r2
  40ae96:	009b      	lsls	r3, r3, #2
  40ae98:	4413      	add	r3, r2
  40ae9a:	009b      	lsls	r3, r3, #2
  40ae9c:	440b      	add	r3, r1
  40ae9e:	2200      	movs	r2, #0
  40aea0:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  40aea2:	68fb      	ldr	r3, [r7, #12]
  40aea4:	f103 0227 	add.w	r2, r3, #39	; 0x27
  40aea8:	687b      	ldr	r3, [r7, #4]
  40aeaa:	6939      	ldr	r1, [r7, #16]
  40aeac:	68f8      	ldr	r0, [r7, #12]
  40aeae:	4c09      	ldr	r4, [pc, #36]	; (40aed4 <etharp_update_arp_entry+0x12c>)
  40aeb0:	47a0      	blx	r4
    /* free the queued IP packet */
    pbuf_free(p);
  40aeb2:	6938      	ldr	r0, [r7, #16]
  40aeb4:	4b08      	ldr	r3, [pc, #32]	; (40aed8 <etharp_update_arp_entry+0x130>)
  40aeb6:	4798      	blx	r3
  }
  return ERR_OK;
  40aeb8:	2300      	movs	r3, #0
}
  40aeba:	4618      	mov	r0, r3
  40aebc:	371c      	adds	r7, #28
  40aebe:	46bd      	mov	sp, r7
  40aec0:	bd90      	pop	{r4, r7, pc}
  40aec2:	bf00      	nop
  40aec4:	00404251 	.word	0x00404251
  40aec8:	0040ab61 	.word	0x0040ab61
  40aecc:	20402080 	.word	0x20402080
  40aed0:	0040c9e5 	.word	0x0040c9e5
  40aed4:	0040ad55 	.word	0x0040ad55
  40aed8:	00405a01 	.word	0x00405a01

0040aedc <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
  40aedc:	b580      	push	{r7, lr}
  40aede:	b084      	sub	sp, #16
  40aee0:	af00      	add	r7, sp, #0
  40aee2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40aee4:	2300      	movs	r3, #0
  40aee6:	73fb      	strb	r3, [r7, #15]
  40aee8:	e01f      	b.n	40af2a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
  40aeea:	7bfa      	ldrb	r2, [r7, #15]
  40aeec:	4912      	ldr	r1, [pc, #72]	; (40af38 <etharp_cleanup_netif+0x5c>)
  40aeee:	4613      	mov	r3, r2
  40aef0:	009b      	lsls	r3, r3, #2
  40aef2:	4413      	add	r3, r2
  40aef4:	009b      	lsls	r3, r3, #2
  40aef6:	440b      	add	r3, r1
  40aef8:	3312      	adds	r3, #18
  40aefa:	781b      	ldrb	r3, [r3, #0]
  40aefc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  40aefe:	7bbb      	ldrb	r3, [r7, #14]
  40af00:	2b00      	cmp	r3, #0
  40af02:	d00f      	beq.n	40af24 <etharp_cleanup_netif+0x48>
  40af04:	7bfa      	ldrb	r2, [r7, #15]
  40af06:	490c      	ldr	r1, [pc, #48]	; (40af38 <etharp_cleanup_netif+0x5c>)
  40af08:	4613      	mov	r3, r2
  40af0a:	009b      	lsls	r3, r3, #2
  40af0c:	4413      	add	r3, r2
  40af0e:	009b      	lsls	r3, r3, #2
  40af10:	440b      	add	r3, r1
  40af12:	3308      	adds	r3, #8
  40af14:	681a      	ldr	r2, [r3, #0]
  40af16:	687b      	ldr	r3, [r7, #4]
  40af18:	429a      	cmp	r2, r3
  40af1a:	d103      	bne.n	40af24 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
  40af1c:	7bfb      	ldrb	r3, [r7, #15]
  40af1e:	4618      	mov	r0, r3
  40af20:	4b06      	ldr	r3, [pc, #24]	; (40af3c <etharp_cleanup_netif+0x60>)
  40af22:	4798      	blx	r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40af24:	7bfb      	ldrb	r3, [r7, #15]
  40af26:	3301      	adds	r3, #1
  40af28:	73fb      	strb	r3, [r7, #15]
  40af2a:	7bfb      	ldrb	r3, [r7, #15]
  40af2c:	2b09      	cmp	r3, #9
  40af2e:	d9dc      	bls.n	40aeea <etharp_cleanup_netif+0xe>
    }
  }
}
  40af30:	bf00      	nop
  40af32:	3710      	adds	r7, #16
  40af34:	46bd      	mov	sp, r7
  40af36:	bd80      	pop	{r7, pc}
  40af38:	20402080 	.word	0x20402080
  40af3c:	0040aa19 	.word	0x0040aa19

0040af40 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
  40af40:	b590      	push	{r4, r7, lr}
  40af42:	b08b      	sub	sp, #44	; 0x2c
  40af44:	af00      	add	r7, sp, #0
  40af46:	60f8      	str	r0, [r7, #12]
  40af48:	60b9      	str	r1, [r7, #8]
  40af4a:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  40af4c:	68fb      	ldr	r3, [r7, #12]
  40af4e:	2b00      	cmp	r3, #0
  40af50:	d100      	bne.n	40af54 <etharp_arp_input+0x14>
  40af52:	e7fe      	b.n	40af52 <etharp_arp_input+0x12>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
  40af54:	687b      	ldr	r3, [r7, #4]
  40af56:	895b      	ldrh	r3, [r3, #10]
  40af58:	2b29      	cmp	r3, #41	; 0x29
  40af5a:	d803      	bhi.n	40af64 <etharp_arp_input+0x24>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40af5c:	6878      	ldr	r0, [r7, #4]
  40af5e:	4b51      	ldr	r3, [pc, #324]	; (40b0a4 <etharp_arp_input+0x164>)
  40af60:	4798      	blx	r3
    return;
  40af62:	e09c      	b.n	40b09e <etharp_arp_input+0x15e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
  40af64:	687b      	ldr	r3, [r7, #4]
  40af66:	685b      	ldr	r3, [r3, #4]
  40af68:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40af6a:	6a3b      	ldr	r3, [r7, #32]
  40af6c:	330e      	adds	r3, #14
  40af6e:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40af70:	69fb      	ldr	r3, [r7, #28]
  40af72:	881b      	ldrh	r3, [r3, #0]
  40af74:	b29b      	uxth	r3, r3
  40af76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40af7a:	d10c      	bne.n	40af96 <etharp_arp_input+0x56>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40af7c:	69fb      	ldr	r3, [r7, #28]
  40af7e:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40af80:	2b06      	cmp	r3, #6
  40af82:	d108      	bne.n	40af96 <etharp_arp_input+0x56>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40af84:	69fb      	ldr	r3, [r7, #28]
  40af86:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40af88:	2b04      	cmp	r3, #4
  40af8a:	d104      	bne.n	40af96 <etharp_arp_input+0x56>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  40af8c:	69fb      	ldr	r3, [r7, #28]
  40af8e:	885b      	ldrh	r3, [r3, #2]
  40af90:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40af92:	2b08      	cmp	r3, #8
  40af94:	d003      	beq.n	40af9e <etharp_arp_input+0x5e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40af96:	6878      	ldr	r0, [r7, #4]
  40af98:	4b42      	ldr	r3, [pc, #264]	; (40b0a4 <etharp_arp_input+0x164>)
  40af9a:	4798      	blx	r3
    return;
  40af9c:	e07f      	b.n	40b09e <etharp_arp_input+0x15e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  40af9e:	69fb      	ldr	r3, [r7, #28]
  40afa0:	330e      	adds	r3, #14
  40afa2:	681b      	ldr	r3, [r3, #0]
  40afa4:	61bb      	str	r3, [r7, #24]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  40afa6:	69fb      	ldr	r3, [r7, #28]
  40afa8:	3318      	adds	r3, #24
  40afaa:	681b      	ldr	r3, [r3, #0]
  40afac:	617b      	str	r3, [r7, #20]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
  40afae:	68fb      	ldr	r3, [r7, #12]
  40afb0:	3304      	adds	r3, #4
  40afb2:	2b00      	cmp	r3, #0
  40afb4:	d003      	beq.n	40afbe <etharp_arp_input+0x7e>
  40afb6:	68fb      	ldr	r3, [r7, #12]
  40afb8:	685b      	ldr	r3, [r3, #4]
  40afba:	2b00      	cmp	r3, #0
  40afbc:	d103      	bne.n	40afc6 <etharp_arp_input+0x86>
    for_us = 0;
  40afbe:	2300      	movs	r3, #0
  40afc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40afc4:	e009      	b.n	40afda <etharp_arp_input+0x9a>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  40afc6:	697a      	ldr	r2, [r7, #20]
  40afc8:	68fb      	ldr	r3, [r7, #12]
  40afca:	685b      	ldr	r3, [r3, #4]
  40afcc:	429a      	cmp	r2, r3
  40afce:	bf0c      	ite	eq
  40afd0:	2301      	moveq	r3, #1
  40afd2:	2300      	movne	r3, #0
  40afd4:	b2db      	uxtb	r3, r3
  40afd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40afda:	69fb      	ldr	r3, [r7, #28]
  40afdc:	f103 0208 	add.w	r2, r3, #8
  40afe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40afe4:	2b00      	cmp	r3, #0
  40afe6:	d001      	beq.n	40afec <etharp_arp_input+0xac>
  40afe8:	2301      	movs	r3, #1
  40afea:	e000      	b.n	40afee <etharp_arp_input+0xae>
  40afec:	2302      	movs	r3, #2
  40afee:	f107 0118 	add.w	r1, r7, #24
  40aff2:	68f8      	ldr	r0, [r7, #12]
  40aff4:	4c2c      	ldr	r4, [pc, #176]	; (40b0a8 <etharp_arp_input+0x168>)
  40aff6:	47a0      	blx	r4
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  40aff8:	69fb      	ldr	r3, [r7, #28]
  40affa:	88db      	ldrh	r3, [r3, #6]
  40affc:	b29b      	uxth	r3, r3
  40affe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40b002:	d003      	beq.n	40b00c <etharp_arp_input+0xcc>
  40b004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b008:	d03f      	beq.n	40b08a <etharp_arp_input+0x14a>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  40b00a:	e045      	b.n	40b098 <etharp_arp_input+0x158>
    if (for_us) {
  40b00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b010:	2b00      	cmp	r3, #0
  40b012:	d036      	beq.n	40b082 <etharp_arp_input+0x142>
      hdr->opcode = htons(ARP_REPLY);
  40b014:	2002      	movs	r0, #2
  40b016:	4b25      	ldr	r3, [pc, #148]	; (40b0ac <etharp_arp_input+0x16c>)
  40b018:	4798      	blx	r3
  40b01a:	4603      	mov	r3, r0
  40b01c:	461a      	mov	r2, r3
  40b01e:	69fb      	ldr	r3, [r7, #28]
  40b020:	80da      	strh	r2, [r3, #6]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  40b022:	69fb      	ldr	r3, [r7, #28]
  40b024:	3318      	adds	r3, #24
  40b026:	69fa      	ldr	r2, [r7, #28]
  40b028:	320e      	adds	r2, #14
  40b02a:	6812      	ldr	r2, [r2, #0]
  40b02c:	601a      	str	r2, [r3, #0]
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  40b02e:	69fb      	ldr	r3, [r7, #28]
  40b030:	330e      	adds	r3, #14
  40b032:	68fa      	ldr	r2, [r7, #12]
  40b034:	3204      	adds	r2, #4
  40b036:	6812      	ldr	r2, [r2, #0]
  40b038:	601a      	str	r2, [r3, #0]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  40b03a:	69fb      	ldr	r3, [r7, #28]
  40b03c:	f103 0012 	add.w	r0, r3, #18
  40b040:	69fb      	ldr	r3, [r7, #28]
  40b042:	3308      	adds	r3, #8
  40b044:	2206      	movs	r2, #6
  40b046:	4619      	mov	r1, r3
  40b048:	4b19      	ldr	r3, [pc, #100]	; (40b0b0 <etharp_arp_input+0x170>)
  40b04a:	4798      	blx	r3
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  40b04c:	6a38      	ldr	r0, [r7, #32]
  40b04e:	69fb      	ldr	r3, [r7, #28]
  40b050:	3308      	adds	r3, #8
  40b052:	2206      	movs	r2, #6
  40b054:	4619      	mov	r1, r3
  40b056:	4b16      	ldr	r3, [pc, #88]	; (40b0b0 <etharp_arp_input+0x170>)
  40b058:	4798      	blx	r3
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  40b05a:	69fb      	ldr	r3, [r7, #28]
  40b05c:	3308      	adds	r3, #8
  40b05e:	2206      	movs	r2, #6
  40b060:	68b9      	ldr	r1, [r7, #8]
  40b062:	4618      	mov	r0, r3
  40b064:	4b12      	ldr	r3, [pc, #72]	; (40b0b0 <etharp_arp_input+0x170>)
  40b066:	4798      	blx	r3
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  40b068:	6a3b      	ldr	r3, [r7, #32]
  40b06a:	3306      	adds	r3, #6
  40b06c:	2206      	movs	r2, #6
  40b06e:	68b9      	ldr	r1, [r7, #8]
  40b070:	4618      	mov	r0, r3
  40b072:	4b0f      	ldr	r3, [pc, #60]	; (40b0b0 <etharp_arp_input+0x170>)
  40b074:	4798      	blx	r3
      netif->linkoutput(netif, p);
  40b076:	68fb      	ldr	r3, [r7, #12]
  40b078:	699b      	ldr	r3, [r3, #24]
  40b07a:	6879      	ldr	r1, [r7, #4]
  40b07c:	68f8      	ldr	r0, [r7, #12]
  40b07e:	4798      	blx	r3
    break;
  40b080:	e00a      	b.n	40b098 <etharp_arp_input+0x158>
    } else if (ip_addr_isany(&netif->ip_addr)) {
  40b082:	68fb      	ldr	r3, [r7, #12]
  40b084:	3304      	adds	r3, #4
  40b086:	2b00      	cmp	r3, #0
    break;
  40b088:	e006      	b.n	40b098 <etharp_arp_input+0x158>
    dhcp_arp_reply(netif, &sipaddr);
  40b08a:	f107 0318 	add.w	r3, r7, #24
  40b08e:	4619      	mov	r1, r3
  40b090:	68f8      	ldr	r0, [r7, #12]
  40b092:	4b08      	ldr	r3, [pc, #32]	; (40b0b4 <etharp_arp_input+0x174>)
  40b094:	4798      	blx	r3
    break;
  40b096:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
  40b098:	6878      	ldr	r0, [r7, #4]
  40b09a:	4b02      	ldr	r3, [pc, #8]	; (40b0a4 <etharp_arp_input+0x164>)
  40b09c:	4798      	blx	r3
}
  40b09e:	372c      	adds	r7, #44	; 0x2c
  40b0a0:	46bd      	mov	sp, r7
  40b0a2:	bd90      	pop	{r4, r7, pc}
  40b0a4:	00405a01 	.word	0x00405a01
  40b0a8:	0040ada9 	.word	0x0040ada9
  40b0ac:	00401e19 	.word	0x00401e19
  40b0b0:	0040c9e5 	.word	0x0040c9e5
  40b0b4:	00402559 	.word	0x00402559

0040b0b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  40b0b8:	b590      	push	{r4, r7, lr}
  40b0ba:	b085      	sub	sp, #20
  40b0bc:	af00      	add	r7, sp, #0
  40b0be:	60f8      	str	r0, [r7, #12]
  40b0c0:	60b9      	str	r1, [r7, #8]
  40b0c2:	4613      	mov	r3, r2
  40b0c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b0c6:	79fa      	ldrb	r2, [r7, #7]
  40b0c8:	4921      	ldr	r1, [pc, #132]	; (40b150 <etharp_output_to_arp_index+0x98>)
  40b0ca:	4613      	mov	r3, r2
  40b0cc:	009b      	lsls	r3, r3, #2
  40b0ce:	4413      	add	r3, r2
  40b0d0:	009b      	lsls	r3, r3, #2
  40b0d2:	440b      	add	r3, r1
  40b0d4:	3312      	adds	r3, #18
  40b0d6:	781b      	ldrb	r3, [r3, #0]
  40b0d8:	2b02      	cmp	r3, #2
  40b0da:	d123      	bne.n	40b124 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  40b0dc:	79fa      	ldrb	r2, [r7, #7]
  40b0de:	491c      	ldr	r1, [pc, #112]	; (40b150 <etharp_output_to_arp_index+0x98>)
  40b0e0:	4613      	mov	r3, r2
  40b0e2:	009b      	lsls	r3, r3, #2
  40b0e4:	4413      	add	r3, r2
  40b0e6:	009b      	lsls	r3, r3, #2
  40b0e8:	440b      	add	r3, r1
  40b0ea:	3313      	adds	r3, #19
  40b0ec:	781b      	ldrb	r3, [r3, #0]
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b0ee:	2be3      	cmp	r3, #227	; 0xe3
  40b0f0:	d918      	bls.n	40b124 <etharp_output_to_arp_index+0x6c>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  40b0f2:	79fa      	ldrb	r2, [r7, #7]
  40b0f4:	4613      	mov	r3, r2
  40b0f6:	009b      	lsls	r3, r3, #2
  40b0f8:	4413      	add	r3, r2
  40b0fa:	009b      	lsls	r3, r3, #2
  40b0fc:	4a14      	ldr	r2, [pc, #80]	; (40b150 <etharp_output_to_arp_index+0x98>)
  40b0fe:	4413      	add	r3, r2
  40b100:	3304      	adds	r3, #4
  40b102:	4619      	mov	r1, r3
  40b104:	68f8      	ldr	r0, [r7, #12]
  40b106:	4b13      	ldr	r3, [pc, #76]	; (40b154 <etharp_output_to_arp_index+0x9c>)
  40b108:	4798      	blx	r3
  40b10a:	4603      	mov	r3, r0
  40b10c:	2b00      	cmp	r3, #0
  40b10e:	d109      	bne.n	40b124 <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  40b110:	79fa      	ldrb	r2, [r7, #7]
  40b112:	490f      	ldr	r1, [pc, #60]	; (40b150 <etharp_output_to_arp_index+0x98>)
  40b114:	4613      	mov	r3, r2
  40b116:	009b      	lsls	r3, r3, #2
  40b118:	4413      	add	r3, r2
  40b11a:	009b      	lsls	r3, r3, #2
  40b11c:	440b      	add	r3, r1
  40b11e:	3312      	adds	r3, #18
  40b120:	2203      	movs	r2, #3
  40b122:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b124:	68fb      	ldr	r3, [r7, #12]
  40b126:	f103 0127 	add.w	r1, r3, #39	; 0x27
    &arp_table[arp_idx].ethaddr);
  40b12a:	79fa      	ldrb	r2, [r7, #7]
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b12c:	4613      	mov	r3, r2
  40b12e:	009b      	lsls	r3, r3, #2
  40b130:	4413      	add	r3, r2
  40b132:	009b      	lsls	r3, r3, #2
  40b134:	3308      	adds	r3, #8
  40b136:	4a06      	ldr	r2, [pc, #24]	; (40b150 <etharp_output_to_arp_index+0x98>)
  40b138:	4413      	add	r3, r2
  40b13a:	3304      	adds	r3, #4
  40b13c:	460a      	mov	r2, r1
  40b13e:	68b9      	ldr	r1, [r7, #8]
  40b140:	68f8      	ldr	r0, [r7, #12]
  40b142:	4c05      	ldr	r4, [pc, #20]	; (40b158 <etharp_output_to_arp_index+0xa0>)
  40b144:	47a0      	blx	r4
  40b146:	4603      	mov	r3, r0
}
  40b148:	4618      	mov	r0, r3
  40b14a:	3714      	adds	r7, #20
  40b14c:	46bd      	mov	sp, r7
  40b14e:	bd90      	pop	{r4, r7, pc}
  40b150:	20402080 	.word	0x20402080
  40b154:	0040b61d 	.word	0x0040b61d
  40b158:	0040ad55 	.word	0x0040ad55

0040b15c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  40b15c:	b590      	push	{r4, r7, lr}
  40b15e:	b089      	sub	sp, #36	; 0x24
  40b160:	af00      	add	r7, sp, #0
  40b162:	60f8      	str	r0, [r7, #12]
  40b164:	60b9      	str	r1, [r7, #8]
  40b166:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
  40b168:	687b      	ldr	r3, [r7, #4]
  40b16a:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  40b16c:	210e      	movs	r1, #14
  40b16e:	68b8      	ldr	r0, [r7, #8]
  40b170:	4b5d      	ldr	r3, [pc, #372]	; (40b2e8 <etharp_output+0x18c>)
  40b172:	4798      	blx	r3
  40b174:	4603      	mov	r3, r0
  40b176:	2b00      	cmp	r3, #0
  40b178:	d002      	beq.n	40b180 <etharp_output+0x24>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  40b17a:	f06f 0301 	mvn.w	r3, #1
  40b17e:	e0af      	b.n	40b2e0 <etharp_output+0x184>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  40b180:	687b      	ldr	r3, [r7, #4]
  40b182:	681b      	ldr	r3, [r3, #0]
  40b184:	68f9      	ldr	r1, [r7, #12]
  40b186:	4618      	mov	r0, r3
  40b188:	4b58      	ldr	r3, [pc, #352]	; (40b2ec <etharp_output+0x190>)
  40b18a:	4798      	blx	r3
  40b18c:	4603      	mov	r3, r0
  40b18e:	2b00      	cmp	r3, #0
  40b190:	d002      	beq.n	40b198 <etharp_output+0x3c>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  40b192:	4b57      	ldr	r3, [pc, #348]	; (40b2f0 <etharp_output+0x194>)
  40b194:	61fb      	str	r3, [r7, #28]
  40b196:	e09a      	b.n	40b2ce <etharp_output+0x172>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  40b198:	687b      	ldr	r3, [r7, #4]
  40b19a:	681b      	ldr	r3, [r3, #0]
  40b19c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40b1a0:	2be0      	cmp	r3, #224	; 0xe0
  40b1a2:	d116      	bne.n	40b1d2 <etharp_output+0x76>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  40b1a4:	2301      	movs	r3, #1
  40b1a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  40b1a8:	2300      	movs	r3, #0
  40b1aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  40b1ac:	235e      	movs	r3, #94	; 0x5e
  40b1ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  40b1b0:	687b      	ldr	r3, [r7, #4]
  40b1b2:	3301      	adds	r3, #1
  40b1b4:	781b      	ldrb	r3, [r3, #0]
  40b1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40b1ba:	b2db      	uxtb	r3, r3
  40b1bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  40b1be:	687b      	ldr	r3, [r7, #4]
  40b1c0:	789b      	ldrb	r3, [r3, #2]
  40b1c2:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  40b1c4:	687b      	ldr	r3, [r7, #4]
  40b1c6:	78db      	ldrb	r3, [r3, #3]
  40b1c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  40b1ca:	f107 0310 	add.w	r3, r7, #16
  40b1ce:	61fb      	str	r3, [r7, #28]
  40b1d0:	e07d      	b.n	40b2ce <etharp_output+0x172>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b1d2:	687b      	ldr	r3, [r7, #4]
  40b1d4:	681a      	ldr	r2, [r3, #0]
  40b1d6:	68fb      	ldr	r3, [r7, #12]
  40b1d8:	685b      	ldr	r3, [r3, #4]
  40b1da:	405a      	eors	r2, r3
  40b1dc:	68fb      	ldr	r3, [r7, #12]
  40b1de:	689b      	ldr	r3, [r3, #8]
  40b1e0:	4013      	ands	r3, r2
  40b1e2:	2b00      	cmp	r3, #0
  40b1e4:	d015      	beq.n	40b212 <etharp_output+0xb6>
        !ip_addr_islinklocal(ipaddr)) {
  40b1e6:	687b      	ldr	r3, [r7, #4]
  40b1e8:	681b      	ldr	r3, [r3, #0]
  40b1ea:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b1ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  40b1f0:	4293      	cmp	r3, r2
  40b1f2:	d00e      	beq.n	40b212 <etharp_output+0xb6>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
  40b1f4:	68fb      	ldr	r3, [r7, #12]
  40b1f6:	330c      	adds	r3, #12
  40b1f8:	2b00      	cmp	r3, #0
  40b1fa:	d007      	beq.n	40b20c <etharp_output+0xb0>
  40b1fc:	68fb      	ldr	r3, [r7, #12]
  40b1fe:	68db      	ldr	r3, [r3, #12]
  40b200:	2b00      	cmp	r3, #0
  40b202:	d003      	beq.n	40b20c <etharp_output+0xb0>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
  40b204:	68fb      	ldr	r3, [r7, #12]
  40b206:	330c      	adds	r3, #12
  40b208:	61bb      	str	r3, [r7, #24]
  40b20a:	e002      	b.n	40b212 <etharp_output+0xb6>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
  40b20c:	f06f 0303 	mvn.w	r3, #3
  40b210:	e066      	b.n	40b2e0 <etharp_output+0x184>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b212:	4b38      	ldr	r3, [pc, #224]	; (40b2f4 <etharp_output+0x198>)
  40b214:	781b      	ldrb	r3, [r3, #0]
  40b216:	4619      	mov	r1, r3
  40b218:	4a37      	ldr	r2, [pc, #220]	; (40b2f8 <etharp_output+0x19c>)
  40b21a:	460b      	mov	r3, r1
  40b21c:	009b      	lsls	r3, r3, #2
  40b21e:	440b      	add	r3, r1
  40b220:	009b      	lsls	r3, r3, #2
  40b222:	4413      	add	r3, r2
  40b224:	3312      	adds	r3, #18
  40b226:	781b      	ldrb	r3, [r3, #0]
  40b228:	2b01      	cmp	r3, #1
  40b22a:	d917      	bls.n	40b25c <etharp_output+0x100>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  40b22c:	69bb      	ldr	r3, [r7, #24]
  40b22e:	681a      	ldr	r2, [r3, #0]
  40b230:	4b30      	ldr	r3, [pc, #192]	; (40b2f4 <etharp_output+0x198>)
  40b232:	781b      	ldrb	r3, [r3, #0]
  40b234:	4618      	mov	r0, r3
  40b236:	4930      	ldr	r1, [pc, #192]	; (40b2f8 <etharp_output+0x19c>)
  40b238:	4603      	mov	r3, r0
  40b23a:	009b      	lsls	r3, r3, #2
  40b23c:	4403      	add	r3, r0
  40b23e:	009b      	lsls	r3, r3, #2
  40b240:	440b      	add	r3, r1
  40b242:	3304      	adds	r3, #4
  40b244:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b246:	429a      	cmp	r2, r3
  40b248:	d108      	bne.n	40b25c <etharp_output+0x100>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  40b24a:	4b2a      	ldr	r3, [pc, #168]	; (40b2f4 <etharp_output+0x198>)
  40b24c:	781b      	ldrb	r3, [r3, #0]
  40b24e:	461a      	mov	r2, r3
  40b250:	68b9      	ldr	r1, [r7, #8]
  40b252:	68f8      	ldr	r0, [r7, #12]
  40b254:	4b29      	ldr	r3, [pc, #164]	; (40b2fc <etharp_output+0x1a0>)
  40b256:	4798      	blx	r3
  40b258:	4603      	mov	r3, r0
  40b25a:	e041      	b.n	40b2e0 <etharp_output+0x184>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b25c:	2300      	movs	r3, #0
  40b25e:	75fb      	strb	r3, [r7, #23]
  40b260:	e02a      	b.n	40b2b8 <etharp_output+0x15c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b262:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b266:	4924      	ldr	r1, [pc, #144]	; (40b2f8 <etharp_output+0x19c>)
  40b268:	4613      	mov	r3, r2
  40b26a:	009b      	lsls	r3, r3, #2
  40b26c:	4413      	add	r3, r2
  40b26e:	009b      	lsls	r3, r3, #2
  40b270:	440b      	add	r3, r1
  40b272:	3312      	adds	r3, #18
  40b274:	781b      	ldrb	r3, [r3, #0]
  40b276:	2b01      	cmp	r3, #1
  40b278:	d918      	bls.n	40b2ac <etharp_output+0x150>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  40b27a:	69bb      	ldr	r3, [r7, #24]
  40b27c:	6819      	ldr	r1, [r3, #0]
  40b27e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b282:	481d      	ldr	r0, [pc, #116]	; (40b2f8 <etharp_output+0x19c>)
  40b284:	4613      	mov	r3, r2
  40b286:	009b      	lsls	r3, r3, #2
  40b288:	4413      	add	r3, r2
  40b28a:	009b      	lsls	r3, r3, #2
  40b28c:	4403      	add	r3, r0
  40b28e:	3304      	adds	r3, #4
  40b290:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b292:	4299      	cmp	r1, r3
  40b294:	d10a      	bne.n	40b2ac <etharp_output+0x150>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  40b296:	7dfa      	ldrb	r2, [r7, #23]
  40b298:	4b16      	ldr	r3, [pc, #88]	; (40b2f4 <etharp_output+0x198>)
  40b29a:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  40b29c:	7dfb      	ldrb	r3, [r7, #23]
  40b29e:	461a      	mov	r2, r3
  40b2a0:	68b9      	ldr	r1, [r7, #8]
  40b2a2:	68f8      	ldr	r0, [r7, #12]
  40b2a4:	4b15      	ldr	r3, [pc, #84]	; (40b2fc <etharp_output+0x1a0>)
  40b2a6:	4798      	blx	r3
  40b2a8:	4603      	mov	r3, r0
  40b2aa:	e019      	b.n	40b2e0 <etharp_output+0x184>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b2ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b2b0:	b2db      	uxtb	r3, r3
  40b2b2:	3301      	adds	r3, #1
  40b2b4:	b2db      	uxtb	r3, r3
  40b2b6:	75fb      	strb	r3, [r7, #23]
  40b2b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b2bc:	2b09      	cmp	r3, #9
  40b2be:	ddd0      	ble.n	40b262 <etharp_output+0x106>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  40b2c0:	68ba      	ldr	r2, [r7, #8]
  40b2c2:	69b9      	ldr	r1, [r7, #24]
  40b2c4:	68f8      	ldr	r0, [r7, #12]
  40b2c6:	4b0e      	ldr	r3, [pc, #56]	; (40b300 <etharp_output+0x1a4>)
  40b2c8:	4798      	blx	r3
  40b2ca:	4603      	mov	r3, r0
  40b2cc:	e008      	b.n	40b2e0 <etharp_output+0x184>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  40b2ce:	68fb      	ldr	r3, [r7, #12]
  40b2d0:	f103 0227 	add.w	r2, r3, #39	; 0x27
  40b2d4:	69fb      	ldr	r3, [r7, #28]
  40b2d6:	68b9      	ldr	r1, [r7, #8]
  40b2d8:	68f8      	ldr	r0, [r7, #12]
  40b2da:	4c0a      	ldr	r4, [pc, #40]	; (40b304 <etharp_output+0x1a8>)
  40b2dc:	47a0      	blx	r4
  40b2de:	4603      	mov	r3, r0
}
  40b2e0:	4618      	mov	r0, r3
  40b2e2:	3724      	adds	r7, #36	; 0x24
  40b2e4:	46bd      	mov	sp, r7
  40b2e6:	bd90      	pop	{r4, r7, pc}
  40b2e8:	00405925 	.word	0x00405925
  40b2ec:	00404251 	.word	0x00404251
  40b2f0:	0040ce0c 	.word	0x0040ce0c
  40b2f4:	20402148 	.word	0x20402148
  40b2f8:	20402080 	.word	0x20402080
  40b2fc:	0040b0b9 	.word	0x0040b0b9
  40b300:	0040b309 	.word	0x0040b309
  40b304:	0040ad55 	.word	0x0040ad55

0040b308 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  40b308:	b590      	push	{r4, r7, lr}
  40b30a:	b08b      	sub	sp, #44	; 0x2c
  40b30c:	af00      	add	r7, sp, #0
  40b30e:	60f8      	str	r0, [r7, #12]
  40b310:	60b9      	str	r1, [r7, #8]
  40b312:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  40b314:	68fb      	ldr	r3, [r7, #12]
  40b316:	3327      	adds	r3, #39	; 0x27
  40b318:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
  40b31a:	23ff      	movs	r3, #255	; 0xff
  40b31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40b320:	68bb      	ldr	r3, [r7, #8]
  40b322:	681b      	ldr	r3, [r3, #0]
  40b324:	68f9      	ldr	r1, [r7, #12]
  40b326:	4618      	mov	r0, r3
  40b328:	4b72      	ldr	r3, [pc, #456]	; (40b4f4 <etharp_query+0x1ec>)
  40b32a:	4798      	blx	r3
  40b32c:	4603      	mov	r3, r0
  40b32e:	2b00      	cmp	r3, #0
  40b330:	d10c      	bne.n	40b34c <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40b332:	68bb      	ldr	r3, [r7, #8]
  40b334:	681b      	ldr	r3, [r3, #0]
  40b336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40b33a:	2be0      	cmp	r3, #224	; 0xe0
  40b33c:	d006      	beq.n	40b34c <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40b33e:	68bb      	ldr	r3, [r7, #8]
  40b340:	2b00      	cmp	r3, #0
  40b342:	d003      	beq.n	40b34c <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
  40b344:	68bb      	ldr	r3, [r7, #8]
  40b346:	681b      	ldr	r3, [r3, #0]
  40b348:	2b00      	cmp	r3, #0
  40b34a:	d102      	bne.n	40b352 <etharp_query+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40b34c:	f06f 030d 	mvn.w	r3, #13
  40b350:	e0cc      	b.n	40b4ec <etharp_query+0x1e4>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  40b352:	2101      	movs	r1, #1
  40b354:	68b8      	ldr	r0, [r7, #8]
  40b356:	4b68      	ldr	r3, [pc, #416]	; (40b4f8 <etharp_query+0x1f0>)
  40b358:	4798      	blx	r3
  40b35a:	4603      	mov	r3, r0
  40b35c:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
  40b35e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b362:	2b00      	cmp	r3, #0
  40b364:	da02      	bge.n	40b36c <etharp_query+0x64>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  40b366:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b36a:	e0bf      	b.n	40b4ec <etharp_query+0x1e4>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  40b36c:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b370:	4962      	ldr	r1, [pc, #392]	; (40b4fc <etharp_query+0x1f4>)
  40b372:	4613      	mov	r3, r2
  40b374:	009b      	lsls	r3, r3, #2
  40b376:	4413      	add	r3, r2
  40b378:	009b      	lsls	r3, r3, #2
  40b37a:	440b      	add	r3, r1
  40b37c:	3312      	adds	r3, #18
  40b37e:	781b      	ldrb	r3, [r3, #0]
  40b380:	2b00      	cmp	r3, #0
  40b382:	d10a      	bne.n	40b39a <etharp_query+0x92>
    arp_table[i].state = ETHARP_STATE_PENDING;
  40b384:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b388:	495c      	ldr	r1, [pc, #368]	; (40b4fc <etharp_query+0x1f4>)
  40b38a:	4613      	mov	r3, r2
  40b38c:	009b      	lsls	r3, r3, #2
  40b38e:	4413      	add	r3, r2
  40b390:	009b      	lsls	r3, r3, #2
  40b392:	440b      	add	r3, r1
  40b394:	3312      	adds	r3, #18
  40b396:	2201      	movs	r2, #1
  40b398:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  40b39a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b39e:	4957      	ldr	r1, [pc, #348]	; (40b4fc <etharp_query+0x1f4>)
  40b3a0:	4613      	mov	r3, r2
  40b3a2:	009b      	lsls	r3, r3, #2
  40b3a4:	4413      	add	r3, r2
  40b3a6:	009b      	lsls	r3, r3, #2
  40b3a8:	440b      	add	r3, r1
  40b3aa:	3312      	adds	r3, #18
  40b3ac:	781b      	ldrb	r3, [r3, #0]
  40b3ae:	2b01      	cmp	r3, #1
  40b3b0:	d002      	beq.n	40b3b8 <etharp_query+0xb0>
  40b3b2:	687b      	ldr	r3, [r7, #4]
  40b3b4:	2b00      	cmp	r3, #0
  40b3b6:	d10c      	bne.n	40b3d2 <etharp_query+0xca>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  40b3b8:	68b9      	ldr	r1, [r7, #8]
  40b3ba:	68f8      	ldr	r0, [r7, #12]
  40b3bc:	4b50      	ldr	r3, [pc, #320]	; (40b500 <etharp_query+0x1f8>)
  40b3be:	4798      	blx	r3
  40b3c0:	4603      	mov	r3, r0
  40b3c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  40b3c6:	687b      	ldr	r3, [r7, #4]
  40b3c8:	2b00      	cmp	r3, #0
  40b3ca:	d102      	bne.n	40b3d2 <etharp_query+0xca>
      return result;
  40b3cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  40b3d0:	e08c      	b.n	40b4ec <etharp_query+0x1e4>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  40b3d2:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b3d6:	4949      	ldr	r1, [pc, #292]	; (40b4fc <etharp_query+0x1f4>)
  40b3d8:	4613      	mov	r3, r2
  40b3da:	009b      	lsls	r3, r3, #2
  40b3dc:	4413      	add	r3, r2
  40b3de:	009b      	lsls	r3, r3, #2
  40b3e0:	440b      	add	r3, r1
  40b3e2:	3312      	adds	r3, #18
  40b3e4:	781b      	ldrb	r3, [r3, #0]
  40b3e6:	2b01      	cmp	r3, #1
  40b3e8:	d915      	bls.n	40b416 <etharp_query+0x10e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  40b3ea:	7dfa      	ldrb	r2, [r7, #23]
  40b3ec:	4b45      	ldr	r3, [pc, #276]	; (40b504 <etharp_query+0x1fc>)
  40b3ee:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  40b3f0:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b3f4:	4613      	mov	r3, r2
  40b3f6:	009b      	lsls	r3, r3, #2
  40b3f8:	4413      	add	r3, r2
  40b3fa:	009b      	lsls	r3, r3, #2
  40b3fc:	3308      	adds	r3, #8
  40b3fe:	4a3f      	ldr	r2, [pc, #252]	; (40b4fc <etharp_query+0x1f4>)
  40b400:	4413      	add	r3, r2
  40b402:	3304      	adds	r3, #4
  40b404:	69ba      	ldr	r2, [r7, #24]
  40b406:	6879      	ldr	r1, [r7, #4]
  40b408:	68f8      	ldr	r0, [r7, #12]
  40b40a:	4c3f      	ldr	r4, [pc, #252]	; (40b508 <etharp_query+0x200>)
  40b40c:	47a0      	blx	r4
  40b40e:	4603      	mov	r3, r0
  40b410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b414:	e068      	b.n	40b4e8 <etharp_query+0x1e0>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  40b416:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b41a:	4938      	ldr	r1, [pc, #224]	; (40b4fc <etharp_query+0x1f4>)
  40b41c:	4613      	mov	r3, r2
  40b41e:	009b      	lsls	r3, r3, #2
  40b420:	4413      	add	r3, r2
  40b422:	009b      	lsls	r3, r3, #2
  40b424:	440b      	add	r3, r1
  40b426:	3312      	adds	r3, #18
  40b428:	781b      	ldrb	r3, [r3, #0]
  40b42a:	2b01      	cmp	r3, #1
  40b42c:	d15c      	bne.n	40b4e8 <etharp_query+0x1e0>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  40b42e:	2300      	movs	r3, #0
  40b430:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  40b432:	687b      	ldr	r3, [r7, #4]
  40b434:	623b      	str	r3, [r7, #32]
    while (p) {
  40b436:	e009      	b.n	40b44c <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  40b438:	6a3b      	ldr	r3, [r7, #32]
  40b43a:	7b1b      	ldrb	r3, [r3, #12]
  40b43c:	2b01      	cmp	r3, #1
  40b43e:	d002      	beq.n	40b446 <etharp_query+0x13e>
        copy_needed = 1;
  40b440:	2301      	movs	r3, #1
  40b442:	61fb      	str	r3, [r7, #28]
        break;
  40b444:	e005      	b.n	40b452 <etharp_query+0x14a>
      }
      p = p->next;
  40b446:	6a3b      	ldr	r3, [r7, #32]
  40b448:	681b      	ldr	r3, [r3, #0]
  40b44a:	623b      	str	r3, [r7, #32]
    while (p) {
  40b44c:	6a3b      	ldr	r3, [r7, #32]
  40b44e:	2b00      	cmp	r3, #0
  40b450:	d1f2      	bne.n	40b438 <etharp_query+0x130>
    }
    if(copy_needed) {
  40b452:	69fb      	ldr	r3, [r7, #28]
  40b454:	2b00      	cmp	r3, #0
  40b456:	d017      	beq.n	40b488 <etharp_query+0x180>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  40b458:	6a3b      	ldr	r3, [r7, #32]
  40b45a:	891b      	ldrh	r3, [r3, #8]
  40b45c:	2200      	movs	r2, #0
  40b45e:	4619      	mov	r1, r3
  40b460:	2003      	movs	r0, #3
  40b462:	4b2a      	ldr	r3, [pc, #168]	; (40b50c <etharp_query+0x204>)
  40b464:	4798      	blx	r3
  40b466:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
  40b468:	6a3b      	ldr	r3, [r7, #32]
  40b46a:	2b00      	cmp	r3, #0
  40b46c:	d011      	beq.n	40b492 <etharp_query+0x18a>
        if (pbuf_copy(p, q) != ERR_OK) {
  40b46e:	6879      	ldr	r1, [r7, #4]
  40b470:	6a38      	ldr	r0, [r7, #32]
  40b472:	4b27      	ldr	r3, [pc, #156]	; (40b510 <etharp_query+0x208>)
  40b474:	4798      	blx	r3
  40b476:	4603      	mov	r3, r0
  40b478:	2b00      	cmp	r3, #0
  40b47a:	d00a      	beq.n	40b492 <etharp_query+0x18a>
          pbuf_free(p);
  40b47c:	6a38      	ldr	r0, [r7, #32]
  40b47e:	4b25      	ldr	r3, [pc, #148]	; (40b514 <etharp_query+0x20c>)
  40b480:	4798      	blx	r3
          p = NULL;
  40b482:	2300      	movs	r3, #0
  40b484:	623b      	str	r3, [r7, #32]
  40b486:	e004      	b.n	40b492 <etharp_query+0x18a>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  40b488:	687b      	ldr	r3, [r7, #4]
  40b48a:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
  40b48c:	6a38      	ldr	r0, [r7, #32]
  40b48e:	4b22      	ldr	r3, [pc, #136]	; (40b518 <etharp_query+0x210>)
  40b490:	4798      	blx	r3
    }
    /* packet could be taken over? */
    if (p != NULL) {
  40b492:	6a3b      	ldr	r3, [r7, #32]
  40b494:	2b00      	cmp	r3, #0
  40b496:	d024      	beq.n	40b4e2 <etharp_query+0x1da>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
  40b498:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b49c:	4917      	ldr	r1, [pc, #92]	; (40b4fc <etharp_query+0x1f4>)
  40b49e:	4613      	mov	r3, r2
  40b4a0:	009b      	lsls	r3, r3, #2
  40b4a2:	4413      	add	r3, r2
  40b4a4:	009b      	lsls	r3, r3, #2
  40b4a6:	440b      	add	r3, r1
  40b4a8:	681b      	ldr	r3, [r3, #0]
  40b4aa:	2b00      	cmp	r3, #0
  40b4ac:	d00b      	beq.n	40b4c6 <etharp_query+0x1be>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
  40b4ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b4b2:	4912      	ldr	r1, [pc, #72]	; (40b4fc <etharp_query+0x1f4>)
  40b4b4:	4613      	mov	r3, r2
  40b4b6:	009b      	lsls	r3, r3, #2
  40b4b8:	4413      	add	r3, r2
  40b4ba:	009b      	lsls	r3, r3, #2
  40b4bc:	440b      	add	r3, r1
  40b4be:	681b      	ldr	r3, [r3, #0]
  40b4c0:	4618      	mov	r0, r3
  40b4c2:	4b14      	ldr	r3, [pc, #80]	; (40b514 <etharp_query+0x20c>)
  40b4c4:	4798      	blx	r3
      }
      arp_table[i].q = p;
  40b4c6:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b4ca:	490c      	ldr	r1, [pc, #48]	; (40b4fc <etharp_query+0x1f4>)
  40b4cc:	4613      	mov	r3, r2
  40b4ce:	009b      	lsls	r3, r3, #2
  40b4d0:	4413      	add	r3, r2
  40b4d2:	009b      	lsls	r3, r3, #2
  40b4d4:	440b      	add	r3, r1
  40b4d6:	6a3a      	ldr	r2, [r7, #32]
  40b4d8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
  40b4da:	2300      	movs	r3, #0
  40b4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b4e0:	e002      	b.n	40b4e8 <etharp_query+0x1e0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  40b4e2:	23ff      	movs	r3, #255	; 0xff
  40b4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
  40b4e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
  40b4ec:	4618      	mov	r0, r3
  40b4ee:	372c      	adds	r7, #44	; 0x2c
  40b4f0:	46bd      	mov	sp, r7
  40b4f2:	bd90      	pop	{r4, r7, pc}
  40b4f4:	00404251 	.word	0x00404251
  40b4f8:	0040ab61 	.word	0x0040ab61
  40b4fc:	20402080 	.word	0x20402080
  40b500:	0040b61d 	.word	0x0040b61d
  40b504:	20402148 	.word	0x20402148
  40b508:	0040ad55 	.word	0x0040ad55
  40b50c:	0040565d 	.word	0x0040565d
  40b510:	00405b6d 	.word	0x00405b6d
  40b514:	00405a01 	.word	0x00405a01
  40b518:	00405abf 	.word	0x00405abf

0040b51c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
  40b51c:	b580      	push	{r7, lr}
  40b51e:	b088      	sub	sp, #32
  40b520:	af00      	add	r7, sp, #0
  40b522:	60f8      	str	r0, [r7, #12]
  40b524:	60b9      	str	r1, [r7, #8]
  40b526:	607a      	str	r2, [r7, #4]
  40b528:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
  40b52a:	2300      	movs	r3, #0
  40b52c:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  40b52e:	2200      	movs	r2, #0
  40b530:	212a      	movs	r1, #42	; 0x2a
  40b532:	2003      	movs	r0, #3
  40b534:	4b35      	ldr	r3, [pc, #212]	; (40b60c <etharp_raw+0xf0>)
  40b536:	4798      	blx	r3
  40b538:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  40b53a:	69bb      	ldr	r3, [r7, #24]
  40b53c:	2b00      	cmp	r3, #0
  40b53e:	d102      	bne.n	40b546 <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  40b540:	f04f 33ff 	mov.w	r3, #4294967295
  40b544:	e05d      	b.n	40b602 <etharp_raw+0xe6>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
  40b546:	69bb      	ldr	r3, [r7, #24]
  40b548:	685b      	ldr	r3, [r3, #4]
  40b54a:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40b54c:	697b      	ldr	r3, [r7, #20]
  40b54e:	330e      	adds	r3, #14
  40b550:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  40b552:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40b554:	4618      	mov	r0, r3
  40b556:	4b2e      	ldr	r3, [pc, #184]	; (40b610 <etharp_raw+0xf4>)
  40b558:	4798      	blx	r3
  40b55a:	4603      	mov	r3, r0
  40b55c:	461a      	mov	r2, r3
  40b55e:	693b      	ldr	r3, [r7, #16]
  40b560:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40b562:	693b      	ldr	r3, [r7, #16]
  40b564:	3308      	adds	r3, #8
  40b566:	2206      	movs	r2, #6
  40b568:	6839      	ldr	r1, [r7, #0]
  40b56a:	4618      	mov	r0, r3
  40b56c:	4b29      	ldr	r3, [pc, #164]	; (40b614 <etharp_raw+0xf8>)
  40b56e:	4798      	blx	r3
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  40b570:	693b      	ldr	r3, [r7, #16]
  40b572:	3312      	adds	r3, #18
  40b574:	2206      	movs	r2, #6
  40b576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40b578:	4618      	mov	r0, r3
  40b57a:	4b26      	ldr	r3, [pc, #152]	; (40b614 <etharp_raw+0xf8>)
  40b57c:	4798      	blx	r3
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  40b57e:	697b      	ldr	r3, [r7, #20]
  40b580:	2206      	movs	r2, #6
  40b582:	6879      	ldr	r1, [r7, #4]
  40b584:	4618      	mov	r0, r3
  40b586:	4b23      	ldr	r3, [pc, #140]	; (40b614 <etharp_raw+0xf8>)
  40b588:	4798      	blx	r3
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  40b58a:	697b      	ldr	r3, [r7, #20]
  40b58c:	3306      	adds	r3, #6
  40b58e:	2206      	movs	r2, #6
  40b590:	68b9      	ldr	r1, [r7, #8]
  40b592:	4618      	mov	r0, r3
  40b594:	4b1f      	ldr	r3, [pc, #124]	; (40b614 <etharp_raw+0xf8>)
  40b596:	4798      	blx	r3
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  40b598:	693b      	ldr	r3, [r7, #16]
  40b59a:	330e      	adds	r3, #14
  40b59c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b59e:	6812      	ldr	r2, [r2, #0]
  40b5a0:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  40b5a2:	693b      	ldr	r3, [r7, #16]
  40b5a4:	3318      	adds	r3, #24
  40b5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40b5a8:	6812      	ldr	r2, [r2, #0]
  40b5aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  40b5ac:	693b      	ldr	r3, [r7, #16]
  40b5ae:	2200      	movs	r2, #0
  40b5b0:	701a      	strb	r2, [r3, #0]
  40b5b2:	2200      	movs	r2, #0
  40b5b4:	f042 0201 	orr.w	r2, r2, #1
  40b5b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  40b5ba:	693b      	ldr	r3, [r7, #16]
  40b5bc:	2200      	movs	r2, #0
  40b5be:	f042 0208 	orr.w	r2, r2, #8
  40b5c2:	709a      	strb	r2, [r3, #2]
  40b5c4:	2200      	movs	r2, #0
  40b5c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  40b5c8:	693b      	ldr	r3, [r7, #16]
  40b5ca:	2206      	movs	r2, #6
  40b5cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
  40b5ce:	693b      	ldr	r3, [r7, #16]
  40b5d0:	2204      	movs	r2, #4
  40b5d2:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  40b5d4:	697b      	ldr	r3, [r7, #20]
  40b5d6:	2200      	movs	r2, #0
  40b5d8:	f042 0208 	orr.w	r2, r2, #8
  40b5dc:	731a      	strb	r2, [r3, #12]
  40b5de:	2200      	movs	r2, #0
  40b5e0:	f042 0206 	orr.w	r2, r2, #6
  40b5e4:	735a      	strb	r2, [r3, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  40b5e6:	68fb      	ldr	r3, [r7, #12]
  40b5e8:	699b      	ldr	r3, [r3, #24]
  40b5ea:	69b9      	ldr	r1, [r7, #24]
  40b5ec:	68f8      	ldr	r0, [r7, #12]
  40b5ee:	4798      	blx	r3
  40b5f0:	4603      	mov	r3, r0
  40b5f2:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  40b5f4:	69b8      	ldr	r0, [r7, #24]
  40b5f6:	4b08      	ldr	r3, [pc, #32]	; (40b618 <etharp_raw+0xfc>)
  40b5f8:	4798      	blx	r3
  p = NULL;
  40b5fa:	2300      	movs	r3, #0
  40b5fc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
  40b5fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  40b602:	4618      	mov	r0, r3
  40b604:	3720      	adds	r7, #32
  40b606:	46bd      	mov	sp, r7
  40b608:	bd80      	pop	{r7, pc}
  40b60a:	bf00      	nop
  40b60c:	0040565d 	.word	0x0040565d
  40b610:	00401e19 	.word	0x00401e19
  40b614:	0040c9e5 	.word	0x0040c9e5
  40b618:	00405a01 	.word	0x00405a01

0040b61c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  40b61c:	b590      	push	{r4, r7, lr}
  40b61e:	b087      	sub	sp, #28
  40b620:	af04      	add	r7, sp, #16
  40b622:	6078      	str	r0, [r7, #4]
  40b624:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40b626:	687b      	ldr	r3, [r7, #4]
  40b628:	f103 0127 	add.w	r1, r3, #39	; 0x27
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
  40b62c:	687b      	ldr	r3, [r7, #4]
  40b62e:	f103 0027 	add.w	r0, r3, #39	; 0x27
  40b632:	687b      	ldr	r3, [r7, #4]
  40b634:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40b636:	2201      	movs	r2, #1
  40b638:	9203      	str	r2, [sp, #12]
  40b63a:	683a      	ldr	r2, [r7, #0]
  40b63c:	9202      	str	r2, [sp, #8]
  40b63e:	4a06      	ldr	r2, [pc, #24]	; (40b658 <etharp_request+0x3c>)
  40b640:	9201      	str	r2, [sp, #4]
  40b642:	9300      	str	r3, [sp, #0]
  40b644:	4603      	mov	r3, r0
  40b646:	4a05      	ldr	r2, [pc, #20]	; (40b65c <etharp_request+0x40>)
  40b648:	6878      	ldr	r0, [r7, #4]
  40b64a:	4c05      	ldr	r4, [pc, #20]	; (40b660 <etharp_request+0x44>)
  40b64c:	47a0      	blx	r4
  40b64e:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  40b650:	4618      	mov	r0, r3
  40b652:	370c      	adds	r7, #12
  40b654:	46bd      	mov	sp, r7
  40b656:	bd90      	pop	{r4, r7, pc}
  40b658:	0040ce14 	.word	0x0040ce14
  40b65c:	0040ce0c 	.word	0x0040ce0c
  40b660:	0040b51d 	.word	0x0040b51d

0040b664 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  40b664:	b580      	push	{r7, lr}
  40b666:	b086      	sub	sp, #24
  40b668:	af00      	add	r7, sp, #0
  40b66a:	6078      	str	r0, [r7, #4]
  40b66c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  40b66e:	230e      	movs	r3, #14
  40b670:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  40b672:	687b      	ldr	r3, [r7, #4]
  40b674:	895b      	ldrh	r3, [r3, #10]
  40b676:	2b0e      	cmp	r3, #14
  40b678:	d961      	bls.n	40b73e <ethernet_input+0xda>
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  40b67a:	687b      	ldr	r3, [r7, #4]
  40b67c:	685b      	ldr	r3, [r3, #4]
  40b67e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  40b680:	693b      	ldr	r3, [r7, #16]
  40b682:	7b1a      	ldrb	r2, [r3, #12]
  40b684:	7b5b      	ldrb	r3, [r3, #13]
  40b686:	021b      	lsls	r3, r3, #8
  40b688:	4313      	orrs	r3, r2
  40b68a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  40b68c:	693b      	ldr	r3, [r7, #16]
  40b68e:	781b      	ldrb	r3, [r3, #0]
  40b690:	f003 0301 	and.w	r3, r3, #1
  40b694:	2b00      	cmp	r3, #0
  40b696:	d023      	beq.n	40b6e0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  40b698:	693b      	ldr	r3, [r7, #16]
  40b69a:	781b      	ldrb	r3, [r3, #0]
  40b69c:	2b01      	cmp	r3, #1
  40b69e:	d10f      	bne.n	40b6c0 <ethernet_input+0x5c>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40b6a0:	693b      	ldr	r3, [r7, #16]
  40b6a2:	785b      	ldrb	r3, [r3, #1]
  40b6a4:	2b00      	cmp	r3, #0
  40b6a6:	d11b      	bne.n	40b6e0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
  40b6a8:	693b      	ldr	r3, [r7, #16]
  40b6aa:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40b6ac:	2b5e      	cmp	r3, #94	; 0x5e
  40b6ae:	d117      	bne.n	40b6e0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  40b6b0:	687b      	ldr	r3, [r7, #4]
  40b6b2:	7b5b      	ldrb	r3, [r3, #13]
  40b6b4:	f043 0310 	orr.w	r3, r3, #16
  40b6b8:	b2da      	uxtb	r2, r3
  40b6ba:	687b      	ldr	r3, [r7, #4]
  40b6bc:	735a      	strb	r2, [r3, #13]
  40b6be:	e00f      	b.n	40b6e0 <ethernet_input+0x7c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  40b6c0:	693b      	ldr	r3, [r7, #16]
  40b6c2:	2206      	movs	r2, #6
  40b6c4:	4925      	ldr	r1, [pc, #148]	; (40b75c <ethernet_input+0xf8>)
  40b6c6:	4618      	mov	r0, r3
  40b6c8:	4b25      	ldr	r3, [pc, #148]	; (40b760 <ethernet_input+0xfc>)
  40b6ca:	4798      	blx	r3
  40b6cc:	4603      	mov	r3, r0
  40b6ce:	2b00      	cmp	r3, #0
  40b6d0:	d106      	bne.n	40b6e0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  40b6d2:	687b      	ldr	r3, [r7, #4]
  40b6d4:	7b5b      	ldrb	r3, [r3, #13]
  40b6d6:	f043 0308 	orr.w	r3, r3, #8
  40b6da:	b2da      	uxtb	r2, r3
  40b6dc:	687b      	ldr	r3, [r7, #4]
  40b6de:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  40b6e0:	89fb      	ldrh	r3, [r7, #14]
  40b6e2:	2b08      	cmp	r3, #8
  40b6e4:	d003      	beq.n	40b6ee <ethernet_input+0x8a>
  40b6e6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
  40b6ea:	d017      	beq.n	40b71c <ethernet_input+0xb8>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
  40b6ec:	e02e      	b.n	40b74c <ethernet_input+0xe8>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40b6ee:	683b      	ldr	r3, [r7, #0]
  40b6f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40b6f4:	f003 0320 	and.w	r3, r3, #32
  40b6f8:	2b00      	cmp	r3, #0
  40b6fa:	d022      	beq.n	40b742 <ethernet_input+0xde>
      if(pbuf_header(p, -ip_hdr_offset)) {
  40b6fc:	8afb      	ldrh	r3, [r7, #22]
  40b6fe:	425b      	negs	r3, r3
  40b700:	b29b      	uxth	r3, r3
  40b702:	b21b      	sxth	r3, r3
  40b704:	4619      	mov	r1, r3
  40b706:	6878      	ldr	r0, [r7, #4]
  40b708:	4b16      	ldr	r3, [pc, #88]	; (40b764 <ethernet_input+0x100>)
  40b70a:	4798      	blx	r3
  40b70c:	4603      	mov	r3, r0
  40b70e:	2b00      	cmp	r3, #0
  40b710:	d119      	bne.n	40b746 <ethernet_input+0xe2>
        ip_input(p, netif);
  40b712:	6839      	ldr	r1, [r7, #0]
  40b714:	6878      	ldr	r0, [r7, #4]
  40b716:	4b14      	ldr	r3, [pc, #80]	; (40b768 <ethernet_input+0x104>)
  40b718:	4798      	blx	r3
      break;
  40b71a:	e00e      	b.n	40b73a <ethernet_input+0xd6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40b71c:	683b      	ldr	r3, [r7, #0]
  40b71e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40b722:	f003 0320 	and.w	r3, r3, #32
  40b726:	2b00      	cmp	r3, #0
  40b728:	d00f      	beq.n	40b74a <ethernet_input+0xe6>
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  40b72a:	683b      	ldr	r3, [r7, #0]
  40b72c:	3327      	adds	r3, #39	; 0x27
  40b72e:	687a      	ldr	r2, [r7, #4]
  40b730:	4619      	mov	r1, r3
  40b732:	6838      	ldr	r0, [r7, #0]
  40b734:	4b0d      	ldr	r3, [pc, #52]	; (40b76c <ethernet_input+0x108>)
  40b736:	4798      	blx	r3
      break;
  40b738:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  40b73a:	2300      	movs	r3, #0
  40b73c:	e00a      	b.n	40b754 <ethernet_input+0xf0>
    goto free_and_return;
  40b73e:	bf00      	nop
  40b740:	e004      	b.n	40b74c <ethernet_input+0xe8>
        goto free_and_return;
  40b742:	bf00      	nop
  40b744:	e002      	b.n	40b74c <ethernet_input+0xe8>
        goto free_and_return;
  40b746:	bf00      	nop
  40b748:	e000      	b.n	40b74c <ethernet_input+0xe8>
        goto free_and_return;
  40b74a:	bf00      	nop

free_and_return:
  pbuf_free(p);
  40b74c:	6878      	ldr	r0, [r7, #4]
  40b74e:	4b08      	ldr	r3, [pc, #32]	; (40b770 <ethernet_input+0x10c>)
  40b750:	4798      	blx	r3
  return ERR_OK;
  40b752:	2300      	movs	r3, #0
}
  40b754:	4618      	mov	r0, r3
  40b756:	3718      	adds	r7, #24
  40b758:	46bd      	mov	sp, r7
  40b75a:	bd80      	pop	{r7, pc}
  40b75c:	0040ce0c 	.word	0x0040ce0c
  40b760:	0040c985 	.word	0x0040c985
  40b764:	00405925 	.word	0x00405925
  40b768:	00403dd5 	.word	0x00403dd5
  40b76c:	0040af41 	.word	0x0040af41
  40b770:	00405a01 	.word	0x00405a01

0040b774 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40b774:	b480      	push	{r7}
  40b776:	b083      	sub	sp, #12
  40b778:	af00      	add	r7, sp, #0
  40b77a:	4603      	mov	r3, r0
  40b77c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40b77e:	4909      	ldr	r1, [pc, #36]	; (40b7a4 <NVIC_EnableIRQ+0x30>)
  40b780:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40b784:	095b      	lsrs	r3, r3, #5
  40b786:	79fa      	ldrb	r2, [r7, #7]
  40b788:	f002 021f 	and.w	r2, r2, #31
  40b78c:	2001      	movs	r0, #1
  40b78e:	fa00 f202 	lsl.w	r2, r0, r2
  40b792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40b796:	bf00      	nop
  40b798:	370c      	adds	r7, #12
  40b79a:	46bd      	mov	sp, r7
  40b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b7a0:	4770      	bx	lr
  40b7a2:	bf00      	nop
  40b7a4:	e000e100 	.word	0xe000e100

0040b7a8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40b7a8:	b480      	push	{r7}
  40b7aa:	b083      	sub	sp, #12
  40b7ac:	af00      	add	r7, sp, #0
  40b7ae:	4603      	mov	r3, r0
  40b7b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40b7b2:	4909      	ldr	r1, [pc, #36]	; (40b7d8 <NVIC_DisableIRQ+0x30>)
  40b7b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40b7b8:	095b      	lsrs	r3, r3, #5
  40b7ba:	79fa      	ldrb	r2, [r7, #7]
  40b7bc:	f002 021f 	and.w	r2, r2, #31
  40b7c0:	2001      	movs	r0, #1
  40b7c2:	fa00 f202 	lsl.w	r2, r0, r2
  40b7c6:	3320      	adds	r3, #32
  40b7c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40b7cc:	bf00      	nop
  40b7ce:	370c      	adds	r7, #12
  40b7d0:	46bd      	mov	sp, r7
  40b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b7d6:	4770      	bx	lr
  40b7d8:	e000e100 	.word	0xe000e100

0040b7dc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40b7dc:	b480      	push	{r7}
  40b7de:	b083      	sub	sp, #12
  40b7e0:	af00      	add	r7, sp, #0
  40b7e2:	4603      	mov	r3, r0
  40b7e4:	6039      	str	r1, [r7, #0]
  40b7e6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40b7e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40b7ec:	2b00      	cmp	r3, #0
  40b7ee:	da0b      	bge.n	40b808 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40b7f0:	490d      	ldr	r1, [pc, #52]	; (40b828 <NVIC_SetPriority+0x4c>)
  40b7f2:	79fb      	ldrb	r3, [r7, #7]
  40b7f4:	f003 030f 	and.w	r3, r3, #15
  40b7f8:	3b04      	subs	r3, #4
  40b7fa:	683a      	ldr	r2, [r7, #0]
  40b7fc:	b2d2      	uxtb	r2, r2
  40b7fe:	0152      	lsls	r2, r2, #5
  40b800:	b2d2      	uxtb	r2, r2
  40b802:	440b      	add	r3, r1
  40b804:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40b806:	e009      	b.n	40b81c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40b808:	4908      	ldr	r1, [pc, #32]	; (40b82c <NVIC_SetPriority+0x50>)
  40b80a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40b80e:	683a      	ldr	r2, [r7, #0]
  40b810:	b2d2      	uxtb	r2, r2
  40b812:	0152      	lsls	r2, r2, #5
  40b814:	b2d2      	uxtb	r2, r2
  40b816:	440b      	add	r3, r1
  40b818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40b81c:	bf00      	nop
  40b81e:	370c      	adds	r7, #12
  40b820:	46bd      	mov	sp, r7
  40b822:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b826:	4770      	bx	lr
  40b828:	e000ed00 	.word	0xe000ed00
  40b82c:	e000e100 	.word	0xe000e100

0040b830 <gmac_network_control>:
{
  40b830:	b480      	push	{r7}
  40b832:	b083      	sub	sp, #12
  40b834:	af00      	add	r7, sp, #0
  40b836:	6078      	str	r0, [r7, #4]
  40b838:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_NCR = ul_ncr;
  40b83a:	687b      	ldr	r3, [r7, #4]
  40b83c:	683a      	ldr	r2, [r7, #0]
  40b83e:	601a      	str	r2, [r3, #0]
}
  40b840:	bf00      	nop
  40b842:	370c      	adds	r7, #12
  40b844:	46bd      	mov	sp, r7
  40b846:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b84a:	4770      	bx	lr

0040b84c <gmac_enable_receive>:
{
  40b84c:	b480      	push	{r7}
  40b84e:	b083      	sub	sp, #12
  40b850:	af00      	add	r7, sp, #0
  40b852:	6078      	str	r0, [r7, #4]
  40b854:	460b      	mov	r3, r1
  40b856:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40b858:	78fb      	ldrb	r3, [r7, #3]
  40b85a:	2b00      	cmp	r3, #0
  40b85c:	d006      	beq.n	40b86c <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40b85e:	687b      	ldr	r3, [r7, #4]
  40b860:	681b      	ldr	r3, [r3, #0]
  40b862:	f043 0204 	orr.w	r2, r3, #4
  40b866:	687b      	ldr	r3, [r7, #4]
  40b868:	601a      	str	r2, [r3, #0]
}
  40b86a:	e005      	b.n	40b878 <gmac_enable_receive+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  40b86c:	687b      	ldr	r3, [r7, #4]
  40b86e:	681b      	ldr	r3, [r3, #0]
  40b870:	f023 0204 	bic.w	r2, r3, #4
  40b874:	687b      	ldr	r3, [r7, #4]
  40b876:	601a      	str	r2, [r3, #0]
}
  40b878:	bf00      	nop
  40b87a:	370c      	adds	r7, #12
  40b87c:	46bd      	mov	sp, r7
  40b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b882:	4770      	bx	lr

0040b884 <gmac_enable_transmit>:
{
  40b884:	b480      	push	{r7}
  40b886:	b083      	sub	sp, #12
  40b888:	af00      	add	r7, sp, #0
  40b88a:	6078      	str	r0, [r7, #4]
  40b88c:	460b      	mov	r3, r1
  40b88e:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40b890:	78fb      	ldrb	r3, [r7, #3]
  40b892:	2b00      	cmp	r3, #0
  40b894:	d006      	beq.n	40b8a4 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40b896:	687b      	ldr	r3, [r7, #4]
  40b898:	681b      	ldr	r3, [r3, #0]
  40b89a:	f043 0208 	orr.w	r2, r3, #8
  40b89e:	687b      	ldr	r3, [r7, #4]
  40b8a0:	601a      	str	r2, [r3, #0]
}
  40b8a2:	e005      	b.n	40b8b0 <gmac_enable_transmit+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  40b8a4:	687b      	ldr	r3, [r7, #4]
  40b8a6:	681b      	ldr	r3, [r3, #0]
  40b8a8:	f023 0208 	bic.w	r2, r3, #8
  40b8ac:	687b      	ldr	r3, [r7, #4]
  40b8ae:	601a      	str	r2, [r3, #0]
}
  40b8b0:	bf00      	nop
  40b8b2:	370c      	adds	r7, #12
  40b8b4:	46bd      	mov	sp, r7
  40b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b8ba:	4770      	bx	lr

0040b8bc <gmac_clear_statistics>:
{
  40b8bc:	b480      	push	{r7}
  40b8be:	b083      	sub	sp, #12
  40b8c0:	af00      	add	r7, sp, #0
  40b8c2:	6078      	str	r0, [r7, #4]
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  40b8c4:	687b      	ldr	r3, [r7, #4]
  40b8c6:	681b      	ldr	r3, [r3, #0]
  40b8c8:	f043 0220 	orr.w	r2, r3, #32
  40b8cc:	687b      	ldr	r3, [r7, #4]
  40b8ce:	601a      	str	r2, [r3, #0]
}
  40b8d0:	bf00      	nop
  40b8d2:	370c      	adds	r7, #12
  40b8d4:	46bd      	mov	sp, r7
  40b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b8da:	4770      	bx	lr

0040b8dc <gmac_enable_statistics_write>:
{
  40b8dc:	b480      	push	{r7}
  40b8de:	b083      	sub	sp, #12
  40b8e0:	af00      	add	r7, sp, #0
  40b8e2:	6078      	str	r0, [r7, #4]
  40b8e4:	460b      	mov	r3, r1
  40b8e6:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40b8e8:	78fb      	ldrb	r3, [r7, #3]
  40b8ea:	2b00      	cmp	r3, #0
  40b8ec:	d006      	beq.n	40b8fc <gmac_enable_statistics_write+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  40b8ee:	687b      	ldr	r3, [r7, #4]
  40b8f0:	681b      	ldr	r3, [r3, #0]
  40b8f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  40b8f6:	687b      	ldr	r3, [r7, #4]
  40b8f8:	601a      	str	r2, [r3, #0]
}
  40b8fa:	e005      	b.n	40b908 <gmac_enable_statistics_write+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_WESTAT;
  40b8fc:	687b      	ldr	r3, [r7, #4]
  40b8fe:	681b      	ldr	r3, [r3, #0]
  40b900:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40b904:	687b      	ldr	r3, [r7, #4]
  40b906:	601a      	str	r2, [r3, #0]
}
  40b908:	bf00      	nop
  40b90a:	370c      	adds	r7, #12
  40b90c:	46bd      	mov	sp, r7
  40b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b912:	4770      	bx	lr

0040b914 <gmac_start_transmission>:
{
  40b914:	b480      	push	{r7}
  40b916:	b083      	sub	sp, #12
  40b918:	af00      	add	r7, sp, #0
  40b91a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb");
  40b91c:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40b920:	687b      	ldr	r3, [r7, #4]
  40b922:	681b      	ldr	r3, [r3, #0]
  40b924:	f443 7200 	orr.w	r2, r3, #512	; 0x200
  40b928:	687b      	ldr	r3, [r7, #4]
  40b92a:	601a      	str	r2, [r3, #0]
}
  40b92c:	bf00      	nop
  40b92e:	370c      	adds	r7, #12
  40b930:	46bd      	mov	sp, r7
  40b932:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b936:	4770      	bx	lr

0040b938 <gmac_enable_copy_all>:
{
  40b938:	b480      	push	{r7}
  40b93a:	b083      	sub	sp, #12
  40b93c:	af00      	add	r7, sp, #0
  40b93e:	6078      	str	r0, [r7, #4]
  40b940:	460b      	mov	r3, r1
  40b942:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40b944:	78fb      	ldrb	r3, [r7, #3]
  40b946:	2b00      	cmp	r3, #0
  40b948:	d006      	beq.n	40b958 <gmac_enable_copy_all+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  40b94a:	687b      	ldr	r3, [r7, #4]
  40b94c:	685b      	ldr	r3, [r3, #4]
  40b94e:	f043 0210 	orr.w	r2, r3, #16
  40b952:	687b      	ldr	r3, [r7, #4]
  40b954:	605a      	str	r2, [r3, #4]
}
  40b956:	e005      	b.n	40b964 <gmac_enable_copy_all+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  40b958:	687b      	ldr	r3, [r7, #4]
  40b95a:	685b      	ldr	r3, [r3, #4]
  40b95c:	f023 0210 	bic.w	r2, r3, #16
  40b960:	687b      	ldr	r3, [r7, #4]
  40b962:	605a      	str	r2, [r3, #4]
}
  40b964:	bf00      	nop
  40b966:	370c      	adds	r7, #12
  40b968:	46bd      	mov	sp, r7
  40b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b96e:	4770      	bx	lr

0040b970 <gmac_disable_broadcast>:
{
  40b970:	b480      	push	{r7}
  40b972:	b083      	sub	sp, #12
  40b974:	af00      	add	r7, sp, #0
  40b976:	6078      	str	r0, [r7, #4]
  40b978:	460b      	mov	r3, r1
  40b97a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40b97c:	78fb      	ldrb	r3, [r7, #3]
  40b97e:	2b00      	cmp	r3, #0
  40b980:	d006      	beq.n	40b990 <gmac_disable_broadcast+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  40b982:	687b      	ldr	r3, [r7, #4]
  40b984:	685b      	ldr	r3, [r3, #4]
  40b986:	f043 0220 	orr.w	r2, r3, #32
  40b98a:	687b      	ldr	r3, [r7, #4]
  40b98c:	605a      	str	r2, [r3, #4]
}
  40b98e:	e005      	b.n	40b99c <gmac_disable_broadcast+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  40b990:	687b      	ldr	r3, [r7, #4]
  40b992:	685b      	ldr	r3, [r3, #4]
  40b994:	f023 0220 	bic.w	r2, r3, #32
  40b998:	687b      	ldr	r3, [r7, #4]
  40b99a:	605a      	str	r2, [r3, #4]
}
  40b99c:	bf00      	nop
  40b99e:	370c      	adds	r7, #12
  40b9a0:	46bd      	mov	sp, r7
  40b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b9a6:	4770      	bx	lr

0040b9a8 <gmac_get_tx_status>:
{
  40b9a8:	b480      	push	{r7}
  40b9aa:	b083      	sub	sp, #12
  40b9ac:	af00      	add	r7, sp, #0
  40b9ae:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_TSR;
  40b9b0:	687b      	ldr	r3, [r7, #4]
  40b9b2:	695b      	ldr	r3, [r3, #20]
}
  40b9b4:	4618      	mov	r0, r3
  40b9b6:	370c      	adds	r7, #12
  40b9b8:	46bd      	mov	sp, r7
  40b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b9be:	4770      	bx	lr

0040b9c0 <gmac_clear_tx_status>:
{
  40b9c0:	b480      	push	{r7}
  40b9c2:	b083      	sub	sp, #12
  40b9c4:	af00      	add	r7, sp, #0
  40b9c6:	6078      	str	r0, [r7, #4]
  40b9c8:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TSR = ul_status;
  40b9ca:	687b      	ldr	r3, [r7, #4]
  40b9cc:	683a      	ldr	r2, [r7, #0]
  40b9ce:	615a      	str	r2, [r3, #20]
}
  40b9d0:	bf00      	nop
  40b9d2:	370c      	adds	r7, #12
  40b9d4:	46bd      	mov	sp, r7
  40b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b9da:	4770      	bx	lr

0040b9dc <gmac_get_rx_status>:
{
  40b9dc:	b480      	push	{r7}
  40b9de:	b083      	sub	sp, #12
  40b9e0:	af00      	add	r7, sp, #0
  40b9e2:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_RSR;
  40b9e4:	687b      	ldr	r3, [r7, #4]
  40b9e6:	6a1b      	ldr	r3, [r3, #32]
}
  40b9e8:	4618      	mov	r0, r3
  40b9ea:	370c      	adds	r7, #12
  40b9ec:	46bd      	mov	sp, r7
  40b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
  40b9f2:	4770      	bx	lr

0040b9f4 <gmac_clear_rx_status>:
{
  40b9f4:	b480      	push	{r7}
  40b9f6:	b083      	sub	sp, #12
  40b9f8:	af00      	add	r7, sp, #0
  40b9fa:	6078      	str	r0, [r7, #4]
  40b9fc:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RSR = ul_status;
  40b9fe:	687b      	ldr	r3, [r7, #4]
  40ba00:	683a      	ldr	r2, [r7, #0]
  40ba02:	621a      	str	r2, [r3, #32]
}
  40ba04:	bf00      	nop
  40ba06:	370c      	adds	r7, #12
  40ba08:	46bd      	mov	sp, r7
  40ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba0e:	4770      	bx	lr

0040ba10 <gmac_set_rx_queue>:
{
  40ba10:	b480      	push	{r7}
  40ba12:	b083      	sub	sp, #12
  40ba14:	af00      	add	r7, sp, #0
  40ba16:	6078      	str	r0, [r7, #4]
  40ba18:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40ba1a:	683b      	ldr	r3, [r7, #0]
  40ba1c:	f023 0203 	bic.w	r2, r3, #3
  40ba20:	687b      	ldr	r3, [r7, #4]
  40ba22:	619a      	str	r2, [r3, #24]
}
  40ba24:	bf00      	nop
  40ba26:	370c      	adds	r7, #12
  40ba28:	46bd      	mov	sp, r7
  40ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba2e:	4770      	bx	lr

0040ba30 <gmac_set_rx_bufsize>:
{
  40ba30:	b480      	push	{r7}
  40ba32:	b083      	sub	sp, #12
  40ba34:	af00      	add	r7, sp, #0
  40ba36:	6078      	str	r0, [r7, #4]
  40ba38:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40ba3a:	687b      	ldr	r3, [r7, #4]
  40ba3c:	691b      	ldr	r3, [r3, #16]
  40ba3e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40ba42:	683b      	ldr	r3, [r7, #0]
  40ba44:	041b      	lsls	r3, r3, #16
  40ba46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40ba4a:	431a      	orrs	r2, r3
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40ba4c:	687b      	ldr	r3, [r7, #4]
  40ba4e:	611a      	str	r2, [r3, #16]
}
  40ba50:	bf00      	nop
  40ba52:	370c      	adds	r7, #12
  40ba54:	46bd      	mov	sp, r7
  40ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba5a:	4770      	bx	lr

0040ba5c <gmac_set_tx_queue>:
{
  40ba5c:	b480      	push	{r7}
  40ba5e:	b083      	sub	sp, #12
  40ba60:	af00      	add	r7, sp, #0
  40ba62:	6078      	str	r0, [r7, #4]
  40ba64:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40ba66:	683b      	ldr	r3, [r7, #0]
  40ba68:	f023 0203 	bic.w	r2, r3, #3
  40ba6c:	687b      	ldr	r3, [r7, #4]
  40ba6e:	61da      	str	r2, [r3, #28]
}
  40ba70:	bf00      	nop
  40ba72:	370c      	adds	r7, #12
  40ba74:	46bd      	mov	sp, r7
  40ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba7a:	4770      	bx	lr

0040ba7c <gmac_enable_interrupt>:
{
  40ba7c:	b480      	push	{r7}
  40ba7e:	b083      	sub	sp, #12
  40ba80:	af00      	add	r7, sp, #0
  40ba82:	6078      	str	r0, [r7, #4]
  40ba84:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IER = ul_source;
  40ba86:	687b      	ldr	r3, [r7, #4]
  40ba88:	683a      	ldr	r2, [r7, #0]
  40ba8a:	629a      	str	r2, [r3, #40]	; 0x28
}
  40ba8c:	bf00      	nop
  40ba8e:	370c      	adds	r7, #12
  40ba90:	46bd      	mov	sp, r7
  40ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ba96:	4770      	bx	lr

0040ba98 <gmac_disable_interrupt>:
{
  40ba98:	b480      	push	{r7}
  40ba9a:	b083      	sub	sp, #12
  40ba9c:	af00      	add	r7, sp, #0
  40ba9e:	6078      	str	r0, [r7, #4]
  40baa0:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IDR = ul_source;
  40baa2:	687b      	ldr	r3, [r7, #4]
  40baa4:	683a      	ldr	r2, [r7, #0]
  40baa6:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40baa8:	bf00      	nop
  40baaa:	370c      	adds	r7, #12
  40baac:	46bd      	mov	sp, r7
  40baae:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bab2:	4770      	bx	lr

0040bab4 <gmac_get_interrupt_status>:
{
  40bab4:	b480      	push	{r7}
  40bab6:	b083      	sub	sp, #12
  40bab8:	af00      	add	r7, sp, #0
  40baba:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_ISR;
  40babc:	687b      	ldr	r3, [r7, #4]
  40babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  40bac0:	4618      	mov	r0, r3
  40bac2:	370c      	adds	r7, #12
  40bac4:	46bd      	mov	sp, r7
  40bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40baca:	4770      	bx	lr

0040bacc <gmac_set_address>:
{
  40bacc:	b480      	push	{r7}
  40bace:	b085      	sub	sp, #20
  40bad0:	af00      	add	r7, sp, #0
  40bad2:	60f8      	str	r0, [r7, #12]
  40bad4:	460b      	mov	r3, r1
  40bad6:	607a      	str	r2, [r7, #4]
  40bad8:	72fb      	strb	r3, [r7, #11]
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40bada:	7afa      	ldrb	r2, [r7, #11]
  40badc:	687b      	ldr	r3, [r7, #4]
  40bade:	3303      	adds	r3, #3
  40bae0:	781b      	ldrb	r3, [r3, #0]
  40bae2:	0619      	lsls	r1, r3, #24
			| (p_mac_addr[2] << 16)
  40bae4:	687b      	ldr	r3, [r7, #4]
  40bae6:	3302      	adds	r3, #2
  40bae8:	781b      	ldrb	r3, [r3, #0]
  40baea:	041b      	lsls	r3, r3, #16
  40baec:	4319      	orrs	r1, r3
			| (p_mac_addr[1] << 8)
  40baee:	687b      	ldr	r3, [r7, #4]
  40baf0:	3301      	adds	r3, #1
  40baf2:	781b      	ldrb	r3, [r3, #0]
  40baf4:	021b      	lsls	r3, r3, #8
  40baf6:	430b      	orrs	r3, r1
			| (p_mac_addr[0]);
  40baf8:	6879      	ldr	r1, [r7, #4]
  40bafa:	7809      	ldrb	r1, [r1, #0]
  40bafc:	430b      	orrs	r3, r1
  40bafe:	4619      	mov	r1, r3
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40bb00:	68fb      	ldr	r3, [r7, #12]
  40bb02:	3211      	adds	r2, #17
  40bb04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40bb08:	7afb      	ldrb	r3, [r7, #11]
  40bb0a:	687a      	ldr	r2, [r7, #4]
  40bb0c:	3205      	adds	r2, #5
  40bb0e:	7812      	ldrb	r2, [r2, #0]
  40bb10:	0212      	lsls	r2, r2, #8
			| (p_mac_addr[4]);
  40bb12:	6879      	ldr	r1, [r7, #4]
  40bb14:	3104      	adds	r1, #4
  40bb16:	7809      	ldrb	r1, [r1, #0]
  40bb18:	430a      	orrs	r2, r1
  40bb1a:	4611      	mov	r1, r2
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40bb1c:	68fa      	ldr	r2, [r7, #12]
  40bb1e:	3311      	adds	r3, #17
  40bb20:	00db      	lsls	r3, r3, #3
  40bb22:	4413      	add	r3, r2
  40bb24:	6059      	str	r1, [r3, #4]
}
  40bb26:	bf00      	nop
  40bb28:	3714      	adds	r7, #20
  40bb2a:	46bd      	mov	sp, r7
  40bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb30:	4770      	bx	lr

0040bb32 <gmac_get_priority_interrupt_status>:
 * \param queue_idx   Index of queue, start from 1
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
  40bb32:	b480      	push	{r7}
  40bb34:	b083      	sub	sp, #12
  40bb36:	af00      	add	r7, sp, #0
  40bb38:	6078      	str	r0, [r7, #4]
  40bb3a:	460b      	mov	r3, r1
  40bb3c:	70fb      	strb	r3, [r7, #3]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  40bb3e:	78fb      	ldrb	r3, [r7, #3]
  40bb40:	1e5a      	subs	r2, r3, #1
  40bb42:	687b      	ldr	r3, [r7, #4]
  40bb44:	f502 7280 	add.w	r2, r2, #256	; 0x100
  40bb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  40bb4c:	4618      	mov	r0, r3
  40bb4e:	370c      	adds	r7, #12
  40bb50:	46bd      	mov	sp, r7
  40bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb56:	4770      	bx	lr

0040bb58 <gmac_set_tx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40bb58:	b480      	push	{r7}
  40bb5a:	b085      	sub	sp, #20
  40bb5c:	af00      	add	r7, sp, #0
  40bb5e:	60f8      	str	r0, [r7, #12]
  40bb60:	60b9      	str	r1, [r7, #8]
  40bb62:	4613      	mov	r3, r2
  40bb64:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40bb66:	79fb      	ldrb	r3, [r7, #7]
  40bb68:	1e5a      	subs	r2, r3, #1
  40bb6a:	68bb      	ldr	r3, [r7, #8]
  40bb6c:	f023 0103 	bic.w	r1, r3, #3
  40bb70:	68fb      	ldr	r3, [r7, #12]
  40bb72:	f502 7288 	add.w	r2, r2, #272	; 0x110
  40bb76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40bb7a:	bf00      	nop
  40bb7c:	3714      	adds	r7, #20
  40bb7e:	46bd      	mov	sp, r7
  40bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb84:	4770      	bx	lr

0040bb86 <gmac_set_rx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40bb86:	b480      	push	{r7}
  40bb88:	b085      	sub	sp, #20
  40bb8a:	af00      	add	r7, sp, #0
  40bb8c:	60f8      	str	r0, [r7, #12]
  40bb8e:	60b9      	str	r1, [r7, #8]
  40bb90:	4613      	mov	r3, r2
  40bb92:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  40bb94:	79fb      	ldrb	r3, [r7, #7]
  40bb96:	1e5a      	subs	r2, r3, #1
  40bb98:	68bb      	ldr	r3, [r7, #8]
  40bb9a:	f023 0103 	bic.w	r1, r3, #3
  40bb9e:	68fb      	ldr	r3, [r7, #12]
  40bba0:	f502 7290 	add.w	r2, r2, #288	; 0x120
  40bba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40bba8:	bf00      	nop
  40bbaa:	3714      	adds	r7, #20
  40bbac:	46bd      	mov	sp, r7
  40bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bbb2:	4770      	bx	lr

0040bbb4 <osc_get_rate>:
{
  40bbb4:	b480      	push	{r7}
  40bbb6:	b083      	sub	sp, #12
  40bbb8:	af00      	add	r7, sp, #0
  40bbba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40bbbc:	687b      	ldr	r3, [r7, #4]
  40bbbe:	2b07      	cmp	r3, #7
  40bbc0:	d825      	bhi.n	40bc0e <osc_get_rate+0x5a>
  40bbc2:	a201      	add	r2, pc, #4	; (adr r2, 40bbc8 <osc_get_rate+0x14>)
  40bbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40bbc8:	0040bbe9 	.word	0x0040bbe9
  40bbcc:	0040bbef 	.word	0x0040bbef
  40bbd0:	0040bbf5 	.word	0x0040bbf5
  40bbd4:	0040bbfb 	.word	0x0040bbfb
  40bbd8:	0040bbff 	.word	0x0040bbff
  40bbdc:	0040bc03 	.word	0x0040bc03
  40bbe0:	0040bc07 	.word	0x0040bc07
  40bbe4:	0040bc0b 	.word	0x0040bc0b
		return OSC_SLCK_32K_RC_HZ;
  40bbe8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40bbec:	e010      	b.n	40bc10 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40bbee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40bbf2:	e00d      	b.n	40bc10 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40bbf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40bbf8:	e00a      	b.n	40bc10 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40bbfa:	4b08      	ldr	r3, [pc, #32]	; (40bc1c <osc_get_rate+0x68>)
  40bbfc:	e008      	b.n	40bc10 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40bbfe:	4b08      	ldr	r3, [pc, #32]	; (40bc20 <osc_get_rate+0x6c>)
  40bc00:	e006      	b.n	40bc10 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40bc02:	4b08      	ldr	r3, [pc, #32]	; (40bc24 <osc_get_rate+0x70>)
  40bc04:	e004      	b.n	40bc10 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40bc06:	4b07      	ldr	r3, [pc, #28]	; (40bc24 <osc_get_rate+0x70>)
  40bc08:	e002      	b.n	40bc10 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40bc0a:	4b06      	ldr	r3, [pc, #24]	; (40bc24 <osc_get_rate+0x70>)
  40bc0c:	e000      	b.n	40bc10 <osc_get_rate+0x5c>
	return 0;
  40bc0e:	2300      	movs	r3, #0
}
  40bc10:	4618      	mov	r0, r3
  40bc12:	370c      	adds	r7, #12
  40bc14:	46bd      	mov	sp, r7
  40bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc1a:	4770      	bx	lr
  40bc1c:	003d0900 	.word	0x003d0900
  40bc20:	007a1200 	.word	0x007a1200
  40bc24:	00b71b00 	.word	0x00b71b00

0040bc28 <sysclk_get_main_hz>:
{
  40bc28:	b580      	push	{r7, lr}
  40bc2a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40bc2c:	2006      	movs	r0, #6
  40bc2e:	4b05      	ldr	r3, [pc, #20]	; (40bc44 <sysclk_get_main_hz+0x1c>)
  40bc30:	4798      	blx	r3
  40bc32:	4602      	mov	r2, r0
  40bc34:	4613      	mov	r3, r2
  40bc36:	009b      	lsls	r3, r3, #2
  40bc38:	4413      	add	r3, r2
  40bc3a:	009a      	lsls	r2, r3, #2
  40bc3c:	4413      	add	r3, r2
}
  40bc3e:	4618      	mov	r0, r3
  40bc40:	bd80      	pop	{r7, pc}
  40bc42:	bf00      	nop
  40bc44:	0040bbb5 	.word	0x0040bbb5

0040bc48 <sysclk_get_cpu_hz>:
{
  40bc48:	b580      	push	{r7, lr}
  40bc4a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40bc4c:	4b02      	ldr	r3, [pc, #8]	; (40bc58 <sysclk_get_cpu_hz+0x10>)
  40bc4e:	4798      	blx	r3
  40bc50:	4603      	mov	r3, r0
  40bc52:	085b      	lsrs	r3, r3, #1
}
  40bc54:	4618      	mov	r0, r3
  40bc56:	bd80      	pop	{r7, pc}
  40bc58:	0040bc29 	.word	0x0040bc29

0040bc5c <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  40bc5c:	b580      	push	{r7, lr}
  40bc5e:	af00      	add	r7, sp, #0
#if NO_SYS == 1
    NVIC_DisableIRQ(GMAC_IRQn);
  40bc60:	2027      	movs	r0, #39	; 0x27
  40bc62:	4b02      	ldr	r3, [pc, #8]	; (40bc6c <GMAC_Handler+0x10>)
  40bc64:	4798      	blx	r3
		xSemaphoreGiveFromISR(gs_gmac_dev.rx_sem, &xGMACTaskWoken);
	}

	portEND_SWITCHING_ISR(xGMACTaskWoken);
#endif
}
  40bc66:	bf00      	nop
  40bc68:	bd80      	pop	{r7, pc}
  40bc6a:	bf00      	nop
  40bc6c:	0040b7a9 	.word	0x0040b7a9

0040bc70 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  40bc70:	b580      	push	{r7, lr}
  40bc72:	b084      	sub	sp, #16
  40bc74:	af00      	add	r7, sp, #0
  40bc76:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40bc78:	2300      	movs	r3, #0
  40bc7a:	60fb      	str	r3, [r7, #12]
	struct pbuf *p = 0;
  40bc7c:	2300      	movs	r3, #0
  40bc7e:	60bb      	str	r3, [r7, #8]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40bc80:	2300      	movs	r3, #0
  40bc82:	60fb      	str	r3, [r7, #12]
  40bc84:	e032      	b.n	40bcec <gmac_rx_populate_queue+0x7c>
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  40bc86:	687b      	ldr	r3, [r7, #4]
  40bc88:	68fa      	ldr	r2, [r7, #12]
  40bc8a:	320c      	adds	r2, #12
  40bc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40bc90:	2b00      	cmp	r3, #0
  40bc92:	d128      	bne.n	40bce6 <gmac_rx_populate_queue+0x76>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  40bc94:	2203      	movs	r2, #3
  40bc96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40bc9a:	2003      	movs	r0, #3
  40bc9c:	4b18      	ldr	r3, [pc, #96]	; (40bd00 <gmac_rx_populate_queue+0x90>)
  40bc9e:	4798      	blx	r3
  40bca0:	60b8      	str	r0, [r7, #8]
			if (p == NULL) {
  40bca2:	68bb      	ldr	r3, [r7, #8]
  40bca4:	2b00      	cmp	r3, #0
  40bca6:	d025      	beq.n	40bcf4 <gmac_rx_populate_queue+0x84>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  40bca8:	68fb      	ldr	r3, [r7, #12]
  40bcaa:	2b02      	cmp	r3, #2
  40bcac:	d108      	bne.n	40bcc0 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  40bcae:	68bb      	ldr	r3, [r7, #8]
  40bcb0:	685b      	ldr	r3, [r3, #4]
  40bcb2:	f043 0102 	orr.w	r1, r3, #2
  40bcb6:	687b      	ldr	r3, [r7, #4]
  40bcb8:	68fa      	ldr	r2, [r7, #12]
  40bcba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  40bcbe:	e006      	b.n	40bcce <gmac_rx_populate_queue+0x5e>
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  40bcc0:	68bb      	ldr	r3, [r7, #8]
  40bcc2:	685b      	ldr	r3, [r3, #4]
  40bcc4:	4619      	mov	r1, r3
  40bcc6:	687b      	ldr	r3, [r7, #4]
  40bcc8:	68fa      	ldr	r2, [r7, #12]
  40bcca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  40bcce:	687a      	ldr	r2, [r7, #4]
  40bcd0:	68fb      	ldr	r3, [r7, #12]
  40bcd2:	00db      	lsls	r3, r3, #3
  40bcd4:	4413      	add	r3, r2
  40bcd6:	2200      	movs	r2, #0
  40bcd8:	605a      	str	r2, [r3, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  40bcda:	687b      	ldr	r3, [r7, #4]
  40bcdc:	68fa      	ldr	r2, [r7, #12]
  40bcde:	320c      	adds	r2, #12
  40bce0:	68b9      	ldr	r1, [r7, #8]
  40bce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40bce6:	68fb      	ldr	r3, [r7, #12]
  40bce8:	3301      	adds	r3, #1
  40bcea:	60fb      	str	r3, [r7, #12]
  40bcec:	68fb      	ldr	r3, [r7, #12]
  40bcee:	2b02      	cmp	r3, #2
  40bcf0:	d9c9      	bls.n	40bc86 <gmac_rx_populate_queue+0x16>
			LWIP_DEBUGF(NETIF_DEBUG,
					("gmac_rx_populate_queue: new pbuf allocated: %p [idx=%u]\n",
					p, ul_index));
		}
	}
}
  40bcf2:	e000      	b.n	40bcf6 <gmac_rx_populate_queue+0x86>
				break;
  40bcf4:	bf00      	nop
}
  40bcf6:	bf00      	nop
  40bcf8:	3710      	adds	r7, #16
  40bcfa:	46bd      	mov	sp, r7
  40bcfc:	bd80      	pop	{r7, pc}
  40bcfe:	bf00      	nop
  40bd00:	0040565d 	.word	0x0040565d

0040bd04 <gmac_rx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_init(struct gmac_device *ps_gmac_dev)
{
  40bd04:	b580      	push	{r7, lr}
  40bd06:	b084      	sub	sp, #16
  40bd08:	af00      	add	r7, sp, #0
  40bd0a:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40bd0c:	2300      	movs	r3, #0
  40bd0e:	60fb      	str	r3, [r7, #12]

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;
  40bd10:	687a      	ldr	r2, [r7, #4]
  40bd12:	f241 2308 	movw	r3, #4616	; 0x1208
  40bd16:	4413      	add	r3, r2
  40bd18:	2200      	movs	r2, #0
  40bd1a:	601a      	str	r2, [r3, #0]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40bd1c:	2300      	movs	r3, #0
  40bd1e:	60fb      	str	r3, [r7, #12]
  40bd20:	e013      	b.n	40bd4a <gmac_rx_init+0x46>
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40bd22:	687b      	ldr	r3, [r7, #4]
  40bd24:	68fa      	ldr	r2, [r7, #12]
  40bd26:	320c      	adds	r2, #12
  40bd28:	2100      	movs	r1, #0
  40bd2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40bd2e:	687b      	ldr	r3, [r7, #4]
  40bd30:	68fa      	ldr	r2, [r7, #12]
  40bd32:	2100      	movs	r1, #0
  40bd34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40bd38:	687a      	ldr	r2, [r7, #4]
  40bd3a:	68fb      	ldr	r3, [r7, #12]
  40bd3c:	00db      	lsls	r3, r3, #3
  40bd3e:	4413      	add	r3, r2
  40bd40:	2200      	movs	r2, #0
  40bd42:	605a      	str	r2, [r3, #4]
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40bd44:	68fb      	ldr	r3, [r7, #12]
  40bd46:	3301      	adds	r3, #1
  40bd48:	60fb      	str	r3, [r7, #12]
  40bd4a:	68fb      	ldr	r3, [r7, #12]
  40bd4c:	2b02      	cmp	r3, #2
  40bd4e:	d9e8      	bls.n	40bd22 <gmac_rx_init+0x1e>
	}
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  40bd50:	68fb      	ldr	r3, [r7, #12]
  40bd52:	1e5a      	subs	r2, r3, #1
  40bd54:	68fb      	ldr	r3, [r7, #12]
  40bd56:	1e59      	subs	r1, r3, #1
  40bd58:	687b      	ldr	r3, [r7, #4]
  40bd5a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
  40bd5e:	f043 0102 	orr.w	r1, r3, #2
  40bd62:	687b      	ldr	r3, [r7, #4]
  40bd64:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	/* Build RX buffer and descriptors. */
	gmac_rx_populate_queue(ps_gmac_dev);
  40bd68:	6878      	ldr	r0, [r7, #4]
  40bd6a:	4b05      	ldr	r3, [pc, #20]	; (40bd80 <gmac_rx_init+0x7c>)
  40bd6c:	4798      	blx	r3

	/* Set receive buffer queue base address pointer. */
	gmac_set_rx_queue(GMAC, (uint32_t) &ps_gmac_dev->rx_desc[0]);
  40bd6e:	687b      	ldr	r3, [r7, #4]
  40bd70:	4619      	mov	r1, r3
  40bd72:	4804      	ldr	r0, [pc, #16]	; (40bd84 <gmac_rx_init+0x80>)
  40bd74:	4b04      	ldr	r3, [pc, #16]	; (40bd88 <gmac_rx_init+0x84>)
  40bd76:	4798      	blx	r3
}
  40bd78:	bf00      	nop
  40bd7a:	3710      	adds	r7, #16
  40bd7c:	46bd      	mov	sp, r7
  40bd7e:	bd80      	pop	{r7, pc}
  40bd80:	0040bc71 	.word	0x0040bc71
  40bd84:	40050000 	.word	0x40050000
  40bd88:	0040ba11 	.word	0x0040ba11

0040bd8c <gmac_tx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_tx_init(struct gmac_device *ps_gmac_dev)
{
  40bd8c:	b580      	push	{r7, lr}
  40bd8e:	b084      	sub	sp, #16
  40bd90:	af00      	add	r7, sp, #0
  40bd92:	6078      	str	r0, [r7, #4]
	uint32_t ul_index;

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;
  40bd94:	687a      	ldr	r2, [r7, #4]
  40bd96:	f241 230c 	movw	r3, #4620	; 0x120c
  40bd9a:	4413      	add	r3, r2
  40bd9c:	2200      	movs	r2, #0
  40bd9e:	601a      	str	r2, [r3, #0]

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40bda0:	2300      	movs	r3, #0
  40bda2:	60fb      	str	r3, [r7, #12]
  40bda4:	e019      	b.n	40bdda <gmac_tx_init+0x4e>
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40bda6:	68fb      	ldr	r3, [r7, #12]
  40bda8:	f240 52ee 	movw	r2, #1518	; 0x5ee
  40bdac:	fb02 f303 	mul.w	r3, r2, r3
  40bdb0:	3338      	adds	r3, #56	; 0x38
  40bdb2:	687a      	ldr	r2, [r7, #4]
  40bdb4:	4413      	add	r3, r2
  40bdb6:	3304      	adds	r3, #4
  40bdb8:	4619      	mov	r1, r3
  40bdba:	687b      	ldr	r3, [r7, #4]
  40bdbc:	68fa      	ldr	r2, [r7, #12]
  40bdbe:	3203      	adds	r2, #3
  40bdc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  40bdc4:	687a      	ldr	r2, [r7, #4]
  40bdc6:	68fb      	ldr	r3, [r7, #12]
  40bdc8:	3303      	adds	r3, #3
  40bdca:	00db      	lsls	r3, r3, #3
  40bdcc:	4413      	add	r3, r2
  40bdce:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
  40bdd2:	605a      	str	r2, [r3, #4]
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40bdd4:	68fb      	ldr	r3, [r7, #12]
  40bdd6:	3301      	adds	r3, #1
  40bdd8:	60fb      	str	r3, [r7, #12]
  40bdda:	68fb      	ldr	r3, [r7, #12]
  40bddc:	2b02      	cmp	r3, #2
  40bdde:	d9e2      	bls.n	40bda6 <gmac_tx_init+0x1a>
	}
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  40bde0:	68fb      	ldr	r3, [r7, #12]
  40bde2:	1e58      	subs	r0, r3, #1
  40bde4:	68fb      	ldr	r3, [r7, #12]
  40bde6:	3b01      	subs	r3, #1
  40bde8:	687a      	ldr	r2, [r7, #4]
  40bdea:	3303      	adds	r3, #3
  40bdec:	00db      	lsls	r3, r3, #3
  40bdee:	4413      	add	r3, r2
  40bdf0:	685b      	ldr	r3, [r3, #4]
  40bdf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  40bdf6:	6879      	ldr	r1, [r7, #4]
  40bdf8:	1cc3      	adds	r3, r0, #3
  40bdfa:	00db      	lsls	r3, r3, #3
  40bdfc:	440b      	add	r3, r1
  40bdfe:	605a      	str	r2, [r3, #4]

	/* Set receive buffer queue base address pointer. */
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  40be00:	687b      	ldr	r3, [r7, #4]
  40be02:	3318      	adds	r3, #24
  40be04:	4619      	mov	r1, r3
  40be06:	4803      	ldr	r0, [pc, #12]	; (40be14 <gmac_tx_init+0x88>)
  40be08:	4b03      	ldr	r3, [pc, #12]	; (40be18 <gmac_tx_init+0x8c>)
  40be0a:	4798      	blx	r3
}
  40be0c:	bf00      	nop
  40be0e:	3710      	adds	r7, #16
  40be10:	46bd      	mov	sp, r7
  40be12:	bd80      	pop	{r7, pc}
  40be14:	40050000 	.word	0x40050000
  40be18:	0040ba5d 	.word	0x0040ba5d

0040be1c <gmac_low_level_init>:
 * \note Called from ethernetif_init().
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
static void gmac_low_level_init(struct netif *netif)
{
  40be1c:	b580      	push	{r7, lr}
  40be1e:	b084      	sub	sp, #16
  40be20:	af00      	add	r7, sp, #0
  40be22:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul_delay;

	/* Set MAC hardware address length. */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  40be24:	687b      	ldr	r3, [r7, #4]
  40be26:	2206      	movs	r2, #6
  40be28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	/* Set MAC hardware address. */
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40be2c:	4b7a      	ldr	r3, [pc, #488]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be2e:	781a      	ldrb	r2, [r3, #0]
  40be30:	687b      	ldr	r3, [r7, #4]
  40be32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  40be36:	4b78      	ldr	r3, [pc, #480]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be38:	785a      	ldrb	r2, [r3, #1]
  40be3a:	687b      	ldr	r3, [r7, #4]
  40be3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  40be40:	4b75      	ldr	r3, [pc, #468]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be42:	789a      	ldrb	r2, [r3, #2]
  40be44:	687b      	ldr	r3, [r7, #4]
  40be46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  40be4a:	4b73      	ldr	r3, [pc, #460]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be4c:	78da      	ldrb	r2, [r3, #3]
  40be4e:	687b      	ldr	r3, [r7, #4]
  40be50:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  40be54:	4b70      	ldr	r3, [pc, #448]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be56:	791a      	ldrb	r2, [r3, #4]
  40be58:	687b      	ldr	r3, [r7, #4]
  40be5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  40be5e:	4b6e      	ldr	r3, [pc, #440]	; (40c018 <gmac_low_level_init+0x1fc>)
  40be60:	795a      	ldrb	r2, [r3, #5]
  40be62:	687b      	ldr	r3, [r7, #4]
  40be64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Set maximum transfer unit. */
	netif->mtu = NET_MTU;
  40be68:	687b      	ldr	r3, [r7, #4]
  40be6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
  40be6e:	849a      	strh	r2, [r3, #36]	; 0x24

	/* Device capabilities. */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  40be70:	687b      	ldr	r3, [r7, #4]
  40be72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40be76:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
  40be7a:	b2da      	uxtb	r2, r3
  40be7c:	687b      	ldr	r3, [r7, #4]
  40be7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			| NETIF_FLAG_DHCP
#endif
	;

	/* Wait for PHY to be ready (CAT811: Max400ms). */
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  40be82:	4b66      	ldr	r3, [pc, #408]	; (40c01c <gmac_low_level_init+0x200>)
  40be84:	4798      	blx	r3
  40be86:	4602      	mov	r2, r0
  40be88:	4b65      	ldr	r3, [pc, #404]	; (40c020 <gmac_low_level_init+0x204>)
  40be8a:	fba3 2302 	umull	r2, r3, r3, r2
  40be8e:	099b      	lsrs	r3, r3, #6
  40be90:	f44f 72c8 	mov.w	r2, #400	; 0x190
  40be94:	fb02 f303 	mul.w	r3, r2, r3
  40be98:	60bb      	str	r3, [r7, #8]
	while (ul_delay--) {
  40be9a:	bf00      	nop
  40be9c:	68bb      	ldr	r3, [r7, #8]
  40be9e:	1e5a      	subs	r2, r3, #1
  40bea0:	60ba      	str	r2, [r7, #8]
  40bea2:	2b00      	cmp	r3, #0
  40bea4:	d1fa      	bne.n	40be9c <gmac_low_level_init+0x80>
	}

	/* Enable GMAC clock. */
	pmc_enable_periph_clk(ID_GMAC);
  40bea6:	2027      	movs	r0, #39	; 0x27
  40bea8:	4b5e      	ldr	r3, [pc, #376]	; (40c024 <gmac_low_level_init+0x208>)
  40beaa:	4798      	blx	r3

	/* Disable TX & RX and more. */
	gmac_network_control(GMAC, 0);
  40beac:	2100      	movs	r1, #0
  40beae:	485e      	ldr	r0, [pc, #376]	; (40c028 <gmac_low_level_init+0x20c>)
  40beb0:	4b5e      	ldr	r3, [pc, #376]	; (40c02c <gmac_low_level_init+0x210>)
  40beb2:	4798      	blx	r3
	gmac_disable_interrupt(GMAC, ~0u);
  40beb4:	f04f 31ff 	mov.w	r1, #4294967295
  40beb8:	485b      	ldr	r0, [pc, #364]	; (40c028 <gmac_low_level_init+0x20c>)
  40beba:	4b5d      	ldr	r3, [pc, #372]	; (40c030 <gmac_low_level_init+0x214>)
  40bebc:	4798      	blx	r3

	gmac_clear_statistics(GMAC);
  40bebe:	485a      	ldr	r0, [pc, #360]	; (40c028 <gmac_low_level_init+0x20c>)
  40bec0:	4b5c      	ldr	r3, [pc, #368]	; (40c034 <gmac_low_level_init+0x218>)
  40bec2:	4798      	blx	r3

	/* Clear all status bits in the receive status register. */
	gmac_clear_rx_status(GMAC, GMAC_RSR_BNA | GMAC_RSR_REC | GMAC_RSR_RXOVR
  40bec4:	210f      	movs	r1, #15
  40bec6:	4858      	ldr	r0, [pc, #352]	; (40c028 <gmac_low_level_init+0x20c>)
  40bec8:	4b5b      	ldr	r3, [pc, #364]	; (40c038 <gmac_low_level_init+0x21c>)
  40beca:	4798      	blx	r3
			| GMAC_RSR_HNO);

	/* Clear all status bits in the transmit status register. */
	gmac_clear_tx_status(GMAC, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
  40becc:	f240 113f 	movw	r1, #319	; 0x13f
  40bed0:	4855      	ldr	r0, [pc, #340]	; (40c028 <gmac_low_level_init+0x20c>)
  40bed2:	4b5a      	ldr	r3, [pc, #360]	; (40c03c <gmac_low_level_init+0x220>)
  40bed4:	4798      	blx	r3
			| GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP
			| GMAC_TSR_HRESP);

	/* Clear interrupts. */
	gmac_get_interrupt_status(GMAC);
  40bed6:	4854      	ldr	r0, [pc, #336]	; (40c028 <gmac_low_level_init+0x20c>)
  40bed8:	4b59      	ldr	r3, [pc, #356]	; (40c040 <gmac_low_level_init+0x224>)
  40beda:	4798      	blx	r3

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	gmac_enable_copy_all(GMAC, false);
  40bedc:	2100      	movs	r1, #0
  40bede:	4852      	ldr	r0, [pc, #328]	; (40c028 <gmac_low_level_init+0x20c>)
  40bee0:	4b58      	ldr	r3, [pc, #352]	; (40c044 <gmac_low_level_init+0x228>)
  40bee2:	4798      	blx	r3
	gmac_disable_broadcast(GMAC, false);
  40bee4:	2100      	movs	r1, #0
  40bee6:	4850      	ldr	r0, [pc, #320]	; (40c028 <gmac_low_level_init+0x20c>)
  40bee8:	4b57      	ldr	r3, [pc, #348]	; (40c048 <gmac_low_level_init+0x22c>)
  40beea:	4798      	blx	r3

	/* Set RX buffer size to 1536. */
	gmac_set_rx_bufsize(GMAC, 0x18);
  40beec:	2118      	movs	r1, #24
  40beee:	484e      	ldr	r0, [pc, #312]	; (40c028 <gmac_low_level_init+0x20c>)
  40bef0:	4b56      	ldr	r3, [pc, #344]	; (40c04c <gmac_low_level_init+0x230>)
  40bef2:	4798      	blx	r3

	/* Clear interrupts */
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bef4:	2301      	movs	r3, #1
  40bef6:	73fb      	strb	r3, [r7, #15]
  40bef8:	e007      	b.n	40bf0a <gmac_low_level_init+0xee>
		gmac_get_priority_interrupt_status(GMAC, (gmac_quelist_t)(GMAC_QUE_0+i));
  40befa:	7bfb      	ldrb	r3, [r7, #15]
  40befc:	4619      	mov	r1, r3
  40befe:	484a      	ldr	r0, [pc, #296]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf00:	4b53      	ldr	r3, [pc, #332]	; (40c050 <gmac_low_level_init+0x234>)
  40bf02:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bf04:	7bfb      	ldrb	r3, [r7, #15]
  40bf06:	3301      	adds	r3, #1
  40bf08:	73fb      	strb	r3, [r7, #15]
  40bf0a:	7bfb      	ldrb	r3, [r7, #15]
  40bf0c:	2b05      	cmp	r3, #5
  40bf0e:	d9f4      	bls.n	40befa <gmac_low_level_init+0xde>


	/* Set Tx Priority */
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40bf10:	4b50      	ldr	r3, [pc, #320]	; (40c054 <gmac_low_level_init+0x238>)
  40bf12:	f04f 32ff 	mov.w	r2, #4294967295
  40bf16:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40bf18:	4b4e      	ldr	r3, [pc, #312]	; (40c054 <gmac_low_level_init+0x238>)
  40bf1a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  40bf1e:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bf20:	2301      	movs	r3, #1
  40bf22:	73bb      	strb	r3, [r7, #14]
  40bf24:	e008      	b.n	40bf38 <gmac_low_level_init+0x11c>
		gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, (gmac_quelist_t)(GMAC_QUE_0+i));
  40bf26:	494b      	ldr	r1, [pc, #300]	; (40c054 <gmac_low_level_init+0x238>)
  40bf28:	7bbb      	ldrb	r3, [r7, #14]
  40bf2a:	461a      	mov	r2, r3
  40bf2c:	483e      	ldr	r0, [pc, #248]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf2e:	4b4a      	ldr	r3, [pc, #296]	; (40c058 <gmac_low_level_init+0x23c>)
  40bf30:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bf32:	7bbb      	ldrb	r3, [r7, #14]
  40bf34:	3301      	adds	r3, #1
  40bf36:	73bb      	strb	r3, [r7, #14]
  40bf38:	7bbb      	ldrb	r3, [r7, #14]
  40bf3a:	2b05      	cmp	r3, #5
  40bf3c:	d9f3      	bls.n	40bf26 <gmac_low_level_init+0x10a>
	
	/* Set Rx Priority */
	gs_rx_desc_null.addr.val = (uint32_t)0xFFFFFFFF & GMAC_RXD_ADDR_MASK;
  40bf3e:	4b47      	ldr	r3, [pc, #284]	; (40c05c <gmac_low_level_init+0x240>)
  40bf40:	f06f 0203 	mvn.w	r2, #3
  40bf44:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40bf46:	4b45      	ldr	r3, [pc, #276]	; (40c05c <gmac_low_level_init+0x240>)
  40bf48:	681b      	ldr	r3, [r3, #0]
  40bf4a:	f043 0302 	orr.w	r3, r3, #2
  40bf4e:	4a43      	ldr	r2, [pc, #268]	; (40c05c <gmac_low_level_init+0x240>)
  40bf50:	6013      	str	r3, [r2, #0]
	gs_rx_desc_null.status.val = 0;
  40bf52:	4b42      	ldr	r3, [pc, #264]	; (40c05c <gmac_low_level_init+0x240>)
  40bf54:	2200      	movs	r2, #0
  40bf56:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bf58:	2301      	movs	r3, #1
  40bf5a:	737b      	strb	r3, [r7, #13]
  40bf5c:	e008      	b.n	40bf70 <gmac_low_level_init+0x154>
		gmac_set_rx_priority_queue(GMAC, (uint32_t)&gs_rx_desc_null, (gmac_quelist_t)(GMAC_QUE_0+i));
  40bf5e:	493f      	ldr	r1, [pc, #252]	; (40c05c <gmac_low_level_init+0x240>)
  40bf60:	7b7b      	ldrb	r3, [r7, #13]
  40bf62:	461a      	mov	r2, r3
  40bf64:	4830      	ldr	r0, [pc, #192]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf66:	4b3e      	ldr	r3, [pc, #248]	; (40c060 <gmac_low_level_init+0x244>)
  40bf68:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40bf6a:	7b7b      	ldrb	r3, [r7, #13]
  40bf6c:	3301      	adds	r3, #1
  40bf6e:	737b      	strb	r3, [r7, #13]
  40bf70:	7b7b      	ldrb	r3, [r7, #13]
  40bf72:	2b05      	cmp	r3, #5
  40bf74:	d9f3      	bls.n	40bf5e <gmac_low_level_init+0x142>

	gmac_rx_init(&gs_gmac_dev);
  40bf76:	483b      	ldr	r0, [pc, #236]	; (40c064 <gmac_low_level_init+0x248>)
  40bf78:	4b3b      	ldr	r3, [pc, #236]	; (40c068 <gmac_low_level_init+0x24c>)
  40bf7a:	4798      	blx	r3
	gmac_tx_init(&gs_gmac_dev);
  40bf7c:	4839      	ldr	r0, [pc, #228]	; (40c064 <gmac_low_level_init+0x248>)
  40bf7e:	4b3b      	ldr	r3, [pc, #236]	; (40c06c <gmac_low_level_init+0x250>)
  40bf80:	4798      	blx	r3

	/* Enable Rx, Tx and the statistics register. */
	gmac_enable_transmit(GMAC, true);
  40bf82:	2101      	movs	r1, #1
  40bf84:	4828      	ldr	r0, [pc, #160]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf86:	4b3a      	ldr	r3, [pc, #232]	; (40c070 <gmac_low_level_init+0x254>)
  40bf88:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  40bf8a:	2101      	movs	r1, #1
  40bf8c:	4826      	ldr	r0, [pc, #152]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf8e:	4b39      	ldr	r3, [pc, #228]	; (40c074 <gmac_low_level_init+0x258>)
  40bf90:	4798      	blx	r3
	gmac_enable_statistics_write(GMAC, true);
  40bf92:	2101      	movs	r1, #1
  40bf94:	4824      	ldr	r0, [pc, #144]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf96:	4b38      	ldr	r3, [pc, #224]	; (40c078 <gmac_low_level_init+0x25c>)
  40bf98:	4798      	blx	r3

	/* Set up the interrupts for transmission and errors. */
	gmac_enable_interrupt(GMAC, GMAC_INT_GROUP);
  40bf9a:	2100      	movs	r1, #0
  40bf9c:	4822      	ldr	r0, [pc, #136]	; (40c028 <gmac_low_level_init+0x20c>)
  40bf9e:	4b37      	ldr	r3, [pc, #220]	; (40c07c <gmac_low_level_init+0x260>)
  40bfa0:	4798      	blx	r3


	/* Set GMAC address. */
	gmac_set_address(GMAC, 0, netif->hwaddr);
  40bfa2:	687b      	ldr	r3, [r7, #4]
  40bfa4:	3327      	adds	r3, #39	; 0x27
  40bfa6:	461a      	mov	r2, r3
  40bfa8:	2100      	movs	r1, #0
  40bfaa:	481f      	ldr	r0, [pc, #124]	; (40c028 <gmac_low_level_init+0x20c>)
  40bfac:	4b34      	ldr	r3, [pc, #208]	; (40c080 <gmac_low_level_init+0x264>)
  40bfae:	4798      	blx	r3

	/* Enable NVIC GMAC interrupt. */
	NVIC_SetPriority(GMAC_IRQn, INT_PRIORITY_GMAC);
  40bfb0:	2100      	movs	r1, #0
  40bfb2:	2027      	movs	r0, #39	; 0x27
  40bfb4:	4b33      	ldr	r3, [pc, #204]	; (40c084 <gmac_low_level_init+0x268>)
  40bfb6:	4798      	blx	r3
	NVIC_EnableIRQ(GMAC_IRQn);
  40bfb8:	2027      	movs	r0, #39	; 0x27
  40bfba:	4b33      	ldr	r3, [pc, #204]	; (40c088 <gmac_low_level_init+0x26c>)
  40bfbc:	4798      	blx	r3

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  40bfbe:	4b17      	ldr	r3, [pc, #92]	; (40c01c <gmac_low_level_init+0x200>)
  40bfc0:	4798      	blx	r3
  40bfc2:	4603      	mov	r3, r0
  40bfc4:	461a      	mov	r2, r3
  40bfc6:	2100      	movs	r1, #0
  40bfc8:	4817      	ldr	r0, [pc, #92]	; (40c028 <gmac_low_level_init+0x20c>)
  40bfca:	4b30      	ldr	r3, [pc, #192]	; (40c08c <gmac_low_level_init+0x270>)
  40bfcc:	4798      	blx	r3
  40bfce:	4603      	mov	r3, r0
  40bfd0:	2b00      	cmp	r3, #0
  40bfd2:	d119      	bne.n	40c008 <gmac_low_level_init+0x1ec>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  40bfd4:	2100      	movs	r1, #0
  40bfd6:	4814      	ldr	r0, [pc, #80]	; (40c028 <gmac_low_level_init+0x20c>)
  40bfd8:	4b2d      	ldr	r3, [pc, #180]	; (40c090 <gmac_low_level_init+0x274>)
  40bfda:	4798      	blx	r3
  40bfdc:	4603      	mov	r3, r0
  40bfde:	2b00      	cmp	r3, #0
  40bfe0:	d114      	bne.n	40c00c <gmac_low_level_init+0x1f0>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  40bfe2:	bf00      	nop
  40bfe4:	2201      	movs	r2, #1
  40bfe6:	2100      	movs	r1, #0
  40bfe8:	480f      	ldr	r0, [pc, #60]	; (40c028 <gmac_low_level_init+0x20c>)
  40bfea:	4b2a      	ldr	r3, [pc, #168]	; (40c094 <gmac_low_level_init+0x278>)
  40bfec:	4798      	blx	r3
  40bfee:	4603      	mov	r3, r0
  40bff0:	2b00      	cmp	r3, #0
  40bff2:	d10d      	bne.n	40c010 <gmac_low_level_init+0x1f4>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: set link ERROR!\n"));
		return;
	}

	/* Set link up*/
	netif->flags |= NETIF_FLAG_LINK_UP;
  40bff4:	687b      	ldr	r3, [r7, #4]
  40bff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40bffa:	f043 0310 	orr.w	r3, r3, #16
  40bffe:	b2da      	uxtb	r2, r3
  40c000:	687b      	ldr	r3, [r7, #4]
  40c002:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  40c006:	e004      	b.n	40c012 <gmac_low_level_init+0x1f6>
		return;
  40c008:	bf00      	nop
  40c00a:	e002      	b.n	40c012 <gmac_low_level_init+0x1f6>
		return;
  40c00c:	bf00      	nop
  40c00e:	e000      	b.n	40c012 <gmac_low_level_init+0x1f6>
		return;
  40c010:	bf00      	nop
}
  40c012:	3710      	adds	r7, #16
  40c014:	46bd      	mov	sp, r7
  40c016:	bd80      	pop	{r7, pc}
  40c018:	20400018 	.word	0x20400018
  40c01c:	0040bc49 	.word	0x0040bc49
  40c020:	057619f1 	.word	0x057619f1
  40c024:	00401935 	.word	0x00401935
  40c028:	40050000 	.word	0x40050000
  40c02c:	0040b831 	.word	0x0040b831
  40c030:	0040ba99 	.word	0x0040ba99
  40c034:	0040b8bd 	.word	0x0040b8bd
  40c038:	0040b9f5 	.word	0x0040b9f5
  40c03c:	0040b9c1 	.word	0x0040b9c1
  40c040:	0040bab5 	.word	0x0040bab5
  40c044:	0040b939 	.word	0x0040b939
  40c048:	0040b971 	.word	0x0040b971
  40c04c:	0040ba31 	.word	0x0040ba31
  40c050:	0040bb33 	.word	0x0040bb33
  40c054:	20402150 	.word	0x20402150
  40c058:	0040bb59 	.word	0x0040bb59
  40c05c:	20402158 	.word	0x20402158
  40c060:	0040bb87 	.word	0x0040bb87
  40c064:	20402160 	.word	0x20402160
  40c068:	0040bd05 	.word	0x0040bd05
  40c06c:	0040bd8d 	.word	0x0040bd8d
  40c070:	0040b885 	.word	0x0040b885
  40c074:	0040b84d 	.word	0x0040b84d
  40c078:	0040b8dd 	.word	0x0040b8dd
  40c07c:	0040ba7d 	.word	0x0040ba7d
  40c080:	0040bacd 	.word	0x0040bacd
  40c084:	0040b7dd 	.word	0x0040b7dd
  40c088:	0040b775 	.word	0x0040b775
  40c08c:	00400c55 	.word	0x00400c55
  40c090:	00400e41 	.word	0x00400e41
  40c094:	00400d0d 	.word	0x00400d0d

0040c098 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  40c098:	b580      	push	{r7, lr}
  40c09a:	b086      	sub	sp, #24
  40c09c:	af00      	add	r7, sp, #0
  40c09e:	6078      	str	r0, [r7, #4]
  40c0a0:	6039      	str	r1, [r7, #0]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c0a2:	687b      	ldr	r3, [r7, #4]
  40c0a4:	69db      	ldr	r3, [r3, #28]
  40c0a6:	60fb      	str	r3, [r7, #12]
	struct pbuf *q = NULL;
  40c0a8:	2300      	movs	r3, #0
  40c0aa:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = 0;
  40c0ac:	2300      	movs	r3, #0
  40c0ae:	613b      	str	r3, [r7, #16]

	/* Handle GMAC underrun or AHB errors. */
	if (gmac_get_tx_status(GMAC) & GMAC_TX_ERRORS) {
  40c0b0:	482e      	ldr	r0, [pc, #184]	; (40c16c <gmac_low_level_output+0xd4>)
  40c0b2:	4b2f      	ldr	r3, [pc, #188]	; (40c170 <gmac_low_level_output+0xd8>)
  40c0b4:	4798      	blx	r3
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  40c0b6:	68fa      	ldr	r2, [r7, #12]
  40c0b8:	f241 230c 	movw	r3, #4620	; 0x120c
  40c0bc:	4413      	add	r3, r2
  40c0be:	681a      	ldr	r2, [r3, #0]
  40c0c0:	68fb      	ldr	r3, [r7, #12]
  40c0c2:	3203      	adds	r2, #3
  40c0c4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  40c0c8:	613b      	str	r3, [r7, #16]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40c0ca:	683b      	ldr	r3, [r7, #0]
  40c0cc:	617b      	str	r3, [r7, #20]
  40c0ce:	e010      	b.n	40c0f2 <gmac_low_level_output+0x5a>
		memcpy(buffer, q->payload, q->len);
  40c0d0:	697b      	ldr	r3, [r7, #20]
  40c0d2:	6859      	ldr	r1, [r3, #4]
  40c0d4:	697b      	ldr	r3, [r7, #20]
  40c0d6:	895b      	ldrh	r3, [r3, #10]
  40c0d8:	461a      	mov	r2, r3
  40c0da:	6938      	ldr	r0, [r7, #16]
  40c0dc:	4b25      	ldr	r3, [pc, #148]	; (40c174 <gmac_low_level_output+0xdc>)
  40c0de:	4798      	blx	r3
		buffer += q->len;
  40c0e0:	697b      	ldr	r3, [r7, #20]
  40c0e2:	895b      	ldrh	r3, [r3, #10]
  40c0e4:	461a      	mov	r2, r3
  40c0e6:	693b      	ldr	r3, [r7, #16]
  40c0e8:	4413      	add	r3, r2
  40c0ea:	613b      	str	r3, [r7, #16]
	for (q = p; q != NULL; q = q->next) {
  40c0ec:	697b      	ldr	r3, [r7, #20]
  40c0ee:	681b      	ldr	r3, [r3, #0]
  40c0f0:	617b      	str	r3, [r7, #20]
  40c0f2:	697b      	ldr	r3, [r7, #20]
  40c0f4:	2b00      	cmp	r3, #0
  40c0f6:	d1eb      	bne.n	40c0d0 <gmac_low_level_output+0x38>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  40c0f8:	68fa      	ldr	r2, [r7, #12]
  40c0fa:	f241 230c 	movw	r3, #4620	; 0x120c
  40c0fe:	4413      	add	r3, r2
  40c100:	681b      	ldr	r3, [r3, #0]
  40c102:	683a      	ldr	r2, [r7, #0]
  40c104:	8912      	ldrh	r2, [r2, #8]
  40c106:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40c10a:	b291      	uxth	r1, r2
  40c10c:	68fa      	ldr	r2, [r7, #12]
  40c10e:	3303      	adds	r3, #3
  40c110:	00db      	lsls	r3, r3, #3
  40c112:	4413      	add	r3, r2
  40c114:	889a      	ldrh	r2, [r3, #4]
  40c116:	f361 020d 	bfi	r2, r1, #0, #14
  40c11a:	809a      	strh	r2, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  40c11c:	68fa      	ldr	r2, [r7, #12]
  40c11e:	f241 230c 	movw	r3, #4620	; 0x120c
  40c122:	4413      	add	r3, r2
  40c124:	681b      	ldr	r3, [r3, #0]
  40c126:	68fa      	ldr	r2, [r7, #12]
  40c128:	3303      	adds	r3, #3
  40c12a:	00db      	lsls	r3, r3, #3
  40c12c:	4413      	add	r3, r2
  40c12e:	79da      	ldrb	r2, [r3, #7]
  40c130:	f36f 12c7 	bfc	r2, #7, #1
  40c134:	71da      	strb	r2, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  40c136:	68fa      	ldr	r2, [r7, #12]
  40c138:	f241 230c 	movw	r3, #4620	; 0x120c
  40c13c:	4413      	add	r3, r2
  40c13e:	681b      	ldr	r3, [r3, #0]
  40c140:	1c59      	adds	r1, r3, #1
  40c142:	4b0d      	ldr	r3, [pc, #52]	; (40c178 <gmac_low_level_output+0xe0>)
  40c144:	fba3 2301 	umull	r2, r3, r3, r1
  40c148:	085a      	lsrs	r2, r3, #1
  40c14a:	4613      	mov	r3, r2
  40c14c:	005b      	lsls	r3, r3, #1
  40c14e:	4413      	add	r3, r2
  40c150:	1aca      	subs	r2, r1, r3
  40c152:	68f9      	ldr	r1, [r7, #12]
  40c154:	f241 230c 	movw	r3, #4620	; 0x120c
  40c158:	440b      	add	r3, r1
  40c15a:	601a      	str	r2, [r3, #0]

	/* Now start to transmission. */
	gmac_start_transmission(GMAC);
  40c15c:	4803      	ldr	r0, [pc, #12]	; (40c16c <gmac_low_level_output+0xd4>)
  40c15e:	4b07      	ldr	r3, [pc, #28]	; (40c17c <gmac_low_level_output+0xe4>)
  40c160:	4798      	blx	r3
#if LWIP_STATS
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
  40c162:	2300      	movs	r3, #0
}
  40c164:	4618      	mov	r0, r3
  40c166:	3718      	adds	r7, #24
  40c168:	46bd      	mov	sp, r7
  40c16a:	bd80      	pop	{r7, pc}
  40c16c:	40050000 	.word	0x40050000
  40c170:	0040b9a9 	.word	0x0040b9a9
  40c174:	0040c9e5 	.word	0x0040c9e5
  40c178:	aaaaaaab 	.word	0xaaaaaaab
  40c17c:	0040b915 	.word	0x0040b915

0040c180 <gmac_low_level_input>:
 *
 * \return a pbuf filled with the received packet (including MAC header).
 * 0 on memory error.
 */
static struct pbuf *gmac_low_level_input(struct netif *netif)
{
  40c180:	b580      	push	{r7, lr}
  40c182:	b088      	sub	sp, #32
  40c184:	af00      	add	r7, sp, #0
  40c186:	6078      	str	r0, [r7, #4]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c188:	687b      	ldr	r3, [r7, #4]
  40c18a:	69db      	ldr	r3, [r3, #28]
  40c18c:	61bb      	str	r3, [r7, #24]
	struct pbuf *p = 0;
  40c18e:	2300      	movs	r3, #0
  40c190:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
  40c192:	2300      	movs	r3, #0
  40c194:	617b      	str	r3, [r7, #20]
	uint32_t ul_index = 0;
  40c196:	2300      	movs	r3, #0
  40c198:	613b      	str	r3, [r7, #16]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  40c19a:	69ba      	ldr	r2, [r7, #24]
  40c19c:	f241 2308 	movw	r3, #4616	; 0x1208
  40c1a0:	4413      	add	r3, r2
  40c1a2:	681b      	ldr	r3, [r3, #0]
  40c1a4:	00db      	lsls	r3, r3, #3
  40c1a6:	69ba      	ldr	r2, [r7, #24]
  40c1a8:	4413      	add	r3, r2
  40c1aa:	60fb      	str	r3, [r7, #12]

	/* Handle GMAC overrun or AHB errors. */
	if (gmac_get_rx_status(GMAC) & GMAC_RX_ERRORS) {
  40c1ac:	4825      	ldr	r0, [pc, #148]	; (40c244 <gmac_low_level_input+0xc4>)
  40c1ae:	4b26      	ldr	r3, [pc, #152]	; (40c248 <gmac_low_level_input+0xc8>)
  40c1b0:	4798      	blx	r3

		gmac_enable_receive(GMAC, true);
	}

	/* Check that a packet has been received and processed by GMAC. */
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  40c1b2:	68fb      	ldr	r3, [r7, #12]
  40c1b4:	681b      	ldr	r3, [r3, #0]
  40c1b6:	f003 0301 	and.w	r3, r3, #1
  40c1ba:	2b00      	cmp	r3, #0
  40c1bc:	d03c      	beq.n	40c238 <gmac_low_level_input+0xb8>
		/* Packet is a SOF since packet size is set to maximum. */
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  40c1be:	68fb      	ldr	r3, [r7, #12]
  40c1c0:	685b      	ldr	r3, [r3, #4]
  40c1c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40c1c6:	617b      	str	r3, [r7, #20]

		/* Fetch pre-allocated pbuf. */
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  40c1c8:	69ba      	ldr	r2, [r7, #24]
  40c1ca:	f241 2308 	movw	r3, #4616	; 0x1208
  40c1ce:	4413      	add	r3, r2
  40c1d0:	681a      	ldr	r2, [r3, #0]
  40c1d2:	69bb      	ldr	r3, [r7, #24]
  40c1d4:	320c      	adds	r2, #12
  40c1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c1da:	61fb      	str	r3, [r7, #28]
		p->len = length;
  40c1dc:	697b      	ldr	r3, [r7, #20]
  40c1de:	b29a      	uxth	r2, r3
  40c1e0:	69fb      	ldr	r3, [r7, #28]
  40c1e2:	815a      	strh	r2, [r3, #10]

		/* Remove this pbuf from its desriptor. */
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  40c1e4:	69ba      	ldr	r2, [r7, #24]
  40c1e6:	f241 2308 	movw	r3, #4616	; 0x1208
  40c1ea:	4413      	add	r3, r2
  40c1ec:	681a      	ldr	r2, [r3, #0]
  40c1ee:	69bb      	ldr	r3, [r7, #24]
  40c1f0:	320c      	adds	r2, #12
  40c1f2:	2100      	movs	r1, #0
  40c1f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		LWIP_DEBUGF(NETIF_DEBUG,
				("gmac_low_level_input: DMA buffer %p received, size=%u [idx=%u]\n",
				p, length, ps_gmac_dev->us_rx_idx));

		/* Set pbuf total packet size. */
		p->tot_len = length;
  40c1f8:	697b      	ldr	r3, [r7, #20]
  40c1fa:	b29a      	uxth	r2, r3
  40c1fc:	69fb      	ldr	r3, [r7, #28]
  40c1fe:	811a      	strh	r2, [r3, #8]
		LINK_STATS_INC(link.recv);

		/* Fill empty descriptors with new pbufs. */
		gmac_rx_populate_queue(ps_gmac_dev);
  40c200:	69b8      	ldr	r0, [r7, #24]
  40c202:	4b12      	ldr	r3, [pc, #72]	; (40c24c <gmac_low_level_input+0xcc>)
  40c204:	4798      	blx	r3

		/* Mark the descriptor ready for transfer. */
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40c206:	68fb      	ldr	r3, [r7, #12]
  40c208:	681b      	ldr	r3, [r3, #0]
  40c20a:	f023 0201 	bic.w	r2, r3, #1
  40c20e:	68fb      	ldr	r3, [r7, #12]
  40c210:	601a      	str	r2, [r3, #0]

		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  40c212:	69ba      	ldr	r2, [r7, #24]
  40c214:	f241 2308 	movw	r3, #4616	; 0x1208
  40c218:	4413      	add	r3, r2
  40c21a:	681b      	ldr	r3, [r3, #0]
  40c21c:	1c59      	adds	r1, r3, #1
  40c21e:	4b0c      	ldr	r3, [pc, #48]	; (40c250 <gmac_low_level_input+0xd0>)
  40c220:	fba3 2301 	umull	r2, r3, r3, r1
  40c224:	085a      	lsrs	r2, r3, #1
  40c226:	4613      	mov	r3, r2
  40c228:	005b      	lsls	r3, r3, #1
  40c22a:	4413      	add	r3, r2
  40c22c:	1aca      	subs	r2, r1, r3
  40c22e:	69b9      	ldr	r1, [r7, #24]
  40c230:	f241 2308 	movw	r3, #4616	; 0x1208
  40c234:	440b      	add	r3, r1
  40c236:	601a      	str	r2, [r3, #0]
#if LWIP_STATS
	lwip_rx_count += length;
#endif
	}

	return p;
  40c238:	69fb      	ldr	r3, [r7, #28]
}
  40c23a:	4618      	mov	r0, r3
  40c23c:	3720      	adds	r7, #32
  40c23e:	46bd      	mov	sp, r7
  40c240:	bd80      	pop	{r7, pc}
  40c242:	bf00      	nop
  40c244:	40050000 	.word	0x40050000
  40c248:	0040b9dd 	.word	0x0040b9dd
  40c24c:	0040bc71 	.word	0x0040bc71
  40c250:	aaaaaaab 	.word	0xaaaaaaab

0040c254 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  40c254:	b580      	push	{r7, lr}
  40c256:	b084      	sub	sp, #16
  40c258:	af00      	add	r7, sp, #0
  40c25a:	6078      	str	r0, [r7, #4]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
  40c25c:	6878      	ldr	r0, [r7, #4]
  40c25e:	4b17      	ldr	r3, [pc, #92]	; (40c2bc <ethernetif_input+0x68>)
  40c260:	4798      	blx	r3
  40c262:	60f8      	str	r0, [r7, #12]
	if (p == NULL)
  40c264:	68fb      	ldr	r3, [r7, #12]
  40c266:	2b00      	cmp	r3, #0
  40c268:	d021      	beq.n	40c2ae <ethernetif_input+0x5a>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;
  40c26a:	68fb      	ldr	r3, [r7, #12]
  40c26c:	685b      	ldr	r3, [r3, #4]
  40c26e:	60bb      	str	r3, [r7, #8]

	switch (htons(ethhdr->type)) {
  40c270:	68bb      	ldr	r3, [r7, #8]
  40c272:	899b      	ldrh	r3, [r3, #12]
  40c274:	b29b      	uxth	r3, r3
  40c276:	4618      	mov	r0, r3
  40c278:	4b11      	ldr	r3, [pc, #68]	; (40c2c0 <ethernetif_input+0x6c>)
  40c27a:	4798      	blx	r3
  40c27c:	4603      	mov	r3, r0
  40c27e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40c282:	d003      	beq.n	40c28c <ethernetif_input+0x38>
  40c284:	f640 0206 	movw	r2, #2054	; 0x806
  40c288:	4293      	cmp	r3, r2
  40c28a:	d10b      	bne.n	40c2a4 <ethernetif_input+0x50>
#if PPPOE_SUPPORT
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* Send packet to lwIP for processing. */
			if (netif->input(p, netif) != ERR_OK) {
  40c28c:	687b      	ldr	r3, [r7, #4]
  40c28e:	691b      	ldr	r3, [r3, #16]
  40c290:	6879      	ldr	r1, [r7, #4]
  40c292:	68f8      	ldr	r0, [r7, #12]
  40c294:	4798      	blx	r3
  40c296:	4603      	mov	r3, r0
  40c298:	2b00      	cmp	r3, #0
  40c29a:	d00a      	beq.n	40c2b2 <ethernetif_input+0x5e>
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
  40c29c:	68f8      	ldr	r0, [r7, #12]
  40c29e:	4b09      	ldr	r3, [pc, #36]	; (40c2c4 <ethernetif_input+0x70>)
  40c2a0:	4798      	blx	r3
			}
			break;
  40c2a2:	e006      	b.n	40c2b2 <ethernetif_input+0x5e>

		default:
			/* Free buffer. */
			pbuf_free(p);
  40c2a4:	68f8      	ldr	r0, [r7, #12]
  40c2a6:	4b07      	ldr	r3, [pc, #28]	; (40c2c4 <ethernetif_input+0x70>)
  40c2a8:	4798      	blx	r3
			break;
  40c2aa:	bf00      	nop
  40c2ac:	e002      	b.n	40c2b4 <ethernetif_input+0x60>
		return;
  40c2ae:	bf00      	nop
  40c2b0:	e000      	b.n	40c2b4 <ethernetif_input+0x60>
			break;
  40c2b2:	bf00      	nop
	}
}
  40c2b4:	3710      	adds	r7, #16
  40c2b6:	46bd      	mov	sp, r7
  40c2b8:	bd80      	pop	{r7, pc}
  40c2ba:	bf00      	nop
  40c2bc:	0040c181 	.word	0x0040c181
  40c2c0:	00401e19 	.word	0x00401e19
  40c2c4:	00405a01 	.word	0x00405a01

0040c2c8 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  40c2c8:	b580      	push	{r7, lr}
  40c2ca:	b082      	sub	sp, #8
  40c2cc:	af00      	add	r7, sp, #0
  40c2ce:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  40c2d0:	4a0f      	ldr	r2, [pc, #60]	; (40c310 <ethernetif_init+0x48>)
  40c2d2:	f241 2310 	movw	r3, #4624	; 0x1210
  40c2d6:	4413      	add	r3, r2
  40c2d8:	687a      	ldr	r2, [r7, #4]
  40c2da:	601a      	str	r2, [r3, #0]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40c2dc:	687b      	ldr	r3, [r7, #4]
  40c2de:	4a0c      	ldr	r2, [pc, #48]	; (40c310 <ethernetif_init+0x48>)
  40c2e0:	61da      	str	r2, [r3, #28]
	netif->name[0] = IFNAME0;
  40c2e2:	687b      	ldr	r3, [r7, #4]
  40c2e4:	2265      	movs	r2, #101	; 0x65
  40c2e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  40c2ea:	687b      	ldr	r3, [r7, #4]
  40c2ec:	226e      	movs	r2, #110	; 0x6e
  40c2ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40c2f2:	687b      	ldr	r3, [r7, #4]
  40c2f4:	4a07      	ldr	r2, [pc, #28]	; (40c314 <ethernetif_init+0x4c>)
  40c2f6:	615a      	str	r2, [r3, #20]
	netif->linkoutput = gmac_low_level_output;
  40c2f8:	687b      	ldr	r3, [r7, #4]
  40c2fa:	4a07      	ldr	r2, [pc, #28]	; (40c318 <ethernetif_init+0x50>)
  40c2fc:	619a      	str	r2, [r3, #24]
	/* Initialize the hardware */
	gmac_low_level_init(netif);
  40c2fe:	6878      	ldr	r0, [r7, #4]
  40c300:	4b06      	ldr	r3, [pc, #24]	; (40c31c <ethernetif_init+0x54>)
  40c302:	4798      	blx	r3
			(id != 0));
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
  40c304:	2300      	movs	r3, #0
}
  40c306:	4618      	mov	r0, r3
  40c308:	3708      	adds	r7, #8
  40c30a:	46bd      	mov	sp, r7
  40c30c:	bd80      	pop	{r7, pc}
  40c30e:	bf00      	nop
  40c310:	20402160 	.word	0x20402160
  40c314:	0040b15d 	.word	0x0040b15d
  40c318:	0040c099 	.word	0x0040c099
  40c31c:	0040be1d 	.word	0x0040be1d

0040c320 <timers_update>:

/**
 * \brief Timer management function.
 */
static void timers_update(void)
{
  40c320:	b580      	push	{r7, lr}
  40c322:	b084      	sub	sp, #16
  40c324:	af00      	add	r7, sp, #0
	static uint32_t ul_last_time;
	uint32_t ul_cur_time, ul_time_diff, ul_idx_timer;
	timers_info_t *p_tmr_inf;

	ul_cur_time = sys_get_ms();
  40c326:	4b24      	ldr	r3, [pc, #144]	; (40c3b8 <timers_update+0x98>)
  40c328:	4798      	blx	r3
  40c32a:	6078      	str	r0, [r7, #4]
	if (ul_cur_time >= ul_last_time) {
  40c32c:	4b23      	ldr	r3, [pc, #140]	; (40c3bc <timers_update+0x9c>)
  40c32e:	681b      	ldr	r3, [r3, #0]
  40c330:	687a      	ldr	r2, [r7, #4]
  40c332:	429a      	cmp	r2, r3
  40c334:	d305      	bcc.n	40c342 <timers_update+0x22>
		ul_time_diff = ul_cur_time - ul_last_time;
  40c336:	4b21      	ldr	r3, [pc, #132]	; (40c3bc <timers_update+0x9c>)
  40c338:	681b      	ldr	r3, [r3, #0]
  40c33a:	687a      	ldr	r2, [r7, #4]
  40c33c:	1ad3      	subs	r3, r2, r3
  40c33e:	60fb      	str	r3, [r7, #12]
  40c340:	e005      	b.n	40c34e <timers_update+0x2e>
	} else {
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  40c342:	4b1e      	ldr	r3, [pc, #120]	; (40c3bc <timers_update+0x9c>)
  40c344:	681b      	ldr	r3, [r3, #0]
  40c346:	687a      	ldr	r2, [r7, #4]
  40c348:	1ad3      	subs	r3, r2, r3
  40c34a:	3b01      	subs	r3, #1
  40c34c:	60fb      	str	r3, [r7, #12]
	}

	if (ul_time_diff) {
  40c34e:	68fb      	ldr	r3, [r7, #12]
  40c350:	2b00      	cmp	r3, #0
  40c352:	d02d      	beq.n	40c3b0 <timers_update+0x90>
		ul_last_time = ul_cur_time;
  40c354:	4a19      	ldr	r2, [pc, #100]	; (40c3bc <timers_update+0x9c>)
  40c356:	687b      	ldr	r3, [r7, #4]
  40c358:	6013      	str	r3, [r2, #0]
		for (ul_idx_timer = 0;
  40c35a:	2300      	movs	r3, #0
  40c35c:	60bb      	str	r3, [r7, #8]
  40c35e:	e024      	b.n	40c3aa <timers_update+0x8a>
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
			p_tmr_inf = &gs_timers_table[ul_idx_timer];
  40c360:	68ba      	ldr	r2, [r7, #8]
  40c362:	4613      	mov	r3, r2
  40c364:	005b      	lsls	r3, r3, #1
  40c366:	4413      	add	r3, r2
  40c368:	009b      	lsls	r3, r3, #2
  40c36a:	4a15      	ldr	r2, [pc, #84]	; (40c3c0 <timers_update+0xa0>)
  40c36c:	4413      	add	r3, r2
  40c36e:	603b      	str	r3, [r7, #0]
			p_tmr_inf->timer += ul_time_diff;
  40c370:	683b      	ldr	r3, [r7, #0]
  40c372:	681a      	ldr	r2, [r3, #0]
  40c374:	68fb      	ldr	r3, [r7, #12]
  40c376:	441a      	add	r2, r3
  40c378:	683b      	ldr	r3, [r7, #0]
  40c37a:	601a      	str	r2, [r3, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  40c37c:	683b      	ldr	r3, [r7, #0]
  40c37e:	681a      	ldr	r2, [r3, #0]
  40c380:	683b      	ldr	r3, [r7, #0]
  40c382:	685b      	ldr	r3, [r3, #4]
  40c384:	429a      	cmp	r2, r3
  40c386:	d90d      	bls.n	40c3a4 <timers_update+0x84>
				if (p_tmr_inf->timer_func) {
  40c388:	683b      	ldr	r3, [r7, #0]
  40c38a:	689b      	ldr	r3, [r3, #8]
  40c38c:	2b00      	cmp	r3, #0
  40c38e:	d002      	beq.n	40c396 <timers_update+0x76>
					p_tmr_inf->timer_func();
  40c390:	683b      	ldr	r3, [r7, #0]
  40c392:	689b      	ldr	r3, [r3, #8]
  40c394:	4798      	blx	r3
				}

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  40c396:	683b      	ldr	r3, [r7, #0]
  40c398:	681a      	ldr	r2, [r3, #0]
  40c39a:	683b      	ldr	r3, [r7, #0]
  40c39c:	685b      	ldr	r3, [r3, #4]
  40c39e:	1ad2      	subs	r2, r2, r3
  40c3a0:	683b      	ldr	r3, [r7, #0]
  40c3a2:	601a      	str	r2, [r3, #0]
			 ul_idx_timer++) {
  40c3a4:	68bb      	ldr	r3, [r7, #8]
  40c3a6:	3301      	adds	r3, #1
  40c3a8:	60bb      	str	r3, [r7, #8]
		for (ul_idx_timer = 0;
  40c3aa:	68bb      	ldr	r3, [r7, #8]
  40c3ac:	2b04      	cmp	r3, #4
  40c3ae:	d9d7      	bls.n	40c360 <timers_update+0x40>
			}
		}
	}
}
  40c3b0:	bf00      	nop
  40c3b2:	3710      	adds	r7, #16
  40c3b4:	46bd      	mov	sp, r7
  40c3b6:	bd80      	pop	{r7, pc}
  40c3b8:	0040c605 	.word	0x0040c605
  40c3bc:	20403374 	.word	0x20403374
  40c3c0:	20400020 	.word	0x20400020

0040c3c4 <ethernet_configure_interface>:

/**
 * \brief Configure network interface driver.
 */
static void ethernet_configure_interface(void)
{
  40c3c4:	b590      	push	{r4, r7, lr}
  40c3c6:	b089      	sub	sp, #36	; 0x24
  40c3c8:	af04      	add	r7, sp, #16
	struct ip_addr x_ip_addr, x_net_mask, x_gateway;
	extern err_t ethernetif_init(struct netif *netif);

#if defined(DHCP_USED)
		/* DHCP mode. */
	x_ip_addr.addr = 0;
  40c3ca:	2300      	movs	r3, #0
  40c3cc:	60fb      	str	r3, [r7, #12]
	x_net_mask.addr = 0;
  40c3ce:	2300      	movs	r3, #0
  40c3d0:	60bb      	str	r3, [r7, #8]
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  40c3d2:	1d38      	adds	r0, r7, #4
  40c3d4:	f107 0208 	add.w	r2, r7, #8
  40c3d8:	f107 010c 	add.w	r1, r7, #12
  40c3dc:	4b09      	ldr	r3, [pc, #36]	; (40c404 <ethernet_configure_interface+0x40>)
  40c3de:	9302      	str	r3, [sp, #8]
  40c3e0:	4b09      	ldr	r3, [pc, #36]	; (40c408 <ethernet_configure_interface+0x44>)
  40c3e2:	9301      	str	r3, [sp, #4]
  40c3e4:	2300      	movs	r3, #0
  40c3e6:	9300      	str	r3, [sp, #0]
  40c3e8:	4603      	mov	r3, r0
  40c3ea:	4808      	ldr	r0, [pc, #32]	; (40c40c <ethernet_configure_interface+0x48>)
  40c3ec:	4c08      	ldr	r4, [pc, #32]	; (40c410 <ethernet_configure_interface+0x4c>)
  40c3ee:	47a0      	blx	r4
			ethernetif_init, ethernet_input)) {
		LWIP_ASSERT("NULL == netif_add", 0);
	}

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
  40c3f0:	4806      	ldr	r0, [pc, #24]	; (40c40c <ethernet_configure_interface+0x48>)
  40c3f2:	4b08      	ldr	r3, [pc, #32]	; (40c414 <ethernet_configure_interface+0x50>)
  40c3f4:	4798      	blx	r3
	//netif_set_status_callback(&gs_net_if, status_callback);

	/* Bring it up */
#if defined(DHCP_USED)
	/* DHCP mode. */
	if (ERR_OK != dhcp_start(&gs_net_if)) {
  40c3f6:	4805      	ldr	r0, [pc, #20]	; (40c40c <ethernet_configure_interface+0x48>)
  40c3f8:	4b07      	ldr	r3, [pc, #28]	; (40c418 <ethernet_configure_interface+0x54>)
  40c3fa:	4798      	blx	r3
#else
	/* Static mode. */
	netif_set_up(&gs_net_if);
	//printf("Static IP Address Assigned\r\n");
#endif
}
  40c3fc:	bf00      	nop
  40c3fe:	3714      	adds	r7, #20
  40c400:	46bd      	mov	sp, r7
  40c402:	bd90      	pop	{r4, r7, pc}
  40c404:	0040b665 	.word	0x0040b665
  40c408:	0040c2c9 	.word	0x0040c2c9
  40c40c:	20404408 	.word	0x20404408
  40c410:	004053b5 	.word	0x004053b5
  40c414:	00405581 	.word	0x00405581
  40c418:	0040240d 	.word	0x0040240d

0040c41c <init_ethernet>:

/**
 * \brief Initialize the lwIP TCP/IP stack with the network interface driver.
 */
void init_ethernet(void)
{
  40c41c:	b580      	push	{r7, lr}
  40c41e:	af00      	add	r7, sp, #0
	/* Initialize lwIP. */
	lwip_init();
  40c420:	4b03      	ldr	r3, [pc, #12]	; (40c430 <init_ethernet+0x14>)
  40c422:	4798      	blx	r3

	/* Set hw and IP parameters, initialize MAC too. */
	ethernet_configure_interface();
  40c424:	4b03      	ldr	r3, [pc, #12]	; (40c434 <init_ethernet+0x18>)
  40c426:	4798      	blx	r3

	/* Initialize timer. */
	sys_init_timing();
  40c428:	4b03      	ldr	r3, [pc, #12]	; (40c438 <init_ethernet+0x1c>)
  40c42a:	4798      	blx	r3
}
  40c42c:	bf00      	nop
  40c42e:	bd80      	pop	{r7, pc}
  40c430:	00404b6d 	.word	0x00404b6d
  40c434:	0040c3c5 	.word	0x0040c3c5
  40c438:	0040c55d 	.word	0x0040c55d

0040c43c <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
bool ethernet_task(void)
{
  40c43c:	b580      	push	{r7, lr}
  40c43e:	af00      	add	r7, sp, #0
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  40c440:	4806      	ldr	r0, [pc, #24]	; (40c45c <ethernet_task+0x20>)
  40c442:	4b07      	ldr	r3, [pc, #28]	; (40c460 <ethernet_task+0x24>)
  40c444:	4798      	blx	r3

	/* Update the periodic timer. */
	timers_update();
  40c446:	4b07      	ldr	r3, [pc, #28]	; (40c464 <ethernet_task+0x28>)
  40c448:	4798      	blx	r3
	
	if(gs_net_if.ip_addr.addr == 0)
  40c44a:	4b04      	ldr	r3, [pc, #16]	; (40c45c <ethernet_task+0x20>)
  40c44c:	685b      	ldr	r3, [r3, #4]
  40c44e:	2b00      	cmp	r3, #0
  40c450:	d101      	bne.n	40c456 <ethernet_task+0x1a>
		return false;
  40c452:	2300      	movs	r3, #0
  40c454:	e000      	b.n	40c458 <ethernet_task+0x1c>
	else 
		return true;
  40c456:	2301      	movs	r3, #1
}
  40c458:	4618      	mov	r0, r3
  40c45a:	bd80      	pop	{r7, pc}
  40c45c:	20404408 	.word	0x20404408
  40c460:	0040c255 	.word	0x0040c255
  40c464:	0040c321 	.word	0x0040c321

0040c468 <NVIC_EnableIRQ>:
{
  40c468:	b480      	push	{r7}
  40c46a:	b083      	sub	sp, #12
  40c46c:	af00      	add	r7, sp, #0
  40c46e:	4603      	mov	r3, r0
  40c470:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40c472:	4909      	ldr	r1, [pc, #36]	; (40c498 <NVIC_EnableIRQ+0x30>)
  40c474:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40c478:	095b      	lsrs	r3, r3, #5
  40c47a:	79fa      	ldrb	r2, [r7, #7]
  40c47c:	f002 021f 	and.w	r2, r2, #31
  40c480:	2001      	movs	r0, #1
  40c482:	fa00 f202 	lsl.w	r2, r0, r2
  40c486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40c48a:	bf00      	nop
  40c48c:	370c      	adds	r7, #12
  40c48e:	46bd      	mov	sp, r7
  40c490:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c494:	4770      	bx	lr
  40c496:	bf00      	nop
  40c498:	e000e100 	.word	0xe000e100

0040c49c <osc_get_rate>:
{
  40c49c:	b480      	push	{r7}
  40c49e:	b083      	sub	sp, #12
  40c4a0:	af00      	add	r7, sp, #0
  40c4a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40c4a4:	687b      	ldr	r3, [r7, #4]
  40c4a6:	2b07      	cmp	r3, #7
  40c4a8:	d825      	bhi.n	40c4f6 <osc_get_rate+0x5a>
  40c4aa:	a201      	add	r2, pc, #4	; (adr r2, 40c4b0 <osc_get_rate+0x14>)
  40c4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c4b0:	0040c4d1 	.word	0x0040c4d1
  40c4b4:	0040c4d7 	.word	0x0040c4d7
  40c4b8:	0040c4dd 	.word	0x0040c4dd
  40c4bc:	0040c4e3 	.word	0x0040c4e3
  40c4c0:	0040c4e7 	.word	0x0040c4e7
  40c4c4:	0040c4eb 	.word	0x0040c4eb
  40c4c8:	0040c4ef 	.word	0x0040c4ef
  40c4cc:	0040c4f3 	.word	0x0040c4f3
		return OSC_SLCK_32K_RC_HZ;
  40c4d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40c4d4:	e010      	b.n	40c4f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40c4d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c4da:	e00d      	b.n	40c4f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40c4dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c4e0:	e00a      	b.n	40c4f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40c4e2:	4b08      	ldr	r3, [pc, #32]	; (40c504 <osc_get_rate+0x68>)
  40c4e4:	e008      	b.n	40c4f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40c4e6:	4b08      	ldr	r3, [pc, #32]	; (40c508 <osc_get_rate+0x6c>)
  40c4e8:	e006      	b.n	40c4f8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40c4ea:	4b08      	ldr	r3, [pc, #32]	; (40c50c <osc_get_rate+0x70>)
  40c4ec:	e004      	b.n	40c4f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40c4ee:	4b07      	ldr	r3, [pc, #28]	; (40c50c <osc_get_rate+0x70>)
  40c4f0:	e002      	b.n	40c4f8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40c4f2:	4b06      	ldr	r3, [pc, #24]	; (40c50c <osc_get_rate+0x70>)
  40c4f4:	e000      	b.n	40c4f8 <osc_get_rate+0x5c>
	return 0;
  40c4f6:	2300      	movs	r3, #0
}
  40c4f8:	4618      	mov	r0, r3
  40c4fa:	370c      	adds	r7, #12
  40c4fc:	46bd      	mov	sp, r7
  40c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c502:	4770      	bx	lr
  40c504:	003d0900 	.word	0x003d0900
  40c508:	007a1200 	.word	0x007a1200
  40c50c:	00b71b00 	.word	0x00b71b00

0040c510 <sysclk_get_main_hz>:
{
  40c510:	b580      	push	{r7, lr}
  40c512:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40c514:	2006      	movs	r0, #6
  40c516:	4b05      	ldr	r3, [pc, #20]	; (40c52c <sysclk_get_main_hz+0x1c>)
  40c518:	4798      	blx	r3
  40c51a:	4602      	mov	r2, r0
  40c51c:	4613      	mov	r3, r2
  40c51e:	009b      	lsls	r3, r3, #2
  40c520:	4413      	add	r3, r2
  40c522:	009a      	lsls	r2, r3, #2
  40c524:	4413      	add	r3, r2
}
  40c526:	4618      	mov	r0, r3
  40c528:	bd80      	pop	{r7, pc}
  40c52a:	bf00      	nop
  40c52c:	0040c49d 	.word	0x0040c49d

0040c530 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  40c530:	b480      	push	{r7}
  40c532:	b083      	sub	sp, #12
  40c534:	af00      	add	r7, sp, #0
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  40c536:	4b07      	ldr	r3, [pc, #28]	; (40c554 <TC0_Handler+0x24>)
  40c538:	6a1b      	ldr	r3, [r3, #32]
  40c53a:	607b      	str	r3, [r7, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  40c53c:	4b06      	ldr	r3, [pc, #24]	; (40c558 <TC0_Handler+0x28>)
  40c53e:	681b      	ldr	r3, [r3, #0]
  40c540:	3301      	adds	r3, #1
  40c542:	4a05      	ldr	r2, [pc, #20]	; (40c558 <TC0_Handler+0x28>)
  40c544:	6013      	str	r3, [r2, #0]
}
  40c546:	bf00      	nop
  40c548:	370c      	adds	r7, #12
  40c54a:	46bd      	mov	sp, r7
  40c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c550:	4770      	bx	lr
  40c552:	bf00      	nop
  40c554:	4000c000 	.word	0x4000c000
  40c558:	20403378 	.word	0x20403378

0040c55c <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  40c55c:	b590      	push	{r4, r7, lr}
  40c55e:	b085      	sub	sp, #20
  40c560:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  40c562:	4b1d      	ldr	r3, [pc, #116]	; (40c5d8 <sys_init_timing+0x7c>)
  40c564:	2200      	movs	r2, #0
  40c566:	601a      	str	r2, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  40c568:	2017      	movs	r0, #23
  40c56a:	4b1c      	ldr	r3, [pc, #112]	; (40c5dc <sys_init_timing+0x80>)
  40c56c:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  40c56e:	4b1c      	ldr	r3, [pc, #112]	; (40c5e0 <sys_init_timing+0x84>)
  40c570:	4798      	blx	r3
  40c572:	4604      	mov	r4, r0
  40c574:	4b1a      	ldr	r3, [pc, #104]	; (40c5e0 <sys_init_timing+0x84>)
  40c576:	4798      	blx	r3
  40c578:	4601      	mov	r1, r0
  40c57a:	463b      	mov	r3, r7
  40c57c:	1d3a      	adds	r2, r7, #4
  40c57e:	9100      	str	r1, [sp, #0]
  40c580:	4621      	mov	r1, r4
  40c582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40c586:	4c17      	ldr	r4, [pc, #92]	; (40c5e4 <sys_init_timing+0x88>)
  40c588:	47a0      	blx	r4
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40c58a:	683b      	ldr	r3, [r7, #0]
  40c58c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40c590:	461a      	mov	r2, r3
  40c592:	2100      	movs	r1, #0
  40c594:	4814      	ldr	r0, [pc, #80]	; (40c5e8 <sys_init_timing+0x8c>)
  40c596:	4b15      	ldr	r3, [pc, #84]	; (40c5ec <sys_init_timing+0x90>)
  40c598:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  40c59a:	4b11      	ldr	r3, [pc, #68]	; (40c5e0 <sys_init_timing+0x84>)
  40c59c:	4798      	blx	r3
  40c59e:	4602      	mov	r2, r0
  40c5a0:	687b      	ldr	r3, [r7, #4]
  40c5a2:	fbb2 f3f3 	udiv	r3, r2, r3
  40c5a6:	4a12      	ldr	r2, [pc, #72]	; (40c5f0 <sys_init_timing+0x94>)
  40c5a8:	fba2 2303 	umull	r2, r3, r2, r3
  40c5ac:	099b      	lsrs	r3, r3, #6
  40c5ae:	461a      	mov	r2, r3
  40c5b0:	2100      	movs	r1, #0
  40c5b2:	480d      	ldr	r0, [pc, #52]	; (40c5e8 <sys_init_timing+0x8c>)
  40c5b4:	4b0f      	ldr	r3, [pc, #60]	; (40c5f4 <sys_init_timing+0x98>)
  40c5b6:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
  40c5b8:	2017      	movs	r0, #23
  40c5ba:	4b0f      	ldr	r3, [pc, #60]	; (40c5f8 <sys_init_timing+0x9c>)
  40c5bc:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40c5be:	2210      	movs	r2, #16
  40c5c0:	2100      	movs	r1, #0
  40c5c2:	4809      	ldr	r0, [pc, #36]	; (40c5e8 <sys_init_timing+0x8c>)
  40c5c4:	4b0d      	ldr	r3, [pc, #52]	; (40c5fc <sys_init_timing+0xa0>)
  40c5c6:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  40c5c8:	2100      	movs	r1, #0
  40c5ca:	4807      	ldr	r0, [pc, #28]	; (40c5e8 <sys_init_timing+0x8c>)
  40c5cc:	4b0c      	ldr	r3, [pc, #48]	; (40c600 <sys_init_timing+0xa4>)
  40c5ce:	4798      	blx	r3
}
  40c5d0:	bf00      	nop
  40c5d2:	370c      	adds	r7, #12
  40c5d4:	46bd      	mov	sp, r7
  40c5d6:	bd90      	pop	{r4, r7, pc}
  40c5d8:	20403378 	.word	0x20403378
  40c5dc:	00401935 	.word	0x00401935
  40c5e0:	0040c511 	.word	0x0040c511
  40c5e4:	00401a1b 	.word	0x00401a1b
  40c5e8:	4000c000 	.word	0x4000c000
  40c5ec:	00401971 	.word	0x00401971
  40c5f0:	10624dd3 	.word	0x10624dd3
  40c5f4:	004019cd 	.word	0x004019cd
  40c5f8:	0040c469 	.word	0x0040c469
  40c5fc:	004019f3 	.word	0x004019f3
  40c600:	004019ab 	.word	0x004019ab

0040c604 <sys_get_ms>:

/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
  40c604:	b480      	push	{r7}
  40c606:	af00      	add	r7, sp, #0
	return gs_ul_clk_tick;
  40c608:	4b03      	ldr	r3, [pc, #12]	; (40c618 <sys_get_ms+0x14>)
  40c60a:	681b      	ldr	r3, [r3, #0]
}
  40c60c:	4618      	mov	r0, r3
  40c60e:	46bd      	mov	sp, r7
  40c610:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c614:	4770      	bx	lr
  40c616:	bf00      	nop
  40c618:	20403378 	.word	0x20403378

0040c61c <sys_now>:

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
  40c61c:	b580      	push	{r7, lr}
  40c61e:	af00      	add	r7, sp, #0
	return (sys_get_ms());
  40c620:	4b02      	ldr	r3, [pc, #8]	; (40c62c <sys_now+0x10>)
  40c622:	4798      	blx	r3
  40c624:	4603      	mov	r3, r0
}
  40c626:	4618      	mov	r0, r3
  40c628:	bd80      	pop	{r7, pc}
  40c62a:	bf00      	nop
  40c62c:	0040c605 	.word	0x0040c605

0040c630 <ioport_set_pin_level>:
{
  40c630:	b480      	push	{r7}
  40c632:	b08b      	sub	sp, #44	; 0x2c
  40c634:	af00      	add	r7, sp, #0
  40c636:	6078      	str	r0, [r7, #4]
  40c638:	460b      	mov	r3, r1
  40c63a:	70fb      	strb	r3, [r7, #3]
  40c63c:	687b      	ldr	r3, [r7, #4]
  40c63e:	627b      	str	r3, [r7, #36]	; 0x24
  40c640:	78fb      	ldrb	r3, [r7, #3]
  40c642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c648:	61fb      	str	r3, [r7, #28]
  40c64a:	69fb      	ldr	r3, [r7, #28]
  40c64c:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  40c64e:	69bb      	ldr	r3, [r7, #24]
  40c650:	095b      	lsrs	r3, r3, #5
  40c652:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40c654:	697a      	ldr	r2, [r7, #20]
  40c656:	4b10      	ldr	r3, [pc, #64]	; (40c698 <ioport_set_pin_level+0x68>)
  40c658:	4413      	add	r3, r2
  40c65a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40c65c:	613b      	str	r3, [r7, #16]
	if (level) {
  40c65e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40c662:	2b00      	cmp	r3, #0
  40c664:	d009      	beq.n	40c67a <ioport_set_pin_level+0x4a>
  40c666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c668:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  40c66a:	68fb      	ldr	r3, [r7, #12]
  40c66c:	f003 031f 	and.w	r3, r3, #31
  40c670:	2201      	movs	r2, #1
  40c672:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40c674:	693b      	ldr	r3, [r7, #16]
  40c676:	631a      	str	r2, [r3, #48]	; 0x30
}
  40c678:	e008      	b.n	40c68c <ioport_set_pin_level+0x5c>
  40c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40c67c:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  40c67e:	68bb      	ldr	r3, [r7, #8]
  40c680:	f003 031f 	and.w	r3, r3, #31
  40c684:	2201      	movs	r2, #1
  40c686:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40c688:	693b      	ldr	r3, [r7, #16]
  40c68a:	635a      	str	r2, [r3, #52]	; 0x34
  40c68c:	bf00      	nop
  40c68e:	372c      	adds	r7, #44	; 0x2c
  40c690:	46bd      	mov	sp, r7
  40c692:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c696:	4770      	bx	lr
  40c698:	00200707 	.word	0x00200707

0040c69c <client_connected>:
   tcp_recv(pcb, NULL);
   tcp_close(pcb);
}

static err_t client_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  40c69c:	b590      	push	{r4, r7, lr}
  40c69e:	b087      	sub	sp, #28
  40c6a0:	af00      	add	r7, sp, #0
  40c6a2:	60f8      	str	r0, [r7, #12]
  40c6a4:	60b9      	str	r1, [r7, #8]
  40c6a6:	4613      	mov	r3, r2
  40c6a8:	71fb      	strb	r3, [r7, #7]
   LWIP_UNUSED_ARG(arg);
   
   connectedToWorkstation = true;
  40c6aa:	4b15      	ldr	r3, [pc, #84]	; (40c700 <client_connected+0x64>)
  40c6ac:	2201      	movs	r2, #1
  40c6ae:	701a      	strb	r2, [r3, #0]
   
   tcp_sent(pcb, client_sent);
  40c6b0:	4914      	ldr	r1, [pc, #80]	; (40c704 <client_connected+0x68>)
  40c6b2:	68b8      	ldr	r0, [r7, #8]
  40c6b4:	4b14      	ldr	r3, [pc, #80]	; (40c708 <client_connected+0x6c>)
  40c6b6:	4798      	blx	r3
   tcp_recv(pcb, client_recv);
  40c6b8:	4914      	ldr	r1, [pc, #80]	; (40c70c <client_connected+0x70>)
  40c6ba:	68b8      	ldr	r0, [r7, #8]
  40c6bc:	4b14      	ldr	r3, [pc, #80]	; (40c710 <client_connected+0x74>)
  40c6be:	4798      	blx	r3
   tcp_poll(pcb, client_poll, 4);
  40c6c0:	2204      	movs	r2, #4
  40c6c2:	4914      	ldr	r1, [pc, #80]	; (40c714 <client_connected+0x78>)
  40c6c4:	68b8      	ldr	r0, [r7, #8]
  40c6c6:	4b14      	ldr	r3, [pc, #80]	; (40c718 <client_connected+0x7c>)
  40c6c8:	4798      	blx	r3
   tcp_err(pcb, client_err);
  40c6ca:	4914      	ldr	r1, [pc, #80]	; (40c71c <client_connected+0x80>)
  40c6cc:	68b8      	ldr	r0, [r7, #8]
  40c6ce:	4b14      	ldr	r3, [pc, #80]	; (40c720 <client_connected+0x84>)
  40c6d0:	4798      	blx	r3
   
	char *string = "Hello";
  40c6d2:	4b14      	ldr	r3, [pc, #80]	; (40c724 <client_connected+0x88>)
  40c6d4:	617b      	str	r3, [r7, #20]
	tcp_sent(pcb, client_sent);
  40c6d6:	490b      	ldr	r1, [pc, #44]	; (40c704 <client_connected+0x68>)
  40c6d8:	68b8      	ldr	r0, [r7, #8]
  40c6da:	4b0b      	ldr	r3, [pc, #44]	; (40c708 <client_connected+0x6c>)
  40c6dc:	4798      	blx	r3
	tcp_write(pcb, string, strlen(string), 0);
  40c6de:	6978      	ldr	r0, [r7, #20]
  40c6e0:	4b11      	ldr	r3, [pc, #68]	; (40c728 <client_connected+0x8c>)
  40c6e2:	4798      	blx	r3
  40c6e4:	4603      	mov	r3, r0
  40c6e6:	b29a      	uxth	r2, r3
  40c6e8:	2300      	movs	r3, #0
  40c6ea:	6979      	ldr	r1, [r7, #20]
  40c6ec:	68b8      	ldr	r0, [r7, #8]
  40c6ee:	4c0f      	ldr	r4, [pc, #60]	; (40c72c <client_connected+0x90>)
  40c6f0:	47a0      	blx	r4

	
   return err;
  40c6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  40c6f6:	4618      	mov	r0, r3
  40c6f8:	371c      	adds	r7, #28
  40c6fa:	46bd      	mov	sp, r7
  40c6fc:	bd90      	pop	{r4, r7, pc}
  40c6fe:	bf00      	nop
  40c700:	2040337c 	.word	0x2040337c
  40c704:	0040c731 	.word	0x0040c731
  40c708:	00406dc7 	.word	0x00406dc7
  40c70c:	0040c74d 	.word	0x0040c74d
  40c710:	00406da9 	.word	0x00406da9
  40c714:	0040c815 	.word	0x0040c815
  40c718:	00406e01 	.word	0x00406e01
  40c71c:	0040c83d 	.word	0x0040c83d
  40c720:	00406de3 	.word	0x00406de3
  40c724:	0040ce1c 	.word	0x0040ce1c
  40c728:	0040cbc1 	.word	0x0040cbc1
  40c72c:	004093e5 	.word	0x004093e5

0040c730 <client_sent>:

static err_t client_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  40c730:	b480      	push	{r7}
  40c732:	b085      	sub	sp, #20
  40c734:	af00      	add	r7, sp, #0
  40c736:	60f8      	str	r0, [r7, #12]
  40c738:	60b9      	str	r1, [r7, #8]
  40c73a:	4613      	mov	r3, r2
  40c73c:	80fb      	strh	r3, [r7, #6]
	LWIP_UNUSED_ARG(arg);

	return ERR_OK;
  40c73e:	2300      	movs	r3, #0
}
  40c740:	4618      	mov	r0, r3
  40c742:	3714      	adds	r7, #20
  40c744:	46bd      	mov	sp, r7
  40c746:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c74a:	4770      	bx	lr

0040c74c <client_recv>:

static err_t client_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  40c74c:	b580      	push	{r7, lr}
  40c74e:	b086      	sub	sp, #24
  40c750:	af00      	add	r7, sp, #0
  40c752:	60f8      	str	r0, [r7, #12]
  40c754:	60b9      	str	r1, [r7, #8]
  40c756:	607a      	str	r2, [r7, #4]
  40c758:	70fb      	strb	r3, [r7, #3]
	char *string;
	int lenght;
	LWIP_UNUSED_ARG(arg);

	if (err == ERR_OK && p != NULL)
  40c75a:	f997 3003 	ldrsb.w	r3, [r7, #3]
  40c75e:	2b00      	cmp	r3, #0
  40c760:	d13d      	bne.n	40c7de <client_recv+0x92>
  40c762:	687b      	ldr	r3, [r7, #4]
  40c764:	2b00      	cmp	r3, #0
  40c766:	d03a      	beq.n	40c7de <client_recv+0x92>
	{
		tcp_recved(pcb, p->tot_len);
  40c768:	687b      	ldr	r3, [r7, #4]
  40c76a:	891b      	ldrh	r3, [r3, #8]
  40c76c:	4619      	mov	r1, r3
  40c76e:	68b8      	ldr	r0, [r7, #8]
  40c770:	4b1f      	ldr	r3, [pc, #124]	; (40c7f0 <client_recv+0xa4>)
  40c772:	4798      	blx	r3

		string = p->payload;
  40c774:	687b      	ldr	r3, [r7, #4]
  40c776:	685b      	ldr	r3, [r3, #4]
  40c778:	617b      	str	r3, [r7, #20]
		lenght = strlen(string);
  40c77a:	6978      	ldr	r0, [r7, #20]
  40c77c:	4b1d      	ldr	r3, [pc, #116]	; (40c7f4 <client_recv+0xa8>)
  40c77e:	4798      	blx	r3
  40c780:	4603      	mov	r3, r0
  40c782:	613b      	str	r3, [r7, #16]
		
		if(compareString(string, "On", strlen("On")) || compareString(string, "on", strlen("on")))
  40c784:	2202      	movs	r2, #2
  40c786:	491c      	ldr	r1, [pc, #112]	; (40c7f8 <client_recv+0xac>)
  40c788:	6978      	ldr	r0, [r7, #20]
  40c78a:	4b1c      	ldr	r3, [pc, #112]	; (40c7fc <client_recv+0xb0>)
  40c78c:	4798      	blx	r3
  40c78e:	4603      	mov	r3, r0
  40c790:	2b00      	cmp	r3, #0
  40c792:	d107      	bne.n	40c7a4 <client_recv+0x58>
  40c794:	2202      	movs	r2, #2
  40c796:	491a      	ldr	r1, [pc, #104]	; (40c800 <client_recv+0xb4>)
  40c798:	6978      	ldr	r0, [r7, #20]
  40c79a:	4b18      	ldr	r3, [pc, #96]	; (40c7fc <client_recv+0xb0>)
  40c79c:	4798      	blx	r3
  40c79e:	4603      	mov	r3, r0
  40c7a0:	2b00      	cmp	r3, #0
  40c7a2:	d004      	beq.n	40c7ae <client_recv+0x62>
		{
			LED_On(LED0);
  40c7a4:	2100      	movs	r1, #0
  40c7a6:	2048      	movs	r0, #72	; 0x48
  40c7a8:	4b16      	ldr	r3, [pc, #88]	; (40c804 <client_recv+0xb8>)
  40c7aa:	4798      	blx	r3
  40c7ac:	e013      	b.n	40c7d6 <client_recv+0x8a>
		}
		else if (compareString(string, "Off", strlen("Off")) || compareString(string, "off", strlen("off")))	
  40c7ae:	2203      	movs	r2, #3
  40c7b0:	4915      	ldr	r1, [pc, #84]	; (40c808 <client_recv+0xbc>)
  40c7b2:	6978      	ldr	r0, [r7, #20]
  40c7b4:	4b11      	ldr	r3, [pc, #68]	; (40c7fc <client_recv+0xb0>)
  40c7b6:	4798      	blx	r3
  40c7b8:	4603      	mov	r3, r0
  40c7ba:	2b00      	cmp	r3, #0
  40c7bc:	d107      	bne.n	40c7ce <client_recv+0x82>
  40c7be:	2203      	movs	r2, #3
  40c7c0:	4912      	ldr	r1, [pc, #72]	; (40c80c <client_recv+0xc0>)
  40c7c2:	6978      	ldr	r0, [r7, #20]
  40c7c4:	4b0d      	ldr	r3, [pc, #52]	; (40c7fc <client_recv+0xb0>)
  40c7c6:	4798      	blx	r3
  40c7c8:	4603      	mov	r3, r0
  40c7ca:	2b00      	cmp	r3, #0
  40c7cc:	d003      	beq.n	40c7d6 <client_recv+0x8a>
		{
			LED_Off(LED0);
  40c7ce:	2101      	movs	r1, #1
  40c7d0:	2048      	movs	r0, #72	; 0x48
  40c7d2:	4b0c      	ldr	r3, [pc, #48]	; (40c804 <client_recv+0xb8>)
  40c7d4:	4798      	blx	r3
		}
			


		pbuf_free(p);
  40c7d6:	6878      	ldr	r0, [r7, #4]
  40c7d8:	4b0d      	ldr	r3, [pc, #52]	; (40c810 <client_recv+0xc4>)
  40c7da:	4798      	blx	r3
  40c7dc:	e002      	b.n	40c7e4 <client_recv+0x98>
	}
	else
	{
		pbuf_free(p);
  40c7de:	6878      	ldr	r0, [r7, #4]
  40c7e0:	4b0b      	ldr	r3, [pc, #44]	; (40c810 <client_recv+0xc4>)
  40c7e2:	4798      	blx	r3
	}

	return ERR_OK;
  40c7e4:	2300      	movs	r3, #0
}
  40c7e6:	4618      	mov	r0, r3
  40c7e8:	3718      	adds	r7, #24
  40c7ea:	46bd      	mov	sp, r7
  40c7ec:	bd80      	pop	{r7, pc}
  40c7ee:	bf00      	nop
  40c7f0:	004061a5 	.word	0x004061a5
  40c7f4:	0040cbc1 	.word	0x0040cbc1
  40c7f8:	0040ce24 	.word	0x0040ce24
  40c7fc:	0040c857 	.word	0x0040c857
  40c800:	0040ce28 	.word	0x0040ce28
  40c804:	0040c631 	.word	0x0040c631
  40c808:	0040ce2c 	.word	0x0040ce2c
  40c80c:	0040ce30 	.word	0x0040ce30
  40c810:	00405a01 	.word	0x00405a01

0040c814 <client_poll>:

static err_t client_poll(void *arg, struct tcp_pcb *pcb)
{
  40c814:	b480      	push	{r7}
  40c816:	b083      	sub	sp, #12
  40c818:	af00      	add	r7, sp, #0
  40c81a:	6078      	str	r0, [r7, #4]
  40c81c:	6039      	str	r1, [r7, #0]
	static int counter = 1;
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);

	counter++;
  40c81e:	4b06      	ldr	r3, [pc, #24]	; (40c838 <client_poll+0x24>)
  40c820:	681b      	ldr	r3, [r3, #0]
  40c822:	3301      	adds	r3, #1
  40c824:	4a04      	ldr	r2, [pc, #16]	; (40c838 <client_poll+0x24>)
  40c826:	6013      	str	r3, [r2, #0]

	return ERR_OK;
  40c828:	2300      	movs	r3, #0
}
  40c82a:	4618      	mov	r0, r3
  40c82c:	370c      	adds	r7, #12
  40c82e:	46bd      	mov	sp, r7
  40c830:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c834:	4770      	bx	lr
  40c836:	bf00      	nop
  40c838:	2040006c 	.word	0x2040006c

0040c83c <client_err>:

static err_t client_err(void *arg, err_t err)
{
  40c83c:	b480      	push	{r7}
  40c83e:	b083      	sub	sp, #12
  40c840:	af00      	add	r7, sp, #0
  40c842:	6078      	str	r0, [r7, #4]
  40c844:	460b      	mov	r3, r1
  40c846:	70fb      	strb	r3, [r7, #3]
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	return ERR_OK;
  40c848:	2300      	movs	r3, #0
}
  40c84a:	4618      	mov	r0, r3
  40c84c:	370c      	adds	r7, #12
  40c84e:	46bd      	mov	sp, r7
  40c850:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c854:	4770      	bx	lr

0040c856 <compareString>:

static bool compareString(char *string1, char *string2, int string2Len)
{
  40c856:	b480      	push	{r7}
  40c858:	b087      	sub	sp, #28
  40c85a:	af00      	add	r7, sp, #0
  40c85c:	60f8      	str	r0, [r7, #12]
  40c85e:	60b9      	str	r1, [r7, #8]
  40c860:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < string2Len; i++)
  40c862:	2300      	movs	r3, #0
  40c864:	617b      	str	r3, [r7, #20]
  40c866:	e00e      	b.n	40c886 <compareString+0x30>
		if(string1[i] != string2[i])
  40c868:	697b      	ldr	r3, [r7, #20]
  40c86a:	68fa      	ldr	r2, [r7, #12]
  40c86c:	4413      	add	r3, r2
  40c86e:	781a      	ldrb	r2, [r3, #0]
  40c870:	697b      	ldr	r3, [r7, #20]
  40c872:	68b9      	ldr	r1, [r7, #8]
  40c874:	440b      	add	r3, r1
  40c876:	781b      	ldrb	r3, [r3, #0]
  40c878:	429a      	cmp	r2, r3
  40c87a:	d001      	beq.n	40c880 <compareString+0x2a>
		return false;
  40c87c:	2300      	movs	r3, #0
  40c87e:	e007      	b.n	40c890 <compareString+0x3a>
	for(int i = 0; i < string2Len; i++)
  40c880:	697b      	ldr	r3, [r7, #20]
  40c882:	3301      	adds	r3, #1
  40c884:	617b      	str	r3, [r7, #20]
  40c886:	697a      	ldr	r2, [r7, #20]
  40c888:	687b      	ldr	r3, [r7, #4]
  40c88a:	429a      	cmp	r2, r3
  40c88c:	dbec      	blt.n	40c868 <compareString+0x12>
		
	return true;
  40c88e:	2301      	movs	r3, #1
}
  40c890:	4618      	mov	r0, r3
  40c892:	371c      	adds	r7, #28
  40c894:	46bd      	mov	sp, r7
  40c896:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c89a:	4770      	bx	lr

0040c89c <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  40c89c:	b590      	push	{r4, r7, lr}
  40c89e:	b085      	sub	sp, #20
  40c8a0:	af00      	add	r7, sp, #0
	/* Initialize the SAM system. */
	sysclk_init();
  40c8a2:	4b1b      	ldr	r3, [pc, #108]	; (40c910 <main+0x74>)
  40c8a4:	4798      	blx	r3
	board_init();
  40c8a6:	4b1b      	ldr	r3, [pc, #108]	; (40c914 <main+0x78>)
  40c8a8:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  40c8aa:	4b1b      	ldr	r3, [pc, #108]	; (40c918 <main+0x7c>)
  40c8ac:	4798      	blx	r3

	//while node doesn't have an IP
	bool connectedIP = false;
  40c8ae:	2300      	movs	r3, #0
  40c8b0:	73fb      	strb	r3, [r7, #15]
	while (!connectedIP) {
  40c8b2:	e003      	b.n	40c8bc <main+0x20>
		/* Check for input packet and process it. */
		connectedIP = ethernet_task();
  40c8b4:	4b19      	ldr	r3, [pc, #100]	; (40c91c <main+0x80>)
  40c8b6:	4798      	blx	r3
  40c8b8:	4603      	mov	r3, r0
  40c8ba:	73fb      	strb	r3, [r7, #15]
	while (!connectedIP) {
  40c8bc:	7bfb      	ldrb	r3, [r7, #15]
  40c8be:	f083 0301 	eor.w	r3, r3, #1
  40c8c2:	b2db      	uxtb	r3, r3
  40c8c4:	2b00      	cmp	r3, #0
  40c8c6:	d1f5      	bne.n	40c8b4 <main+0x18>
	}
	
	//sets up new TCP 
	struct tcp_pcb *pcb;
	struct ip_addr dest;
	IP4_ADDR(&dest, workstationIP[0], workstationIP[1], workstationIP[2], workstationIP[3]);
  40c8c8:	4b15      	ldr	r3, [pc, #84]	; (40c920 <main+0x84>)
  40c8ca:	68db      	ldr	r3, [r3, #12]
  40c8cc:	061a      	lsls	r2, r3, #24
  40c8ce:	4b14      	ldr	r3, [pc, #80]	; (40c920 <main+0x84>)
  40c8d0:	689b      	ldr	r3, [r3, #8]
  40c8d2:	041b      	lsls	r3, r3, #16
  40c8d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40c8d8:	431a      	orrs	r2, r3
  40c8da:	4b11      	ldr	r3, [pc, #68]	; (40c920 <main+0x84>)
  40c8dc:	685b      	ldr	r3, [r3, #4]
  40c8de:	021b      	lsls	r3, r3, #8
  40c8e0:	b29b      	uxth	r3, r3
  40c8e2:	431a      	orrs	r2, r3
  40c8e4:	4b0e      	ldr	r3, [pc, #56]	; (40c920 <main+0x84>)
  40c8e6:	681b      	ldr	r3, [r3, #0]
  40c8e8:	b2db      	uxtb	r3, r3
  40c8ea:	4313      	orrs	r3, r2
  40c8ec:	607b      	str	r3, [r7, #4]
	pcb = tcp_new();
  40c8ee:	4b0d      	ldr	r3, [pc, #52]	; (40c924 <main+0x88>)
  40c8f0:	4798      	blx	r3
  40c8f2:	60b8      	str	r0, [r7, #8]
	tcp_arg(pcb, NULL);
  40c8f4:	2100      	movs	r1, #0
  40c8f6:	68b8      	ldr	r0, [r7, #8]
  40c8f8:	4b0b      	ldr	r3, [pc, #44]	; (40c928 <main+0x8c>)
  40c8fa:	4798      	blx	r3
	tcp_connect(pcb, &dest, 8000, client_connected); //server port for incoming connection
  40c8fc:	1d39      	adds	r1, r7, #4
  40c8fe:	4b0b      	ldr	r3, [pc, #44]	; (40c92c <main+0x90>)
  40c900:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  40c904:	68b8      	ldr	r0, [r7, #8]
  40c906:	4c0a      	ldr	r4, [pc, #40]	; (40c930 <main+0x94>)
  40c908:	47a0      	blx	r4

	while(1)
	{
		ethernet_task();
  40c90a:	4b04      	ldr	r3, [pc, #16]	; (40c91c <main+0x80>)
  40c90c:	4798      	blx	r3
  40c90e:	e7fc      	b.n	40c90a <main+0x6e>
  40c910:	004004d5 	.word	0x004004d5
  40c914:	00400909 	.word	0x00400909
  40c918:	0040c41d 	.word	0x0040c41d
  40c91c:	0040c43d 	.word	0x0040c43d
  40c920:	2040005c 	.word	0x2040005c
  40c924:	00406d79 	.word	0x00406d79
  40c928:	00406d8d 	.word	0x00406d8d
  40c92c:	0040c69d 	.word	0x0040c69d
  40c930:	00406295 	.word	0x00406295

0040c934 <__libc_init_array>:
  40c934:	b570      	push	{r4, r5, r6, lr}
  40c936:	4e0f      	ldr	r6, [pc, #60]	; (40c974 <__libc_init_array+0x40>)
  40c938:	4d0f      	ldr	r5, [pc, #60]	; (40c978 <__libc_init_array+0x44>)
  40c93a:	1b76      	subs	r6, r6, r5
  40c93c:	10b6      	asrs	r6, r6, #2
  40c93e:	bf18      	it	ne
  40c940:	2400      	movne	r4, #0
  40c942:	d005      	beq.n	40c950 <__libc_init_array+0x1c>
  40c944:	3401      	adds	r4, #1
  40c946:	f855 3b04 	ldr.w	r3, [r5], #4
  40c94a:	4798      	blx	r3
  40c94c:	42a6      	cmp	r6, r4
  40c94e:	d1f9      	bne.n	40c944 <__libc_init_array+0x10>
  40c950:	4e0a      	ldr	r6, [pc, #40]	; (40c97c <__libc_init_array+0x48>)
  40c952:	4d0b      	ldr	r5, [pc, #44]	; (40c980 <__libc_init_array+0x4c>)
  40c954:	1b76      	subs	r6, r6, r5
  40c956:	f000 fa6f 	bl	40ce38 <_init>
  40c95a:	10b6      	asrs	r6, r6, #2
  40c95c:	bf18      	it	ne
  40c95e:	2400      	movne	r4, #0
  40c960:	d006      	beq.n	40c970 <__libc_init_array+0x3c>
  40c962:	3401      	adds	r4, #1
  40c964:	f855 3b04 	ldr.w	r3, [r5], #4
  40c968:	4798      	blx	r3
  40c96a:	42a6      	cmp	r6, r4
  40c96c:	d1f9      	bne.n	40c962 <__libc_init_array+0x2e>
  40c96e:	bd70      	pop	{r4, r5, r6, pc}
  40c970:	bd70      	pop	{r4, r5, r6, pc}
  40c972:	bf00      	nop
  40c974:	0040ce44 	.word	0x0040ce44
  40c978:	0040ce44 	.word	0x0040ce44
  40c97c:	0040ce4c 	.word	0x0040ce4c
  40c980:	0040ce44 	.word	0x0040ce44

0040c984 <memcmp>:
  40c984:	2a03      	cmp	r2, #3
  40c986:	b470      	push	{r4, r5, r6}
  40c988:	d922      	bls.n	40c9d0 <memcmp+0x4c>
  40c98a:	ea40 0301 	orr.w	r3, r0, r1
  40c98e:	079b      	lsls	r3, r3, #30
  40c990:	d011      	beq.n	40c9b6 <memcmp+0x32>
  40c992:	7803      	ldrb	r3, [r0, #0]
  40c994:	780c      	ldrb	r4, [r1, #0]
  40c996:	42a3      	cmp	r3, r4
  40c998:	d11d      	bne.n	40c9d6 <memcmp+0x52>
  40c99a:	440a      	add	r2, r1
  40c99c:	3101      	adds	r1, #1
  40c99e:	e005      	b.n	40c9ac <memcmp+0x28>
  40c9a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40c9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
  40c9a8:	42a3      	cmp	r3, r4
  40c9aa:	d114      	bne.n	40c9d6 <memcmp+0x52>
  40c9ac:	4291      	cmp	r1, r2
  40c9ae:	d1f7      	bne.n	40c9a0 <memcmp+0x1c>
  40c9b0:	2000      	movs	r0, #0
  40c9b2:	bc70      	pop	{r4, r5, r6}
  40c9b4:	4770      	bx	lr
  40c9b6:	680d      	ldr	r5, [r1, #0]
  40c9b8:	6806      	ldr	r6, [r0, #0]
  40c9ba:	42ae      	cmp	r6, r5
  40c9bc:	460c      	mov	r4, r1
  40c9be:	4603      	mov	r3, r0
  40c9c0:	f101 0104 	add.w	r1, r1, #4
  40c9c4:	f100 0004 	add.w	r0, r0, #4
  40c9c8:	d108      	bne.n	40c9dc <memcmp+0x58>
  40c9ca:	3a04      	subs	r2, #4
  40c9cc:	2a03      	cmp	r2, #3
  40c9ce:	d8f2      	bhi.n	40c9b6 <memcmp+0x32>
  40c9d0:	2a00      	cmp	r2, #0
  40c9d2:	d1de      	bne.n	40c992 <memcmp+0xe>
  40c9d4:	e7ec      	b.n	40c9b0 <memcmp+0x2c>
  40c9d6:	1b18      	subs	r0, r3, r4
  40c9d8:	bc70      	pop	{r4, r5, r6}
  40c9da:	4770      	bx	lr
  40c9dc:	4621      	mov	r1, r4
  40c9de:	4618      	mov	r0, r3
  40c9e0:	e7d7      	b.n	40c992 <memcmp+0xe>
  40c9e2:	bf00      	nop

0040c9e4 <memcpy>:
  40c9e4:	4684      	mov	ip, r0
  40c9e6:	ea41 0300 	orr.w	r3, r1, r0
  40c9ea:	f013 0303 	ands.w	r3, r3, #3
  40c9ee:	d16d      	bne.n	40cacc <memcpy+0xe8>
  40c9f0:	3a40      	subs	r2, #64	; 0x40
  40c9f2:	d341      	bcc.n	40ca78 <memcpy+0x94>
  40c9f4:	f851 3b04 	ldr.w	r3, [r1], #4
  40c9f8:	f840 3b04 	str.w	r3, [r0], #4
  40c9fc:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca00:	f840 3b04 	str.w	r3, [r0], #4
  40ca04:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca08:	f840 3b04 	str.w	r3, [r0], #4
  40ca0c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca10:	f840 3b04 	str.w	r3, [r0], #4
  40ca14:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca18:	f840 3b04 	str.w	r3, [r0], #4
  40ca1c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca20:	f840 3b04 	str.w	r3, [r0], #4
  40ca24:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca28:	f840 3b04 	str.w	r3, [r0], #4
  40ca2c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca30:	f840 3b04 	str.w	r3, [r0], #4
  40ca34:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca38:	f840 3b04 	str.w	r3, [r0], #4
  40ca3c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca40:	f840 3b04 	str.w	r3, [r0], #4
  40ca44:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca48:	f840 3b04 	str.w	r3, [r0], #4
  40ca4c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca50:	f840 3b04 	str.w	r3, [r0], #4
  40ca54:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca58:	f840 3b04 	str.w	r3, [r0], #4
  40ca5c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca60:	f840 3b04 	str.w	r3, [r0], #4
  40ca64:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca68:	f840 3b04 	str.w	r3, [r0], #4
  40ca6c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca70:	f840 3b04 	str.w	r3, [r0], #4
  40ca74:	3a40      	subs	r2, #64	; 0x40
  40ca76:	d2bd      	bcs.n	40c9f4 <memcpy+0x10>
  40ca78:	3230      	adds	r2, #48	; 0x30
  40ca7a:	d311      	bcc.n	40caa0 <memcpy+0xbc>
  40ca7c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca80:	f840 3b04 	str.w	r3, [r0], #4
  40ca84:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca88:	f840 3b04 	str.w	r3, [r0], #4
  40ca8c:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca90:	f840 3b04 	str.w	r3, [r0], #4
  40ca94:	f851 3b04 	ldr.w	r3, [r1], #4
  40ca98:	f840 3b04 	str.w	r3, [r0], #4
  40ca9c:	3a10      	subs	r2, #16
  40ca9e:	d2ed      	bcs.n	40ca7c <memcpy+0x98>
  40caa0:	320c      	adds	r2, #12
  40caa2:	d305      	bcc.n	40cab0 <memcpy+0xcc>
  40caa4:	f851 3b04 	ldr.w	r3, [r1], #4
  40caa8:	f840 3b04 	str.w	r3, [r0], #4
  40caac:	3a04      	subs	r2, #4
  40caae:	d2f9      	bcs.n	40caa4 <memcpy+0xc0>
  40cab0:	3204      	adds	r2, #4
  40cab2:	d008      	beq.n	40cac6 <memcpy+0xe2>
  40cab4:	07d2      	lsls	r2, r2, #31
  40cab6:	bf1c      	itt	ne
  40cab8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cabc:	f800 3b01 	strbne.w	r3, [r0], #1
  40cac0:	d301      	bcc.n	40cac6 <memcpy+0xe2>
  40cac2:	880b      	ldrh	r3, [r1, #0]
  40cac4:	8003      	strh	r3, [r0, #0]
  40cac6:	4660      	mov	r0, ip
  40cac8:	4770      	bx	lr
  40caca:	bf00      	nop
  40cacc:	2a08      	cmp	r2, #8
  40cace:	d313      	bcc.n	40caf8 <memcpy+0x114>
  40cad0:	078b      	lsls	r3, r1, #30
  40cad2:	d08d      	beq.n	40c9f0 <memcpy+0xc>
  40cad4:	f010 0303 	ands.w	r3, r0, #3
  40cad8:	d08a      	beq.n	40c9f0 <memcpy+0xc>
  40cada:	f1c3 0304 	rsb	r3, r3, #4
  40cade:	1ad2      	subs	r2, r2, r3
  40cae0:	07db      	lsls	r3, r3, #31
  40cae2:	bf1c      	itt	ne
  40cae4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40cae8:	f800 3b01 	strbne.w	r3, [r0], #1
  40caec:	d380      	bcc.n	40c9f0 <memcpy+0xc>
  40caee:	f831 3b02 	ldrh.w	r3, [r1], #2
  40caf2:	f820 3b02 	strh.w	r3, [r0], #2
  40caf6:	e77b      	b.n	40c9f0 <memcpy+0xc>
  40caf8:	3a04      	subs	r2, #4
  40cafa:	d3d9      	bcc.n	40cab0 <memcpy+0xcc>
  40cafc:	3a01      	subs	r2, #1
  40cafe:	f811 3b01 	ldrb.w	r3, [r1], #1
  40cb02:	f800 3b01 	strb.w	r3, [r0], #1
  40cb06:	d2f9      	bcs.n	40cafc <memcpy+0x118>
  40cb08:	780b      	ldrb	r3, [r1, #0]
  40cb0a:	7003      	strb	r3, [r0, #0]
  40cb0c:	784b      	ldrb	r3, [r1, #1]
  40cb0e:	7043      	strb	r3, [r0, #1]
  40cb10:	788b      	ldrb	r3, [r1, #2]
  40cb12:	7083      	strb	r3, [r0, #2]
  40cb14:	4660      	mov	r0, ip
  40cb16:	4770      	bx	lr

0040cb18 <memset>:
  40cb18:	b470      	push	{r4, r5, r6}
  40cb1a:	0786      	lsls	r6, r0, #30
  40cb1c:	d046      	beq.n	40cbac <memset+0x94>
  40cb1e:	1e54      	subs	r4, r2, #1
  40cb20:	2a00      	cmp	r2, #0
  40cb22:	d041      	beq.n	40cba8 <memset+0x90>
  40cb24:	b2ca      	uxtb	r2, r1
  40cb26:	4603      	mov	r3, r0
  40cb28:	e002      	b.n	40cb30 <memset+0x18>
  40cb2a:	f114 34ff 	adds.w	r4, r4, #4294967295
  40cb2e:	d33b      	bcc.n	40cba8 <memset+0x90>
  40cb30:	f803 2b01 	strb.w	r2, [r3], #1
  40cb34:	079d      	lsls	r5, r3, #30
  40cb36:	d1f8      	bne.n	40cb2a <memset+0x12>
  40cb38:	2c03      	cmp	r4, #3
  40cb3a:	d92e      	bls.n	40cb9a <memset+0x82>
  40cb3c:	b2cd      	uxtb	r5, r1
  40cb3e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40cb42:	2c0f      	cmp	r4, #15
  40cb44:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40cb48:	d919      	bls.n	40cb7e <memset+0x66>
  40cb4a:	f103 0210 	add.w	r2, r3, #16
  40cb4e:	4626      	mov	r6, r4
  40cb50:	3e10      	subs	r6, #16
  40cb52:	2e0f      	cmp	r6, #15
  40cb54:	f842 5c10 	str.w	r5, [r2, #-16]
  40cb58:	f842 5c0c 	str.w	r5, [r2, #-12]
  40cb5c:	f842 5c08 	str.w	r5, [r2, #-8]
  40cb60:	f842 5c04 	str.w	r5, [r2, #-4]
  40cb64:	f102 0210 	add.w	r2, r2, #16
  40cb68:	d8f2      	bhi.n	40cb50 <memset+0x38>
  40cb6a:	f1a4 0210 	sub.w	r2, r4, #16
  40cb6e:	f022 020f 	bic.w	r2, r2, #15
  40cb72:	f004 040f 	and.w	r4, r4, #15
  40cb76:	3210      	adds	r2, #16
  40cb78:	2c03      	cmp	r4, #3
  40cb7a:	4413      	add	r3, r2
  40cb7c:	d90d      	bls.n	40cb9a <memset+0x82>
  40cb7e:	461e      	mov	r6, r3
  40cb80:	4622      	mov	r2, r4
  40cb82:	3a04      	subs	r2, #4
  40cb84:	2a03      	cmp	r2, #3
  40cb86:	f846 5b04 	str.w	r5, [r6], #4
  40cb8a:	d8fa      	bhi.n	40cb82 <memset+0x6a>
  40cb8c:	1f22      	subs	r2, r4, #4
  40cb8e:	f022 0203 	bic.w	r2, r2, #3
  40cb92:	3204      	adds	r2, #4
  40cb94:	4413      	add	r3, r2
  40cb96:	f004 0403 	and.w	r4, r4, #3
  40cb9a:	b12c      	cbz	r4, 40cba8 <memset+0x90>
  40cb9c:	b2c9      	uxtb	r1, r1
  40cb9e:	441c      	add	r4, r3
  40cba0:	f803 1b01 	strb.w	r1, [r3], #1
  40cba4:	429c      	cmp	r4, r3
  40cba6:	d1fb      	bne.n	40cba0 <memset+0x88>
  40cba8:	bc70      	pop	{r4, r5, r6}
  40cbaa:	4770      	bx	lr
  40cbac:	4614      	mov	r4, r2
  40cbae:	4603      	mov	r3, r0
  40cbb0:	e7c2      	b.n	40cb38 <memset+0x20>
  40cbb2:	bf00      	nop
	...

0040cbc0 <strlen>:
  40cbc0:	f890 f000 	pld	[r0]
  40cbc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40cbc8:	f020 0107 	bic.w	r1, r0, #7
  40cbcc:	f06f 0c00 	mvn.w	ip, #0
  40cbd0:	f010 0407 	ands.w	r4, r0, #7
  40cbd4:	f891 f020 	pld	[r1, #32]
  40cbd8:	f040 8049 	bne.w	40cc6e <strlen+0xae>
  40cbdc:	f04f 0400 	mov.w	r4, #0
  40cbe0:	f06f 0007 	mvn.w	r0, #7
  40cbe4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cbe8:	f891 f040 	pld	[r1, #64]	; 0x40
  40cbec:	f100 0008 	add.w	r0, r0, #8
  40cbf0:	fa82 f24c 	uadd8	r2, r2, ip
  40cbf4:	faa4 f28c 	sel	r2, r4, ip
  40cbf8:	fa83 f34c 	uadd8	r3, r3, ip
  40cbfc:	faa2 f38c 	sel	r3, r2, ip
  40cc00:	bb4b      	cbnz	r3, 40cc56 <strlen+0x96>
  40cc02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40cc06:	fa82 f24c 	uadd8	r2, r2, ip
  40cc0a:	f100 0008 	add.w	r0, r0, #8
  40cc0e:	faa4 f28c 	sel	r2, r4, ip
  40cc12:	fa83 f34c 	uadd8	r3, r3, ip
  40cc16:	faa2 f38c 	sel	r3, r2, ip
  40cc1a:	b9e3      	cbnz	r3, 40cc56 <strlen+0x96>
  40cc1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40cc20:	fa82 f24c 	uadd8	r2, r2, ip
  40cc24:	f100 0008 	add.w	r0, r0, #8
  40cc28:	faa4 f28c 	sel	r2, r4, ip
  40cc2c:	fa83 f34c 	uadd8	r3, r3, ip
  40cc30:	faa2 f38c 	sel	r3, r2, ip
  40cc34:	b97b      	cbnz	r3, 40cc56 <strlen+0x96>
  40cc36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40cc3a:	f101 0120 	add.w	r1, r1, #32
  40cc3e:	fa82 f24c 	uadd8	r2, r2, ip
  40cc42:	f100 0008 	add.w	r0, r0, #8
  40cc46:	faa4 f28c 	sel	r2, r4, ip
  40cc4a:	fa83 f34c 	uadd8	r3, r3, ip
  40cc4e:	faa2 f38c 	sel	r3, r2, ip
  40cc52:	2b00      	cmp	r3, #0
  40cc54:	d0c6      	beq.n	40cbe4 <strlen+0x24>
  40cc56:	2a00      	cmp	r2, #0
  40cc58:	bf04      	itt	eq
  40cc5a:	3004      	addeq	r0, #4
  40cc5c:	461a      	moveq	r2, r3
  40cc5e:	ba12      	rev	r2, r2
  40cc60:	fab2 f282 	clz	r2, r2
  40cc64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40cc68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40cc6c:	4770      	bx	lr
  40cc6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cc72:	f004 0503 	and.w	r5, r4, #3
  40cc76:	f1c4 0000 	rsb	r0, r4, #0
  40cc7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40cc7e:	f014 0f04 	tst.w	r4, #4
  40cc82:	f891 f040 	pld	[r1, #64]	; 0x40
  40cc86:	fa0c f505 	lsl.w	r5, ip, r5
  40cc8a:	ea62 0205 	orn	r2, r2, r5
  40cc8e:	bf1c      	itt	ne
  40cc90:	ea63 0305 	ornne	r3, r3, r5
  40cc94:	4662      	movne	r2, ip
  40cc96:	f04f 0400 	mov.w	r4, #0
  40cc9a:	e7a9      	b.n	40cbf0 <strlen+0x30>

0040cc9c <register_fini>:
  40cc9c:	4b02      	ldr	r3, [pc, #8]	; (40cca8 <register_fini+0xc>)
  40cc9e:	b113      	cbz	r3, 40cca6 <register_fini+0xa>
  40cca0:	4802      	ldr	r0, [pc, #8]	; (40ccac <register_fini+0x10>)
  40cca2:	f000 b805 	b.w	40ccb0 <atexit>
  40cca6:	4770      	bx	lr
  40cca8:	00000000 	.word	0x00000000
  40ccac:	0040ccbd 	.word	0x0040ccbd

0040ccb0 <atexit>:
  40ccb0:	2300      	movs	r3, #0
  40ccb2:	4601      	mov	r1, r0
  40ccb4:	461a      	mov	r2, r3
  40ccb6:	4618      	mov	r0, r3
  40ccb8:	f000 b81e 	b.w	40ccf8 <__register_exitproc>

0040ccbc <__libc_fini_array>:
  40ccbc:	b538      	push	{r3, r4, r5, lr}
  40ccbe:	4c0a      	ldr	r4, [pc, #40]	; (40cce8 <__libc_fini_array+0x2c>)
  40ccc0:	4d0a      	ldr	r5, [pc, #40]	; (40ccec <__libc_fini_array+0x30>)
  40ccc2:	1b64      	subs	r4, r4, r5
  40ccc4:	10a4      	asrs	r4, r4, #2
  40ccc6:	d00a      	beq.n	40ccde <__libc_fini_array+0x22>
  40ccc8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40cccc:	3b01      	subs	r3, #1
  40ccce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40ccd2:	3c01      	subs	r4, #1
  40ccd4:	f855 3904 	ldr.w	r3, [r5], #-4
  40ccd8:	4798      	blx	r3
  40ccda:	2c00      	cmp	r4, #0
  40ccdc:	d1f9      	bne.n	40ccd2 <__libc_fini_array+0x16>
  40ccde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40cce2:	f000 b8b3 	b.w	40ce4c <_fini>
  40cce6:	bf00      	nop
  40cce8:	0040ce5c 	.word	0x0040ce5c
  40ccec:	0040ce58 	.word	0x0040ce58

0040ccf0 <__retarget_lock_acquire_recursive>:
  40ccf0:	4770      	bx	lr
  40ccf2:	bf00      	nop

0040ccf4 <__retarget_lock_release_recursive>:
  40ccf4:	4770      	bx	lr
  40ccf6:	bf00      	nop

0040ccf8 <__register_exitproc>:
  40ccf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40ccfc:	4d2c      	ldr	r5, [pc, #176]	; (40cdb0 <__register_exitproc+0xb8>)
  40ccfe:	4606      	mov	r6, r0
  40cd00:	6828      	ldr	r0, [r5, #0]
  40cd02:	4698      	mov	r8, r3
  40cd04:	460f      	mov	r7, r1
  40cd06:	4691      	mov	r9, r2
  40cd08:	f7ff fff2 	bl	40ccf0 <__retarget_lock_acquire_recursive>
  40cd0c:	4b29      	ldr	r3, [pc, #164]	; (40cdb4 <__register_exitproc+0xbc>)
  40cd0e:	681c      	ldr	r4, [r3, #0]
  40cd10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40cd14:	2b00      	cmp	r3, #0
  40cd16:	d03e      	beq.n	40cd96 <__register_exitproc+0x9e>
  40cd18:	685a      	ldr	r2, [r3, #4]
  40cd1a:	2a1f      	cmp	r2, #31
  40cd1c:	dc1c      	bgt.n	40cd58 <__register_exitproc+0x60>
  40cd1e:	f102 0e01 	add.w	lr, r2, #1
  40cd22:	b176      	cbz	r6, 40cd42 <__register_exitproc+0x4a>
  40cd24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40cd28:	2401      	movs	r4, #1
  40cd2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40cd2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40cd32:	4094      	lsls	r4, r2
  40cd34:	4320      	orrs	r0, r4
  40cd36:	2e02      	cmp	r6, #2
  40cd38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40cd3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40cd40:	d023      	beq.n	40cd8a <__register_exitproc+0x92>
  40cd42:	3202      	adds	r2, #2
  40cd44:	f8c3 e004 	str.w	lr, [r3, #4]
  40cd48:	6828      	ldr	r0, [r5, #0]
  40cd4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40cd4e:	f7ff ffd1 	bl	40ccf4 <__retarget_lock_release_recursive>
  40cd52:	2000      	movs	r0, #0
  40cd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cd58:	4b17      	ldr	r3, [pc, #92]	; (40cdb8 <__register_exitproc+0xc0>)
  40cd5a:	b30b      	cbz	r3, 40cda0 <__register_exitproc+0xa8>
  40cd5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40cd60:	f3af 8000 	nop.w
  40cd64:	4603      	mov	r3, r0
  40cd66:	b1d8      	cbz	r0, 40cda0 <__register_exitproc+0xa8>
  40cd68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40cd6c:	6002      	str	r2, [r0, #0]
  40cd6e:	2100      	movs	r1, #0
  40cd70:	6041      	str	r1, [r0, #4]
  40cd72:	460a      	mov	r2, r1
  40cd74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40cd78:	f04f 0e01 	mov.w	lr, #1
  40cd7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40cd80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40cd84:	2e00      	cmp	r6, #0
  40cd86:	d0dc      	beq.n	40cd42 <__register_exitproc+0x4a>
  40cd88:	e7cc      	b.n	40cd24 <__register_exitproc+0x2c>
  40cd8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40cd8e:	430c      	orrs	r4, r1
  40cd90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40cd94:	e7d5      	b.n	40cd42 <__register_exitproc+0x4a>
  40cd96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40cd9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40cd9e:	e7bb      	b.n	40cd18 <__register_exitproc+0x20>
  40cda0:	6828      	ldr	r0, [r5, #0]
  40cda2:	f7ff ffa7 	bl	40ccf4 <__retarget_lock_release_recursive>
  40cda6:	f04f 30ff 	mov.w	r0, #4294967295
  40cdaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40cdae:	bf00      	nop
  40cdb0:	20400498 	.word	0x20400498
  40cdb4:	0040ce34 	.word	0x0040ce34
  40cdb8:	00000000 	.word	0x00000000

0040cdbc <ip_addr_any>:
  40cdbc:	00000000                                ....

0040cdc0 <ip_addr_broadcast>:
  40cdc0:	ffffffff                                ....

0040cdc4 <memp_sizes>:
  40cdc4:	00980020 0010001c 00100020 06100010      ....... .......

0040cdd4 <memp_num>:
  40cdd4:	00020001 00080001 00050002 00040002     ................

0040cde4 <tcp_backoff>:
  40cde4:	04030201 07070605 07070707 00000007     ................

0040cdf4 <tcp_persist_backoff>:
  40cdf4:	180c0603 00786030                       ....0`x.

0040cdfc <tcp_pcb_lists>:
  40cdfc:	204043f0 204043f8 204043e8 204043fc     .C@ .C@ .C@ .C@ 

0040ce0c <ethbroadcast>:
  40ce0c:	ffffffff 0000ffff                       ........

0040ce14 <ethzero>:
	...
  40ce1c:	6c6c6548 0000006f 00006e4f 00006e6f     Hello...On..on..
  40ce2c:	0066664f 0066666f                       Off.off.

0040ce34 <_global_impure_ptr>:
  40ce34:	20400070                                p.@ 

0040ce38 <_init>:
  40ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ce3a:	bf00      	nop
  40ce3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ce3e:	bc08      	pop	{r3}
  40ce40:	469e      	mov	lr, r3
  40ce42:	4770      	bx	lr

0040ce44 <__init_array_start>:
  40ce44:	0040cc9d 	.word	0x0040cc9d

0040ce48 <__frame_dummy_init_array_entry>:
  40ce48:	0040018d                                ..@.

0040ce4c <_fini>:
  40ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40ce4e:	bf00      	nop
  40ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40ce52:	bc08      	pop	{r3}
  40ce54:	469e      	mov	lr, r3
  40ce56:	4770      	bx	lr

0040ce58 <__fini_array_start>:
  40ce58:	00400169 	.word	0x00400169
