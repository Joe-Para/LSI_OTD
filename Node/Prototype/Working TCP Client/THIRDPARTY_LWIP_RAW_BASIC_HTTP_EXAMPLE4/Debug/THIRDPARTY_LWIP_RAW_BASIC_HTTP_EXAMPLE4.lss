
THIRDPARTY_LWIP_RAW_BASIC_HTTP_EXAMPLE4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000fd38  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040fd38  0040fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a18  20400000  0040fd40  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00004004  20400a18  00410758  00020a18  2**3
                  ALLOC
  4 .stack        00000404  20404a1c  0041475c  00020a18  2**0
                  ALLOC
  5 .heap         00000200  20404e20  00414b60  00020a18  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020a46  2**0
                  CONTENTS, READONLY
  8 .debug_info   000355e1  00000000  00000000  00020a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005e76  00000000  00000000  00056080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009c21  00000000  00000000  0005bef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001280  00000000  00000000  00065b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001148  00000000  00000000  00066d97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002c0a2  00000000  00000000  00067edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001db2e  00000000  00000000  00093f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009c2e1  00000000  00000000  000b1aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005648  00000000  00000000  0014dd90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 4e 40 20 09 1c 40 00 b9 1c 40 00 b9 1c 40 00      N@ ..@...@...@.
  400010:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b9 1c 40 00 b9 1c 40 00 00 00 00 00 b9 1c 40 00     ..@...@.......@.
  40003c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40004c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40005c:	b9 1c 40 00 b9 1c 40 00 00 00 00 00 b9 16 40 00     ..@...@.......@.
  40006c:	d1 16 40 00 e9 16 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40007c:	b9 1c 40 00 01 17 40 00 19 17 40 00 b9 1c 40 00     ..@...@...@...@.
  40008c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40009c:	11 c9 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  4000ac:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  4000bc:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  4000cc:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  4000dc:	3d c0 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     =.@...@...@...@.
  4000ec:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  4000fc:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40010c:	b9 1c 40 00 b9 1c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ......@...@...@.
  40012c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40013c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40014c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00 b9 1c 40 00     ..@...@...@...@.
  40015c:	b9 1c 40 00 b9 1c 40 00 b9 1c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a18 	.word	0x20400a18
  400184:	00000000 	.word	0x00000000
  400188:	0040fd40 	.word	0x0040fd40

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040fd40 	.word	0x0040fd40
  4001c8:	20400a1c 	.word	0x20400a1c
  4001cc:	0040fd40 	.word	0x0040fd40
  4001d0:	00000000 	.word	0x00000000

004001d4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4001dc:	687b      	ldr	r3, [r7, #4]
  4001de:	2b07      	cmp	r3, #7
  4001e0:	d831      	bhi.n	400246 <osc_enable+0x72>
  4001e2:	a201      	add	r2, pc, #4	; (adr r2, 4001e8 <osc_enable+0x14>)
  4001e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4001e8:	00400245 	.word	0x00400245
  4001ec:	00400209 	.word	0x00400209
  4001f0:	00400211 	.word	0x00400211
  4001f4:	00400219 	.word	0x00400219
  4001f8:	00400221 	.word	0x00400221
  4001fc:	00400229 	.word	0x00400229
  400200:	00400231 	.word	0x00400231
  400204:	0040023b 	.word	0x0040023b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400208:	2000      	movs	r0, #0
  40020a:	4b11      	ldr	r3, [pc, #68]	; (400250 <osc_enable+0x7c>)
  40020c:	4798      	blx	r3
		break;
  40020e:	e01a      	b.n	400246 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400210:	2001      	movs	r0, #1
  400212:	4b0f      	ldr	r3, [pc, #60]	; (400250 <osc_enable+0x7c>)
  400214:	4798      	blx	r3
		break;
  400216:	e016      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400218:	2000      	movs	r0, #0
  40021a:	4b0e      	ldr	r3, [pc, #56]	; (400254 <osc_enable+0x80>)
  40021c:	4798      	blx	r3
		break;
  40021e:	e012      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400220:	2010      	movs	r0, #16
  400222:	4b0c      	ldr	r3, [pc, #48]	; (400254 <osc_enable+0x80>)
  400224:	4798      	blx	r3
		break;
  400226:	e00e      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400228:	2020      	movs	r0, #32
  40022a:	4b0a      	ldr	r3, [pc, #40]	; (400254 <osc_enable+0x80>)
  40022c:	4798      	blx	r3
		break;
  40022e:	e00a      	b.n	400246 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400230:	213e      	movs	r1, #62	; 0x3e
  400232:	2000      	movs	r0, #0
  400234:	4b08      	ldr	r3, [pc, #32]	; (400258 <osc_enable+0x84>)
  400236:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400238:	e005      	b.n	400246 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40023a:	213e      	movs	r1, #62	; 0x3e
  40023c:	2001      	movs	r0, #1
  40023e:	4b06      	ldr	r3, [pc, #24]	; (400258 <osc_enable+0x84>)
  400240:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400242:	e000      	b.n	400246 <osc_enable+0x72>
		break;
  400244:	bf00      	nop
	}
}
  400246:	bf00      	nop
  400248:	3708      	adds	r7, #8
  40024a:	46bd      	mov	sp, r7
  40024c:	bd80      	pop	{r7, pc}
  40024e:	bf00      	nop
  400250:	00401831 	.word	0x00401831
  400254:	0040189d 	.word	0x0040189d
  400258:	0040190d 	.word	0x0040190d

0040025c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40025c:	b580      	push	{r7, lr}
  40025e:	b082      	sub	sp, #8
  400260:	af00      	add	r7, sp, #0
  400262:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400264:	687b      	ldr	r3, [r7, #4]
  400266:	2b07      	cmp	r3, #7
  400268:	d826      	bhi.n	4002b8 <osc_is_ready+0x5c>
  40026a:	a201      	add	r2, pc, #4	; (adr r2, 400270 <osc_is_ready+0x14>)
  40026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400270:	00400291 	.word	0x00400291
  400274:	00400295 	.word	0x00400295
  400278:	00400295 	.word	0x00400295
  40027c:	004002a7 	.word	0x004002a7
  400280:	004002a7 	.word	0x004002a7
  400284:	004002a7 	.word	0x004002a7
  400288:	004002a7 	.word	0x004002a7
  40028c:	004002a7 	.word	0x004002a7
	case OSC_SLCK_32K_RC:
		return 1;
  400290:	2301      	movs	r3, #1
  400292:	e012      	b.n	4002ba <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400294:	4b0b      	ldr	r3, [pc, #44]	; (4002c4 <osc_is_ready+0x68>)
  400296:	4798      	blx	r3
  400298:	4603      	mov	r3, r0
  40029a:	2b00      	cmp	r3, #0
  40029c:	bf14      	ite	ne
  40029e:	2301      	movne	r3, #1
  4002a0:	2300      	moveq	r3, #0
  4002a2:	b2db      	uxtb	r3, r3
  4002a4:	e009      	b.n	4002ba <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4002a6:	4b08      	ldr	r3, [pc, #32]	; (4002c8 <osc_is_ready+0x6c>)
  4002a8:	4798      	blx	r3
  4002aa:	4603      	mov	r3, r0
  4002ac:	2b00      	cmp	r3, #0
  4002ae:	bf14      	ite	ne
  4002b0:	2301      	movne	r3, #1
  4002b2:	2300      	moveq	r3, #0
  4002b4:	b2db      	uxtb	r3, r3
  4002b6:	e000      	b.n	4002ba <osc_is_ready+0x5e>
	}

	return 0;
  4002b8:	2300      	movs	r3, #0
}
  4002ba:	4618      	mov	r0, r3
  4002bc:	3708      	adds	r7, #8
  4002be:	46bd      	mov	sp, r7
  4002c0:	bd80      	pop	{r7, pc}
  4002c2:	bf00      	nop
  4002c4:	00401869 	.word	0x00401869
  4002c8:	00401985 	.word	0x00401985

004002cc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4002cc:	b480      	push	{r7}
  4002ce:	b083      	sub	sp, #12
  4002d0:	af00      	add	r7, sp, #0
  4002d2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4002d4:	687b      	ldr	r3, [r7, #4]
  4002d6:	2b07      	cmp	r3, #7
  4002d8:	d825      	bhi.n	400326 <osc_get_rate+0x5a>
  4002da:	a201      	add	r2, pc, #4	; (adr r2, 4002e0 <osc_get_rate+0x14>)
  4002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4002e0:	00400301 	.word	0x00400301
  4002e4:	00400307 	.word	0x00400307
  4002e8:	0040030d 	.word	0x0040030d
  4002ec:	00400313 	.word	0x00400313
  4002f0:	00400317 	.word	0x00400317
  4002f4:	0040031b 	.word	0x0040031b
  4002f8:	0040031f 	.word	0x0040031f
  4002fc:	00400323 	.word	0x00400323
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400300:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400304:	e010      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40030a:	e00d      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  40030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400310:	e00a      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400312:	4b08      	ldr	r3, [pc, #32]	; (400334 <osc_get_rate+0x68>)
  400314:	e008      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400316:	4b08      	ldr	r3, [pc, #32]	; (400338 <osc_get_rate+0x6c>)
  400318:	e006      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  40031a:	4b08      	ldr	r3, [pc, #32]	; (40033c <osc_get_rate+0x70>)
  40031c:	e004      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <osc_get_rate+0x70>)
  400320:	e002      	b.n	400328 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400322:	4b06      	ldr	r3, [pc, #24]	; (40033c <osc_get_rate+0x70>)
  400324:	e000      	b.n	400328 <osc_get_rate+0x5c>
	}

	return 0;
  400326:	2300      	movs	r3, #0
}
  400328:	4618      	mov	r0, r3
  40032a:	370c      	adds	r7, #12
  40032c:	46bd      	mov	sp, r7
  40032e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400332:	4770      	bx	lr
  400334:	003d0900 	.word	0x003d0900
  400338:	007a1200 	.word	0x007a1200
  40033c:	00b71b00 	.word	0x00b71b00

00400340 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400340:	b580      	push	{r7, lr}
  400342:	b082      	sub	sp, #8
  400344:	af00      	add	r7, sp, #0
  400346:	4603      	mov	r3, r0
  400348:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40034a:	bf00      	nop
  40034c:	79fb      	ldrb	r3, [r7, #7]
  40034e:	4618      	mov	r0, r3
  400350:	4b05      	ldr	r3, [pc, #20]	; (400368 <osc_wait_ready+0x28>)
  400352:	4798      	blx	r3
  400354:	4603      	mov	r3, r0
  400356:	f083 0301 	eor.w	r3, r3, #1
  40035a:	b2db      	uxtb	r3, r3
  40035c:	2b00      	cmp	r3, #0
  40035e:	d1f5      	bne.n	40034c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400360:	bf00      	nop
  400362:	3708      	adds	r7, #8
  400364:	46bd      	mov	sp, r7
  400366:	bd80      	pop	{r7, pc}
  400368:	0040025d 	.word	0x0040025d

0040036c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40036c:	b580      	push	{r7, lr}
  40036e:	b086      	sub	sp, #24
  400370:	af00      	add	r7, sp, #0
  400372:	60f8      	str	r0, [r7, #12]
  400374:	607a      	str	r2, [r7, #4]
  400376:	603b      	str	r3, [r7, #0]
  400378:	460b      	mov	r3, r1
  40037a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  40037c:	687b      	ldr	r3, [r7, #4]
  40037e:	2b00      	cmp	r3, #0
  400380:	d107      	bne.n	400392 <pll_config_init+0x26>
  400382:	683b      	ldr	r3, [r7, #0]
  400384:	2b00      	cmp	r3, #0
  400386:	d104      	bne.n	400392 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  400388:	68fb      	ldr	r3, [r7, #12]
  40038a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  40038e:	601a      	str	r2, [r3, #0]
  400390:	e019      	b.n	4003c6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  400392:	7afb      	ldrb	r3, [r7, #11]
  400394:	4618      	mov	r0, r3
  400396:	4b0e      	ldr	r3, [pc, #56]	; (4003d0 <pll_config_init+0x64>)
  400398:	4798      	blx	r3
  40039a:	4602      	mov	r2, r0
  40039c:	687b      	ldr	r3, [r7, #4]
  40039e:	fbb2 f3f3 	udiv	r3, r2, r3
  4003a2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4003a4:	697b      	ldr	r3, [r7, #20]
  4003a6:	683a      	ldr	r2, [r7, #0]
  4003a8:	fb02 f303 	mul.w	r3, r2, r3
  4003ac:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003ae:	683b      	ldr	r3, [r7, #0]
  4003b0:	3b01      	subs	r3, #1
  4003b2:	041a      	lsls	r2, r3, #16
  4003b4:	4b07      	ldr	r3, [pc, #28]	; (4003d4 <pll_config_init+0x68>)
  4003b6:	4013      	ands	r3, r2
  4003b8:	687a      	ldr	r2, [r7, #4]
  4003ba:	b2d2      	uxtb	r2, r2
  4003bc:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4003be:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4003c2:	68fb      	ldr	r3, [r7, #12]
  4003c4:	601a      	str	r2, [r3, #0]
	}
}
  4003c6:	bf00      	nop
  4003c8:	3718      	adds	r7, #24
  4003ca:	46bd      	mov	sp, r7
  4003cc:	bd80      	pop	{r7, pc}
  4003ce:	bf00      	nop
  4003d0:	004002cd 	.word	0x004002cd
  4003d4:	07ff0000 	.word	0x07ff0000

004003d8 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  4003d8:	b580      	push	{r7, lr}
  4003da:	b082      	sub	sp, #8
  4003dc:	af00      	add	r7, sp, #0
  4003de:	6078      	str	r0, [r7, #4]
  4003e0:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  4003e2:	683b      	ldr	r3, [r7, #0]
  4003e4:	2b00      	cmp	r3, #0
  4003e6:	d108      	bne.n	4003fa <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  4003e8:	4b09      	ldr	r3, [pc, #36]	; (400410 <pll_enable+0x38>)
  4003ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4003ec:	4a09      	ldr	r2, [pc, #36]	; (400414 <pll_enable+0x3c>)
  4003ee:	687b      	ldr	r3, [r7, #4]
  4003f0:	681b      	ldr	r3, [r3, #0]
  4003f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4003f6:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  4003f8:	e005      	b.n	400406 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  4003fa:	4a06      	ldr	r2, [pc, #24]	; (400414 <pll_enable+0x3c>)
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	681b      	ldr	r3, [r3, #0]
  400400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400404:	61d3      	str	r3, [r2, #28]
}
  400406:	bf00      	nop
  400408:	3708      	adds	r7, #8
  40040a:	46bd      	mov	sp, r7
  40040c:	bd80      	pop	{r7, pc}
  40040e:	bf00      	nop
  400410:	004019a1 	.word	0x004019a1
  400414:	400e0600 	.word	0x400e0600

00400418 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  400418:	b580      	push	{r7, lr}
  40041a:	b082      	sub	sp, #8
  40041c:	af00      	add	r7, sp, #0
  40041e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400420:	687b      	ldr	r3, [r7, #4]
  400422:	2b00      	cmp	r3, #0
  400424:	d103      	bne.n	40042e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  400426:	4b05      	ldr	r3, [pc, #20]	; (40043c <pll_is_locked+0x24>)
  400428:	4798      	blx	r3
  40042a:	4603      	mov	r3, r0
  40042c:	e002      	b.n	400434 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40042e:	4b04      	ldr	r3, [pc, #16]	; (400440 <pll_is_locked+0x28>)
  400430:	4798      	blx	r3
  400432:	4603      	mov	r3, r0
	}
}
  400434:	4618      	mov	r0, r3
  400436:	3708      	adds	r7, #8
  400438:	46bd      	mov	sp, r7
  40043a:	bd80      	pop	{r7, pc}
  40043c:	004019bd 	.word	0x004019bd
  400440:	004019d9 	.word	0x004019d9

00400444 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400444:	b580      	push	{r7, lr}
  400446:	b082      	sub	sp, #8
  400448:	af00      	add	r7, sp, #0
  40044a:	4603      	mov	r3, r0
  40044c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40044e:	79fb      	ldrb	r3, [r7, #7]
  400450:	3b03      	subs	r3, #3
  400452:	2b04      	cmp	r3, #4
  400454:	d808      	bhi.n	400468 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  400456:	79fb      	ldrb	r3, [r7, #7]
  400458:	4618      	mov	r0, r3
  40045a:	4b06      	ldr	r3, [pc, #24]	; (400474 <pll_enable_source+0x30>)
  40045c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40045e:	79fb      	ldrb	r3, [r7, #7]
  400460:	4618      	mov	r0, r3
  400462:	4b05      	ldr	r3, [pc, #20]	; (400478 <pll_enable_source+0x34>)
  400464:	4798      	blx	r3
		break;
  400466:	e000      	b.n	40046a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400468:	bf00      	nop
	}
}
  40046a:	bf00      	nop
  40046c:	3708      	adds	r7, #8
  40046e:	46bd      	mov	sp, r7
  400470:	bd80      	pop	{r7, pc}
  400472:	bf00      	nop
  400474:	004001d5 	.word	0x004001d5
  400478:	00400341 	.word	0x00400341

0040047c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  40047c:	b580      	push	{r7, lr}
  40047e:	b082      	sub	sp, #8
  400480:	af00      	add	r7, sp, #0
  400482:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400484:	bf00      	nop
  400486:	6878      	ldr	r0, [r7, #4]
  400488:	4b04      	ldr	r3, [pc, #16]	; (40049c <pll_wait_for_lock+0x20>)
  40048a:	4798      	blx	r3
  40048c:	4603      	mov	r3, r0
  40048e:	2b00      	cmp	r3, #0
  400490:	d0f9      	beq.n	400486 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  400492:	2300      	movs	r3, #0
}
  400494:	4618      	mov	r0, r3
  400496:	3708      	adds	r7, #8
  400498:	46bd      	mov	sp, r7
  40049a:	bd80      	pop	{r7, pc}
  40049c:	00400419 	.word	0x00400419

004004a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4004a0:	b580      	push	{r7, lr}
  4004a2:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4004a4:	2006      	movs	r0, #6
  4004a6:	4b05      	ldr	r3, [pc, #20]	; (4004bc <sysclk_get_main_hz+0x1c>)
  4004a8:	4798      	blx	r3
  4004aa:	4602      	mov	r2, r0
  4004ac:	4613      	mov	r3, r2
  4004ae:	009b      	lsls	r3, r3, #2
  4004b0:	4413      	add	r3, r2
  4004b2:	009a      	lsls	r2, r3, #2
  4004b4:	4413      	add	r3, r2
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4004b6:	4618      	mov	r0, r3
  4004b8:	bd80      	pop	{r7, pc}
  4004ba:	bf00      	nop
  4004bc:	004002cd 	.word	0x004002cd

004004c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4004c0:	b580      	push	{r7, lr}
  4004c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4004c4:	4b02      	ldr	r3, [pc, #8]	; (4004d0 <sysclk_get_cpu_hz+0x10>)
  4004c6:	4798      	blx	r3
  4004c8:	4603      	mov	r3, r0
  4004ca:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4004cc:	4618      	mov	r0, r3
  4004ce:	bd80      	pop	{r7, pc}
  4004d0:	004004a1 	.word	0x004004a1

004004d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4004d4:	b590      	push	{r4, r7, lr}
  4004d6:	b083      	sub	sp, #12
  4004d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4004da:	4813      	ldr	r0, [pc, #76]	; (400528 <sysclk_init+0x54>)
  4004dc:	4b13      	ldr	r3, [pc, #76]	; (40052c <sysclk_init+0x58>)
  4004de:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  4004e0:	2006      	movs	r0, #6
  4004e2:	4b13      	ldr	r3, [pc, #76]	; (400530 <sysclk_init+0x5c>)
  4004e4:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4004e6:	1d38      	adds	r0, r7, #4
  4004e8:	2319      	movs	r3, #25
  4004ea:	2201      	movs	r2, #1
  4004ec:	2106      	movs	r1, #6
  4004ee:	4c11      	ldr	r4, [pc, #68]	; (400534 <sysclk_init+0x60>)
  4004f0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4004f2:	1d3b      	adds	r3, r7, #4
  4004f4:	2100      	movs	r1, #0
  4004f6:	4618      	mov	r0, r3
  4004f8:	4b0f      	ldr	r3, [pc, #60]	; (400538 <sysclk_init+0x64>)
  4004fa:	4798      	blx	r3
		pll_wait_for_lock(0);
  4004fc:	2000      	movs	r0, #0
  4004fe:	4b0f      	ldr	r3, [pc, #60]	; (40053c <sysclk_init+0x68>)
  400500:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400502:	2002      	movs	r0, #2
  400504:	4b0e      	ldr	r3, [pc, #56]	; (400540 <sysclk_init+0x6c>)
  400506:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400508:	2010      	movs	r0, #16
  40050a:	4b0e      	ldr	r3, [pc, #56]	; (400544 <sysclk_init+0x70>)
  40050c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40050e:	4b0e      	ldr	r3, [pc, #56]	; (400548 <sysclk_init+0x74>)
  400510:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400512:	4b0e      	ldr	r3, [pc, #56]	; (40054c <sysclk_init+0x78>)
  400514:	4798      	blx	r3
  400516:	4603      	mov	r3, r0
  400518:	4618      	mov	r0, r3
  40051a:	4b04      	ldr	r3, [pc, #16]	; (40052c <sysclk_init+0x58>)
  40051c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40051e:	bf00      	nop
  400520:	370c      	adds	r7, #12
  400522:	46bd      	mov	sp, r7
  400524:	bd90      	pop	{r4, r7, pc}
  400526:	bf00      	nop
  400528:	07270e00 	.word	0x07270e00
  40052c:	00401e29 	.word	0x00401e29
  400530:	00400445 	.word	0x00400445
  400534:	0040036d 	.word	0x0040036d
  400538:	004003d9 	.word	0x004003d9
  40053c:	0040047d 	.word	0x0040047d
  400540:	00401731 	.word	0x00401731
  400544:	004017ad 	.word	0x004017ad
  400548:	00401cc1 	.word	0x00401cc1
  40054c:	004004c1 	.word	0x004004c1

00400550 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400550:	b580      	push	{r7, lr}
  400552:	b086      	sub	sp, #24
  400554:	af00      	add	r7, sp, #0
  400556:	60f8      	str	r0, [r7, #12]
  400558:	60b9      	str	r1, [r7, #8]
  40055a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  40055c:	2300      	movs	r3, #0
  40055e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
  400560:	68fb      	ldr	r3, [r7, #12]
  400562:	2b00      	cmp	r3, #0
  400564:	d012      	beq.n	40058c <_read+0x3c>
		return -1;
  400566:	f04f 33ff 	mov.w	r3, #4294967295
  40056a:	e013      	b.n	400594 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <_read+0x4c>)
  40056e:	681b      	ldr	r3, [r3, #0]
  400570:	4a0b      	ldr	r2, [pc, #44]	; (4005a0 <_read+0x50>)
  400572:	6812      	ldr	r2, [r2, #0]
  400574:	68b9      	ldr	r1, [r7, #8]
  400576:	4610      	mov	r0, r2
  400578:	4798      	blx	r3
		ptr++;
  40057a:	68bb      	ldr	r3, [r7, #8]
  40057c:	3301      	adds	r3, #1
  40057e:	60bb      	str	r3, [r7, #8]
		nChars++;
  400580:	697b      	ldr	r3, [r7, #20]
  400582:	3301      	adds	r3, #1
  400584:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
  400586:	687b      	ldr	r3, [r7, #4]
  400588:	3b01      	subs	r3, #1
  40058a:	607b      	str	r3, [r7, #4]
  40058c:	687b      	ldr	r3, [r7, #4]
  40058e:	2b00      	cmp	r3, #0
  400590:	dcec      	bgt.n	40056c <_read+0x1c>
	}
	return nChars;
  400592:	697b      	ldr	r3, [r7, #20]
}
  400594:	4618      	mov	r0, r3
  400596:	3718      	adds	r7, #24
  400598:	46bd      	mov	sp, r7
  40059a:	bd80      	pop	{r7, pc}
  40059c:	2040392c 	.word	0x2040392c
  4005a0:	20403934 	.word	0x20403934

004005a4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  4005a4:	b580      	push	{r7, lr}
  4005a6:	b086      	sub	sp, #24
  4005a8:	af00      	add	r7, sp, #0
  4005aa:	60f8      	str	r0, [r7, #12]
  4005ac:	60b9      	str	r1, [r7, #8]
  4005ae:	607a      	str	r2, [r7, #4]
	int nChars = 0;
  4005b0:	2300      	movs	r3, #0
  4005b2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
  4005b4:	68fb      	ldr	r3, [r7, #12]
  4005b6:	2b01      	cmp	r3, #1
  4005b8:	d01e      	beq.n	4005f8 <_write+0x54>
  4005ba:	68fb      	ldr	r3, [r7, #12]
  4005bc:	2b02      	cmp	r3, #2
  4005be:	d01b      	beq.n	4005f8 <_write+0x54>
  4005c0:	68fb      	ldr	r3, [r7, #12]
  4005c2:	2b03      	cmp	r3, #3
  4005c4:	d018      	beq.n	4005f8 <_write+0x54>
		return -1;
  4005c6:	f04f 33ff 	mov.w	r3, #4294967295
  4005ca:	e019      	b.n	400600 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4005cc:	4b0e      	ldr	r3, [pc, #56]	; (400608 <_write+0x64>)
  4005ce:	681a      	ldr	r2, [r3, #0]
  4005d0:	4b0e      	ldr	r3, [pc, #56]	; (40060c <_write+0x68>)
  4005d2:	6818      	ldr	r0, [r3, #0]
  4005d4:	68bb      	ldr	r3, [r7, #8]
  4005d6:	1c59      	adds	r1, r3, #1
  4005d8:	60b9      	str	r1, [r7, #8]
  4005da:	781b      	ldrb	r3, [r3, #0]
  4005dc:	4619      	mov	r1, r3
  4005de:	4790      	blx	r2
  4005e0:	4603      	mov	r3, r0
  4005e2:	2b00      	cmp	r3, #0
  4005e4:	da02      	bge.n	4005ec <_write+0x48>
			return -1;
  4005e6:	f04f 33ff 	mov.w	r3, #4294967295
  4005ea:	e009      	b.n	400600 <_write+0x5c>
		}
		++nChars;
  4005ec:	697b      	ldr	r3, [r7, #20]
  4005ee:	3301      	adds	r3, #1
  4005f0:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
  4005f2:	687b      	ldr	r3, [r7, #4]
  4005f4:	3b01      	subs	r3, #1
  4005f6:	607b      	str	r3, [r7, #4]
  4005f8:	687b      	ldr	r3, [r7, #4]
  4005fa:	2b00      	cmp	r3, #0
  4005fc:	d1e6      	bne.n	4005cc <_write+0x28>
	}
	return nChars;
  4005fe:	697b      	ldr	r3, [r7, #20]
}
  400600:	4618      	mov	r0, r3
  400602:	3718      	adds	r7, #24
  400604:	46bd      	mov	sp, r7
  400606:	bd80      	pop	{r7, pc}
  400608:	20403930 	.word	0x20403930
  40060c:	20403934 	.word	0x20403934

00400610 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400610:	b580      	push	{r7, lr}
  400612:	b082      	sub	sp, #8
  400614:	af00      	add	r7, sp, #0
  400616:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400618:	6878      	ldr	r0, [r7, #4]
  40061a:	4b03      	ldr	r3, [pc, #12]	; (400628 <sysclk_enable_peripheral_clock+0x18>)
  40061c:	4798      	blx	r3
}
  40061e:	bf00      	nop
  400620:	3708      	adds	r7, #8
  400622:	46bd      	mov	sp, r7
  400624:	bd80      	pop	{r7, pc}
  400626:	bf00      	nop
  400628:	004019f5 	.word	0x004019f5

0040062c <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  40062c:	b580      	push	{r7, lr}
  40062e:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400630:	200a      	movs	r0, #10
  400632:	4b08      	ldr	r3, [pc, #32]	; (400654 <ioport_init+0x28>)
  400634:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400636:	200b      	movs	r0, #11
  400638:	4b06      	ldr	r3, [pc, #24]	; (400654 <ioport_init+0x28>)
  40063a:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  40063c:	200c      	movs	r0, #12
  40063e:	4b05      	ldr	r3, [pc, #20]	; (400654 <ioport_init+0x28>)
  400640:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
  400642:	2010      	movs	r0, #16
  400644:	4b03      	ldr	r3, [pc, #12]	; (400654 <ioport_init+0x28>)
  400646:	4798      	blx	r3
#endif
#ifdef ID_PIOE
	sysclk_enable_peripheral_clock(ID_PIOE);
  400648:	2011      	movs	r0, #17
  40064a:	4b02      	ldr	r3, [pc, #8]	; (400654 <ioport_init+0x28>)
  40064c:	4798      	blx	r3
	arch_ioport_init();
}
  40064e:	bf00      	nop
  400650:	bd80      	pop	{r7, pc}
  400652:	bf00      	nop
  400654:	00400611 	.word	0x00400611

00400658 <ioport_disable_pin>:
 *        IOPORT_CREATE_PIN().
 *
 * \param pin IOPORT pin to disable
 */
static inline void ioport_disable_pin(ioport_pin_t pin)
{
  400658:	b480      	push	{r7}
  40065a:	b089      	sub	sp, #36	; 0x24
  40065c:	af00      	add	r7, sp, #0
  40065e:	6078      	str	r0, [r7, #4]
  400660:	687b      	ldr	r3, [r7, #4]
  400662:	61fb      	str	r3, [r7, #28]
  400664:	69fb      	ldr	r3, [r7, #28]
  400666:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400668:	69bb      	ldr	r3, [r7, #24]
  40066a:	095a      	lsrs	r2, r3, #5
  40066c:	69fb      	ldr	r3, [r7, #28]
  40066e:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400670:	697b      	ldr	r3, [r7, #20]
  400672:	f003 031f 	and.w	r3, r3, #31
  400676:	2101      	movs	r1, #1
  400678:	fa01 f303 	lsl.w	r3, r1, r3
  40067c:	613a      	str	r2, [r7, #16]
  40067e:	60fb      	str	r3, [r7, #12]
  400680:	693b      	ldr	r3, [r7, #16]
  400682:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400684:	68ba      	ldr	r2, [r7, #8]
  400686:	4b06      	ldr	r3, [pc, #24]	; (4006a0 <ioport_disable_pin+0x48>)
  400688:	4413      	add	r3, r2
  40068a:	025b      	lsls	r3, r3, #9
  40068c:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40068e:	68fb      	ldr	r3, [r7, #12]
  400690:	6053      	str	r3, [r2, #4]
	arch_ioport_disable_pin(pin);
}
  400692:	bf00      	nop
  400694:	3724      	adds	r7, #36	; 0x24
  400696:	46bd      	mov	sp, r7
  400698:	f85d 7b04 	ldr.w	r7, [sp], #4
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	00200707 	.word	0x00200707

004006a4 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  4006a4:	b480      	push	{r7}
  4006a6:	b08d      	sub	sp, #52	; 0x34
  4006a8:	af00      	add	r7, sp, #0
  4006aa:	6078      	str	r0, [r7, #4]
  4006ac:	6039      	str	r1, [r7, #0]
  4006ae:	687b      	ldr	r3, [r7, #4]
  4006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4006b2:	683b      	ldr	r3, [r7, #0]
  4006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  4006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006b8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4006bc:	095a      	lsrs	r2, r3, #5
  4006be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4006c0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4006c2:	6a3b      	ldr	r3, [r7, #32]
  4006c4:	f003 031f 	and.w	r3, r3, #31
  4006c8:	2101      	movs	r1, #1
  4006ca:	fa01 f303 	lsl.w	r3, r1, r3
  4006ce:	61fa      	str	r2, [r7, #28]
  4006d0:	61bb      	str	r3, [r7, #24]
  4006d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4006d4:	617b      	str	r3, [r7, #20]
  4006d6:	69fb      	ldr	r3, [r7, #28]
  4006d8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4006da:	693a      	ldr	r2, [r7, #16]
  4006dc:	4b37      	ldr	r3, [pc, #220]	; (4007bc <ioport_set_pin_mode+0x118>)
  4006de:	4413      	add	r3, r2
  4006e0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  4006e2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  4006e4:	697b      	ldr	r3, [r7, #20]
  4006e6:	f003 0308 	and.w	r3, r3, #8
  4006ea:	2b00      	cmp	r3, #0
  4006ec:	d003      	beq.n	4006f6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4006ee:	68fb      	ldr	r3, [r7, #12]
  4006f0:	69ba      	ldr	r2, [r7, #24]
  4006f2:	665a      	str	r2, [r3, #100]	; 0x64
  4006f4:	e002      	b.n	4006fc <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  4006f6:	68fb      	ldr	r3, [r7, #12]
  4006f8:	69ba      	ldr	r2, [r7, #24]
  4006fa:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  4006fc:	697b      	ldr	r3, [r7, #20]
  4006fe:	f003 0310 	and.w	r3, r3, #16
  400702:	2b00      	cmp	r3, #0
  400704:	d004      	beq.n	400710 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400706:	68fb      	ldr	r3, [r7, #12]
  400708:	69ba      	ldr	r2, [r7, #24]
  40070a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40070e:	e003      	b.n	400718 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400710:	68fb      	ldr	r3, [r7, #12]
  400712:	69ba      	ldr	r2, [r7, #24]
  400714:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400718:	697b      	ldr	r3, [r7, #20]
  40071a:	f003 0320 	and.w	r3, r3, #32
  40071e:	2b00      	cmp	r3, #0
  400720:	d003      	beq.n	40072a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400722:	68fb      	ldr	r3, [r7, #12]
  400724:	69ba      	ldr	r2, [r7, #24]
  400726:	651a      	str	r2, [r3, #80]	; 0x50
  400728:	e002      	b.n	400730 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  40072a:	68fb      	ldr	r3, [r7, #12]
  40072c:	69ba      	ldr	r2, [r7, #24]
  40072e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400730:	697b      	ldr	r3, [r7, #20]
  400732:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400736:	2b00      	cmp	r3, #0
  400738:	d003      	beq.n	400742 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40073a:	68fb      	ldr	r3, [r7, #12]
  40073c:	69ba      	ldr	r2, [r7, #24]
  40073e:	621a      	str	r2, [r3, #32]
  400740:	e002      	b.n	400748 <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400742:	68fb      	ldr	r3, [r7, #12]
  400744:	69ba      	ldr	r2, [r7, #24]
  400746:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400748:	697b      	ldr	r3, [r7, #20]
  40074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40074e:	2b00      	cmp	r3, #0
  400750:	d004      	beq.n	40075c <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400752:	68fb      	ldr	r3, [r7, #12]
  400754:	69ba      	ldr	r2, [r7, #24]
  400756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40075a:	e003      	b.n	400764 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  40075c:	68fb      	ldr	r3, [r7, #12]
  40075e:	69ba      	ldr	r2, [r7, #24]
  400760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400764:	697b      	ldr	r3, [r7, #20]
  400766:	f003 0301 	and.w	r3, r3, #1
  40076a:	2b00      	cmp	r3, #0
  40076c:	d006      	beq.n	40077c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40076e:	68fb      	ldr	r3, [r7, #12]
  400770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400772:	69bb      	ldr	r3, [r7, #24]
  400774:	431a      	orrs	r2, r3
  400776:	68fb      	ldr	r3, [r7, #12]
  400778:	671a      	str	r2, [r3, #112]	; 0x70
  40077a:	e006      	b.n	40078a <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  40077c:	68fb      	ldr	r3, [r7, #12]
  40077e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400780:	69bb      	ldr	r3, [r7, #24]
  400782:	43db      	mvns	r3, r3
  400784:	401a      	ands	r2, r3
  400786:	68fb      	ldr	r3, [r7, #12]
  400788:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  40078a:	697b      	ldr	r3, [r7, #20]
  40078c:	f003 0302 	and.w	r3, r3, #2
  400790:	2b00      	cmp	r3, #0
  400792:	d006      	beq.n	4007a2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400794:	68fb      	ldr	r3, [r7, #12]
  400796:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400798:	69bb      	ldr	r3, [r7, #24]
  40079a:	431a      	orrs	r2, r3
  40079c:	68fb      	ldr	r3, [r7, #12]
  40079e:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  4007a0:	e006      	b.n	4007b0 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4007a2:	68fb      	ldr	r3, [r7, #12]
  4007a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4007a6:	69bb      	ldr	r3, [r7, #24]
  4007a8:	43db      	mvns	r3, r3
  4007aa:	401a      	ands	r2, r3
  4007ac:	68fb      	ldr	r3, [r7, #12]
  4007ae:	675a      	str	r2, [r3, #116]	; 0x74
  4007b0:	bf00      	nop
  4007b2:	3734      	adds	r7, #52	; 0x34
  4007b4:	46bd      	mov	sp, r7
  4007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ba:	4770      	bx	lr
  4007bc:	00200707 	.word	0x00200707

004007c0 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  4007c0:	b480      	push	{r7}
  4007c2:	b08d      	sub	sp, #52	; 0x34
  4007c4:	af00      	add	r7, sp, #0
  4007c6:	6078      	str	r0, [r7, #4]
  4007c8:	460b      	mov	r3, r1
  4007ca:	70fb      	strb	r3, [r7, #3]
  4007cc:	687b      	ldr	r3, [r7, #4]
  4007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4007d0:	78fb      	ldrb	r3, [r7, #3]
  4007d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4007d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007d8:	627b      	str	r3, [r7, #36]	; 0x24
  4007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4007dc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4007de:	6a3b      	ldr	r3, [r7, #32]
  4007e0:	095b      	lsrs	r3, r3, #5
  4007e2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4007e4:	69fa      	ldr	r2, [r7, #28]
  4007e6:	4b17      	ldr	r3, [pc, #92]	; (400844 <ioport_set_pin_dir+0x84>)
  4007e8:	4413      	add	r3, r2
  4007ea:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4007ec:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4007ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4007f2:	2b01      	cmp	r3, #1
  4007f4:	d109      	bne.n	40080a <ioport_set_pin_dir+0x4a>
  4007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4007f8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4007fa:	697b      	ldr	r3, [r7, #20]
  4007fc:	f003 031f 	and.w	r3, r3, #31
  400800:	2201      	movs	r2, #1
  400802:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400804:	69bb      	ldr	r3, [r7, #24]
  400806:	611a      	str	r2, [r3, #16]
  400808:	e00c      	b.n	400824 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40080a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40080e:	2b00      	cmp	r3, #0
  400810:	d108      	bne.n	400824 <ioport_set_pin_dir+0x64>
  400812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400814:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400816:	693b      	ldr	r3, [r7, #16]
  400818:	f003 031f 	and.w	r3, r3, #31
  40081c:	2201      	movs	r2, #1
  40081e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400820:	69bb      	ldr	r3, [r7, #24]
  400822:	615a      	str	r2, [r3, #20]
  400824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400826:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400828:	68fb      	ldr	r3, [r7, #12]
  40082a:	f003 031f 	and.w	r3, r3, #31
  40082e:	2201      	movs	r2, #1
  400830:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400832:	69bb      	ldr	r3, [r7, #24]
  400834:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400838:	bf00      	nop
  40083a:	3734      	adds	r7, #52	; 0x34
  40083c:	46bd      	mov	sp, r7
  40083e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400842:	4770      	bx	lr
  400844:	00200707 	.word	0x00200707

00400848 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400848:	b480      	push	{r7}
  40084a:	b08b      	sub	sp, #44	; 0x2c
  40084c:	af00      	add	r7, sp, #0
  40084e:	6078      	str	r0, [r7, #4]
  400850:	460b      	mov	r3, r1
  400852:	70fb      	strb	r3, [r7, #3]
  400854:	687b      	ldr	r3, [r7, #4]
  400856:	627b      	str	r3, [r7, #36]	; 0x24
  400858:	78fb      	ldrb	r3, [r7, #3]
  40085a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400860:	61fb      	str	r3, [r7, #28]
  400862:	69fb      	ldr	r3, [r7, #28]
  400864:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400866:	69bb      	ldr	r3, [r7, #24]
  400868:	095b      	lsrs	r3, r3, #5
  40086a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40086c:	697a      	ldr	r2, [r7, #20]
  40086e:	4b10      	ldr	r3, [pc, #64]	; (4008b0 <ioport_set_pin_level+0x68>)
  400870:	4413      	add	r3, r2
  400872:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400874:	613b      	str	r3, [r7, #16]

	if (level) {
  400876:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40087a:	2b00      	cmp	r3, #0
  40087c:	d009      	beq.n	400892 <ioport_set_pin_level+0x4a>
  40087e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400880:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400882:	68fb      	ldr	r3, [r7, #12]
  400884:	f003 031f 	and.w	r3, r3, #31
  400888:	2201      	movs	r2, #1
  40088a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40088c:	693b      	ldr	r3, [r7, #16]
  40088e:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400890:	e008      	b.n	4008a4 <ioport_set_pin_level+0x5c>
  400892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400894:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400896:	68bb      	ldr	r3, [r7, #8]
  400898:	f003 031f 	and.w	r3, r3, #31
  40089c:	2201      	movs	r2, #1
  40089e:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4008a0:	693b      	ldr	r3, [r7, #16]
  4008a2:	635a      	str	r2, [r3, #52]	; 0x34
  4008a4:	bf00      	nop
  4008a6:	372c      	adds	r7, #44	; 0x2c
  4008a8:	46bd      	mov	sp, r7
  4008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4008ae:	4770      	bx	lr
  4008b0:	00200707 	.word	0x00200707

004008b4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4008b4:	b480      	push	{r7}
  4008b6:	b08d      	sub	sp, #52	; 0x34
  4008b8:	af00      	add	r7, sp, #0
  4008ba:	6078      	str	r0, [r7, #4]
  4008bc:	460b      	mov	r3, r1
  4008be:	70fb      	strb	r3, [r7, #3]
  4008c0:	687b      	ldr	r3, [r7, #4]
  4008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4008c4:	78fb      	ldrb	r3, [r7, #3]
  4008c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008cc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4008d0:	095a      	lsrs	r2, r3, #5
  4008d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4008d4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4008d6:	6a3b      	ldr	r3, [r7, #32]
  4008d8:	f003 031f 	and.w	r3, r3, #31
  4008dc:	2101      	movs	r1, #1
  4008de:	fa01 f303 	lsl.w	r3, r1, r3
  4008e2:	61fa      	str	r2, [r7, #28]
  4008e4:	61bb      	str	r3, [r7, #24]
  4008e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4008ea:	75fb      	strb	r3, [r7, #23]
  4008ec:	69fb      	ldr	r3, [r7, #28]
  4008ee:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4008f0:	693a      	ldr	r2, [r7, #16]
  4008f2:	4b23      	ldr	r3, [pc, #140]	; (400980 <ioport_set_pin_sense_mode+0xcc>)
  4008f4:	4413      	add	r3, r2
  4008f6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4008f8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4008fa:	7dfb      	ldrb	r3, [r7, #23]
  4008fc:	3b01      	subs	r3, #1
  4008fe:	2b03      	cmp	r3, #3
  400900:	d82e      	bhi.n	400960 <ioport_set_pin_sense_mode+0xac>
  400902:	a201      	add	r2, pc, #4	; (adr r2, 400908 <ioport_set_pin_sense_mode+0x54>)
  400904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400908:	0040093d 	.word	0x0040093d
  40090c:	0040094f 	.word	0x0040094f
  400910:	00400919 	.word	0x00400919
  400914:	0040092b 	.word	0x0040092b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  400918:	68fb      	ldr	r3, [r7, #12]
  40091a:	69ba      	ldr	r2, [r7, #24]
  40091c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  400920:	68fb      	ldr	r3, [r7, #12]
  400922:	69ba      	ldr	r2, [r7, #24]
  400924:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  400928:	e01f      	b.n	40096a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40092a:	68fb      	ldr	r3, [r7, #12]
  40092c:	69ba      	ldr	r2, [r7, #24]
  40092e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  400932:	68fb      	ldr	r3, [r7, #12]
  400934:	69ba      	ldr	r2, [r7, #24]
  400936:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40093a:	e016      	b.n	40096a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  40093c:	68fb      	ldr	r3, [r7, #12]
  40093e:	69ba      	ldr	r2, [r7, #24]
  400940:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  400944:	68fb      	ldr	r3, [r7, #12]
  400946:	69ba      	ldr	r2, [r7, #24]
  400948:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  40094c:	e00d      	b.n	40096a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40094e:	68fb      	ldr	r3, [r7, #12]
  400950:	69ba      	ldr	r2, [r7, #24]
  400952:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400956:	68fb      	ldr	r3, [r7, #12]
  400958:	69ba      	ldr	r2, [r7, #24]
  40095a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  40095e:	e004      	b.n	40096a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  400960:	68fb      	ldr	r3, [r7, #12]
  400962:	69ba      	ldr	r2, [r7, #24]
  400964:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  400968:	e003      	b.n	400972 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  40096a:	68fb      	ldr	r3, [r7, #12]
  40096c:	69ba      	ldr	r2, [r7, #24]
  40096e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400972:	bf00      	nop
  400974:	3734      	adds	r7, #52	; 0x34
  400976:	46bd      	mov	sp, r7
  400978:	f85d 7b04 	ldr.w	r7, [sp], #4
  40097c:	4770      	bx	lr
  40097e:	bf00      	nop
  400980:	00200707 	.word	0x00200707

00400984 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  400984:	b480      	push	{r7}
  400986:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40098c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400990:	4a0c      	ldr	r2, [pc, #48]	; (4009c4 <tcm_disable+0x40>)
  400992:	4b0c      	ldr	r3, [pc, #48]	; (4009c4 <tcm_disable+0x40>)
  400994:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  400998:	f023 0301 	bic.w	r3, r3, #1
  40099c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4009a0:	4a08      	ldr	r2, [pc, #32]	; (4009c4 <tcm_disable+0x40>)
  4009a2:	4b08      	ldr	r3, [pc, #32]	; (4009c4 <tcm_disable+0x40>)
  4009a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  4009a8:	f023 0301 	bic.w	r3, r3, #1
  4009ac:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  4009b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009b4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  4009b8:	bf00      	nop
  4009ba:	46bd      	mov	sp, r7
  4009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4009c0:	4770      	bx	lr
  4009c2:	bf00      	nop
  4009c4:	e000ed00 	.word	0xe000ed00

004009c8 <board_init>:
#endif

void board_init(void)
{
  4009c8:	b580      	push	{r7, lr}
  4009ca:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4009cc:	4b1c      	ldr	r3, [pc, #112]	; (400a40 <board_init+0x78>)
  4009ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4009d2:	605a      	str	r2, [r3, #4]
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009d4:	4b1b      	ldr	r3, [pc, #108]	; (400a44 <board_init+0x7c>)
  4009d6:	4a1c      	ldr	r2, [pc, #112]	; (400a48 <board_init+0x80>)
  4009d8:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4009da:	4b1a      	ldr	r3, [pc, #104]	; (400a44 <board_init+0x7c>)
  4009dc:	4a1b      	ldr	r2, [pc, #108]	; (400a4c <board_init+0x84>)
  4009de:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  4009e0:	4b1b      	ldr	r3, [pc, #108]	; (400a50 <board_init+0x88>)
  4009e2:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4009e4:	4b1b      	ldr	r3, [pc, #108]	; (400a54 <board_init+0x8c>)
  4009e6:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  4009e8:	2101      	movs	r1, #1
  4009ea:	2048      	movs	r0, #72	; 0x48
  4009ec:	4b1a      	ldr	r3, [pc, #104]	; (400a58 <board_init+0x90>)
  4009ee:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  4009f0:	2101      	movs	r1, #1
  4009f2:	2048      	movs	r0, #72	; 0x48
  4009f4:	4b19      	ldr	r3, [pc, #100]	; (400a5c <board_init+0x94>)
  4009f6:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  4009f8:	2100      	movs	r1, #0
  4009fa:	200b      	movs	r0, #11
  4009fc:	4b16      	ldr	r3, [pc, #88]	; (400a58 <board_init+0x90>)
  4009fe:	4798      	blx	r3
  400a00:	2188      	movs	r1, #136	; 0x88
  400a02:	200b      	movs	r0, #11
  400a04:	4b16      	ldr	r3, [pc, #88]	; (400a60 <board_init+0x98>)
  400a06:	4798      	blx	r3
  400a08:	2102      	movs	r1, #2
  400a0a:	200b      	movs	r0, #11
  400a0c:	4b15      	ldr	r3, [pc, #84]	; (400a64 <board_init+0x9c>)
  400a0e:	4798      	blx	r3
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
  400a10:	2100      	movs	r1, #0
  400a12:	2015      	movs	r0, #21
  400a14:	4b12      	ldr	r3, [pc, #72]	; (400a60 <board_init+0x98>)
  400a16:	4798      	blx	r3
  400a18:	2015      	movs	r0, #21
  400a1a:	4b13      	ldr	r3, [pc, #76]	; (400a68 <board_init+0xa0>)
  400a1c:	4798      	blx	r3
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a1e:	4a13      	ldr	r2, [pc, #76]	; (400a6c <board_init+0xa4>)
  400a20:	4b12      	ldr	r3, [pc, #72]	; (400a6c <board_init+0xa4>)
  400a22:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
  400a26:	f043 0310 	orr.w	r3, r3, #16
  400a2a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	ioport_set_pin_peripheral_mode(USART1_TXD_GPIO, USART1_TXD_FLAGS);
  400a2e:	2103      	movs	r1, #3
  400a30:	2024      	movs	r0, #36	; 0x24
  400a32:	4b0b      	ldr	r3, [pc, #44]	; (400a60 <board_init+0x98>)
  400a34:	4798      	blx	r3
  400a36:	2024      	movs	r0, #36	; 0x24
  400a38:	4b0b      	ldr	r3, [pc, #44]	; (400a68 <board_init+0xa0>)
  400a3a:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  400a3c:	bf00      	nop
  400a3e:	bd80      	pop	{r7, pc}
  400a40:	400e1850 	.word	0x400e1850
  400a44:	400e0c00 	.word	0x400e0c00
  400a48:	5a00080c 	.word	0x5a00080c
  400a4c:	5a00070c 	.word	0x5a00070c
  400a50:	00400985 	.word	0x00400985
  400a54:	0040062d 	.word	0x0040062d
  400a58:	004007c1 	.word	0x004007c1
  400a5c:	00400849 	.word	0x00400849
  400a60:	004006a5 	.word	0x004006a5
  400a64:	004008b5 	.word	0x004008b5
  400a68:	00400659 	.word	0x00400659
  400a6c:	40088000 	.word	0x40088000

00400a70 <gmac_enable_receive>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC receiver, else to enable it.
 */
static inline void gmac_enable_receive(Gmac* p_gmac, uint8_t uc_enable)
{
  400a70:	b480      	push	{r7}
  400a72:	b083      	sub	sp, #12
  400a74:	af00      	add	r7, sp, #0
  400a76:	6078      	str	r0, [r7, #4]
  400a78:	460b      	mov	r3, r1
  400a7a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400a7c:	78fb      	ldrb	r3, [r7, #3]
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d006      	beq.n	400a90 <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  400a82:	687b      	ldr	r3, [r7, #4]
  400a84:	681b      	ldr	r3, [r3, #0]
  400a86:	f043 0204 	orr.w	r2, r3, #4
  400a8a:	687b      	ldr	r3, [r7, #4]
  400a8c:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
	}
}
  400a8e:	e005      	b.n	400a9c <gmac_enable_receive+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  400a90:	687b      	ldr	r3, [r7, #4]
  400a92:	681b      	ldr	r3, [r3, #0]
  400a94:	f023 0204 	bic.w	r2, r3, #4
  400a98:	687b      	ldr	r3, [r7, #4]
  400a9a:	601a      	str	r2, [r3, #0]
}
  400a9c:	bf00      	nop
  400a9e:	370c      	adds	r7, #12
  400aa0:	46bd      	mov	sp, r7
  400aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400aa6:	4770      	bx	lr

00400aa8 <gmac_enable_transmit>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC transmit, else to enable it.
 */
static inline void gmac_enable_transmit(Gmac* p_gmac, uint8_t uc_enable)
{
  400aa8:	b480      	push	{r7}
  400aaa:	b083      	sub	sp, #12
  400aac:	af00      	add	r7, sp, #0
  400aae:	6078      	str	r0, [r7, #4]
  400ab0:	460b      	mov	r3, r1
  400ab2:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400ab4:	78fb      	ldrb	r3, [r7, #3]
  400ab6:	2b00      	cmp	r3, #0
  400ab8:	d006      	beq.n	400ac8 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  400aba:	687b      	ldr	r3, [r7, #4]
  400abc:	681b      	ldr	r3, [r3, #0]
  400abe:	f043 0208 	orr.w	r2, r3, #8
  400ac2:	687b      	ldr	r3, [r7, #4]
  400ac4:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
	}
}
  400ac6:	e005      	b.n	400ad4 <gmac_enable_transmit+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  400ac8:	687b      	ldr	r3, [r7, #4]
  400aca:	681b      	ldr	r3, [r3, #0]
  400acc:	f023 0208 	bic.w	r2, r3, #8
  400ad0:	687b      	ldr	r3, [r7, #4]
  400ad2:	601a      	str	r2, [r3, #0]
}
  400ad4:	bf00      	nop
  400ad6:	370c      	adds	r7, #12
  400ad8:	46bd      	mov	sp, r7
  400ada:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ade:	4770      	bx	lr

00400ae0 <gmac_enable_management>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable GMAC management, else to enable it.
 */
static inline void gmac_enable_management(Gmac* p_gmac, uint8_t uc_enable)
{
  400ae0:	b480      	push	{r7}
  400ae2:	b083      	sub	sp, #12
  400ae4:	af00      	add	r7, sp, #0
  400ae6:	6078      	str	r0, [r7, #4]
  400ae8:	460b      	mov	r3, r1
  400aea:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400aec:	78fb      	ldrb	r3, [r7, #3]
  400aee:	2b00      	cmp	r3, #0
  400af0:	d006      	beq.n	400b00 <gmac_enable_management+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_MPE;
  400af2:	687b      	ldr	r3, [r7, #4]
  400af4:	681b      	ldr	r3, [r3, #0]
  400af6:	f043 0210 	orr.w	r2, r3, #16
  400afa:	687b      	ldr	r3, [r7, #4]
  400afc:	601a      	str	r2, [r3, #0]
	} else {
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
	}
}
  400afe:	e005      	b.n	400b0c <gmac_enable_management+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_MPE;
  400b00:	687b      	ldr	r3, [r7, #4]
  400b02:	681b      	ldr	r3, [r3, #0]
  400b04:	f023 0210 	bic.w	r2, r3, #16
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	601a      	str	r2, [r3, #0]
}
  400b0c:	bf00      	nop
  400b0e:	370c      	adds	r7, #12
  400b10:	46bd      	mov	sp, r7
  400b12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b16:	4770      	bx	lr

00400b18 <gmac_set_speed>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_speed 1 to indicate 100Mbps, 0 to 10Mbps.
 */
static inline void gmac_set_speed(Gmac* p_gmac, uint8_t uc_speed)
{
  400b18:	b480      	push	{r7}
  400b1a:	b083      	sub	sp, #12
  400b1c:	af00      	add	r7, sp, #0
  400b1e:	6078      	str	r0, [r7, #4]
  400b20:	460b      	mov	r3, r1
  400b22:	70fb      	strb	r3, [r7, #3]
	if (uc_speed) {
  400b24:	78fb      	ldrb	r3, [r7, #3]
  400b26:	2b00      	cmp	r3, #0
  400b28:	d006      	beq.n	400b38 <gmac_set_speed+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_SPD;
  400b2a:	687b      	ldr	r3, [r7, #4]
  400b2c:	685b      	ldr	r3, [r3, #4]
  400b2e:	f043 0201 	orr.w	r2, r3, #1
  400b32:	687b      	ldr	r3, [r7, #4]
  400b34:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
	}
}
  400b36:	e005      	b.n	400b44 <gmac_set_speed+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_SPD;
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	685b      	ldr	r3, [r3, #4]
  400b3c:	f023 0201 	bic.w	r2, r3, #1
  400b40:	687b      	ldr	r3, [r7, #4]
  400b42:	605a      	str	r2, [r3, #4]
}
  400b44:	bf00      	nop
  400b46:	370c      	adds	r7, #12
  400b48:	46bd      	mov	sp, r7
  400b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b4e:	4770      	bx	lr

00400b50 <gmac_enable_full_duplex>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param uc_enable   0 to disable the Full-Duplex mode, else to enable it.
 */
static inline void gmac_enable_full_duplex(Gmac* p_gmac, uint8_t uc_enable)
{
  400b50:	b480      	push	{r7}
  400b52:	b083      	sub	sp, #12
  400b54:	af00      	add	r7, sp, #0
  400b56:	6078      	str	r0, [r7, #4]
  400b58:	460b      	mov	r3, r1
  400b5a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  400b5c:	78fb      	ldrb	r3, [r7, #3]
  400b5e:	2b00      	cmp	r3, #0
  400b60:	d006      	beq.n	400b70 <gmac_enable_full_duplex+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_FD;
  400b62:	687b      	ldr	r3, [r7, #4]
  400b64:	685b      	ldr	r3, [r3, #4]
  400b66:	f043 0202 	orr.w	r2, r3, #2
  400b6a:	687b      	ldr	r3, [r7, #4]
  400b6c:	605a      	str	r2, [r3, #4]
	} else {
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
	}
}
  400b6e:	e005      	b.n	400b7c <gmac_enable_full_duplex+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_FD;
  400b70:	687b      	ldr	r3, [r7, #4]
  400b72:	685b      	ldr	r3, [r3, #4]
  400b74:	f023 0202 	bic.w	r2, r3, #2
  400b78:	687b      	ldr	r3, [r7, #4]
  400b7a:	605a      	str	r2, [r3, #4]
}
  400b7c:	bf00      	nop
  400b7e:	370c      	adds	r7, #12
  400b80:	46bd      	mov	sp, r7
  400b82:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b86:	4770      	bx	lr

00400b88 <gmac_set_mdc_clock>:
 * \param ul_mck   GMAC MCK.
 *
 * \return GMAC_OK if successfully.
 */
static inline uint8_t gmac_set_mdc_clock(Gmac* p_gmac, uint32_t ul_mck)
{
  400b88:	b480      	push	{r7}
  400b8a:	b085      	sub	sp, #20
  400b8c:	af00      	add	r7, sp, #0
  400b8e:	6078      	str	r0, [r7, #4]
  400b90:	6039      	str	r1, [r7, #0]
	uint32_t ul_clk;

	if (ul_mck > GMAC_MCK_SPEED_240MHZ) {
  400b92:	683b      	ldr	r3, [r7, #0]
  400b94:	4a20      	ldr	r2, [pc, #128]	; (400c18 <gmac_set_mdc_clock+0x90>)
  400b96:	4293      	cmp	r3, r2
  400b98:	d901      	bls.n	400b9e <gmac_set_mdc_clock+0x16>
		return GMAC_INVALID;
  400b9a:	23ff      	movs	r3, #255	; 0xff
  400b9c:	e036      	b.n	400c0c <gmac_set_mdc_clock+0x84>
	} else if (ul_mck > GMAC_MCK_SPEED_160MHZ) {
  400b9e:	683b      	ldr	r3, [r7, #0]
  400ba0:	4a1e      	ldr	r2, [pc, #120]	; (400c1c <gmac_set_mdc_clock+0x94>)
  400ba2:	4293      	cmp	r3, r2
  400ba4:	d903      	bls.n	400bae <gmac_set_mdc_clock+0x26>
		ul_clk = GMAC_NCFGR_CLK_MCK_96;
  400ba6:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
  400baa:	60fb      	str	r3, [r7, #12]
  400bac:	e021      	b.n	400bf2 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_120MHZ) {
  400bae:	683b      	ldr	r3, [r7, #0]
  400bb0:	4a1b      	ldr	r2, [pc, #108]	; (400c20 <gmac_set_mdc_clock+0x98>)
  400bb2:	4293      	cmp	r3, r2
  400bb4:	d903      	bls.n	400bbe <gmac_set_mdc_clock+0x36>
		ul_clk = GMAC_NCFGR_CLK_MCK_64;
  400bb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400bba:	60fb      	str	r3, [r7, #12]
  400bbc:	e019      	b.n	400bf2 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_80MHZ) {
  400bbe:	683b      	ldr	r3, [r7, #0]
  400bc0:	4a18      	ldr	r2, [pc, #96]	; (400c24 <gmac_set_mdc_clock+0x9c>)
  400bc2:	4293      	cmp	r3, r2
  400bc4:	d903      	bls.n	400bce <gmac_set_mdc_clock+0x46>
		ul_clk = GMAC_NCFGR_CLK_MCK_48;
  400bc6:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  400bca:	60fb      	str	r3, [r7, #12]
  400bcc:	e011      	b.n	400bf2 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_40MHZ) {
  400bce:	683b      	ldr	r3, [r7, #0]
  400bd0:	4a15      	ldr	r2, [pc, #84]	; (400c28 <gmac_set_mdc_clock+0xa0>)
  400bd2:	4293      	cmp	r3, r2
  400bd4:	d903      	bls.n	400bde <gmac_set_mdc_clock+0x56>
		ul_clk = GMAC_NCFGR_CLK_MCK_32;
  400bd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400bda:	60fb      	str	r3, [r7, #12]
  400bdc:	e009      	b.n	400bf2 <gmac_set_mdc_clock+0x6a>
	} else if (ul_mck > GMAC_MCK_SPEED_20MHZ) {
  400bde:	683b      	ldr	r3, [r7, #0]
  400be0:	4a12      	ldr	r2, [pc, #72]	; (400c2c <gmac_set_mdc_clock+0xa4>)
  400be2:	4293      	cmp	r3, r2
  400be4:	d903      	bls.n	400bee <gmac_set_mdc_clock+0x66>
		ul_clk = GMAC_NCFGR_CLK_MCK_16;
  400be6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400bea:	60fb      	str	r3, [r7, #12]
  400bec:	e001      	b.n	400bf2 <gmac_set_mdc_clock+0x6a>
	} else {
		ul_clk = GMAC_NCFGR_CLK_MCK_8;
  400bee:	2300      	movs	r3, #0
  400bf0:	60fb      	str	r3, [r7, #12]
	}
	p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CLK_Msk;
  400bf2:	687b      	ldr	r3, [r7, #4]
  400bf4:	685b      	ldr	r3, [r3, #4]
  400bf6:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
  400bfa:	687b      	ldr	r3, [r7, #4]
  400bfc:	605a      	str	r2, [r3, #4]
	p_gmac->GMAC_NCFGR |= ul_clk;
  400bfe:	687b      	ldr	r3, [r7, #4]
  400c00:	685a      	ldr	r2, [r3, #4]
  400c02:	68fb      	ldr	r3, [r7, #12]
  400c04:	431a      	orrs	r2, r3
  400c06:	687b      	ldr	r3, [r7, #4]
  400c08:	605a      	str	r2, [r3, #4]
	return GMAC_OK;
  400c0a:	2300      	movs	r3, #0
}
  400c0c:	4618      	mov	r0, r3
  400c0e:	3714      	adds	r7, #20
  400c10:	46bd      	mov	sp, r7
  400c12:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c16:	4770      	bx	lr
  400c18:	0e4e1c00 	.word	0x0e4e1c00
  400c1c:	09896800 	.word	0x09896800
  400c20:	07270e00 	.word	0x07270e00
  400c24:	04c4b400 	.word	0x04c4b400
  400c28:	02625a00 	.word	0x02625a00
  400c2c:	01312d00 	.word	0x01312d00

00400c30 <gmac_select_mii_mode>:
		break;
	}
}
#else
static inline void gmac_select_mii_mode(Gmac* p_gmac, gmac_mii_mode_t mode)
{
  400c30:	b480      	push	{r7}
  400c32:	b083      	sub	sp, #12
  400c34:	af00      	add	r7, sp, #0
  400c36:	6078      	str	r0, [r7, #4]
  400c38:	460b      	mov	r3, r1
  400c3a:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
  400c3c:	78fb      	ldrb	r3, [r7, #3]
  400c3e:	2b00      	cmp	r3, #0
  400c40:	d106      	bne.n	400c50 <gmac_select_mii_mode+0x20>
		case GMAC_PHY_MII:
			p_gmac->GMAC_UR |= GMAC_UR_RMII;
  400c42:	687b      	ldr	r3, [r7, #4]
  400c44:	68db      	ldr	r3, [r3, #12]
  400c46:	f043 0201 	orr.w	r2, r3, #1
  400c4a:	687b      	ldr	r3, [r7, #4]
  400c4c:	60da      	str	r2, [r3, #12]
			break;
  400c4e:	e006      	b.n	400c5e <gmac_select_mii_mode+0x2e>

		case GMAC_PHY_RMII:
		default:
			p_gmac->GMAC_UR &= ~GMAC_UR_RMII;
  400c50:	687b      	ldr	r3, [r7, #4]
  400c52:	68db      	ldr	r3, [r3, #12]
  400c54:	f023 0201 	bic.w	r2, r3, #1
  400c58:	687b      	ldr	r3, [r7, #4]
  400c5a:	60da      	str	r2, [r3, #12]
			break;
  400c5c:	bf00      	nop
	}
}
  400c5e:	bf00      	nop
  400c60:	370c      	adds	r7, #12
  400c62:	46bd      	mov	sp, r7
  400c64:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c68:	4770      	bx	lr
	...

00400c6c <ethernet_phy_find_valid>:
 *
 * \return 0xFF when no valid PHY address is found.
 */
static uint8_t ethernet_phy_find_valid(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_start_addr)
{
  400c6c:	b590      	push	{r4, r7, lr}
  400c6e:	b085      	sub	sp, #20
  400c70:	af00      	add	r7, sp, #0
  400c72:	6078      	str	r0, [r7, #4]
  400c74:	460b      	mov	r3, r1
  400c76:	70fb      	strb	r3, [r7, #3]
  400c78:	4613      	mov	r3, r2
  400c7a:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_value = 0;
  400c7c:	2300      	movs	r3, #0
  400c7e:	60bb      	str	r3, [r7, #8]
	uint8_t uc_rc = 0;
  400c80:	2300      	movs	r3, #0
  400c82:	73fb      	strb	r3, [r7, #15]
	uint8_t uc_cnt;
	uint8_t uc_phy_address = uc_phy_addr;
  400c84:	78fb      	ldrb	r3, [r7, #3]
  400c86:	737b      	strb	r3, [r7, #13]

	gmac_enable_management(p_gmac, true);
  400c88:	2101      	movs	r1, #1
  400c8a:	6878      	ldr	r0, [r7, #4]
  400c8c:	4b1f      	ldr	r3, [pc, #124]	; (400d0c <ethernet_phy_find_valid+0xa0>)
  400c8e:	4798      	blx	r3
    uc_rc = uc_phy_address;
  400c90:	7b7b      	ldrb	r3, [r7, #13]
  400c92:	73fb      	strb	r3, [r7, #15]
	/* Check the current PHY address */
	gmac_phy_read(p_gmac, uc_phy_addr, GMII_PHYID1, &ul_value);
  400c94:	f107 0308 	add.w	r3, r7, #8
  400c98:	78f9      	ldrb	r1, [r7, #3]
  400c9a:	2202      	movs	r2, #2
  400c9c:	6878      	ldr	r0, [r7, #4]
  400c9e:	4c1c      	ldr	r4, [pc, #112]	; (400d10 <ethernet_phy_find_valid+0xa4>)
  400ca0:	47a0      	blx	r4

	/* Find another one */
	if (ul_value != GMII_OUI_MSB) {
  400ca2:	68bb      	ldr	r3, [r7, #8]
  400ca4:	2b22      	cmp	r3, #34	; 0x22
  400ca6:	d01d      	beq.n	400ce4 <ethernet_phy_find_valid+0x78>
		uc_rc = 0xFF;
  400ca8:	23ff      	movs	r3, #255	; 0xff
  400caa:	73fb      	strb	r3, [r7, #15]
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400cac:	78bb      	ldrb	r3, [r7, #2]
  400cae:	73bb      	strb	r3, [r7, #14]
  400cb0:	e015      	b.n	400cde <ethernet_phy_find_valid+0x72>
			uc_phy_address = (uc_phy_address + 1) & 0x1F;
  400cb2:	7b7b      	ldrb	r3, [r7, #13]
  400cb4:	3301      	adds	r3, #1
  400cb6:	b2db      	uxtb	r3, r3
  400cb8:	f003 031f 	and.w	r3, r3, #31
  400cbc:	737b      	strb	r3, [r7, #13]
			gmac_phy_read(p_gmac, uc_phy_address, GMII_PHYID1, &ul_value);
  400cbe:	f107 0308 	add.w	r3, r7, #8
  400cc2:	7b79      	ldrb	r1, [r7, #13]
  400cc4:	2202      	movs	r2, #2
  400cc6:	6878      	ldr	r0, [r7, #4]
  400cc8:	4c11      	ldr	r4, [pc, #68]	; (400d10 <ethernet_phy_find_valid+0xa4>)
  400cca:	47a0      	blx	r4
			if (ul_value == GMII_OUI_MSB) {
  400ccc:	68bb      	ldr	r3, [r7, #8]
  400cce:	2b22      	cmp	r3, #34	; 0x22
  400cd0:	d102      	bne.n	400cd8 <ethernet_phy_find_valid+0x6c>
				uc_rc = uc_phy_address;
  400cd2:	7b7b      	ldrb	r3, [r7, #13]
  400cd4:	73fb      	strb	r3, [r7, #15]
				break;
  400cd6:	e005      	b.n	400ce4 <ethernet_phy_find_valid+0x78>
		for (uc_cnt = uc_start_addr; uc_cnt <= ETH_PHY_MAX_ADDR; uc_cnt++) {
  400cd8:	7bbb      	ldrb	r3, [r7, #14]
  400cda:	3301      	adds	r3, #1
  400cdc:	73bb      	strb	r3, [r7, #14]
  400cde:	7bbb      	ldrb	r3, [r7, #14]
  400ce0:	2b1f      	cmp	r3, #31
  400ce2:	d9e6      	bls.n	400cb2 <ethernet_phy_find_valid+0x46>
			}
		}
	}

	gmac_enable_management(p_gmac, false);
  400ce4:	2100      	movs	r1, #0
  400ce6:	6878      	ldr	r0, [r7, #4]
  400ce8:	4b08      	ldr	r3, [pc, #32]	; (400d0c <ethernet_phy_find_valid+0xa0>)
  400cea:	4798      	blx	r3

	if (uc_rc != 0xFF) {
  400cec:	7bfb      	ldrb	r3, [r7, #15]
  400cee:	2bff      	cmp	r3, #255	; 0xff
  400cf0:	d006      	beq.n	400d00 <ethernet_phy_find_valid+0x94>
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_value);
  400cf2:	f107 0308 	add.w	r3, r7, #8
  400cf6:	7b79      	ldrb	r1, [r7, #13]
  400cf8:	2201      	movs	r2, #1
  400cfa:	6878      	ldr	r0, [r7, #4]
  400cfc:	4c04      	ldr	r4, [pc, #16]	; (400d10 <ethernet_phy_find_valid+0xa4>)
  400cfe:	47a0      	blx	r4
	}
	return uc_rc;
  400d00:	7bfb      	ldrb	r3, [r7, #15]
}
  400d02:	4618      	mov	r0, r3
  400d04:	3714      	adds	r7, #20
  400d06:	46bd      	mov	sp, r7
  400d08:	bd90      	pop	{r4, r7, pc}
  400d0a:	bf00      	nop
  400d0c:	00400ae1 	.word	0x00400ae1
  400d10:	004012f1 	.word	0x004012f1

00400d14 <ethernet_phy_init>:
 * \param ul_mck GMAC MCK.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_init(Gmac *p_gmac, uint8_t uc_phy_addr, uint32_t mck)
{
  400d14:	b590      	push	{r4, r7, lr}
  400d16:	b089      	sub	sp, #36	; 0x24
  400d18:	af02      	add	r7, sp, #8
  400d1a:	60f8      	str	r0, [r7, #12]
  400d1c:	460b      	mov	r3, r1
  400d1e:	607a      	str	r2, [r7, #4]
  400d20:	72fb      	strb	r3, [r7, #11]
	uint8_t uc_rc;
	uint8_t uc_phy;

	pio_set_output(PIN_GMAC_RESET_PIO, PIN_GMAC_RESET_MASK, 1,  false, true);
  400d22:	2301      	movs	r3, #1
  400d24:	9300      	str	r3, [sp, #0]
  400d26:	2300      	movs	r3, #0
  400d28:	2201      	movs	r2, #1
  400d2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400d2e:	481d      	ldr	r0, [pc, #116]	; (400da4 <ethernet_phy_init+0x90>)
  400d30:	4c1d      	ldr	r4, [pc, #116]	; (400da8 <ethernet_phy_init+0x94>)
  400d32:	47a0      	blx	r4
	pio_set_input(PIN_GMAC_INT_PIO, PIN_GMAC_INT_MASK, PIO_PULLUP);
  400d34:	2201      	movs	r2, #1
  400d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  400d3a:	481c      	ldr	r0, [pc, #112]	; (400dac <ethernet_phy_init+0x98>)
  400d3c:	4b1c      	ldr	r3, [pc, #112]	; (400db0 <ethernet_phy_init+0x9c>)
  400d3e:	4798      	blx	r3
	pio_set_peripheral(PIN_GMAC_PIO, PIN_GMAC_PERIPH, PIN_GMAC_MASK);
  400d40:	f240 32ff 	movw	r2, #1023	; 0x3ff
  400d44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400d48:	481a      	ldr	r0, [pc, #104]	; (400db4 <ethernet_phy_init+0xa0>)
  400d4a:	4b1b      	ldr	r3, [pc, #108]	; (400db8 <ethernet_phy_init+0xa4>)
  400d4c:	4798      	blx	r3

	ethernet_phy_reset(GMAC,uc_phy_addr);
  400d4e:	7afb      	ldrb	r3, [r7, #11]
  400d50:	4619      	mov	r1, r3
  400d52:	481a      	ldr	r0, [pc, #104]	; (400dbc <ethernet_phy_init+0xa8>)
  400d54:	4b1a      	ldr	r3, [pc, #104]	; (400dc0 <ethernet_phy_init+0xac>)
  400d56:	4798      	blx	r3

	/* Configure GMAC runtime clock */
	uc_rc = gmac_set_mdc_clock(p_gmac, mck);
  400d58:	6879      	ldr	r1, [r7, #4]
  400d5a:	68f8      	ldr	r0, [r7, #12]
  400d5c:	4b19      	ldr	r3, [pc, #100]	; (400dc4 <ethernet_phy_init+0xb0>)
  400d5e:	4798      	blx	r3
  400d60:	4603      	mov	r3, r0
  400d62:	75fb      	strb	r3, [r7, #23]
	if (uc_rc != GMAC_OK) {
  400d64:	7dfb      	ldrb	r3, [r7, #23]
  400d66:	2b00      	cmp	r3, #0
  400d68:	d001      	beq.n	400d6e <ethernet_phy_init+0x5a>
		return 0;
  400d6a:	2300      	movs	r3, #0
  400d6c:	e016      	b.n	400d9c <ethernet_phy_init+0x88>
	}

	/* Check PHY Address */
	uc_phy = ethernet_phy_find_valid(p_gmac, uc_phy_addr, 0);
  400d6e:	7afb      	ldrb	r3, [r7, #11]
  400d70:	2200      	movs	r2, #0
  400d72:	4619      	mov	r1, r3
  400d74:	68f8      	ldr	r0, [r7, #12]
  400d76:	4b14      	ldr	r3, [pc, #80]	; (400dc8 <ethernet_phy_init+0xb4>)
  400d78:	4798      	blx	r3
  400d7a:	4603      	mov	r3, r0
  400d7c:	75bb      	strb	r3, [r7, #22]
	if (uc_phy == 0xFF) {
  400d7e:	7dbb      	ldrb	r3, [r7, #22]
  400d80:	2bff      	cmp	r3, #255	; 0xff
  400d82:	d101      	bne.n	400d88 <ethernet_phy_init+0x74>
		return 0;
  400d84:	2300      	movs	r3, #0
  400d86:	e009      	b.n	400d9c <ethernet_phy_init+0x88>
	}
	if (uc_phy != uc_phy_addr) {
  400d88:	7dba      	ldrb	r2, [r7, #22]
  400d8a:	7afb      	ldrb	r3, [r7, #11]
  400d8c:	429a      	cmp	r2, r3
  400d8e:	d004      	beq.n	400d9a <ethernet_phy_init+0x86>
		ethernet_phy_reset(p_gmac, uc_phy_addr);
  400d90:	7afb      	ldrb	r3, [r7, #11]
  400d92:	4619      	mov	r1, r3
  400d94:	68f8      	ldr	r0, [r7, #12]
  400d96:	4b0a      	ldr	r3, [pc, #40]	; (400dc0 <ethernet_phy_init+0xac>)
  400d98:	4798      	blx	r3
	}

	return uc_rc;
  400d9a:	7dfb      	ldrb	r3, [r7, #23]
}
  400d9c:	4618      	mov	r0, r3
  400d9e:	371c      	adds	r7, #28
  400da0:	46bd      	mov	sp, r7
  400da2:	bd90      	pop	{r4, r7, pc}
  400da4:	400e1200 	.word	0x400e1200
  400da8:	00401555 	.word	0x00401555
  400dac:	400e0e00 	.word	0x400e0e00
  400db0:	004014d5 	.word	0x004014d5
  400db4:	400e1400 	.word	0x400e1400
  400db8:	004013c5 	.word	0x004013c5
  400dbc:	40050000 	.word	0x40050000
  400dc0:	0040117d 	.word	0x0040117d
  400dc4:	00400b89 	.word	0x00400b89
  400dc8:	00400c6d 	.word	0x00400c6d

00400dcc <ethernet_phy_set_link>:
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_set_link(Gmac *p_gmac, uint8_t uc_phy_addr,
		uint8_t uc_apply_setting_flag)
{
  400dcc:	b590      	push	{r4, r7, lr}
  400dce:	b087      	sub	sp, #28
  400dd0:	af00      	add	r7, sp, #0
  400dd2:	6078      	str	r0, [r7, #4]
  400dd4:	460b      	mov	r3, r1
  400dd6:	70fb      	strb	r3, [r7, #3]
  400dd8:	4613      	mov	r3, r2
  400dda:	70bb      	strb	r3, [r7, #2]
	uint32_t ul_stat1;
	uint32_t ul_stat2;
	uint8_t uc_phy_address, uc_speed, uc_fd;
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400ddc:	2101      	movs	r1, #1
  400dde:	6878      	ldr	r0, [r7, #4]
  400de0:	4b43      	ldr	r3, [pc, #268]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400de2:	4798      	blx	r3

	uc_phy_address = uc_phy_addr;
  400de4:	78fb      	ldrb	r3, [r7, #3]
  400de6:	757b      	strb	r3, [r7, #21]

	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_BMSR, &ul_stat1);
  400de8:	f107 0310 	add.w	r3, r7, #16
  400dec:	7d79      	ldrb	r1, [r7, #21]
  400dee:	2201      	movs	r2, #1
  400df0:	6878      	ldr	r0, [r7, #4]
  400df2:	4c40      	ldr	r4, [pc, #256]	; (400ef4 <ethernet_phy_set_link+0x128>)
  400df4:	47a0      	blx	r4
  400df6:	4603      	mov	r3, r0
  400df8:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400dfa:	7d3b      	ldrb	r3, [r7, #20]
  400dfc:	2b00      	cmp	r3, #0
  400dfe:	d005      	beq.n	400e0c <ethernet_phy_set_link+0x40>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400e00:	2100      	movs	r1, #0
  400e02:	6878      	ldr	r0, [r7, #4]
  400e04:	4b3a      	ldr	r3, [pc, #232]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400e06:	4798      	blx	r3

		return uc_rc;
  400e08:	7d3b      	ldrb	r3, [r7, #20]
  400e0a:	e06c      	b.n	400ee6 <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_LINK_STATUS) == 0) {
  400e0c:	693b      	ldr	r3, [r7, #16]
  400e0e:	f003 0304 	and.w	r3, r3, #4
  400e12:	2b00      	cmp	r3, #0
  400e14:	d105      	bne.n	400e22 <ethernet_phy_set_link+0x56>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400e16:	2100      	movs	r1, #0
  400e18:	6878      	ldr	r0, [r7, #4]
  400e1a:	4b35      	ldr	r3, [pc, #212]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400e1c:	4798      	blx	r3

		return GMAC_INVALID;
  400e1e:	23ff      	movs	r3, #255	; 0xff
  400e20:	e061      	b.n	400ee6 <ethernet_phy_set_link+0x11a>
	}

	if (uc_apply_setting_flag == 0) {
  400e22:	78bb      	ldrb	r3, [r7, #2]
  400e24:	2b00      	cmp	r3, #0
  400e26:	d105      	bne.n	400e34 <ethernet_phy_set_link+0x68>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400e28:	2100      	movs	r1, #0
  400e2a:	6878      	ldr	r0, [r7, #4]
  400e2c:	4b30      	ldr	r3, [pc, #192]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400e2e:	4798      	blx	r3

		return uc_rc;
  400e30:	7d3b      	ldrb	r3, [r7, #20]
  400e32:	e058      	b.n	400ee6 <ethernet_phy_set_link+0x11a>
	}

	/* Read advertisement */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_address, GMII_PCR1, &ul_stat2);
  400e34:	f107 030c 	add.w	r3, r7, #12
  400e38:	7d79      	ldrb	r1, [r7, #21]
  400e3a:	221e      	movs	r2, #30
  400e3c:	6878      	ldr	r0, [r7, #4]
  400e3e:	4c2d      	ldr	r4, [pc, #180]	; (400ef4 <ethernet_phy_set_link+0x128>)
  400e40:	47a0      	blx	r4
  400e42:	4603      	mov	r3, r0
  400e44:	753b      	strb	r3, [r7, #20]
	if (uc_rc != GMAC_OK) {
  400e46:	7d3b      	ldrb	r3, [r7, #20]
  400e48:	2b00      	cmp	r3, #0
  400e4a:	d005      	beq.n	400e58 <ethernet_phy_set_link+0x8c>
		/* Disable PHY management and start the GMAC transfer */
		gmac_enable_management(p_gmac, false);
  400e4c:	2100      	movs	r1, #0
  400e4e:	6878      	ldr	r0, [r7, #4]
  400e50:	4b27      	ldr	r3, [pc, #156]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400e52:	4798      	blx	r3

		return uc_rc;
  400e54:	7d3b      	ldrb	r3, [r7, #20]
  400e56:	e046      	b.n	400ee6 <ethernet_phy_set_link+0x11a>
	}

	if ((ul_stat1 & GMII_100BASE_TX_FD) && (ul_stat2 & GMII_OMI_100BASE_TX_FD)) {
  400e58:	693b      	ldr	r3, [r7, #16]
  400e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  400e5e:	2b00      	cmp	r3, #0
  400e60:	d008      	beq.n	400e74 <ethernet_phy_set_link+0xa8>
  400e62:	68fb      	ldr	r3, [r7, #12]
  400e64:	f003 0306 	and.w	r3, r3, #6
  400e68:	2b00      	cmp	r3, #0
  400e6a:	d003      	beq.n	400e74 <ethernet_phy_set_link+0xa8>
		/* Set GMAC for 100BaseTX and Full Duplex */
		uc_speed = true;
  400e6c:	2301      	movs	r3, #1
  400e6e:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400e70:	2301      	movs	r3, #1
  400e72:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_FD) && (ul_stat2 & GMII_OMI_10BASE_T_FD)) {
  400e74:	693b      	ldr	r3, [r7, #16]
  400e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  400e7a:	2b00      	cmp	r3, #0
  400e7c:	d008      	beq.n	400e90 <ethernet_phy_set_link+0xc4>
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	f003 0305 	and.w	r3, r3, #5
  400e84:	2b00      	cmp	r3, #0
  400e86:	d003      	beq.n	400e90 <ethernet_phy_set_link+0xc4>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  400e88:	2300      	movs	r3, #0
  400e8a:	75fb      	strb	r3, [r7, #23]
		uc_fd = true;
  400e8c:	2301      	movs	r3, #1
  400e8e:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_100BASE_TX_HD) && (ul_stat2 & GMII_OMI_100BASE_TX_HD)) {
  400e90:	693b      	ldr	r3, [r7, #16]
  400e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  400e96:	2b00      	cmp	r3, #0
  400e98:	d008      	beq.n	400eac <ethernet_phy_set_link+0xe0>
  400e9a:	68fb      	ldr	r3, [r7, #12]
  400e9c:	f003 0302 	and.w	r3, r3, #2
  400ea0:	2b00      	cmp	r3, #0
  400ea2:	d003      	beq.n	400eac <ethernet_phy_set_link+0xe0>
		/* Set MII for 100BaseTX and Half Duplex */
		uc_speed = true;
  400ea4:	2301      	movs	r3, #1
  400ea6:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400ea8:	2300      	movs	r3, #0
  400eaa:	75bb      	strb	r3, [r7, #22]
	}

	if ((ul_stat1 & GMII_10BASE_T_HD) && (ul_stat2 & GMII_OMI_10BASE_T_HD)) {
  400eac:	693b      	ldr	r3, [r7, #16]
  400eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  400eb2:	2b00      	cmp	r3, #0
  400eb4:	d008      	beq.n	400ec8 <ethernet_phy_set_link+0xfc>
  400eb6:	68fb      	ldr	r3, [r7, #12]
  400eb8:	f003 0301 	and.w	r3, r3, #1
  400ebc:	2b00      	cmp	r3, #0
  400ebe:	d003      	beq.n	400ec8 <ethernet_phy_set_link+0xfc>
		/* Set MII for 10BaseT and Half Duplex */
		uc_speed = false;
  400ec0:	2300      	movs	r3, #0
  400ec2:	75fb      	strb	r3, [r7, #23]
		uc_fd = false;
  400ec4:	2300      	movs	r3, #0
  400ec6:	75bb      	strb	r3, [r7, #22]
	}

	gmac_set_speed(p_gmac, uc_speed);
  400ec8:	7dfb      	ldrb	r3, [r7, #23]
  400eca:	4619      	mov	r1, r3
  400ecc:	6878      	ldr	r0, [r7, #4]
  400ece:	4b0a      	ldr	r3, [pc, #40]	; (400ef8 <ethernet_phy_set_link+0x12c>)
  400ed0:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  400ed2:	7dbb      	ldrb	r3, [r7, #22]
  400ed4:	4619      	mov	r1, r3
  400ed6:	6878      	ldr	r0, [r7, #4]
  400ed8:	4b08      	ldr	r3, [pc, #32]	; (400efc <ethernet_phy_set_link+0x130>)
  400eda:	4798      	blx	r3

	/* Start the GMAC transfers */
	gmac_enable_management(p_gmac, false);
  400edc:	2100      	movs	r1, #0
  400ede:	6878      	ldr	r0, [r7, #4]
  400ee0:	4b03      	ldr	r3, [pc, #12]	; (400ef0 <ethernet_phy_set_link+0x124>)
  400ee2:	4798      	blx	r3
	return uc_rc;
  400ee4:	7d3b      	ldrb	r3, [r7, #20]
}
  400ee6:	4618      	mov	r0, r3
  400ee8:	371c      	adds	r7, #28
  400eea:	46bd      	mov	sp, r7
  400eec:	bd90      	pop	{r4, r7, pc}
  400eee:	bf00      	nop
  400ef0:	00400ae1 	.word	0x00400ae1
  400ef4:	004012f1 	.word	0x004012f1
  400ef8:	00400b19 	.word	0x00400b19
  400efc:	00400b51 	.word	0x00400b51

00400f00 <ethernet_phy_auto_negotiate>:
 * \param uc_phy_addr PHY address.
 *
 * Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_auto_negotiate(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  400f00:	b590      	push	{r4, r7, lr}
  400f02:	b08b      	sub	sp, #44	; 0x2c
  400f04:	af00      	add	r7, sp, #0
  400f06:	6078      	str	r0, [r7, #4]
  400f08:	460b      	mov	r3, r1
  400f0a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_retry_max = ETH_PHY_RETRY_MAX;
  400f0c:	4b91      	ldr	r3, [pc, #580]	; (401154 <ethernet_phy_auto_negotiate+0x254>)
  400f0e:	61fb      	str	r3, [r7, #28]
	uint32_t ul_value;
	uint32_t ul_phy_anar;
	uint32_t ul_phy_analpar;
	uint32_t ul_retry_count = 0;
  400f10:	2300      	movs	r3, #0
  400f12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t uc_speed = 0;
  400f14:	2300      	movs	r3, #0
  400f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t uc_fd=0;
  400f1a:	2300      	movs	r3, #0
  400f1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t uc_rc;

	gmac_enable_management(p_gmac, true);
  400f20:	2101      	movs	r1, #1
  400f22:	6878      	ldr	r0, [r7, #4]
  400f24:	4b8c      	ldr	r3, [pc, #560]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400f26:	4798      	blx	r3

	/* Set up control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400f28:	f107 0310 	add.w	r3, r7, #16
  400f2c:	78f9      	ldrb	r1, [r7, #3]
  400f2e:	2200      	movs	r2, #0
  400f30:	6878      	ldr	r0, [r7, #4]
  400f32:	4c8a      	ldr	r4, [pc, #552]	; (40115c <ethernet_phy_auto_negotiate+0x25c>)
  400f34:	47a0      	blx	r4
  400f36:	4603      	mov	r3, r0
  400f38:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f3a:	7efb      	ldrb	r3, [r7, #27]
  400f3c:	2b00      	cmp	r3, #0
  400f3e:	d005      	beq.n	400f4c <ethernet_phy_auto_negotiate+0x4c>
		gmac_enable_management(p_gmac, false);
  400f40:	2100      	movs	r1, #0
  400f42:	6878      	ldr	r0, [r7, #4]
  400f44:	4b84      	ldr	r3, [pc, #528]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400f46:	4798      	blx	r3
		return uc_rc;
  400f48:	7efb      	ldrb	r3, [r7, #27]
  400f4a:	e0fe      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value &= ~(uint32_t)GMII_AUTONEG; /* Remove auto-negotiation enable */
  400f4c:	693b      	ldr	r3, [r7, #16]
  400f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  400f52:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)(GMII_LOOPBACK | GMII_POWER_DOWN);
  400f54:	693b      	ldr	r3, [r7, #16]
  400f56:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
  400f5a:	613b      	str	r3, [r7, #16]
	ul_value |= (uint32_t)GMII_ISOLATE; /* Electrically isolate PHY */
  400f5c:	693b      	ldr	r3, [r7, #16]
  400f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400f62:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400f64:	693b      	ldr	r3, [r7, #16]
  400f66:	78f9      	ldrb	r1, [r7, #3]
  400f68:	2200      	movs	r2, #0
  400f6a:	6878      	ldr	r0, [r7, #4]
  400f6c:	4c7c      	ldr	r4, [pc, #496]	; (401160 <ethernet_phy_auto_negotiate+0x260>)
  400f6e:	47a0      	blx	r4
  400f70:	4603      	mov	r3, r0
  400f72:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f74:	7efb      	ldrb	r3, [r7, #27]
  400f76:	2b00      	cmp	r3, #0
  400f78:	d005      	beq.n	400f86 <ethernet_phy_auto_negotiate+0x86>
		gmac_enable_management(p_gmac, false);
  400f7a:	2100      	movs	r1, #0
  400f7c:	6878      	ldr	r0, [r7, #4]
  400f7e:	4b76      	ldr	r3, [pc, #472]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400f80:	4798      	blx	r3
		return uc_rc;
  400f82:	7efb      	ldrb	r3, [r7, #27]
  400f84:	e0e1      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	/*
	 * Set the Auto_negotiation Advertisement Register.
	 * MII advertising for Next page.
	 * 100BaseTxFD and HD, 10BaseTFD and HD, IEEE 802.3.
	 */
	ul_phy_anar = GMII_100TX_FDX | GMII_100TX_HDX | GMII_10_FDX | GMII_10_HDX |
  400f86:	f240 13e1 	movw	r3, #481	; 0x1e1
  400f8a:	617b      	str	r3, [r7, #20]
			GMII_AN_IEEE_802_3;
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_ANAR, ul_phy_anar);
  400f8c:	78f9      	ldrb	r1, [r7, #3]
  400f8e:	697b      	ldr	r3, [r7, #20]
  400f90:	2204      	movs	r2, #4
  400f92:	6878      	ldr	r0, [r7, #4]
  400f94:	4c72      	ldr	r4, [pc, #456]	; (401160 <ethernet_phy_auto_negotiate+0x260>)
  400f96:	47a0      	blx	r4
  400f98:	4603      	mov	r3, r0
  400f9a:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400f9c:	7efb      	ldrb	r3, [r7, #27]
  400f9e:	2b00      	cmp	r3, #0
  400fa0:	d005      	beq.n	400fae <ethernet_phy_auto_negotiate+0xae>
		gmac_enable_management(p_gmac, false);
  400fa2:	2100      	movs	r1, #0
  400fa4:	6878      	ldr	r0, [r7, #4]
  400fa6:	4b6c      	ldr	r3, [pc, #432]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400fa8:	4798      	blx	r3
		return uc_rc;
  400faa:	7efb      	ldrb	r3, [r7, #27]
  400fac:	e0cd      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Read & modify control register */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMCR, &ul_value);
  400fae:	f107 0310 	add.w	r3, r7, #16
  400fb2:	78f9      	ldrb	r1, [r7, #3]
  400fb4:	2200      	movs	r2, #0
  400fb6:	6878      	ldr	r0, [r7, #4]
  400fb8:	4c68      	ldr	r4, [pc, #416]	; (40115c <ethernet_phy_auto_negotiate+0x25c>)
  400fba:	47a0      	blx	r4
  400fbc:	4603      	mov	r3, r0
  400fbe:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400fc0:	7efb      	ldrb	r3, [r7, #27]
  400fc2:	2b00      	cmp	r3, #0
  400fc4:	d005      	beq.n	400fd2 <ethernet_phy_auto_negotiate+0xd2>
		gmac_enable_management(p_gmac, false);
  400fc6:	2100      	movs	r1, #0
  400fc8:	6878      	ldr	r0, [r7, #4]
  400fca:	4b63      	ldr	r3, [pc, #396]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400fcc:	4798      	blx	r3
		return uc_rc;
  400fce:	7efb      	ldrb	r3, [r7, #27]
  400fd0:	e0bb      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}

	ul_value |= GMII_SPEED_SELECT | GMII_AUTONEG | GMII_DUPLEX_MODE;
  400fd2:	693b      	ldr	r3, [r7, #16]
  400fd4:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
  400fd8:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  400fda:	693b      	ldr	r3, [r7, #16]
  400fdc:	78f9      	ldrb	r1, [r7, #3]
  400fde:	2200      	movs	r2, #0
  400fe0:	6878      	ldr	r0, [r7, #4]
  400fe2:	4c5f      	ldr	r4, [pc, #380]	; (401160 <ethernet_phy_auto_negotiate+0x260>)
  400fe4:	47a0      	blx	r4
  400fe6:	4603      	mov	r3, r0
  400fe8:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  400fea:	7efb      	ldrb	r3, [r7, #27]
  400fec:	2b00      	cmp	r3, #0
  400fee:	d005      	beq.n	400ffc <ethernet_phy_auto_negotiate+0xfc>
		gmac_enable_management(p_gmac, false);
  400ff0:	2100      	movs	r1, #0
  400ff2:	6878      	ldr	r0, [r7, #4]
  400ff4:	4b58      	ldr	r3, [pc, #352]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  400ff6:	4798      	blx	r3
		return uc_rc;
  400ff8:	7efb      	ldrb	r3, [r7, #27]
  400ffa:	e0a6      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Restart auto negotiation */
	ul_value |= (uint32_t)GMII_RESTART_AUTONEG;
  400ffc:	693b      	ldr	r3, [r7, #16]
  400ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  401002:	613b      	str	r3, [r7, #16]
	ul_value &= ~(uint32_t)GMII_ISOLATE;
  401004:	693b      	ldr	r3, [r7, #16]
  401006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  40100a:	613b      	str	r3, [r7, #16]
	uc_rc = gmac_phy_write(p_gmac, uc_phy_addr, GMII_BMCR, ul_value);
  40100c:	693b      	ldr	r3, [r7, #16]
  40100e:	78f9      	ldrb	r1, [r7, #3]
  401010:	2200      	movs	r2, #0
  401012:	6878      	ldr	r0, [r7, #4]
  401014:	4c52      	ldr	r4, [pc, #328]	; (401160 <ethernet_phy_auto_negotiate+0x260>)
  401016:	47a0      	blx	r4
  401018:	4603      	mov	r3, r0
  40101a:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  40101c:	7efb      	ldrb	r3, [r7, #27]
  40101e:	2b00      	cmp	r3, #0
  401020:	d005      	beq.n	40102e <ethernet_phy_auto_negotiate+0x12e>
		gmac_enable_management(p_gmac, false);
  401022:	2100      	movs	r1, #0
  401024:	6878      	ldr	r0, [r7, #4]
  401026:	4b4c      	ldr	r3, [pc, #304]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  401028:	4798      	blx	r3
		return uc_rc;
  40102a:	7efb      	ldrb	r3, [r7, #27]
  40102c:	e08d      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}

	/* Check if auto negotiation is completed */
	while (1) {
		uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_BMSR, &ul_value);
  40102e:	f107 0310 	add.w	r3, r7, #16
  401032:	78f9      	ldrb	r1, [r7, #3]
  401034:	2201      	movs	r2, #1
  401036:	6878      	ldr	r0, [r7, #4]
  401038:	4c48      	ldr	r4, [pc, #288]	; (40115c <ethernet_phy_auto_negotiate+0x25c>)
  40103a:	47a0      	blx	r4
  40103c:	4603      	mov	r3, r0
  40103e:	76fb      	strb	r3, [r7, #27]
		if (uc_rc != GMAC_OK) {
  401040:	7efb      	ldrb	r3, [r7, #27]
  401042:	2b00      	cmp	r3, #0
  401044:	d005      	beq.n	401052 <ethernet_phy_auto_negotiate+0x152>
			gmac_enable_management(p_gmac, false);
  401046:	2100      	movs	r1, #0
  401048:	6878      	ldr	r0, [r7, #4]
  40104a:	4b43      	ldr	r3, [pc, #268]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  40104c:	4798      	blx	r3
			return uc_rc;
  40104e:	7efb      	ldrb	r3, [r7, #27]
  401050:	e07b      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
		}
		/* Done successfully */
		if (ul_value & GMII_AUTONEG_COMP) {
  401052:	693b      	ldr	r3, [r7, #16]
  401054:	f003 0320 	and.w	r3, r3, #32
  401058:	2b00      	cmp	r3, #0
  40105a:	d10f      	bne.n	40107c <ethernet_phy_auto_negotiate+0x17c>
			break;
		}

		/* Timeout check */
		if (ul_retry_max) {
  40105c:	69fb      	ldr	r3, [r7, #28]
  40105e:	2b00      	cmp	r3, #0
  401060:	d0e5      	beq.n	40102e <ethernet_phy_auto_negotiate+0x12e>
			if (++ul_retry_count >= ul_retry_max) {
  401062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401064:	3301      	adds	r3, #1
  401066:	627b      	str	r3, [r7, #36]	; 0x24
  401068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40106a:	69fb      	ldr	r3, [r7, #28]
  40106c:	429a      	cmp	r2, r3
  40106e:	d3de      	bcc.n	40102e <ethernet_phy_auto_negotiate+0x12e>
				gmac_enable_management(p_gmac, false);
  401070:	2100      	movs	r1, #0
  401072:	6878      	ldr	r0, [r7, #4]
  401074:	4b38      	ldr	r3, [pc, #224]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  401076:	4798      	blx	r3
				return GMAC_TIMEOUT;
  401078:	2301      	movs	r3, #1
  40107a:	e066      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
			break;
  40107c:	bf00      	nop
			}
		}
	}

	/* Get the auto negotiate link partner base page */
	uc_rc = gmac_phy_read(p_gmac, uc_phy_addr, GMII_ANLPAR, &ul_phy_analpar);
  40107e:	f107 030c 	add.w	r3, r7, #12
  401082:	78f9      	ldrb	r1, [r7, #3]
  401084:	2205      	movs	r2, #5
  401086:	6878      	ldr	r0, [r7, #4]
  401088:	4c34      	ldr	r4, [pc, #208]	; (40115c <ethernet_phy_auto_negotiate+0x25c>)
  40108a:	47a0      	blx	r4
  40108c:	4603      	mov	r3, r0
  40108e:	76fb      	strb	r3, [r7, #27]
	if (uc_rc != GMAC_OK) {
  401090:	7efb      	ldrb	r3, [r7, #27]
  401092:	2b00      	cmp	r3, #0
  401094:	d005      	beq.n	4010a2 <ethernet_phy_auto_negotiate+0x1a2>
		gmac_enable_management(p_gmac, false);
  401096:	2100      	movs	r1, #0
  401098:	6878      	ldr	r0, [r7, #4]
  40109a:	4b2f      	ldr	r3, [pc, #188]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  40109c:	4798      	blx	r3
		return uc_rc;
  40109e:	7efb      	ldrb	r3, [r7, #27]
  4010a0:	e053      	b.n	40114a <ethernet_phy_auto_negotiate+0x24a>
	}


	/* Set up the GMAC link speed */
	if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_FDX) {
  4010a2:	68fa      	ldr	r2, [r7, #12]
  4010a4:	697b      	ldr	r3, [r7, #20]
  4010a6:	4013      	ands	r3, r2
  4010a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4010ac:	2b00      	cmp	r3, #0
  4010ae:	d006      	beq.n	4010be <ethernet_phy_auto_negotiate+0x1be>
		/* Set MII for 100BaseTX and Full Duplex */
		uc_speed = true;
  4010b0:	2301      	movs	r3, #1
  4010b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  4010b6:	2301      	movs	r3, #1
  4010b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010bc:	e028      	b.n	401110 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_FDX) {
  4010be:	68fa      	ldr	r2, [r7, #12]
  4010c0:	697b      	ldr	r3, [r7, #20]
  4010c2:	4013      	ands	r3, r2
  4010c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d006      	beq.n	4010da <ethernet_phy_auto_negotiate+0x1da>
		/* Set MII for 10BaseT and Full Duplex */
		uc_speed = false;
  4010cc:	2300      	movs	r3, #0
  4010ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = true;
  4010d2:	2301      	movs	r3, #1
  4010d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010d8:	e01a      	b.n	401110 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_100TX_HDX) {
  4010da:	68fa      	ldr	r2, [r7, #12]
  4010dc:	697b      	ldr	r3, [r7, #20]
  4010de:	4013      	ands	r3, r2
  4010e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010e4:	2b00      	cmp	r3, #0
  4010e6:	d006      	beq.n	4010f6 <ethernet_phy_auto_negotiate+0x1f6>
		/* Set MII for 100BaseTX and half Duplex */
		uc_speed = true;
  4010e8:	2301      	movs	r3, #1
  4010ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  4010ee:	2300      	movs	r3, #0
  4010f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  4010f4:	e00c      	b.n	401110 <ethernet_phy_auto_negotiate+0x210>
	} else if ((ul_phy_anar & ul_phy_analpar) & GMII_10_HDX) {
  4010f6:	68fa      	ldr	r2, [r7, #12]
  4010f8:	697b      	ldr	r3, [r7, #20]
  4010fa:	4013      	ands	r3, r2
  4010fc:	f003 0320 	and.w	r3, r3, #32
  401100:	2b00      	cmp	r3, #0
  401102:	d005      	beq.n	401110 <ethernet_phy_auto_negotiate+0x210>
		/* Set MII for 10BaseT and half Duplex */
		uc_speed = false;
  401104:	2300      	movs	r3, #0
  401106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		uc_fd = false;
  40110a:	2300      	movs	r3, #0
  40110c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	}

	gmac_set_speed(p_gmac, uc_speed);
  401110:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401114:	4619      	mov	r1, r3
  401116:	6878      	ldr	r0, [r7, #4]
  401118:	4b12      	ldr	r3, [pc, #72]	; (401164 <ethernet_phy_auto_negotiate+0x264>)
  40111a:	4798      	blx	r3
	gmac_enable_full_duplex(p_gmac, uc_fd);
  40111c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
  401120:	4619      	mov	r1, r3
  401122:	6878      	ldr	r0, [r7, #4]
  401124:	4b10      	ldr	r3, [pc, #64]	; (401168 <ethernet_phy_auto_negotiate+0x268>)
  401126:	4798      	blx	r3

	/* Select Media Independent Interface type */
	gmac_select_mii_mode(p_gmac, ETH_PHY_MODE);
  401128:	2101      	movs	r1, #1
  40112a:	6878      	ldr	r0, [r7, #4]
  40112c:	4b0f      	ldr	r3, [pc, #60]	; (40116c <ethernet_phy_auto_negotiate+0x26c>)
  40112e:	4798      	blx	r3

	gmac_enable_transmit(GMAC, true);
  401130:	2101      	movs	r1, #1
  401132:	480f      	ldr	r0, [pc, #60]	; (401170 <ethernet_phy_auto_negotiate+0x270>)
  401134:	4b0f      	ldr	r3, [pc, #60]	; (401174 <ethernet_phy_auto_negotiate+0x274>)
  401136:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  401138:	2101      	movs	r1, #1
  40113a:	480d      	ldr	r0, [pc, #52]	; (401170 <ethernet_phy_auto_negotiate+0x270>)
  40113c:	4b0e      	ldr	r3, [pc, #56]	; (401178 <ethernet_phy_auto_negotiate+0x278>)
  40113e:	4798      	blx	r3

	gmac_enable_management(p_gmac, false);
  401140:	2100      	movs	r1, #0
  401142:	6878      	ldr	r0, [r7, #4]
  401144:	4b04      	ldr	r3, [pc, #16]	; (401158 <ethernet_phy_auto_negotiate+0x258>)
  401146:	4798      	blx	r3
	return uc_rc;
  401148:	7efb      	ldrb	r3, [r7, #27]
}
  40114a:	4618      	mov	r0, r3
  40114c:	372c      	adds	r7, #44	; 0x2c
  40114e:	46bd      	mov	sp, r7
  401150:	bd90      	pop	{r4, r7, pc}
  401152:	bf00      	nop
  401154:	000f4240 	.word	0x000f4240
  401158:	00400ae1 	.word	0x00400ae1
  40115c:	004012f1 	.word	0x004012f1
  401160:	0040134d 	.word	0x0040134d
  401164:	00400b19 	.word	0x00400b19
  401168:	00400b51 	.word	0x00400b51
  40116c:	00400c31 	.word	0x00400c31
  401170:	40050000 	.word	0x40050000
  401174:	00400aa9 	.word	0x00400aa9
  401178:	00400a71 	.word	0x00400a71

0040117c <ethernet_phy_reset>:
 * \param uc_phy_addr PHY address.
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t ethernet_phy_reset(Gmac *p_gmac, uint8_t uc_phy_addr)
{
  40117c:	b590      	push	{r4, r7, lr}
  40117e:	b087      	sub	sp, #28
  401180:	af00      	add	r7, sp, #0
  401182:	6078      	str	r0, [r7, #4]
  401184:	460b      	mov	r3, r1
  401186:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_bmcr;
	uint8_t uc_phy_address = uc_phy_addr;
  401188:	78fb      	ldrb	r3, [r7, #3]
  40118a:	74bb      	strb	r3, [r7, #18]
	uint32_t ul_timeout = ETH_PHY_TIMEOUT;
  40118c:	230a      	movs	r3, #10
  40118e:	617b      	str	r3, [r7, #20]
	uint8_t uc_rc = GMAC_TIMEOUT;
  401190:	2301      	movs	r3, #1
  401192:	74fb      	strb	r3, [r7, #19]

	gmac_enable_management(p_gmac, true);
  401194:	2101      	movs	r1, #1
  401196:	6878      	ldr	r0, [r7, #4]
  401198:	4b15      	ldr	r3, [pc, #84]	; (4011f0 <ethernet_phy_reset+0x74>)
  40119a:	4798      	blx	r3

	ul_bmcr = GMII_RESET;
  40119c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4011a0:	60fb      	str	r3, [r7, #12]
	gmac_phy_write(p_gmac, uc_phy_address, GMII_BMCR, ul_bmcr);
  4011a2:	68fb      	ldr	r3, [r7, #12]
  4011a4:	7cb9      	ldrb	r1, [r7, #18]
  4011a6:	2200      	movs	r2, #0
  4011a8:	6878      	ldr	r0, [r7, #4]
  4011aa:	4c12      	ldr	r4, [pc, #72]	; (4011f4 <ethernet_phy_reset+0x78>)
  4011ac:	47a0      	blx	r4

	do {
		gmac_phy_read(p_gmac, uc_phy_address, GMII_BMCR, &ul_bmcr);
  4011ae:	f107 030c 	add.w	r3, r7, #12
  4011b2:	7cb9      	ldrb	r1, [r7, #18]
  4011b4:	2200      	movs	r2, #0
  4011b6:	6878      	ldr	r0, [r7, #4]
  4011b8:	4c0f      	ldr	r4, [pc, #60]	; (4011f8 <ethernet_phy_reset+0x7c>)
  4011ba:	47a0      	blx	r4
		ul_timeout--;
  4011bc:	697b      	ldr	r3, [r7, #20]
  4011be:	3b01      	subs	r3, #1
  4011c0:	617b      	str	r3, [r7, #20]
	} while ((ul_bmcr & GMII_RESET) && ul_timeout);
  4011c2:	68fb      	ldr	r3, [r7, #12]
  4011c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4011c8:	2b00      	cmp	r3, #0
  4011ca:	d002      	beq.n	4011d2 <ethernet_phy_reset+0x56>
  4011cc:	697b      	ldr	r3, [r7, #20]
  4011ce:	2b00      	cmp	r3, #0
  4011d0:	d1ed      	bne.n	4011ae <ethernet_phy_reset+0x32>

	gmac_enable_management(p_gmac, false);
  4011d2:	2100      	movs	r1, #0
  4011d4:	6878      	ldr	r0, [r7, #4]
  4011d6:	4b06      	ldr	r3, [pc, #24]	; (4011f0 <ethernet_phy_reset+0x74>)
  4011d8:	4798      	blx	r3

	if (ul_timeout) {
  4011da:	697b      	ldr	r3, [r7, #20]
  4011dc:	2b00      	cmp	r3, #0
  4011de:	d001      	beq.n	4011e4 <ethernet_phy_reset+0x68>
		uc_rc = GMAC_OK;
  4011e0:	2300      	movs	r3, #0
  4011e2:	74fb      	strb	r3, [r7, #19]
	}

	return (uc_rc);
  4011e4:	7cfb      	ldrb	r3, [r7, #19]
}
  4011e6:	4618      	mov	r0, r3
  4011e8:	371c      	adds	r7, #28
  4011ea:	46bd      	mov	sp, r7
  4011ec:	bd90      	pop	{r4, r7, pc}
  4011ee:	bf00      	nop
  4011f0:	00400ae1 	.word	0x00400ae1
  4011f4:	0040134d 	.word	0x0040134d
  4011f8:	004012f1 	.word	0x004012f1

004011fc <gmac_is_phy_idle>:
{
  4011fc:	b480      	push	{r7}
  4011fe:	b083      	sub	sp, #12
  401200:	af00      	add	r7, sp, #0
  401202:	6078      	str	r0, [r7, #4]
	return ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) > 0);
  401204:	687b      	ldr	r3, [r7, #4]
  401206:	689b      	ldr	r3, [r3, #8]
  401208:	f003 0304 	and.w	r3, r3, #4
  40120c:	2b00      	cmp	r3, #0
  40120e:	bf14      	ite	ne
  401210:	2301      	movne	r3, #1
  401212:	2300      	moveq	r3, #0
  401214:	b2db      	uxtb	r3, r3
}
  401216:	4618      	mov	r0, r3
  401218:	370c      	adds	r7, #12
  40121a:	46bd      	mov	sp, r7
  40121c:	f85d 7b04 	ldr.w	r7, [sp], #4
  401220:	4770      	bx	lr
	...

00401224 <gmac_maintain_phy>:
{
  401224:	b480      	push	{r7}
  401226:	b083      	sub	sp, #12
  401228:	af00      	add	r7, sp, #0
  40122a:	6078      	str	r0, [r7, #4]
  40122c:	4608      	mov	r0, r1
  40122e:	4611      	mov	r1, r2
  401230:	461a      	mov	r2, r3
  401232:	4603      	mov	r3, r0
  401234:	70fb      	strb	r3, [r7, #3]
  401236:	460b      	mov	r3, r1
  401238:	70bb      	strb	r3, [r7, #2]
  40123a:	4613      	mov	r3, r2
  40123c:	707b      	strb	r3, [r7, #1]
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  40123e:	bf00      	nop
  401240:	687b      	ldr	r3, [r7, #4]
  401242:	689b      	ldr	r3, [r3, #8]
  401244:	f003 0304 	and.w	r3, r3, #4
  401248:	2b00      	cmp	r3, #0
  40124a:	d0f9      	beq.n	401240 <gmac_maintain_phy+0x1c>
			| GMAC_MAN_PHYA(uc_phy_addr)
  40124c:	78fb      	ldrb	r3, [r7, #3]
  40124e:	05db      	lsls	r3, r3, #23
  401250:	f003 6278 	and.w	r2, r3, #260046848	; 0xf800000
			| GMAC_MAN_REGA(uc_reg_addr)
  401254:	78bb      	ldrb	r3, [r7, #2]
  401256:	049b      	lsls	r3, r3, #18
  401258:	f403 03f8 	and.w	r3, r3, #8126464	; 0x7c0000
  40125c:	431a      	orrs	r2, r3
			| GMAC_MAN_OP((uc_rw ? GMAC_MAN_RW_TYPE : GMAC_MAN_READ_ONLY))
  40125e:	787b      	ldrb	r3, [r7, #1]
  401260:	2b00      	cmp	r3, #0
  401262:	d002      	beq.n	40126a <gmac_maintain_phy+0x46>
  401264:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  401268:	e001      	b.n	40126e <gmac_maintain_phy+0x4a>
  40126a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40126e:	431a      	orrs	r2, r3
			| GMAC_MAN_DATA(us_data);
  401270:	8a3b      	ldrh	r3, [r7, #16]
  401272:	431a      	orrs	r2, r3
  401274:	4b04      	ldr	r3, [pc, #16]	; (401288 <gmac_maintain_phy+0x64>)
  401276:	4313      	orrs	r3, r2
	p_gmac->GMAC_MAN = GMAC_MAN_WTN(GMAC_MAN_CODE_VALUE)
  401278:	687a      	ldr	r2, [r7, #4]
  40127a:	6353      	str	r3, [r2, #52]	; 0x34
}
  40127c:	bf00      	nop
  40127e:	370c      	adds	r7, #12
  401280:	46bd      	mov	sp, r7
  401282:	f85d 7b04 	ldr.w	r7, [sp], #4
  401286:	4770      	bx	lr
  401288:	40020000 	.word	0x40020000

0040128c <gmac_get_phy_data>:
{
  40128c:	b480      	push	{r7}
  40128e:	b083      	sub	sp, #12
  401290:	af00      	add	r7, sp, #0
  401292:	6078      	str	r0, [r7, #4]
	while ((p_gmac->GMAC_NSR & GMAC_NSR_IDLE) == 0);
  401294:	bf00      	nop
  401296:	687b      	ldr	r3, [r7, #4]
  401298:	689b      	ldr	r3, [r3, #8]
  40129a:	f003 0304 	and.w	r3, r3, #4
  40129e:	2b00      	cmp	r3, #0
  4012a0:	d0f9      	beq.n	401296 <gmac_get_phy_data+0xa>
	return (uint16_t) (p_gmac->GMAC_MAN & GMAC_MAN_DATA_Msk);
  4012a2:	687b      	ldr	r3, [r7, #4]
  4012a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4012a6:	b29b      	uxth	r3, r3
}
  4012a8:	4618      	mov	r0, r3
  4012aa:	370c      	adds	r7, #12
  4012ac:	46bd      	mov	sp, r7
  4012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4012b2:	4770      	bx	lr

004012b4 <gmac_phy_wait>:
 * \param ul_retry The retry times.
 *
 * Return GMAC_OK if the operation is completed successfully.
 */
static uint8_t gmac_phy_wait(Gmac* p_gmac, const uint32_t ul_retry)
{
  4012b4:	b580      	push	{r7, lr}
  4012b6:	b084      	sub	sp, #16
  4012b8:	af00      	add	r7, sp, #0
  4012ba:	6078      	str	r0, [r7, #4]
  4012bc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_retry_count = 0;
  4012be:	2300      	movs	r3, #0
  4012c0:	60fb      	str	r3, [r7, #12]

	while (!gmac_is_phy_idle(p_gmac)) {
  4012c2:	e008      	b.n	4012d6 <gmac_phy_wait+0x22>
		ul_retry_count++;
  4012c4:	68fb      	ldr	r3, [r7, #12]
  4012c6:	3301      	adds	r3, #1
  4012c8:	60fb      	str	r3, [r7, #12]

		if (ul_retry_count >= ul_retry) {
  4012ca:	68fa      	ldr	r2, [r7, #12]
  4012cc:	683b      	ldr	r3, [r7, #0]
  4012ce:	429a      	cmp	r2, r3
  4012d0:	d301      	bcc.n	4012d6 <gmac_phy_wait+0x22>
			return GMAC_TIMEOUT;
  4012d2:	2301      	movs	r3, #1
  4012d4:	e006      	b.n	4012e4 <gmac_phy_wait+0x30>
	while (!gmac_is_phy_idle(p_gmac)) {
  4012d6:	6878      	ldr	r0, [r7, #4]
  4012d8:	4b04      	ldr	r3, [pc, #16]	; (4012ec <gmac_phy_wait+0x38>)
  4012da:	4798      	blx	r3
  4012dc:	4603      	mov	r3, r0
  4012de:	2b00      	cmp	r3, #0
  4012e0:	d0f0      	beq.n	4012c4 <gmac_phy_wait+0x10>
		}
	}
	return GMAC_OK;
  4012e2:	2300      	movs	r3, #0
}
  4012e4:	4618      	mov	r0, r3
  4012e6:	3710      	adds	r7, #16
  4012e8:	46bd      	mov	sp, r7
  4012ea:	bd80      	pop	{r7, pc}
  4012ec:	004011fd 	.word	0x004011fd

004012f0 <gmac_phy_read>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_read(Gmac* p_gmac, uint8_t uc_phy_address, uint8_t uc_address,
		uint32_t* p_value)
{
  4012f0:	b590      	push	{r4, r7, lr}
  4012f2:	b087      	sub	sp, #28
  4012f4:	af02      	add	r7, sp, #8
  4012f6:	60f8      	str	r0, [r7, #12]
  4012f8:	607b      	str	r3, [r7, #4]
  4012fa:	460b      	mov	r3, r1
  4012fc:	72fb      	strb	r3, [r7, #11]
  4012fe:	4613      	mov	r3, r2
  401300:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 1, 0);
  401302:	7aba      	ldrb	r2, [r7, #10]
  401304:	7af9      	ldrb	r1, [r7, #11]
  401306:	2300      	movs	r3, #0
  401308:	9300      	str	r3, [sp, #0]
  40130a:	2301      	movs	r3, #1
  40130c:	68f8      	ldr	r0, [r7, #12]
  40130e:	4c0b      	ldr	r4, [pc, #44]	; (40133c <gmac_phy_read+0x4c>)
  401310:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  401312:	490b      	ldr	r1, [pc, #44]	; (401340 <gmac_phy_read+0x50>)
  401314:	68f8      	ldr	r0, [r7, #12]
  401316:	4b0b      	ldr	r3, [pc, #44]	; (401344 <gmac_phy_read+0x54>)
  401318:	4798      	blx	r3
  40131a:	4603      	mov	r3, r0
  40131c:	2b01      	cmp	r3, #1
  40131e:	d101      	bne.n	401324 <gmac_phy_read+0x34>
		return GMAC_TIMEOUT;
  401320:	2301      	movs	r3, #1
  401322:	e007      	b.n	401334 <gmac_phy_read+0x44>
	}
	*p_value = gmac_get_phy_data(p_gmac);
  401324:	68f8      	ldr	r0, [r7, #12]
  401326:	4b08      	ldr	r3, [pc, #32]	; (401348 <gmac_phy_read+0x58>)
  401328:	4798      	blx	r3
  40132a:	4603      	mov	r3, r0
  40132c:	461a      	mov	r2, r3
  40132e:	687b      	ldr	r3, [r7, #4]
  401330:	601a      	str	r2, [r3, #0]
	return GMAC_OK;
  401332:	2300      	movs	r3, #0
}
  401334:	4618      	mov	r0, r3
  401336:	3714      	adds	r7, #20
  401338:	46bd      	mov	sp, r7
  40133a:	bd90      	pop	{r4, r7, pc}
  40133c:	00401225 	.word	0x00401225
  401340:	000f4240 	.word	0x000f4240
  401344:	004012b5 	.word	0x004012b5
  401348:	0040128d 	.word	0x0040128d

0040134c <gmac_phy_write>:
 *
 * \Return GMAC_OK if successfully, GMAC_TIMEOUT if timeout.
 */
uint8_t gmac_phy_write(Gmac* p_gmac, uint8_t uc_phy_address,
		uint8_t uc_address, uint32_t ul_value)
{
  40134c:	b590      	push	{r4, r7, lr}
  40134e:	b087      	sub	sp, #28
  401350:	af02      	add	r7, sp, #8
  401352:	60f8      	str	r0, [r7, #12]
  401354:	607b      	str	r3, [r7, #4]
  401356:	460b      	mov	r3, r1
  401358:	72fb      	strb	r3, [r7, #11]
  40135a:	4613      	mov	r3, r2
  40135c:	72bb      	strb	r3, [r7, #10]
	gmac_maintain_phy(p_gmac, uc_phy_address, uc_address, 0, ul_value);
  40135e:	687b      	ldr	r3, [r7, #4]
  401360:	b29b      	uxth	r3, r3
  401362:	7aba      	ldrb	r2, [r7, #10]
  401364:	7af9      	ldrb	r1, [r7, #11]
  401366:	9300      	str	r3, [sp, #0]
  401368:	2300      	movs	r3, #0
  40136a:	68f8      	ldr	r0, [r7, #12]
  40136c:	4c07      	ldr	r4, [pc, #28]	; (40138c <gmac_phy_write+0x40>)
  40136e:	47a0      	blx	r4

	if (gmac_phy_wait(p_gmac, MAC_PHY_RETRY_MAX) == GMAC_TIMEOUT) {
  401370:	4907      	ldr	r1, [pc, #28]	; (401390 <gmac_phy_write+0x44>)
  401372:	68f8      	ldr	r0, [r7, #12]
  401374:	4b07      	ldr	r3, [pc, #28]	; (401394 <gmac_phy_write+0x48>)
  401376:	4798      	blx	r3
  401378:	4603      	mov	r3, r0
  40137a:	2b01      	cmp	r3, #1
  40137c:	d101      	bne.n	401382 <gmac_phy_write+0x36>
		return GMAC_TIMEOUT;
  40137e:	2301      	movs	r3, #1
  401380:	e000      	b.n	401384 <gmac_phy_write+0x38>
	}
	return GMAC_OK;
  401382:	2300      	movs	r3, #0
}
  401384:	4618      	mov	r0, r3
  401386:	3714      	adds	r7, #20
  401388:	46bd      	mov	sp, r7
  40138a:	bd90      	pop	{r4, r7, pc}
  40138c:	00401225 	.word	0x00401225
  401390:	000f4240 	.word	0x000f4240
  401394:	004012b5 	.word	0x004012b5

00401398 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401398:	b480      	push	{r7}
  40139a:	b085      	sub	sp, #20
  40139c:	af00      	add	r7, sp, #0
  40139e:	60f8      	str	r0, [r7, #12]
  4013a0:	60b9      	str	r1, [r7, #8]
  4013a2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	2b00      	cmp	r3, #0
  4013a8:	d003      	beq.n	4013b2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4013aa:	68fb      	ldr	r3, [r7, #12]
  4013ac:	68ba      	ldr	r2, [r7, #8]
  4013ae:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4013b0:	e002      	b.n	4013b8 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  4013b2:	68fb      	ldr	r3, [r7, #12]
  4013b4:	68ba      	ldr	r2, [r7, #8]
  4013b6:	661a      	str	r2, [r3, #96]	; 0x60
}
  4013b8:	bf00      	nop
  4013ba:	3714      	adds	r7, #20
  4013bc:	46bd      	mov	sp, r7
  4013be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4013c2:	4770      	bx	lr

004013c4 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  4013c4:	b480      	push	{r7}
  4013c6:	b087      	sub	sp, #28
  4013c8:	af00      	add	r7, sp, #0
  4013ca:	60f8      	str	r0, [r7, #12]
  4013cc:	60b9      	str	r1, [r7, #8]
  4013ce:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4013d0:	68fb      	ldr	r3, [r7, #12]
  4013d2:	687a      	ldr	r2, [r7, #4]
  4013d4:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4013d6:	68bb      	ldr	r3, [r7, #8]
  4013d8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013dc:	d04a      	beq.n	401474 <pio_set_peripheral+0xb0>
  4013de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4013e2:	d808      	bhi.n	4013f6 <pio_set_peripheral+0x32>
  4013e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4013e8:	d016      	beq.n	401418 <pio_set_peripheral+0x54>
  4013ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4013ee:	d02c      	beq.n	40144a <pio_set_peripheral+0x86>
  4013f0:	2b00      	cmp	r3, #0
  4013f2:	d069      	beq.n	4014c8 <pio_set_peripheral+0x104>
  4013f4:	e064      	b.n	4014c0 <pio_set_peripheral+0xfc>
  4013f6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4013fa:	d065      	beq.n	4014c8 <pio_set_peripheral+0x104>
  4013fc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401400:	d803      	bhi.n	40140a <pio_set_peripheral+0x46>
  401402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401406:	d04a      	beq.n	40149e <pio_set_peripheral+0xda>
  401408:	e05a      	b.n	4014c0 <pio_set_peripheral+0xfc>
  40140a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40140e:	d05b      	beq.n	4014c8 <pio_set_peripheral+0x104>
  401410:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401414:	d058      	beq.n	4014c8 <pio_set_peripheral+0x104>
  401416:	e053      	b.n	4014c0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401418:	68fb      	ldr	r3, [r7, #12]
  40141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40141c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40141e:	68fb      	ldr	r3, [r7, #12]
  401420:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401422:	687b      	ldr	r3, [r7, #4]
  401424:	43d9      	mvns	r1, r3
  401426:	697b      	ldr	r3, [r7, #20]
  401428:	400b      	ands	r3, r1
  40142a:	401a      	ands	r2, r3
  40142c:	68fb      	ldr	r3, [r7, #12]
  40142e:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401430:	68fb      	ldr	r3, [r7, #12]
  401432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401434:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401436:	68fb      	ldr	r3, [r7, #12]
  401438:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40143a:	687b      	ldr	r3, [r7, #4]
  40143c:	43d9      	mvns	r1, r3
  40143e:	697b      	ldr	r3, [r7, #20]
  401440:	400b      	ands	r3, r1
  401442:	401a      	ands	r2, r3
  401444:	68fb      	ldr	r3, [r7, #12]
  401446:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401448:	e03a      	b.n	4014c0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40144a:	68fb      	ldr	r3, [r7, #12]
  40144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40144e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401450:	687a      	ldr	r2, [r7, #4]
  401452:	697b      	ldr	r3, [r7, #20]
  401454:	431a      	orrs	r2, r3
  401456:	68fb      	ldr	r3, [r7, #12]
  401458:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40145a:	68fb      	ldr	r3, [r7, #12]
  40145c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40145e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401460:	68fb      	ldr	r3, [r7, #12]
  401462:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401464:	687b      	ldr	r3, [r7, #4]
  401466:	43d9      	mvns	r1, r3
  401468:	697b      	ldr	r3, [r7, #20]
  40146a:	400b      	ands	r3, r1
  40146c:	401a      	ands	r2, r3
  40146e:	68fb      	ldr	r3, [r7, #12]
  401470:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401472:	e025      	b.n	4014c0 <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401474:	68fb      	ldr	r3, [r7, #12]
  401476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401478:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40147a:	68fb      	ldr	r3, [r7, #12]
  40147c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40147e:	687b      	ldr	r3, [r7, #4]
  401480:	43d9      	mvns	r1, r3
  401482:	697b      	ldr	r3, [r7, #20]
  401484:	400b      	ands	r3, r1
  401486:	401a      	ands	r2, r3
  401488:	68fb      	ldr	r3, [r7, #12]
  40148a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40148c:	68fb      	ldr	r3, [r7, #12]
  40148e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401490:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401492:	687a      	ldr	r2, [r7, #4]
  401494:	697b      	ldr	r3, [r7, #20]
  401496:	431a      	orrs	r2, r3
  401498:	68fb      	ldr	r3, [r7, #12]
  40149a:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  40149c:	e010      	b.n	4014c0 <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40149e:	68fb      	ldr	r3, [r7, #12]
  4014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4014a2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4014a4:	687a      	ldr	r2, [r7, #4]
  4014a6:	697b      	ldr	r3, [r7, #20]
  4014a8:	431a      	orrs	r2, r3
  4014aa:	68fb      	ldr	r3, [r7, #12]
  4014ac:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4014ae:	68fb      	ldr	r3, [r7, #12]
  4014b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4014b2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4014b4:	687a      	ldr	r2, [r7, #4]
  4014b6:	697b      	ldr	r3, [r7, #20]
  4014b8:	431a      	orrs	r2, r3
  4014ba:	68fb      	ldr	r3, [r7, #12]
  4014bc:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4014be:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4014c0:	68fb      	ldr	r3, [r7, #12]
  4014c2:	687a      	ldr	r2, [r7, #4]
  4014c4:	605a      	str	r2, [r3, #4]
  4014c6:	e000      	b.n	4014ca <pio_set_peripheral+0x106>
		return;
  4014c8:	bf00      	nop
}
  4014ca:	371c      	adds	r7, #28
  4014cc:	46bd      	mov	sp, r7
  4014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4014d2:	4770      	bx	lr

004014d4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  4014d4:	b580      	push	{r7, lr}
  4014d6:	b084      	sub	sp, #16
  4014d8:	af00      	add	r7, sp, #0
  4014da:	60f8      	str	r0, [r7, #12]
  4014dc:	60b9      	str	r1, [r7, #8]
  4014de:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  4014e0:	68b9      	ldr	r1, [r7, #8]
  4014e2:	68f8      	ldr	r0, [r7, #12]
  4014e4:	4b19      	ldr	r3, [pc, #100]	; (40154c <pio_set_input+0x78>)
  4014e6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  4014e8:	687b      	ldr	r3, [r7, #4]
  4014ea:	f003 0301 	and.w	r3, r3, #1
  4014ee:	461a      	mov	r2, r3
  4014f0:	68b9      	ldr	r1, [r7, #8]
  4014f2:	68f8      	ldr	r0, [r7, #12]
  4014f4:	4b16      	ldr	r3, [pc, #88]	; (401550 <pio_set_input+0x7c>)
  4014f6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4014f8:	687b      	ldr	r3, [r7, #4]
  4014fa:	f003 030a 	and.w	r3, r3, #10
  4014fe:	2b00      	cmp	r3, #0
  401500:	d003      	beq.n	40150a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401502:	68fb      	ldr	r3, [r7, #12]
  401504:	68ba      	ldr	r2, [r7, #8]
  401506:	621a      	str	r2, [r3, #32]
  401508:	e002      	b.n	401510 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  40150a:	68fb      	ldr	r3, [r7, #12]
  40150c:	68ba      	ldr	r2, [r7, #8]
  40150e:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401510:	687b      	ldr	r3, [r7, #4]
  401512:	f003 0302 	and.w	r3, r3, #2
  401516:	2b00      	cmp	r3, #0
  401518:	d004      	beq.n	401524 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  40151a:	68fb      	ldr	r3, [r7, #12]
  40151c:	68ba      	ldr	r2, [r7, #8]
  40151e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401522:	e008      	b.n	401536 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401524:	687b      	ldr	r3, [r7, #4]
  401526:	f003 0308 	and.w	r3, r3, #8
  40152a:	2b00      	cmp	r3, #0
  40152c:	d003      	beq.n	401536 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40152e:	68fb      	ldr	r3, [r7, #12]
  401530:	68ba      	ldr	r2, [r7, #8]
  401532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401536:	68fb      	ldr	r3, [r7, #12]
  401538:	68ba      	ldr	r2, [r7, #8]
  40153a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  40153c:	68fb      	ldr	r3, [r7, #12]
  40153e:	68ba      	ldr	r2, [r7, #8]
  401540:	601a      	str	r2, [r3, #0]
}
  401542:	bf00      	nop
  401544:	3710      	adds	r7, #16
  401546:	46bd      	mov	sp, r7
  401548:	bd80      	pop	{r7, pc}
  40154a:	bf00      	nop
  40154c:	004015b9 	.word	0x004015b9
  401550:	00401399 	.word	0x00401399

00401554 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401554:	b580      	push	{r7, lr}
  401556:	b084      	sub	sp, #16
  401558:	af00      	add	r7, sp, #0
  40155a:	60f8      	str	r0, [r7, #12]
  40155c:	60b9      	str	r1, [r7, #8]
  40155e:	607a      	str	r2, [r7, #4]
  401560:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401562:	68b9      	ldr	r1, [r7, #8]
  401564:	68f8      	ldr	r0, [r7, #12]
  401566:	4b12      	ldr	r3, [pc, #72]	; (4015b0 <pio_set_output+0x5c>)
  401568:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  40156a:	69ba      	ldr	r2, [r7, #24]
  40156c:	68b9      	ldr	r1, [r7, #8]
  40156e:	68f8      	ldr	r0, [r7, #12]
  401570:	4b10      	ldr	r3, [pc, #64]	; (4015b4 <pio_set_output+0x60>)
  401572:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401574:	683b      	ldr	r3, [r7, #0]
  401576:	2b00      	cmp	r3, #0
  401578:	d003      	beq.n	401582 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  40157a:	68fb      	ldr	r3, [r7, #12]
  40157c:	68ba      	ldr	r2, [r7, #8]
  40157e:	651a      	str	r2, [r3, #80]	; 0x50
  401580:	e002      	b.n	401588 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401582:	68fb      	ldr	r3, [r7, #12]
  401584:	68ba      	ldr	r2, [r7, #8]
  401586:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401588:	687b      	ldr	r3, [r7, #4]
  40158a:	2b00      	cmp	r3, #0
  40158c:	d003      	beq.n	401596 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  40158e:	68fb      	ldr	r3, [r7, #12]
  401590:	68ba      	ldr	r2, [r7, #8]
  401592:	631a      	str	r2, [r3, #48]	; 0x30
  401594:	e002      	b.n	40159c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401596:	68fb      	ldr	r3, [r7, #12]
  401598:	68ba      	ldr	r2, [r7, #8]
  40159a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  40159c:	68fb      	ldr	r3, [r7, #12]
  40159e:	68ba      	ldr	r2, [r7, #8]
  4015a0:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4015a2:	68fb      	ldr	r3, [r7, #12]
  4015a4:	68ba      	ldr	r2, [r7, #8]
  4015a6:	601a      	str	r2, [r3, #0]
}
  4015a8:	bf00      	nop
  4015aa:	3710      	adds	r7, #16
  4015ac:	46bd      	mov	sp, r7
  4015ae:	bd80      	pop	{r7, pc}
  4015b0:	004015b9 	.word	0x004015b9
  4015b4:	00401399 	.word	0x00401399

004015b8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4015b8:	b480      	push	{r7}
  4015ba:	b083      	sub	sp, #12
  4015bc:	af00      	add	r7, sp, #0
  4015be:	6078      	str	r0, [r7, #4]
  4015c0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4015c2:	687b      	ldr	r3, [r7, #4]
  4015c4:	683a      	ldr	r2, [r7, #0]
  4015c6:	645a      	str	r2, [r3, #68]	; 0x44
}
  4015c8:	bf00      	nop
  4015ca:	370c      	adds	r7, #12
  4015cc:	46bd      	mov	sp, r7
  4015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015d2:	4770      	bx	lr

004015d4 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  4015d4:	b480      	push	{r7}
  4015d6:	b083      	sub	sp, #12
  4015d8:	af00      	add	r7, sp, #0
  4015da:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  4015dc:	687b      	ldr	r3, [r7, #4]
  4015de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  4015e0:	4618      	mov	r0, r3
  4015e2:	370c      	adds	r7, #12
  4015e4:	46bd      	mov	sp, r7
  4015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4015ea:	4770      	bx	lr

004015ec <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  4015ec:	b480      	push	{r7}
  4015ee:	b083      	sub	sp, #12
  4015f0:	af00      	add	r7, sp, #0
  4015f2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  4015f4:	687b      	ldr	r3, [r7, #4]
  4015f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  4015f8:	4618      	mov	r0, r3
  4015fa:	370c      	adds	r7, #12
  4015fc:	46bd      	mov	sp, r7
  4015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  401602:	4770      	bx	lr

00401604 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401604:	b580      	push	{r7, lr}
  401606:	b084      	sub	sp, #16
  401608:	af00      	add	r7, sp, #0
  40160a:	6078      	str	r0, [r7, #4]
  40160c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40160e:	6878      	ldr	r0, [r7, #4]
  401610:	4b26      	ldr	r3, [pc, #152]	; (4016ac <pio_handler_process+0xa8>)
  401612:	4798      	blx	r3
  401614:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401616:	6878      	ldr	r0, [r7, #4]
  401618:	4b25      	ldr	r3, [pc, #148]	; (4016b0 <pio_handler_process+0xac>)
  40161a:	4798      	blx	r3
  40161c:	4602      	mov	r2, r0
  40161e:	68fb      	ldr	r3, [r7, #12]
  401620:	4013      	ands	r3, r2
  401622:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401624:	68fb      	ldr	r3, [r7, #12]
  401626:	2b00      	cmp	r3, #0
  401628:	d03c      	beq.n	4016a4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40162a:	2300      	movs	r3, #0
  40162c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40162e:	e034      	b.n	40169a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401630:	4a20      	ldr	r2, [pc, #128]	; (4016b4 <pio_handler_process+0xb0>)
  401632:	68bb      	ldr	r3, [r7, #8]
  401634:	011b      	lsls	r3, r3, #4
  401636:	4413      	add	r3, r2
  401638:	681a      	ldr	r2, [r3, #0]
  40163a:	683b      	ldr	r3, [r7, #0]
  40163c:	429a      	cmp	r2, r3
  40163e:	d126      	bne.n	40168e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401640:	4a1c      	ldr	r2, [pc, #112]	; (4016b4 <pio_handler_process+0xb0>)
  401642:	68bb      	ldr	r3, [r7, #8]
  401644:	011b      	lsls	r3, r3, #4
  401646:	4413      	add	r3, r2
  401648:	3304      	adds	r3, #4
  40164a:	681a      	ldr	r2, [r3, #0]
  40164c:	68fb      	ldr	r3, [r7, #12]
  40164e:	4013      	ands	r3, r2
  401650:	2b00      	cmp	r3, #0
  401652:	d01c      	beq.n	40168e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401654:	4a17      	ldr	r2, [pc, #92]	; (4016b4 <pio_handler_process+0xb0>)
  401656:	68bb      	ldr	r3, [r7, #8]
  401658:	011b      	lsls	r3, r3, #4
  40165a:	4413      	add	r3, r2
  40165c:	330c      	adds	r3, #12
  40165e:	681b      	ldr	r3, [r3, #0]
  401660:	4914      	ldr	r1, [pc, #80]	; (4016b4 <pio_handler_process+0xb0>)
  401662:	68ba      	ldr	r2, [r7, #8]
  401664:	0112      	lsls	r2, r2, #4
  401666:	440a      	add	r2, r1
  401668:	6810      	ldr	r0, [r2, #0]
  40166a:	4912      	ldr	r1, [pc, #72]	; (4016b4 <pio_handler_process+0xb0>)
  40166c:	68ba      	ldr	r2, [r7, #8]
  40166e:	0112      	lsls	r2, r2, #4
  401670:	440a      	add	r2, r1
  401672:	3204      	adds	r2, #4
  401674:	6812      	ldr	r2, [r2, #0]
  401676:	4611      	mov	r1, r2
  401678:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40167a:	4a0e      	ldr	r2, [pc, #56]	; (4016b4 <pio_handler_process+0xb0>)
  40167c:	68bb      	ldr	r3, [r7, #8]
  40167e:	011b      	lsls	r3, r3, #4
  401680:	4413      	add	r3, r2
  401682:	3304      	adds	r3, #4
  401684:	681b      	ldr	r3, [r3, #0]
  401686:	43db      	mvns	r3, r3
  401688:	68fa      	ldr	r2, [r7, #12]
  40168a:	4013      	ands	r3, r2
  40168c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40168e:	68bb      	ldr	r3, [r7, #8]
  401690:	3301      	adds	r3, #1
  401692:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401694:	68bb      	ldr	r3, [r7, #8]
  401696:	2b06      	cmp	r3, #6
  401698:	d803      	bhi.n	4016a2 <pio_handler_process+0x9e>
		while (status != 0) {
  40169a:	68fb      	ldr	r3, [r7, #12]
  40169c:	2b00      	cmp	r3, #0
  40169e:	d1c7      	bne.n	401630 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  4016a0:	e000      	b.n	4016a4 <pio_handler_process+0xa0>
				break;
  4016a2:	bf00      	nop
}
  4016a4:	bf00      	nop
  4016a6:	3710      	adds	r7, #16
  4016a8:	46bd      	mov	sp, r7
  4016aa:	bd80      	pop	{r7, pc}
  4016ac:	004015d5 	.word	0x004015d5
  4016b0:	004015ed 	.word	0x004015ed
  4016b4:	20400a34 	.word	0x20400a34

004016b8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4016b8:	b580      	push	{r7, lr}
  4016ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4016bc:	210a      	movs	r1, #10
  4016be:	4802      	ldr	r0, [pc, #8]	; (4016c8 <PIOA_Handler+0x10>)
  4016c0:	4b02      	ldr	r3, [pc, #8]	; (4016cc <PIOA_Handler+0x14>)
  4016c2:	4798      	blx	r3
}
  4016c4:	bf00      	nop
  4016c6:	bd80      	pop	{r7, pc}
  4016c8:	400e0e00 	.word	0x400e0e00
  4016cc:	00401605 	.word	0x00401605

004016d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4016d0:	b580      	push	{r7, lr}
  4016d2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4016d4:	210b      	movs	r1, #11
  4016d6:	4802      	ldr	r0, [pc, #8]	; (4016e0 <PIOB_Handler+0x10>)
  4016d8:	4b02      	ldr	r3, [pc, #8]	; (4016e4 <PIOB_Handler+0x14>)
  4016da:	4798      	blx	r3
}
  4016dc:	bf00      	nop
  4016de:	bd80      	pop	{r7, pc}
  4016e0:	400e1000 	.word	0x400e1000
  4016e4:	00401605 	.word	0x00401605

004016e8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4016e8:	b580      	push	{r7, lr}
  4016ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4016ec:	210c      	movs	r1, #12
  4016ee:	4802      	ldr	r0, [pc, #8]	; (4016f8 <PIOC_Handler+0x10>)
  4016f0:	4b02      	ldr	r3, [pc, #8]	; (4016fc <PIOC_Handler+0x14>)
  4016f2:	4798      	blx	r3
}
  4016f4:	bf00      	nop
  4016f6:	bd80      	pop	{r7, pc}
  4016f8:	400e1200 	.word	0x400e1200
  4016fc:	00401605 	.word	0x00401605

00401700 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401700:	b580      	push	{r7, lr}
  401702:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  401704:	2110      	movs	r1, #16
  401706:	4802      	ldr	r0, [pc, #8]	; (401710 <PIOD_Handler+0x10>)
  401708:	4b02      	ldr	r3, [pc, #8]	; (401714 <PIOD_Handler+0x14>)
  40170a:	4798      	blx	r3
}
  40170c:	bf00      	nop
  40170e:	bd80      	pop	{r7, pc}
  401710:	400e1400 	.word	0x400e1400
  401714:	00401605 	.word	0x00401605

00401718 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401718:	b580      	push	{r7, lr}
  40171a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  40171c:	2111      	movs	r1, #17
  40171e:	4802      	ldr	r0, [pc, #8]	; (401728 <PIOE_Handler+0x10>)
  401720:	4b02      	ldr	r3, [pc, #8]	; (40172c <PIOE_Handler+0x14>)
  401722:	4798      	blx	r3
}
  401724:	bf00      	nop
  401726:	bd80      	pop	{r7, pc}
  401728:	400e1600 	.word	0x400e1600
  40172c:	00401605 	.word	0x00401605

00401730 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  401730:	b480      	push	{r7}
  401732:	b083      	sub	sp, #12
  401734:	af00      	add	r7, sp, #0
  401736:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  401738:	687b      	ldr	r3, [r7, #4]
  40173a:	3b01      	subs	r3, #1
  40173c:	2b03      	cmp	r3, #3
  40173e:	d81a      	bhi.n	401776 <pmc_mck_set_division+0x46>
  401740:	a201      	add	r2, pc, #4	; (adr r2, 401748 <pmc_mck_set_division+0x18>)
  401742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401746:	bf00      	nop
  401748:	00401759 	.word	0x00401759
  40174c:	0040175f 	.word	0x0040175f
  401750:	00401767 	.word	0x00401767
  401754:	0040176f 	.word	0x0040176f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401758:	2300      	movs	r3, #0
  40175a:	607b      	str	r3, [r7, #4]
			break;
  40175c:	e00e      	b.n	40177c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40175e:	f44f 7380 	mov.w	r3, #256	; 0x100
  401762:	607b      	str	r3, [r7, #4]
			break;
  401764:	e00a      	b.n	40177c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401766:	f44f 7340 	mov.w	r3, #768	; 0x300
  40176a:	607b      	str	r3, [r7, #4]
			break;
  40176c:	e006      	b.n	40177c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40176e:	f44f 7300 	mov.w	r3, #512	; 0x200
  401772:	607b      	str	r3, [r7, #4]
			break;
  401774:	e002      	b.n	40177c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401776:	2300      	movs	r3, #0
  401778:	607b      	str	r3, [r7, #4]
			break;
  40177a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40177c:	490a      	ldr	r1, [pc, #40]	; (4017a8 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40177e:	4b0a      	ldr	r3, [pc, #40]	; (4017a8 <pmc_mck_set_division+0x78>)
  401780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401782:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  401786:	687b      	ldr	r3, [r7, #4]
  401788:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40178a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40178c:	bf00      	nop
  40178e:	4b06      	ldr	r3, [pc, #24]	; (4017a8 <pmc_mck_set_division+0x78>)
  401790:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401792:	f003 0308 	and.w	r3, r3, #8
  401796:	2b00      	cmp	r3, #0
  401798:	d0f9      	beq.n	40178e <pmc_mck_set_division+0x5e>
}
  40179a:	bf00      	nop
  40179c:	370c      	adds	r7, #12
  40179e:	46bd      	mov	sp, r7
  4017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017a4:	4770      	bx	lr
  4017a6:	bf00      	nop
  4017a8:	400e0600 	.word	0x400e0600

004017ac <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4017ac:	b480      	push	{r7}
  4017ae:	b085      	sub	sp, #20
  4017b0:	af00      	add	r7, sp, #0
  4017b2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4017b4:	491d      	ldr	r1, [pc, #116]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  4017b6:	4b1d      	ldr	r3, [pc, #116]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  4017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4017be:	687b      	ldr	r3, [r7, #4]
  4017c0:	4313      	orrs	r3, r2
  4017c2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4017c8:	60fb      	str	r3, [r7, #12]
  4017ca:	e007      	b.n	4017dc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4017cc:	68fb      	ldr	r3, [r7, #12]
  4017ce:	2b00      	cmp	r3, #0
  4017d0:	d101      	bne.n	4017d6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4017d2:	2301      	movs	r3, #1
  4017d4:	e023      	b.n	40181e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4017d6:	68fb      	ldr	r3, [r7, #12]
  4017d8:	3b01      	subs	r3, #1
  4017da:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017dc:	4b13      	ldr	r3, [pc, #76]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  4017de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017e0:	f003 0308 	and.w	r3, r3, #8
  4017e4:	2b00      	cmp	r3, #0
  4017e6:	d0f1      	beq.n	4017cc <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4017e8:	4a10      	ldr	r2, [pc, #64]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  4017ea:	4b10      	ldr	r3, [pc, #64]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  4017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ee:	f023 0303 	bic.w	r3, r3, #3
  4017f2:	f043 0302 	orr.w	r3, r3, #2
  4017f6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4017fc:	60fb      	str	r3, [r7, #12]
  4017fe:	e007      	b.n	401810 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401800:	68fb      	ldr	r3, [r7, #12]
  401802:	2b00      	cmp	r3, #0
  401804:	d101      	bne.n	40180a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  401806:	2301      	movs	r3, #1
  401808:	e009      	b.n	40181e <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40180a:	68fb      	ldr	r3, [r7, #12]
  40180c:	3b01      	subs	r3, #1
  40180e:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401810:	4b06      	ldr	r3, [pc, #24]	; (40182c <pmc_switch_mck_to_pllack+0x80>)
  401812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401814:	f003 0308 	and.w	r3, r3, #8
  401818:	2b00      	cmp	r3, #0
  40181a:	d0f1      	beq.n	401800 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  40181c:	2300      	movs	r3, #0
}
  40181e:	4618      	mov	r0, r3
  401820:	3714      	adds	r7, #20
  401822:	46bd      	mov	sp, r7
  401824:	f85d 7b04 	ldr.w	r7, [sp], #4
  401828:	4770      	bx	lr
  40182a:	bf00      	nop
  40182c:	400e0600 	.word	0x400e0600

00401830 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  401830:	b480      	push	{r7}
  401832:	b083      	sub	sp, #12
  401834:	af00      	add	r7, sp, #0
  401836:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  401838:	687b      	ldr	r3, [r7, #4]
  40183a:	2b01      	cmp	r3, #1
  40183c:	d105      	bne.n	40184a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40183e:	4907      	ldr	r1, [pc, #28]	; (40185c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401840:	4b06      	ldr	r3, [pc, #24]	; (40185c <pmc_switch_sclk_to_32kxtal+0x2c>)
  401842:	689a      	ldr	r2, [r3, #8]
  401844:	4b06      	ldr	r3, [pc, #24]	; (401860 <pmc_switch_sclk_to_32kxtal+0x30>)
  401846:	4313      	orrs	r3, r2
  401848:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40184a:	4b04      	ldr	r3, [pc, #16]	; (40185c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40184c:	4a05      	ldr	r2, [pc, #20]	; (401864 <pmc_switch_sclk_to_32kxtal+0x34>)
  40184e:	601a      	str	r2, [r3, #0]
}
  401850:	bf00      	nop
  401852:	370c      	adds	r7, #12
  401854:	46bd      	mov	sp, r7
  401856:	f85d 7b04 	ldr.w	r7, [sp], #4
  40185a:	4770      	bx	lr
  40185c:	400e1810 	.word	0x400e1810
  401860:	a5100000 	.word	0xa5100000
  401864:	a5000008 	.word	0xa5000008

00401868 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  401868:	b480      	push	{r7}
  40186a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40186c:	4b09      	ldr	r3, [pc, #36]	; (401894 <pmc_osc_is_ready_32kxtal+0x2c>)
  40186e:	695b      	ldr	r3, [r3, #20]
  401870:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  401874:	2b00      	cmp	r3, #0
  401876:	d007      	beq.n	401888 <pmc_osc_is_ready_32kxtal+0x20>
  401878:	4b07      	ldr	r3, [pc, #28]	; (401898 <pmc_osc_is_ready_32kxtal+0x30>)
  40187a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40187c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401880:	2b00      	cmp	r3, #0
  401882:	d001      	beq.n	401888 <pmc_osc_is_ready_32kxtal+0x20>
  401884:	2301      	movs	r3, #1
  401886:	e000      	b.n	40188a <pmc_osc_is_ready_32kxtal+0x22>
  401888:	2300      	movs	r3, #0
}
  40188a:	4618      	mov	r0, r3
  40188c:	46bd      	mov	sp, r7
  40188e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401892:	4770      	bx	lr
  401894:	400e1810 	.word	0x400e1810
  401898:	400e0600 	.word	0x400e0600

0040189c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40189c:	b480      	push	{r7}
  40189e:	b083      	sub	sp, #12
  4018a0:	af00      	add	r7, sp, #0
  4018a2:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4018a4:	4915      	ldr	r1, [pc, #84]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018a6:	4b15      	ldr	r3, [pc, #84]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018a8:	6a1a      	ldr	r2, [r3, #32]
  4018aa:	4b15      	ldr	r3, [pc, #84]	; (401900 <pmc_switch_mainck_to_fastrc+0x64>)
  4018ac:	4313      	orrs	r3, r2
  4018ae:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4018b0:	bf00      	nop
  4018b2:	4b12      	ldr	r3, [pc, #72]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4018ba:	2b00      	cmp	r3, #0
  4018bc:	d0f9      	beq.n	4018b2 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4018be:	490f      	ldr	r1, [pc, #60]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018c0:	4b0e      	ldr	r3, [pc, #56]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018c2:	6a1a      	ldr	r2, [r3, #32]
  4018c4:	4b0f      	ldr	r3, [pc, #60]	; (401904 <pmc_switch_mainck_to_fastrc+0x68>)
  4018c6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4018c8:	687a      	ldr	r2, [r7, #4]
  4018ca:	4313      	orrs	r3, r2
  4018cc:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4018d0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4018d2:	bf00      	nop
  4018d4:	4b09      	ldr	r3, [pc, #36]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4018d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d0f9      	beq.n	4018d4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4018e0:	4906      	ldr	r1, [pc, #24]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018e2:	4b06      	ldr	r3, [pc, #24]	; (4018fc <pmc_switch_mainck_to_fastrc+0x60>)
  4018e4:	6a1a      	ldr	r2, [r3, #32]
  4018e6:	4b08      	ldr	r3, [pc, #32]	; (401908 <pmc_switch_mainck_to_fastrc+0x6c>)
  4018e8:	4013      	ands	r3, r2
  4018ea:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4018ee:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4018f0:	bf00      	nop
  4018f2:	370c      	adds	r7, #12
  4018f4:	46bd      	mov	sp, r7
  4018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018fa:	4770      	bx	lr
  4018fc:	400e0600 	.word	0x400e0600
  401900:	00370008 	.word	0x00370008
  401904:	ffc8ff8f 	.word	0xffc8ff8f
  401908:	fec8ffff 	.word	0xfec8ffff

0040190c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40190c:	b480      	push	{r7}
  40190e:	b083      	sub	sp, #12
  401910:	af00      	add	r7, sp, #0
  401912:	6078      	str	r0, [r7, #4]
  401914:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401916:	687b      	ldr	r3, [r7, #4]
  401918:	2b00      	cmp	r3, #0
  40191a:	d008      	beq.n	40192e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40191c:	4913      	ldr	r1, [pc, #76]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  40191e:	4b13      	ldr	r3, [pc, #76]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  401920:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401922:	4a13      	ldr	r2, [pc, #76]	; (401970 <pmc_switch_mainck_to_xtal+0x64>)
  401924:	401a      	ands	r2, r3
  401926:	4b13      	ldr	r3, [pc, #76]	; (401974 <pmc_switch_mainck_to_xtal+0x68>)
  401928:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40192a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40192c:	e018      	b.n	401960 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40192e:	490f      	ldr	r1, [pc, #60]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  401930:	4b0e      	ldr	r3, [pc, #56]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  401932:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401934:	4b10      	ldr	r3, [pc, #64]	; (401978 <pmc_switch_mainck_to_xtal+0x6c>)
  401936:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401938:	683a      	ldr	r2, [r7, #0]
  40193a:	0212      	lsls	r2, r2, #8
  40193c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40193e:	431a      	orrs	r2, r3
  401940:	4b0e      	ldr	r3, [pc, #56]	; (40197c <pmc_switch_mainck_to_xtal+0x70>)
  401942:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401944:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401946:	bf00      	nop
  401948:	4b08      	ldr	r3, [pc, #32]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  40194a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40194c:	f003 0301 	and.w	r3, r3, #1
  401950:	2b00      	cmp	r3, #0
  401952:	d0f9      	beq.n	401948 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401954:	4905      	ldr	r1, [pc, #20]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  401956:	4b05      	ldr	r3, [pc, #20]	; (40196c <pmc_switch_mainck_to_xtal+0x60>)
  401958:	6a1a      	ldr	r2, [r3, #32]
  40195a:	4b09      	ldr	r3, [pc, #36]	; (401980 <pmc_switch_mainck_to_xtal+0x74>)
  40195c:	4313      	orrs	r3, r2
  40195e:	620b      	str	r3, [r1, #32]
}
  401960:	bf00      	nop
  401962:	370c      	adds	r7, #12
  401964:	46bd      	mov	sp, r7
  401966:	f85d 7b04 	ldr.w	r7, [sp], #4
  40196a:	4770      	bx	lr
  40196c:	400e0600 	.word	0x400e0600
  401970:	fec8fffc 	.word	0xfec8fffc
  401974:	01370002 	.word	0x01370002
  401978:	ffc8fffc 	.word	0xffc8fffc
  40197c:	00370001 	.word	0x00370001
  401980:	01370000 	.word	0x01370000

00401984 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401984:	b480      	push	{r7}
  401986:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401988:	4b04      	ldr	r3, [pc, #16]	; (40199c <pmc_osc_is_ready_mainck+0x18>)
  40198a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401990:	4618      	mov	r0, r3
  401992:	46bd      	mov	sp, r7
  401994:	f85d 7b04 	ldr.w	r7, [sp], #4
  401998:	4770      	bx	lr
  40199a:	bf00      	nop
  40199c:	400e0600 	.word	0x400e0600

004019a0 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  4019a0:	b480      	push	{r7}
  4019a2:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4019a4:	4b04      	ldr	r3, [pc, #16]	; (4019b8 <pmc_disable_pllack+0x18>)
  4019a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4019aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  4019ac:	bf00      	nop
  4019ae:	46bd      	mov	sp, r7
  4019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019b4:	4770      	bx	lr
  4019b6:	bf00      	nop
  4019b8:	400e0600 	.word	0x400e0600

004019bc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  4019bc:	b480      	push	{r7}
  4019be:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4019c0:	4b04      	ldr	r3, [pc, #16]	; (4019d4 <pmc_is_locked_pllack+0x18>)
  4019c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019c4:	f003 0302 	and.w	r3, r3, #2
}
  4019c8:	4618      	mov	r0, r3
  4019ca:	46bd      	mov	sp, r7
  4019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop
  4019d4:	400e0600 	.word	0x400e0600

004019d8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4019d8:	b480      	push	{r7}
  4019da:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4019dc:	4b04      	ldr	r3, [pc, #16]	; (4019f0 <pmc_is_locked_upll+0x18>)
  4019de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4019e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4019e4:	4618      	mov	r0, r3
  4019e6:	46bd      	mov	sp, r7
  4019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ec:	4770      	bx	lr
  4019ee:	bf00      	nop
  4019f0:	400e0600 	.word	0x400e0600

004019f4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4019f4:	b480      	push	{r7}
  4019f6:	b085      	sub	sp, #20
  4019f8:	af00      	add	r7, sp, #0
  4019fa:	6078      	str	r0, [r7, #4]
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4019fc:	4a0b      	ldr	r2, [pc, #44]	; (401a2c <pmc_enable_periph_clk+0x38>)
  4019fe:	687b      	ldr	r3, [r7, #4]
  401a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401a04:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401a08:	4b08      	ldr	r3, [pc, #32]	; (401a2c <pmc_enable_periph_clk+0x38>)
  401a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
  401a0e:	f043 2310 	orr.w	r3, r3, #268439552	; 0x10001000
  401a12:	60fb      	str	r3, [r7, #12]
	PMC->PMC_PCR = pcr;
  401a14:	4a05      	ldr	r2, [pc, #20]	; (401a2c <pmc_enable_periph_clk+0x38>)
  401a16:	68fb      	ldr	r3, [r7, #12]
  401a18:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	return 0;
  401a1c:	2300      	movs	r3, #0
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  401a1e:	4618      	mov	r0, r3
  401a20:	3714      	adds	r7, #20
  401a22:	46bd      	mov	sp, r7
  401a24:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a28:	4770      	bx	lr
  401a2a:	bf00      	nop
  401a2c:	400e0600 	.word	0x400e0600

00401a30 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  401a30:	b480      	push	{r7}
  401a32:	b087      	sub	sp, #28
  401a34:	af00      	add	r7, sp, #0
  401a36:	60f8      	str	r0, [r7, #12]
  401a38:	60b9      	str	r1, [r7, #8]
  401a3a:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401a3c:	68fa      	ldr	r2, [r7, #12]
  401a3e:	68bb      	ldr	r3, [r7, #8]
  401a40:	019b      	lsls	r3, r3, #6
  401a42:	4413      	add	r3, r2
  401a44:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  401a46:	697b      	ldr	r3, [r7, #20]
  401a48:	2202      	movs	r2, #2
  401a4a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  401a4c:	697b      	ldr	r3, [r7, #20]
  401a4e:	f04f 32ff 	mov.w	r2, #4294967295
  401a52:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  401a54:	697b      	ldr	r3, [r7, #20]
  401a56:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  401a58:	697b      	ldr	r3, [r7, #20]
  401a5a:	687a      	ldr	r2, [r7, #4]
  401a5c:	605a      	str	r2, [r3, #4]
}
  401a5e:	bf00      	nop
  401a60:	371c      	adds	r7, #28
  401a62:	46bd      	mov	sp, r7
  401a64:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a68:	4770      	bx	lr

00401a6a <tc_start>:
 * \param[in] ul_channel Channel to configure
 */
void tc_start(
		Tc *p_tc,
		uint32_t ul_channel)
{
  401a6a:	b480      	push	{r7}
  401a6c:	b083      	sub	sp, #12
  401a6e:	af00      	add	r7, sp, #0
  401a70:	6078      	str	r0, [r7, #4]
  401a72:	6039      	str	r1, [r7, #0]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  401a74:	687a      	ldr	r2, [r7, #4]
  401a76:	683b      	ldr	r3, [r7, #0]
  401a78:	019b      	lsls	r3, r3, #6
  401a7a:	4413      	add	r3, r2
  401a7c:	2205      	movs	r2, #5
  401a7e:	601a      	str	r2, [r3, #0]
}
  401a80:	bf00      	nop
  401a82:	370c      	adds	r7, #12
  401a84:	46bd      	mov	sp, r7
  401a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a8a:	4770      	bx	lr

00401a8c <tc_write_rc>:
 */
void tc_write_rc(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_value)
{
  401a8c:	b480      	push	{r7}
  401a8e:	b085      	sub	sp, #20
  401a90:	af00      	add	r7, sp, #0
  401a92:	60f8      	str	r0, [r7, #12]
  401a94:	60b9      	str	r1, [r7, #8]
  401a96:	607a      	str	r2, [r7, #4]
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  401a98:	68fa      	ldr	r2, [r7, #12]
  401a9a:	68bb      	ldr	r3, [r7, #8]
  401a9c:	019b      	lsls	r3, r3, #6
  401a9e:	4413      	add	r3, r2
  401aa0:	331c      	adds	r3, #28
  401aa2:	687a      	ldr	r2, [r7, #4]
  401aa4:	601a      	str	r2, [r3, #0]
}
  401aa6:	bf00      	nop
  401aa8:	3714      	adds	r7, #20
  401aaa:	46bd      	mov	sp, r7
  401aac:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ab0:	4770      	bx	lr

00401ab2 <tc_enable_interrupt>:
 */
void tc_enable_interrupt(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_sources)
{
  401ab2:	b480      	push	{r7}
  401ab4:	b087      	sub	sp, #28
  401ab6:	af00      	add	r7, sp, #0
  401ab8:	60f8      	str	r0, [r7, #12]
  401aba:	60b9      	str	r1, [r7, #8]
  401abc:	607a      	str	r2, [r7, #4]

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  401abe:	68fa      	ldr	r2, [r7, #12]
  401ac0:	68bb      	ldr	r3, [r7, #8]
  401ac2:	019b      	lsls	r3, r3, #6
  401ac4:	4413      	add	r3, r2
  401ac6:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
  401ac8:	697b      	ldr	r3, [r7, #20]
  401aca:	687a      	ldr	r2, [r7, #4]
  401acc:	625a      	str	r2, [r3, #36]	; 0x24
}
  401ace:	bf00      	nop
  401ad0:	371c      	adds	r7, #28
  401ad2:	46bd      	mov	sp, r7
  401ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ad8:	4770      	bx	lr

00401ada <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  401ada:	b480      	push	{r7}
  401adc:	b08d      	sub	sp, #52	; 0x34
  401ade:	af00      	add	r7, sp, #0
  401ae0:	60f8      	str	r0, [r7, #12]
  401ae2:	60b9      	str	r1, [r7, #8]
  401ae4:	607a      	str	r2, [r7, #4]
  401ae6:	603b      	str	r3, [r7, #0]
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401ae8:	2302      	movs	r3, #2
  401aea:	613b      	str	r3, [r7, #16]
  401aec:	2308      	movs	r3, #8
  401aee:	617b      	str	r3, [r7, #20]
  401af0:	2320      	movs	r3, #32
  401af2:	61bb      	str	r3, [r7, #24]
  401af4:	2380      	movs	r3, #128	; 0x80
  401af6:	61fb      	str	r3, [r7, #28]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  401af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  401afa:	0bdb      	lsrs	r3, r3, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  401afc:	623b      	str	r3, [r7, #32]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  401afe:	2300      	movs	r3, #0
  401b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  401b02:	e01a      	b.n	401b3a <tc_find_mck_divisor+0x60>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  401b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b06:	009b      	lsls	r3, r3, #2
  401b08:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401b0c:	4413      	add	r3, r2
  401b0e:	f853 3c20 	ldr.w	r3, [r3, #-32]
  401b12:	68ba      	ldr	r2, [r7, #8]
  401b14:	fbb2 f3f3 	udiv	r3, r2, r3
  401b18:	62bb      	str	r3, [r7, #40]	; 0x28
		ul_low  = ul_high / TC_DIV_FACTOR;
  401b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401b1c:	0c1b      	lsrs	r3, r3, #16
  401b1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (ul_freq > ul_high) {
  401b20:	68fa      	ldr	r2, [r7, #12]
  401b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
  401b24:	429a      	cmp	r2, r3
  401b26:	d901      	bls.n	401b2c <tc_find_mck_divisor+0x52>
			return 0;
  401b28:	2300      	movs	r3, #0
  401b2a:	e023      	b.n	401b74 <tc_find_mck_divisor+0x9a>
		} else if (ul_freq >= ul_low) {
  401b2c:	68fa      	ldr	r2, [r7, #12]
  401b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401b30:	429a      	cmp	r2, r3
  401b32:	d206      	bcs.n	401b42 <tc_find_mck_divisor+0x68>
			ul_index++) {
  401b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b36:	3301      	adds	r3, #1
  401b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (ul_index = 0;
  401b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b3c:	2b04      	cmp	r3, #4
  401b3e:	d9e1      	bls.n	401b04 <tc_find_mck_divisor+0x2a>
  401b40:	e000      	b.n	401b44 <tc_find_mck_divisor+0x6a>
			break;
  401b42:	bf00      	nop
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  401b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b46:	2b04      	cmp	r3, #4
  401b48:	d901      	bls.n	401b4e <tc_find_mck_divisor+0x74>
		return 0;
  401b4a:	2300      	movs	r3, #0
  401b4c:	e012      	b.n	401b74 <tc_find_mck_divisor+0x9a>
	}

	/*  Store results. */
	if (p_uldiv) {
  401b4e:	687b      	ldr	r3, [r7, #4]
  401b50:	2b00      	cmp	r3, #0
  401b52:	d008      	beq.n	401b66 <tc_find_mck_divisor+0x8c>
		*p_uldiv = divisors[ul_index];
  401b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401b56:	009b      	lsls	r3, r3, #2
  401b58:	f107 0230 	add.w	r2, r7, #48	; 0x30
  401b5c:	4413      	add	r3, r2
  401b5e:	f853 2c20 	ldr.w	r2, [r3, #-32]
  401b62:	687b      	ldr	r3, [r7, #4]
  401b64:	601a      	str	r2, [r3, #0]
	}

	if (p_ultcclks) {
  401b66:	683b      	ldr	r3, [r7, #0]
  401b68:	2b00      	cmp	r3, #0
  401b6a:	d002      	beq.n	401b72 <tc_find_mck_divisor+0x98>
		*p_ultcclks = ul_index;
  401b6c:	683b      	ldr	r3, [r7, #0]
  401b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  401b70:	601a      	str	r2, [r3, #0]
	}

	return 1;
  401b72:	2301      	movs	r3, #1
}
  401b74:	4618      	mov	r0, r3
  401b76:	3734      	adds	r7, #52	; 0x34
  401b78:	46bd      	mov	sp, r7
  401b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b7e:	4770      	bx	lr

00401b80 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  401b80:	b480      	push	{r7}
  401b82:	b083      	sub	sp, #12
  401b84:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b86:	f3ef 8310 	mrs	r3, PRIMASK
  401b8a:	607b      	str	r3, [r7, #4]
  return(result);
  401b8c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b8e:	2b00      	cmp	r3, #0
  401b90:	bf0c      	ite	eq
  401b92:	2301      	moveq	r3, #1
  401b94:	2300      	movne	r3, #0
  401b96:	b2db      	uxtb	r3, r3
  401b98:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  401b9a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  401b9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401ba0:	4b04      	ldr	r3, [pc, #16]	; (401bb4 <cpu_irq_save+0x34>)
  401ba2:	2200      	movs	r2, #0
  401ba4:	701a      	strb	r2, [r3, #0]
	return flags;
  401ba6:	683b      	ldr	r3, [r7, #0]
}
  401ba8:	4618      	mov	r0, r3
  401baa:	370c      	adds	r7, #12
  401bac:	46bd      	mov	sp, r7
  401bae:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bb2:	4770      	bx	lr
  401bb4:	20400000 	.word	0x20400000

00401bb8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  401bb8:	b480      	push	{r7}
  401bba:	b083      	sub	sp, #12
  401bbc:	af00      	add	r7, sp, #0
  401bbe:	6078      	str	r0, [r7, #4]
	return (flags);
  401bc0:	687b      	ldr	r3, [r7, #4]
  401bc2:	2b00      	cmp	r3, #0
  401bc4:	bf14      	ite	ne
  401bc6:	2301      	movne	r3, #1
  401bc8:	2300      	moveq	r3, #0
  401bca:	b2db      	uxtb	r3, r3
}
  401bcc:	4618      	mov	r0, r3
  401bce:	370c      	adds	r7, #12
  401bd0:	46bd      	mov	sp, r7
  401bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bd6:	4770      	bx	lr

00401bd8 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  401bd8:	b580      	push	{r7, lr}
  401bda:	b082      	sub	sp, #8
  401bdc:	af00      	add	r7, sp, #0
  401bde:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  401be0:	6878      	ldr	r0, [r7, #4]
  401be2:	4b07      	ldr	r3, [pc, #28]	; (401c00 <cpu_irq_restore+0x28>)
  401be4:	4798      	blx	r3
  401be6:	4603      	mov	r3, r0
  401be8:	2b00      	cmp	r3, #0
  401bea:	d005      	beq.n	401bf8 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  401bec:	4b05      	ldr	r3, [pc, #20]	; (401c04 <cpu_irq_restore+0x2c>)
  401bee:	2201      	movs	r2, #1
  401bf0:	701a      	strb	r2, [r3, #0]
  401bf2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401bf6:	b662      	cpsie	i
}
  401bf8:	bf00      	nop
  401bfa:	3708      	adds	r7, #8
  401bfc:	46bd      	mov	sp, r7
  401bfe:	bd80      	pop	{r7, pc}
  401c00:	00401bb9 	.word	0x00401bb9
  401c04:	20400000 	.word	0x20400000

00401c08 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401c08:	b580      	push	{r7, lr}
  401c0a:	b084      	sub	sp, #16
  401c0c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  401c0e:	4b1e      	ldr	r3, [pc, #120]	; (401c88 <Reset_Handler+0x80>)
  401c10:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  401c12:	4b1e      	ldr	r3, [pc, #120]	; (401c8c <Reset_Handler+0x84>)
  401c14:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  401c16:	68fa      	ldr	r2, [r7, #12]
  401c18:	68bb      	ldr	r3, [r7, #8]
  401c1a:	429a      	cmp	r2, r3
  401c1c:	d00c      	beq.n	401c38 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  401c1e:	e007      	b.n	401c30 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  401c20:	68bb      	ldr	r3, [r7, #8]
  401c22:	1d1a      	adds	r2, r3, #4
  401c24:	60ba      	str	r2, [r7, #8]
  401c26:	68fa      	ldr	r2, [r7, #12]
  401c28:	1d11      	adds	r1, r2, #4
  401c2a:	60f9      	str	r1, [r7, #12]
  401c2c:	6812      	ldr	r2, [r2, #0]
  401c2e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  401c30:	68bb      	ldr	r3, [r7, #8]
  401c32:	4a17      	ldr	r2, [pc, #92]	; (401c90 <Reset_Handler+0x88>)
  401c34:	4293      	cmp	r3, r2
  401c36:	d3f3      	bcc.n	401c20 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  401c38:	4b16      	ldr	r3, [pc, #88]	; (401c94 <Reset_Handler+0x8c>)
  401c3a:	60bb      	str	r3, [r7, #8]
  401c3c:	e004      	b.n	401c48 <Reset_Handler+0x40>
                *pDest++ = 0;
  401c3e:	68bb      	ldr	r3, [r7, #8]
  401c40:	1d1a      	adds	r2, r3, #4
  401c42:	60ba      	str	r2, [r7, #8]
  401c44:	2200      	movs	r2, #0
  401c46:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  401c48:	68bb      	ldr	r3, [r7, #8]
  401c4a:	4a13      	ldr	r2, [pc, #76]	; (401c98 <Reset_Handler+0x90>)
  401c4c:	4293      	cmp	r3, r2
  401c4e:	d3f6      	bcc.n	401c3e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  401c50:	4b12      	ldr	r3, [pc, #72]	; (401c9c <Reset_Handler+0x94>)
  401c52:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401c54:	4a12      	ldr	r2, [pc, #72]	; (401ca0 <Reset_Handler+0x98>)
  401c56:	68fb      	ldr	r3, [r7, #12]
  401c58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401c5c:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  401c5e:	4b11      	ldr	r3, [pc, #68]	; (401ca4 <Reset_Handler+0x9c>)
  401c60:	4798      	blx	r3
  401c62:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  401c64:	4a10      	ldr	r2, [pc, #64]	; (401ca8 <Reset_Handler+0xa0>)
  401c66:	4b10      	ldr	r3, [pc, #64]	; (401ca8 <Reset_Handler+0xa0>)
  401c68:	681b      	ldr	r3, [r3, #0]
  401c6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401c6e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401c70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401c74:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  401c78:	6878      	ldr	r0, [r7, #4]
  401c7a:	4b0c      	ldr	r3, [pc, #48]	; (401cac <Reset_Handler+0xa4>)
  401c7c:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  401c7e:	4b0c      	ldr	r3, [pc, #48]	; (401cb0 <Reset_Handler+0xa8>)
  401c80:	4798      	blx	r3

        /* Branch to main function */
        main();
  401c82:	4b0c      	ldr	r3, [pc, #48]	; (401cb4 <Reset_Handler+0xac>)
  401c84:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  401c86:	e7fe      	b.n	401c86 <Reset_Handler+0x7e>
  401c88:	0040fd40 	.word	0x0040fd40
  401c8c:	20400000 	.word	0x20400000
  401c90:	20400a18 	.word	0x20400a18
  401c94:	20400a18 	.word	0x20400a18
  401c98:	20404a1c 	.word	0x20404a1c
  401c9c:	00400000 	.word	0x00400000
  401ca0:	e000ed00 	.word	0xe000ed00
  401ca4:	00401b81 	.word	0x00401b81
  401ca8:	e000ed88 	.word	0xe000ed88
  401cac:	00401bd9 	.word	0x00401bd9
  401cb0:	0040cca1 	.word	0x0040cca1
  401cb4:	0040cbb9 	.word	0x0040cbb9

00401cb8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401cb8:	b480      	push	{r7}
  401cba:	af00      	add	r7, sp, #0
        while (1) {
  401cbc:	e7fe      	b.n	401cbc <Dummy_Handler+0x4>
	...

00401cc0 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  401cc0:	b480      	push	{r7}
  401cc2:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401cc4:	4b52      	ldr	r3, [pc, #328]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401cc8:	f003 0303 	and.w	r3, r3, #3
  401ccc:	2b01      	cmp	r3, #1
  401cce:	d014      	beq.n	401cfa <SystemCoreClockUpdate+0x3a>
  401cd0:	2b01      	cmp	r3, #1
  401cd2:	d302      	bcc.n	401cda <SystemCoreClockUpdate+0x1a>
  401cd4:	2b02      	cmp	r3, #2
  401cd6:	d038      	beq.n	401d4a <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  401cd8:	e07a      	b.n	401dd0 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401cda:	4b4e      	ldr	r3, [pc, #312]	; (401e14 <SystemCoreClockUpdate+0x154>)
  401cdc:	695b      	ldr	r3, [r3, #20]
  401cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401ce2:	2b00      	cmp	r3, #0
  401ce4:	d004      	beq.n	401cf0 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ce6:	4b4c      	ldr	r3, [pc, #304]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401ce8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401cec:	601a      	str	r2, [r3, #0]
    break;
  401cee:	e06f      	b.n	401dd0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401cf0:	4b49      	ldr	r3, [pc, #292]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401cf2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  401cf6:	601a      	str	r2, [r3, #0]
    break;
  401cf8:	e06a      	b.n	401dd0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401cfa:	4b45      	ldr	r3, [pc, #276]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401cfc:	6a1b      	ldr	r3, [r3, #32]
  401cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401d02:	2b00      	cmp	r3, #0
  401d04:	d003      	beq.n	401d0e <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401d06:	4b44      	ldr	r3, [pc, #272]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d08:	4a44      	ldr	r2, [pc, #272]	; (401e1c <SystemCoreClockUpdate+0x15c>)
  401d0a:	601a      	str	r2, [r3, #0]
    break;
  401d0c:	e060      	b.n	401dd0 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d0e:	4b42      	ldr	r3, [pc, #264]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d10:	4a43      	ldr	r2, [pc, #268]	; (401e20 <SystemCoreClockUpdate+0x160>)
  401d12:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401d14:	4b3e      	ldr	r3, [pc, #248]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401d16:	6a1b      	ldr	r3, [r3, #32]
  401d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d1c:	2b10      	cmp	r3, #16
  401d1e:	d004      	beq.n	401d2a <SystemCoreClockUpdate+0x6a>
  401d20:	2b20      	cmp	r3, #32
  401d22:	d008      	beq.n	401d36 <SystemCoreClockUpdate+0x76>
  401d24:	2b00      	cmp	r3, #0
  401d26:	d00e      	beq.n	401d46 <SystemCoreClockUpdate+0x86>
          break;
  401d28:	e00e      	b.n	401d48 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  401d2a:	4b3b      	ldr	r3, [pc, #236]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d2c:	681b      	ldr	r3, [r3, #0]
  401d2e:	005b      	lsls	r3, r3, #1
  401d30:	4a39      	ldr	r2, [pc, #228]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d32:	6013      	str	r3, [r2, #0]
          break;
  401d34:	e008      	b.n	401d48 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  401d36:	4b38      	ldr	r3, [pc, #224]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d38:	681a      	ldr	r2, [r3, #0]
  401d3a:	4613      	mov	r3, r2
  401d3c:	005b      	lsls	r3, r3, #1
  401d3e:	4413      	add	r3, r2
  401d40:	4a35      	ldr	r2, [pc, #212]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d42:	6013      	str	r3, [r2, #0]
          break;
  401d44:	e000      	b.n	401d48 <SystemCoreClockUpdate+0x88>
          break;
  401d46:	bf00      	nop
    break;
  401d48:	e042      	b.n	401dd0 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401d4a:	4b31      	ldr	r3, [pc, #196]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401d4c:	6a1b      	ldr	r3, [r3, #32]
  401d4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  401d52:	2b00      	cmp	r3, #0
  401d54:	d003      	beq.n	401d5e <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401d56:	4b30      	ldr	r3, [pc, #192]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d58:	4a30      	ldr	r2, [pc, #192]	; (401e1c <SystemCoreClockUpdate+0x15c>)
  401d5a:	601a      	str	r2, [r3, #0]
  401d5c:	e01c      	b.n	401d98 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401d5e:	4b2e      	ldr	r3, [pc, #184]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d60:	4a2f      	ldr	r2, [pc, #188]	; (401e20 <SystemCoreClockUpdate+0x160>)
  401d62:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401d64:	4b2a      	ldr	r3, [pc, #168]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401d66:	6a1b      	ldr	r3, [r3, #32]
  401d68:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401d6c:	2b10      	cmp	r3, #16
  401d6e:	d004      	beq.n	401d7a <SystemCoreClockUpdate+0xba>
  401d70:	2b20      	cmp	r3, #32
  401d72:	d008      	beq.n	401d86 <SystemCoreClockUpdate+0xc6>
  401d74:	2b00      	cmp	r3, #0
  401d76:	d00e      	beq.n	401d96 <SystemCoreClockUpdate+0xd6>
          break;
  401d78:	e00e      	b.n	401d98 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  401d7a:	4b27      	ldr	r3, [pc, #156]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d7c:	681b      	ldr	r3, [r3, #0]
  401d7e:	005b      	lsls	r3, r3, #1
  401d80:	4a25      	ldr	r2, [pc, #148]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d82:	6013      	str	r3, [r2, #0]
          break;
  401d84:	e008      	b.n	401d98 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  401d86:	4b24      	ldr	r3, [pc, #144]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d88:	681a      	ldr	r2, [r3, #0]
  401d8a:	4613      	mov	r3, r2
  401d8c:	005b      	lsls	r3, r3, #1
  401d8e:	4413      	add	r3, r2
  401d90:	4a21      	ldr	r2, [pc, #132]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401d92:	6013      	str	r3, [r2, #0]
          break;
  401d94:	e000      	b.n	401d98 <SystemCoreClockUpdate+0xd8>
          break;
  401d96:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401d98:	4b1d      	ldr	r3, [pc, #116]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401d9c:	f003 0303 	and.w	r3, r3, #3
  401da0:	2b02      	cmp	r3, #2
  401da2:	d114      	bne.n	401dce <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401da4:	4b1a      	ldr	r3, [pc, #104]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401da8:	0c1b      	lsrs	r3, r3, #16
  401daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
  401dae:	3301      	adds	r3, #1
  401db0:	4a19      	ldr	r2, [pc, #100]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401db2:	6812      	ldr	r2, [r2, #0]
  401db4:	fb02 f303 	mul.w	r3, r2, r3
  401db8:	4a17      	ldr	r2, [pc, #92]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dba:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401dbc:	4b14      	ldr	r3, [pc, #80]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  401dc0:	b2db      	uxtb	r3, r3
  401dc2:	4a15      	ldr	r2, [pc, #84]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dc4:	6812      	ldr	r2, [r2, #0]
  401dc6:	fbb2 f3f3 	udiv	r3, r2, r3
  401dca:	4a13      	ldr	r2, [pc, #76]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dcc:	6013      	str	r3, [r2, #0]
    break;
  401dce:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401dd0:	4b0f      	ldr	r3, [pc, #60]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401dd8:	2b70      	cmp	r3, #112	; 0x70
  401dda:	d108      	bne.n	401dee <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  401ddc:	4b0e      	ldr	r3, [pc, #56]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dde:	681b      	ldr	r3, [r3, #0]
  401de0:	4a10      	ldr	r2, [pc, #64]	; (401e24 <SystemCoreClockUpdate+0x164>)
  401de2:	fba2 2303 	umull	r2, r3, r2, r3
  401de6:	085b      	lsrs	r3, r3, #1
  401de8:	4a0b      	ldr	r2, [pc, #44]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dea:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  401dec:	e00a      	b.n	401e04 <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401dee:	4b08      	ldr	r3, [pc, #32]	; (401e10 <SystemCoreClockUpdate+0x150>)
  401df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401df2:	091b      	lsrs	r3, r3, #4
  401df4:	f003 0307 	and.w	r3, r3, #7
  401df8:	4a07      	ldr	r2, [pc, #28]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401dfa:	6812      	ldr	r2, [r2, #0]
  401dfc:	fa22 f303 	lsr.w	r3, r2, r3
  401e00:	4a05      	ldr	r2, [pc, #20]	; (401e18 <SystemCoreClockUpdate+0x158>)
  401e02:	6013      	str	r3, [r2, #0]
}
  401e04:	bf00      	nop
  401e06:	46bd      	mov	sp, r7
  401e08:	f85d 7b04 	ldr.w	r7, [sp], #4
  401e0c:	4770      	bx	lr
  401e0e:	bf00      	nop
  401e10:	400e0600 	.word	0x400e0600
  401e14:	400e1810 	.word	0x400e1810
  401e18:	20400004 	.word	0x20400004
  401e1c:	00b71b00 	.word	0x00b71b00
  401e20:	003d0900 	.word	0x003d0900
  401e24:	aaaaaaab 	.word	0xaaaaaaab

00401e28 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  401e28:	b480      	push	{r7}
  401e2a:	b083      	sub	sp, #12
  401e2c:	af00      	add	r7, sp, #0
  401e2e:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401e30:	687b      	ldr	r3, [r7, #4]
  401e32:	4a1d      	ldr	r2, [pc, #116]	; (401ea8 <system_init_flash+0x80>)
  401e34:	4293      	cmp	r3, r2
  401e36:	d804      	bhi.n	401e42 <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401e38:	4b1c      	ldr	r3, [pc, #112]	; (401eac <system_init_flash+0x84>)
  401e3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401e3e:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  401e40:	e02b      	b.n	401e9a <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  401e42:	687b      	ldr	r3, [r7, #4]
  401e44:	4a1a      	ldr	r2, [pc, #104]	; (401eb0 <system_init_flash+0x88>)
  401e46:	4293      	cmp	r3, r2
  401e48:	d803      	bhi.n	401e52 <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401e4a:	4b18      	ldr	r3, [pc, #96]	; (401eac <system_init_flash+0x84>)
  401e4c:	4a19      	ldr	r2, [pc, #100]	; (401eb4 <system_init_flash+0x8c>)
  401e4e:	601a      	str	r2, [r3, #0]
}
  401e50:	e023      	b.n	401e9a <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  401e52:	687b      	ldr	r3, [r7, #4]
  401e54:	4a18      	ldr	r2, [pc, #96]	; (401eb8 <system_init_flash+0x90>)
  401e56:	4293      	cmp	r3, r2
  401e58:	d803      	bhi.n	401e62 <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401e5a:	4b14      	ldr	r3, [pc, #80]	; (401eac <system_init_flash+0x84>)
  401e5c:	4a17      	ldr	r2, [pc, #92]	; (401ebc <system_init_flash+0x94>)
  401e5e:	601a      	str	r2, [r3, #0]
}
  401e60:	e01b      	b.n	401e9a <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401e62:	687b      	ldr	r3, [r7, #4]
  401e64:	4a16      	ldr	r2, [pc, #88]	; (401ec0 <system_init_flash+0x98>)
  401e66:	4293      	cmp	r3, r2
  401e68:	d803      	bhi.n	401e72 <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401e6a:	4b10      	ldr	r3, [pc, #64]	; (401eac <system_init_flash+0x84>)
  401e6c:	4a15      	ldr	r2, [pc, #84]	; (401ec4 <system_init_flash+0x9c>)
  401e6e:	601a      	str	r2, [r3, #0]
}
  401e70:	e013      	b.n	401e9a <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401e72:	687b      	ldr	r3, [r7, #4]
  401e74:	4a14      	ldr	r2, [pc, #80]	; (401ec8 <system_init_flash+0xa0>)
  401e76:	4293      	cmp	r3, r2
  401e78:	d804      	bhi.n	401e84 <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401e7a:	4b0c      	ldr	r3, [pc, #48]	; (401eac <system_init_flash+0x84>)
  401e7c:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401e80:	601a      	str	r2, [r3, #0]
}
  401e82:	e00a      	b.n	401e9a <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401e84:	687b      	ldr	r3, [r7, #4]
  401e86:	4a11      	ldr	r2, [pc, #68]	; (401ecc <system_init_flash+0xa4>)
  401e88:	4293      	cmp	r3, r2
  401e8a:	d803      	bhi.n	401e94 <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401e8c:	4b07      	ldr	r3, [pc, #28]	; (401eac <system_init_flash+0x84>)
  401e8e:	4a10      	ldr	r2, [pc, #64]	; (401ed0 <system_init_flash+0xa8>)
  401e90:	601a      	str	r2, [r3, #0]
}
  401e92:	e002      	b.n	401e9a <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401e94:	4b05      	ldr	r3, [pc, #20]	; (401eac <system_init_flash+0x84>)
  401e96:	4a0f      	ldr	r2, [pc, #60]	; (401ed4 <system_init_flash+0xac>)
  401e98:	601a      	str	r2, [r3, #0]
}
  401e9a:	bf00      	nop
  401e9c:	370c      	adds	r7, #12
  401e9e:	46bd      	mov	sp, r7
  401ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ea4:	4770      	bx	lr
  401ea6:	bf00      	nop
  401ea8:	015ef3bf 	.word	0x015ef3bf
  401eac:	400e0c00 	.word	0x400e0c00
  401eb0:	02bde77f 	.word	0x02bde77f
  401eb4:	04000100 	.word	0x04000100
  401eb8:	041cdb3f 	.word	0x041cdb3f
  401ebc:	04000200 	.word	0x04000200
  401ec0:	057bceff 	.word	0x057bceff
  401ec4:	04000300 	.word	0x04000300
  401ec8:	06dac2bf 	.word	0x06dac2bf
  401ecc:	0839b67f 	.word	0x0839b67f
  401ed0:	04000500 	.word	0x04000500
  401ed4:	04000600 	.word	0x04000600

00401ed8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  401ed8:	b480      	push	{r7}
  401eda:	b085      	sub	sp, #20
  401edc:	af00      	add	r7, sp, #0
  401ede:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  401ee0:	4b10      	ldr	r3, [pc, #64]	; (401f24 <_sbrk+0x4c>)
  401ee2:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  401ee4:	4b10      	ldr	r3, [pc, #64]	; (401f28 <_sbrk+0x50>)
  401ee6:	681b      	ldr	r3, [r3, #0]
  401ee8:	2b00      	cmp	r3, #0
  401eea:	d102      	bne.n	401ef2 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  401eec:	4b0e      	ldr	r3, [pc, #56]	; (401f28 <_sbrk+0x50>)
  401eee:	4a0f      	ldr	r2, [pc, #60]	; (401f2c <_sbrk+0x54>)
  401ef0:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  401ef2:	4b0d      	ldr	r3, [pc, #52]	; (401f28 <_sbrk+0x50>)
  401ef4:	681b      	ldr	r3, [r3, #0]
  401ef6:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  401ef8:	68ba      	ldr	r2, [r7, #8]
  401efa:	687b      	ldr	r3, [r7, #4]
  401efc:	441a      	add	r2, r3
  401efe:	68fb      	ldr	r3, [r7, #12]
  401f00:	429a      	cmp	r2, r3
  401f02:	dd02      	ble.n	401f0a <_sbrk+0x32>
		return (caddr_t) -1;	
  401f04:	f04f 33ff 	mov.w	r3, #4294967295
  401f08:	e006      	b.n	401f18 <_sbrk+0x40>
	}

	heap += incr;
  401f0a:	4b07      	ldr	r3, [pc, #28]	; (401f28 <_sbrk+0x50>)
  401f0c:	681a      	ldr	r2, [r3, #0]
  401f0e:	687b      	ldr	r3, [r7, #4]
  401f10:	4413      	add	r3, r2
  401f12:	4a05      	ldr	r2, [pc, #20]	; (401f28 <_sbrk+0x50>)
  401f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  401f16:	68bb      	ldr	r3, [r7, #8]
}
  401f18:	4618      	mov	r0, r3
  401f1a:	3714      	adds	r7, #20
  401f1c:	46bd      	mov	sp, r7
  401f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f22:	4770      	bx	lr
  401f24:	2045fffc 	.word	0x2045fffc
  401f28:	20400aa4 	.word	0x20400aa4
  401f2c:	20405020 	.word	0x20405020

00401f30 <_close>:
{
	return -1;
}

extern int _close(int file)
{
  401f30:	b480      	push	{r7}
  401f32:	b083      	sub	sp, #12
  401f34:	af00      	add	r7, sp, #0
  401f36:	6078      	str	r0, [r7, #4]
	return -1;
  401f38:	f04f 33ff 	mov.w	r3, #4294967295
}
  401f3c:	4618      	mov	r0, r3
  401f3e:	370c      	adds	r7, #12
  401f40:	46bd      	mov	sp, r7
  401f42:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f46:	4770      	bx	lr

00401f48 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
  401f48:	b480      	push	{r7}
  401f4a:	b083      	sub	sp, #12
  401f4c:	af00      	add	r7, sp, #0
  401f4e:	6078      	str	r0, [r7, #4]
  401f50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
  401f52:	683b      	ldr	r3, [r7, #0]
  401f54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401f58:	605a      	str	r2, [r3, #4]

	return 0;
  401f5a:	2300      	movs	r3, #0
}
  401f5c:	4618      	mov	r0, r3
  401f5e:	370c      	adds	r7, #12
  401f60:	46bd      	mov	sp, r7
  401f62:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f66:	4770      	bx	lr

00401f68 <_isatty>:

extern int _isatty(int file)
{
  401f68:	b480      	push	{r7}
  401f6a:	b083      	sub	sp, #12
  401f6c:	af00      	add	r7, sp, #0
  401f6e:	6078      	str	r0, [r7, #4]
	return 1;
  401f70:	2301      	movs	r3, #1
}
  401f72:	4618      	mov	r0, r3
  401f74:	370c      	adds	r7, #12
  401f76:	46bd      	mov	sp, r7
  401f78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f7c:	4770      	bx	lr

00401f7e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
  401f7e:	b480      	push	{r7}
  401f80:	b085      	sub	sp, #20
  401f82:	af00      	add	r7, sp, #0
  401f84:	60f8      	str	r0, [r7, #12]
  401f86:	60b9      	str	r1, [r7, #8]
  401f88:	607a      	str	r2, [r7, #4]
	return 0;
  401f8a:	2300      	movs	r3, #0
}
  401f8c:	4618      	mov	r0, r3
  401f8e:	3714      	adds	r7, #20
  401f90:	46bd      	mov	sp, r7
  401f92:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f96:	4770      	bx	lr

00401f98 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  401f98:	b480      	push	{r7}
  401f9a:	b083      	sub	sp, #12
  401f9c:	af00      	add	r7, sp, #0
  401f9e:	4603      	mov	r3, r0
  401fa0:	80fb      	strh	r3, [r7, #6]
  return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
  401fa2:	88fb      	ldrh	r3, [r7, #6]
  401fa4:	021b      	lsls	r3, r3, #8
  401fa6:	b21a      	sxth	r2, r3
  401fa8:	88fb      	ldrh	r3, [r7, #6]
  401faa:	0a1b      	lsrs	r3, r3, #8
  401fac:	b29b      	uxth	r3, r3
  401fae:	b21b      	sxth	r3, r3
  401fb0:	4313      	orrs	r3, r2
  401fb2:	b21b      	sxth	r3, r3
  401fb4:	b29b      	uxth	r3, r3
}
  401fb6:	4618      	mov	r0, r3
  401fb8:	370c      	adds	r7, #12
  401fba:	46bd      	mov	sp, r7
  401fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401fc0:	4770      	bx	lr
	...

00401fc4 <lwip_ntohs>:
 * @param n u16_t in network byte order
 * @return n in host byte order
 */
u16_t
lwip_ntohs(u16_t n)
{
  401fc4:	b580      	push	{r7, lr}
  401fc6:	b082      	sub	sp, #8
  401fc8:	af00      	add	r7, sp, #0
  401fca:	4603      	mov	r3, r0
  401fcc:	80fb      	strh	r3, [r7, #6]
  return lwip_htons(n);
  401fce:	88fb      	ldrh	r3, [r7, #6]
  401fd0:	4618      	mov	r0, r3
  401fd2:	4b03      	ldr	r3, [pc, #12]	; (401fe0 <lwip_ntohs+0x1c>)
  401fd4:	4798      	blx	r3
  401fd6:	4603      	mov	r3, r0
}
  401fd8:	4618      	mov	r0, r3
  401fda:	3708      	adds	r7, #8
  401fdc:	46bd      	mov	sp, r7
  401fde:	bd80      	pop	{r7, pc}
  401fe0:	00401f99 	.word	0x00401f99

00401fe4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  401fe4:	b480      	push	{r7}
  401fe6:	b083      	sub	sp, #12
  401fe8:	af00      	add	r7, sp, #0
  401fea:	6078      	str	r0, [r7, #4]
  return ((n & 0xff) << 24) |
  401fec:	687b      	ldr	r3, [r7, #4]
  401fee:	061a      	lsls	r2, r3, #24
    ((n & 0xff00) << 8) |
  401ff0:	687b      	ldr	r3, [r7, #4]
  401ff2:	021b      	lsls	r3, r3, #8
  401ff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  return ((n & 0xff) << 24) |
  401ff8:	431a      	orrs	r2, r3
    ((n & 0xff0000UL) >> 8) |
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	0a1b      	lsrs	r3, r3, #8
  401ffe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    ((n & 0xff00) << 8) |
  402002:	431a      	orrs	r2, r3
    ((n & 0xff000000UL) >> 24);
  402004:	687b      	ldr	r3, [r7, #4]
  402006:	0e1b      	lsrs	r3, r3, #24
    ((n & 0xff0000UL) >> 8) |
  402008:	4313      	orrs	r3, r2
}
  40200a:	4618      	mov	r0, r3
  40200c:	370c      	adds	r7, #12
  40200e:	46bd      	mov	sp, r7
  402010:	f85d 7b04 	ldr.w	r7, [sp], #4
  402014:	4770      	bx	lr
	...

00402018 <lwip_ntohl>:
 * @param n u32_t in network byte order
 * @return n in host byte order
 */
u32_t
lwip_ntohl(u32_t n)
{
  402018:	b580      	push	{r7, lr}
  40201a:	b082      	sub	sp, #8
  40201c:	af00      	add	r7, sp, #0
  40201e:	6078      	str	r0, [r7, #4]
  return lwip_htonl(n);
  402020:	6878      	ldr	r0, [r7, #4]
  402022:	4b03      	ldr	r3, [pc, #12]	; (402030 <lwip_ntohl+0x18>)
  402024:	4798      	blx	r3
  402026:	4603      	mov	r3, r0
}
  402028:	4618      	mov	r0, r3
  40202a:	3708      	adds	r7, #8
  40202c:	46bd      	mov	sp, r7
  40202e:	bd80      	pop	{r7, pc}
  402030:	00401fe5 	.word	0x00401fe5

00402034 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  402034:	b580      	push	{r7, lr}
  402036:	b084      	sub	sp, #16
  402038:	af00      	add	r7, sp, #0
  40203a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  40203c:	687b      	ldr	r3, [r7, #4]
  40203e:	6a1b      	ldr	r3, [r3, #32]
  402040:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Set the interface down since the address must no longer be used, as per RFC2131 */
  netif_set_down(netif);
  402042:	6878      	ldr	r0, [r7, #4]
  402044:	4b0c      	ldr	r3, [pc, #48]	; (402078 <dhcp_handle_nak+0x44>)
  402046:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  402048:	490c      	ldr	r1, [pc, #48]	; (40207c <dhcp_handle_nak+0x48>)
  40204a:	6878      	ldr	r0, [r7, #4]
  40204c:	4b0c      	ldr	r3, [pc, #48]	; (402080 <dhcp_handle_nak+0x4c>)
  40204e:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  402050:	490a      	ldr	r1, [pc, #40]	; (40207c <dhcp_handle_nak+0x48>)
  402052:	6878      	ldr	r0, [r7, #4]
  402054:	4b0b      	ldr	r3, [pc, #44]	; (402084 <dhcp_handle_nak+0x50>)
  402056:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY); 
  402058:	4908      	ldr	r1, [pc, #32]	; (40207c <dhcp_handle_nak+0x48>)
  40205a:	6878      	ldr	r0, [r7, #4]
  40205c:	4b0a      	ldr	r3, [pc, #40]	; (402088 <dhcp_handle_nak+0x54>)
  40205e:	4798      	blx	r3
  /* Change to a defined state */
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  402060:	210c      	movs	r1, #12
  402062:	68f8      	ldr	r0, [r7, #12]
  402064:	4b09      	ldr	r3, [pc, #36]	; (40208c <dhcp_handle_nak+0x58>)
  402066:	4798      	blx	r3
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  402068:	6878      	ldr	r0, [r7, #4]
  40206a:	4b09      	ldr	r3, [pc, #36]	; (402090 <dhcp_handle_nak+0x5c>)
  40206c:	4798      	blx	r3
}
  40206e:	bf00      	nop
  402070:	3710      	adds	r7, #16
  402072:	46bd      	mov	sp, r7
  402074:	bd80      	pop	{r7, pc}
  402076:	bf00      	nop
  402078:	0040577d 	.word	0x0040577d
  40207c:	0040faf4 	.word	0x0040faf4
  402080:	004055fd 	.word	0x004055fd
  402084:	004056b1 	.word	0x004056b1
  402088:	004056d9 	.word	0x004056d9
  40208c:	00402f19 	.word	0x00402f19
  402090:	00402801 	.word	0x00402801

00402094 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  402094:	b580      	push	{r7, lr}
  402096:	b084      	sub	sp, #16
  402098:	af00      	add	r7, sp, #0
  40209a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  40209c:	687b      	ldr	r3, [r7, #4]
  40209e:	6a1b      	ldr	r3, [r3, #32]
  4020a0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_CHECKING);
  4020a2:	2108      	movs	r1, #8
  4020a4:	68f8      	ldr	r0, [r7, #12]
  4020a6:	4b12      	ldr	r3, [pc, #72]	; (4020f0 <dhcp_check+0x5c>)
  4020a8:	4798      	blx	r3
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  4020aa:	68fb      	ldr	r3, [r7, #12]
  4020ac:	3324      	adds	r3, #36	; 0x24
  4020ae:	2200      	movs	r2, #0
  4020b0:	4619      	mov	r1, r3
  4020b2:	6878      	ldr	r0, [r7, #4]
  4020b4:	4b0f      	ldr	r3, [pc, #60]	; (4020f4 <dhcp_check+0x60>)
  4020b6:	4798      	blx	r3
  4020b8:	4603      	mov	r3, r0
  4020ba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  dhcp->tries++;
  4020bc:	68fb      	ldr	r3, [r7, #12]
  4020be:	7b5b      	ldrb	r3, [r3, #13]
  4020c0:	3301      	adds	r3, #1
  4020c2:	b2da      	uxtb	r2, r3
  4020c4:	68fb      	ldr	r3, [r7, #12]
  4020c6:	735a      	strb	r2, [r3, #13]
  msecs = 500;
  4020c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  4020cc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4020ce:	893b      	ldrh	r3, [r7, #8]
  4020d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4020d4:	4a08      	ldr	r2, [pc, #32]	; (4020f8 <dhcp_check+0x64>)
  4020d6:	fb82 1203 	smull	r1, r2, r2, r3
  4020da:	1152      	asrs	r2, r2, #5
  4020dc:	17db      	asrs	r3, r3, #31
  4020de:	1ad3      	subs	r3, r2, r3
  4020e0:	b29a      	uxth	r2, r3
  4020e2:	68fb      	ldr	r3, [r7, #12]
  4020e4:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  4020e6:	bf00      	nop
  4020e8:	3710      	adds	r7, #16
  4020ea:	46bd      	mov	sp, r7
  4020ec:	bd80      	pop	{r7, pc}
  4020ee:	bf00      	nop
  4020f0:	00402f19 	.word	0x00402f19
  4020f4:	0040b6e9 	.word	0x0040b6e9
  4020f8:	10624dd3 	.word	0x10624dd3

004020fc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  4020fc:	b580      	push	{r7, lr}
  4020fe:	b084      	sub	sp, #16
  402100:	af00      	add	r7, sp, #0
  402102:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402104:	687b      	ldr	r3, [r7, #4]
  402106:	6a1b      	ldr	r3, [r3, #32]
  402108:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  40210a:	4b0c      	ldr	r3, [pc, #48]	; (40213c <dhcp_handle_offer+0x40>)
  40210c:	789b      	ldrb	r3, [r3, #2]
  40210e:	2b00      	cmp	r3, #0
  402110:	d00f      	beq.n	402132 <dhcp_handle_offer+0x36>
    ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  402112:	4b0b      	ldr	r3, [pc, #44]	; (402140 <dhcp_handle_offer+0x44>)
  402114:	689b      	ldr	r3, [r3, #8]
  402116:	4618      	mov	r0, r3
  402118:	4b0a      	ldr	r3, [pc, #40]	; (402144 <dhcp_handle_offer+0x48>)
  40211a:	4798      	blx	r3
  40211c:	4602      	mov	r2, r0
  40211e:	68fb      	ldr	r3, [r7, #12]
  402120:	621a      	str	r2, [r3, #32]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->server_ip_addr)));
    /* remember offered address */
    ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  402122:	68fb      	ldr	r3, [r7, #12]
  402124:	689b      	ldr	r3, [r3, #8]
  402126:	691a      	ldr	r2, [r3, #16]
  402128:	68fb      	ldr	r3, [r7, #12]
  40212a:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  40212c:	6878      	ldr	r0, [r7, #4]
  40212e:	4b06      	ldr	r3, [pc, #24]	; (402148 <dhcp_handle_offer+0x4c>)
  402130:	4798      	blx	r3
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  402132:	bf00      	nop
  402134:	3710      	adds	r7, #16
  402136:	46bd      	mov	sp, r7
  402138:	bd80      	pop	{r7, pc}
  40213a:	bf00      	nop
  40213c:	20403938 	.word	0x20403938
  402140:	20403944 	.word	0x20403944
  402144:	00401fe5 	.word	0x00401fe5
  402148:	0040214d 	.word	0x0040214d

0040214c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  40214c:	b590      	push	{r4, r7, lr}
  40214e:	b087      	sub	sp, #28
  402150:	af02      	add	r7, sp, #8
  402152:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402154:	687b      	ldr	r3, [r7, #4]
  402156:	6a1b      	ldr	r3, [r3, #32]
  402158:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_REQUESTING);
  40215a:	2101      	movs	r1, #1
  40215c:	68f8      	ldr	r0, [r7, #12]
  40215e:	4b46      	ldr	r3, [pc, #280]	; (402278 <dhcp_select+0x12c>)
  402160:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402162:	2203      	movs	r2, #3
  402164:	68f9      	ldr	r1, [r7, #12]
  402166:	6878      	ldr	r0, [r7, #4]
  402168:	4b44      	ldr	r3, [pc, #272]	; (40227c <dhcp_select+0x130>)
  40216a:	4798      	blx	r3
  40216c:	4603      	mov	r3, r0
  40216e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402170:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402174:	2b00      	cmp	r3, #0
  402176:	d157      	bne.n	402228 <dhcp_select+0xdc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402178:	2202      	movs	r2, #2
  40217a:	2139      	movs	r1, #57	; 0x39
  40217c:	68f8      	ldr	r0, [r7, #12]
  40217e:	4b40      	ldr	r3, [pc, #256]	; (402280 <dhcp_select+0x134>)
  402180:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402182:	687b      	ldr	r3, [r7, #4]
  402184:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402186:	4619      	mov	r1, r3
  402188:	68f8      	ldr	r0, [r7, #12]
  40218a:	4b3e      	ldr	r3, [pc, #248]	; (402284 <dhcp_select+0x138>)
  40218c:	4798      	blx	r3

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  40218e:	2204      	movs	r2, #4
  402190:	2132      	movs	r1, #50	; 0x32
  402192:	68f8      	ldr	r0, [r7, #12]
  402194:	4b3a      	ldr	r3, [pc, #232]	; (402280 <dhcp_select+0x134>)
  402196:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402198:	68fb      	ldr	r3, [r7, #12]
  40219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40219c:	4618      	mov	r0, r3
  40219e:	4b3a      	ldr	r3, [pc, #232]	; (402288 <dhcp_select+0x13c>)
  4021a0:	4798      	blx	r3
  4021a2:	4603      	mov	r3, r0
  4021a4:	4619      	mov	r1, r3
  4021a6:	68f8      	ldr	r0, [r7, #12]
  4021a8:	4b38      	ldr	r3, [pc, #224]	; (40228c <dhcp_select+0x140>)
  4021aa:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  4021ac:	2204      	movs	r2, #4
  4021ae:	2136      	movs	r1, #54	; 0x36
  4021b0:	68f8      	ldr	r0, [r7, #12]
  4021b2:	4b33      	ldr	r3, [pc, #204]	; (402280 <dhcp_select+0x134>)
  4021b4:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
  4021b6:	68fb      	ldr	r3, [r7, #12]
  4021b8:	6a1b      	ldr	r3, [r3, #32]
  4021ba:	4618      	mov	r0, r3
  4021bc:	4b32      	ldr	r3, [pc, #200]	; (402288 <dhcp_select+0x13c>)
  4021be:	4798      	blx	r3
  4021c0:	4603      	mov	r3, r0
  4021c2:	4619      	mov	r1, r3
  4021c4:	68f8      	ldr	r0, [r7, #12]
  4021c6:	4b31      	ldr	r3, [pc, #196]	; (40228c <dhcp_select+0x140>)
  4021c8:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  4021ca:	2204      	movs	r2, #4
  4021cc:	2137      	movs	r1, #55	; 0x37
  4021ce:	68f8      	ldr	r0, [r7, #12]
  4021d0:	4b2b      	ldr	r3, [pc, #172]	; (402280 <dhcp_select+0x134>)
  4021d2:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  4021d4:	2101      	movs	r1, #1
  4021d6:	68f8      	ldr	r0, [r7, #12]
  4021d8:	4b2d      	ldr	r3, [pc, #180]	; (402290 <dhcp_select+0x144>)
  4021da:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  4021dc:	2103      	movs	r1, #3
  4021de:	68f8      	ldr	r0, [r7, #12]
  4021e0:	4b2b      	ldr	r3, [pc, #172]	; (402290 <dhcp_select+0x144>)
  4021e2:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  4021e4:	211c      	movs	r1, #28
  4021e6:	68f8      	ldr	r0, [r7, #12]
  4021e8:	4b29      	ldr	r3, [pc, #164]	; (402290 <dhcp_select+0x144>)
  4021ea:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  4021ec:	2106      	movs	r1, #6
  4021ee:	68f8      	ldr	r0, [r7, #12]
  4021f0:	4b27      	ldr	r3, [pc, #156]	; (402290 <dhcp_select+0x144>)
  4021f2:	4798      	blx	r3

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  4021f4:	68f8      	ldr	r0, [r7, #12]
  4021f6:	4b27      	ldr	r3, [pc, #156]	; (402294 <dhcp_select+0x148>)
  4021f8:	4798      	blx	r3
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  4021fa:	68fb      	ldr	r3, [r7, #12]
  4021fc:	691a      	ldr	r2, [r3, #16]
  4021fe:	68fb      	ldr	r3, [r7, #12]
  402200:	8b1b      	ldrh	r3, [r3, #24]
  402202:	33f0      	adds	r3, #240	; 0xf0
  402204:	b29b      	uxth	r3, r3
  402206:	4619      	mov	r1, r3
  402208:	4610      	mov	r0, r2
  40220a:	4b23      	ldr	r3, [pc, #140]	; (402298 <dhcp_select+0x14c>)
  40220c:	4798      	blx	r3

    /* send broadcast to any DHCP server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  40220e:	68fb      	ldr	r3, [r7, #12]
  402210:	6858      	ldr	r0, [r3, #4]
  402212:	68fb      	ldr	r3, [r7, #12]
  402214:	6919      	ldr	r1, [r3, #16]
  402216:	687b      	ldr	r3, [r7, #4]
  402218:	9300      	str	r3, [sp, #0]
  40221a:	2343      	movs	r3, #67	; 0x43
  40221c:	4a1f      	ldr	r2, [pc, #124]	; (40229c <dhcp_select+0x150>)
  40221e:	4c20      	ldr	r4, [pc, #128]	; (4022a0 <dhcp_select+0x154>)
  402220:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402222:	68f8      	ldr	r0, [r7, #12]
  402224:	4b1f      	ldr	r3, [pc, #124]	; (4022a4 <dhcp_select+0x158>)
  402226:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402228:	68fb      	ldr	r3, [r7, #12]
  40222a:	7b5b      	ldrb	r3, [r3, #13]
  40222c:	3301      	adds	r3, #1
  40222e:	b2da      	uxtb	r2, r3
  402230:	68fb      	ldr	r3, [r7, #12]
  402232:	735a      	strb	r2, [r3, #13]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  402234:	68fb      	ldr	r3, [r7, #12]
  402236:	7b5b      	ldrb	r3, [r3, #13]
  402238:	2b05      	cmp	r3, #5
  40223a:	d807      	bhi.n	40224c <dhcp_select+0x100>
  40223c:	68fb      	ldr	r3, [r7, #12]
  40223e:	7b5b      	ldrb	r3, [r3, #13]
  402240:	461a      	mov	r2, r3
  402242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  402246:	4093      	lsls	r3, r2
  402248:	b29b      	uxth	r3, r3
  40224a:	e001      	b.n	402250 <dhcp_select+0x104>
  40224c:	f64e 2360 	movw	r3, #60000	; 0xea60
  402250:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402252:	893b      	ldrh	r3, [r7, #8]
  402254:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402258:	4a13      	ldr	r2, [pc, #76]	; (4022a8 <dhcp_select+0x15c>)
  40225a:	fb82 1203 	smull	r1, r2, r2, r3
  40225e:	1152      	asrs	r2, r2, #5
  402260:	17db      	asrs	r3, r3, #31
  402262:	1ad3      	subs	r3, r2, r3
  402264:	b29a      	uxth	r2, r3
  402266:	68fb      	ldr	r3, [r7, #12]
  402268:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  40226a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  40226e:	4618      	mov	r0, r3
  402270:	3714      	adds	r7, #20
  402272:	46bd      	mov	sp, r7
  402274:	bd90      	pop	{r4, r7, pc}
  402276:	bf00      	nop
  402278:	00402f19 	.word	0x00402f19
  40227c:	00403645 	.word	0x00403645
  402280:	00402f4d 	.word	0x00402f4d
  402284:	00402fc9 	.word	0x00402fc9
  402288:	00402019 	.word	0x00402019
  40228c:	0040301f 	.word	0x0040301f
  402290:	00402f99 	.word	0x00402f99
  402294:	004038b1 	.word	0x004038b1
  402298:	004059e9 	.word	0x004059e9
  40229c:	0040faf8 	.word	0x0040faf8
  4022a0:	0040aa51 	.word	0x0040aa51
  4022a4:	00403875 	.word	0x00403875
  4022a8:	10624dd3 	.word	0x10624dd3

004022ac <dhcp_coarse_tmr>:
/**
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 */
void
dhcp_coarse_tmr()
{
  4022ac:	b580      	push	{r7, lr}
  4022ae:	b082      	sub	sp, #8
  4022b0:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  4022b2:	4b14      	ldr	r3, [pc, #80]	; (402304 <dhcp_coarse_tmr+0x58>)
  4022b4:	681b      	ldr	r3, [r3, #0]
  4022b6:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  4022b8:	e01d      	b.n	4022f6 <dhcp_coarse_tmr+0x4a>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  4022ba:	687b      	ldr	r3, [r7, #4]
  4022bc:	6a1b      	ldr	r3, [r3, #32]
  4022be:	2b00      	cmp	r3, #0
  4022c0:	d016      	beq.n	4022f0 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now? */
      if (netif->dhcp->t2_timeout-- == 1) {
  4022c2:	687b      	ldr	r3, [r7, #4]
  4022c4:	6a1a      	ldr	r2, [r3, #32]
  4022c6:	8bd3      	ldrh	r3, [r2, #30]
  4022c8:	1e59      	subs	r1, r3, #1
  4022ca:	b289      	uxth	r1, r1
  4022cc:	83d1      	strh	r1, [r2, #30]
  4022ce:	2b01      	cmp	r3, #1
  4022d0:	d103      	bne.n	4022da <dhcp_coarse_tmr+0x2e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  4022d2:	6878      	ldr	r0, [r7, #4]
  4022d4:	4b0c      	ldr	r3, [pc, #48]	; (402308 <dhcp_coarse_tmr+0x5c>)
  4022d6:	4798      	blx	r3
  4022d8:	e00a      	b.n	4022f0 <dhcp_coarse_tmr+0x44>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (netif->dhcp->t1_timeout-- == 1) {
  4022da:	687b      	ldr	r3, [r7, #4]
  4022dc:	6a1a      	ldr	r2, [r3, #32]
  4022de:	8b93      	ldrh	r3, [r2, #28]
  4022e0:	1e59      	subs	r1, r3, #1
  4022e2:	b289      	uxth	r1, r1
  4022e4:	8391      	strh	r1, [r2, #28]
  4022e6:	2b01      	cmp	r3, #1
  4022e8:	d102      	bne.n	4022f0 <dhcp_coarse_tmr+0x44>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  4022ea:	6878      	ldr	r0, [r7, #4]
  4022ec:	4b07      	ldr	r3, [pc, #28]	; (40230c <dhcp_coarse_tmr+0x60>)
  4022ee:	4798      	blx	r3
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  4022f0:	687b      	ldr	r3, [r7, #4]
  4022f2:	681b      	ldr	r3, [r3, #0]
  4022f4:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
  4022f6:	687b      	ldr	r3, [r7, #4]
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d1de      	bne.n	4022ba <dhcp_coarse_tmr+0xe>
  }
}
  4022fc:	bf00      	nop
  4022fe:	3708      	adds	r7, #8
  402300:	46bd      	mov	sp, r7
  402302:	bd80      	pop	{r7, pc}
  402304:	20404990 	.word	0x20404990
  402308:	00402499 	.word	0x00402499
  40230c:	00402461 	.word	0x00402461

00402310 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr()
{
  402310:	b580      	push	{r7, lr}
  402312:	b082      	sub	sp, #8
  402314:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
  402316:	4b16      	ldr	r3, [pc, #88]	; (402370 <dhcp_fine_tmr+0x60>)
  402318:	681b      	ldr	r3, [r3, #0]
  40231a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
  40231c:	e020      	b.n	402360 <dhcp_fine_tmr+0x50>
    /* only act on DHCP configured interfaces */
    if (netif->dhcp != NULL) {
  40231e:	687b      	ldr	r3, [r7, #4]
  402320:	6a1b      	ldr	r3, [r3, #32]
  402322:	2b00      	cmp	r3, #0
  402324:	d019      	beq.n	40235a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */      
      if (netif->dhcp->request_timeout > 1) {
  402326:	687b      	ldr	r3, [r7, #4]
  402328:	6a1b      	ldr	r3, [r3, #32]
  40232a:	8b5b      	ldrh	r3, [r3, #26]
  40232c:	2b01      	cmp	r3, #1
  40232e:	d906      	bls.n	40233e <dhcp_fine_tmr+0x2e>
        netif->dhcp->request_timeout--;
  402330:	687b      	ldr	r3, [r7, #4]
  402332:	6a1b      	ldr	r3, [r3, #32]
  402334:	8b5a      	ldrh	r2, [r3, #26]
  402336:	3a01      	subs	r2, #1
  402338:	b292      	uxth	r2, r2
  40233a:	835a      	strh	r2, [r3, #26]
  40233c:	e00d      	b.n	40235a <dhcp_fine_tmr+0x4a>
      }
      else if (netif->dhcp->request_timeout == 1) {
  40233e:	687b      	ldr	r3, [r7, #4]
  402340:	6a1b      	ldr	r3, [r3, #32]
  402342:	8b5b      	ldrh	r3, [r3, #26]
  402344:	2b01      	cmp	r3, #1
  402346:	d108      	bne.n	40235a <dhcp_fine_tmr+0x4a>
        netif->dhcp->request_timeout--;
  402348:	687b      	ldr	r3, [r7, #4]
  40234a:	6a1b      	ldr	r3, [r3, #32]
  40234c:	8b5a      	ldrh	r2, [r3, #26]
  40234e:	3a01      	subs	r2, #1
  402350:	b292      	uxth	r2, r2
  402352:	835a      	strh	r2, [r3, #26]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  402354:	6878      	ldr	r0, [r7, #4]
  402356:	4b07      	ldr	r3, [pc, #28]	; (402374 <dhcp_fine_tmr+0x64>)
  402358:	4798      	blx	r3
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  40235a:	687b      	ldr	r3, [r7, #4]
  40235c:	681b      	ldr	r3, [r3, #0]
  40235e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
  402360:	687b      	ldr	r3, [r7, #4]
  402362:	2b00      	cmp	r3, #0
  402364:	d1db      	bne.n	40231e <dhcp_fine_tmr+0xe>
  }
}
  402366:	bf00      	nop
  402368:	3708      	adds	r7, #8
  40236a:	46bd      	mov	sp, r7
  40236c:	bd80      	pop	{r7, pc}
  40236e:	bf00      	nop
  402370:	20404990 	.word	0x20404990
  402374:	00402379 	.word	0x00402379

00402378 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  402378:	b580      	push	{r7, lr}
  40237a:	b084      	sub	sp, #16
  40237c:	af00      	add	r7, sp, #0
  40237e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402380:	687b      	ldr	r3, [r7, #4]
  402382:	6a1b      	ldr	r3, [r3, #32]
  402384:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
  402386:	68fb      	ldr	r3, [r7, #12]
  402388:	7b1b      	ldrb	r3, [r3, #12]
  40238a:	2b0c      	cmp	r3, #12
  40238c:	d003      	beq.n	402396 <dhcp_timeout+0x1e>
  40238e:	68fb      	ldr	r3, [r7, #12]
  402390:	7b1b      	ldrb	r3, [r3, #12]
  402392:	2b06      	cmp	r3, #6
  402394:	d103      	bne.n	40239e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  402396:	6878      	ldr	r0, [r7, #4]
  402398:	4b29      	ldr	r3, [pc, #164]	; (402440 <dhcp_timeout+0xc8>)
  40239a:	4798      	blx	r3
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  40239c:	e04c      	b.n	402438 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REQUESTING) {
  40239e:	68fb      	ldr	r3, [r7, #12]
  4023a0:	7b1b      	ldrb	r3, [r3, #12]
  4023a2:	2b01      	cmp	r3, #1
  4023a4:	d10e      	bne.n	4023c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
  4023a6:	68fb      	ldr	r3, [r7, #12]
  4023a8:	7b5b      	ldrb	r3, [r3, #13]
  4023aa:	2b05      	cmp	r3, #5
  4023ac:	d803      	bhi.n	4023b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
  4023ae:	6878      	ldr	r0, [r7, #4]
  4023b0:	4b24      	ldr	r3, [pc, #144]	; (402444 <dhcp_timeout+0xcc>)
  4023b2:	4798      	blx	r3
}
  4023b4:	e040      	b.n	402438 <dhcp_timeout+0xc0>
      dhcp_release(netif);
  4023b6:	6878      	ldr	r0, [r7, #4]
  4023b8:	4b23      	ldr	r3, [pc, #140]	; (402448 <dhcp_timeout+0xd0>)
  4023ba:	4798      	blx	r3
      dhcp_discover(netif);
  4023bc:	6878      	ldr	r0, [r7, #4]
  4023be:	4b20      	ldr	r3, [pc, #128]	; (402440 <dhcp_timeout+0xc8>)
  4023c0:	4798      	blx	r3
}
  4023c2:	e039      	b.n	402438 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_CHECKING) {
  4023c4:	68fb      	ldr	r3, [r7, #12]
  4023c6:	7b1b      	ldrb	r3, [r3, #12]
  4023c8:	2b08      	cmp	r3, #8
  4023ca:	d10b      	bne.n	4023e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
  4023cc:	68fb      	ldr	r3, [r7, #12]
  4023ce:	7b5b      	ldrb	r3, [r3, #13]
  4023d0:	2b01      	cmp	r3, #1
  4023d2:	d803      	bhi.n	4023dc <dhcp_timeout+0x64>
      dhcp_check(netif);
  4023d4:	6878      	ldr	r0, [r7, #4]
  4023d6:	4b1d      	ldr	r3, [pc, #116]	; (40244c <dhcp_timeout+0xd4>)
  4023d8:	4798      	blx	r3
}
  4023da:	e02d      	b.n	402438 <dhcp_timeout+0xc0>
      dhcp_bind(netif);
  4023dc:	6878      	ldr	r0, [r7, #4]
  4023de:	4b1c      	ldr	r3, [pc, #112]	; (402450 <dhcp_timeout+0xd8>)
  4023e0:	4798      	blx	r3
}
  4023e2:	e029      	b.n	402438 <dhcp_timeout+0xc0>
  else if (dhcp->state == DHCP_RENEWING) {
  4023e4:	68fb      	ldr	r3, [r7, #12]
  4023e6:	7b1b      	ldrb	r3, [r3, #12]
  4023e8:	2b05      	cmp	r3, #5
  4023ea:	d103      	bne.n	4023f4 <dhcp_timeout+0x7c>
    dhcp_renew(netif);
  4023ec:	6878      	ldr	r0, [r7, #4]
  4023ee:	4b19      	ldr	r3, [pc, #100]	; (402454 <dhcp_timeout+0xdc>)
  4023f0:	4798      	blx	r3
}
  4023f2:	e021      	b.n	402438 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REBINDING) {
  4023f4:	68fb      	ldr	r3, [r7, #12]
  4023f6:	7b1b      	ldrb	r3, [r3, #12]
  4023f8:	2b04      	cmp	r3, #4
  4023fa:	d10e      	bne.n	40241a <dhcp_timeout+0xa2>
    if (dhcp->tries <= 8) {
  4023fc:	68fb      	ldr	r3, [r7, #12]
  4023fe:	7b5b      	ldrb	r3, [r3, #13]
  402400:	2b08      	cmp	r3, #8
  402402:	d803      	bhi.n	40240c <dhcp_timeout+0x94>
      dhcp_rebind(netif);
  402404:	6878      	ldr	r0, [r7, #4]
  402406:	4b14      	ldr	r3, [pc, #80]	; (402458 <dhcp_timeout+0xe0>)
  402408:	4798      	blx	r3
}
  40240a:	e015      	b.n	402438 <dhcp_timeout+0xc0>
      dhcp_release(netif);
  40240c:	6878      	ldr	r0, [r7, #4]
  40240e:	4b0e      	ldr	r3, [pc, #56]	; (402448 <dhcp_timeout+0xd0>)
  402410:	4798      	blx	r3
      dhcp_discover(netif);
  402412:	6878      	ldr	r0, [r7, #4]
  402414:	4b0a      	ldr	r3, [pc, #40]	; (402440 <dhcp_timeout+0xc8>)
  402416:	4798      	blx	r3
}
  402418:	e00e      	b.n	402438 <dhcp_timeout+0xc0>
  } else if (dhcp->state == DHCP_REBOOTING) {
  40241a:	68fb      	ldr	r3, [r7, #12]
  40241c:	7b1b      	ldrb	r3, [r3, #12]
  40241e:	2b03      	cmp	r3, #3
  402420:	d10a      	bne.n	402438 <dhcp_timeout+0xc0>
    if (dhcp->tries < REBOOT_TRIES) {
  402422:	68fb      	ldr	r3, [r7, #12]
  402424:	7b5b      	ldrb	r3, [r3, #13]
  402426:	2b01      	cmp	r3, #1
  402428:	d803      	bhi.n	402432 <dhcp_timeout+0xba>
      dhcp_reboot(netif);
  40242a:	6878      	ldr	r0, [r7, #4]
  40242c:	4b0b      	ldr	r3, [pc, #44]	; (40245c <dhcp_timeout+0xe4>)
  40242e:	4798      	blx	r3
}
  402430:	e002      	b.n	402438 <dhcp_timeout+0xc0>
      dhcp_discover(netif);
  402432:	6878      	ldr	r0, [r7, #4]
  402434:	4b02      	ldr	r3, [pc, #8]	; (402440 <dhcp_timeout+0xc8>)
  402436:	4798      	blx	r3
}
  402438:	bf00      	nop
  40243a:	3710      	adds	r7, #16
  40243c:	46bd      	mov	sp, r7
  40243e:	bd80      	pop	{r7, pc}
  402440:	00402801 	.word	0x00402801
  402444:	0040214d 	.word	0x0040214d
  402448:	00402d85 	.word	0x00402d85
  40244c:	00402095 	.word	0x00402095
  402450:	00402925 	.word	0x00402925
  402454:	00402a85 	.word	0x00402a85
  402458:	00402b79 	.word	0x00402b79
  40245c:	00402c6d 	.word	0x00402c6d

00402460 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  402460:	b580      	push	{r7, lr}
  402462:	b084      	sub	sp, #16
  402464:	af00      	add	r7, sp, #0
  402466:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402468:	687b      	ldr	r3, [r7, #4]
  40246a:	6a1b      	ldr	r3, [r3, #32]
  40246c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  40246e:	68fb      	ldr	r3, [r7, #12]
  402470:	7b1b      	ldrb	r3, [r3, #12]
  402472:	2b01      	cmp	r3, #1
  402474:	d007      	beq.n	402486 <dhcp_t1_timeout+0x26>
  402476:	68fb      	ldr	r3, [r7, #12]
  402478:	7b1b      	ldrb	r3, [r3, #12]
  40247a:	2b0a      	cmp	r3, #10
  40247c:	d003      	beq.n	402486 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  40247e:	68fb      	ldr	r3, [r7, #12]
  402480:	7b1b      	ldrb	r3, [r3, #12]
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  402482:	2b05      	cmp	r3, #5
  402484:	d102      	bne.n	40248c <dhcp_t1_timeout+0x2c>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_RENEWING, not DHCP_BOUND */
    dhcp_renew(netif);
  402486:	6878      	ldr	r0, [r7, #4]
  402488:	4b02      	ldr	r3, [pc, #8]	; (402494 <dhcp_t1_timeout+0x34>)
  40248a:	4798      	blx	r3
  }
}
  40248c:	bf00      	nop
  40248e:	3710      	adds	r7, #16
  402490:	46bd      	mov	sp, r7
  402492:	bd80      	pop	{r7, pc}
  402494:	00402a85 	.word	0x00402a85

00402498 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  402498:	b580      	push	{r7, lr}
  40249a:	b084      	sub	sp, #16
  40249c:	af00      	add	r7, sp, #0
  40249e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4024a0:	687b      	ldr	r3, [r7, #4]
  4024a2:	6a1b      	ldr	r3, [r3, #32]
  4024a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  4024a6:	68fb      	ldr	r3, [r7, #12]
  4024a8:	7b1b      	ldrb	r3, [r3, #12]
  4024aa:	2b01      	cmp	r3, #1
  4024ac:	d007      	beq.n	4024be <dhcp_t2_timeout+0x26>
  4024ae:	68fb      	ldr	r3, [r7, #12]
  4024b0:	7b1b      	ldrb	r3, [r3, #12]
  4024b2:	2b0a      	cmp	r3, #10
  4024b4:	d003      	beq.n	4024be <dhcp_t2_timeout+0x26>
      (dhcp->state == DHCP_RENEWING)) {
  4024b6:	68fb      	ldr	r3, [r7, #12]
  4024b8:	7b1b      	ldrb	r3, [r3, #12]
  if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
  4024ba:	2b05      	cmp	r3, #5
  4024bc:	d102      	bne.n	4024c4 <dhcp_t2_timeout+0x2c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_REBINDING, not DHCP_BOUND */
    dhcp_rebind(netif);
  4024be:	6878      	ldr	r0, [r7, #4]
  4024c0:	4b02      	ldr	r3, [pc, #8]	; (4024cc <dhcp_t2_timeout+0x34>)
  4024c2:	4798      	blx	r3
  }
}
  4024c4:	bf00      	nop
  4024c6:	3710      	adds	r7, #16
  4024c8:	46bd      	mov	sp, r7
  4024ca:	bd80      	pop	{r7, pc}
  4024cc:	00402b79 	.word	0x00402b79

004024d0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  4024d0:	b580      	push	{r7, lr}
  4024d2:	b084      	sub	sp, #16
  4024d4:	af00      	add	r7, sp, #0
  4024d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  4024d8:	687b      	ldr	r3, [r7, #4]
  4024da:	6a1b      	ldr	r3, [r3, #32]
  4024dc:	60fb      	str	r3, [r7, #12]
#if LWIP_DNS
  u8_t n;
#endif /* LWIP_DNS */

  /* clear options we might not get from the ACK */
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  4024de:	68fb      	ldr	r3, [r7, #12]
  4024e0:	2200      	movs	r2, #0
  4024e2:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  4024e4:	68fb      	ldr	r3, [r7, #12]
  4024e6:	2200      	movs	r2, #0
  4024e8:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  4024ea:	4b25      	ldr	r3, [pc, #148]	; (402580 <dhcp_handle_ack+0xb0>)
  4024ec:	78db      	ldrb	r3, [r3, #3]
  4024ee:	2b00      	cmp	r3, #0
  4024f0:	d003      	beq.n	4024fa <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  4024f2:	4b24      	ldr	r3, [pc, #144]	; (402584 <dhcp_handle_ack+0xb4>)
  4024f4:	68da      	ldr	r2, [r3, #12]
  4024f6:	68fb      	ldr	r3, [r7, #12]
  4024f8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  4024fa:	4b21      	ldr	r3, [pc, #132]	; (402580 <dhcp_handle_ack+0xb0>)
  4024fc:	791b      	ldrb	r3, [r3, #4]
  4024fe:	2b00      	cmp	r3, #0
  402500:	d004      	beq.n	40250c <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  402502:	4b20      	ldr	r3, [pc, #128]	; (402584 <dhcp_handle_ack+0xb4>)
  402504:	691a      	ldr	r2, [r3, #16]
  402506:	68fb      	ldr	r3, [r7, #12]
  402508:	635a      	str	r2, [r3, #52]	; 0x34
  40250a:	e004      	b.n	402516 <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  40250c:	68fb      	ldr	r3, [r7, #12]
  40250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402510:	085a      	lsrs	r2, r3, #1
  402512:	68fb      	ldr	r3, [r7, #12]
  402514:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  402516:	4b1a      	ldr	r3, [pc, #104]	; (402580 <dhcp_handle_ack+0xb0>)
  402518:	795b      	ldrb	r3, [r3, #5]
  40251a:	2b00      	cmp	r3, #0
  40251c:	d004      	beq.n	402528 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  40251e:	4b19      	ldr	r3, [pc, #100]	; (402584 <dhcp_handle_ack+0xb4>)
  402520:	695a      	ldr	r2, [r3, #20]
  402522:	68fb      	ldr	r3, [r7, #12]
  402524:	639a      	str	r2, [r3, #56]	; 0x38
  402526:	e003      	b.n	402530 <dhcp_handle_ack+0x60>
  } else {
    /* calculate safe periods for rebinding */
    dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
  402528:	68fb      	ldr	r3, [r7, #12]
  40252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40252c:	68fb      	ldr	r3, [r7, #12]
  40252e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* (y)our internet address */
  ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  402530:	68fb      	ldr	r3, [r7, #12]
  402532:	689b      	ldr	r3, [r3, #8]
  402534:	691a      	ldr	r2, [r3, #16]
  402536:	68fb      	ldr	r3, [r7, #12]
  402538:	625a      	str	r2, [r3, #36]	; 0x24
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  40253a:	4b11      	ldr	r3, [pc, #68]	; (402580 <dhcp_handle_ack+0xb0>)
  40253c:	799b      	ldrb	r3, [r3, #6]
  40253e:	2b00      	cmp	r3, #0
  402540:	d00b      	beq.n	40255a <dhcp_handle_ack+0x8a>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  402542:	4b10      	ldr	r3, [pc, #64]	; (402584 <dhcp_handle_ack+0xb4>)
  402544:	699b      	ldr	r3, [r3, #24]
  402546:	4618      	mov	r0, r3
  402548:	4b0f      	ldr	r3, [pc, #60]	; (402588 <dhcp_handle_ack+0xb8>)
  40254a:	4798      	blx	r3
  40254c:	4602      	mov	r2, r0
  40254e:	68fb      	ldr	r3, [r7, #12]
  402550:	629a      	str	r2, [r3, #40]	; 0x28
    dhcp->subnet_mask_given = 1;
  402552:	68fb      	ldr	r3, [r7, #12]
  402554:	2201      	movs	r2, #1
  402556:	739a      	strb	r2, [r3, #14]
  402558:	e002      	b.n	402560 <dhcp_handle_ack+0x90>
  } else {
    dhcp->subnet_mask_given = 0;
  40255a:	68fb      	ldr	r3, [r7, #12]
  40255c:	2200      	movs	r2, #0
  40255e:	739a      	strb	r2, [r3, #14]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  402560:	4b07      	ldr	r3, [pc, #28]	; (402580 <dhcp_handle_ack+0xb0>)
  402562:	79db      	ldrb	r3, [r3, #7]
  402564:	2b00      	cmp	r3, #0
  402566:	d007      	beq.n	402578 <dhcp_handle_ack+0xa8>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  402568:	4b06      	ldr	r3, [pc, #24]	; (402584 <dhcp_handle_ack+0xb4>)
  40256a:	69db      	ldr	r3, [r3, #28]
  40256c:	4618      	mov	r0, r3
  40256e:	4b06      	ldr	r3, [pc, #24]	; (402588 <dhcp_handle_ack+0xb8>)
  402570:	4798      	blx	r3
  402572:	4602      	mov	r2, r0
  402574:	68fb      	ldr	r3, [r7, #12]
  402576:	62da      	str	r2, [r3, #44]	; 0x2c
    ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
    n++;
  }
#endif /* LWIP_DNS */
}
  402578:	bf00      	nop
  40257a:	3710      	adds	r7, #16
  40257c:	46bd      	mov	sp, r7
  40257e:	bd80      	pop	{r7, pc}
  402580:	20403938 	.word	0x20403938
  402584:	20403944 	.word	0x20403944
  402588:	00401fe5 	.word	0x00401fe5

0040258c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  40258c:	b580      	push	{r7, lr}
  40258e:	b084      	sub	sp, #16
  402590:	af00      	add	r7, sp, #0
  402592:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result = ERR_OK;
  402594:	2300      	movs	r3, #0
  402596:	72fb      	strb	r3, [r7, #11]

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  402598:	687b      	ldr	r3, [r7, #4]
  40259a:	2b00      	cmp	r3, #0
  40259c:	d100      	bne.n	4025a0 <dhcp_start+0x14>
  40259e:	e7fe      	b.n	40259e <dhcp_start+0x12>
  dhcp = netif->dhcp;
  4025a0:	687b      	ldr	r3, [r7, #4]
  4025a2:	6a1b      	ldr	r3, [r3, #32]
  4025a4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Remove the flag that says this netif is handled by DHCP,
     it is set when we succeeded starting. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  4025a6:	687b      	ldr	r3, [r7, #4]
  4025a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4025ac:	f023 0308 	bic.w	r3, r3, #8
  4025b0:	b2da      	uxtb	r2, r3
  4025b2:	687b      	ldr	r3, [r7, #4]
  4025b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* check hwtype of the netif */
  if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
  4025b8:	687b      	ldr	r3, [r7, #4]
  4025ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4025be:	f003 0320 	and.w	r3, r3, #32
  4025c2:	2b00      	cmp	r3, #0
  4025c4:	d102      	bne.n	4025cc <dhcp_start+0x40>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
    return ERR_ARG;
  4025c6:	f06f 030d 	mvn.w	r3, #13
  4025ca:	e06a      	b.n	4026a2 <dhcp_start+0x116>
  }

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  4025cc:	687b      	ldr	r3, [r7, #4]
  4025ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  4025d0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
  4025d4:	d202      	bcs.n	4025dc <dhcp_start+0x50>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  4025d6:	f04f 33ff 	mov.w	r3, #4294967295
  4025da:	e062      	b.n	4026a2 <dhcp_start+0x116>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  4025dc:	68fb      	ldr	r3, [r7, #12]
  4025de:	2b00      	cmp	r3, #0
  4025e0:	d10d      	bne.n	4025fe <dhcp_start+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  4025e2:	203c      	movs	r0, #60	; 0x3c
  4025e4:	4b31      	ldr	r3, [pc, #196]	; (4026ac <dhcp_start+0x120>)
  4025e6:	4798      	blx	r3
  4025e8:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
  4025ea:	68fb      	ldr	r3, [r7, #12]
  4025ec:	2b00      	cmp	r3, #0
  4025ee:	d102      	bne.n	4025f6 <dhcp_start+0x6a>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  4025f0:	f04f 33ff 	mov.w	r3, #4294967295
  4025f4:	e055      	b.n	4026a2 <dhcp_start+0x116>
    }
    /* store this dhcp client in the netif */
    netif->dhcp = dhcp;
  4025f6:	687b      	ldr	r3, [r7, #4]
  4025f8:	68fa      	ldr	r2, [r7, #12]
  4025fa:	621a      	str	r2, [r3, #32]
  4025fc:	e008      	b.n	402610 <dhcp_start+0x84>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    if (dhcp->pcb != NULL) {
  4025fe:	68fb      	ldr	r3, [r7, #12]
  402600:	685b      	ldr	r3, [r3, #4]
  402602:	2b00      	cmp	r3, #0
  402604:	d004      	beq.n	402610 <dhcp_start+0x84>
      udp_remove(dhcp->pcb);
  402606:	68fb      	ldr	r3, [r7, #12]
  402608:	685b      	ldr	r3, [r3, #4]
  40260a:	4618      	mov	r0, r3
  40260c:	4b28      	ldr	r3, [pc, #160]	; (4026b0 <dhcp_start+0x124>)
  40260e:	4798      	blx	r3
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  }
    
  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  402610:	223c      	movs	r2, #60	; 0x3c
  402612:	2100      	movs	r1, #0
  402614:	68f8      	ldr	r0, [r7, #12]
  402616:	4b27      	ldr	r3, [pc, #156]	; (4026b4 <dhcp_start+0x128>)
  402618:	4798      	blx	r3
  /* dhcp_set_state(&dhcp, DHCP_OFF); */
  /* allocate UDP PCB */
  dhcp->pcb = udp_new();
  40261a:	4b27      	ldr	r3, [pc, #156]	; (4026b8 <dhcp_start+0x12c>)
  40261c:	4798      	blx	r3
  40261e:	4602      	mov	r2, r0
  402620:	68fb      	ldr	r3, [r7, #12]
  402622:	605a      	str	r2, [r3, #4]
  if (dhcp->pcb == NULL) {
  402624:	68fb      	ldr	r3, [r7, #12]
  402626:	685b      	ldr	r3, [r3, #4]
  402628:	2b00      	cmp	r3, #0
  40262a:	d102      	bne.n	402632 <dhcp_start+0xa6>
    LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
    return ERR_MEM;
  40262c:	f04f 33ff 	mov.w	r3, #4294967295
  402630:	e037      	b.n	4026a2 <dhcp_start+0x116>
  }
  ip_set_option(dhcp->pcb, SOF_BROADCAST);
  402632:	68fb      	ldr	r3, [r7, #12]
  402634:	685b      	ldr	r3, [r3, #4]
  402636:	68fa      	ldr	r2, [r7, #12]
  402638:	6852      	ldr	r2, [r2, #4]
  40263a:	7a12      	ldrb	r2, [r2, #8]
  40263c:	f042 0220 	orr.w	r2, r2, #32
  402640:	b2d2      	uxtb	r2, r2
  402642:	721a      	strb	r2, [r3, #8]
  /* set up local and remote port for the pcb */
  udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
  402644:	68fb      	ldr	r3, [r7, #12]
  402646:	685b      	ldr	r3, [r3, #4]
  402648:	2244      	movs	r2, #68	; 0x44
  40264a:	491c      	ldr	r1, [pc, #112]	; (4026bc <dhcp_start+0x130>)
  40264c:	4618      	mov	r0, r3
  40264e:	4b1c      	ldr	r3, [pc, #112]	; (4026c0 <dhcp_start+0x134>)
  402650:	4798      	blx	r3
  udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
  402652:	68fb      	ldr	r3, [r7, #12]
  402654:	685b      	ldr	r3, [r3, #4]
  402656:	2243      	movs	r2, #67	; 0x43
  402658:	4918      	ldr	r1, [pc, #96]	; (4026bc <dhcp_start+0x130>)
  40265a:	4618      	mov	r0, r3
  40265c:	4b19      	ldr	r3, [pc, #100]	; (4026c4 <dhcp_start+0x138>)
  40265e:	4798      	blx	r3
  /* set up the recv callback and argument */
  udp_recv(dhcp->pcb, dhcp_recv, netif);
  402660:	68fb      	ldr	r3, [r7, #12]
  402662:	685b      	ldr	r3, [r3, #4]
  402664:	687a      	ldr	r2, [r7, #4]
  402666:	4918      	ldr	r1, [pc, #96]	; (4026c8 <dhcp_start+0x13c>)
  402668:	4618      	mov	r0, r3
  40266a:	4b18      	ldr	r3, [pc, #96]	; (4026cc <dhcp_start+0x140>)
  40266c:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  40266e:	6878      	ldr	r0, [r7, #4]
  402670:	4b17      	ldr	r3, [pc, #92]	; (4026d0 <dhcp_start+0x144>)
  402672:	4798      	blx	r3
  402674:	4603      	mov	r3, r0
  402676:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
  402678:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40267c:	2b00      	cmp	r3, #0
  40267e:	d005      	beq.n	40268c <dhcp_start+0x100>
    /* free resources allocated above */
    dhcp_stop(netif);
  402680:	6878      	ldr	r0, [r7, #4]
  402682:	4b14      	ldr	r3, [pc, #80]	; (4026d4 <dhcp_start+0x148>)
  402684:	4798      	blx	r3
    return ERR_MEM;
  402686:	f04f 33ff 	mov.w	r3, #4294967295
  40268a:	e00a      	b.n	4026a2 <dhcp_start+0x116>
  }
  /* Set the flag that says this netif is handled by DHCP. */
  netif->flags |= NETIF_FLAG_DHCP;
  40268c:	687b      	ldr	r3, [r7, #4]
  40268e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  402692:	f043 0308 	orr.w	r3, r3, #8
  402696:	b2da      	uxtb	r2, r3
  402698:	687b      	ldr	r3, [r7, #4]
  40269a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  return result;
  40269e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4026a2:	4618      	mov	r0, r3
  4026a4:	3710      	adds	r7, #16
  4026a6:	46bd      	mov	sp, r7
  4026a8:	bd80      	pop	{r7, pc}
  4026aa:	bf00      	nop
  4026ac:	004052c1 	.word	0x004052c1
  4026b0:	0040ad5d 	.word	0x0040ad5d
  4026b4:	0040cead 	.word	0x0040cead
  4026b8:	0040adc1 	.word	0x0040adc1
  4026bc:	0040faf4 	.word	0x0040faf4
  4026c0:	0040abd9 	.word	0x0040abd9
  4026c4:	0040ac9d 	.word	0x0040ac9d
  4026c8:	004034d5 	.word	0x004034d5
  4026cc:	0040ad39 	.word	0x0040ad39
  4026d0:	00402801 	.word	0x00402801
  4026d4:	00402eb9 	.word	0x00402eb9

004026d8 <dhcp_arp_reply>:
 *
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
{
  4026d8:	b580      	push	{r7, lr}
  4026da:	b082      	sub	sp, #8
  4026dc:	af00      	add	r7, sp, #0
  4026de:	6078      	str	r0, [r7, #4]
  4026e0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  4026e2:	687b      	ldr	r3, [r7, #4]
  4026e4:	2b00      	cmp	r3, #0
  4026e6:	d100      	bne.n	4026ea <dhcp_arp_reply+0x12>
  4026e8:	e7fe      	b.n	4026e8 <dhcp_arp_reply+0x10>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
  4026ea:	687b      	ldr	r3, [r7, #4]
  4026ec:	6a1b      	ldr	r3, [r3, #32]
  4026ee:	2b00      	cmp	r3, #0
  4026f0:	d00e      	beq.n	402710 <dhcp_arp_reply+0x38>
  4026f2:	687b      	ldr	r3, [r7, #4]
  4026f4:	6a1b      	ldr	r3, [r3, #32]
  4026f6:	7b1b      	ldrb	r3, [r3, #12]
  4026f8:	2b08      	cmp	r3, #8
  4026fa:	d109      	bne.n	402710 <dhcp_arp_reply+0x38>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
  4026fc:	683b      	ldr	r3, [r7, #0]
  4026fe:	681a      	ldr	r2, [r3, #0]
  402700:	687b      	ldr	r3, [r7, #4]
  402702:	6a1b      	ldr	r3, [r3, #32]
  402704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402706:	429a      	cmp	r2, r3
  402708:	d102      	bne.n	402710 <dhcp_arp_reply+0x38>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  40270a:	6878      	ldr	r0, [r7, #4]
  40270c:	4b02      	ldr	r3, [pc, #8]	; (402718 <dhcp_arp_reply+0x40>)
  40270e:	4798      	blx	r3
    }
  }
}
  402710:	bf00      	nop
  402712:	3708      	adds	r7, #8
  402714:	46bd      	mov	sp, r7
  402716:	bd80      	pop	{r7, pc}
  402718:	0040271d 	.word	0x0040271d

0040271c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  40271c:	b590      	push	{r4, r7, lr}
  40271e:	b087      	sub	sp, #28
  402720:	af02      	add	r7, sp, #8
  402722:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402724:	687b      	ldr	r3, [r7, #4]
  402726:	6a1b      	ldr	r3, [r3, #32]
  402728:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  40272a:	2300      	movs	r3, #0
  40272c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_BACKING_OFF);
  40272e:	210c      	movs	r1, #12
  402730:	68f8      	ldr	r0, [r7, #12]
  402732:	4b28      	ldr	r3, [pc, #160]	; (4027d4 <dhcp_decline+0xb8>)
  402734:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  402736:	2204      	movs	r2, #4
  402738:	68f9      	ldr	r1, [r7, #12]
  40273a:	6878      	ldr	r0, [r7, #4]
  40273c:	4b26      	ldr	r3, [pc, #152]	; (4027d8 <dhcp_decline+0xbc>)
  40273e:	4798      	blx	r3
  402740:	4603      	mov	r3, r0
  402742:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402744:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402748:	2b00      	cmp	r3, #0
  40274a:	d128      	bne.n	40279e <dhcp_decline+0x82>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  40274c:	2204      	movs	r2, #4
  40274e:	2132      	movs	r1, #50	; 0x32
  402750:	68f8      	ldr	r0, [r7, #12]
  402752:	4b22      	ldr	r3, [pc, #136]	; (4027dc <dhcp_decline+0xc0>)
  402754:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402756:	68fb      	ldr	r3, [r7, #12]
  402758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  40275a:	4618      	mov	r0, r3
  40275c:	4b20      	ldr	r3, [pc, #128]	; (4027e0 <dhcp_decline+0xc4>)
  40275e:	4798      	blx	r3
  402760:	4603      	mov	r3, r0
  402762:	4619      	mov	r1, r3
  402764:	68f8      	ldr	r0, [r7, #12]
  402766:	4b1f      	ldr	r3, [pc, #124]	; (4027e4 <dhcp_decline+0xc8>)
  402768:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  40276a:	68f8      	ldr	r0, [r7, #12]
  40276c:	4b1e      	ldr	r3, [pc, #120]	; (4027e8 <dhcp_decline+0xcc>)
  40276e:	4798      	blx	r3
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402770:	68fb      	ldr	r3, [r7, #12]
  402772:	691a      	ldr	r2, [r3, #16]
  402774:	68fb      	ldr	r3, [r7, #12]
  402776:	8b1b      	ldrh	r3, [r3, #24]
  402778:	33f0      	adds	r3, #240	; 0xf0
  40277a:	b29b      	uxth	r3, r3
  40277c:	4619      	mov	r1, r3
  40277e:	4610      	mov	r0, r2
  402780:	4b1a      	ldr	r3, [pc, #104]	; (4027ec <dhcp_decline+0xd0>)
  402782:	4798      	blx	r3

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402784:	68fb      	ldr	r3, [r7, #12]
  402786:	6858      	ldr	r0, [r3, #4]
  402788:	68fb      	ldr	r3, [r7, #12]
  40278a:	6919      	ldr	r1, [r3, #16]
  40278c:	687b      	ldr	r3, [r7, #4]
  40278e:	9300      	str	r3, [sp, #0]
  402790:	2343      	movs	r3, #67	; 0x43
  402792:	4a17      	ldr	r2, [pc, #92]	; (4027f0 <dhcp_decline+0xd4>)
  402794:	4c17      	ldr	r4, [pc, #92]	; (4027f4 <dhcp_decline+0xd8>)
  402796:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402798:	68f8      	ldr	r0, [r7, #12]
  40279a:	4b17      	ldr	r3, [pc, #92]	; (4027f8 <dhcp_decline+0xdc>)
  40279c:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  40279e:	68fb      	ldr	r3, [r7, #12]
  4027a0:	7b5b      	ldrb	r3, [r3, #13]
  4027a2:	3301      	adds	r3, #1
  4027a4:	b2da      	uxtb	r2, r3
  4027a6:	68fb      	ldr	r3, [r7, #12]
  4027a8:	735a      	strb	r2, [r3, #13]
  msecs = 10*1000;
  4027aa:	f242 7310 	movw	r3, #10000	; 0x2710
  4027ae:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4027b0:	893b      	ldrh	r3, [r7, #8]
  4027b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4027b6:	4a11      	ldr	r2, [pc, #68]	; (4027fc <dhcp_decline+0xe0>)
  4027b8:	fb82 1203 	smull	r1, r2, r2, r3
  4027bc:	1152      	asrs	r2, r2, #5
  4027be:	17db      	asrs	r3, r3, #31
  4027c0:	1ad3      	subs	r3, r2, r3
  4027c2:	b29a      	uxth	r2, r3
  4027c4:	68fb      	ldr	r3, [r7, #12]
  4027c6:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4027c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4027cc:	4618      	mov	r0, r3
  4027ce:	3714      	adds	r7, #20
  4027d0:	46bd      	mov	sp, r7
  4027d2:	bd90      	pop	{r4, r7, pc}
  4027d4:	00402f19 	.word	0x00402f19
  4027d8:	00403645 	.word	0x00403645
  4027dc:	00402f4d 	.word	0x00402f4d
  4027e0:	00402019 	.word	0x00402019
  4027e4:	0040301f 	.word	0x0040301f
  4027e8:	004038b1 	.word	0x004038b1
  4027ec:	004059e9 	.word	0x004059e9
  4027f0:	0040faf8 	.word	0x0040faf8
  4027f4:	0040aa51 	.word	0x0040aa51
  4027f8:	00403875 	.word	0x00403875
  4027fc:	10624dd3 	.word	0x10624dd3

00402800 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  402800:	b590      	push	{r4, r7, lr}
  402802:	b087      	sub	sp, #28
  402804:	af02      	add	r7, sp, #8
  402806:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402808:	687b      	ldr	r3, [r7, #4]
  40280a:	6a1b      	ldr	r3, [r3, #32]
  40280c:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
  40280e:	2300      	movs	r3, #0
  402810:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip_addr_set_any(&dhcp->offered_ip_addr);
  402812:	68fb      	ldr	r3, [r7, #12]
  402814:	2200      	movs	r2, #0
  402816:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_state(dhcp, DHCP_SELECTING);
  402818:	2106      	movs	r1, #6
  40281a:	68f8      	ldr	r0, [r7, #12]
  40281c:	4b36      	ldr	r3, [pc, #216]	; (4028f8 <dhcp_discover+0xf8>)
  40281e:	4798      	blx	r3
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  402820:	2201      	movs	r2, #1
  402822:	68f9      	ldr	r1, [r7, #12]
  402824:	6878      	ldr	r0, [r7, #4]
  402826:	4b35      	ldr	r3, [pc, #212]	; (4028fc <dhcp_discover+0xfc>)
  402828:	4798      	blx	r3
  40282a:	4603      	mov	r3, r0
  40282c:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  40282e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402832:	2b00      	cmp	r3, #0
  402834:	d139      	bne.n	4028aa <dhcp_discover+0xaa>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402836:	2202      	movs	r2, #2
  402838:	2139      	movs	r1, #57	; 0x39
  40283a:	68f8      	ldr	r0, [r7, #12]
  40283c:	4b30      	ldr	r3, [pc, #192]	; (402900 <dhcp_discover+0x100>)
  40283e:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402840:	687b      	ldr	r3, [r7, #4]
  402842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402844:	4619      	mov	r1, r3
  402846:	68f8      	ldr	r0, [r7, #12]
  402848:	4b2e      	ldr	r3, [pc, #184]	; (402904 <dhcp_discover+0x104>)
  40284a:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
  40284c:	2204      	movs	r2, #4
  40284e:	2137      	movs	r1, #55	; 0x37
  402850:	68f8      	ldr	r0, [r7, #12]
  402852:	4b2b      	ldr	r3, [pc, #172]	; (402900 <dhcp_discover+0x100>)
  402854:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
  402856:	2101      	movs	r1, #1
  402858:	68f8      	ldr	r0, [r7, #12]
  40285a:	4b2b      	ldr	r3, [pc, #172]	; (402908 <dhcp_discover+0x108>)
  40285c:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
  40285e:	2103      	movs	r1, #3
  402860:	68f8      	ldr	r0, [r7, #12]
  402862:	4b29      	ldr	r3, [pc, #164]	; (402908 <dhcp_discover+0x108>)
  402864:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
  402866:	211c      	movs	r1, #28
  402868:	68f8      	ldr	r0, [r7, #12]
  40286a:	4b27      	ldr	r3, [pc, #156]	; (402908 <dhcp_discover+0x108>)
  40286c:	4798      	blx	r3
    dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
  40286e:	2106      	movs	r1, #6
  402870:	68f8      	ldr	r0, [r7, #12]
  402872:	4b25      	ldr	r3, [pc, #148]	; (402908 <dhcp_discover+0x108>)
  402874:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  402876:	68f8      	ldr	r0, [r7, #12]
  402878:	4b24      	ldr	r3, [pc, #144]	; (40290c <dhcp_discover+0x10c>)
  40287a:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  40287c:	68fb      	ldr	r3, [r7, #12]
  40287e:	691a      	ldr	r2, [r3, #16]
  402880:	68fb      	ldr	r3, [r7, #12]
  402882:	8b1b      	ldrh	r3, [r3, #24]
  402884:	33f0      	adds	r3, #240	; 0xf0
  402886:	b29b      	uxth	r3, r3
  402888:	4619      	mov	r1, r3
  40288a:	4610      	mov	r0, r2
  40288c:	4b20      	ldr	r3, [pc, #128]	; (402910 <dhcp_discover+0x110>)
  40288e:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402890:	68fb      	ldr	r3, [r7, #12]
  402892:	6858      	ldr	r0, [r3, #4]
  402894:	68fb      	ldr	r3, [r7, #12]
  402896:	6919      	ldr	r1, [r3, #16]
  402898:	687b      	ldr	r3, [r7, #4]
  40289a:	9300      	str	r3, [sp, #0]
  40289c:	2343      	movs	r3, #67	; 0x43
  40289e:	4a1d      	ldr	r2, [pc, #116]	; (402914 <dhcp_discover+0x114>)
  4028a0:	4c1d      	ldr	r4, [pc, #116]	; (402918 <dhcp_discover+0x118>)
  4028a2:	47a0      	blx	r4
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  4028a4:	68f8      	ldr	r0, [r7, #12]
  4028a6:	4b1d      	ldr	r3, [pc, #116]	; (40291c <dhcp_discover+0x11c>)
  4028a8:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  4028aa:	68fb      	ldr	r3, [r7, #12]
  4028ac:	7b5b      	ldrb	r3, [r3, #13]
  4028ae:	3301      	adds	r3, #1
  4028b0:	b2da      	uxtb	r2, r3
  4028b2:	68fb      	ldr	r3, [r7, #12]
  4028b4:	735a      	strb	r2, [r3, #13]
  if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  4028b6:	68fb      	ldr	r3, [r7, #12]
  4028b8:	7b5b      	ldrb	r3, [r3, #13]
  4028ba:	2b05      	cmp	r3, #5
  4028bc:	d807      	bhi.n	4028ce <dhcp_discover+0xce>
  4028be:	68fb      	ldr	r3, [r7, #12]
  4028c0:	7b5b      	ldrb	r3, [r3, #13]
  4028c2:	461a      	mov	r2, r3
  4028c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4028c8:	4093      	lsls	r3, r2
  4028ca:	b29b      	uxth	r3, r3
  4028cc:	e001      	b.n	4028d2 <dhcp_discover+0xd2>
  4028ce:	f64e 2360 	movw	r3, #60000	; 0xea60
  4028d2:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  4028d4:	893b      	ldrh	r3, [r7, #8]
  4028d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  4028da:	4a11      	ldr	r2, [pc, #68]	; (402920 <dhcp_discover+0x120>)
  4028dc:	fb82 1203 	smull	r1, r2, r2, r3
  4028e0:	1152      	asrs	r2, r2, #5
  4028e2:	17db      	asrs	r3, r3, #31
  4028e4:	1ad3      	subs	r3, r2, r3
  4028e6:	b29a      	uxth	r2, r3
  4028e8:	68fb      	ldr	r3, [r7, #12]
  4028ea:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  4028ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  4028f0:	4618      	mov	r0, r3
  4028f2:	3714      	adds	r7, #20
  4028f4:	46bd      	mov	sp, r7
  4028f6:	bd90      	pop	{r4, r7, pc}
  4028f8:	00402f19 	.word	0x00402f19
  4028fc:	00403645 	.word	0x00403645
  402900:	00402f4d 	.word	0x00402f4d
  402904:	00402fc9 	.word	0x00402fc9
  402908:	00402f99 	.word	0x00402f99
  40290c:	004038b1 	.word	0x004038b1
  402910:	004059e9 	.word	0x004059e9
  402914:	0040faf8 	.word	0x0040faf8
  402918:	0040aa51 	.word	0x0040aa51
  40291c:	00403875 	.word	0x00403875
  402920:	10624dd3 	.word	0x10624dd3

00402924 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  402924:	b580      	push	{r7, lr}
  402926:	b088      	sub	sp, #32
  402928:	af00      	add	r7, sp, #0
  40292a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  40292c:	687b      	ldr	r3, [r7, #4]
  40292e:	2b00      	cmp	r3, #0
  402930:	d100      	bne.n	402934 <dhcp_bind+0x10>
  402932:	e7fe      	b.n	402932 <dhcp_bind+0xe>
  dhcp = netif->dhcp;
  402934:	687b      	ldr	r3, [r7, #4]
  402936:	6a1b      	ldr	r3, [r3, #32]
  402938:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  40293a:	69bb      	ldr	r3, [r7, #24]
  40293c:	2b00      	cmp	r3, #0
  40293e:	d100      	bne.n	402942 <dhcp_bind+0x1e>
  402940:	e7fe      	b.n	402940 <dhcp_bind+0x1c>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  402942:	69bb      	ldr	r3, [r7, #24]
  402944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402946:	f1b3 3fff 	cmp.w	r3, #4294967295
  40294a:	d019      	beq.n	402980 <dhcp_bind+0x5c>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  40294c:	69bb      	ldr	r3, [r7, #24]
  40294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  402950:	331e      	adds	r3, #30
  402952:	4a46      	ldr	r2, [pc, #280]	; (402a6c <dhcp_bind+0x148>)
  402954:	fba2 2303 	umull	r2, r3, r2, r3
  402958:	095b      	lsrs	r3, r3, #5
  40295a:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  40295c:	69fb      	ldr	r3, [r7, #28]
  40295e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  402962:	d302      	bcc.n	40296a <dhcp_bind+0x46>
      timeout = 0xffff;
  402964:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402968:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  40296a:	69fb      	ldr	r3, [r7, #28]
  40296c:	b29a      	uxth	r2, r3
  40296e:	69bb      	ldr	r3, [r7, #24]
  402970:	839a      	strh	r2, [r3, #28]
    if (dhcp->t1_timeout == 0) {
  402972:	69bb      	ldr	r3, [r7, #24]
  402974:	8b9b      	ldrh	r3, [r3, #28]
  402976:	2b00      	cmp	r3, #0
  402978:	d102      	bne.n	402980 <dhcp_bind+0x5c>
      dhcp->t1_timeout = 1;
  40297a:	69bb      	ldr	r3, [r7, #24]
  40297c:	2201      	movs	r2, #1
  40297e:	839a      	strh	r2, [r3, #28]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  402980:	69bb      	ldr	r3, [r7, #24]
  402982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  402984:	f1b3 3fff 	cmp.w	r3, #4294967295
  402988:	d019      	beq.n	4029be <dhcp_bind+0x9a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  40298a:	69bb      	ldr	r3, [r7, #24]
  40298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40298e:	331e      	adds	r3, #30
  402990:	4a36      	ldr	r2, [pc, #216]	; (402a6c <dhcp_bind+0x148>)
  402992:	fba2 2303 	umull	r2, r3, r2, r3
  402996:	095b      	lsrs	r3, r3, #5
  402998:	61fb      	str	r3, [r7, #28]
    if(timeout > 0xffff) {
  40299a:	69fb      	ldr	r3, [r7, #28]
  40299c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
  4029a0:	d302      	bcc.n	4029a8 <dhcp_bind+0x84>
      timeout = 0xffff;
  4029a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4029a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  4029a8:	69fb      	ldr	r3, [r7, #28]
  4029aa:	b29a      	uxth	r2, r3
  4029ac:	69bb      	ldr	r3, [r7, #24]
  4029ae:	83da      	strh	r2, [r3, #30]
    if (dhcp->t2_timeout == 0) {
  4029b0:	69bb      	ldr	r3, [r7, #24]
  4029b2:	8bdb      	ldrh	r3, [r3, #30]
  4029b4:	2b00      	cmp	r3, #0
  4029b6:	d102      	bne.n	4029be <dhcp_bind+0x9a>
      dhcp->t2_timeout = 1;
  4029b8:	69bb      	ldr	r3, [r7, #24]
  4029ba:	2201      	movs	r2, #1
  4029bc:	83da      	strh	r2, [r3, #30]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  4029be:	69bb      	ldr	r3, [r7, #24]
  4029c0:	8b9a      	ldrh	r2, [r3, #28]
  4029c2:	69bb      	ldr	r3, [r7, #24]
  4029c4:	8bdb      	ldrh	r3, [r3, #30]
  4029c6:	429a      	cmp	r2, r3
  4029c8:	d306      	bcc.n	4029d8 <dhcp_bind+0xb4>
  4029ca:	69bb      	ldr	r3, [r7, #24]
  4029cc:	8bdb      	ldrh	r3, [r3, #30]
  4029ce:	2b00      	cmp	r3, #0
  4029d0:	d002      	beq.n	4029d8 <dhcp_bind+0xb4>
    dhcp->t1_timeout = 0;
  4029d2:	69bb      	ldr	r3, [r7, #24]
  4029d4:	2200      	movs	r2, #0
  4029d6:	839a      	strh	r2, [r3, #28]
  }

  if (dhcp->subnet_mask_given) {
  4029d8:	69bb      	ldr	r3, [r7, #24]
  4029da:	7b9b      	ldrb	r3, [r3, #14]
  4029dc:	2b00      	cmp	r3, #0
  4029de:	d003      	beq.n	4029e8 <dhcp_bind+0xc4>
    /* copy offered network mask */
    ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
  4029e0:	69bb      	ldr	r3, [r7, #24]
  4029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4029e4:	613b      	str	r3, [r7, #16]
  4029e6:	e014      	b.n	402a12 <dhcp_bind+0xee>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  4029e8:	69bb      	ldr	r3, [r7, #24]
  4029ea:	3324      	adds	r3, #36	; 0x24
  4029ec:	781b      	ldrb	r3, [r3, #0]
  4029ee:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
  4029f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
  4029f4:	2b00      	cmp	r3, #0
  4029f6:	db02      	blt.n	4029fe <dhcp_bind+0xda>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  4029f8:	23ff      	movs	r3, #255	; 0xff
  4029fa:	613b      	str	r3, [r7, #16]
  4029fc:	e009      	b.n	402a12 <dhcp_bind+0xee>
    } else if (first_octet >= 192) {
  4029fe:	7dfb      	ldrb	r3, [r7, #23]
  402a00:	2bbf      	cmp	r3, #191	; 0xbf
  402a02:	d903      	bls.n	402a0c <dhcp_bind+0xe8>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  402a04:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  402a08:	613b      	str	r3, [r7, #16]
  402a0a:	e002      	b.n	402a12 <dhcp_bind+0xee>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  402a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  402a10:	613b      	str	r3, [r7, #16]
    }
  }

  ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
  402a12:	69bb      	ldr	r3, [r7, #24]
  402a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a16:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip_addr_isany(&gw_addr)) {
  402a18:	68fb      	ldr	r3, [r7, #12]
  402a1a:	2b00      	cmp	r3, #0
  402a1c:	d108      	bne.n	402a30 <dhcp_bind+0x10c>
    /* copy network address */
    ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  402a1e:	69bb      	ldr	r3, [r7, #24]
  402a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  402a22:	693b      	ldr	r3, [r7, #16]
  402a24:	4013      	ands	r3, r2
  402a26:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  402a28:	68fb      	ldr	r3, [r7, #12]
  402a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  402a2e:	60fb      	str	r3, [r7, #12]
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
  402a30:	69bb      	ldr	r3, [r7, #24]
  402a32:	3324      	adds	r3, #36	; 0x24
  402a34:	4619      	mov	r1, r3
  402a36:	6878      	ldr	r0, [r7, #4]
  402a38:	4b0d      	ldr	r3, [pc, #52]	; (402a70 <dhcp_bind+0x14c>)
  402a3a:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&sn_mask)));
  netif_set_netmask(netif, &sn_mask);
  402a3c:	f107 0310 	add.w	r3, r7, #16
  402a40:	4619      	mov	r1, r3
  402a42:	6878      	ldr	r0, [r7, #4]
  402a44:	4b0b      	ldr	r3, [pc, #44]	; (402a74 <dhcp_bind+0x150>)
  402a46:	4798      	blx	r3
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&gw_addr)));
  netif_set_gw(netif, &gw_addr);
  402a48:	f107 030c 	add.w	r3, r7, #12
  402a4c:	4619      	mov	r1, r3
  402a4e:	6878      	ldr	r0, [r7, #4]
  402a50:	4b09      	ldr	r3, [pc, #36]	; (402a78 <dhcp_bind+0x154>)
  402a52:	4798      	blx	r3
  /* bring the interface up */
  netif_set_up(netif);
  402a54:	6878      	ldr	r0, [r7, #4]
  402a56:	4b09      	ldr	r3, [pc, #36]	; (402a7c <dhcp_bind+0x158>)
  402a58:	4798      	blx	r3
  /* netif is now bound to DHCP leased address */
  dhcp_set_state(dhcp, DHCP_BOUND);
  402a5a:	210a      	movs	r1, #10
  402a5c:	69b8      	ldr	r0, [r7, #24]
  402a5e:	4b08      	ldr	r3, [pc, #32]	; (402a80 <dhcp_bind+0x15c>)
  402a60:	4798      	blx	r3
}
  402a62:	bf00      	nop
  402a64:	3720      	adds	r7, #32
  402a66:	46bd      	mov	sp, r7
  402a68:	bd80      	pop	{r7, pc}
  402a6a:	bf00      	nop
  402a6c:	88888889 	.word	0x88888889
  402a70:	004055fd 	.word	0x004055fd
  402a74:	004056d9 	.word	0x004056d9
  402a78:	004056b1 	.word	0x004056b1
  402a7c:	00405721 	.word	0x00405721
  402a80:	00402f19 	.word	0x00402f19

00402a84 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  402a84:	b590      	push	{r4, r7, lr}
  402a86:	b087      	sub	sp, #28
  402a88:	af02      	add	r7, sp, #8
  402a8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402a8c:	687b      	ldr	r3, [r7, #4]
  402a8e:	6a1b      	ldr	r3, [r3, #32]
  402a90:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_RENEWING);
  402a92:	2105      	movs	r1, #5
  402a94:	68f8      	ldr	r0, [r7, #12]
  402a96:	4b2f      	ldr	r3, [pc, #188]	; (402b54 <dhcp_renew+0xd0>)
  402a98:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402a9a:	2203      	movs	r2, #3
  402a9c:	68f9      	ldr	r1, [r7, #12]
  402a9e:	6878      	ldr	r0, [r7, #4]
  402aa0:	4b2d      	ldr	r3, [pc, #180]	; (402b58 <dhcp_renew+0xd4>)
  402aa2:	4798      	blx	r3
  402aa4:	4603      	mov	r3, r0
  402aa6:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402aa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402aac:	2b00      	cmp	r3, #0
  402aae:	d126      	bne.n	402afe <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402ab0:	2202      	movs	r2, #2
  402ab2:	2139      	movs	r1, #57	; 0x39
  402ab4:	68f8      	ldr	r0, [r7, #12]
  402ab6:	4b29      	ldr	r3, [pc, #164]	; (402b5c <dhcp_renew+0xd8>)
  402ab8:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402aba:	687b      	ldr	r3, [r7, #4]
  402abc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402abe:	4619      	mov	r1, r3
  402ac0:	68f8      	ldr	r0, [r7, #12]
  402ac2:	4b27      	ldr	r3, [pc, #156]	; (402b60 <dhcp_renew+0xdc>)
  402ac4:	4798      	blx	r3
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  402ac6:	68f8      	ldr	r0, [r7, #12]
  402ac8:	4b26      	ldr	r3, [pc, #152]	; (402b64 <dhcp_renew+0xe0>)
  402aca:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402acc:	68fb      	ldr	r3, [r7, #12]
  402ace:	691a      	ldr	r2, [r3, #16]
  402ad0:	68fb      	ldr	r3, [r7, #12]
  402ad2:	8b1b      	ldrh	r3, [r3, #24]
  402ad4:	33f0      	adds	r3, #240	; 0xf0
  402ad6:	b29b      	uxth	r3, r3
  402ad8:	4619      	mov	r1, r3
  402ada:	4610      	mov	r0, r2
  402adc:	4b22      	ldr	r3, [pc, #136]	; (402b68 <dhcp_renew+0xe4>)
  402ade:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  402ae0:	68fb      	ldr	r3, [r7, #12]
  402ae2:	6858      	ldr	r0, [r3, #4]
  402ae4:	68fb      	ldr	r3, [r7, #12]
  402ae6:	6919      	ldr	r1, [r3, #16]
  402ae8:	68fb      	ldr	r3, [r7, #12]
  402aea:	f103 0220 	add.w	r2, r3, #32
  402aee:	687b      	ldr	r3, [r7, #4]
  402af0:	9300      	str	r3, [sp, #0]
  402af2:	2343      	movs	r3, #67	; 0x43
  402af4:	4c1d      	ldr	r4, [pc, #116]	; (402b6c <dhcp_renew+0xe8>)
  402af6:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402af8:	68f8      	ldr	r0, [r7, #12]
  402afa:	4b1d      	ldr	r3, [pc, #116]	; (402b70 <dhcp_renew+0xec>)
  402afc:	4798      	blx	r3

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402afe:	68fb      	ldr	r3, [r7, #12]
  402b00:	7b5b      	ldrb	r3, [r3, #13]
  402b02:	3301      	adds	r3, #1
  402b04:	b2da      	uxtb	r2, r3
  402b06:	68fb      	ldr	r3, [r7, #12]
  402b08:	735a      	strb	r2, [r3, #13]
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  402b0a:	68fb      	ldr	r3, [r7, #12]
  402b0c:	7b5b      	ldrb	r3, [r3, #13]
  402b0e:	2b09      	cmp	r3, #9
  402b10:	d80a      	bhi.n	402b28 <dhcp_renew+0xa4>
  402b12:	68fb      	ldr	r3, [r7, #12]
  402b14:	7b5b      	ldrb	r3, [r3, #13]
  402b16:	b29b      	uxth	r3, r3
  402b18:	461a      	mov	r2, r3
  402b1a:	0152      	lsls	r2, r2, #5
  402b1c:	1ad2      	subs	r2, r2, r3
  402b1e:	0092      	lsls	r2, r2, #2
  402b20:	4413      	add	r3, r2
  402b22:	011b      	lsls	r3, r3, #4
  402b24:	b29b      	uxth	r3, r3
  402b26:	e001      	b.n	402b2c <dhcp_renew+0xa8>
  402b28:	f644 6320 	movw	r3, #20000	; 0x4e20
  402b2c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402b2e:	893b      	ldrh	r3, [r7, #8]
  402b30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402b34:	4a0f      	ldr	r2, [pc, #60]	; (402b74 <dhcp_renew+0xf0>)
  402b36:	fb82 1203 	smull	r1, r2, r2, r3
  402b3a:	1152      	asrs	r2, r2, #5
  402b3c:	17db      	asrs	r3, r3, #31
  402b3e:	1ad3      	subs	r3, r2, r3
  402b40:	b29a      	uxth	r2, r3
  402b42:	68fb      	ldr	r3, [r7, #12]
  402b44:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402b46:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402b4a:	4618      	mov	r0, r3
  402b4c:	3714      	adds	r7, #20
  402b4e:	46bd      	mov	sp, r7
  402b50:	bd90      	pop	{r4, r7, pc}
  402b52:	bf00      	nop
  402b54:	00402f19 	.word	0x00402f19
  402b58:	00403645 	.word	0x00403645
  402b5c:	00402f4d 	.word	0x00402f4d
  402b60:	00402fc9 	.word	0x00402fc9
  402b64:	004038b1 	.word	0x004038b1
  402b68:	004059e9 	.word	0x004059e9
  402b6c:	0040aa51 	.word	0x0040aa51
  402b70:	00403875 	.word	0x00403875
  402b74:	10624dd3 	.word	0x10624dd3

00402b78 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  402b78:	b590      	push	{r4, r7, lr}
  402b7a:	b087      	sub	sp, #28
  402b7c:	af02      	add	r7, sp, #8
  402b7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402b80:	687b      	ldr	r3, [r7, #4]
  402b82:	6a1b      	ldr	r3, [r3, #32]
  402b84:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_REBINDING);
  402b86:	2104      	movs	r1, #4
  402b88:	68f8      	ldr	r0, [r7, #12]
  402b8a:	4b2e      	ldr	r3, [pc, #184]	; (402c44 <dhcp_rebind+0xcc>)
  402b8c:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402b8e:	2203      	movs	r2, #3
  402b90:	68f9      	ldr	r1, [r7, #12]
  402b92:	6878      	ldr	r0, [r7, #4]
  402b94:	4b2c      	ldr	r3, [pc, #176]	; (402c48 <dhcp_rebind+0xd0>)
  402b96:	4798      	blx	r3
  402b98:	4603      	mov	r3, r0
  402b9a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402b9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402ba0:	2b00      	cmp	r3, #0
  402ba2:	d124      	bne.n	402bee <dhcp_rebind+0x76>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402ba4:	2202      	movs	r2, #2
  402ba6:	2139      	movs	r1, #57	; 0x39
  402ba8:	68f8      	ldr	r0, [r7, #12]
  402baa:	4b28      	ldr	r3, [pc, #160]	; (402c4c <dhcp_rebind+0xd4>)
  402bac:	4798      	blx	r3
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  402bae:	687b      	ldr	r3, [r7, #4]
  402bb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  402bb2:	4619      	mov	r1, r3
  402bb4:	68f8      	ldr	r0, [r7, #12]
  402bb6:	4b26      	ldr	r3, [pc, #152]	; (402c50 <dhcp_rebind+0xd8>)
  402bb8:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
    dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
#endif

    dhcp_option_trailer(dhcp);
  402bba:	68f8      	ldr	r0, [r7, #12]
  402bbc:	4b25      	ldr	r3, [pc, #148]	; (402c54 <dhcp_rebind+0xdc>)
  402bbe:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402bc0:	68fb      	ldr	r3, [r7, #12]
  402bc2:	691a      	ldr	r2, [r3, #16]
  402bc4:	68fb      	ldr	r3, [r7, #12]
  402bc6:	8b1b      	ldrh	r3, [r3, #24]
  402bc8:	33f0      	adds	r3, #240	; 0xf0
  402bca:	b29b      	uxth	r3, r3
  402bcc:	4619      	mov	r1, r3
  402bce:	4610      	mov	r0, r2
  402bd0:	4b21      	ldr	r3, [pc, #132]	; (402c58 <dhcp_rebind+0xe0>)
  402bd2:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402bd4:	68fb      	ldr	r3, [r7, #12]
  402bd6:	6858      	ldr	r0, [r3, #4]
  402bd8:	68fb      	ldr	r3, [r7, #12]
  402bda:	6919      	ldr	r1, [r3, #16]
  402bdc:	687b      	ldr	r3, [r7, #4]
  402bde:	9300      	str	r3, [sp, #0]
  402be0:	2343      	movs	r3, #67	; 0x43
  402be2:	4a1e      	ldr	r2, [pc, #120]	; (402c5c <dhcp_rebind+0xe4>)
  402be4:	4c1e      	ldr	r4, [pc, #120]	; (402c60 <dhcp_rebind+0xe8>)
  402be6:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402be8:	68f8      	ldr	r0, [r7, #12]
  402bea:	4b1e      	ldr	r3, [pc, #120]	; (402c64 <dhcp_rebind+0xec>)
  402bec:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402bee:	68fb      	ldr	r3, [r7, #12]
  402bf0:	7b5b      	ldrb	r3, [r3, #13]
  402bf2:	3301      	adds	r3, #1
  402bf4:	b2da      	uxtb	r2, r3
  402bf6:	68fb      	ldr	r3, [r7, #12]
  402bf8:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402bfa:	68fb      	ldr	r3, [r7, #12]
  402bfc:	7b5b      	ldrb	r3, [r3, #13]
  402bfe:	2b09      	cmp	r3, #9
  402c00:	d80a      	bhi.n	402c18 <dhcp_rebind+0xa0>
  402c02:	68fb      	ldr	r3, [r7, #12]
  402c04:	7b5b      	ldrb	r3, [r3, #13]
  402c06:	b29b      	uxth	r3, r3
  402c08:	461a      	mov	r2, r3
  402c0a:	0152      	lsls	r2, r2, #5
  402c0c:	1ad2      	subs	r2, r2, r3
  402c0e:	0092      	lsls	r2, r2, #2
  402c10:	4413      	add	r3, r2
  402c12:	00db      	lsls	r3, r3, #3
  402c14:	b29b      	uxth	r3, r3
  402c16:	e001      	b.n	402c1c <dhcp_rebind+0xa4>
  402c18:	f242 7310 	movw	r3, #10000	; 0x2710
  402c1c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402c1e:	893b      	ldrh	r3, [r7, #8]
  402c20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402c24:	4a10      	ldr	r2, [pc, #64]	; (402c68 <dhcp_rebind+0xf0>)
  402c26:	fb82 1203 	smull	r1, r2, r2, r3
  402c2a:	1152      	asrs	r2, r2, #5
  402c2c:	17db      	asrs	r3, r3, #31
  402c2e:	1ad3      	subs	r3, r2, r3
  402c30:	b29a      	uxth	r2, r3
  402c32:	68fb      	ldr	r3, [r7, #12]
  402c34:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402c36:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402c3a:	4618      	mov	r0, r3
  402c3c:	3714      	adds	r7, #20
  402c3e:	46bd      	mov	sp, r7
  402c40:	bd90      	pop	{r4, r7, pc}
  402c42:	bf00      	nop
  402c44:	00402f19 	.word	0x00402f19
  402c48:	00403645 	.word	0x00403645
  402c4c:	00402f4d 	.word	0x00402f4d
  402c50:	00402fc9 	.word	0x00402fc9
  402c54:	004038b1 	.word	0x004038b1
  402c58:	004059e9 	.word	0x004059e9
  402c5c:	0040faf8 	.word	0x0040faf8
  402c60:	0040aa51 	.word	0x0040aa51
  402c64:	00403875 	.word	0x00403875
  402c68:	10624dd3 	.word	0x10624dd3

00402c6c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  402c6c:	b590      	push	{r4, r7, lr}
  402c6e:	b087      	sub	sp, #28
  402c70:	af02      	add	r7, sp, #8
  402c72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402c74:	687b      	ldr	r3, [r7, #4]
  402c76:	6a1b      	ldr	r3, [r3, #32]
  402c78:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_REBOOTING);
  402c7a:	2103      	movs	r1, #3
  402c7c:	68f8      	ldr	r0, [r7, #12]
  402c7e:	4b35      	ldr	r3, [pc, #212]	; (402d54 <dhcp_reboot+0xe8>)
  402c80:	4798      	blx	r3

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  402c82:	2203      	movs	r2, #3
  402c84:	68f9      	ldr	r1, [r7, #12]
  402c86:	6878      	ldr	r0, [r7, #4]
  402c88:	4b33      	ldr	r3, [pc, #204]	; (402d58 <dhcp_reboot+0xec>)
  402c8a:	4798      	blx	r3
  402c8c:	4603      	mov	r3, r0
  402c8e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402c90:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402c94:	2b00      	cmp	r3, #0
  402c96:	d132      	bne.n	402cfe <dhcp_reboot+0x92>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  402c98:	2202      	movs	r2, #2
  402c9a:	2139      	movs	r1, #57	; 0x39
  402c9c:	68f8      	ldr	r0, [r7, #12]
  402c9e:	4b2f      	ldr	r3, [pc, #188]	; (402d5c <dhcp_reboot+0xf0>)
  402ca0:	4798      	blx	r3
    dhcp_option_short(dhcp, 576);
  402ca2:	f44f 7110 	mov.w	r1, #576	; 0x240
  402ca6:	68f8      	ldr	r0, [r7, #12]
  402ca8:	4b2d      	ldr	r3, [pc, #180]	; (402d60 <dhcp_reboot+0xf4>)
  402caa:	4798      	blx	r3

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  402cac:	2204      	movs	r2, #4
  402cae:	2132      	movs	r1, #50	; 0x32
  402cb0:	68f8      	ldr	r0, [r7, #12]
  402cb2:	4b2a      	ldr	r3, [pc, #168]	; (402d5c <dhcp_reboot+0xf0>)
  402cb4:	4798      	blx	r3
    dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  402cb6:	68fb      	ldr	r3, [r7, #12]
  402cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  402cba:	4618      	mov	r0, r3
  402cbc:	4b29      	ldr	r3, [pc, #164]	; (402d64 <dhcp_reboot+0xf8>)
  402cbe:	4798      	blx	r3
  402cc0:	4603      	mov	r3, r0
  402cc2:	4619      	mov	r1, r3
  402cc4:	68f8      	ldr	r0, [r7, #12]
  402cc6:	4b28      	ldr	r3, [pc, #160]	; (402d68 <dhcp_reboot+0xfc>)
  402cc8:	4798      	blx	r3

    dhcp_option_trailer(dhcp);
  402cca:	68f8      	ldr	r0, [r7, #12]
  402ccc:	4b27      	ldr	r3, [pc, #156]	; (402d6c <dhcp_reboot+0x100>)
  402cce:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402cd0:	68fb      	ldr	r3, [r7, #12]
  402cd2:	691a      	ldr	r2, [r3, #16]
  402cd4:	68fb      	ldr	r3, [r7, #12]
  402cd6:	8b1b      	ldrh	r3, [r3, #24]
  402cd8:	33f0      	adds	r3, #240	; 0xf0
  402cda:	b29b      	uxth	r3, r3
  402cdc:	4619      	mov	r1, r3
  402cde:	4610      	mov	r0, r2
  402ce0:	4b23      	ldr	r3, [pc, #140]	; (402d70 <dhcp_reboot+0x104>)
  402ce2:	4798      	blx	r3

    /* broadcast to server */
    udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  402ce4:	68fb      	ldr	r3, [r7, #12]
  402ce6:	6858      	ldr	r0, [r3, #4]
  402ce8:	68fb      	ldr	r3, [r7, #12]
  402cea:	6919      	ldr	r1, [r3, #16]
  402cec:	687b      	ldr	r3, [r7, #4]
  402cee:	9300      	str	r3, [sp, #0]
  402cf0:	2343      	movs	r3, #67	; 0x43
  402cf2:	4a20      	ldr	r2, [pc, #128]	; (402d74 <dhcp_reboot+0x108>)
  402cf4:	4c20      	ldr	r4, [pc, #128]	; (402d78 <dhcp_reboot+0x10c>)
  402cf6:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402cf8:	68f8      	ldr	r0, [r7, #12]
  402cfa:	4b20      	ldr	r3, [pc, #128]	; (402d7c <dhcp_reboot+0x110>)
  402cfc:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402cfe:	68fb      	ldr	r3, [r7, #12]
  402d00:	7b5b      	ldrb	r3, [r3, #13]
  402d02:	3301      	adds	r3, #1
  402d04:	b2da      	uxtb	r2, r3
  402d06:	68fb      	ldr	r3, [r7, #12]
  402d08:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402d0a:	68fb      	ldr	r3, [r7, #12]
  402d0c:	7b5b      	ldrb	r3, [r3, #13]
  402d0e:	2b09      	cmp	r3, #9
  402d10:	d80a      	bhi.n	402d28 <dhcp_reboot+0xbc>
  402d12:	68fb      	ldr	r3, [r7, #12]
  402d14:	7b5b      	ldrb	r3, [r3, #13]
  402d16:	b29b      	uxth	r3, r3
  402d18:	461a      	mov	r2, r3
  402d1a:	0152      	lsls	r2, r2, #5
  402d1c:	1ad2      	subs	r2, r2, r3
  402d1e:	0092      	lsls	r2, r2, #2
  402d20:	4413      	add	r3, r2
  402d22:	00db      	lsls	r3, r3, #3
  402d24:	b29b      	uxth	r3, r3
  402d26:	e001      	b.n	402d2c <dhcp_reboot+0xc0>
  402d28:	f242 7310 	movw	r3, #10000	; 0x2710
  402d2c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402d2e:	893b      	ldrh	r3, [r7, #8]
  402d30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402d34:	4a12      	ldr	r2, [pc, #72]	; (402d80 <dhcp_reboot+0x114>)
  402d36:	fb82 1203 	smull	r1, r2, r2, r3
  402d3a:	1152      	asrs	r2, r2, #5
  402d3c:	17db      	asrs	r3, r3, #31
  402d3e:	1ad3      	subs	r3, r2, r3
  402d40:	b29a      	uxth	r2, r3
  402d42:	68fb      	ldr	r3, [r7, #12]
  402d44:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  402d46:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402d4a:	4618      	mov	r0, r3
  402d4c:	3714      	adds	r7, #20
  402d4e:	46bd      	mov	sp, r7
  402d50:	bd90      	pop	{r4, r7, pc}
  402d52:	bf00      	nop
  402d54:	00402f19 	.word	0x00402f19
  402d58:	00403645 	.word	0x00403645
  402d5c:	00402f4d 	.word	0x00402f4d
  402d60:	00402fc9 	.word	0x00402fc9
  402d64:	00402019 	.word	0x00402019
  402d68:	0040301f 	.word	0x0040301f
  402d6c:	004038b1 	.word	0x004038b1
  402d70:	004059e9 	.word	0x004059e9
  402d74:	0040faf8 	.word	0x0040faf8
  402d78:	0040aa51 	.word	0x0040aa51
  402d7c:	00403875 	.word	0x00403875
  402d80:	10624dd3 	.word	0x10624dd3

00402d84 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  402d84:	b590      	push	{r4, r7, lr}
  402d86:	b087      	sub	sp, #28
  402d88:	af02      	add	r7, sp, #8
  402d8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif->dhcp;
  402d8c:	687b      	ldr	r3, [r7, #4]
  402d8e:	6a1b      	ldr	r3, [r3, #32]
  402d90:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_OFF);
  402d92:	2100      	movs	r1, #0
  402d94:	68f8      	ldr	r0, [r7, #12]
  402d96:	4b3c      	ldr	r3, [pc, #240]	; (402e88 <dhcp_release+0x104>)
  402d98:	4798      	blx	r3
  /* clean old DHCP offer */
  ip_addr_set_zero(&dhcp->server_ip_addr);
  402d9a:	68fb      	ldr	r3, [r7, #12]
  402d9c:	2200      	movs	r2, #0
  402d9e:	621a      	str	r2, [r3, #32]
  ip_addr_set_zero(&dhcp->offered_ip_addr);
  402da0:	68fb      	ldr	r3, [r7, #12]
  402da2:	2200      	movs	r2, #0
  402da4:	625a      	str	r2, [r3, #36]	; 0x24
  ip_addr_set_zero(&dhcp->offered_sn_mask);
  402da6:	68fb      	ldr	r3, [r7, #12]
  402da8:	2200      	movs	r2, #0
  402daa:	629a      	str	r2, [r3, #40]	; 0x28
  ip_addr_set_zero(&dhcp->offered_gw_addr);
  402dac:	68fb      	ldr	r3, [r7, #12]
  402dae:	2200      	movs	r2, #0
  402db0:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_DHCP_BOOTP_FILE
  ip_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  402db2:	68fb      	ldr	r3, [r7, #12]
  402db4:	2200      	movs	r2, #0
  402db6:	639a      	str	r2, [r3, #56]	; 0x38
  402db8:	68fb      	ldr	r3, [r7, #12]
  402dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402dbc:	68fb      	ldr	r3, [r7, #12]
  402dbe:	635a      	str	r2, [r3, #52]	; 0x34
  402dc0:	68fb      	ldr	r3, [r7, #12]
  402dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  402dc4:	68fb      	ldr	r3, [r7, #12]
  402dc6:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  402dc8:	2207      	movs	r2, #7
  402dca:	68f9      	ldr	r1, [r7, #12]
  402dcc:	6878      	ldr	r0, [r7, #4]
  402dce:	4b2f      	ldr	r3, [pc, #188]	; (402e8c <dhcp_release+0x108>)
  402dd0:	4798      	blx	r3
  402dd2:	4603      	mov	r3, r0
  402dd4:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
  402dd6:	f997 300b 	ldrsb.w	r3, [r7, #11]
  402dda:	2b00      	cmp	r3, #0
  402ddc:	d11b      	bne.n	402e16 <dhcp_release+0x92>
    dhcp_option_trailer(dhcp);
  402dde:	68f8      	ldr	r0, [r7, #12]
  402de0:	4b2b      	ldr	r3, [pc, #172]	; (402e90 <dhcp_release+0x10c>)
  402de2:	4798      	blx	r3

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  402de4:	68fb      	ldr	r3, [r7, #12]
  402de6:	691a      	ldr	r2, [r3, #16]
  402de8:	68fb      	ldr	r3, [r7, #12]
  402dea:	8b1b      	ldrh	r3, [r3, #24]
  402dec:	33f0      	adds	r3, #240	; 0xf0
  402dee:	b29b      	uxth	r3, r3
  402df0:	4619      	mov	r1, r3
  402df2:	4610      	mov	r0, r2
  402df4:	4b27      	ldr	r3, [pc, #156]	; (402e94 <dhcp_release+0x110>)
  402df6:	4798      	blx	r3

    udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  402df8:	68fb      	ldr	r3, [r7, #12]
  402dfa:	6858      	ldr	r0, [r3, #4]
  402dfc:	68fb      	ldr	r3, [r7, #12]
  402dfe:	6919      	ldr	r1, [r3, #16]
  402e00:	68fb      	ldr	r3, [r7, #12]
  402e02:	f103 0220 	add.w	r2, r3, #32
  402e06:	687b      	ldr	r3, [r7, #4]
  402e08:	9300      	str	r3, [sp, #0]
  402e0a:	2343      	movs	r3, #67	; 0x43
  402e0c:	4c22      	ldr	r4, [pc, #136]	; (402e98 <dhcp_release+0x114>)
  402e0e:	47a0      	blx	r4
    dhcp_delete_msg(dhcp);
  402e10:	68f8      	ldr	r0, [r7, #12]
  402e12:	4b22      	ldr	r3, [pc, #136]	; (402e9c <dhcp_release+0x118>)
  402e14:	4798      	blx	r3
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  dhcp->tries++;
  402e16:	68fb      	ldr	r3, [r7, #12]
  402e18:	7b5b      	ldrb	r3, [r3, #13]
  402e1a:	3301      	adds	r3, #1
  402e1c:	b2da      	uxtb	r2, r3
  402e1e:	68fb      	ldr	r3, [r7, #12]
  402e20:	735a      	strb	r2, [r3, #13]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  402e22:	68fb      	ldr	r3, [r7, #12]
  402e24:	7b5b      	ldrb	r3, [r3, #13]
  402e26:	2b09      	cmp	r3, #9
  402e28:	d80a      	bhi.n	402e40 <dhcp_release+0xbc>
  402e2a:	68fb      	ldr	r3, [r7, #12]
  402e2c:	7b5b      	ldrb	r3, [r3, #13]
  402e2e:	b29b      	uxth	r3, r3
  402e30:	461a      	mov	r2, r3
  402e32:	0152      	lsls	r2, r2, #5
  402e34:	1ad2      	subs	r2, r2, r3
  402e36:	0092      	lsls	r2, r2, #2
  402e38:	4413      	add	r3, r2
  402e3a:	00db      	lsls	r3, r3, #3
  402e3c:	b29b      	uxth	r3, r3
  402e3e:	e001      	b.n	402e44 <dhcp_release+0xc0>
  402e40:	f242 7310 	movw	r3, #10000	; 0x2710
  402e44:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  402e46:	893b      	ldrh	r3, [r7, #8]
  402e48:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
  402e4c:	4a14      	ldr	r2, [pc, #80]	; (402ea0 <dhcp_release+0x11c>)
  402e4e:	fb82 1203 	smull	r1, r2, r2, r3
  402e52:	1152      	asrs	r2, r2, #5
  402e54:	17db      	asrs	r3, r3, #31
  402e56:	1ad3      	subs	r3, r2, r3
  402e58:	b29a      	uxth	r2, r3
  402e5a:	68fb      	ldr	r3, [r7, #12]
  402e5c:	835a      	strh	r2, [r3, #26]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
  /* bring the interface down */
  netif_set_down(netif);
  402e5e:	6878      	ldr	r0, [r7, #4]
  402e60:	4b10      	ldr	r3, [pc, #64]	; (402ea4 <dhcp_release+0x120>)
  402e62:	4798      	blx	r3
  /* remove IP address from interface */
  netif_set_ipaddr(netif, IP_ADDR_ANY);
  402e64:	4910      	ldr	r1, [pc, #64]	; (402ea8 <dhcp_release+0x124>)
  402e66:	6878      	ldr	r0, [r7, #4]
  402e68:	4b10      	ldr	r3, [pc, #64]	; (402eac <dhcp_release+0x128>)
  402e6a:	4798      	blx	r3
  netif_set_gw(netif, IP_ADDR_ANY);
  402e6c:	490e      	ldr	r1, [pc, #56]	; (402ea8 <dhcp_release+0x124>)
  402e6e:	6878      	ldr	r0, [r7, #4]
  402e70:	4b0f      	ldr	r3, [pc, #60]	; (402eb0 <dhcp_release+0x12c>)
  402e72:	4798      	blx	r3
  netif_set_netmask(netif, IP_ADDR_ANY);
  402e74:	490c      	ldr	r1, [pc, #48]	; (402ea8 <dhcp_release+0x124>)
  402e76:	6878      	ldr	r0, [r7, #4]
  402e78:	4b0e      	ldr	r3, [pc, #56]	; (402eb4 <dhcp_release+0x130>)
  402e7a:	4798      	blx	r3
  
  return result;
  402e7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
  402e80:	4618      	mov	r0, r3
  402e82:	3714      	adds	r7, #20
  402e84:	46bd      	mov	sp, r7
  402e86:	bd90      	pop	{r4, r7, pc}
  402e88:	00402f19 	.word	0x00402f19
  402e8c:	00403645 	.word	0x00403645
  402e90:	004038b1 	.word	0x004038b1
  402e94:	004059e9 	.word	0x004059e9
  402e98:	0040aa51 	.word	0x0040aa51
  402e9c:	00403875 	.word	0x00403875
  402ea0:	10624dd3 	.word	0x10624dd3
  402ea4:	0040577d 	.word	0x0040577d
  402ea8:	0040faf4 	.word	0x0040faf4
  402eac:	004055fd 	.word	0x004055fd
  402eb0:	004056b1 	.word	0x004056b1
  402eb4:	004056d9 	.word	0x004056d9

00402eb8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  402eb8:	b580      	push	{r7, lr}
  402eba:	b084      	sub	sp, #16
  402ebc:	af00      	add	r7, sp, #0
  402ebe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  402ec0:	687b      	ldr	r3, [r7, #4]
  402ec2:	2b00      	cmp	r3, #0
  402ec4:	d100      	bne.n	402ec8 <dhcp_stop+0x10>
  402ec6:	e7fe      	b.n	402ec6 <dhcp_stop+0xe>
  dhcp = netif->dhcp;
  402ec8:	687b      	ldr	r3, [r7, #4]
  402eca:	6a1b      	ldr	r3, [r3, #32]
  402ecc:	60fb      	str	r3, [r7, #12]
  /* Remove the flag that says this netif is handled by DHCP. */
  netif->flags &= ~NETIF_FLAG_DHCP;
  402ece:	687b      	ldr	r3, [r7, #4]
  402ed0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  402ed4:	f023 0308 	bic.w	r3, r3, #8
  402ed8:	b2da      	uxtb	r2, r3
  402eda:	687b      	ldr	r3, [r7, #4]
  402edc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  402ee0:	68fb      	ldr	r3, [r7, #12]
  402ee2:	2b00      	cmp	r3, #0
  402ee4:	d00f      	beq.n	402f06 <dhcp_stop+0x4e>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    if (dhcp->pcb != NULL) {
  402ee6:	68fb      	ldr	r3, [r7, #12]
  402ee8:	685b      	ldr	r3, [r3, #4]
  402eea:	2b00      	cmp	r3, #0
  402eec:	d007      	beq.n	402efe <dhcp_stop+0x46>
      udp_remove(dhcp->pcb);
  402eee:	68fb      	ldr	r3, [r7, #12]
  402ef0:	685b      	ldr	r3, [r3, #4]
  402ef2:	4618      	mov	r0, r3
  402ef4:	4b06      	ldr	r3, [pc, #24]	; (402f10 <dhcp_stop+0x58>)
  402ef6:	4798      	blx	r3
      dhcp->pcb = NULL;
  402ef8:	68fb      	ldr	r3, [r7, #12]
  402efa:	2200      	movs	r2, #0
  402efc:	605a      	str	r2, [r3, #4]
    }
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
    dhcp_set_state(dhcp, DHCP_OFF);
  402efe:	2100      	movs	r1, #0
  402f00:	68f8      	ldr	r0, [r7, #12]
  402f02:	4b04      	ldr	r3, [pc, #16]	; (402f14 <dhcp_stop+0x5c>)
  402f04:	4798      	blx	r3
  }
}
  402f06:	bf00      	nop
  402f08:	3710      	adds	r7, #16
  402f0a:	46bd      	mov	sp, r7
  402f0c:	bd80      	pop	{r7, pc}
  402f0e:	bf00      	nop
  402f10:	0040ad5d 	.word	0x0040ad5d
  402f14:	00402f19 	.word	0x00402f19

00402f18 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  402f18:	b480      	push	{r7}
  402f1a:	b083      	sub	sp, #12
  402f1c:	af00      	add	r7, sp, #0
  402f1e:	6078      	str	r0, [r7, #4]
  402f20:	460b      	mov	r3, r1
  402f22:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
  402f24:	687b      	ldr	r3, [r7, #4]
  402f26:	7b1b      	ldrb	r3, [r3, #12]
  402f28:	78fa      	ldrb	r2, [r7, #3]
  402f2a:	429a      	cmp	r2, r3
  402f2c:	d008      	beq.n	402f40 <dhcp_set_state+0x28>
    dhcp->state = new_state;
  402f2e:	687b      	ldr	r3, [r7, #4]
  402f30:	78fa      	ldrb	r2, [r7, #3]
  402f32:	731a      	strb	r2, [r3, #12]
    dhcp->tries = 0;
  402f34:	687b      	ldr	r3, [r7, #4]
  402f36:	2200      	movs	r2, #0
  402f38:	735a      	strb	r2, [r3, #13]
    dhcp->request_timeout = 0;
  402f3a:	687b      	ldr	r3, [r7, #4]
  402f3c:	2200      	movs	r2, #0
  402f3e:	835a      	strh	r2, [r3, #26]
  }
}
  402f40:	bf00      	nop
  402f42:	370c      	adds	r7, #12
  402f44:	46bd      	mov	sp, r7
  402f46:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f4a:	4770      	bx	lr

00402f4c <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  402f4c:	b480      	push	{r7}
  402f4e:	b083      	sub	sp, #12
  402f50:	af00      	add	r7, sp, #0
  402f52:	6078      	str	r0, [r7, #4]
  402f54:	460b      	mov	r3, r1
  402f56:	70fb      	strb	r3, [r7, #3]
  402f58:	4613      	mov	r3, r2
  402f5a:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  402f5c:	687b      	ldr	r3, [r7, #4]
  402f5e:	695a      	ldr	r2, [r3, #20]
  402f60:	687b      	ldr	r3, [r7, #4]
  402f62:	8b1b      	ldrh	r3, [r3, #24]
  402f64:	1c59      	adds	r1, r3, #1
  402f66:	b288      	uxth	r0, r1
  402f68:	6879      	ldr	r1, [r7, #4]
  402f6a:	8308      	strh	r0, [r1, #24]
  402f6c:	4413      	add	r3, r2
  402f6e:	78fa      	ldrb	r2, [r7, #3]
  402f70:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  402f74:	687b      	ldr	r3, [r7, #4]
  402f76:	695a      	ldr	r2, [r3, #20]
  402f78:	687b      	ldr	r3, [r7, #4]
  402f7a:	8b1b      	ldrh	r3, [r3, #24]
  402f7c:	1c59      	adds	r1, r3, #1
  402f7e:	b288      	uxth	r0, r1
  402f80:	6879      	ldr	r1, [r7, #4]
  402f82:	8308      	strh	r0, [r1, #24]
  402f84:	4413      	add	r3, r2
  402f86:	78ba      	ldrb	r2, [r7, #2]
  402f88:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402f8c:	bf00      	nop
  402f8e:	370c      	adds	r7, #12
  402f90:	46bd      	mov	sp, r7
  402f92:	f85d 7b04 	ldr.w	r7, [sp], #4
  402f96:	4770      	bx	lr

00402f98 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  402f98:	b480      	push	{r7}
  402f9a:	b083      	sub	sp, #12
  402f9c:	af00      	add	r7, sp, #0
  402f9e:	6078      	str	r0, [r7, #4]
  402fa0:	460b      	mov	r3, r1
  402fa2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  402fa4:	687b      	ldr	r3, [r7, #4]
  402fa6:	695a      	ldr	r2, [r3, #20]
  402fa8:	687b      	ldr	r3, [r7, #4]
  402faa:	8b1b      	ldrh	r3, [r3, #24]
  402fac:	1c59      	adds	r1, r3, #1
  402fae:	b288      	uxth	r0, r1
  402fb0:	6879      	ldr	r1, [r7, #4]
  402fb2:	8308      	strh	r0, [r1, #24]
  402fb4:	4413      	add	r3, r2
  402fb6:	78fa      	ldrb	r2, [r7, #3]
  402fb8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  402fbc:	bf00      	nop
  402fbe:	370c      	adds	r7, #12
  402fc0:	46bd      	mov	sp, r7
  402fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
  402fc6:	4770      	bx	lr

00402fc8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  402fc8:	b480      	push	{r7}
  402fca:	b083      	sub	sp, #12
  402fcc:	af00      	add	r7, sp, #0
  402fce:	6078      	str	r0, [r7, #4]
  402fd0:	460b      	mov	r3, r1
  402fd2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  402fd4:	687b      	ldr	r3, [r7, #4]
  402fd6:	695a      	ldr	r2, [r3, #20]
  402fd8:	687b      	ldr	r3, [r7, #4]
  402fda:	8b1b      	ldrh	r3, [r3, #24]
  402fdc:	1c59      	adds	r1, r3, #1
  402fde:	b288      	uxth	r0, r1
  402fe0:	6879      	ldr	r1, [r7, #4]
  402fe2:	8308      	strh	r0, [r1, #24]
  402fe4:	4618      	mov	r0, r3
  402fe6:	887b      	ldrh	r3, [r7, #2]
  402fe8:	0a1b      	lsrs	r3, r3, #8
  402fea:	b29b      	uxth	r3, r3
  402fec:	b2d9      	uxtb	r1, r3
  402fee:	1813      	adds	r3, r2, r0
  402ff0:	460a      	mov	r2, r1
  402ff2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  402ff6:	687b      	ldr	r3, [r7, #4]
  402ff8:	695a      	ldr	r2, [r3, #20]
  402ffa:	687b      	ldr	r3, [r7, #4]
  402ffc:	8b1b      	ldrh	r3, [r3, #24]
  402ffe:	1c59      	adds	r1, r3, #1
  403000:	b288      	uxth	r0, r1
  403002:	6879      	ldr	r1, [r7, #4]
  403004:	8308      	strh	r0, [r1, #24]
  403006:	8879      	ldrh	r1, [r7, #2]
  403008:	b2c9      	uxtb	r1, r1
  40300a:	4413      	add	r3, r2
  40300c:	460a      	mov	r2, r1
  40300e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  403012:	bf00      	nop
  403014:	370c      	adds	r7, #12
  403016:	46bd      	mov	sp, r7
  403018:	f85d 7b04 	ldr.w	r7, [sp], #4
  40301c:	4770      	bx	lr

0040301e <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  40301e:	b480      	push	{r7}
  403020:	b083      	sub	sp, #12
  403022:	af00      	add	r7, sp, #0
  403024:	6078      	str	r0, [r7, #4]
  403026:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  403028:	687b      	ldr	r3, [r7, #4]
  40302a:	695a      	ldr	r2, [r3, #20]
  40302c:	687b      	ldr	r3, [r7, #4]
  40302e:	8b1b      	ldrh	r3, [r3, #24]
  403030:	1c59      	adds	r1, r3, #1
  403032:	b288      	uxth	r0, r1
  403034:	6879      	ldr	r1, [r7, #4]
  403036:	8308      	strh	r0, [r1, #24]
  403038:	4618      	mov	r0, r3
  40303a:	683b      	ldr	r3, [r7, #0]
  40303c:	0e1b      	lsrs	r3, r3, #24
  40303e:	b2d9      	uxtb	r1, r3
  403040:	1813      	adds	r3, r2, r0
  403042:	460a      	mov	r2, r1
  403044:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  403048:	687b      	ldr	r3, [r7, #4]
  40304a:	695a      	ldr	r2, [r3, #20]
  40304c:	687b      	ldr	r3, [r7, #4]
  40304e:	8b1b      	ldrh	r3, [r3, #24]
  403050:	1c59      	adds	r1, r3, #1
  403052:	b288      	uxth	r0, r1
  403054:	6879      	ldr	r1, [r7, #4]
  403056:	8308      	strh	r0, [r1, #24]
  403058:	4618      	mov	r0, r3
  40305a:	683b      	ldr	r3, [r7, #0]
  40305c:	0c1b      	lsrs	r3, r3, #16
  40305e:	b2d9      	uxtb	r1, r3
  403060:	1813      	adds	r3, r2, r0
  403062:	460a      	mov	r2, r1
  403064:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  403068:	687b      	ldr	r3, [r7, #4]
  40306a:	695a      	ldr	r2, [r3, #20]
  40306c:	687b      	ldr	r3, [r7, #4]
  40306e:	8b1b      	ldrh	r3, [r3, #24]
  403070:	1c59      	adds	r1, r3, #1
  403072:	b288      	uxth	r0, r1
  403074:	6879      	ldr	r1, [r7, #4]
  403076:	8308      	strh	r0, [r1, #24]
  403078:	4618      	mov	r0, r3
  40307a:	683b      	ldr	r3, [r7, #0]
  40307c:	0a1b      	lsrs	r3, r3, #8
  40307e:	b2d9      	uxtb	r1, r3
  403080:	1813      	adds	r3, r2, r0
  403082:	460a      	mov	r2, r1
  403084:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  403088:	687b      	ldr	r3, [r7, #4]
  40308a:	695a      	ldr	r2, [r3, #20]
  40308c:	687b      	ldr	r3, [r7, #4]
  40308e:	8b1b      	ldrh	r3, [r3, #24]
  403090:	1c59      	adds	r1, r3, #1
  403092:	b288      	uxth	r0, r1
  403094:	6879      	ldr	r1, [r7, #4]
  403096:	8308      	strh	r0, [r1, #24]
  403098:	6839      	ldr	r1, [r7, #0]
  40309a:	b2c9      	uxtb	r1, r1
  40309c:	4413      	add	r3, r2
  40309e:	460a      	mov	r2, r1
  4030a0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
  4030a4:	bf00      	nop
  4030a6:	370c      	adds	r7, #12
  4030a8:	46bd      	mov	sp, r7
  4030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030ae:	4770      	bx	lr

004030b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  4030b0:	b590      	push	{r4, r7, lr}
  4030b2:	b08f      	sub	sp, #60	; 0x3c
  4030b4:	af00      	add	r7, sp, #0
  4030b6:	6078      	str	r0, [r7, #4]
  4030b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  4030ba:	2300      	movs	r3, #0
  4030bc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
  4030be:	2300      	movs	r3, #0
  4030c0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  4030c2:	220a      	movs	r2, #10
  4030c4:	2100      	movs	r1, #0
  4030c6:	48a8      	ldr	r0, [pc, #672]	; (403368 <dhcp_parse_reply+0x2b8>)
  4030c8:	4ba8      	ldr	r3, [pc, #672]	; (40336c <dhcp_parse_reply+0x2bc>)
  4030ca:	4798      	blx	r3
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  4030cc:	683b      	ldr	r3, [r7, #0]
  4030ce:	895b      	ldrh	r3, [r3, #10]
  4030d0:	2b2b      	cmp	r3, #43	; 0x2b
  4030d2:	d802      	bhi.n	4030da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
  4030d4:	f06f 0301 	mvn.w	r3, #1
  4030d8:	e1ed      	b.n	4034b6 <dhcp_parse_reply+0x406>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  4030da:	683b      	ldr	r3, [r7, #0]
  4030dc:	685a      	ldr	r2, [r3, #4]
  4030de:	687b      	ldr	r3, [r7, #4]
  4030e0:	609a      	str	r2, [r3, #8]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  4030e2:	23f0      	movs	r3, #240	; 0xf0
  4030e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  4030e6:	683b      	ldr	r3, [r7, #0]
  4030e8:	891b      	ldrh	r3, [r3, #8]
  4030ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
  4030ec:	683b      	ldr	r3, [r7, #0]
  4030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while((q != NULL) && (options_idx >= q->len)) {
  4030f0:	e00c      	b.n	40310c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
  4030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4030f4:	895b      	ldrh	r3, [r3, #10]
  4030f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  4030f8:	1ad3      	subs	r3, r2, r3
  4030fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
  4030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4030fe:	895b      	ldrh	r3, [r3, #10]
  403100:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  403102:	1ad3      	subs	r3, r2, r3
  403104:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
  403106:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403108:	681b      	ldr	r3, [r3, #0]
  40310a:	62bb      	str	r3, [r7, #40]	; 0x28
  while((q != NULL) && (options_idx >= q->len)) {
  40310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40310e:	2b00      	cmp	r3, #0
  403110:	d004      	beq.n	40311c <dhcp_parse_reply+0x6c>
  403112:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403114:	895b      	ldrh	r3, [r3, #10]
  403116:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  403118:	429a      	cmp	r2, r3
  40311a:	d2ea      	bcs.n	4030f2 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
  40311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40311e:	2b00      	cmp	r3, #0
  403120:	d102      	bne.n	403128 <dhcp_parse_reply+0x78>
    return ERR_BUF;
  403122:	f06f 0301 	mvn.w	r3, #1
  403126:	e1c6      	b.n	4034b6 <dhcp_parse_reply+0x406>
  }
  offset = options_idx;
  403128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  40312a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
  40312c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40312e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
  403130:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403132:	685b      	ldr	r3, [r3, #4]
  403134:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  403136:	e17e      	b.n	403436 <dhcp_parse_reply+0x386>
    u8_t op = options[offset];
  403138:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40313a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  40313c:	4413      	add	r3, r2
  40313e:	781b      	ldrb	r3, [r3, #0]
  403140:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
  403142:	2300      	movs	r3, #0
  403144:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
  403146:	f04f 33ff 	mov.w	r3, #4294967295
  40314a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
  40314c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40314e:	3302      	adds	r3, #2
  403150:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if (offset + 1 < q->len) {
  403152:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  403154:	3301      	adds	r3, #1
  403156:	6aba      	ldr	r2, [r7, #40]	; 0x28
  403158:	8952      	ldrh	r2, [r2, #10]
  40315a:	4293      	cmp	r3, r2
  40315c:	da06      	bge.n	40316c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
  40315e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  403160:	3301      	adds	r3, #1
  403162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  403164:	4413      	add	r3, r2
  403166:	781b      	ldrb	r3, [r3, #0]
  403168:	77fb      	strb	r3, [r7, #31]
  40316a:	e00a      	b.n	403182 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  40316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40316e:	681b      	ldr	r3, [r3, #0]
  403170:	2b00      	cmp	r3, #0
  403172:	d004      	beq.n	40317e <dhcp_parse_reply+0xce>
  403174:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403176:	681b      	ldr	r3, [r3, #0]
  403178:	685b      	ldr	r3, [r3, #4]
  40317a:	781b      	ldrb	r3, [r3, #0]
  40317c:	e000      	b.n	403180 <dhcp_parse_reply+0xd0>
  40317e:	2300      	movs	r3, #0
  403180:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  403182:	7ffb      	ldrb	r3, [r7, #31]
  403184:	77bb      	strb	r3, [r7, #30]
    switch(op) {
  403186:	7d7b      	ldrb	r3, [r7, #21]
  403188:	2b3b      	cmp	r3, #59	; 0x3b
  40318a:	f200 80d2 	bhi.w	403332 <dhcp_parse_reply+0x282>
  40318e:	a201      	add	r2, pc, #4	; (adr r2, 403194 <dhcp_parse_reply+0xe4>)
  403190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403194:	00403285 	.word	0x00403285
  403198:	00403295 	.word	0x00403295
  40319c:	00403333 	.word	0x00403333
  4031a0:	004032a3 	.word	0x004032a3
  4031a4:	00403333 	.word	0x00403333
  4031a8:	00403333 	.word	0x00403333
  4031ac:	004032b7 	.word	0x004032b7
  4031b0:	00403333 	.word	0x00403333
  4031b4:	00403333 	.word	0x00403333
  4031b8:	00403333 	.word	0x00403333
  4031bc:	00403333 	.word	0x00403333
  4031c0:	00403333 	.word	0x00403333
  4031c4:	00403333 	.word	0x00403333
  4031c8:	00403333 	.word	0x00403333
  4031cc:	00403333 	.word	0x00403333
  4031d0:	00403333 	.word	0x00403333
  4031d4:	00403333 	.word	0x00403333
  4031d8:	00403333 	.word	0x00403333
  4031dc:	00403333 	.word	0x00403333
  4031e0:	00403333 	.word	0x00403333
  4031e4:	00403333 	.word	0x00403333
  4031e8:	00403333 	.word	0x00403333
  4031ec:	00403333 	.word	0x00403333
  4031f0:	00403333 	.word	0x00403333
  4031f4:	00403333 	.word	0x00403333
  4031f8:	00403333 	.word	0x00403333
  4031fc:	00403333 	.word	0x00403333
  403200:	00403333 	.word	0x00403333
  403204:	00403333 	.word	0x00403333
  403208:	00403333 	.word	0x00403333
  40320c:	00403333 	.word	0x00403333
  403210:	00403333 	.word	0x00403333
  403214:	00403333 	.word	0x00403333
  403218:	00403333 	.word	0x00403333
  40321c:	00403333 	.word	0x00403333
  403220:	00403333 	.word	0x00403333
  403224:	00403333 	.word	0x00403333
  403228:	00403333 	.word	0x00403333
  40322c:	00403333 	.word	0x00403333
  403230:	00403333 	.word	0x00403333
  403234:	00403333 	.word	0x00403333
  403238:	00403333 	.word	0x00403333
  40323c:	00403333 	.word	0x00403333
  403240:	00403333 	.word	0x00403333
  403244:	00403333 	.word	0x00403333
  403248:	00403333 	.word	0x00403333
  40324c:	00403333 	.word	0x00403333
  403250:	00403333 	.word	0x00403333
  403254:	00403333 	.word	0x00403333
  403258:	00403333 	.word	0x00403333
  40325c:	00403333 	.word	0x00403333
  403260:	004032df 	.word	0x004032df
  403264:	004032ed 	.word	0x004032ed
  403268:	004032fb 	.word	0x004032fb
  40326c:	00403309 	.word	0x00403309
  403270:	00403333 	.word	0x00403333
  403274:	00403333 	.word	0x00403333
  403278:	00403333 	.word	0x00403333
  40327c:	00403317 	.word	0x00403317
  403280:	00403325 	.word	0x00403325
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  403284:	2300      	movs	r3, #0
  403286:	77fb      	strb	r3, [r7, #31]
  403288:	7ffb      	ldrb	r3, [r7, #31]
  40328a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
  40328c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40328e:	3b01      	subs	r3, #1
  403290:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
  403292:	e051      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403294:	7ffb      	ldrb	r3, [r7, #31]
  403296:	2b04      	cmp	r3, #4
  403298:	d000      	beq.n	40329c <dhcp_parse_reply+0x1ec>
  40329a:	e7fe      	b.n	40329a <dhcp_parse_reply+0x1ea>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  40329c:	2306      	movs	r3, #6
  40329e:	61bb      	str	r3, [r7, #24]
        break;
  4032a0:	e04a      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  4032a2:	2304      	movs	r3, #4
  4032a4:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  4032a6:	7ffa      	ldrb	r2, [r7, #31]
  4032a8:	7fbb      	ldrb	r3, [r7, #30]
  4032aa:	429a      	cmp	r2, r3
  4032ac:	d200      	bcs.n	4032b0 <dhcp_parse_reply+0x200>
  4032ae:	e7fe      	b.n	4032ae <dhcp_parse_reply+0x1fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  4032b0:	2307      	movs	r3, #7
  4032b2:	61bb      	str	r3, [r7, #24]
        break;
  4032b4:	e040      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
  4032b6:	7ffb      	ldrb	r3, [r7, #31]
  4032b8:	f003 0303 	and.w	r3, r3, #3
  4032bc:	b2db      	uxtb	r3, r3
  4032be:	2b00      	cmp	r3, #0
  4032c0:	d000      	beq.n	4032c4 <dhcp_parse_reply+0x214>
  4032c2:	e7fe      	b.n	4032c2 <dhcp_parse_reply+0x212>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  4032c4:	7ffb      	ldrb	r3, [r7, #31]
  4032c6:	2b08      	cmp	r3, #8
  4032c8:	bf28      	it	cs
  4032ca:	2308      	movcs	r3, #8
  4032cc:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  4032ce:	7ffa      	ldrb	r2, [r7, #31]
  4032d0:	7fbb      	ldrb	r3, [r7, #30]
  4032d2:	429a      	cmp	r2, r3
  4032d4:	d200      	bcs.n	4032d8 <dhcp_parse_reply+0x228>
  4032d6:	e7fe      	b.n	4032d6 <dhcp_parse_reply+0x226>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  4032d8:	2308      	movs	r3, #8
  4032da:	61bb      	str	r3, [r7, #24]
        break;
  4032dc:	e02c      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  4032de:	7ffb      	ldrb	r3, [r7, #31]
  4032e0:	2b04      	cmp	r3, #4
  4032e2:	d000      	beq.n	4032e6 <dhcp_parse_reply+0x236>
  4032e4:	e7fe      	b.n	4032e4 <dhcp_parse_reply+0x234>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  4032e6:	2303      	movs	r3, #3
  4032e8:	61bb      	str	r3, [r7, #24]
        break;
  4032ea:	e025      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  4032ec:	7ffb      	ldrb	r3, [r7, #31]
  4032ee:	2b01      	cmp	r3, #1
  4032f0:	d000      	beq.n	4032f4 <dhcp_parse_reply+0x244>
  4032f2:	e7fe      	b.n	4032f2 <dhcp_parse_reply+0x242>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  4032f4:	2300      	movs	r3, #0
  4032f6:	61bb      	str	r3, [r7, #24]
        break;
  4032f8:	e01e      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  4032fa:	7ffb      	ldrb	r3, [r7, #31]
  4032fc:	2b01      	cmp	r3, #1
  4032fe:	d000      	beq.n	403302 <dhcp_parse_reply+0x252>
  403300:	e7fe      	b.n	403300 <dhcp_parse_reply+0x250>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  403302:	2301      	movs	r3, #1
  403304:	61bb      	str	r3, [r7, #24]
        break;
  403306:	e017      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403308:	7ffb      	ldrb	r3, [r7, #31]
  40330a:	2b04      	cmp	r3, #4
  40330c:	d000      	beq.n	403310 <dhcp_parse_reply+0x260>
  40330e:	e7fe      	b.n	40330e <dhcp_parse_reply+0x25e>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  403310:	2302      	movs	r3, #2
  403312:	61bb      	str	r3, [r7, #24]
        break;
  403314:	e010      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403316:	7ffb      	ldrb	r3, [r7, #31]
  403318:	2b04      	cmp	r3, #4
  40331a:	d000      	beq.n	40331e <dhcp_parse_reply+0x26e>
  40331c:	e7fe      	b.n	40331c <dhcp_parse_reply+0x26c>
        decode_idx = DHCP_OPTION_IDX_T1;
  40331e:	2304      	movs	r3, #4
  403320:	61bb      	str	r3, [r7, #24]
        break;
  403322:	e009      	b.n	403338 <dhcp_parse_reply+0x288>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  403324:	7ffb      	ldrb	r3, [r7, #31]
  403326:	2b04      	cmp	r3, #4
  403328:	d000      	beq.n	40332c <dhcp_parse_reply+0x27c>
  40332a:	e7fe      	b.n	40332a <dhcp_parse_reply+0x27a>
        decode_idx = DHCP_OPTION_IDX_T2;
  40332c:	2305      	movs	r3, #5
  40332e:	61bb      	str	r3, [r7, #24]
        break;
  403330:	e002      	b.n	403338 <dhcp_parse_reply+0x288>
      default:
        decode_len = 0;
  403332:	2300      	movs	r3, #0
  403334:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
        break;
  403336:	bf00      	nop
    }
    offset += len + 2;
  403338:	7ffb      	ldrb	r3, [r7, #31]
  40333a:	b29a      	uxth	r2, r3
  40333c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40333e:	4413      	add	r3, r2
  403340:	b29b      	uxth	r3, r3
  403342:	3302      	adds	r3, #2
  403344:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
  403346:	7fbb      	ldrb	r3, [r7, #30]
  403348:	2b00      	cmp	r3, #0
  40334a:	d058      	beq.n	4033fe <dhcp_parse_reply+0x34e>
      u32_t value = 0;
  40334c:	2300      	movs	r3, #0
  40334e:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
      if (!dhcp_option_given(dhcp, decode_idx)) {
  403350:	4a05      	ldr	r2, [pc, #20]	; (403368 <dhcp_parse_reply+0x2b8>)
  403352:	69bb      	ldr	r3, [r7, #24]
  403354:	4413      	add	r3, r2
  403356:	781b      	ldrb	r3, [r3, #0]
  403358:	2b00      	cmp	r3, #0
  40335a:	d150      	bne.n	4033fe <dhcp_parse_reply+0x34e>
        copy_len = LWIP_MIN(decode_len, 4);
  40335c:	7fbb      	ldrb	r3, [r7, #30]
  40335e:	2b03      	cmp	r3, #3
  403360:	d806      	bhi.n	403370 <dhcp_parse_reply+0x2c0>
  403362:	7fbb      	ldrb	r3, [r7, #30]
  403364:	b29b      	uxth	r3, r3
  403366:	e004      	b.n	403372 <dhcp_parse_reply+0x2c2>
  403368:	20403938 	.word	0x20403938
  40336c:	0040cead 	.word	0x0040cead
  403370:	2304      	movs	r3, #4
  403372:	827b      	strh	r3, [r7, #18]
        pbuf_copy_partial(q, &value, copy_len, val_offset);
  403374:	8afb      	ldrh	r3, [r7, #22]
  403376:	8a7a      	ldrh	r2, [r7, #18]
  403378:	f107 0108 	add.w	r1, r7, #8
  40337c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  40337e:	4c50      	ldr	r4, [pc, #320]	; (4034c0 <dhcp_parse_reply+0x410>)
  403380:	47a0      	blx	r4
        if (decode_len > 4) {
  403382:	7fbb      	ldrb	r3, [r7, #30]
  403384:	2b04      	cmp	r3, #4
  403386:	d91e      	bls.n	4033c6 <dhcp_parse_reply+0x316>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  403388:	7fbb      	ldrb	r3, [r7, #30]
  40338a:	f003 0303 	and.w	r3, r3, #3
  40338e:	b2db      	uxtb	r3, r3
  403390:	2b00      	cmp	r3, #0
  403392:	d000      	beq.n	403396 <dhcp_parse_reply+0x2e6>
  403394:	e7fe      	b.n	403394 <dhcp_parse_reply+0x2e4>
          dhcp_got_option(dhcp, decode_idx);
  403396:	4a4b      	ldr	r2, [pc, #300]	; (4034c4 <dhcp_parse_reply+0x414>)
  403398:	69bb      	ldr	r3, [r7, #24]
  40339a:	4413      	add	r3, r2
  40339c:	2201      	movs	r2, #1
  40339e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, htonl(value));
  4033a0:	68bb      	ldr	r3, [r7, #8]
  4033a2:	4618      	mov	r0, r3
  4033a4:	4b48      	ldr	r3, [pc, #288]	; (4034c8 <dhcp_parse_reply+0x418>)
  4033a6:	4798      	blx	r3
  4033a8:	4601      	mov	r1, r0
  4033aa:	4a48      	ldr	r2, [pc, #288]	; (4034cc <dhcp_parse_reply+0x41c>)
  4033ac:	69bb      	ldr	r3, [r7, #24]
  4033ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
  4033b2:	7fbb      	ldrb	r3, [r7, #30]
  4033b4:	3b04      	subs	r3, #4
  4033b6:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
  4033b8:	8afb      	ldrh	r3, [r7, #22]
  4033ba:	3304      	adds	r3, #4
  4033bc:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
  4033be:	69bb      	ldr	r3, [r7, #24]
  4033c0:	3301      	adds	r3, #1
  4033c2:	61bb      	str	r3, [r7, #24]
          goto decode_next;
  4033c4:	e7c4      	b.n	403350 <dhcp_parse_reply+0x2a0>
        } else if (decode_len == 4) {
  4033c6:	7fbb      	ldrb	r3, [r7, #30]
  4033c8:	2b04      	cmp	r3, #4
  4033ca:	d106      	bne.n	4033da <dhcp_parse_reply+0x32a>
          value = ntohl(value);
  4033cc:	68bb      	ldr	r3, [r7, #8]
  4033ce:	4618      	mov	r0, r3
  4033d0:	4b3f      	ldr	r3, [pc, #252]	; (4034d0 <dhcp_parse_reply+0x420>)
  4033d2:	4798      	blx	r3
  4033d4:	4603      	mov	r3, r0
  4033d6:	60bb      	str	r3, [r7, #8]
  4033d8:	e007      	b.n	4033ea <dhcp_parse_reply+0x33a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  4033da:	7fbb      	ldrb	r3, [r7, #30]
  4033dc:	2b01      	cmp	r3, #1
  4033de:	d000      	beq.n	4033e2 <dhcp_parse_reply+0x332>
  4033e0:	e7fe      	b.n	4033e0 <dhcp_parse_reply+0x330>
          value = ((u8_t*)&value)[0];
  4033e2:	f107 0308 	add.w	r3, r7, #8
  4033e6:	781b      	ldrb	r3, [r3, #0]
  4033e8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
  4033ea:	4a36      	ldr	r2, [pc, #216]	; (4034c4 <dhcp_parse_reply+0x414>)
  4033ec:	69bb      	ldr	r3, [r7, #24]
  4033ee:	4413      	add	r3, r2
  4033f0:	2201      	movs	r2, #1
  4033f2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
  4033f4:	68ba      	ldr	r2, [r7, #8]
  4033f6:	4935      	ldr	r1, [pc, #212]	; (4034cc <dhcp_parse_reply+0x41c>)
  4033f8:	69bb      	ldr	r3, [r7, #24]
  4033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
  4033fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403400:	895b      	ldrh	r3, [r3, #10]
  403402:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  403404:	429a      	cmp	r2, r3
  403406:	d316      	bcc.n	403436 <dhcp_parse_reply+0x386>
      offset -= q->len;
  403408:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40340a:	895b      	ldrh	r3, [r3, #10]
  40340c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  40340e:	1ad3      	subs	r3, r2, r3
  403410:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
  403412:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403414:	895b      	ldrh	r3, [r3, #10]
  403416:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
  403418:	1ad3      	subs	r3, r2, r3
  40341a:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
  40341c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  40341e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403420:	429a      	cmp	r2, r3
  403422:	d216      	bcs.n	403452 <dhcp_parse_reply+0x3a2>
  403424:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  403426:	2b00      	cmp	r3, #0
  403428:	d013      	beq.n	403452 <dhcp_parse_reply+0x3a2>
        q = q->next;
  40342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40342c:	681b      	ldr	r3, [r3, #0]
  40342e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ASSERT("next pbuf was null", q);
        options = (u8_t*)q->payload;
  403430:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403432:	685b      	ldr	r3, [r3, #4]
  403434:	637b      	str	r3, [r7, #52]	; 0x34
  while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  403436:	6abb      	ldr	r3, [r7, #40]	; 0x28
  403438:	2b00      	cmp	r3, #0
  40343a:	d00a      	beq.n	403452 <dhcp_parse_reply+0x3a2>
  40343c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
  40343e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
  403440:	4413      	add	r3, r2
  403442:	781b      	ldrb	r3, [r3, #0]
  403444:	2bff      	cmp	r3, #255	; 0xff
  403446:	d004      	beq.n	403452 <dhcp_parse_reply+0x3a2>
  403448:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
  40344a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
  40344c:	429a      	cmp	r2, r3
  40344e:	f4ff ae73 	bcc.w	403138 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  403452:	4b1c      	ldr	r3, [pc, #112]	; (4034c4 <dhcp_parse_reply+0x414>)
  403454:	781b      	ldrb	r3, [r3, #0]
  403456:	2b00      	cmp	r3, #0
  403458:	d018      	beq.n	40348c <dhcp_parse_reply+0x3dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  40345a:	4b1c      	ldr	r3, [pc, #112]	; (4034cc <dhcp_parse_reply+0x41c>)
  40345c:	681b      	ldr	r3, [r3, #0]
  40345e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  403460:	4b18      	ldr	r3, [pc, #96]	; (4034c4 <dhcp_parse_reply+0x414>)
  403462:	2200      	movs	r2, #0
  403464:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
  403466:	68fb      	ldr	r3, [r7, #12]
  403468:	2b01      	cmp	r3, #1
  40346a:	d102      	bne.n	403472 <dhcp_parse_reply+0x3c2>
      parse_file_as_options = 1;
  40346c:	2301      	movs	r3, #1
  40346e:	627b      	str	r3, [r7, #36]	; 0x24
  403470:	e00c      	b.n	40348c <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  403472:	68fb      	ldr	r3, [r7, #12]
  403474:	2b02      	cmp	r3, #2
  403476:	d102      	bne.n	40347e <dhcp_parse_reply+0x3ce>
      parse_sname_as_options = 1;
  403478:	2301      	movs	r3, #1
  40347a:	623b      	str	r3, [r7, #32]
  40347c:	e006      	b.n	40348c <dhcp_parse_reply+0x3dc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  40347e:	68fb      	ldr	r3, [r7, #12]
  403480:	2b03      	cmp	r3, #3
  403482:	d103      	bne.n	40348c <dhcp_parse_reply+0x3dc>
      parse_sname_as_options = 1;
  403484:	2301      	movs	r3, #1
  403486:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
  403488:	2301      	movs	r3, #1
  40348a:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  40348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40348e:	2b00      	cmp	r3, #0
  403490:	d006      	beq.n	4034a0 <dhcp_parse_reply+0x3f0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  403492:	2300      	movs	r3, #0
  403494:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
  403496:	236c      	movs	r3, #108	; 0x6c
  403498:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  40349a:	23ec      	movs	r3, #236	; 0xec
  40349c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  40349e:	e625      	b.n	4030ec <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
  4034a0:	6a3b      	ldr	r3, [r7, #32]
  4034a2:	2b00      	cmp	r3, #0
  4034a4:	d006      	beq.n	4034b4 <dhcp_parse_reply+0x404>
    parse_sname_as_options = 0;
  4034a6:	2300      	movs	r3, #0
  4034a8:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
  4034aa:	232c      	movs	r3, #44	; 0x2c
  4034ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  4034ae:	236c      	movs	r3, #108	; 0x6c
  4034b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
  4034b2:	e61b      	b.n	4030ec <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
  4034b4:	2300      	movs	r3, #0
}
  4034b6:	4618      	mov	r0, r3
  4034b8:	373c      	adds	r7, #60	; 0x3c
  4034ba:	46bd      	mov	sp, r7
  4034bc:	bd90      	pop	{r4, r7, pc}
  4034be:	bf00      	nop
  4034c0:	00405df1 	.word	0x00405df1
  4034c4:	20403938 	.word	0x20403938
  4034c8:	00401fe5 	.word	0x00401fe5
  4034cc:	20403944 	.word	0x20403944
  4034d0:	00402019 	.word	0x00402019

004034d4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
{
  4034d4:	b580      	push	{r7, lr}
  4034d6:	b08a      	sub	sp, #40	; 0x28
  4034d8:	af00      	add	r7, sp, #0
  4034da:	60f8      	str	r0, [r7, #12]
  4034dc:	60b9      	str	r1, [r7, #8]
  4034de:	607a      	str	r2, [r7, #4]
  4034e0:	603b      	str	r3, [r7, #0]
  struct netif *netif = (struct netif *)arg;
  4034e2:	68fb      	ldr	r3, [r7, #12]
  4034e4:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif->dhcp;
  4034e6:	6a3b      	ldr	r3, [r7, #32]
  4034e8:	6a1b      	ldr	r3, [r3, #32]
  4034ea:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  4034ec:	687b      	ldr	r3, [r7, #4]
  4034ee:	685b      	ldr	r3, [r3, #4]
  4034f0:	61bb      	str	r3, [r7, #24]
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);

  if (p->len < DHCP_MIN_REPLY_LEN) {
  4034f2:	687b      	ldr	r3, [r7, #4]
  4034f4:	895b      	ldrh	r3, [r3, #10]
  4034f6:	2b2b      	cmp	r3, #43	; 0x2b
  4034f8:	d97b      	bls.n	4035f2 <dhcp_recv+0x11e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  4034fa:	69bb      	ldr	r3, [r7, #24]
  4034fc:	781b      	ldrb	r3, [r3, #0]
  4034fe:	2b02      	cmp	r3, #2
  403500:	d179      	bne.n	4035f6 <dhcp_recv+0x122>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len; i++) {
  403502:	2300      	movs	r3, #0
  403504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  403508:	e011      	b.n	40352e <dhcp_recv+0x5a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  40350a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40350e:	6a3a      	ldr	r2, [r7, #32]
  403510:	4413      	add	r3, r2
  403512:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
  403516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40351a:	69b9      	ldr	r1, [r7, #24]
  40351c:	440b      	add	r3, r1
  40351e:	7f1b      	ldrb	r3, [r3, #28]
  403520:	429a      	cmp	r2, r3
  403522:	d16a      	bne.n	4035fa <dhcp_recv+0x126>
  for (i = 0; i < netif->hwaddr_len; i++) {
  403524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  403528:	3301      	adds	r3, #1
  40352a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40352e:	6a3b      	ldr	r3, [r7, #32]
  403530:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
  403534:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
  403538:	429a      	cmp	r2, r3
  40353a:	d3e6      	bcc.n	40350a <dhcp_recv+0x36>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (ntohl(reply_msg->xid) != dhcp->xid) {
  40353c:	69bb      	ldr	r3, [r7, #24]
  40353e:	685b      	ldr	r3, [r3, #4]
  403540:	4618      	mov	r0, r3
  403542:	4b36      	ldr	r3, [pc, #216]	; (40361c <dhcp_recv+0x148>)
  403544:	4798      	blx	r3
  403546:	4602      	mov	r2, r0
  403548:	69fb      	ldr	r3, [r7, #28]
  40354a:	681b      	ldr	r3, [r3, #0]
  40354c:	429a      	cmp	r2, r3
  40354e:	d156      	bne.n	4035fe <dhcp_recv+0x12a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  403550:	6879      	ldr	r1, [r7, #4]
  403552:	69f8      	ldr	r0, [r7, #28]
  403554:	4b32      	ldr	r3, [pc, #200]	; (403620 <dhcp_recv+0x14c>)
  403556:	4798      	blx	r3
  403558:	4603      	mov	r3, r0
  40355a:	2b00      	cmp	r3, #0
  40355c:	d151      	bne.n	403602 <dhcp_recv+0x12e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  40355e:	4b31      	ldr	r3, [pc, #196]	; (403624 <dhcp_recv+0x150>)
  403560:	785b      	ldrb	r3, [r3, #1]
  403562:	2b00      	cmp	r3, #0
  403564:	d04f      	beq.n	403606 <dhcp_recv+0x132>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  403566:	4b30      	ldr	r3, [pc, #192]	; (403628 <dhcp_recv+0x154>)
  403568:	685b      	ldr	r3, [r3, #4]
  40356a:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  40356c:	7dfb      	ldrb	r3, [r7, #23]
  40356e:	2b05      	cmp	r3, #5
  403570:	d11a      	bne.n	4035a8 <dhcp_recv+0xd4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_REQUESTING) {
  403572:	69fb      	ldr	r3, [r7, #28]
  403574:	7b1b      	ldrb	r3, [r3, #12]
  403576:	2b01      	cmp	r3, #1
  403578:	d106      	bne.n	403588 <dhcp_recv+0xb4>
      dhcp_handle_ack(netif);
  40357a:	6a38      	ldr	r0, [r7, #32]
  40357c:	4b2b      	ldr	r3, [pc, #172]	; (40362c <dhcp_recv+0x158>)
  40357e:	4798      	blx	r3
#if DHCP_DOES_ARP_CHECK
      /* check if the acknowledged lease address is already in use */
      dhcp_check(netif);
  403580:	6a38      	ldr	r0, [r7, #32]
  403582:	4b2b      	ldr	r3, [pc, #172]	; (403630 <dhcp_recv+0x15c>)
  403584:	4798      	blx	r3
  403586:	e03f      	b.n	403608 <dhcp_recv+0x134>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
  403588:	69fb      	ldr	r3, [r7, #28]
  40358a:	7b1b      	ldrb	r3, [r3, #12]
  40358c:	2b03      	cmp	r3, #3
  40358e:	d007      	beq.n	4035a0 <dhcp_recv+0xcc>
  403590:	69fb      	ldr	r3, [r7, #28]
  403592:	7b1b      	ldrb	r3, [r3, #12]
  403594:	2b04      	cmp	r3, #4
  403596:	d003      	beq.n	4035a0 <dhcp_recv+0xcc>
  403598:	69fb      	ldr	r3, [r7, #28]
  40359a:	7b1b      	ldrb	r3, [r3, #12]
  40359c:	2b05      	cmp	r3, #5
  40359e:	d133      	bne.n	403608 <dhcp_recv+0x134>
      dhcp_bind(netif);
  4035a0:	6a38      	ldr	r0, [r7, #32]
  4035a2:	4b24      	ldr	r3, [pc, #144]	; (403634 <dhcp_recv+0x160>)
  4035a4:	4798      	blx	r3
  4035a6:	e02f      	b.n	403608 <dhcp_recv+0x134>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  4035a8:	7dfb      	ldrb	r3, [r7, #23]
  4035aa:	2b06      	cmp	r3, #6
  4035ac:	d113      	bne.n	4035d6 <dhcp_recv+0x102>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  4035ae:	69fb      	ldr	r3, [r7, #28]
  4035b0:	7b1b      	ldrb	r3, [r3, #12]
  else if ((msg_type == DHCP_NAK) &&
  4035b2:	2b03      	cmp	r3, #3
  4035b4:	d00b      	beq.n	4035ce <dhcp_recv+0xfa>
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  4035b6:	69fb      	ldr	r3, [r7, #28]
  4035b8:	7b1b      	ldrb	r3, [r3, #12]
  4035ba:	2b01      	cmp	r3, #1
  4035bc:	d007      	beq.n	4035ce <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  4035be:	69fb      	ldr	r3, [r7, #28]
  4035c0:	7b1b      	ldrb	r3, [r3, #12]
    ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
  4035c2:	2b04      	cmp	r3, #4
  4035c4:	d003      	beq.n	4035ce <dhcp_recv+0xfa>
     (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
  4035c6:	69fb      	ldr	r3, [r7, #28]
  4035c8:	7b1b      	ldrb	r3, [r3, #12]
  4035ca:	2b05      	cmp	r3, #5
  4035cc:	d103      	bne.n	4035d6 <dhcp_recv+0x102>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  4035ce:	6a38      	ldr	r0, [r7, #32]
  4035d0:	4b19      	ldr	r3, [pc, #100]	; (403638 <dhcp_recv+0x164>)
  4035d2:	4798      	blx	r3
  4035d4:	e018      	b.n	403608 <dhcp_recv+0x134>
  }
  /* received a DHCP_OFFER in DHCP_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
  4035d6:	7dfb      	ldrb	r3, [r7, #23]
  4035d8:	2b02      	cmp	r3, #2
  4035da:	d115      	bne.n	403608 <dhcp_recv+0x134>
  4035dc:	69fb      	ldr	r3, [r7, #28]
  4035de:	7b1b      	ldrb	r3, [r3, #12]
  4035e0:	2b06      	cmp	r3, #6
  4035e2:	d111      	bne.n	403608 <dhcp_recv+0x134>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
    dhcp->request_timeout = 0;
  4035e4:	69fb      	ldr	r3, [r7, #28]
  4035e6:	2200      	movs	r2, #0
  4035e8:	835a      	strh	r2, [r3, #26]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  4035ea:	6a38      	ldr	r0, [r7, #32]
  4035ec:	4b13      	ldr	r3, [pc, #76]	; (40363c <dhcp_recv+0x168>)
  4035ee:	4798      	blx	r3
  4035f0:	e00a      	b.n	403608 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  4035f2:	bf00      	nop
  4035f4:	e008      	b.n	403608 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  4035f6:	bf00      	nop
  4035f8:	e006      	b.n	403608 <dhcp_recv+0x134>
      goto free_pbuf_and_return;
  4035fa:	bf00      	nop
  4035fc:	e004      	b.n	403608 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  4035fe:	bf00      	nop
  403600:	e002      	b.n	403608 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403602:	bf00      	nop
  403604:	e000      	b.n	403608 <dhcp_recv+0x134>
    goto free_pbuf_and_return;
  403606:	bf00      	nop
  }
free_pbuf_and_return:
  dhcp->msg_in = NULL;
  403608:	69fb      	ldr	r3, [r7, #28]
  40360a:	2200      	movs	r2, #0
  40360c:	609a      	str	r2, [r3, #8]
  pbuf_free(p);
  40360e:	6878      	ldr	r0, [r7, #4]
  403610:	4b0b      	ldr	r3, [pc, #44]	; (403640 <dhcp_recv+0x16c>)
  403612:	4798      	blx	r3
}
  403614:	bf00      	nop
  403616:	3728      	adds	r7, #40	; 0x28
  403618:	46bd      	mov	sp, r7
  40361a:	bd80      	pop	{r7, pc}
  40361c:	00402019 	.word	0x00402019
  403620:	004030b1 	.word	0x004030b1
  403624:	20403938 	.word	0x20403938
  403628:	20403944 	.word	0x20403944
  40362c:	004024d1 	.word	0x004024d1
  403630:	00402095 	.word	0x00402095
  403634:	00402925 	.word	0x00402925
  403638:	00402035 	.word	0x00402035
  40363c:	004020fd 	.word	0x004020fd
  403640:	00405b81 	.word	0x00405b81

00403644 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  403644:	b590      	push	{r4, r7, lr}
  403646:	b087      	sub	sp, #28
  403648:	af00      	add	r7, sp, #0
  40364a:	60f8      	str	r0, [r7, #12]
  40364c:	60b9      	str	r1, [r7, #8]
  40364e:	4613      	mov	r3, r2
  403650:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  403652:	68fb      	ldr	r3, [r7, #12]
  403654:	2b00      	cmp	r3, #0
  403656:	d100      	bne.n	40365a <dhcp_create_msg+0x16>
  403658:	e7fe      	b.n	403658 <dhcp_create_msg+0x14>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  40365a:	68bb      	ldr	r3, [r7, #8]
  40365c:	2b00      	cmp	r3, #0
  40365e:	d100      	bne.n	403662 <dhcp_create_msg+0x1e>
  403660:	e7fe      	b.n	403660 <dhcp_create_msg+0x1c>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  403662:	2200      	movs	r2, #0
  403664:	f44f 719a 	mov.w	r1, #308	; 0x134
  403668:	2000      	movs	r0, #0
  40366a:	4b7d      	ldr	r3, [pc, #500]	; (403860 <dhcp_create_msg+0x21c>)
  40366c:	4798      	blx	r3
  40366e:	4602      	mov	r2, r0
  403670:	68bb      	ldr	r3, [r7, #8]
  403672:	611a      	str	r2, [r3, #16]
  if (dhcp->p_out == NULL) {
  403674:	68bb      	ldr	r3, [r7, #8]
  403676:	691b      	ldr	r3, [r3, #16]
  403678:	2b00      	cmp	r3, #0
  40367a:	d102      	bne.n	403682 <dhcp_create_msg+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  40367c:	f04f 33ff 	mov.w	r3, #4294967295
  403680:	e0e9      	b.n	403856 <dhcp_create_msg+0x212>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* reuse transaction identifier in retransmissions */
  if (dhcp->tries == 0) {
  403682:	68bb      	ldr	r3, [r7, #8]
  403684:	7b5b      	ldrb	r3, [r3, #13]
  403686:	2b00      	cmp	r3, #0
  403688:	d104      	bne.n	403694 <dhcp_create_msg+0x50>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
    xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    xid++;
  40368a:	4b76      	ldr	r3, [pc, #472]	; (403864 <dhcp_create_msg+0x220>)
  40368c:	681b      	ldr	r3, [r3, #0]
  40368e:	3301      	adds	r3, #1
  403690:	4a74      	ldr	r2, [pc, #464]	; (403864 <dhcp_create_msg+0x220>)
  403692:	6013      	str	r3, [r2, #0]
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
  }
  dhcp->xid = xid;
  403694:	4b73      	ldr	r3, [pc, #460]	; (403864 <dhcp_create_msg+0x220>)
  403696:	681a      	ldr	r2, [r3, #0]
  403698:	68bb      	ldr	r3, [r7, #8]
  40369a:	601a      	str	r2, [r3, #0]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  40369c:	68bb      	ldr	r3, [r7, #8]
  40369e:	691b      	ldr	r3, [r3, #16]
  4036a0:	685a      	ldr	r2, [r3, #4]
  4036a2:	68bb      	ldr	r3, [r7, #8]
  4036a4:	615a      	str	r2, [r3, #20]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  4036a6:	68bb      	ldr	r3, [r7, #8]
  4036a8:	695b      	ldr	r3, [r3, #20]
  4036aa:	2201      	movs	r2, #1
  4036ac:	701a      	strb	r2, [r3, #0]
  /* TODO: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  4036ae:	68bb      	ldr	r3, [r7, #8]
  4036b0:	695b      	ldr	r3, [r3, #20]
  4036b2:	2201      	movs	r2, #1
  4036b4:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  4036b6:	68bb      	ldr	r3, [r7, #8]
  4036b8:	695b      	ldr	r3, [r3, #20]
  4036ba:	68fa      	ldr	r2, [r7, #12]
  4036bc:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
  4036c0:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  4036c2:	68bb      	ldr	r3, [r7, #8]
  4036c4:	695b      	ldr	r3, [r3, #20]
  4036c6:	2200      	movs	r2, #0
  4036c8:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = htonl(dhcp->xid);
  4036ca:	68bb      	ldr	r3, [r7, #8]
  4036cc:	695c      	ldr	r4, [r3, #20]
  4036ce:	68bb      	ldr	r3, [r7, #8]
  4036d0:	681b      	ldr	r3, [r3, #0]
  4036d2:	4618      	mov	r0, r3
  4036d4:	4b64      	ldr	r3, [pc, #400]	; (403868 <dhcp_create_msg+0x224>)
  4036d6:	4798      	blx	r3
  4036d8:	4603      	mov	r3, r0
  4036da:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  4036dc:	68bb      	ldr	r3, [r7, #8]
  4036de:	695b      	ldr	r3, [r3, #20]
  4036e0:	2200      	movs	r2, #0
  4036e2:	721a      	strb	r2, [r3, #8]
  4036e4:	2200      	movs	r2, #0
  4036e6:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  4036e8:	68bb      	ldr	r3, [r7, #8]
  4036ea:	695b      	ldr	r3, [r3, #20]
  4036ec:	2200      	movs	r2, #0
  4036ee:	729a      	strb	r2, [r3, #10]
  4036f0:	2200      	movs	r2, #0
  4036f2:	72da      	strb	r2, [r3, #11]
  ip_addr_set_zero(&dhcp->msg_out->ciaddr);
  4036f4:	68bb      	ldr	r3, [r7, #8]
  4036f6:	695b      	ldr	r3, [r3, #20]
  4036f8:	2200      	movs	r2, #0
  4036fa:	731a      	strb	r2, [r3, #12]
  4036fc:	2200      	movs	r2, #0
  4036fe:	735a      	strb	r2, [r3, #13]
  403700:	2200      	movs	r2, #0
  403702:	739a      	strb	r2, [r3, #14]
  403704:	2200      	movs	r2, #0
  403706:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
  403708:	79fb      	ldrb	r3, [r7, #7]
  40370a:	2b08      	cmp	r3, #8
  40370c:	d00d      	beq.n	40372a <dhcp_create_msg+0xe6>
  40370e:	79fb      	ldrb	r3, [r7, #7]
  403710:	2b04      	cmp	r3, #4
  403712:	d00a      	beq.n	40372a <dhcp_create_msg+0xe6>
  403714:	79fb      	ldrb	r3, [r7, #7]
  403716:	2b03      	cmp	r3, #3
  403718:	d10c      	bne.n	403734 <dhcp_create_msg+0xf0>
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  40371a:	68bb      	ldr	r3, [r7, #8]
  40371c:	7b1b      	ldrb	r3, [r3, #12]
      ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
  40371e:	2b05      	cmp	r3, #5
  403720:	d003      	beq.n	40372a <dhcp_create_msg+0xe6>
       ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
  403722:	68bb      	ldr	r3, [r7, #8]
  403724:	7b1b      	ldrb	r3, [r3, #12]
  403726:	2b04      	cmp	r3, #4
  403728:	d104      	bne.n	403734 <dhcp_create_msg+0xf0>
    ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
  40372a:	68bb      	ldr	r3, [r7, #8]
  40372c:	695b      	ldr	r3, [r3, #20]
  40372e:	68fa      	ldr	r2, [r7, #12]
  403730:	6852      	ldr	r2, [r2, #4]
  403732:	60da      	str	r2, [r3, #12]
  }
  ip_addr_set_zero(&dhcp->msg_out->yiaddr);
  403734:	68bb      	ldr	r3, [r7, #8]
  403736:	695b      	ldr	r3, [r3, #20]
  403738:	2200      	movs	r2, #0
  40373a:	741a      	strb	r2, [r3, #16]
  40373c:	2200      	movs	r2, #0
  40373e:	745a      	strb	r2, [r3, #17]
  403740:	2200      	movs	r2, #0
  403742:	749a      	strb	r2, [r3, #18]
  403744:	2200      	movs	r2, #0
  403746:	74da      	strb	r2, [r3, #19]
  ip_addr_set_zero(&dhcp->msg_out->siaddr);
  403748:	68bb      	ldr	r3, [r7, #8]
  40374a:	695b      	ldr	r3, [r3, #20]
  40374c:	2200      	movs	r2, #0
  40374e:	751a      	strb	r2, [r3, #20]
  403750:	2200      	movs	r2, #0
  403752:	755a      	strb	r2, [r3, #21]
  403754:	2200      	movs	r2, #0
  403756:	759a      	strb	r2, [r3, #22]
  403758:	2200      	movs	r2, #0
  40375a:	75da      	strb	r2, [r3, #23]
  ip_addr_set_zero(&dhcp->msg_out->giaddr);
  40375c:	68bb      	ldr	r3, [r7, #8]
  40375e:	695b      	ldr	r3, [r3, #20]
  403760:	2200      	movs	r2, #0
  403762:	761a      	strb	r2, [r3, #24]
  403764:	2200      	movs	r2, #0
  403766:	765a      	strb	r2, [r3, #25]
  403768:	2200      	movs	r2, #0
  40376a:	769a      	strb	r2, [r3, #26]
  40376c:	2200      	movs	r2, #0
  40376e:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  403770:	2300      	movs	r3, #0
  403772:	82fb      	strh	r3, [r7, #22]
  403774:	e016      	b.n	4037a4 <dhcp_create_msg+0x160>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
  403776:	68bb      	ldr	r3, [r7, #8]
  403778:	695a      	ldr	r2, [r3, #20]
  40377a:	8afb      	ldrh	r3, [r7, #22]
  40377c:	68f9      	ldr	r1, [r7, #12]
  40377e:	f891 1026 	ldrb.w	r1, [r1, #38]	; 0x26
  403782:	b289      	uxth	r1, r1
  403784:	8af8      	ldrh	r0, [r7, #22]
  403786:	4288      	cmp	r0, r1
  403788:	d205      	bcs.n	403796 <dhcp_create_msg+0x152>
  40378a:	8af9      	ldrh	r1, [r7, #22]
  40378c:	68f8      	ldr	r0, [r7, #12]
  40378e:	4401      	add	r1, r0
  403790:	f891 1027 	ldrb.w	r1, [r1, #39]	; 0x27
  403794:	e000      	b.n	403798 <dhcp_create_msg+0x154>
  403796:	2100      	movs	r1, #0
  403798:	4413      	add	r3, r2
  40379a:	460a      	mov	r2, r1
  40379c:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  40379e:	8afb      	ldrh	r3, [r7, #22]
  4037a0:	3301      	adds	r3, #1
  4037a2:	82fb      	strh	r3, [r7, #22]
  4037a4:	8afb      	ldrh	r3, [r7, #22]
  4037a6:	2b0f      	cmp	r3, #15
  4037a8:	d9e5      	bls.n	403776 <dhcp_create_msg+0x132>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  4037aa:	2300      	movs	r3, #0
  4037ac:	82fb      	strh	r3, [r7, #22]
  4037ae:	e009      	b.n	4037c4 <dhcp_create_msg+0x180>
    dhcp->msg_out->sname[i] = 0;
  4037b0:	68bb      	ldr	r3, [r7, #8]
  4037b2:	695a      	ldr	r2, [r3, #20]
  4037b4:	8afb      	ldrh	r3, [r7, #22]
  4037b6:	4413      	add	r3, r2
  4037b8:	2200      	movs	r2, #0
  4037ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  4037be:	8afb      	ldrh	r3, [r7, #22]
  4037c0:	3301      	adds	r3, #1
  4037c2:	82fb      	strh	r3, [r7, #22]
  4037c4:	8afb      	ldrh	r3, [r7, #22]
  4037c6:	2b3f      	cmp	r3, #63	; 0x3f
  4037c8:	d9f2      	bls.n	4037b0 <dhcp_create_msg+0x16c>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  4037ca:	2300      	movs	r3, #0
  4037cc:	82fb      	strh	r3, [r7, #22]
  4037ce:	e009      	b.n	4037e4 <dhcp_create_msg+0x1a0>
    dhcp->msg_out->file[i] = 0;
  4037d0:	68bb      	ldr	r3, [r7, #8]
  4037d2:	695a      	ldr	r2, [r3, #20]
  4037d4:	8afb      	ldrh	r3, [r7, #22]
  4037d6:	4413      	add	r3, r2
  4037d8:	2200      	movs	r2, #0
  4037da:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  4037de:	8afb      	ldrh	r3, [r7, #22]
  4037e0:	3301      	adds	r3, #1
  4037e2:	82fb      	strh	r3, [r7, #22]
  4037e4:	8afb      	ldrh	r3, [r7, #22]
  4037e6:	2b7f      	cmp	r3, #127	; 0x7f
  4037e8:	d9f2      	bls.n	4037d0 <dhcp_create_msg+0x18c>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  4037ea:	68bb      	ldr	r3, [r7, #8]
  4037ec:	695b      	ldr	r3, [r3, #20]
  4037ee:	2200      	movs	r2, #0
  4037f0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  4037f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
  4037f8:	2200      	movs	r2, #0
  4037fa:	f062 027d 	orn	r2, r2, #125	; 0x7d
  4037fe:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
  403802:	2200      	movs	r2, #0
  403804:	f042 0253 	orr.w	r2, r2, #83	; 0x53
  403808:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
  40380c:	2200      	movs	r2, #0
  40380e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
  403812:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
  403816:	68bb      	ldr	r3, [r7, #8]
  403818:	2200      	movs	r2, #0
  40381a:	831a      	strh	r2, [r3, #24]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  40381c:	2300      	movs	r3, #0
  40381e:	82fb      	strh	r3, [r7, #22]
  403820:	e00b      	b.n	40383a <dhcp_create_msg+0x1f6>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  403822:	68bb      	ldr	r3, [r7, #8]
  403824:	695a      	ldr	r2, [r3, #20]
  403826:	8afb      	ldrh	r3, [r7, #22]
  403828:	8af9      	ldrh	r1, [r7, #22]
  40382a:	b2c9      	uxtb	r1, r1
  40382c:	4413      	add	r3, r2
  40382e:	460a      	mov	r2, r1
  403830:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  403834:	8afb      	ldrh	r3, [r7, #22]
  403836:	3301      	adds	r3, #1
  403838:	82fb      	strh	r3, [r7, #22]
  40383a:	8afb      	ldrh	r3, [r7, #22]
  40383c:	2b43      	cmp	r3, #67	; 0x43
  40383e:	d9f0      	bls.n	403822 <dhcp_create_msg+0x1de>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  403840:	2201      	movs	r2, #1
  403842:	2135      	movs	r1, #53	; 0x35
  403844:	68b8      	ldr	r0, [r7, #8]
  403846:	4b09      	ldr	r3, [pc, #36]	; (40386c <dhcp_create_msg+0x228>)
  403848:	4798      	blx	r3
  dhcp_option_byte(dhcp, message_type);
  40384a:	79fb      	ldrb	r3, [r7, #7]
  40384c:	4619      	mov	r1, r3
  40384e:	68b8      	ldr	r0, [r7, #8]
  403850:	4b07      	ldr	r3, [pc, #28]	; (403870 <dhcp_create_msg+0x22c>)
  403852:	4798      	blx	r3
  return ERR_OK;
  403854:	2300      	movs	r3, #0
}
  403856:	4618      	mov	r0, r3
  403858:	371c      	adds	r7, #28
  40385a:	46bd      	mov	sp, r7
  40385c:	bd90      	pop	{r4, r7, pc}
  40385e:	bf00      	nop
  403860:	004057dd 	.word	0x004057dd
  403864:	20400008 	.word	0x20400008
  403868:	00401fe5 	.word	0x00401fe5
  40386c:	00402f4d 	.word	0x00402f4d
  403870:	00402f99 	.word	0x00402f99

00403874 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  403874:	b580      	push	{r7, lr}
  403876:	b082      	sub	sp, #8
  403878:	af00      	add	r7, sp, #0
  40387a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  40387c:	687b      	ldr	r3, [r7, #4]
  40387e:	2b00      	cmp	r3, #0
  403880:	d100      	bne.n	403884 <dhcp_delete_msg+0x10>
  403882:	e7fe      	b.n	403882 <dhcp_delete_msg+0xe>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  if (dhcp->p_out != NULL) {
  403884:	687b      	ldr	r3, [r7, #4]
  403886:	691b      	ldr	r3, [r3, #16]
  403888:	2b00      	cmp	r3, #0
  40388a:	d004      	beq.n	403896 <dhcp_delete_msg+0x22>
    pbuf_free(dhcp->p_out);
  40388c:	687b      	ldr	r3, [r7, #4]
  40388e:	691b      	ldr	r3, [r3, #16]
  403890:	4618      	mov	r0, r3
  403892:	4b06      	ldr	r3, [pc, #24]	; (4038ac <dhcp_delete_msg+0x38>)
  403894:	4798      	blx	r3
  }
  dhcp->p_out = NULL;
  403896:	687b      	ldr	r3, [r7, #4]
  403898:	2200      	movs	r2, #0
  40389a:	611a      	str	r2, [r3, #16]
  dhcp->msg_out = NULL;
  40389c:	687b      	ldr	r3, [r7, #4]
  40389e:	2200      	movs	r2, #0
  4038a0:	615a      	str	r2, [r3, #20]
}
  4038a2:	bf00      	nop
  4038a4:	3708      	adds	r7, #8
  4038a6:	46bd      	mov	sp, r7
  4038a8:	bd80      	pop	{r7, pc}
  4038aa:	bf00      	nop
  4038ac:	00405b81 	.word	0x00405b81

004038b0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  4038b0:	b480      	push	{r7}
  4038b2:	b083      	sub	sp, #12
  4038b4:	af00      	add	r7, sp, #0
  4038b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  4038b8:	687b      	ldr	r3, [r7, #4]
  4038ba:	2b00      	cmp	r3, #0
  4038bc:	d100      	bne.n	4038c0 <dhcp_option_trailer+0x10>
  4038be:	e7fe      	b.n	4038be <dhcp_option_trailer+0xe>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  4038c0:	687b      	ldr	r3, [r7, #4]
  4038c2:	695a      	ldr	r2, [r3, #20]
  4038c4:	687b      	ldr	r3, [r7, #4]
  4038c6:	8b1b      	ldrh	r3, [r3, #24]
  4038c8:	1c59      	adds	r1, r3, #1
  4038ca:	b288      	uxth	r0, r1
  4038cc:	6879      	ldr	r1, [r7, #4]
  4038ce:	8308      	strh	r0, [r1, #24]
  4038d0:	4413      	add	r3, r2
  4038d2:	22ff      	movs	r2, #255	; 0xff
  4038d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  4038d8:	e00b      	b.n	4038f2 <dhcp_option_trailer+0x42>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  4038da:	687b      	ldr	r3, [r7, #4]
  4038dc:	695a      	ldr	r2, [r3, #20]
  4038de:	687b      	ldr	r3, [r7, #4]
  4038e0:	8b1b      	ldrh	r3, [r3, #24]
  4038e2:	1c59      	adds	r1, r3, #1
  4038e4:	b288      	uxth	r0, r1
  4038e6:	6879      	ldr	r1, [r7, #4]
  4038e8:	8308      	strh	r0, [r1, #24]
  4038ea:	4413      	add	r3, r2
  4038ec:	2200      	movs	r2, #0
  4038ee:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  4038f2:	687b      	ldr	r3, [r7, #4]
  4038f4:	8b1b      	ldrh	r3, [r3, #24]
  4038f6:	2b43      	cmp	r3, #67	; 0x43
  4038f8:	d905      	bls.n	403906 <dhcp_option_trailer+0x56>
  4038fa:	687b      	ldr	r3, [r7, #4]
  4038fc:	8b1b      	ldrh	r3, [r3, #24]
  4038fe:	f003 0303 	and.w	r3, r3, #3
  403902:	2b00      	cmp	r3, #0
  403904:	d003      	beq.n	40390e <dhcp_option_trailer+0x5e>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  403906:	687b      	ldr	r3, [r7, #4]
  403908:	8b1b      	ldrh	r3, [r3, #24]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  40390a:	2b43      	cmp	r3, #67	; 0x43
  40390c:	d9e5      	bls.n	4038da <dhcp_option_trailer+0x2a>
  }
}
  40390e:	bf00      	nop
  403910:	370c      	adds	r7, #12
  403912:	46bd      	mov	sp, r7
  403914:	f85d 7b04 	ldr.w	r7, [sp], #4
  403918:	4770      	bx	lr
	...

0040391c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the ip header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  40391c:	b590      	push	{r4, r7, lr}
  40391e:	b08d      	sub	sp, #52	; 0x34
  403920:	af04      	add	r7, sp, #16
  403922:	6078      	str	r0, [r7, #4]
  403924:	6039      	str	r1, [r7, #0]

  ICMP_STATS_INC(icmp.recv);
  snmp_inc_icmpinmsgs();


  iphdr = (struct ip_hdr *)p->payload;
  403926:	687b      	ldr	r3, [r7, #4]
  403928:	685b      	ldr	r3, [r3, #4]
  40392a:	61fb      	str	r3, [r7, #28]
  hlen = IPH_HL(iphdr) * 4;
  40392c:	69fb      	ldr	r3, [r7, #28]
  40392e:	781b      	ldrb	r3, [r3, #0]
  403930:	b29b      	uxth	r3, r3
  403932:	f003 030f 	and.w	r3, r3, #15
  403936:	b29b      	uxth	r3, r3
  403938:	009b      	lsls	r3, r3, #2
  40393a:	b29b      	uxth	r3, r3
  40393c:	82fb      	strh	r3, [r7, #22]
  if (pbuf_header(p, -hlen) || (p->tot_len < sizeof(u16_t)*2)) {
  40393e:	8afb      	ldrh	r3, [r7, #22]
  403940:	425b      	negs	r3, r3
  403942:	b29b      	uxth	r3, r3
  403944:	b21b      	sxth	r3, r3
  403946:	4619      	mov	r1, r3
  403948:	6878      	ldr	r0, [r7, #4]
  40394a:	4b74      	ldr	r3, [pc, #464]	; (403b1c <icmp_input+0x200>)
  40394c:	4798      	blx	r3
  40394e:	4603      	mov	r3, r0
  403950:	2b00      	cmp	r3, #0
  403952:	f040 80ce 	bne.w	403af2 <icmp_input+0x1d6>
  403956:	687b      	ldr	r3, [r7, #4]
  403958:	891b      	ldrh	r3, [r3, #8]
  40395a:	2b03      	cmp	r3, #3
  40395c:	f240 80c9 	bls.w	403af2 <icmp_input+0x1d6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  403960:	687b      	ldr	r3, [r7, #4]
  403962:	685b      	ldr	r3, [r3, #4]
  403964:	781b      	ldrb	r3, [r3, #0]
  403966:	757b      	strb	r3, [r7, #21]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  403968:	7d7b      	ldrb	r3, [r7, #21]
  40396a:	2b00      	cmp	r3, #0
  40396c:	f000 80b9 	beq.w	403ae2 <icmp_input+0x1c6>
  403970:	2b08      	cmp	r3, #8
  403972:	f040 80b9 	bne.w	403ae8 <icmp_input+0x1cc>
       (as obviously, an echo request has been sent, too). */
    break; 
  case ICMP_ECHO:
#if !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
    {
      int accepted = 1;
  403976:	2301      	movs	r3, #1
  403978:	61bb      	str	r3, [r7, #24]
#if !LWIP_MULTICAST_PING
      /* multicast destination address? */
      if (ip_addr_ismulticast(&current_iphdr_dest)) {
  40397a:	4b69      	ldr	r3, [pc, #420]	; (403b20 <icmp_input+0x204>)
  40397c:	681b      	ldr	r3, [r3, #0]
  40397e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  403982:	2be0      	cmp	r3, #224	; 0xe0
  403984:	d101      	bne.n	40398a <icmp_input+0x6e>
        accepted = 0;
  403986:	2300      	movs	r3, #0
  403988:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_MULTICAST_PING */
#if !LWIP_BROADCAST_PING
      /* broadcast destination address? */
      if (ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
  40398a:	4b65      	ldr	r3, [pc, #404]	; (403b20 <icmp_input+0x204>)
  40398c:	681b      	ldr	r3, [r3, #0]
  40398e:	6839      	ldr	r1, [r7, #0]
  403990:	4618      	mov	r0, r3
  403992:	4b64      	ldr	r3, [pc, #400]	; (403b24 <icmp_input+0x208>)
  403994:	4798      	blx	r3
  403996:	4603      	mov	r3, r0
  403998:	2b00      	cmp	r3, #0
  40399a:	d001      	beq.n	4039a0 <icmp_input+0x84>
        accepted = 0;
  40399c:	2300      	movs	r3, #0
  40399e:	61bb      	str	r3, [r7, #24]
      }
#endif /* LWIP_BROADCAST_PING */
      /* broadcast or multicast destination address not acceptd? */
      if (!accepted) {
  4039a0:	69bb      	ldr	r3, [r7, #24]
  4039a2:	2b00      	cmp	r3, #0
  4039a4:	d103      	bne.n	4039ae <icmp_input+0x92>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast or broadcast pings\n"));
        ICMP_STATS_INC(icmp.err);
        pbuf_free(p);
  4039a6:	6878      	ldr	r0, [r7, #4]
  4039a8:	4b5f      	ldr	r3, [pc, #380]	; (403b28 <icmp_input+0x20c>)
  4039aa:	4798      	blx	r3
        return;
  4039ac:	e0b2      	b.n	403b14 <icmp_input+0x1f8>
      }
    }
#endif /* !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  4039ae:	687b      	ldr	r3, [r7, #4]
  4039b0:	891b      	ldrh	r3, [r3, #8]
  4039b2:	2b07      	cmp	r3, #7
  4039b4:	f240 809c 	bls.w	403af0 <icmp_input+0x1d4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
    if (inet_chksum_pbuf(p) != 0) {
  4039b8:	6878      	ldr	r0, [r7, #4]
  4039ba:	4b5c      	ldr	r3, [pc, #368]	; (403b2c <icmp_input+0x210>)
  4039bc:	4798      	blx	r3
  4039be:	4603      	mov	r3, r0
  4039c0:	2b00      	cmp	r3, #0
  4039c2:	d003      	beq.n	4039cc <icmp_input+0xb0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
      pbuf_free(p);
  4039c4:	6878      	ldr	r0, [r7, #4]
  4039c6:	4b58      	ldr	r3, [pc, #352]	; (403b28 <icmp_input+0x20c>)
  4039c8:	4798      	blx	r3
      ICMP_STATS_INC(icmp.chkerr);
      snmp_inc_icmpinerrors();
      return;
  4039ca:	e0a3      	b.n	403b14 <icmp_input+0x1f8>
    }
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  4039cc:	2122      	movs	r1, #34	; 0x22
  4039ce:	6878      	ldr	r0, [r7, #4]
  4039d0:	4b52      	ldr	r3, [pc, #328]	; (403b1c <icmp_input+0x200>)
  4039d2:	4798      	blx	r3
  4039d4:	4603      	mov	r3, r0
  4039d6:	2b00      	cmp	r3, #0
  4039d8:	d02f      	beq.n	403a3a <icmp_input+0x11e>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* switch p->payload to ip header */
      if (pbuf_header(p, hlen)) {
  4039da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  4039de:	4619      	mov	r1, r3
  4039e0:	6878      	ldr	r0, [r7, #4]
  4039e2:	4b4e      	ldr	r3, [pc, #312]	; (403b1c <icmp_input+0x200>)
  4039e4:	4798      	blx	r3
  4039e6:	4603      	mov	r3, r0
  4039e8:	2b00      	cmp	r3, #0
  4039ea:	f040 8086 	bne.w	403afa <icmp_input+0x1de>
        LWIP_ASSERT("icmp_input: moving p->payload to ip header failed\n", 0);
        goto memerr;
      }
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  4039ee:	687b      	ldr	r3, [r7, #4]
  4039f0:	891b      	ldrh	r3, [r3, #8]
  4039f2:	2200      	movs	r2, #0
  4039f4:	4619      	mov	r1, r3
  4039f6:	2002      	movs	r0, #2
  4039f8:	4b4d      	ldr	r3, [pc, #308]	; (403b30 <icmp_input+0x214>)
  4039fa:	4798      	blx	r3
  4039fc:	6138      	str	r0, [r7, #16]
      if (r == NULL) {
  4039fe:	693b      	ldr	r3, [r7, #16]
  403a00:	2b00      	cmp	r3, #0
  403a02:	d07c      	beq.n	403afe <icmp_input+0x1e2>
        goto memerr;
      }
      LWIP_ASSERT("check that first pbuf can hold struct the ICMP header",
                  (r->len >= hlen + sizeof(struct icmp_echo_hdr)));
      /* copy the whole packet including ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  403a04:	6879      	ldr	r1, [r7, #4]
  403a06:	6938      	ldr	r0, [r7, #16]
  403a08:	4b4a      	ldr	r3, [pc, #296]	; (403b34 <icmp_input+0x218>)
  403a0a:	4798      	blx	r3
  403a0c:	4603      	mov	r3, r0
  403a0e:	2b00      	cmp	r3, #0
  403a10:	d177      	bne.n	403b02 <icmp_input+0x1e6>
        LWIP_ASSERT("icmp_input: copying to new pbuf failed\n", 0);
        goto memerr;
      }
      iphdr = (struct ip_hdr *)r->payload;
  403a12:	693b      	ldr	r3, [r7, #16]
  403a14:	685b      	ldr	r3, [r3, #4]
  403a16:	61fb      	str	r3, [r7, #28]
      /* switch r->payload back to icmp header */
      if (pbuf_header(r, -hlen)) {
  403a18:	8afb      	ldrh	r3, [r7, #22]
  403a1a:	425b      	negs	r3, r3
  403a1c:	b29b      	uxth	r3, r3
  403a1e:	b21b      	sxth	r3, r3
  403a20:	4619      	mov	r1, r3
  403a22:	6938      	ldr	r0, [r7, #16]
  403a24:	4b3d      	ldr	r3, [pc, #244]	; (403b1c <icmp_input+0x200>)
  403a26:	4798      	blx	r3
  403a28:	4603      	mov	r3, r0
  403a2a:	2b00      	cmp	r3, #0
  403a2c:	d16b      	bne.n	403b06 <icmp_input+0x1ea>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
        goto memerr;
      }
      /* free the original p */
      pbuf_free(p);
  403a2e:	6878      	ldr	r0, [r7, #4]
  403a30:	4b3d      	ldr	r3, [pc, #244]	; (403b28 <icmp_input+0x20c>)
  403a32:	4798      	blx	r3
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  403a34:	693b      	ldr	r3, [r7, #16]
  403a36:	607b      	str	r3, [r7, #4]
  403a38:	e007      	b.n	403a4a <icmp_input+0x12e>
    } else {
      /* restore p->payload to point to icmp header */
      if (pbuf_header(p, -(s16_t)(PBUF_IP_HLEN + PBUF_LINK_HLEN))) {
  403a3a:	f06f 0121 	mvn.w	r1, #33	; 0x21
  403a3e:	6878      	ldr	r0, [r7, #4]
  403a40:	4b36      	ldr	r3, [pc, #216]	; (403b1c <icmp_input+0x200>)
  403a42:	4798      	blx	r3
  403a44:	4603      	mov	r3, r0
  403a46:	2b00      	cmp	r3, #0
  403a48:	d15f      	bne.n	403b0a <icmp_input+0x1ee>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  403a4a:	687b      	ldr	r3, [r7, #4]
  403a4c:	685b      	ldr	r3, [r3, #4]
  403a4e:	60fb      	str	r3, [r7, #12]
    ip_addr_copy(iphdr->src, *ip_current_dest_addr());
  403a50:	4b33      	ldr	r3, [pc, #204]	; (403b20 <icmp_input+0x204>)
  403a52:	681a      	ldr	r2, [r3, #0]
  403a54:	69fb      	ldr	r3, [r7, #28]
  403a56:	60da      	str	r2, [r3, #12]
    ip_addr_copy(iphdr->dest, *ip_current_src_addr());
  403a58:	4b37      	ldr	r3, [pc, #220]	; (403b38 <icmp_input+0x21c>)
  403a5a:	681a      	ldr	r2, [r3, #0]
  403a5c:	69fb      	ldr	r3, [r7, #28]
  403a5e:	611a      	str	r2, [r3, #16]
    ICMPH_TYPE_SET(iecho, ICMP_ER);
  403a60:	68fb      	ldr	r3, [r7, #12]
  403a62:	2200      	movs	r2, #0
  403a64:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
    /* adjust the checksum */
    if (iecho->chksum >= PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  403a66:	68fb      	ldr	r3, [r7, #12]
  403a68:	885b      	ldrh	r3, [r3, #2]
  403a6a:	b29b      	uxth	r3, r3
  403a6c:	f64f 72f6 	movw	r2, #65526	; 0xfff6
  403a70:	4293      	cmp	r3, r2
  403a72:	d907      	bls.n	403a84 <icmp_input+0x168>
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  403a74:	68fb      	ldr	r3, [r7, #12]
  403a76:	885b      	ldrh	r3, [r3, #2]
  403a78:	b29b      	uxth	r3, r3
  403a7a:	3309      	adds	r3, #9
  403a7c:	b29a      	uxth	r2, r3
  403a7e:	68fb      	ldr	r3, [r7, #12]
  403a80:	805a      	strh	r2, [r3, #2]
  403a82:	e006      	b.n	403a92 <icmp_input+0x176>
    } else {
      iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  403a84:	68fb      	ldr	r3, [r7, #12]
  403a86:	885b      	ldrh	r3, [r3, #2]
  403a88:	b29b      	uxth	r3, r3
  403a8a:	3308      	adds	r3, #8
  403a8c:	b29a      	uxth	r2, r3
  403a8e:	68fb      	ldr	r3, [r7, #12]
  403a90:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
    iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

    /* Set the correct TTL and recalculate the header checksum. */
    IPH_TTL_SET(iphdr, ICMP_TTL);
  403a92:	69fb      	ldr	r3, [r7, #28]
  403a94:	22ff      	movs	r2, #255	; 0xff
  403a96:	721a      	strb	r2, [r3, #8]
    IPH_CHKSUM_SET(iphdr, 0);
  403a98:	69fb      	ldr	r3, [r7, #28]
  403a9a:	2200      	movs	r2, #0
  403a9c:	729a      	strb	r2, [r3, #10]
  403a9e:	2200      	movs	r2, #0
  403aa0:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  403aa2:	2114      	movs	r1, #20
  403aa4:	69f8      	ldr	r0, [r7, #28]
  403aa6:	4b25      	ldr	r3, [pc, #148]	; (403b3c <icmp_input+0x220>)
  403aa8:	4798      	blx	r3
  403aaa:	4603      	mov	r3, r0
  403aac:	461a      	mov	r2, r3
  403aae:	69fb      	ldr	r3, [r7, #28]
  403ab0:	815a      	strh	r2, [r3, #10]
    /* increase number of messages attempted to send */
    snmp_inc_icmpoutmsgs();
    /* increase number of echo replies attempted to send */
    snmp_inc_icmpoutechoreps();

    if(pbuf_header(p, hlen)) {
  403ab2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  403ab6:	4619      	mov	r1, r3
  403ab8:	6878      	ldr	r0, [r7, #4]
  403aba:	4b18      	ldr	r3, [pc, #96]	; (403b1c <icmp_input+0x200>)
  403abc:	4798      	blx	r3
  403abe:	4603      	mov	r3, r0
  403ac0:	2b00      	cmp	r3, #0
  403ac2:	d110      	bne.n	403ae6 <icmp_input+0x1ca>
      LWIP_ASSERT("Can't move over header in packet", 0);
    } else {
      err_t ret;
      /* send an ICMP packet, src addr is the dest addr of the curren packet */
      ret = ip_output_if(p, ip_current_dest_addr(), IP_HDRINCL,
  403ac4:	683b      	ldr	r3, [r7, #0]
  403ac6:	9302      	str	r3, [sp, #8]
  403ac8:	2301      	movs	r3, #1
  403aca:	9301      	str	r3, [sp, #4]
  403acc:	2300      	movs	r3, #0
  403ace:	9300      	str	r3, [sp, #0]
  403ad0:	23ff      	movs	r3, #255	; 0xff
  403ad2:	2200      	movs	r2, #0
  403ad4:	4912      	ldr	r1, [pc, #72]	; (403b20 <icmp_input+0x204>)
  403ad6:	6878      	ldr	r0, [r7, #4]
  403ad8:	4c19      	ldr	r4, [pc, #100]	; (403b40 <icmp_input+0x224>)
  403ada:	47a0      	blx	r4
  403adc:	4603      	mov	r3, r0
  403ade:	72fb      	strb	r3, [r7, #11]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %c.\n", ret));
      }
    }
    break;
  403ae0:	e001      	b.n	403ae6 <icmp_input+0x1ca>
    break; 
  403ae2:	bf00      	nop
  403ae4:	e000      	b.n	403ae8 <icmp_input+0x1cc>
    break;
  403ae6:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n", 
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
  403ae8:	6878      	ldr	r0, [r7, #4]
  403aea:	4b0f      	ldr	r3, [pc, #60]	; (403b28 <icmp_input+0x20c>)
  403aec:	4798      	blx	r3
  return;
  403aee:	e011      	b.n	403b14 <icmp_input+0x1f8>
      goto lenerr;
  403af0:	bf00      	nop
lenerr:
  pbuf_free(p);
  403af2:	6878      	ldr	r0, [r7, #4]
  403af4:	4b0c      	ldr	r3, [pc, #48]	; (403b28 <icmp_input+0x20c>)
  403af6:	4798      	blx	r3
  ICMP_STATS_INC(icmp.lenerr);
  snmp_inc_icmpinerrors();
  return;
  403af8:	e00c      	b.n	403b14 <icmp_input+0x1f8>
        goto memerr;
  403afa:	bf00      	nop
  403afc:	e006      	b.n	403b0c <icmp_input+0x1f0>
        goto memerr;
  403afe:	bf00      	nop
  403b00:	e004      	b.n	403b0c <icmp_input+0x1f0>
        goto memerr;
  403b02:	bf00      	nop
  403b04:	e002      	b.n	403b0c <icmp_input+0x1f0>
        goto memerr;
  403b06:	bf00      	nop
  403b08:	e000      	b.n	403b0c <icmp_input+0x1f0>
        goto memerr;
  403b0a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
memerr:
  pbuf_free(p);
  403b0c:	6878      	ldr	r0, [r7, #4]
  403b0e:	4b06      	ldr	r3, [pc, #24]	; (403b28 <icmp_input+0x20c>)
  403b10:	4798      	blx	r3
  ICMP_STATS_INC(icmp.err);
  snmp_inc_icmpinerrors();
  return;
  403b12:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
}
  403b14:	3724      	adds	r7, #36	; 0x24
  403b16:	46bd      	mov	sp, r7
  403b18:	bd90      	pop	{r4, r7, pc}
  403b1a:	bf00      	nop
  403b1c:	00405aa5 	.word	0x00405aa5
  403b20:	20403974 	.word	0x20403974
  403b24:	004043d1 	.word	0x004043d1
  403b28:	00405b81 	.word	0x00405b81
  403b2c:	00403e45 	.word	0x00403e45
  403b30:	004057dd 	.word	0x004057dd
  403b34:	00405ced 	.word	0x00405ced
  403b38:	2040396c 	.word	0x2040396c
  403b3c:	00403e1d 	.word	0x00403e1d
  403b40:	004041c9 	.word	0x004041c9

00403b44 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  403b44:	b580      	push	{r7, lr}
  403b46:	b082      	sub	sp, #8
  403b48:	af00      	add	r7, sp, #0
  403b4a:	6078      	str	r0, [r7, #4]
  403b4c:	460b      	mov	r3, r1
  403b4e:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_DUR, t);
  403b50:	78fb      	ldrb	r3, [r7, #3]
  403b52:	461a      	mov	r2, r3
  403b54:	2103      	movs	r1, #3
  403b56:	6878      	ldr	r0, [r7, #4]
  403b58:	4b02      	ldr	r3, [pc, #8]	; (403b64 <icmp_dest_unreach+0x20>)
  403b5a:	4798      	blx	r3
}
  403b5c:	bf00      	nop
  403b5e:	3708      	adds	r7, #8
  403b60:	46bd      	mov	sp, r7
  403b62:	bd80      	pop	{r7, pc}
  403b64:	00403b8d 	.word	0x00403b8d

00403b68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  403b68:	b580      	push	{r7, lr}
  403b6a:	b082      	sub	sp, #8
  403b6c:	af00      	add	r7, sp, #0
  403b6e:	6078      	str	r0, [r7, #4]
  403b70:	460b      	mov	r3, r1
  403b72:	70fb      	strb	r3, [r7, #3]
  icmp_send_response(p, ICMP_TE, t);
  403b74:	78fb      	ldrb	r3, [r7, #3]
  403b76:	461a      	mov	r2, r3
  403b78:	210b      	movs	r1, #11
  403b7a:	6878      	ldr	r0, [r7, #4]
  403b7c:	4b02      	ldr	r3, [pc, #8]	; (403b88 <icmp_time_exceeded+0x20>)
  403b7e:	4798      	blx	r3
}
  403b80:	bf00      	nop
  403b82:	3708      	adds	r7, #8
  403b84:	46bd      	mov	sp, r7
  403b86:	bd80      	pop	{r7, pc}
  403b88:	00403b8d 	.word	0x00403b8d

00403b8c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  403b8c:	b590      	push	{r4, r7, lr}
  403b8e:	b089      	sub	sp, #36	; 0x24
  403b90:	af02      	add	r7, sp, #8
  403b92:	6078      	str	r0, [r7, #4]
  403b94:	460b      	mov	r3, r1
  403b96:	70fb      	strb	r3, [r7, #3]
  403b98:	4613      	mov	r3, r2
  403b9a:	70bb      	strb	r3, [r7, #2]
  /* we can use the echo header here */
  struct icmp_echo_hdr *icmphdr;
  ip_addr_t iphdr_src;

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  403b9c:	2200      	movs	r2, #0
  403b9e:	2124      	movs	r1, #36	; 0x24
  403ba0:	2001      	movs	r0, #1
  403ba2:	4b25      	ldr	r3, [pc, #148]	; (403c38 <icmp_send_response+0xac>)
  403ba4:	4798      	blx	r3
  403ba6:	6178      	str	r0, [r7, #20]
                 PBUF_RAM);
  if (q == NULL) {
  403ba8:	697b      	ldr	r3, [r7, #20]
  403baa:	2b00      	cmp	r3, #0
  403bac:	d040      	beq.n	403c30 <icmp_send_response+0xa4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  403bae:	687b      	ldr	r3, [r7, #4]
  403bb0:	685b      	ldr	r3, [r3, #4]
  403bb2:	613b      	str	r3, [r7, #16]
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->src));
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip_addr_debug_print(ICMP_DEBUG, &(iphdr->dest));
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  403bb4:	697b      	ldr	r3, [r7, #20]
  403bb6:	685b      	ldr	r3, [r3, #4]
  403bb8:	60fb      	str	r3, [r7, #12]
  icmphdr->type = type;
  403bba:	68fb      	ldr	r3, [r7, #12]
  403bbc:	78fa      	ldrb	r2, [r7, #3]
  403bbe:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
  403bc0:	68fb      	ldr	r3, [r7, #12]
  403bc2:	78ba      	ldrb	r2, [r7, #2]
  403bc4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
  403bc6:	68fb      	ldr	r3, [r7, #12]
  403bc8:	2200      	movs	r2, #0
  403bca:	711a      	strb	r2, [r3, #4]
  403bcc:	2200      	movs	r2, #0
  403bce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  403bd0:	68fb      	ldr	r3, [r7, #12]
  403bd2:	2200      	movs	r2, #0
  403bd4:	719a      	strb	r2, [r3, #6]
  403bd6:	2200      	movs	r2, #0
  403bd8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  403bda:	697b      	ldr	r3, [r7, #20]
  403bdc:	685b      	ldr	r3, [r3, #4]
  403bde:	f103 0008 	add.w	r0, r3, #8
  403be2:	687b      	ldr	r3, [r7, #4]
  403be4:	685b      	ldr	r3, [r3, #4]
  403be6:	221c      	movs	r2, #28
  403be8:	4619      	mov	r1, r3
  403bea:	4b14      	ldr	r3, [pc, #80]	; (403c3c <icmp_send_response+0xb0>)
  403bec:	4798      	blx	r3
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  /* calculate checksum */
  icmphdr->chksum = 0;
  403bee:	68fb      	ldr	r3, [r7, #12]
  403bf0:	2200      	movs	r2, #0
  403bf2:	709a      	strb	r2, [r3, #2]
  403bf4:	2200      	movs	r2, #0
  403bf6:	70da      	strb	r2, [r3, #3]
  icmphdr->chksum = inet_chksum(icmphdr, q->len);
  403bf8:	697b      	ldr	r3, [r7, #20]
  403bfa:	895b      	ldrh	r3, [r3, #10]
  403bfc:	4619      	mov	r1, r3
  403bfe:	68f8      	ldr	r0, [r7, #12]
  403c00:	4b0f      	ldr	r3, [pc, #60]	; (403c40 <icmp_send_response+0xb4>)
  403c02:	4798      	blx	r3
  403c04:	4603      	mov	r3, r0
  403c06:	461a      	mov	r2, r3
  403c08:	68fb      	ldr	r3, [r7, #12]
  403c0a:	805a      	strh	r2, [r3, #2]
  ICMP_STATS_INC(icmp.xmit);
  /* increase number of messages attempted to send */
  snmp_inc_icmpoutmsgs();
  /* increase number of destination unreachable messages attempted to send */
  snmp_inc_icmpouttimeexcds();
  ip_addr_copy(iphdr_src, iphdr->src);
  403c0c:	693b      	ldr	r3, [r7, #16]
  403c0e:	68db      	ldr	r3, [r3, #12]
  403c10:	60bb      	str	r3, [r7, #8]
  ip_output(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP);
  403c12:	f107 0208 	add.w	r2, r7, #8
  403c16:	2301      	movs	r3, #1
  403c18:	9301      	str	r3, [sp, #4]
  403c1a:	2300      	movs	r3, #0
  403c1c:	9300      	str	r3, [sp, #0]
  403c1e:	23ff      	movs	r3, #255	; 0xff
  403c20:	2100      	movs	r1, #0
  403c22:	6978      	ldr	r0, [r7, #20]
  403c24:	4c07      	ldr	r4, [pc, #28]	; (403c44 <icmp_send_response+0xb8>)
  403c26:	47a0      	blx	r4
  pbuf_free(q);
  403c28:	6978      	ldr	r0, [r7, #20]
  403c2a:	4b07      	ldr	r3, [pc, #28]	; (403c48 <icmp_send_response+0xbc>)
  403c2c:	4798      	blx	r3
  403c2e:	e000      	b.n	403c32 <icmp_send_response+0xa6>
    return;
  403c30:	bf00      	nop
}
  403c32:	371c      	adds	r7, #28
  403c34:	46bd      	mov	sp, r7
  403c36:	bd90      	pop	{r4, r7, pc}
  403c38:	004057dd 	.word	0x004057dd
  403c3c:	0040cd79 	.word	0x0040cd79
  403c40:	00403e1d 	.word	0x00403e1d
  403c44:	0040437d 	.word	0x0040437d
  403c48:	00405b81 	.word	0x00405b81

00403c4c <lwip_standard_chksum>:
 * @return host order (!) lwip checksum (non-inverted Internet sum) 
 */

static u16_t
lwip_standard_chksum(void *dataptr, int len)
{
  403c4c:	b480      	push	{r7}
  403c4e:	b089      	sub	sp, #36	; 0x24
  403c50:	af00      	add	r7, sp, #0
  403c52:	6078      	str	r0, [r7, #4]
  403c54:	6039      	str	r1, [r7, #0]
  u8_t *pb = (u8_t *)dataptr;
  403c56:	687b      	ldr	r3, [r7, #4]
  403c58:	61fb      	str	r3, [r7, #28]
  u16_t *ps, t = 0;
  403c5a:	2300      	movs	r3, #0
  403c5c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
  403c5e:	2300      	movs	r3, #0
  403c60:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
  403c62:	69fb      	ldr	r3, [r7, #28]
  403c64:	f003 0301 	and.w	r3, r3, #1
  403c68:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  403c6a:	693b      	ldr	r3, [r7, #16]
  403c6c:	2b00      	cmp	r3, #0
  403c6e:	d00d      	beq.n	403c8c <lwip_standard_chksum+0x40>
  403c70:	683b      	ldr	r3, [r7, #0]
  403c72:	2b00      	cmp	r3, #0
  403c74:	dd0a      	ble.n	403c8c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
  403c76:	f107 030e 	add.w	r3, r7, #14
  403c7a:	3301      	adds	r3, #1
  403c7c:	69fa      	ldr	r2, [r7, #28]
  403c7e:	1c51      	adds	r1, r2, #1
  403c80:	61f9      	str	r1, [r7, #28]
  403c82:	7812      	ldrb	r2, [r2, #0]
  403c84:	701a      	strb	r2, [r3, #0]
    len--;
  403c86:	683b      	ldr	r3, [r7, #0]
  403c88:	3b01      	subs	r3, #1
  403c8a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (u16_t *)(void *)pb;
  403c8c:	69fb      	ldr	r3, [r7, #28]
  403c8e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
  403c90:	e00a      	b.n	403ca8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
  403c92:	69bb      	ldr	r3, [r7, #24]
  403c94:	1c9a      	adds	r2, r3, #2
  403c96:	61ba      	str	r2, [r7, #24]
  403c98:	881b      	ldrh	r3, [r3, #0]
  403c9a:	461a      	mov	r2, r3
  403c9c:	697b      	ldr	r3, [r7, #20]
  403c9e:	4413      	add	r3, r2
  403ca0:	617b      	str	r3, [r7, #20]
    len -= 2;
  403ca2:	683b      	ldr	r3, [r7, #0]
  403ca4:	3b02      	subs	r3, #2
  403ca6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
  403ca8:	683b      	ldr	r3, [r7, #0]
  403caa:	2b01      	cmp	r3, #1
  403cac:	dcf1      	bgt.n	403c92 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  403cae:	683b      	ldr	r3, [r7, #0]
  403cb0:	2b00      	cmp	r3, #0
  403cb2:	dd04      	ble.n	403cbe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(u8_t *)ps;
  403cb4:	f107 030e 	add.w	r3, r7, #14
  403cb8:	69ba      	ldr	r2, [r7, #24]
  403cba:	7812      	ldrb	r2, [r2, #0]
  403cbc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
  403cbe:	89fb      	ldrh	r3, [r7, #14]
  403cc0:	461a      	mov	r2, r3
  403cc2:	697b      	ldr	r3, [r7, #20]
  403cc4:	4413      	add	r3, r2
  403cc6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  sum = FOLD_U32T(sum);
  403cc8:	697b      	ldr	r3, [r7, #20]
  403cca:	0c1a      	lsrs	r2, r3, #16
  403ccc:	697b      	ldr	r3, [r7, #20]
  403cce:	b29b      	uxth	r3, r3
  403cd0:	4413      	add	r3, r2
  403cd2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
  403cd4:	697b      	ldr	r3, [r7, #20]
  403cd6:	0c1a      	lsrs	r2, r3, #16
  403cd8:	697b      	ldr	r3, [r7, #20]
  403cda:	b29b      	uxth	r3, r3
  403cdc:	4413      	add	r3, r2
  403cde:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
  403ce0:	693b      	ldr	r3, [r7, #16]
  403ce2:	2b00      	cmp	r3, #0
  403ce4:	d007      	beq.n	403cf6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
  403ce6:	697b      	ldr	r3, [r7, #20]
  403ce8:	021b      	lsls	r3, r3, #8
  403cea:	b29a      	uxth	r2, r3
  403cec:	697b      	ldr	r3, [r7, #20]
  403cee:	0a1b      	lsrs	r3, r3, #8
  403cf0:	b2db      	uxtb	r3, r3
  403cf2:	4313      	orrs	r3, r2
  403cf4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
  403cf6:	697b      	ldr	r3, [r7, #20]
  403cf8:	b29b      	uxth	r3, r3
}
  403cfa:	4618      	mov	r0, r3
  403cfc:	3724      	adds	r7, #36	; 0x24
  403cfe:	46bd      	mov	sp, r7
  403d00:	f85d 7b04 	ldr.w	r7, [sp], #4
  403d04:	4770      	bx	lr
	...

00403d08 <inet_chksum_pseudo>:
 */
u16_t
inet_chksum_pseudo(struct pbuf *p,
       ip_addr_t *src, ip_addr_t *dest,
       u8_t proto, u16_t proto_len)
{
  403d08:	b580      	push	{r7, lr}
  403d0a:	b088      	sub	sp, #32
  403d0c:	af00      	add	r7, sp, #0
  403d0e:	60f8      	str	r0, [r7, #12]
  403d10:	60b9      	str	r1, [r7, #8]
  403d12:	607a      	str	r2, [r7, #4]
  403d14:	70fb      	strb	r3, [r7, #3]
  u32_t acc;
  u32_t addr;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  403d16:	2300      	movs	r3, #0
  403d18:	61fb      	str	r3, [r7, #28]
  swapped = 0;
  403d1a:	2300      	movs	r3, #0
  403d1c:	75fb      	strb	r3, [r7, #23]
  /* iterate through all pbuf in chain */
  for(q = p; q != NULL; q = q->next) {
  403d1e:	68fb      	ldr	r3, [r7, #12]
  403d20:	61bb      	str	r3, [r7, #24]
  403d22:	e028      	b.n	403d76 <inet_chksum_pseudo+0x6e>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  403d24:	69bb      	ldr	r3, [r7, #24]
  403d26:	685a      	ldr	r2, [r3, #4]
  403d28:	69bb      	ldr	r3, [r7, #24]
  403d2a:	895b      	ldrh	r3, [r3, #10]
  403d2c:	4619      	mov	r1, r3
  403d2e:	4610      	mov	r0, r2
  403d30:	4b38      	ldr	r3, [pc, #224]	; (403e14 <inet_chksum_pseudo+0x10c>)
  403d32:	4798      	blx	r3
  403d34:	4603      	mov	r3, r0
  403d36:	461a      	mov	r2, r3
  403d38:	69fb      	ldr	r3, [r7, #28]
  403d3a:	4413      	add	r3, r2
  403d3c:	61fb      	str	r3, [r7, #28]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  403d3e:	69fb      	ldr	r3, [r7, #28]
  403d40:	0c1a      	lsrs	r2, r3, #16
  403d42:	69fb      	ldr	r3, [r7, #28]
  403d44:	b29b      	uxth	r3, r3
  403d46:	4413      	add	r3, r2
  403d48:	61fb      	str	r3, [r7, #28]
    if (q->len % 2 != 0) {
  403d4a:	69bb      	ldr	r3, [r7, #24]
  403d4c:	895b      	ldrh	r3, [r3, #10]
  403d4e:	f003 0301 	and.w	r3, r3, #1
  403d52:	b29b      	uxth	r3, r3
  403d54:	2b00      	cmp	r3, #0
  403d56:	d00b      	beq.n	403d70 <inet_chksum_pseudo+0x68>
      swapped = 1 - swapped;
  403d58:	7dfb      	ldrb	r3, [r7, #23]
  403d5a:	f1c3 0301 	rsb	r3, r3, #1
  403d5e:	75fb      	strb	r3, [r7, #23]
      acc = SWAP_BYTES_IN_WORD(acc);
  403d60:	69fb      	ldr	r3, [r7, #28]
  403d62:	021b      	lsls	r3, r3, #8
  403d64:	b29a      	uxth	r2, r3
  403d66:	69fb      	ldr	r3, [r7, #28]
  403d68:	0a1b      	lsrs	r3, r3, #8
  403d6a:	b2db      	uxtb	r3, r3
  403d6c:	4313      	orrs	r3, r2
  403d6e:	61fb      	str	r3, [r7, #28]
  for(q = p; q != NULL; q = q->next) {
  403d70:	69bb      	ldr	r3, [r7, #24]
  403d72:	681b      	ldr	r3, [r3, #0]
  403d74:	61bb      	str	r3, [r7, #24]
  403d76:	69bb      	ldr	r3, [r7, #24]
  403d78:	2b00      	cmp	r3, #0
  403d7a:	d1d3      	bne.n	403d24 <inet_chksum_pseudo+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  403d7c:	7dfb      	ldrb	r3, [r7, #23]
  403d7e:	2b00      	cmp	r3, #0
  403d80:	d007      	beq.n	403d92 <inet_chksum_pseudo+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
  403d82:	69fb      	ldr	r3, [r7, #28]
  403d84:	021b      	lsls	r3, r3, #8
  403d86:	b29a      	uxth	r2, r3
  403d88:	69fb      	ldr	r3, [r7, #28]
  403d8a:	0a1b      	lsrs	r3, r3, #8
  403d8c:	b2db      	uxtb	r3, r3
  403d8e:	4313      	orrs	r3, r2
  403d90:	61fb      	str	r3, [r7, #28]
  }
  addr = ip4_addr_get_u32(src);
  403d92:	68bb      	ldr	r3, [r7, #8]
  403d94:	681b      	ldr	r3, [r3, #0]
  403d96:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  403d98:	693b      	ldr	r3, [r7, #16]
  403d9a:	b29b      	uxth	r3, r3
  403d9c:	69fa      	ldr	r2, [r7, #28]
  403d9e:	4413      	add	r3, r2
  403da0:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  403da2:	693b      	ldr	r3, [r7, #16]
  403da4:	0c1b      	lsrs	r3, r3, #16
  403da6:	69fa      	ldr	r2, [r7, #28]
  403da8:	4413      	add	r3, r2
  403daa:	61fb      	str	r3, [r7, #28]
  addr = ip4_addr_get_u32(dest);
  403dac:	687b      	ldr	r3, [r7, #4]
  403dae:	681b      	ldr	r3, [r3, #0]
  403db0:	613b      	str	r3, [r7, #16]
  acc += (addr & 0xffffUL);
  403db2:	693b      	ldr	r3, [r7, #16]
  403db4:	b29b      	uxth	r3, r3
  403db6:	69fa      	ldr	r2, [r7, #28]
  403db8:	4413      	add	r3, r2
  403dba:	61fb      	str	r3, [r7, #28]
  acc += ((addr >> 16) & 0xffffUL);
  403dbc:	693b      	ldr	r3, [r7, #16]
  403dbe:	0c1b      	lsrs	r3, r3, #16
  403dc0:	69fa      	ldr	r2, [r7, #28]
  403dc2:	4413      	add	r3, r2
  403dc4:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons((u16_t)proto);
  403dc6:	78fb      	ldrb	r3, [r7, #3]
  403dc8:	b29b      	uxth	r3, r3
  403dca:	4618      	mov	r0, r3
  403dcc:	4b12      	ldr	r3, [pc, #72]	; (403e18 <inet_chksum_pseudo+0x110>)
  403dce:	4798      	blx	r3
  403dd0:	4603      	mov	r3, r0
  403dd2:	461a      	mov	r2, r3
  403dd4:	69fb      	ldr	r3, [r7, #28]
  403dd6:	4413      	add	r3, r2
  403dd8:	61fb      	str	r3, [r7, #28]
  acc += (u32_t)htons(proto_len);
  403dda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  403ddc:	4618      	mov	r0, r3
  403dde:	4b0e      	ldr	r3, [pc, #56]	; (403e18 <inet_chksum_pseudo+0x110>)
  403de0:	4798      	blx	r3
  403de2:	4603      	mov	r3, r0
  403de4:	461a      	mov	r2, r3
  403de6:	69fb      	ldr	r3, [r7, #28]
  403de8:	4413      	add	r3, r2
  403dea:	61fb      	str	r3, [r7, #28]

  /* Fold 32-bit sum to 16 bits
     calling this twice is propably faster than if statements... */
  acc = FOLD_U32T(acc);
  403dec:	69fb      	ldr	r3, [r7, #28]
  403dee:	0c1a      	lsrs	r2, r3, #16
  403df0:	69fb      	ldr	r3, [r7, #28]
  403df2:	b29b      	uxth	r3, r3
  403df4:	4413      	add	r3, r2
  403df6:	61fb      	str	r3, [r7, #28]
  acc = FOLD_U32T(acc);
  403df8:	69fb      	ldr	r3, [r7, #28]
  403dfa:	0c1a      	lsrs	r2, r3, #16
  403dfc:	69fb      	ldr	r3, [r7, #28]
  403dfe:	b29b      	uxth	r3, r3
  403e00:	4413      	add	r3, r2
  403e02:	61fb      	str	r3, [r7, #28]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  403e04:	69fb      	ldr	r3, [r7, #28]
  403e06:	b29b      	uxth	r3, r3
  403e08:	43db      	mvns	r3, r3
  403e0a:	b29b      	uxth	r3, r3
}
  403e0c:	4618      	mov	r0, r3
  403e0e:	3720      	adds	r7, #32
  403e10:	46bd      	mov	sp, r7
  403e12:	bd80      	pop	{r7, pc}
  403e14:	00403c4d 	.word	0x00403c4d
  403e18:	00401f99 	.word	0x00401f99

00403e1c <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(void *dataptr, u16_t len)
{
  403e1c:	b580      	push	{r7, lr}
  403e1e:	b082      	sub	sp, #8
  403e20:	af00      	add	r7, sp, #0
  403e22:	6078      	str	r0, [r7, #4]
  403e24:	460b      	mov	r3, r1
  403e26:	807b      	strh	r3, [r7, #2]
  return ~LWIP_CHKSUM(dataptr, len);
  403e28:	887b      	ldrh	r3, [r7, #2]
  403e2a:	4619      	mov	r1, r3
  403e2c:	6878      	ldr	r0, [r7, #4]
  403e2e:	4b04      	ldr	r3, [pc, #16]	; (403e40 <inet_chksum+0x24>)
  403e30:	4798      	blx	r3
  403e32:	4603      	mov	r3, r0
  403e34:	43db      	mvns	r3, r3
  403e36:	b29b      	uxth	r3, r3
}
  403e38:	4618      	mov	r0, r3
  403e3a:	3708      	adds	r7, #8
  403e3c:	46bd      	mov	sp, r7
  403e3e:	bd80      	pop	{r7, pc}
  403e40:	00403c4d 	.word	0x00403c4d

00403e44 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  403e44:	b580      	push	{r7, lr}
  403e46:	b086      	sub	sp, #24
  403e48:	af00      	add	r7, sp, #0
  403e4a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  403e4c:	2300      	movs	r3, #0
  403e4e:	617b      	str	r3, [r7, #20]
  swapped = 0;
  403e50:	2300      	movs	r3, #0
  403e52:	73fb      	strb	r3, [r7, #15]
  for(q = p; q != NULL; q = q->next) {
  403e54:	687b      	ldr	r3, [r7, #4]
  403e56:	613b      	str	r3, [r7, #16]
  403e58:	e028      	b.n	403eac <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
  403e5a:	693b      	ldr	r3, [r7, #16]
  403e5c:	685a      	ldr	r2, [r3, #4]
  403e5e:	693b      	ldr	r3, [r7, #16]
  403e60:	895b      	ldrh	r3, [r3, #10]
  403e62:	4619      	mov	r1, r3
  403e64:	4610      	mov	r0, r2
  403e66:	4b1c      	ldr	r3, [pc, #112]	; (403ed8 <inet_chksum_pbuf+0x94>)
  403e68:	4798      	blx	r3
  403e6a:	4603      	mov	r3, r0
  403e6c:	461a      	mov	r2, r3
  403e6e:	697b      	ldr	r3, [r7, #20]
  403e70:	4413      	add	r3, r2
  403e72:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
  403e74:	697b      	ldr	r3, [r7, #20]
  403e76:	0c1a      	lsrs	r2, r3, #16
  403e78:	697b      	ldr	r3, [r7, #20]
  403e7a:	b29b      	uxth	r3, r3
  403e7c:	4413      	add	r3, r2
  403e7e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
  403e80:	693b      	ldr	r3, [r7, #16]
  403e82:	895b      	ldrh	r3, [r3, #10]
  403e84:	f003 0301 	and.w	r3, r3, #1
  403e88:	b29b      	uxth	r3, r3
  403e8a:	2b00      	cmp	r3, #0
  403e8c:	d00b      	beq.n	403ea6 <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
  403e8e:	7bfb      	ldrb	r3, [r7, #15]
  403e90:	f1c3 0301 	rsb	r3, r3, #1
  403e94:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
  403e96:	697b      	ldr	r3, [r7, #20]
  403e98:	021b      	lsls	r3, r3, #8
  403e9a:	b29a      	uxth	r2, r3
  403e9c:	697b      	ldr	r3, [r7, #20]
  403e9e:	0a1b      	lsrs	r3, r3, #8
  403ea0:	b2db      	uxtb	r3, r3
  403ea2:	4313      	orrs	r3, r2
  403ea4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next) {
  403ea6:	693b      	ldr	r3, [r7, #16]
  403ea8:	681b      	ldr	r3, [r3, #0]
  403eaa:	613b      	str	r3, [r7, #16]
  403eac:	693b      	ldr	r3, [r7, #16]
  403eae:	2b00      	cmp	r3, #0
  403eb0:	d1d3      	bne.n	403e5a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
  403eb2:	7bfb      	ldrb	r3, [r7, #15]
  403eb4:	2b00      	cmp	r3, #0
  403eb6:	d007      	beq.n	403ec8 <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
  403eb8:	697b      	ldr	r3, [r7, #20]
  403eba:	021b      	lsls	r3, r3, #8
  403ebc:	b29a      	uxth	r2, r3
  403ebe:	697b      	ldr	r3, [r7, #20]
  403ec0:	0a1b      	lsrs	r3, r3, #8
  403ec2:	b2db      	uxtb	r3, r3
  403ec4:	4313      	orrs	r3, r2
  403ec6:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
  403ec8:	697b      	ldr	r3, [r7, #20]
  403eca:	b29b      	uxth	r3, r3
  403ecc:	43db      	mvns	r3, r3
  403ece:	b29b      	uxth	r3, r3
}
  403ed0:	4618      	mov	r0, r3
  403ed2:	3718      	adds	r7, #24
  403ed4:	46bd      	mov	sp, r7
  403ed6:	bd80      	pop	{r7, pc}
  403ed8:	00403c4d 	.word	0x00403c4d

00403edc <ip_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip_route(ip_addr_t *dest)
{
  403edc:	b480      	push	{r7}
  403ede:	b085      	sub	sp, #20
  403ee0:	af00      	add	r7, sp, #0
  403ee2:	6078      	str	r0, [r7, #4]
    return netif;
  }
#endif

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  403ee4:	4b19      	ldr	r3, [pc, #100]	; (403f4c <ip_route+0x70>)
  403ee6:	681b      	ldr	r3, [r3, #0]
  403ee8:	60fb      	str	r3, [r7, #12]
  403eea:	e015      	b.n	403f18 <ip_route+0x3c>
    /* network mask matches? */
    if (netif_is_up(netif)) {
  403eec:	68fb      	ldr	r3, [r7, #12]
  403eee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  403ef2:	f003 0301 	and.w	r3, r3, #1
  403ef6:	2b00      	cmp	r3, #0
  403ef8:	d00b      	beq.n	403f12 <ip_route+0x36>
      if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
  403efa:	687b      	ldr	r3, [r7, #4]
  403efc:	681a      	ldr	r2, [r3, #0]
  403efe:	68fb      	ldr	r3, [r7, #12]
  403f00:	685b      	ldr	r3, [r3, #4]
  403f02:	405a      	eors	r2, r3
  403f04:	68fb      	ldr	r3, [r7, #12]
  403f06:	689b      	ldr	r3, [r3, #8]
  403f08:	4013      	ands	r3, r2
  403f0a:	2b00      	cmp	r3, #0
  403f0c:	d101      	bne.n	403f12 <ip_route+0x36>
        /* return netif on which to forward IP packet */
        return netif;
  403f0e:	68fb      	ldr	r3, [r7, #12]
  403f10:	e015      	b.n	403f3e <ip_route+0x62>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  403f12:	68fb      	ldr	r3, [r7, #12]
  403f14:	681b      	ldr	r3, [r3, #0]
  403f16:	60fb      	str	r3, [r7, #12]
  403f18:	68fb      	ldr	r3, [r7, #12]
  403f1a:	2b00      	cmp	r3, #0
  403f1c:	d1e6      	bne.n	403eec <ip_route+0x10>
      }
    }
  }
  if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
  403f1e:	4b0c      	ldr	r3, [pc, #48]	; (403f50 <ip_route+0x74>)
  403f20:	681b      	ldr	r3, [r3, #0]
  403f22:	2b00      	cmp	r3, #0
  403f24:	d007      	beq.n	403f36 <ip_route+0x5a>
  403f26:	4b0a      	ldr	r3, [pc, #40]	; (403f50 <ip_route+0x74>)
  403f28:	681b      	ldr	r3, [r3, #0]
  403f2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  403f2e:	f003 0301 	and.w	r3, r3, #1
  403f32:	2b00      	cmp	r3, #0
  403f34:	d101      	bne.n	403f3a <ip_route+0x5e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    snmp_inc_ipoutnoroutes();
    return NULL;
  403f36:	2300      	movs	r3, #0
  403f38:	e001      	b.n	403f3e <ip_route+0x62>
  }
  /* no matching netif found, use default netif */
  return netif_default;
  403f3a:	4b05      	ldr	r3, [pc, #20]	; (403f50 <ip_route+0x74>)
  403f3c:	681b      	ldr	r3, [r3, #0]
}
  403f3e:	4618      	mov	r0, r3
  403f40:	3714      	adds	r7, #20
  403f42:	46bd      	mov	sp, r7
  403f44:	f85d 7b04 	ldr.w	r7, [sp], #4
  403f48:	4770      	bx	lr
  403f4a:	bf00      	nop
  403f4c:	20404990 	.word	0x20404990
  403f50:	20404994 	.word	0x20404994

00403f54 <ip_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip_input(struct pbuf *p, struct netif *inp)
{
  403f54:	b580      	push	{r7, lr}
  403f56:	b088      	sub	sp, #32
  403f58:	af00      	add	r7, sp, #0
  403f5a:	6078      	str	r0, [r7, #4]
  403f5c:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  int check_ip_src=1;
  403f5e:	2301      	movs	r3, #1
  403f60:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  snmp_inc_ipinreceives();

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  403f62:	687b      	ldr	r3, [r7, #4]
  403f64:	685b      	ldr	r3, [r3, #4]
  403f66:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
  403f68:	69fb      	ldr	r3, [r7, #28]
  403f6a:	781b      	ldrb	r3, [r3, #0]
  403f6c:	091b      	lsrs	r3, r3, #4
  403f6e:	b2db      	uxtb	r3, r3
  403f70:	2b04      	cmp	r3, #4
  403f72:	d004      	beq.n	403f7e <ip_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
    ip_debug_print(p);
    pbuf_free(p);
  403f74:	6878      	ldr	r0, [r7, #4]
  403f76:	4b85      	ldr	r3, [pc, #532]	; (40418c <ip_input+0x238>)
  403f78:	4798      	blx	r3
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  403f7a:	2300      	movs	r3, #0
  403f7c:	e102      	b.n	404184 <ip_input+0x230>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  403f7e:	69fb      	ldr	r3, [r7, #28]
  403f80:	781b      	ldrb	r3, [r3, #0]
  403f82:	b29b      	uxth	r3, r3
  403f84:	f003 030f 	and.w	r3, r3, #15
  403f88:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  403f8a:	89fb      	ldrh	r3, [r7, #14]
  403f8c:	009b      	lsls	r3, r3, #2
  403f8e:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = ntohs(IPH_LEN(iphdr));
  403f90:	69fb      	ldr	r3, [r7, #28]
  403f92:	885b      	ldrh	r3, [r3, #2]
  403f94:	b29b      	uxth	r3, r3
  403f96:	4618      	mov	r0, r3
  403f98:	4b7d      	ldr	r3, [pc, #500]	; (404190 <ip_input+0x23c>)
  403f9a:	4798      	blx	r3
  403f9c:	4603      	mov	r3, r0
  403f9e:	81bb      	strh	r3, [r7, #12]

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
  403fa0:	687b      	ldr	r3, [r7, #4]
  403fa2:	895b      	ldrh	r3, [r3, #10]
  403fa4:	89fa      	ldrh	r2, [r7, #14]
  403fa6:	429a      	cmp	r2, r3
  403fa8:	d804      	bhi.n	403fb4 <ip_input+0x60>
  403faa:	687b      	ldr	r3, [r7, #4]
  403fac:	891b      	ldrh	r3, [r3, #8]
  403fae:	89ba      	ldrh	r2, [r7, #12]
  403fb0:	429a      	cmp	r2, r3
  403fb2:	d904      	bls.n	403fbe <ip_input+0x6a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  403fb4:	6878      	ldr	r0, [r7, #4]
  403fb6:	4b75      	ldr	r3, [pc, #468]	; (40418c <ip_input+0x238>)
  403fb8:	4798      	blx	r3
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipindiscards();
    return ERR_OK;
  403fba:	2300      	movs	r3, #0
  403fbc:	e0e2      	b.n	404184 <ip_input+0x230>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  403fbe:	89fb      	ldrh	r3, [r7, #14]
  403fc0:	4619      	mov	r1, r3
  403fc2:	69f8      	ldr	r0, [r7, #28]
  403fc4:	4b73      	ldr	r3, [pc, #460]	; (404194 <ip_input+0x240>)
  403fc6:	4798      	blx	r3
  403fc8:	4603      	mov	r3, r0
  403fca:	2b00      	cmp	r3, #0
  403fcc:	d004      	beq.n	403fd8 <ip_input+0x84>

    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
    ip_debug_print(p);
    pbuf_free(p);
  403fce:	6878      	ldr	r0, [r7, #4]
  403fd0:	4b6e      	ldr	r3, [pc, #440]	; (40418c <ip_input+0x238>)
  403fd2:	4798      	blx	r3
    IP_STATS_INC(ip.chkerr);
    IP_STATS_INC(ip.drop);
    snmp_inc_ipinhdrerrors();
    return ERR_OK;
  403fd4:	2300      	movs	r3, #0
  403fd6:	e0d5      	b.n	404184 <ip_input+0x230>
  }
#endif

  /* Trim pbuf. This should have been done at the netif layer,
   * but we'll do it anyway just to be sure that its done. */
  pbuf_realloc(p, iphdr_len);
  403fd8:	89bb      	ldrh	r3, [r7, #12]
  403fda:	4619      	mov	r1, r3
  403fdc:	6878      	ldr	r0, [r7, #4]
  403fde:	4b6e      	ldr	r3, [pc, #440]	; (404198 <ip_input+0x244>)
  403fe0:	4798      	blx	r3

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy(current_iphdr_dest, iphdr->dest);
  403fe2:	69fb      	ldr	r3, [r7, #28]
  403fe4:	691b      	ldr	r3, [r3, #16]
  403fe6:	4a6d      	ldr	r2, [pc, #436]	; (40419c <ip_input+0x248>)
  403fe8:	6013      	str	r3, [r2, #0]
  ip_addr_copy(current_iphdr_src, iphdr->src);
  403fea:	69fb      	ldr	r3, [r7, #28]
  403fec:	68db      	ldr	r3, [r3, #12]
  403fee:	4a6c      	ldr	r2, [pc, #432]	; (4041a0 <ip_input+0x24c>)
  403ff0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IGMP */
  {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  403ff2:	2301      	movs	r3, #1
  403ff4:	613b      	str	r3, [r7, #16]
    netif = inp;
  403ff6:	683b      	ldr	r3, [r7, #0]
  403ff8:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
  403ffa:	69bb      	ldr	r3, [r7, #24]
  403ffc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  404000:	f003 0301 	and.w	r3, r3, #1
  404004:	2b00      	cmp	r3, #0
  404006:	d016      	beq.n	404036 <ip_input+0xe2>
  404008:	69bb      	ldr	r3, [r7, #24]
  40400a:	3304      	adds	r3, #4
  40400c:	2b00      	cmp	r3, #0
  40400e:	d012      	beq.n	404036 <ip_input+0xe2>
  404010:	69bb      	ldr	r3, [r7, #24]
  404012:	685b      	ldr	r3, [r3, #4]
  404014:	2b00      	cmp	r3, #0
  404016:	d00e      	beq.n	404036 <ip_input+0xe2>
        /* unicast to this interface address? */
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  404018:	4b60      	ldr	r3, [pc, #384]	; (40419c <ip_input+0x248>)
  40401a:	681a      	ldr	r2, [r3, #0]
  40401c:	69bb      	ldr	r3, [r7, #24]
  40401e:	685b      	ldr	r3, [r3, #4]
  404020:	429a      	cmp	r2, r3
  404022:	d01e      	beq.n	404062 <ip_input+0x10e>
            /* or broadcast on this interface network address? */
            ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
  404024:	4b5d      	ldr	r3, [pc, #372]	; (40419c <ip_input+0x248>)
  404026:	681b      	ldr	r3, [r3, #0]
  404028:	69b9      	ldr	r1, [r7, #24]
  40402a:	4618      	mov	r0, r3
  40402c:	4b5d      	ldr	r3, [pc, #372]	; (4041a4 <ip_input+0x250>)
  40402e:	4798      	blx	r3
  404030:	4603      	mov	r3, r0
        if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
  404032:	2b00      	cmp	r3, #0
  404034:	d115      	bne.n	404062 <ip_input+0x10e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  404036:	693b      	ldr	r3, [r7, #16]
  404038:	2b00      	cmp	r3, #0
  40403a:	d005      	beq.n	404048 <ip_input+0xf4>
        first = 0;
  40403c:	2300      	movs	r3, #0
  40403e:	613b      	str	r3, [r7, #16]
        netif = netif_list;
  404040:	4b59      	ldr	r3, [pc, #356]	; (4041a8 <ip_input+0x254>)
  404042:	681b      	ldr	r3, [r3, #0]
  404044:	61bb      	str	r3, [r7, #24]
  404046:	e002      	b.n	40404e <ip_input+0xfa>
      } else {
        netif = netif->next;
  404048:	69bb      	ldr	r3, [r7, #24]
  40404a:	681b      	ldr	r3, [r3, #0]
  40404c:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
  40404e:	69ba      	ldr	r2, [r7, #24]
  404050:	683b      	ldr	r3, [r7, #0]
  404052:	429a      	cmp	r2, r3
  404054:	d102      	bne.n	40405c <ip_input+0x108>
        netif = netif->next;
  404056:	69bb      	ldr	r3, [r7, #24]
  404058:	681b      	ldr	r3, [r3, #0]
  40405a:	61bb      	str	r3, [r7, #24]
      }
    } while(netif != NULL);
  40405c:	69bb      	ldr	r3, [r7, #24]
  40405e:	2b00      	cmp	r3, #0
  404060:	d1cb      	bne.n	403ffa <ip_input+0xa6>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  404062:	69bb      	ldr	r3, [r7, #24]
  404064:	2b00      	cmp	r3, #0
  404066:	d111      	bne.n	40408c <ip_input+0x138>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  404068:	69fb      	ldr	r3, [r7, #28]
  40406a:	7a5b      	ldrb	r3, [r3, #9]
  40406c:	2b11      	cmp	r3, #17
  40406e:	d10d      	bne.n	40408c <ip_input+0x138>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  404070:	89fb      	ldrh	r3, [r7, #14]
  404072:	69fa      	ldr	r2, [r7, #28]
  404074:	4413      	add	r3, r2
  404076:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
        ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  404078:	68bb      	ldr	r3, [r7, #8]
  40407a:	885b      	ldrh	r3, [r3, #2]
  40407c:	b29b      	uxth	r3, r3
  40407e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
  404082:	d103      	bne.n	40408c <ip_input+0x138>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
        netif = inp;
  404084:	683b      	ldr	r3, [r7, #0]
  404086:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
  404088:	2300      	movs	r3, #0
  40408a:	617b      	str	r3, [r7, #20]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
  if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
  40408c:	697b      	ldr	r3, [r7, #20]
  40408e:	2b00      	cmp	r3, #0
  404090:	d017      	beq.n	4040c2 <ip_input+0x16e>
  404092:	4b43      	ldr	r3, [pc, #268]	; (4041a0 <ip_input+0x24c>)
  404094:	681b      	ldr	r3, [r3, #0]
  404096:	2b00      	cmp	r3, #0
  404098:	d013      	beq.n	4040c2 <ip_input+0x16e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  40409a:	4b41      	ldr	r3, [pc, #260]	; (4041a0 <ip_input+0x24c>)
  40409c:	681b      	ldr	r3, [r3, #0]
  40409e:	6839      	ldr	r1, [r7, #0]
  4040a0:	4618      	mov	r0, r3
  4040a2:	4b40      	ldr	r3, [pc, #256]	; (4041a4 <ip_input+0x250>)
  4040a4:	4798      	blx	r3
  4040a6:	4603      	mov	r3, r0
  4040a8:	2b00      	cmp	r3, #0
  4040aa:	d105      	bne.n	4040b8 <ip_input+0x164>
         (ip_addr_ismulticast(&current_iphdr_src))) {
  4040ac:	4b3c      	ldr	r3, [pc, #240]	; (4041a0 <ip_input+0x24c>)
  4040ae:	681b      	ldr	r3, [r3, #0]
  4040b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
  4040b4:	2be0      	cmp	r3, #224	; 0xe0
  4040b6:	d104      	bne.n	4040c2 <ip_input+0x16e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  4040b8:	6878      	ldr	r0, [r7, #4]
  4040ba:	4b34      	ldr	r3, [pc, #208]	; (40418c <ip_input+0x238>)
  4040bc:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
      return ERR_OK;
  4040be:	2300      	movs	r3, #0
  4040c0:	e060      	b.n	404184 <ip_input+0x230>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  4040c2:	69bb      	ldr	r3, [r7, #24]
  4040c4:	2b00      	cmp	r3, #0
  4040c6:	d104      	bne.n	4040d2 <ip_input+0x17e>
#endif /* IP_FORWARD */
    {
      snmp_inc_ipinaddrerrors();
      snmp_inc_ipindiscards();
    }
    pbuf_free(p);
  4040c8:	6878      	ldr	r0, [r7, #4]
  4040ca:	4b30      	ldr	r3, [pc, #192]	; (40418c <ip_input+0x238>)
  4040cc:	4798      	blx	r3
    return ERR_OK;
  4040ce:	2300      	movs	r3, #0
  4040d0:	e058      	b.n	404184 <ip_input+0x230>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  4040d2:	69fb      	ldr	r3, [r7, #28]
  4040d4:	88db      	ldrh	r3, [r3, #6]
  4040d6:	b29b      	uxth	r3, r3
  4040d8:	461a      	mov	r2, r3
  4040da:	f64f 733f 	movw	r3, #65343	; 0xff3f
  4040de:	4013      	ands	r3, r2
  4040e0:	2b00      	cmp	r3, #0
  4040e2:	d00b      	beq.n	4040fc <ip_input+0x1a8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
      ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
    /* reassemble the packet*/
    p = ip_reass(p);
  4040e4:	6878      	ldr	r0, [r7, #4]
  4040e6:	4b31      	ldr	r3, [pc, #196]	; (4041ac <ip_input+0x258>)
  4040e8:	4798      	blx	r3
  4040ea:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  4040ec:	687b      	ldr	r3, [r7, #4]
  4040ee:	2b00      	cmp	r3, #0
  4040f0:	d101      	bne.n	4040f6 <ip_input+0x1a2>
      return ERR_OK;
  4040f2:	2300      	movs	r3, #0
  4040f4:	e046      	b.n	404184 <ip_input+0x230>
    }
    iphdr = (struct ip_hdr *)p->payload;
  4040f6:	687b      	ldr	r3, [r7, #4]
  4040f8:	685b      	ldr	r3, [r3, #4]
  4040fa:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
  ip_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  current_netif = inp;
  4040fc:	4a2c      	ldr	r2, [pc, #176]	; (4041b0 <ip_input+0x25c>)
  4040fe:	683b      	ldr	r3, [r7, #0]
  404100:	6013      	str	r3, [r2, #0]
  current_header = iphdr;
  404102:	4a2c      	ldr	r2, [pc, #176]	; (4041b4 <ip_input+0x260>)
  404104:	69fb      	ldr	r3, [r7, #28]
  404106:	6013      	str	r3, [r2, #0]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    switch (IPH_PROTO(iphdr)) {
  404108:	69fb      	ldr	r3, [r7, #28]
  40410a:	7a5b      	ldrb	r3, [r3, #9]
  40410c:	2b06      	cmp	r3, #6
  40410e:	d009      	beq.n	404124 <ip_input+0x1d0>
  404110:	2b11      	cmp	r3, #17
  404112:	d002      	beq.n	40411a <ip_input+0x1c6>
  404114:	2b01      	cmp	r3, #1
  404116:	d00a      	beq.n	40412e <ip_input+0x1da>
  404118:	e00e      	b.n	404138 <ip_input+0x1e4>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      snmp_inc_ipindelivers();
      udp_input(p, inp);
  40411a:	6839      	ldr	r1, [r7, #0]
  40411c:	6878      	ldr	r0, [r7, #4]
  40411e:	4b26      	ldr	r3, [pc, #152]	; (4041b8 <ip_input+0x264>)
  404120:	4798      	blx	r3
      break;
  404122:	e022      	b.n	40416a <ip_input+0x216>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      snmp_inc_ipindelivers();
      tcp_input(p, inp);
  404124:	6839      	ldr	r1, [r7, #0]
  404126:	6878      	ldr	r0, [r7, #4]
  404128:	4b24      	ldr	r3, [pc, #144]	; (4041bc <ip_input+0x268>)
  40412a:	4798      	blx	r3
      break;
  40412c:	e01d      	b.n	40416a <ip_input+0x216>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      snmp_inc_ipindelivers();
      icmp_input(p, inp);
  40412e:	6839      	ldr	r1, [r7, #0]
  404130:	6878      	ldr	r0, [r7, #4]
  404132:	4b23      	ldr	r3, [pc, #140]	; (4041c0 <ip_input+0x26c>)
  404134:	4798      	blx	r3
      break;
  404136:	e018      	b.n	40416a <ip_input+0x216>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  404138:	4b18      	ldr	r3, [pc, #96]	; (40419c <ip_input+0x248>)
  40413a:	681b      	ldr	r3, [r3, #0]
  40413c:	6839      	ldr	r1, [r7, #0]
  40413e:	4618      	mov	r0, r3
  404140:	4b18      	ldr	r3, [pc, #96]	; (4041a4 <ip_input+0x250>)
  404142:	4798      	blx	r3
  404144:	4603      	mov	r3, r0
  404146:	2b00      	cmp	r3, #0
  404148:	d10c      	bne.n	404164 <ip_input+0x210>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  40414a:	4b14      	ldr	r3, [pc, #80]	; (40419c <ip_input+0x248>)
  40414c:	681b      	ldr	r3, [r3, #0]
  40414e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
  404152:	2be0      	cmp	r3, #224	; 0xe0
  404154:	d006      	beq.n	404164 <ip_input+0x210>
        p->payload = iphdr;
  404156:	687b      	ldr	r3, [r7, #4]
  404158:	69fa      	ldr	r2, [r7, #28]
  40415a:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  40415c:	2102      	movs	r1, #2
  40415e:	6878      	ldr	r0, [r7, #4]
  404160:	4b18      	ldr	r3, [pc, #96]	; (4041c4 <ip_input+0x270>)
  404162:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  404164:	6878      	ldr	r0, [r7, #4]
  404166:	4b09      	ldr	r3, [pc, #36]	; (40418c <ip_input+0x238>)
  404168:	4798      	blx	r3
      IP_STATS_INC(ip.drop);
      snmp_inc_ipinunknownprotos();
    }
  }

  current_netif = NULL;
  40416a:	4b11      	ldr	r3, [pc, #68]	; (4041b0 <ip_input+0x25c>)
  40416c:	2200      	movs	r2, #0
  40416e:	601a      	str	r2, [r3, #0]
  current_header = NULL;
  404170:	4b10      	ldr	r3, [pc, #64]	; (4041b4 <ip_input+0x260>)
  404172:	2200      	movs	r2, #0
  404174:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_src);
  404176:	4b0a      	ldr	r3, [pc, #40]	; (4041a0 <ip_input+0x24c>)
  404178:	2200      	movs	r2, #0
  40417a:	601a      	str	r2, [r3, #0]
  ip_addr_set_any(&current_iphdr_dest);
  40417c:	4b07      	ldr	r3, [pc, #28]	; (40419c <ip_input+0x248>)
  40417e:	2200      	movs	r2, #0
  404180:	601a      	str	r2, [r3, #0]

  return ERR_OK;
  404182:	2300      	movs	r3, #0
}
  404184:	4618      	mov	r0, r3
  404186:	3720      	adds	r7, #32
  404188:	46bd      	mov	sp, r7
  40418a:	bd80      	pop	{r7, pc}
  40418c:	00405b81 	.word	0x00405b81
  404190:	00401fc5 	.word	0x00401fc5
  404194:	00403e1d 	.word	0x00403e1d
  404198:	004059e9 	.word	0x004059e9
  40419c:	20403974 	.word	0x20403974
  4041a0:	2040396c 	.word	0x2040396c
  4041a4:	004043d1 	.word	0x004043d1
  4041a8:	20404990 	.word	0x20404990
  4041ac:	004048ed 	.word	0x004048ed
  4041b0:	20403970 	.word	0x20403970
  4041b4:	20403978 	.word	0x20403978
  4041b8:	0040a78d 	.word	0x0040a78d
  4041bc:	004073b1 	.word	0x004073b1
  4041c0:	0040391d 	.word	0x0040391d
  4041c4:	00403b45 	.word	0x00403b45

004041c8 <ip_output_if>:
 */
err_t
ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  4041c8:	b580      	push	{r7, lr}
  4041ca:	b088      	sub	sp, #32
  4041cc:	af00      	add	r7, sp, #0
  4041ce:	60f8      	str	r0, [r7, #12]
  4041d0:	60b9      	str	r1, [r7, #8]
  4041d2:	607a      	str	r2, [r7, #4]
  4041d4:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  4041d6:	2300      	movs	r3, #0
  4041d8:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  snmp_inc_ipoutrequests();

  /* Should the IP header be generated or is it already included in p? */
  if (dest != IP_HDRINCL) {
  4041da:	687b      	ldr	r3, [r7, #4]
  4041dc:	2b00      	cmp	r3, #0
  4041de:	f000 80a0 	beq.w	404322 <ip_output_if+0x15a>
    u16_t ip_hlen = IP_HLEN;
  4041e2:	2314      	movs	r3, #20
  4041e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  4041e6:	2114      	movs	r1, #20
  4041e8:	68f8      	ldr	r0, [r7, #12]
  4041ea:	4b60      	ldr	r3, [pc, #384]	; (40436c <ip_output_if+0x1a4>)
  4041ec:	4798      	blx	r3
  4041ee:	4603      	mov	r3, r0
  4041f0:	2b00      	cmp	r3, #0
  4041f2:	d002      	beq.n	4041fa <ip_output_if+0x32>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      snmp_inc_ipoutdiscards();
      return ERR_BUF;
  4041f4:	f06f 0301 	mvn.w	r3, #1
  4041f8:	e0b4      	b.n	404364 <ip_output_if+0x19c>
    }

    iphdr = (struct ip_hdr *)p->payload;
  4041fa:	68fb      	ldr	r3, [r7, #12]
  4041fc:	685b      	ldr	r3, [r3, #4]
  4041fe:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  404200:	697b      	ldr	r3, [r7, #20]
  404202:	78fa      	ldrb	r2, [r7, #3]
  404204:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  404206:	697b      	ldr	r3, [r7, #20]
  404208:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
  40420c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(proto, ttl);
  40420e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  404212:	021a      	lsls	r2, r3, #8
  404214:	78fb      	ldrb	r3, [r7, #3]
  404216:	4313      	orrs	r3, r2
  404218:	461a      	mov	r2, r3
  40421a:	69fb      	ldr	r3, [r7, #28]
  40421c:	4413      	add	r3, r2
  40421e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip_addr_copy(iphdr->dest, *dest);
  404220:	687b      	ldr	r3, [r7, #4]
  404222:	681a      	ldr	r2, [r3, #0]
  404224:	697b      	ldr	r3, [r7, #20]
  404226:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  404228:	697b      	ldr	r3, [r7, #20]
  40422a:	691b      	ldr	r3, [r3, #16]
  40422c:	b29b      	uxth	r3, r3
  40422e:	69fa      	ldr	r2, [r7, #28]
  404230:	4413      	add	r3, r2
  404232:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  404234:	697b      	ldr	r3, [r7, #20]
  404236:	691b      	ldr	r3, [r3, #16]
  404238:	0c1b      	lsrs	r3, r3, #16
  40423a:	69fa      	ldr	r2, [r7, #28]
  40423c:	4413      	add	r3, r2
  40423e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  404240:	8b7b      	ldrh	r3, [r7, #26]
  404242:	089b      	lsrs	r3, r3, #2
  404244:	b29b      	uxth	r3, r3
  404246:	b2db      	uxtb	r3, r3
  404248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40424c:	b2da      	uxtb	r2, r3
  40424e:	697b      	ldr	r3, [r7, #20]
  404250:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
  404252:	697b      	ldr	r3, [r7, #20]
  404254:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  404258:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
  40425a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  40425e:	021b      	lsls	r3, r3, #8
  404260:	697a      	ldr	r2, [r7, #20]
  404262:	7812      	ldrb	r2, [r2, #0]
  404264:	4313      	orrs	r3, r2
  404266:	461a      	mov	r2, r3
  404268:	69fb      	ldr	r3, [r7, #28]
  40426a:	4413      	add	r3, r2
  40426c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, htons(p->tot_len));
  40426e:	68fb      	ldr	r3, [r7, #12]
  404270:	891b      	ldrh	r3, [r3, #8]
  404272:	4618      	mov	r0, r3
  404274:	4b3e      	ldr	r3, [pc, #248]	; (404370 <ip_output_if+0x1a8>)
  404276:	4798      	blx	r3
  404278:	4603      	mov	r3, r0
  40427a:	461a      	mov	r2, r3
  40427c:	697b      	ldr	r3, [r7, #20]
  40427e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  404280:	697b      	ldr	r3, [r7, #20]
  404282:	885b      	ldrh	r3, [r3, #2]
  404284:	b29b      	uxth	r3, r3
  404286:	461a      	mov	r2, r3
  404288:	69fb      	ldr	r3, [r7, #28]
  40428a:	4413      	add	r3, r2
  40428c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  40428e:	697b      	ldr	r3, [r7, #20]
  404290:	2200      	movs	r2, #0
  404292:	719a      	strb	r2, [r3, #6]
  404294:	2200      	movs	r2, #0
  404296:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, htons(ip_id));
  404298:	4b36      	ldr	r3, [pc, #216]	; (404374 <ip_output_if+0x1ac>)
  40429a:	881b      	ldrh	r3, [r3, #0]
  40429c:	4618      	mov	r0, r3
  40429e:	4b34      	ldr	r3, [pc, #208]	; (404370 <ip_output_if+0x1a8>)
  4042a0:	4798      	blx	r3
  4042a2:	4603      	mov	r3, r0
  4042a4:	461a      	mov	r2, r3
  4042a6:	697b      	ldr	r3, [r7, #20]
  4042a8:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  4042aa:	697b      	ldr	r3, [r7, #20]
  4042ac:	889b      	ldrh	r3, [r3, #4]
  4042ae:	b29b      	uxth	r3, r3
  4042b0:	461a      	mov	r2, r3
  4042b2:	69fb      	ldr	r3, [r7, #28]
  4042b4:	4413      	add	r3, r2
  4042b6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  4042b8:	4b2e      	ldr	r3, [pc, #184]	; (404374 <ip_output_if+0x1ac>)
  4042ba:	881b      	ldrh	r3, [r3, #0]
  4042bc:	3301      	adds	r3, #1
  4042be:	b29a      	uxth	r2, r3
  4042c0:	4b2c      	ldr	r3, [pc, #176]	; (404374 <ip_output_if+0x1ac>)
  4042c2:	801a      	strh	r2, [r3, #0]

    if (ip_addr_isany(src)) {
  4042c4:	68bb      	ldr	r3, [r7, #8]
  4042c6:	2b00      	cmp	r3, #0
  4042c8:	d003      	beq.n	4042d2 <ip_output_if+0x10a>
  4042ca:	68bb      	ldr	r3, [r7, #8]
  4042cc:	681b      	ldr	r3, [r3, #0]
  4042ce:	2b00      	cmp	r3, #0
  4042d0:	d104      	bne.n	4042dc <ip_output_if+0x114>
      ip_addr_copy(iphdr->src, netif->ip_addr);
  4042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4042d4:	685a      	ldr	r2, [r3, #4]
  4042d6:	697b      	ldr	r3, [r7, #20]
  4042d8:	60da      	str	r2, [r3, #12]
  4042da:	e003      	b.n	4042e4 <ip_output_if+0x11c>
    } else {
      /* src cannot be NULL here */
      ip_addr_copy(iphdr->src, *src);
  4042dc:	68bb      	ldr	r3, [r7, #8]
  4042de:	681a      	ldr	r2, [r3, #0]
  4042e0:	697b      	ldr	r3, [r7, #20]
  4042e2:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  4042e4:	697b      	ldr	r3, [r7, #20]
  4042e6:	68db      	ldr	r3, [r3, #12]
  4042e8:	b29b      	uxth	r3, r3
  4042ea:	69fa      	ldr	r2, [r7, #28]
  4042ec:	4413      	add	r3, r2
  4042ee:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  4042f0:	697b      	ldr	r3, [r7, #20]
  4042f2:	68db      	ldr	r3, [r3, #12]
  4042f4:	0c1b      	lsrs	r3, r3, #16
  4042f6:	69fa      	ldr	r2, [r7, #28]
  4042f8:	4413      	add	r3, r2
  4042fa:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  4042fc:	69fb      	ldr	r3, [r7, #28]
  4042fe:	0c1a      	lsrs	r2, r3, #16
  404300:	69fb      	ldr	r3, [r7, #28]
  404302:	b29b      	uxth	r3, r3
  404304:	4413      	add	r3, r2
  404306:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
  404308:	69fb      	ldr	r3, [r7, #28]
  40430a:	0c1b      	lsrs	r3, r3, #16
  40430c:	69fa      	ldr	r2, [r7, #28]
  40430e:	4413      	add	r3, r2
  404310:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
  404312:	69fb      	ldr	r3, [r7, #28]
  404314:	43db      	mvns	r3, r3
  404316:	61fb      	str	r3, [r7, #28]
    iphdr->_chksum = chk_sum; /* network order */
  404318:	69fb      	ldr	r3, [r7, #28]
  40431a:	b29a      	uxth	r2, r3
  40431c:	697b      	ldr	r3, [r7, #20]
  40431e:	815a      	strh	r2, [r3, #10]
  404320:	e008      	b.n	404334 <ip_output_if+0x16c>
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
#endif
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  404322:	68fb      	ldr	r3, [r7, #12]
  404324:	685b      	ldr	r3, [r3, #4]
  404326:	617b      	str	r3, [r7, #20]
    ip_addr_copy(dest_addr, iphdr->dest);
  404328:	697b      	ldr	r3, [r7, #20]
  40432a:	691b      	ldr	r3, [r3, #16]
  40432c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
  40432e:	f107 0310 	add.w	r3, r7, #16
  404332:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_IGMP */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  404334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  404338:	2b00      	cmp	r3, #0
  40433a:	d00c      	beq.n	404356 <ip_output_if+0x18e>
  40433c:	68fb      	ldr	r3, [r7, #12]
  40433e:	891a      	ldrh	r2, [r3, #8]
  404340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404342:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  404344:	429a      	cmp	r2, r3
  404346:	d906      	bls.n	404356 <ip_output_if+0x18e>
    return ip_frag(p, netif, dest);
  404348:	687a      	ldr	r2, [r7, #4]
  40434a:	6b39      	ldr	r1, [r7, #48]	; 0x30
  40434c:	68f8      	ldr	r0, [r7, #12]
  40434e:	4b0a      	ldr	r3, [pc, #40]	; (404378 <ip_output_if+0x1b0>)
  404350:	4798      	blx	r3
  404352:	4603      	mov	r3, r0
  404354:	e006      	b.n	404364 <ip_output_if+0x19c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
  return netif->output(netif, p, dest);
  404356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404358:	695b      	ldr	r3, [r3, #20]
  40435a:	687a      	ldr	r2, [r7, #4]
  40435c:	68f9      	ldr	r1, [r7, #12]
  40435e:	6b38      	ldr	r0, [r7, #48]	; 0x30
  404360:	4798      	blx	r3
  404362:	4603      	mov	r3, r0
}
  404364:	4618      	mov	r0, r3
  404366:	3720      	adds	r7, #32
  404368:	46bd      	mov	sp, r7
  40436a:	bd80      	pop	{r7, pc}
  40436c:	00405aa5 	.word	0x00405aa5
  404370:	00401f99 	.word	0x00401f99
  404374:	20400aa8 	.word	0x20400aa8
  404378:	00404b61 	.word	0x00404b61

0040437c <ip_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  40437c:	b590      	push	{r4, r7, lr}
  40437e:	b08b      	sub	sp, #44	; 0x2c
  404380:	af04      	add	r7, sp, #16
  404382:	60f8      	str	r0, [r7, #12]
  404384:	60b9      	str	r1, [r7, #8]
  404386:	607a      	str	r2, [r7, #4]
  404388:	70fb      	strb	r3, [r7, #3]

  /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
     gets altered as the packet is passed down the stack */
  LWIP_ASSERT("p->ref == 1", p->ref == 1);

  if ((netif = ip_route(dest)) == NULL) {
  40438a:	6878      	ldr	r0, [r7, #4]
  40438c:	4b0e      	ldr	r3, [pc, #56]	; (4043c8 <ip_output+0x4c>)
  40438e:	4798      	blx	r3
  404390:	6178      	str	r0, [r7, #20]
  404392:	697b      	ldr	r3, [r7, #20]
  404394:	2b00      	cmp	r3, #0
  404396:	d102      	bne.n	40439e <ip_output+0x22>
    LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    return ERR_RTE;
  404398:	f06f 0303 	mvn.w	r3, #3
  40439c:	e00f      	b.n	4043be <ip_output+0x42>
  }

  return ip_output_if(p, src, dest, ttl, tos, proto, netif);
  40439e:	78fa      	ldrb	r2, [r7, #3]
  4043a0:	697b      	ldr	r3, [r7, #20]
  4043a2:	9302      	str	r3, [sp, #8]
  4043a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
  4043a8:	9301      	str	r3, [sp, #4]
  4043aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4043ae:	9300      	str	r3, [sp, #0]
  4043b0:	4613      	mov	r3, r2
  4043b2:	687a      	ldr	r2, [r7, #4]
  4043b4:	68b9      	ldr	r1, [r7, #8]
  4043b6:	68f8      	ldr	r0, [r7, #12]
  4043b8:	4c04      	ldr	r4, [pc, #16]	; (4043cc <ip_output+0x50>)
  4043ba:	47a0      	blx	r4
  4043bc:	4603      	mov	r3, r0
}
  4043be:	4618      	mov	r0, r3
  4043c0:	371c      	adds	r7, #28
  4043c2:	46bd      	mov	sp, r7
  4043c4:	bd90      	pop	{r4, r7, pc}
  4043c6:	bf00      	nop
  4043c8:	00403edd 	.word	0x00403edd
  4043cc:	004041c9 	.word	0x004041c9

004043d0 <ip4_addr_isbroadcast>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
{
  4043d0:	b480      	push	{r7}
  4043d2:	b085      	sub	sp, #20
  4043d4:	af00      	add	r7, sp, #0
  4043d6:	6078      	str	r0, [r7, #4]
  4043d8:	6039      	str	r1, [r7, #0]
  ip_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  4043da:	687b      	ldr	r3, [r7, #4]
  4043dc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  4043de:	687b      	ldr	r3, [r7, #4]
  4043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4043e4:	d002      	beq.n	4043ec <ip4_addr_isbroadcast+0x1c>
  4043e6:	687b      	ldr	r3, [r7, #4]
  4043e8:	2b00      	cmp	r3, #0
  4043ea:	d101      	bne.n	4043f0 <ip4_addr_isbroadcast+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
  4043ec:	2301      	movs	r3, #1
  4043ee:	e025      	b.n	40443c <ip4_addr_isbroadcast+0x6c>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  4043f0:	683b      	ldr	r3, [r7, #0]
  4043f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4043f6:	f003 0302 	and.w	r3, r3, #2
  4043fa:	2b00      	cmp	r3, #0
  4043fc:	d101      	bne.n	404402 <ip4_addr_isbroadcast+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  4043fe:	2300      	movs	r3, #0
  404400:	e01c      	b.n	40443c <ip4_addr_isbroadcast+0x6c>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
  404402:	683b      	ldr	r3, [r7, #0]
  404404:	685a      	ldr	r2, [r3, #4]
  404406:	687b      	ldr	r3, [r7, #4]
  404408:	429a      	cmp	r2, r3
  40440a:	d101      	bne.n	404410 <ip4_addr_isbroadcast+0x40>
    return 0;
  40440c:	2300      	movs	r3, #0
  40440e:	e015      	b.n	40443c <ip4_addr_isbroadcast+0x6c>
  /*  on the same (sub) network... */
  } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
  404410:	68fa      	ldr	r2, [r7, #12]
  404412:	683b      	ldr	r3, [r7, #0]
  404414:	685b      	ldr	r3, [r3, #4]
  404416:	405a      	eors	r2, r3
  404418:	683b      	ldr	r3, [r7, #0]
  40441a:	689b      	ldr	r3, [r3, #8]
  40441c:	4013      	ands	r3, r2
  40441e:	2b00      	cmp	r3, #0
  404420:	d10b      	bne.n	40443a <ip4_addr_isbroadcast+0x6a>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  404422:	683b      	ldr	r3, [r7, #0]
  404424:	689b      	ldr	r3, [r3, #8]
  404426:	43da      	mvns	r2, r3
  404428:	687b      	ldr	r3, [r7, #4]
  40442a:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
  40442c:	683b      	ldr	r3, [r7, #0]
  40442e:	689b      	ldr	r3, [r3, #8]
  404430:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
  404432:	429a      	cmp	r2, r3
  404434:	d101      	bne.n	40443a <ip4_addr_isbroadcast+0x6a>
    /* => network broadcast address */
    return 1;
  404436:	2301      	movs	r3, #1
  404438:	e000      	b.n	40443c <ip4_addr_isbroadcast+0x6c>
  } else {
    return 0;
  40443a:	2300      	movs	r3, #0
  }
}
  40443c:	4618      	mov	r0, r3
  40443e:	3714      	adds	r7, #20
  404440:	46bd      	mov	sp, r7
  404442:	f85d 7b04 	ldr.w	r7, [sp], #4
  404446:	4770      	bx	lr

00404448 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  404448:	b580      	push	{r7, lr}
  40444a:	b084      	sub	sp, #16
  40444c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
  40444e:	2300      	movs	r3, #0
  404450:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
  404452:	4b12      	ldr	r3, [pc, #72]	; (40449c <ip_reass_tmr+0x54>)
  404454:	681b      	ldr	r3, [r3, #0]
  404456:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
  404458:	e018      	b.n	40448c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  40445a:	68fb      	ldr	r3, [r7, #12]
  40445c:	7fdb      	ldrb	r3, [r3, #31]
  40445e:	2b00      	cmp	r3, #0
  404460:	d00b      	beq.n	40447a <ip_reass_tmr+0x32>
      r->timer--;
  404462:	68fb      	ldr	r3, [r7, #12]
  404464:	7fdb      	ldrb	r3, [r3, #31]
  404466:	3b01      	subs	r3, #1
  404468:	b2da      	uxtb	r2, r3
  40446a:	68fb      	ldr	r3, [r7, #12]
  40446c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  40446e:	68fb      	ldr	r3, [r7, #12]
  404470:	60bb      	str	r3, [r7, #8]
      r = r->next;
  404472:	68fb      	ldr	r3, [r7, #12]
  404474:	681b      	ldr	r3, [r3, #0]
  404476:	60fb      	str	r3, [r7, #12]
  404478:	e008      	b.n	40448c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  40447a:	68fb      	ldr	r3, [r7, #12]
  40447c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
  40447e:	68fb      	ldr	r3, [r7, #12]
  404480:	681b      	ldr	r3, [r3, #0]
  404482:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  404484:	68b9      	ldr	r1, [r7, #8]
  404486:	6878      	ldr	r0, [r7, #4]
  404488:	4b05      	ldr	r3, [pc, #20]	; (4044a0 <ip_reass_tmr+0x58>)
  40448a:	4798      	blx	r3
  while (r != NULL) {
  40448c:	68fb      	ldr	r3, [r7, #12]
  40448e:	2b00      	cmp	r3, #0
  404490:	d1e3      	bne.n	40445a <ip_reass_tmr+0x12>
     }
   }
}
  404492:	bf00      	nop
  404494:	3710      	adds	r7, #16
  404496:	46bd      	mov	sp, r7
  404498:	bd80      	pop	{r7, pc}
  40449a:	bf00      	nop
  40449c:	20400aac 	.word	0x20400aac
  4044a0:	004044a5 	.word	0x004044a5

004044a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  4044a4:	b580      	push	{r7, lr}
  4044a6:	b088      	sub	sp, #32
  4044a8:	af00      	add	r7, sp, #0
  4044aa:	6078      	str	r0, [r7, #4]
  4044ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
  4044ae:	2300      	movs	r3, #0
  4044b0:	83fb      	strh	r3, [r7, #30]
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  }

  snmp_inc_ipreasmfails();
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  4044b2:	687b      	ldr	r3, [r7, #4]
  4044b4:	685b      	ldr	r3, [r3, #4]
  4044b6:	685b      	ldr	r3, [r3, #4]
  4044b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
  4044ba:	697b      	ldr	r3, [r7, #20]
  4044bc:	889b      	ldrh	r3, [r3, #4]
  4044be:	b29b      	uxth	r3, r3
  4044c0:	2b00      	cmp	r3, #0
  4044c2:	d11f      	bne.n	404504 <ip_reass_free_complete_datagram+0x60>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  4044c4:	687b      	ldr	r3, [r7, #4]
  4044c6:	685b      	ldr	r3, [r3, #4]
  4044c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
  4044ca:	697b      	ldr	r3, [r7, #20]
  4044cc:	681a      	ldr	r2, [r3, #0]
  4044ce:	687b      	ldr	r3, [r7, #4]
  4044d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  4044d2:	69bb      	ldr	r3, [r7, #24]
  4044d4:	6858      	ldr	r0, [r3, #4]
  4044d6:	687b      	ldr	r3, [r7, #4]
  4044d8:	3308      	adds	r3, #8
  4044da:	2214      	movs	r2, #20
  4044dc:	4619      	mov	r1, r3
  4044de:	4b1f      	ldr	r3, [pc, #124]	; (40455c <ip_reass_free_complete_datagram+0xb8>)
  4044e0:	4798      	blx	r3
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  4044e2:	2101      	movs	r1, #1
  4044e4:	69b8      	ldr	r0, [r7, #24]
  4044e6:	4b1e      	ldr	r3, [pc, #120]	; (404560 <ip_reass_free_complete_datagram+0xbc>)
  4044e8:	4798      	blx	r3
    clen = pbuf_clen(p);
  4044ea:	69b8      	ldr	r0, [r7, #24]
  4044ec:	4b1d      	ldr	r3, [pc, #116]	; (404564 <ip_reass_free_complete_datagram+0xc0>)
  4044ee:	4798      	blx	r3
  4044f0:	4603      	mov	r3, r0
  4044f2:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  4044f4:	7cfb      	ldrb	r3, [r7, #19]
  4044f6:	b29a      	uxth	r2, r3
  4044f8:	8bfb      	ldrh	r3, [r7, #30]
  4044fa:	4413      	add	r3, r2
  4044fc:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
  4044fe:	69b8      	ldr	r0, [r7, #24]
  404500:	4b19      	ldr	r3, [pc, #100]	; (404568 <ip_reass_free_complete_datagram+0xc4>)
  404502:	4798      	blx	r3
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released 
     separately as they have not yet been chained */
  p = ipr->p;
  404504:	687b      	ldr	r3, [r7, #4]
  404506:	685b      	ldr	r3, [r3, #4]
  404508:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
  40450a:	e014      	b.n	404536 <ip_reass_free_complete_datagram+0x92>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  40450c:	69bb      	ldr	r3, [r7, #24]
  40450e:	685b      	ldr	r3, [r3, #4]
  404510:	617b      	str	r3, [r7, #20]
    pcur = p;
  404512:	69bb      	ldr	r3, [r7, #24]
  404514:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  404516:	697b      	ldr	r3, [r7, #20]
  404518:	681b      	ldr	r3, [r3, #0]
  40451a:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
  40451c:	68f8      	ldr	r0, [r7, #12]
  40451e:	4b11      	ldr	r3, [pc, #68]	; (404564 <ip_reass_free_complete_datagram+0xc0>)
  404520:	4798      	blx	r3
  404522:	4603      	mov	r3, r0
  404524:	74fb      	strb	r3, [r7, #19]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
    pbufs_freed += clen;
  404526:	7cfb      	ldrb	r3, [r7, #19]
  404528:	b29a      	uxth	r2, r3
  40452a:	8bfb      	ldrh	r3, [r7, #30]
  40452c:	4413      	add	r3, r2
  40452e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
  404530:	68f8      	ldr	r0, [r7, #12]
  404532:	4b0d      	ldr	r3, [pc, #52]	; (404568 <ip_reass_free_complete_datagram+0xc4>)
  404534:	4798      	blx	r3
  while (p != NULL) {
  404536:	69bb      	ldr	r3, [r7, #24]
  404538:	2b00      	cmp	r3, #0
  40453a:	d1e7      	bne.n	40450c <ip_reass_free_complete_datagram+0x68>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  40453c:	6839      	ldr	r1, [r7, #0]
  40453e:	6878      	ldr	r0, [r7, #4]
  404540:	4b0a      	ldr	r3, [pc, #40]	; (40456c <ip_reass_free_complete_datagram+0xc8>)
  404542:	4798      	blx	r3
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  ip_reass_pbufcount -= pbufs_freed;
  404544:	4b0a      	ldr	r3, [pc, #40]	; (404570 <ip_reass_free_complete_datagram+0xcc>)
  404546:	881a      	ldrh	r2, [r3, #0]
  404548:	8bfb      	ldrh	r3, [r7, #30]
  40454a:	1ad3      	subs	r3, r2, r3
  40454c:	b29a      	uxth	r2, r3
  40454e:	4b08      	ldr	r3, [pc, #32]	; (404570 <ip_reass_free_complete_datagram+0xcc>)
  404550:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
  404552:	8bfb      	ldrh	r3, [r7, #30]
}
  404554:	4618      	mov	r0, r3
  404556:	3720      	adds	r7, #32
  404558:	46bd      	mov	sp, r7
  40455a:	bd80      	pop	{r7, pc}
  40455c:	0040cd79 	.word	0x0040cd79
  404560:	00403b69 	.word	0x00403b69
  404564:	00405c11 	.word	0x00405c11
  404568:	00405b81 	.word	0x00405b81
  40456c:	004046b5 	.word	0x004046b5
  404570:	20400ab0 	.word	0x20400ab0

00404574 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  404574:	b580      	push	{r7, lr}
  404576:	b088      	sub	sp, #32
  404578:	af00      	add	r7, sp, #0
  40457a:	6078      	str	r0, [r7, #4]
  40457c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev;
  int pbufs_freed = 0, pbufs_freed_current;
  40457e:	2300      	movs	r3, #0
  404580:	613b      	str	r3, [r7, #16]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  404582:	2300      	movs	r3, #0
  404584:	61bb      	str	r3, [r7, #24]
    prev = NULL;
  404586:	2300      	movs	r3, #0
  404588:	617b      	str	r3, [r7, #20]
    other_datagrams = 0;
  40458a:	2300      	movs	r3, #0
  40458c:	60fb      	str	r3, [r7, #12]
    r = reassdatagrams;
  40458e:	4b26      	ldr	r3, [pc, #152]	; (404628 <ip_reass_remove_oldest_datagram+0xb4>)
  404590:	681b      	ldr	r3, [r3, #0]
  404592:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
  404594:	e02c      	b.n	4045f0 <ip_reass_remove_oldest_datagram+0x7c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  404596:	69fb      	ldr	r3, [r7, #28]
  404598:	695a      	ldr	r2, [r3, #20]
  40459a:	687b      	ldr	r3, [r7, #4]
  40459c:	68db      	ldr	r3, [r3, #12]
  40459e:	429a      	cmp	r2, r3
  4045a0:	d10c      	bne.n	4045bc <ip_reass_remove_oldest_datagram+0x48>
  4045a2:	69fb      	ldr	r3, [r7, #28]
  4045a4:	699a      	ldr	r2, [r3, #24]
  4045a6:	687b      	ldr	r3, [r7, #4]
  4045a8:	691b      	ldr	r3, [r3, #16]
  4045aa:	429a      	cmp	r2, r3
  4045ac:	d106      	bne.n	4045bc <ip_reass_remove_oldest_datagram+0x48>
  4045ae:	69fb      	ldr	r3, [r7, #28]
  4045b0:	899a      	ldrh	r2, [r3, #12]
  4045b2:	687b      	ldr	r3, [r7, #4]
  4045b4:	889b      	ldrh	r3, [r3, #4]
  4045b6:	b29b      	uxth	r3, r3
  4045b8:	429a      	cmp	r2, r3
  4045ba:	d010      	beq.n	4045de <ip_reass_remove_oldest_datagram+0x6a>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  4045bc:	68fb      	ldr	r3, [r7, #12]
  4045be:	3301      	adds	r3, #1
  4045c0:	60fb      	str	r3, [r7, #12]
        if (oldest == NULL) {
  4045c2:	69bb      	ldr	r3, [r7, #24]
  4045c4:	2b00      	cmp	r3, #0
  4045c6:	d102      	bne.n	4045ce <ip_reass_remove_oldest_datagram+0x5a>
          oldest = r;
  4045c8:	69fb      	ldr	r3, [r7, #28]
  4045ca:	61bb      	str	r3, [r7, #24]
  4045cc:	e007      	b.n	4045de <ip_reass_remove_oldest_datagram+0x6a>
        } else if (r->timer <= oldest->timer) {
  4045ce:	69fb      	ldr	r3, [r7, #28]
  4045d0:	7fda      	ldrb	r2, [r3, #31]
  4045d2:	69bb      	ldr	r3, [r7, #24]
  4045d4:	7fdb      	ldrb	r3, [r3, #31]
  4045d6:	429a      	cmp	r2, r3
  4045d8:	d801      	bhi.n	4045de <ip_reass_remove_oldest_datagram+0x6a>
          /* older than the previous oldest */
          oldest = r;
  4045da:	69fb      	ldr	r3, [r7, #28]
  4045dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
  4045de:	69fb      	ldr	r3, [r7, #28]
  4045e0:	681b      	ldr	r3, [r3, #0]
  4045e2:	2b00      	cmp	r3, #0
  4045e4:	d001      	beq.n	4045ea <ip_reass_remove_oldest_datagram+0x76>
        prev = r;
  4045e6:	69fb      	ldr	r3, [r7, #28]
  4045e8:	617b      	str	r3, [r7, #20]
      }
      r = r->next;
  4045ea:	69fb      	ldr	r3, [r7, #28]
  4045ec:	681b      	ldr	r3, [r3, #0]
  4045ee:	61fb      	str	r3, [r7, #28]
    while (r != NULL) {
  4045f0:	69fb      	ldr	r3, [r7, #28]
  4045f2:	2b00      	cmp	r3, #0
  4045f4:	d1cf      	bne.n	404596 <ip_reass_remove_oldest_datagram+0x22>
    }
    if (oldest != NULL) {
  4045f6:	69bb      	ldr	r3, [r7, #24]
  4045f8:	2b00      	cmp	r3, #0
  4045fa:	d008      	beq.n	40460e <ip_reass_remove_oldest_datagram+0x9a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
  4045fc:	6979      	ldr	r1, [r7, #20]
  4045fe:	69b8      	ldr	r0, [r7, #24]
  404600:	4b0a      	ldr	r3, [pc, #40]	; (40462c <ip_reass_remove_oldest_datagram+0xb8>)
  404602:	4798      	blx	r3
  404604:	60b8      	str	r0, [r7, #8]
      pbufs_freed += pbufs_freed_current;
  404606:	693a      	ldr	r2, [r7, #16]
  404608:	68bb      	ldr	r3, [r7, #8]
  40460a:	4413      	add	r3, r2
  40460c:	613b      	str	r3, [r7, #16]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  40460e:	693a      	ldr	r2, [r7, #16]
  404610:	683b      	ldr	r3, [r7, #0]
  404612:	429a      	cmp	r2, r3
  404614:	da02      	bge.n	40461c <ip_reass_remove_oldest_datagram+0xa8>
  404616:	68fb      	ldr	r3, [r7, #12]
  404618:	2b01      	cmp	r3, #1
  40461a:	dcb2      	bgt.n	404582 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
  40461c:	693b      	ldr	r3, [r7, #16]
}
  40461e:	4618      	mov	r0, r3
  404620:	3720      	adds	r7, #32
  404622:	46bd      	mov	sp, r7
  404624:	bd80      	pop	{r7, pc}
  404626:	bf00      	nop
  404628:	20400aac 	.word	0x20400aac
  40462c:	004044a5 	.word	0x004044a5

00404630 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  404630:	b580      	push	{r7, lr}
  404632:	b084      	sub	sp, #16
  404634:	af00      	add	r7, sp, #0
  404636:	6078      	str	r0, [r7, #4]
  404638:	6039      	str	r1, [r7, #0]
  struct ip_reassdata* ipr;
  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  40463a:	2004      	movs	r0, #4
  40463c:	4b18      	ldr	r3, [pc, #96]	; (4046a0 <ip_reass_enqueue_new_datagram+0x70>)
  40463e:	4798      	blx	r3
  404640:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
  404642:	68fb      	ldr	r3, [r7, #12]
  404644:	2b00      	cmp	r3, #0
  404646:	d110      	bne.n	40466a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  404648:	6839      	ldr	r1, [r7, #0]
  40464a:	6878      	ldr	r0, [r7, #4]
  40464c:	4b15      	ldr	r3, [pc, #84]	; (4046a4 <ip_reass_enqueue_new_datagram+0x74>)
  40464e:	4798      	blx	r3
  404650:	4602      	mov	r2, r0
  404652:	683b      	ldr	r3, [r7, #0]
  404654:	429a      	cmp	r2, r3
  404656:	db03      	blt.n	404660 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  404658:	2004      	movs	r0, #4
  40465a:	4b11      	ldr	r3, [pc, #68]	; (4046a0 <ip_reass_enqueue_new_datagram+0x70>)
  40465c:	4798      	blx	r3
  40465e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
  404660:	68fb      	ldr	r3, [r7, #12]
  404662:	2b00      	cmp	r3, #0
  404664:	d101      	bne.n	40466a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  404666:	2300      	movs	r3, #0
  404668:	e016      	b.n	404698 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  40466a:	2220      	movs	r2, #32
  40466c:	2100      	movs	r1, #0
  40466e:	68f8      	ldr	r0, [r7, #12]
  404670:	4b0d      	ldr	r3, [pc, #52]	; (4046a8 <ip_reass_enqueue_new_datagram+0x78>)
  404672:	4798      	blx	r3
  ipr->timer = IP_REASS_MAXAGE;
  404674:	68fb      	ldr	r3, [r7, #12]
  404676:	2203      	movs	r2, #3
  404678:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  40467a:	4b0c      	ldr	r3, [pc, #48]	; (4046ac <ip_reass_enqueue_new_datagram+0x7c>)
  40467c:	681a      	ldr	r2, [r3, #0]
  40467e:	68fb      	ldr	r3, [r7, #12]
  404680:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
  404682:	4a0a      	ldr	r2, [pc, #40]	; (4046ac <ip_reass_enqueue_new_datagram+0x7c>)
  404684:	68fb      	ldr	r3, [r7, #12]
  404686:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  404688:	68fb      	ldr	r3, [r7, #12]
  40468a:	3308      	adds	r3, #8
  40468c:	2214      	movs	r2, #20
  40468e:	6879      	ldr	r1, [r7, #4]
  404690:	4618      	mov	r0, r3
  404692:	4b07      	ldr	r3, [pc, #28]	; (4046b0 <ip_reass_enqueue_new_datagram+0x80>)
  404694:	4798      	blx	r3
  return ipr;
  404696:	68fb      	ldr	r3, [r7, #12]
}
  404698:	4618      	mov	r0, r3
  40469a:	3710      	adds	r7, #16
  40469c:	46bd      	mov	sp, r7
  40469e:	bd80      	pop	{r7, pc}
  4046a0:	004054a5 	.word	0x004054a5
  4046a4:	00404575 	.word	0x00404575
  4046a8:	0040cead 	.word	0x0040cead
  4046ac:	20400aac 	.word	0x20400aac
  4046b0:	0040cd79 	.word	0x0040cd79

004046b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  4046b4:	b580      	push	{r7, lr}
  4046b6:	b082      	sub	sp, #8
  4046b8:	af00      	add	r7, sp, #0
  4046ba:	6078      	str	r0, [r7, #4]
  4046bc:	6039      	str	r1, [r7, #0]
  
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  4046be:	4b0b      	ldr	r3, [pc, #44]	; (4046ec <ip_reass_dequeue_datagram+0x38>)
  4046c0:	681a      	ldr	r2, [r3, #0]
  4046c2:	687b      	ldr	r3, [r7, #4]
  4046c4:	429a      	cmp	r2, r3
  4046c6:	d104      	bne.n	4046d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  4046c8:	687b      	ldr	r3, [r7, #4]
  4046ca:	681b      	ldr	r3, [r3, #0]
  4046cc:	4a07      	ldr	r2, [pc, #28]	; (4046ec <ip_reass_dequeue_datagram+0x38>)
  4046ce:	6013      	str	r3, [r2, #0]
  4046d0:	e003      	b.n	4046da <ip_reass_dequeue_datagram+0x26>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  4046d2:	687b      	ldr	r3, [r7, #4]
  4046d4:	681a      	ldr	r2, [r3, #0]
  4046d6:	683b      	ldr	r3, [r7, #0]
  4046d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reass struct */
  memp_free(MEMP_REASSDATA, ipr);
  4046da:	6879      	ldr	r1, [r7, #4]
  4046dc:	2004      	movs	r0, #4
  4046de:	4b04      	ldr	r3, [pc, #16]	; (4046f0 <ip_reass_dequeue_datagram+0x3c>)
  4046e0:	4798      	blx	r3
}
  4046e2:	bf00      	nop
  4046e4:	3708      	adds	r7, #8
  4046e6:	46bd      	mov	sp, r7
  4046e8:	bd80      	pop	{r7, pc}
  4046ea:	bf00      	nop
  4046ec:	20400aac 	.word	0x20400aac
  4046f0:	004054e5 	.word	0x004054e5

004046f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  4046f4:	b580      	push	{r7, lr}
  4046f6:	b08a      	sub	sp, #40	; 0x28
  4046f8:	af00      	add	r7, sp, #0
  4046fa:	6078      	str	r0, [r7, #4]
  4046fc:	6039      	str	r1, [r7, #0]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  4046fe:	2300      	movs	r3, #0
  404700:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *q;
  u16_t offset,len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  404702:	2301      	movs	r3, #1
  404704:	61fb      	str	r3, [r7, #28]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload; 
  404706:	683b      	ldr	r3, [r7, #0]
  404708:	685b      	ldr	r3, [r3, #4]
  40470a:	61bb      	str	r3, [r7, #24]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  40470c:	69bb      	ldr	r3, [r7, #24]
  40470e:	885b      	ldrh	r3, [r3, #2]
  404710:	b29b      	uxth	r3, r3
  404712:	4618      	mov	r0, r3
  404714:	4b71      	ldr	r3, [pc, #452]	; (4048dc <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  404716:	4798      	blx	r3
  404718:	4603      	mov	r3, r0
  40471a:	461a      	mov	r2, r3
  40471c:	69bb      	ldr	r3, [r7, #24]
  40471e:	781b      	ldrb	r3, [r3, #0]
  404720:	b29b      	uxth	r3, r3
  404722:	f003 030f 	and.w	r3, r3, #15
  404726:	b29b      	uxth	r3, r3
  404728:	009b      	lsls	r3, r3, #2
  40472a:	b29b      	uxth	r3, r3
  40472c:	1ad3      	subs	r3, r2, r3
  40472e:	82fb      	strh	r3, [r7, #22]
  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  404730:	69bb      	ldr	r3, [r7, #24]
  404732:	88db      	ldrh	r3, [r3, #6]
  404734:	b29b      	uxth	r3, r3
  404736:	4618      	mov	r0, r3
  404738:	4b68      	ldr	r3, [pc, #416]	; (4048dc <ip_reass_chain_frag_into_datagram_and_validate+0x1e8>)
  40473a:	4798      	blx	r3
  40473c:	4603      	mov	r3, r0
  40473e:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404742:	b29b      	uxth	r3, r3
  404744:	00db      	lsls	r3, r3, #3
  404746:	82bb      	strh	r3, [r7, #20]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  404748:	683b      	ldr	r3, [r7, #0]
  40474a:	685b      	ldr	r3, [r3, #4]
  40474c:	613b      	str	r3, [r7, #16]
  iprh->next_pbuf = NULL;
  40474e:	693b      	ldr	r3, [r7, #16]
  404750:	2200      	movs	r2, #0
  404752:	701a      	strb	r2, [r3, #0]
  404754:	2200      	movs	r2, #0
  404756:	705a      	strb	r2, [r3, #1]
  404758:	2200      	movs	r2, #0
  40475a:	709a      	strb	r2, [r3, #2]
  40475c:	2200      	movs	r2, #0
  40475e:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
  404760:	693b      	ldr	r3, [r7, #16]
  404762:	8aba      	ldrh	r2, [r7, #20]
  404764:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
  404766:	8aba      	ldrh	r2, [r7, #20]
  404768:	8afb      	ldrh	r3, [r7, #22]
  40476a:	4413      	add	r3, r2
  40476c:	b29a      	uxth	r2, r3
  40476e:	693b      	ldr	r3, [r7, #16]
  404770:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find on with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  404772:	687b      	ldr	r3, [r7, #4]
  404774:	685b      	ldr	r3, [r3, #4]
  404776:	623b      	str	r3, [r7, #32]
  404778:	e04b      	b.n	404812 <ip_reass_chain_frag_into_datagram_and_validate+0x11e>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  40477a:	6a3b      	ldr	r3, [r7, #32]
  40477c:	685b      	ldr	r3, [r3, #4]
  40477e:	60fb      	str	r3, [r7, #12]
    if (iprh->start < iprh_tmp->start) {
  404780:	693b      	ldr	r3, [r7, #16]
  404782:	889b      	ldrh	r3, [r3, #4]
  404784:	b29a      	uxth	r2, r3
  404786:	68fb      	ldr	r3, [r7, #12]
  404788:	889b      	ldrh	r3, [r3, #4]
  40478a:	b29b      	uxth	r3, r3
  40478c:	429a      	cmp	r2, r3
  40478e:	d21e      	bcs.n	4047ce <ip_reass_chain_frag_into_datagram_and_validate+0xda>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  404790:	693b      	ldr	r3, [r7, #16]
  404792:	6a3a      	ldr	r2, [r7, #32]
  404794:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
  404796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404798:	2b00      	cmp	r3, #0
  40479a:	d014      	beq.n	4047c6 <ip_reass_chain_frag_into_datagram_and_validate+0xd2>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  40479c:	693b      	ldr	r3, [r7, #16]
  40479e:	889b      	ldrh	r3, [r3, #4]
  4047a0:	b29a      	uxth	r2, r3
  4047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4047a4:	88db      	ldrh	r3, [r3, #6]
  4047a6:	b29b      	uxth	r3, r3
  4047a8:	429a      	cmp	r2, r3
  4047aa:	f0c0 8082 	bcc.w	4048b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
  4047ae:	693b      	ldr	r3, [r7, #16]
  4047b0:	88db      	ldrh	r3, [r3, #6]
  4047b2:	b29a      	uxth	r2, r3
  4047b4:	68fb      	ldr	r3, [r7, #12]
  4047b6:	889b      	ldrh	r3, [r3, #4]
  4047b8:	b29b      	uxth	r3, r3
  4047ba:	429a      	cmp	r2, r3
  4047bc:	d879      	bhi.n	4048b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  4047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4047c0:	683a      	ldr	r2, [r7, #0]
  4047c2:	601a      	str	r2, [r3, #0]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  4047c4:	e028      	b.n	404818 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
        ipr->p = new_p;
  4047c6:	687b      	ldr	r3, [r7, #4]
  4047c8:	683a      	ldr	r2, [r7, #0]
  4047ca:	605a      	str	r2, [r3, #4]
      break;
  4047cc:	e024      	b.n	404818 <ip_reass_chain_frag_into_datagram_and_validate+0x124>
    } else if(iprh->start == iprh_tmp->start) {
  4047ce:	693b      	ldr	r3, [r7, #16]
  4047d0:	889b      	ldrh	r3, [r3, #4]
  4047d2:	b29a      	uxth	r2, r3
  4047d4:	68fb      	ldr	r3, [r7, #12]
  4047d6:	889b      	ldrh	r3, [r3, #4]
  4047d8:	b29b      	uxth	r3, r3
  4047da:	429a      	cmp	r2, r3
  4047dc:	d066      	beq.n	4048ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if(iprh->start < iprh_tmp->end) {
  4047de:	693b      	ldr	r3, [r7, #16]
  4047e0:	889b      	ldrh	r3, [r3, #4]
  4047e2:	b29a      	uxth	r2, r3
  4047e4:	68fb      	ldr	r3, [r7, #12]
  4047e6:	88db      	ldrh	r3, [r3, #6]
  4047e8:	b29b      	uxth	r3, r3
  4047ea:	429a      	cmp	r2, r3
  4047ec:	d360      	bcc.n	4048b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1bc>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no wholes. */
      if (iprh_prev != NULL) {
  4047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	d009      	beq.n	404808 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
        if (iprh_prev->end != iprh_tmp->start) {
  4047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4047f6:	88db      	ldrh	r3, [r3, #6]
  4047f8:	b29a      	uxth	r2, r3
  4047fa:	68fb      	ldr	r3, [r7, #12]
  4047fc:	889b      	ldrh	r3, [r3, #4]
  4047fe:	b29b      	uxth	r3, r3
  404800:	429a      	cmp	r2, r3
  404802:	d001      	beq.n	404808 <ip_reass_chain_frag_into_datagram_and_validate+0x114>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  404804:	2300      	movs	r3, #0
  404806:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  404808:	68fb      	ldr	r3, [r7, #12]
  40480a:	681b      	ldr	r3, [r3, #0]
  40480c:	623b      	str	r3, [r7, #32]
    iprh_prev = iprh_tmp;
  40480e:	68fb      	ldr	r3, [r7, #12]
  404810:	627b      	str	r3, [r7, #36]	; 0x24
  for (q = ipr->p; q != NULL;) {
  404812:	6a3b      	ldr	r3, [r7, #32]
  404814:	2b00      	cmp	r3, #0
  404816:	d1b0      	bne.n	40477a <ip_reass_chain_frag_into_datagram_and_validate+0x86>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  404818:	6a3b      	ldr	r3, [r7, #32]
  40481a:	2b00      	cmp	r3, #0
  40481c:	d113      	bne.n	404846 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    if (iprh_prev != NULL) {
  40481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404820:	2b00      	cmp	r3, #0
  404822:	d00d      	beq.n	404840 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  404824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404826:	683a      	ldr	r2, [r7, #0]
  404828:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
  40482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40482c:	88db      	ldrh	r3, [r3, #6]
  40482e:	b29a      	uxth	r2, r3
  404830:	693b      	ldr	r3, [r7, #16]
  404832:	889b      	ldrh	r3, [r3, #4]
  404834:	b29b      	uxth	r3, r3
  404836:	429a      	cmp	r2, r3
  404838:	d005      	beq.n	404846 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        valid = 0;
  40483a:	2300      	movs	r3, #0
  40483c:	61fb      	str	r3, [r7, #28]
  40483e:	e002      	b.n	404846 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  404840:	687b      	ldr	r3, [r7, #4]
  404842:	683a      	ldr	r2, [r7, #0]
  404844:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  404846:	687b      	ldr	r3, [r7, #4]
  404848:	7f9b      	ldrb	r3, [r3, #30]
  40484a:	f003 0301 	and.w	r3, r3, #1
  40484e:	2b00      	cmp	r3, #0
  404850:	d02a      	beq.n	4048a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
    /* and had no wholes so far */
    if (valid) {
  404852:	69fb      	ldr	r3, [r7, #28]
  404854:	2b00      	cmp	r3, #0
  404856:	d025      	beq.n	4048a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
  404858:	687b      	ldr	r3, [r7, #4]
  40485a:	685b      	ldr	r3, [r3, #4]
  40485c:	685b      	ldr	r3, [r3, #4]
  40485e:	889b      	ldrh	r3, [r3, #4]
  404860:	b29b      	uxth	r3, r3
  404862:	2b00      	cmp	r3, #0
  404864:	d002      	beq.n	40486c <ip_reass_chain_frag_into_datagram_and_validate+0x178>
        valid = 0;
  404866:	2300      	movs	r3, #0
  404868:	61fb      	str	r3, [r7, #28]
  40486a:	e01b      	b.n	4048a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
      } else {
        /* and check that there are no wholes after this datagram */
        iprh_prev = iprh;
  40486c:	693b      	ldr	r3, [r7, #16]
  40486e:	627b      	str	r3, [r7, #36]	; 0x24
        q = iprh->next_pbuf;
  404870:	693b      	ldr	r3, [r7, #16]
  404872:	681b      	ldr	r3, [r3, #0]
  404874:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
  404876:	e012      	b.n	40489e <ip_reass_chain_frag_into_datagram_and_validate+0x1aa>
          iprh = (struct ip_reass_helper*)q->payload;
  404878:	6a3b      	ldr	r3, [r7, #32]
  40487a:	685b      	ldr	r3, [r3, #4]
  40487c:	613b      	str	r3, [r7, #16]
          if (iprh_prev->end != iprh->start) {
  40487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404880:	88db      	ldrh	r3, [r3, #6]
  404882:	b29a      	uxth	r2, r3
  404884:	693b      	ldr	r3, [r7, #16]
  404886:	889b      	ldrh	r3, [r3, #4]
  404888:	b29b      	uxth	r3, r3
  40488a:	429a      	cmp	r2, r3
  40488c:	d002      	beq.n	404894 <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
            valid = 0;
  40488e:	2300      	movs	r3, #0
  404890:	61fb      	str	r3, [r7, #28]
            break;
  404892:	e007      	b.n	4048a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
          }
          iprh_prev = iprh;
  404894:	693b      	ldr	r3, [r7, #16]
  404896:	627b      	str	r3, [r7, #36]	; 0x24
          q = iprh->next_pbuf;
  404898:	693b      	ldr	r3, [r7, #16]
  40489a:	681b      	ldr	r3, [r3, #0]
  40489c:	623b      	str	r3, [r7, #32]
        while (q != NULL) {
  40489e:	6a3b      	ldr	r3, [r7, #32]
  4048a0:	2b00      	cmp	r3, #0
  4048a2:	d1e9      	bne.n	404878 <ip_reass_chain_frag_into_datagram_and_validate+0x184>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  4048a4:	69fb      	ldr	r3, [r7, #28]
  4048a6:	e014      	b.n	4048d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  4048a8:	2300      	movs	r3, #0
  4048aa:	e012      	b.n	4048d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1de>
      goto freepbuf;
  4048ac:	bf00      	nop
  4048ae:	e000      	b.n	4048b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1be>
      goto freepbuf;
  4048b0:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
  4048b2:	6838      	ldr	r0, [r7, #0]
  4048b4:	4b0a      	ldr	r3, [pc, #40]	; (4048e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>)
  4048b6:	4798      	blx	r3
  4048b8:	4603      	mov	r3, r0
  4048ba:	4619      	mov	r1, r3
  4048bc:	4b09      	ldr	r3, [pc, #36]	; (4048e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  4048be:	881a      	ldrh	r2, [r3, #0]
  4048c0:	b28b      	uxth	r3, r1
  4048c2:	1ad3      	subs	r3, r2, r3
  4048c4:	b29a      	uxth	r2, r3
  4048c6:	4b07      	ldr	r3, [pc, #28]	; (4048e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1f0>)
  4048c8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
  4048ca:	6838      	ldr	r0, [r7, #0]
  4048cc:	4b06      	ldr	r3, [pc, #24]	; (4048e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1f4>)
  4048ce:	4798      	blx	r3
  return 0;
  4048d0:	2300      	movs	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  4048d2:	4618      	mov	r0, r3
  4048d4:	3728      	adds	r7, #40	; 0x28
  4048d6:	46bd      	mov	sp, r7
  4048d8:	bd80      	pop	{r7, pc}
  4048da:	bf00      	nop
  4048dc:	00401fc5 	.word	0x00401fc5
  4048e0:	00405c11 	.word	0x00405c11
  4048e4:	20400ab0 	.word	0x20400ab0
  4048e8:	00405b81 	.word	0x00405b81

004048ec <ip_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip_reass(struct pbuf *p)
{
  4048ec:	b580      	push	{r7, lr}
  4048ee:	b08a      	sub	sp, #40	; 0x28
  4048f0:	af00      	add	r7, sp, #0
  4048f2:	6078      	str	r0, [r7, #4]
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len;
  u8_t clen;
  struct ip_reassdata *ipr_prev = NULL;
  4048f4:	2300      	movs	r3, #0
  4048f6:	61fb      	str	r3, [r7, #28]

  IPFRAG_STATS_INC(ip_frag.recv);
  snmp_inc_ipreasmreqds();

  fraghdr = (struct ip_hdr*)p->payload;
  4048f8:	687b      	ldr	r3, [r7, #4]
  4048fa:	685b      	ldr	r3, [r3, #4]
  4048fc:	61bb      	str	r3, [r7, #24]

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  4048fe:	69bb      	ldr	r3, [r7, #24]
  404900:	781b      	ldrb	r3, [r3, #0]
  404902:	f003 030f 	and.w	r3, r3, #15
  404906:	009b      	lsls	r3, r3, #2
  404908:	2b14      	cmp	r3, #20
  40490a:	f040 8103 	bne.w	404b14 <ip_reass+0x228>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  40490e:	69bb      	ldr	r3, [r7, #24]
  404910:	88db      	ldrh	r3, [r3, #6]
  404912:	b29b      	uxth	r3, r3
  404914:	4618      	mov	r0, r3
  404916:	4b84      	ldr	r3, [pc, #528]	; (404b28 <ip_reass+0x23c>)
  404918:	4798      	blx	r3
  40491a:	4603      	mov	r3, r0
  40491c:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404920:	b29b      	uxth	r3, r3
  404922:	00db      	lsls	r3, r3, #3
  404924:	82fb      	strh	r3, [r7, #22]
  len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  404926:	69bb      	ldr	r3, [r7, #24]
  404928:	885b      	ldrh	r3, [r3, #2]
  40492a:	b29b      	uxth	r3, r3
  40492c:	4618      	mov	r0, r3
  40492e:	4b7e      	ldr	r3, [pc, #504]	; (404b28 <ip_reass+0x23c>)
  404930:	4798      	blx	r3
  404932:	4603      	mov	r3, r0
  404934:	461a      	mov	r2, r3
  404936:	69bb      	ldr	r3, [r7, #24]
  404938:	781b      	ldrb	r3, [r3, #0]
  40493a:	b29b      	uxth	r3, r3
  40493c:	f003 030f 	and.w	r3, r3, #15
  404940:	b29b      	uxth	r3, r3
  404942:	009b      	lsls	r3, r3, #2
  404944:	b29b      	uxth	r3, r3
  404946:	1ad3      	subs	r3, r2, r3
  404948:	82bb      	strh	r3, [r7, #20]

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  40494a:	6878      	ldr	r0, [r7, #4]
  40494c:	4b77      	ldr	r3, [pc, #476]	; (404b2c <ip_reass+0x240>)
  40494e:	4798      	blx	r3
  404950:	4603      	mov	r3, r0
  404952:	74fb      	strb	r3, [r7, #19]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  404954:	4b76      	ldr	r3, [pc, #472]	; (404b30 <ip_reass+0x244>)
  404956:	881b      	ldrh	r3, [r3, #0]
  404958:	461a      	mov	r2, r3
  40495a:	7cfb      	ldrb	r3, [r7, #19]
  40495c:	4413      	add	r3, r2
  40495e:	2b0a      	cmp	r3, #10
  404960:	dd10      	ble.n	404984 <ip_reass+0x98>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  404962:	7cfb      	ldrb	r3, [r7, #19]
  404964:	4619      	mov	r1, r3
  404966:	69b8      	ldr	r0, [r7, #24]
  404968:	4b72      	ldr	r3, [pc, #456]	; (404b34 <ip_reass+0x248>)
  40496a:	4798      	blx	r3
  40496c:	4603      	mov	r3, r0
  40496e:	2b00      	cmp	r3, #0
  404970:	f000 80d1 	beq.w	404b16 <ip_reass+0x22a>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  404974:	4b6e      	ldr	r3, [pc, #440]	; (404b30 <ip_reass+0x244>)
  404976:	881b      	ldrh	r3, [r3, #0]
  404978:	461a      	mov	r2, r3
  40497a:	7cfb      	ldrb	r3, [r7, #19]
  40497c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  40497e:	2b0a      	cmp	r3, #10
  404980:	f300 80c9 	bgt.w	404b16 <ip_reass+0x22a>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  404984:	4b6c      	ldr	r3, [pc, #432]	; (404b38 <ip_reass+0x24c>)
  404986:	681b      	ldr	r3, [r3, #0]
  404988:	623b      	str	r3, [r7, #32]
  40498a:	e017      	b.n	4049bc <ip_reass+0xd0>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  40498c:	6a3b      	ldr	r3, [r7, #32]
  40498e:	695a      	ldr	r2, [r3, #20]
  404990:	69bb      	ldr	r3, [r7, #24]
  404992:	68db      	ldr	r3, [r3, #12]
  404994:	429a      	cmp	r2, r3
  404996:	d10c      	bne.n	4049b2 <ip_reass+0xc6>
  404998:	6a3b      	ldr	r3, [r7, #32]
  40499a:	699a      	ldr	r2, [r3, #24]
  40499c:	69bb      	ldr	r3, [r7, #24]
  40499e:	691b      	ldr	r3, [r3, #16]
  4049a0:	429a      	cmp	r2, r3
  4049a2:	d106      	bne.n	4049b2 <ip_reass+0xc6>
  4049a4:	6a3b      	ldr	r3, [r7, #32]
  4049a6:	899a      	ldrh	r2, [r3, #12]
  4049a8:	69bb      	ldr	r3, [r7, #24]
  4049aa:	889b      	ldrh	r3, [r3, #4]
  4049ac:	b29b      	uxth	r3, r3
  4049ae:	429a      	cmp	r2, r3
  4049b0:	d008      	beq.n	4049c4 <ip_reass+0xd8>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
        ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
    }
    ipr_prev = ipr;
  4049b2:	6a3b      	ldr	r3, [r7, #32]
  4049b4:	61fb      	str	r3, [r7, #28]
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  4049b6:	6a3b      	ldr	r3, [r7, #32]
  4049b8:	681b      	ldr	r3, [r3, #0]
  4049ba:	623b      	str	r3, [r7, #32]
  4049bc:	6a3b      	ldr	r3, [r7, #32]
  4049be:	2b00      	cmp	r3, #0
  4049c0:	d1e4      	bne.n	40498c <ip_reass+0xa0>
  4049c2:	e000      	b.n	4049c6 <ip_reass+0xda>
      break;
  4049c4:	bf00      	nop
  }

  if (ipr == NULL) {
  4049c6:	6a3b      	ldr	r3, [r7, #32]
  4049c8:	2b00      	cmp	r3, #0
  4049ca:	d109      	bne.n	4049e0 <ip_reass+0xf4>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  4049cc:	7cfb      	ldrb	r3, [r7, #19]
  4049ce:	4619      	mov	r1, r3
  4049d0:	69b8      	ldr	r0, [r7, #24]
  4049d2:	4b5a      	ldr	r3, [pc, #360]	; (404b3c <ip_reass+0x250>)
  4049d4:	4798      	blx	r3
  4049d6:	6238      	str	r0, [r7, #32]
    /* Bail if unable to enqueue */
    if(ipr == NULL) {
  4049d8:	6a3b      	ldr	r3, [r7, #32]
  4049da:	2b00      	cmp	r3, #0
  4049dc:	d11c      	bne.n	404a18 <ip_reass+0x12c>
      goto nullreturn;
  4049de:	e09a      	b.n	404b16 <ip_reass+0x22a>
    }
  } else {
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  4049e0:	69bb      	ldr	r3, [r7, #24]
  4049e2:	88db      	ldrh	r3, [r3, #6]
  4049e4:	b29b      	uxth	r3, r3
  4049e6:	4618      	mov	r0, r3
  4049e8:	4b4f      	ldr	r3, [pc, #316]	; (404b28 <ip_reass+0x23c>)
  4049ea:	4798      	blx	r3
  4049ec:	4603      	mov	r3, r0
  4049ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
  4049f2:	2b00      	cmp	r3, #0
  4049f4:	d110      	bne.n	404a18 <ip_reass+0x12c>
      ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  4049f6:	6a3b      	ldr	r3, [r7, #32]
  4049f8:	89db      	ldrh	r3, [r3, #14]
  4049fa:	4618      	mov	r0, r3
  4049fc:	4b4a      	ldr	r3, [pc, #296]	; (404b28 <ip_reass+0x23c>)
  4049fe:	4798      	blx	r3
  404a00:	4603      	mov	r3, r0
  404a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
  404a06:	2b00      	cmp	r3, #0
  404a08:	d006      	beq.n	404a18 <ip_reass+0x12c>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  404a0a:	6a3b      	ldr	r3, [r7, #32]
  404a0c:	3308      	adds	r3, #8
  404a0e:	2214      	movs	r2, #20
  404a10:	69b9      	ldr	r1, [r7, #24]
  404a12:	4618      	mov	r0, r3
  404a14:	4b4a      	ldr	r3, [pc, #296]	; (404b40 <ip_reass+0x254>)
  404a16:	4798      	blx	r3
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit 
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  404a18:	7cfb      	ldrb	r3, [r7, #19]
  404a1a:	b29a      	uxth	r2, r3
  404a1c:	4b44      	ldr	r3, [pc, #272]	; (404b30 <ip_reass+0x244>)
  404a1e:	881b      	ldrh	r3, [r3, #0]
  404a20:	4413      	add	r3, r2
  404a22:	b29a      	uxth	r2, r3
  404a24:	4b42      	ldr	r3, [pc, #264]	; (404b30 <ip_reass+0x244>)
  404a26:	801a      	strh	r2, [r3, #0]

  /* At this point, we have either created a new entry or pointing 
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  404a28:	69bb      	ldr	r3, [r7, #24]
  404a2a:	88db      	ldrh	r3, [r3, #6]
  404a2c:	b29b      	uxth	r3, r3
  404a2e:	f003 0320 	and.w	r3, r3, #32
  404a32:	2b00      	cmp	r3, #0
  404a34:	d10c      	bne.n	404a50 <ip_reass+0x164>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  404a36:	6a3b      	ldr	r3, [r7, #32]
  404a38:	7f9b      	ldrb	r3, [r3, #30]
  404a3a:	f043 0301 	orr.w	r3, r3, #1
  404a3e:	b2da      	uxtb	r2, r3
  404a40:	6a3b      	ldr	r3, [r7, #32]
  404a42:	779a      	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  404a44:	8afa      	ldrh	r2, [r7, #22]
  404a46:	8abb      	ldrh	r3, [r7, #20]
  404a48:	4413      	add	r3, r2
  404a4a:	b29a      	uxth	r2, r3
  404a4c:	6a3b      	ldr	r3, [r7, #32]
  404a4e:	839a      	strh	r2, [r3, #28]
     ("ip_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  404a50:	6879      	ldr	r1, [r7, #4]
  404a52:	6a38      	ldr	r0, [r7, #32]
  404a54:	4b3b      	ldr	r3, [pc, #236]	; (404b44 <ip_reass+0x258>)
  404a56:	4798      	blx	r3
  404a58:	4603      	mov	r3, r0
  404a5a:	2b00      	cmp	r3, #0
  404a5c:	d058      	beq.n	404b10 <ip_reass+0x224>
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  404a5e:	6a3b      	ldr	r3, [r7, #32]
  404a60:	8b9b      	ldrh	r3, [r3, #28]
  404a62:	3314      	adds	r3, #20
  404a64:	b29a      	uxth	r2, r3
  404a66:	6a3b      	ldr	r3, [r7, #32]
  404a68:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  404a6a:	6a3b      	ldr	r3, [r7, #32]
  404a6c:	685b      	ldr	r3, [r3, #4]
  404a6e:	685b      	ldr	r3, [r3, #4]
  404a70:	681b      	ldr	r3, [r3, #0]
  404a72:	627b      	str	r3, [r7, #36]	; 0x24

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  404a74:	6a3b      	ldr	r3, [r7, #32]
  404a76:	685b      	ldr	r3, [r3, #4]
  404a78:	685b      	ldr	r3, [r3, #4]
  404a7a:	61bb      	str	r3, [r7, #24]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  404a7c:	6a3b      	ldr	r3, [r7, #32]
  404a7e:	3308      	adds	r3, #8
  404a80:	2214      	movs	r2, #20
  404a82:	4619      	mov	r1, r3
  404a84:	69b8      	ldr	r0, [r7, #24]
  404a86:	4b2e      	ldr	r3, [pc, #184]	; (404b40 <ip_reass+0x254>)
  404a88:	4798      	blx	r3
    IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
  404a8a:	6a3b      	ldr	r3, [r7, #32]
  404a8c:	8b9b      	ldrh	r3, [r3, #28]
  404a8e:	4618      	mov	r0, r3
  404a90:	4b2d      	ldr	r3, [pc, #180]	; (404b48 <ip_reass+0x25c>)
  404a92:	4798      	blx	r3
  404a94:	4603      	mov	r3, r0
  404a96:	461a      	mov	r2, r3
  404a98:	69bb      	ldr	r3, [r7, #24]
  404a9a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  404a9c:	69bb      	ldr	r3, [r7, #24]
  404a9e:	2200      	movs	r2, #0
  404aa0:	719a      	strb	r2, [r3, #6]
  404aa2:	2200      	movs	r2, #0
  404aa4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  404aa6:	69bb      	ldr	r3, [r7, #24]
  404aa8:	2200      	movs	r2, #0
  404aaa:	729a      	strb	r2, [r3, #10]
  404aac:	2200      	movs	r2, #0
  404aae:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set calculate the correct checksum? */
    IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  404ab0:	2114      	movs	r1, #20
  404ab2:	69b8      	ldr	r0, [r7, #24]
  404ab4:	4b25      	ldr	r3, [pc, #148]	; (404b4c <ip_reass+0x260>)
  404ab6:	4798      	blx	r3
  404ab8:	4603      	mov	r3, r0
  404aba:	461a      	mov	r2, r3
  404abc:	69bb      	ldr	r3, [r7, #24]
  404abe:	815a      	strh	r2, [r3, #10]

    p = ipr->p;
  404ac0:	6a3b      	ldr	r3, [r7, #32]
  404ac2:	685b      	ldr	r3, [r3, #4]
  404ac4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while(r != NULL) {
  404ac6:	e00e      	b.n	404ae6 <ip_reass+0x1fa>
      iprh = (struct ip_reass_helper*)r->payload;
  404ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404aca:	685b      	ldr	r3, [r3, #4]
  404acc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeding fragment */
      pbuf_header(r, -IP_HLEN);
  404ace:	f06f 0113 	mvn.w	r1, #19
  404ad2:	6a78      	ldr	r0, [r7, #36]	; 0x24
  404ad4:	4b1e      	ldr	r3, [pc, #120]	; (404b50 <ip_reass+0x264>)
  404ad6:	4798      	blx	r3
      pbuf_cat(p, r);
  404ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
  404ada:	6878      	ldr	r0, [r7, #4]
  404adc:	4b1d      	ldr	r3, [pc, #116]	; (404b54 <ip_reass+0x268>)
  404ade:	4798      	blx	r3
      r = iprh->next_pbuf;
  404ae0:	68fb      	ldr	r3, [r7, #12]
  404ae2:	681b      	ldr	r3, [r3, #0]
  404ae4:	627b      	str	r3, [r7, #36]	; 0x24
    while(r != NULL) {
  404ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404ae8:	2b00      	cmp	r3, #0
  404aea:	d1ed      	bne.n	404ac8 <ip_reass+0x1dc>
    }
    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  404aec:	69f9      	ldr	r1, [r7, #28]
  404aee:	6a38      	ldr	r0, [r7, #32]
  404af0:	4b19      	ldr	r3, [pc, #100]	; (404b58 <ip_reass+0x26c>)
  404af2:	4798      	blx	r3

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  404af4:	6878      	ldr	r0, [r7, #4]
  404af6:	4b0d      	ldr	r3, [pc, #52]	; (404b2c <ip_reass+0x240>)
  404af8:	4798      	blx	r3
  404afa:	4603      	mov	r3, r0
  404afc:	4619      	mov	r1, r3
  404afe:	4b0c      	ldr	r3, [pc, #48]	; (404b30 <ip_reass+0x244>)
  404b00:	881a      	ldrh	r2, [r3, #0]
  404b02:	b28b      	uxth	r3, r1
  404b04:	1ad3      	subs	r3, r2, r3
  404b06:	b29a      	uxth	r2, r3
  404b08:	4b09      	ldr	r3, [pc, #36]	; (404b30 <ip_reass+0x244>)
  404b0a:	801a      	strh	r2, [r3, #0]

    /* Return the pbuf chain */
    return p;
  404b0c:	687b      	ldr	r3, [r7, #4]
  404b0e:	e006      	b.n	404b1e <ip_reass+0x232>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  404b10:	2300      	movs	r3, #0
  404b12:	e004      	b.n	404b1e <ip_reass+0x232>
    goto nullreturn;
  404b14:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
  404b16:	6878      	ldr	r0, [r7, #4]
  404b18:	4b10      	ldr	r3, [pc, #64]	; (404b5c <ip_reass+0x270>)
  404b1a:	4798      	blx	r3
  return NULL;
  404b1c:	2300      	movs	r3, #0
}
  404b1e:	4618      	mov	r0, r3
  404b20:	3728      	adds	r7, #40	; 0x28
  404b22:	46bd      	mov	sp, r7
  404b24:	bd80      	pop	{r7, pc}
  404b26:	bf00      	nop
  404b28:	00401fc5 	.word	0x00401fc5
  404b2c:	00405c11 	.word	0x00405c11
  404b30:	20400ab0 	.word	0x20400ab0
  404b34:	00404575 	.word	0x00404575
  404b38:	20400aac 	.word	0x20400aac
  404b3c:	00404631 	.word	0x00404631
  404b40:	0040cd79 	.word	0x0040cd79
  404b44:	004046f5 	.word	0x004046f5
  404b48:	00401f99 	.word	0x00401f99
  404b4c:	00403e1d 	.word	0x00403e1d
  404b50:	00405aa5 	.word	0x00405aa5
  404b54:	00405c65 	.word	0x00405c65
  404b58:	004046b5 	.word	0x004046b5
  404b5c:	00405b81 	.word	0x00405b81

00404b60 <ip_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t 
ip_frag(struct pbuf *p, struct netif *netif, ip_addr_t *dest)
{
  404b60:	b590      	push	{r4, r7, lr}
  404b62:	b08d      	sub	sp, #52	; 0x34
  404b64:	af00      	add	r7, sp, #0
  404b66:	60f8      	str	r0, [r7, #12]
  404b68:	60b9      	str	r1, [r7, #8]
  404b6a:	607a      	str	r2, [r7, #4]
  struct ip_hdr *original_iphdr;
#endif
  struct ip_hdr *iphdr;
  u16_t nfb;
  u16_t left, cop;
  u16_t mtu = netif->mtu;
  404b6c:	68bb      	ldr	r3, [r7, #8]
  404b6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  404b70:	84fb      	strh	r3, [r7, #38]	; 0x26
  u16_t ofo, omf;
  u16_t last;
  u16_t poff = IP_HLEN;
  404b72:	2314      	movs	r3, #20
  404b74:	857b      	strh	r3, [r7, #42]	; 0x2a

  /* Copy the IP header in it */
  iphdr = (struct ip_hdr *)rambuf->payload;
  SMEMCPY(iphdr, p->payload, IP_HLEN);
#else /* IP_FRAG_USES_STATIC_BUF */
  original_iphdr = (struct ip_hdr *)p->payload;
  404b76:	68fb      	ldr	r3, [r7, #12]
  404b78:	685b      	ldr	r3, [r3, #4]
  404b7a:	623b      	str	r3, [r7, #32]
  iphdr = original_iphdr;
  404b7c:	6a3b      	ldr	r3, [r7, #32]
  404b7e:	61fb      	str	r3, [r7, #28]
#endif /* IP_FRAG_USES_STATIC_BUF */

  /* Save original offset */
  tmp = ntohs(IPH_OFFSET(iphdr));
  404b80:	69fb      	ldr	r3, [r7, #28]
  404b82:	88db      	ldrh	r3, [r3, #6]
  404b84:	b29b      	uxth	r3, r3
  404b86:	4618      	mov	r0, r3
  404b88:	4b50      	ldr	r3, [pc, #320]	; (404ccc <ip_frag+0x16c>)
  404b8a:	4798      	blx	r3
  404b8c:	4603      	mov	r3, r0
  404b8e:	853b      	strh	r3, [r7, #40]	; 0x28
  ofo = tmp & IP_OFFMASK;
  404b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404b92:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404b96:	85bb      	strh	r3, [r7, #44]	; 0x2c
  omf = tmp & IP_MF;
  404b98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  404b9e:	837b      	strh	r3, [r7, #26]

  left = p->tot_len - IP_HLEN;
  404ba0:	68fb      	ldr	r3, [r7, #12]
  404ba2:	891b      	ldrh	r3, [r3, #8]
  404ba4:	3b14      	subs	r3, #20
  404ba6:	85fb      	strh	r3, [r7, #46]	; 0x2e

  nfb = (mtu - IP_HLEN) / 8;
  404ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  404baa:	3b14      	subs	r3, #20
  404bac:	2b00      	cmp	r3, #0
  404bae:	da00      	bge.n	404bb2 <ip_frag+0x52>
  404bb0:	3307      	adds	r3, #7
  404bb2:	10db      	asrs	r3, r3, #3
  404bb4:	833b      	strh	r3, [r7, #24]

  while (left) {
  404bb6:	e07f      	b.n	404cb8 <ip_frag+0x158>
    last = (left <= mtu - IP_HLEN);
  404bb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  404bba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
  404bbc:	3b14      	subs	r3, #20
  404bbe:	429a      	cmp	r2, r3
  404bc0:	bfd4      	ite	le
  404bc2:	2301      	movle	r3, #1
  404bc4:	2300      	movgt	r3, #0
  404bc6:	b2db      	uxtb	r3, r3
  404bc8:	82fb      	strh	r3, [r7, #22]

    /* Set new offset and MF flag */
    tmp = omf | (IP_OFFMASK & (ofo));
  404bca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  404bcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
  404bd0:	b29a      	uxth	r2, r3
  404bd2:	8b7b      	ldrh	r3, [r7, #26]
  404bd4:	4313      	orrs	r3, r2
  404bd6:	853b      	strh	r3, [r7, #40]	; 0x28
    if (!last) {
  404bd8:	8afb      	ldrh	r3, [r7, #22]
  404bda:	2b00      	cmp	r3, #0
  404bdc:	d103      	bne.n	404be6 <ip_frag+0x86>
      tmp = tmp | IP_MF;
  404bde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404be0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  404be4:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    /* Fill this fragment */
    cop = last ? left : nfb * 8;
  404be6:	8afb      	ldrh	r3, [r7, #22]
  404be8:	2b00      	cmp	r3, #0
  404bea:	d103      	bne.n	404bf4 <ip_frag+0x94>
  404bec:	8b3b      	ldrh	r3, [r7, #24]
  404bee:	00db      	lsls	r3, r3, #3
  404bf0:	b29b      	uxth	r3, r3
  404bf2:	e000      	b.n	404bf6 <ip_frag+0x96>
  404bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  404bf6:	82bb      	strh	r3, [r7, #20]

#if IP_FRAG_USES_STATIC_BUF
    poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
#else /* IP_FRAG_USES_STATIC_BUF */
#if LWIP_NETIF_TX_SINGLE_PBUF
    rambuf = pbuf_alloc(PBUF_IP, cop, PBUF_RAM);
  404bf8:	8abb      	ldrh	r3, [r7, #20]
  404bfa:	2200      	movs	r2, #0
  404bfc:	4619      	mov	r1, r3
  404bfe:	2001      	movs	r0, #1
  404c00:	4b33      	ldr	r3, [pc, #204]	; (404cd0 <ip_frag+0x170>)
  404c02:	4798      	blx	r3
  404c04:	6138      	str	r0, [r7, #16]
    if (rambuf == NULL) {
  404c06:	693b      	ldr	r3, [r7, #16]
  404c08:	2b00      	cmp	r3, #0
  404c0a:	d102      	bne.n	404c12 <ip_frag+0xb2>
      return ERR_MEM;
  404c0c:	f04f 33ff 	mov.w	r3, #4294967295
  404c10:	e057      	b.n	404cc2 <ip_frag+0x162>
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
      (rambuf->len == rambuf->tot_len) && (rambuf->next == NULL));
    poff += pbuf_copy_partial(p, rambuf->payload, cop, poff);
  404c12:	693b      	ldr	r3, [r7, #16]
  404c14:	6859      	ldr	r1, [r3, #4]
  404c16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  404c18:	8aba      	ldrh	r2, [r7, #20]
  404c1a:	68f8      	ldr	r0, [r7, #12]
  404c1c:	4c2d      	ldr	r4, [pc, #180]	; (404cd4 <ip_frag+0x174>)
  404c1e:	47a0      	blx	r4
  404c20:	4603      	mov	r3, r0
  404c22:	461a      	mov	r2, r3
  404c24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
  404c26:	4413      	add	r3, r2
  404c28:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* make room for the IP header */
    if(pbuf_header(rambuf, IP_HLEN)) {
  404c2a:	2114      	movs	r1, #20
  404c2c:	6938      	ldr	r0, [r7, #16]
  404c2e:	4b2a      	ldr	r3, [pc, #168]	; (404cd8 <ip_frag+0x178>)
  404c30:	4798      	blx	r3
  404c32:	4603      	mov	r3, r0
  404c34:	2b00      	cmp	r3, #0
  404c36:	d005      	beq.n	404c44 <ip_frag+0xe4>
      pbuf_free(rambuf);
  404c38:	6938      	ldr	r0, [r7, #16]
  404c3a:	4b28      	ldr	r3, [pc, #160]	; (404cdc <ip_frag+0x17c>)
  404c3c:	4798      	blx	r3
      return ERR_MEM;
  404c3e:	f04f 33ff 	mov.w	r3, #4294967295
  404c42:	e03e      	b.n	404cc2 <ip_frag+0x162>
    }
    /* fill in the IP header */
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  404c44:	693b      	ldr	r3, [r7, #16]
  404c46:	685b      	ldr	r3, [r3, #4]
  404c48:	2214      	movs	r2, #20
  404c4a:	6a39      	ldr	r1, [r7, #32]
  404c4c:	4618      	mov	r0, r3
  404c4e:	4b24      	ldr	r3, [pc, #144]	; (404ce0 <ip_frag+0x180>)
  404c50:	4798      	blx	r3
    iphdr = rambuf->payload;
  404c52:	693b      	ldr	r3, [r7, #16]
  404c54:	685b      	ldr	r3, [r3, #4]
  404c56:	61fb      	str	r3, [r7, #28]
    poff = newpbuflen;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
#endif /* IP_FRAG_USES_STATIC_BUF */

    /* Correct header */
    IPH_OFFSET_SET(iphdr, htons(tmp));
  404c58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  404c5a:	4618      	mov	r0, r3
  404c5c:	4b21      	ldr	r3, [pc, #132]	; (404ce4 <ip_frag+0x184>)
  404c5e:	4798      	blx	r3
  404c60:	4603      	mov	r3, r0
  404c62:	461a      	mov	r2, r3
  404c64:	69fb      	ldr	r3, [r7, #28]
  404c66:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
  404c68:	8abb      	ldrh	r3, [r7, #20]
  404c6a:	3314      	adds	r3, #20
  404c6c:	b29b      	uxth	r3, r3
  404c6e:	4618      	mov	r0, r3
  404c70:	4b1c      	ldr	r3, [pc, #112]	; (404ce4 <ip_frag+0x184>)
  404c72:	4798      	blx	r3
  404c74:	4603      	mov	r3, r0
  404c76:	461a      	mov	r2, r3
  404c78:	69fb      	ldr	r3, [r7, #28]
  404c7a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  404c7c:	69fb      	ldr	r3, [r7, #28]
  404c7e:	2200      	movs	r2, #0
  404c80:	729a      	strb	r2, [r3, #10]
  404c82:	2200      	movs	r2, #0
  404c84:	72da      	strb	r2, [r3, #11]
    IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  404c86:	2114      	movs	r1, #20
  404c88:	69f8      	ldr	r0, [r7, #28]
  404c8a:	4b17      	ldr	r3, [pc, #92]	; (404ce8 <ip_frag+0x188>)
  404c8c:	4798      	blx	r3
  404c8e:	4603      	mov	r3, r0
  404c90:	461a      	mov	r2, r3
  404c92:	69fb      	ldr	r3, [r7, #28]
  404c94:	815a      	strh	r2, [r3, #10]
    }
#else /* IP_FRAG_USES_STATIC_BUF */
    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  404c96:	68bb      	ldr	r3, [r7, #8]
  404c98:	695b      	ldr	r3, [r3, #20]
  404c9a:	687a      	ldr	r2, [r7, #4]
  404c9c:	6939      	ldr	r1, [r7, #16]
  404c9e:	68b8      	ldr	r0, [r7, #8]
  404ca0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */
    
    pbuf_free(rambuf);
  404ca2:	6938      	ldr	r0, [r7, #16]
  404ca4:	4b0d      	ldr	r3, [pc, #52]	; (404cdc <ip_frag+0x17c>)
  404ca6:	4798      	blx	r3
#endif /* IP_FRAG_USES_STATIC_BUF */
    left -= cop;
  404ca8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
  404caa:	8abb      	ldrh	r3, [r7, #20]
  404cac:	1ad3      	subs	r3, r2, r3
  404cae:	85fb      	strh	r3, [r7, #46]	; 0x2e
    ofo += nfb;
  404cb0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
  404cb2:	8b3b      	ldrh	r3, [r7, #24]
  404cb4:	4413      	add	r3, r2
  404cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  while (left) {
  404cb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
  404cba:	2b00      	cmp	r3, #0
  404cbc:	f47f af7c 	bne.w	404bb8 <ip_frag+0x58>
  }
#if IP_FRAG_USES_STATIC_BUF
  pbuf_free(rambuf);
#endif /* IP_FRAG_USES_STATIC_BUF */
  snmp_inc_ipfragoks();
  return ERR_OK;
  404cc0:	2300      	movs	r3, #0
}
  404cc2:	4618      	mov	r0, r3
  404cc4:	3734      	adds	r7, #52	; 0x34
  404cc6:	46bd      	mov	sp, r7
  404cc8:	bd90      	pop	{r4, r7, pc}
  404cca:	bf00      	nop
  404ccc:	00401fc5 	.word	0x00401fc5
  404cd0:	004057dd 	.word	0x004057dd
  404cd4:	00405df1 	.word	0x00405df1
  404cd8:	00405aa5 	.word	0x00405aa5
  404cdc:	00405b81 	.word	0x00405b81
  404ce0:	0040cd79 	.word	0x0040cd79
  404ce4:	00401f99 	.word	0x00401f99
  404ce8:	00403e1d 	.word	0x00403e1d

00404cec <lwip_init>:
/**
 * Perform Sanity check of user-configurable values, and initialize all modules.
 */
void
lwip_init(void)
{
  404cec:	b580      	push	{r7, lr}
  404cee:	af00      	add	r7, sp, #0
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
  404cf0:	4b06      	ldr	r3, [pc, #24]	; (404d0c <lwip_init+0x20>)
  404cf2:	4798      	blx	r3
  memp_init();
  404cf4:	4b06      	ldr	r3, [pc, #24]	; (404d10 <lwip_init+0x24>)
  404cf6:	4798      	blx	r3
  pbuf_init();
  netif_init();
  404cf8:	4b06      	ldr	r3, [pc, #24]	; (404d14 <lwip_init+0x28>)
  404cfa:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  404cfc:	4b06      	ldr	r3, [pc, #24]	; (404d18 <lwip_init+0x2c>)
  404cfe:	4798      	blx	r3
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  404d00:	4b06      	ldr	r3, [pc, #24]	; (404d1c <lwip_init+0x30>)
  404d02:	4798      	blx	r3
#if LWIP_DNS
  dns_init();
#endif /* LWIP_DNS */

#if LWIP_TIMERS
  sys_timeouts_init();
  404d04:	4b06      	ldr	r3, [pc, #24]	; (404d20 <lwip_init+0x34>)
  404d06:	4798      	blx	r3
#endif /* LWIP_TIMERS */
}
  404d08:	bf00      	nop
  404d0a:	bd80      	pop	{r7, pc}
  404d0c:	0040506d 	.word	0x0040506d
  404d10:	00405409 	.word	0x00405409
  404d14:	00405525 	.word	0x00405525
  404d18:	0040a70d 	.word	0x0040a70d
  404d1c:	00405eb9 	.word	0x00405eb9
  404d20:	00404e69 	.word	0x00404e69

00404d24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  404d24:	b580      	push	{r7, lr}
  404d26:	b082      	sub	sp, #8
  404d28:	af00      	add	r7, sp, #0
  404d2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  404d2c:	4b0b      	ldr	r3, [pc, #44]	; (404d5c <tcpip_tcp_timer+0x38>)
  404d2e:	4798      	blx	r3
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  404d30:	4b0b      	ldr	r3, [pc, #44]	; (404d60 <tcpip_tcp_timer+0x3c>)
  404d32:	681b      	ldr	r3, [r3, #0]
  404d34:	2b00      	cmp	r3, #0
  404d36:	d103      	bne.n	404d40 <tcpip_tcp_timer+0x1c>
  404d38:	4b0a      	ldr	r3, [pc, #40]	; (404d64 <tcpip_tcp_timer+0x40>)
  404d3a:	681b      	ldr	r3, [r3, #0]
  404d3c:	2b00      	cmp	r3, #0
  404d3e:	d005      	beq.n	404d4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  404d40:	2200      	movs	r2, #0
  404d42:	4909      	ldr	r1, [pc, #36]	; (404d68 <tcpip_tcp_timer+0x44>)
  404d44:	20fa      	movs	r0, #250	; 0xfa
  404d46:	4b09      	ldr	r3, [pc, #36]	; (404d6c <tcpip_tcp_timer+0x48>)
  404d48:	4798      	blx	r3
  404d4a:	e002      	b.n	404d52 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  404d4c:	4b08      	ldr	r3, [pc, #32]	; (404d70 <tcpip_tcp_timer+0x4c>)
  404d4e:	2200      	movs	r2, #0
  404d50:	601a      	str	r2, [r3, #0]
  }
}
  404d52:	bf00      	nop
  404d54:	3708      	adds	r7, #8
  404d56:	46bd      	mov	sp, r7
  404d58:	bd80      	pop	{r7, pc}
  404d5a:	bf00      	nop
  404d5c:	00405ec9 	.word	0x00405ec9
  404d60:	204049a0 	.word	0x204049a0
  404d64:	204049b4 	.word	0x204049b4
  404d68:	00404d25 	.word	0x00404d25
  404d6c:	00404ec9 	.word	0x00404ec9
  404d70:	20400abc 	.word	0x20400abc

00404d74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  404d74:	b580      	push	{r7, lr}
  404d76:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  404d78:	4b0a      	ldr	r3, [pc, #40]	; (404da4 <tcp_timer_needed+0x30>)
  404d7a:	681b      	ldr	r3, [r3, #0]
  404d7c:	2b00      	cmp	r3, #0
  404d7e:	d10f      	bne.n	404da0 <tcp_timer_needed+0x2c>
  404d80:	4b09      	ldr	r3, [pc, #36]	; (404da8 <tcp_timer_needed+0x34>)
  404d82:	681b      	ldr	r3, [r3, #0]
  404d84:	2b00      	cmp	r3, #0
  404d86:	d103      	bne.n	404d90 <tcp_timer_needed+0x1c>
  404d88:	4b08      	ldr	r3, [pc, #32]	; (404dac <tcp_timer_needed+0x38>)
  404d8a:	681b      	ldr	r3, [r3, #0]
  404d8c:	2b00      	cmp	r3, #0
  404d8e:	d007      	beq.n	404da0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  404d90:	4b04      	ldr	r3, [pc, #16]	; (404da4 <tcp_timer_needed+0x30>)
  404d92:	2201      	movs	r2, #1
  404d94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  404d96:	2200      	movs	r2, #0
  404d98:	4905      	ldr	r1, [pc, #20]	; (404db0 <tcp_timer_needed+0x3c>)
  404d9a:	20fa      	movs	r0, #250	; 0xfa
  404d9c:	4b05      	ldr	r3, [pc, #20]	; (404db4 <tcp_timer_needed+0x40>)
  404d9e:	4798      	blx	r3
  }
}
  404da0:	bf00      	nop
  404da2:	bd80      	pop	{r7, pc}
  404da4:	20400abc 	.word	0x20400abc
  404da8:	204049a0 	.word	0x204049a0
  404dac:	204049b4 	.word	0x204049b4
  404db0:	00404d25 	.word	0x00404d25
  404db4:	00404ec9 	.word	0x00404ec9

00404db8 <ip_reass_timer>:
 *
 * @param arg unused argument
 */
static void
ip_reass_timer(void *arg)
{
  404db8:	b580      	push	{r7, lr}
  404dba:	b082      	sub	sp, #8
  404dbc:	af00      	add	r7, sp, #0
  404dbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: ip_reass_tmr()\n"));
  ip_reass_tmr();
  404dc0:	4b05      	ldr	r3, [pc, #20]	; (404dd8 <ip_reass_timer+0x20>)
  404dc2:	4798      	blx	r3
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  404dc4:	2200      	movs	r2, #0
  404dc6:	4905      	ldr	r1, [pc, #20]	; (404ddc <ip_reass_timer+0x24>)
  404dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404dcc:	4b04      	ldr	r3, [pc, #16]	; (404de0 <ip_reass_timer+0x28>)
  404dce:	4798      	blx	r3
}
  404dd0:	bf00      	nop
  404dd2:	3708      	adds	r7, #8
  404dd4:	46bd      	mov	sp, r7
  404dd6:	bd80      	pop	{r7, pc}
  404dd8:	00404449 	.word	0x00404449
  404ddc:	00404db9 	.word	0x00404db9
  404de0:	00404ec9 	.word	0x00404ec9

00404de4 <arp_timer>:
 *
 * @param arg unused argument
 */
static void
arp_timer(void *arg)
{
  404de4:	b580      	push	{r7, lr}
  404de6:	b082      	sub	sp, #8
  404de8:	af00      	add	r7, sp, #0
  404dea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: etharp_tmr()\n"));
  etharp_tmr();
  404dec:	4b05      	ldr	r3, [pc, #20]	; (404e04 <arp_timer+0x20>)
  404dee:	4798      	blx	r3
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  404df0:	2200      	movs	r2, #0
  404df2:	4905      	ldr	r1, [pc, #20]	; (404e08 <arp_timer+0x24>)
  404df4:	f241 3088 	movw	r0, #5000	; 0x1388
  404df8:	4b04      	ldr	r3, [pc, #16]	; (404e0c <arp_timer+0x28>)
  404dfa:	4798      	blx	r3
}
  404dfc:	bf00      	nop
  404dfe:	3708      	adds	r7, #8
  404e00:	46bd      	mov	sp, r7
  404e02:	bd80      	pop	{r7, pc}
  404e04:	0040ae61 	.word	0x0040ae61
  404e08:	00404de5 	.word	0x00404de5
  404e0c:	00404ec9 	.word	0x00404ec9

00404e10 <dhcp_timer_coarse>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_coarse(void *arg)
{
  404e10:	b580      	push	{r7, lr}
  404e12:	b082      	sub	sp, #8
  404e14:	af00      	add	r7, sp, #0
  404e16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_coarse_tmr()\n"));
  dhcp_coarse_tmr();
  404e18:	4b05      	ldr	r3, [pc, #20]	; (404e30 <dhcp_timer_coarse+0x20>)
  404e1a:	4798      	blx	r3
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  404e1c:	2200      	movs	r2, #0
  404e1e:	4905      	ldr	r1, [pc, #20]	; (404e34 <dhcp_timer_coarse+0x24>)
  404e20:	f64e 2060 	movw	r0, #60000	; 0xea60
  404e24:	4b04      	ldr	r3, [pc, #16]	; (404e38 <dhcp_timer_coarse+0x28>)
  404e26:	4798      	blx	r3
}
  404e28:	bf00      	nop
  404e2a:	3708      	adds	r7, #8
  404e2c:	46bd      	mov	sp, r7
  404e2e:	bd80      	pop	{r7, pc}
  404e30:	004022ad 	.word	0x004022ad
  404e34:	00404e11 	.word	0x00404e11
  404e38:	00404ec9 	.word	0x00404ec9

00404e3c <dhcp_timer_fine>:
 *
 * @param arg unused argument
 */
static void
dhcp_timer_fine(void *arg)
{
  404e3c:	b580      	push	{r7, lr}
  404e3e:	b082      	sub	sp, #8
  404e40:	af00      	add	r7, sp, #0
  404e42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: dhcp_fine_tmr()\n"));
  dhcp_fine_tmr();
  404e44:	4b05      	ldr	r3, [pc, #20]	; (404e5c <dhcp_timer_fine+0x20>)
  404e46:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  404e48:	2200      	movs	r2, #0
  404e4a:	4905      	ldr	r1, [pc, #20]	; (404e60 <dhcp_timer_fine+0x24>)
  404e4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404e50:	4b04      	ldr	r3, [pc, #16]	; (404e64 <dhcp_timer_fine+0x28>)
  404e52:	4798      	blx	r3
}
  404e54:	bf00      	nop
  404e56:	3708      	adds	r7, #8
  404e58:	46bd      	mov	sp, r7
  404e5a:	bd80      	pop	{r7, pc}
  404e5c:	00402311 	.word	0x00402311
  404e60:	00404e3d 	.word	0x00404e3d
  404e64:	00404ec9 	.word	0x00404ec9

00404e68 <sys_timeouts_init>:
}
#endif /* LWIP_DNS */

/** Initialize this module */
void sys_timeouts_init(void)
{
  404e68:	b580      	push	{r7, lr}
  404e6a:	af00      	add	r7, sp, #0
#if IP_REASSEMBLY
  sys_timeout(IP_TMR_INTERVAL, ip_reass_timer, NULL);
  404e6c:	2200      	movs	r2, #0
  404e6e:	490f      	ldr	r1, [pc, #60]	; (404eac <sys_timeouts_init+0x44>)
  404e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  404e74:	4b0e      	ldr	r3, [pc, #56]	; (404eb0 <sys_timeouts_init+0x48>)
  404e76:	4798      	blx	r3
#endif /* IP_REASSEMBLY */
#if LWIP_ARP
  sys_timeout(ARP_TMR_INTERVAL, arp_timer, NULL);
  404e78:	2200      	movs	r2, #0
  404e7a:	490e      	ldr	r1, [pc, #56]	; (404eb4 <sys_timeouts_init+0x4c>)
  404e7c:	f241 3088 	movw	r0, #5000	; 0x1388
  404e80:	4b0b      	ldr	r3, [pc, #44]	; (404eb0 <sys_timeouts_init+0x48>)
  404e82:	4798      	blx	r3
#endif /* LWIP_ARP */
#if LWIP_DHCP
  sys_timeout(DHCP_COARSE_TIMER_MSECS, dhcp_timer_coarse, NULL);
  404e84:	2200      	movs	r2, #0
  404e86:	490c      	ldr	r1, [pc, #48]	; (404eb8 <sys_timeouts_init+0x50>)
  404e88:	f64e 2060 	movw	r0, #60000	; 0xea60
  404e8c:	4b08      	ldr	r3, [pc, #32]	; (404eb0 <sys_timeouts_init+0x48>)
  404e8e:	4798      	blx	r3
  sys_timeout(DHCP_FINE_TIMER_MSECS, dhcp_timer_fine, NULL);
  404e90:	2200      	movs	r2, #0
  404e92:	490a      	ldr	r1, [pc, #40]	; (404ebc <sys_timeouts_init+0x54>)
  404e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
  404e98:	4b05      	ldr	r3, [pc, #20]	; (404eb0 <sys_timeouts_init+0x48>)
  404e9a:	4798      	blx	r3
  sys_timeout(DNS_TMR_INTERVAL, dns_timer, NULL);
#endif /* LWIP_DNS */

#if NO_SYS
  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  404e9c:	4b08      	ldr	r3, [pc, #32]	; (404ec0 <sys_timeouts_init+0x58>)
  404e9e:	4798      	blx	r3
  404ea0:	4602      	mov	r2, r0
  404ea2:	4b08      	ldr	r3, [pc, #32]	; (404ec4 <sys_timeouts_init+0x5c>)
  404ea4:	601a      	str	r2, [r3, #0]
#endif
}
  404ea6:	bf00      	nop
  404ea8:	bd80      	pop	{r7, pc}
  404eaa:	bf00      	nop
  404eac:	00404db9 	.word	0x00404db9
  404eb0:	00404ec9 	.word	0x00404ec9
  404eb4:	00404de5 	.word	0x00404de5
  404eb8:	00404e11 	.word	0x00404e11
  404ebc:	00404e3d 	.word	0x00404e3d
  404ec0:	0040c9fd 	.word	0x0040c9fd
  404ec4:	20400ab8 	.word	0x20400ab8

00404ec8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  404ec8:	b580      	push	{r7, lr}
  404eca:	b086      	sub	sp, #24
  404ecc:	af00      	add	r7, sp, #0
  404ece:	60f8      	str	r0, [r7, #12]
  404ed0:	60b9      	str	r1, [r7, #8]
  404ed2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  404ed4:	2005      	movs	r0, #5
  404ed6:	4b33      	ldr	r3, [pc, #204]	; (404fa4 <sys_timeout+0xdc>)
  404ed8:	4798      	blx	r3
  404eda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
  404edc:	693b      	ldr	r3, [r7, #16]
  404ede:	2b00      	cmp	r3, #0
  404ee0:	d05b      	beq.n	404f9a <sys_timeout+0xd2>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }
  timeout->next = NULL;
  404ee2:	693b      	ldr	r3, [r7, #16]
  404ee4:	2200      	movs	r2, #0
  404ee6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
  404ee8:	693b      	ldr	r3, [r7, #16]
  404eea:	68ba      	ldr	r2, [r7, #8]
  404eec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
  404eee:	693b      	ldr	r3, [r7, #16]
  404ef0:	687a      	ldr	r2, [r7, #4]
  404ef2:	60da      	str	r2, [r3, #12]
  timeout->time = msecs;
  404ef4:	693b      	ldr	r3, [r7, #16]
  404ef6:	68fa      	ldr	r2, [r7, #12]
  404ef8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  404efa:	4b2b      	ldr	r3, [pc, #172]	; (404fa8 <sys_timeout+0xe0>)
  404efc:	681b      	ldr	r3, [r3, #0]
  404efe:	2b00      	cmp	r3, #0
  404f00:	d103      	bne.n	404f0a <sys_timeout+0x42>
    next_timeout = timeout;
  404f02:	4a29      	ldr	r2, [pc, #164]	; (404fa8 <sys_timeout+0xe0>)
  404f04:	693b      	ldr	r3, [r7, #16]
  404f06:	6013      	str	r3, [r2, #0]
    return;
  404f08:	e048      	b.n	404f9c <sys_timeout+0xd4>
  }

  if (next_timeout->time > msecs) {
  404f0a:	4b27      	ldr	r3, [pc, #156]	; (404fa8 <sys_timeout+0xe0>)
  404f0c:	681b      	ldr	r3, [r3, #0]
  404f0e:	685a      	ldr	r2, [r3, #4]
  404f10:	68fb      	ldr	r3, [r7, #12]
  404f12:	429a      	cmp	r2, r3
  404f14:	d90f      	bls.n	404f36 <sys_timeout+0x6e>
    next_timeout->time -= msecs;
  404f16:	4b24      	ldr	r3, [pc, #144]	; (404fa8 <sys_timeout+0xe0>)
  404f18:	681b      	ldr	r3, [r3, #0]
  404f1a:	4a23      	ldr	r2, [pc, #140]	; (404fa8 <sys_timeout+0xe0>)
  404f1c:	6812      	ldr	r2, [r2, #0]
  404f1e:	6851      	ldr	r1, [r2, #4]
  404f20:	68fa      	ldr	r2, [r7, #12]
  404f22:	1a8a      	subs	r2, r1, r2
  404f24:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
  404f26:	4b20      	ldr	r3, [pc, #128]	; (404fa8 <sys_timeout+0xe0>)
  404f28:	681a      	ldr	r2, [r3, #0]
  404f2a:	693b      	ldr	r3, [r7, #16]
  404f2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
  404f2e:	4a1e      	ldr	r2, [pc, #120]	; (404fa8 <sys_timeout+0xe0>)
  404f30:	693b      	ldr	r3, [r7, #16]
  404f32:	6013      	str	r3, [r2, #0]
  404f34:	e032      	b.n	404f9c <sys_timeout+0xd4>
  } else {
    for(t = next_timeout; t != NULL; t = t->next) {
  404f36:	4b1c      	ldr	r3, [pc, #112]	; (404fa8 <sys_timeout+0xe0>)
  404f38:	681b      	ldr	r3, [r3, #0]
  404f3a:	617b      	str	r3, [r7, #20]
  404f3c:	e029      	b.n	404f92 <sys_timeout+0xca>
      timeout->time -= t->time;
  404f3e:	693b      	ldr	r3, [r7, #16]
  404f40:	685a      	ldr	r2, [r3, #4]
  404f42:	697b      	ldr	r3, [r7, #20]
  404f44:	685b      	ldr	r3, [r3, #4]
  404f46:	1ad2      	subs	r2, r2, r3
  404f48:	693b      	ldr	r3, [r7, #16]
  404f4a:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  404f4c:	697b      	ldr	r3, [r7, #20]
  404f4e:	681b      	ldr	r3, [r3, #0]
  404f50:	2b00      	cmp	r3, #0
  404f52:	d006      	beq.n	404f62 <sys_timeout+0x9a>
  404f54:	697b      	ldr	r3, [r7, #20]
  404f56:	681b      	ldr	r3, [r3, #0]
  404f58:	685a      	ldr	r2, [r3, #4]
  404f5a:	693b      	ldr	r3, [r7, #16]
  404f5c:	685b      	ldr	r3, [r3, #4]
  404f5e:	429a      	cmp	r2, r3
  404f60:	d914      	bls.n	404f8c <sys_timeout+0xc4>
        if (t->next != NULL) {
  404f62:	697b      	ldr	r3, [r7, #20]
  404f64:	681b      	ldr	r3, [r3, #0]
  404f66:	2b00      	cmp	r3, #0
  404f68:	d008      	beq.n	404f7c <sys_timeout+0xb4>
          t->next->time -= timeout->time;
  404f6a:	697b      	ldr	r3, [r7, #20]
  404f6c:	681b      	ldr	r3, [r3, #0]
  404f6e:	697a      	ldr	r2, [r7, #20]
  404f70:	6812      	ldr	r2, [r2, #0]
  404f72:	6851      	ldr	r1, [r2, #4]
  404f74:	693a      	ldr	r2, [r7, #16]
  404f76:	6852      	ldr	r2, [r2, #4]
  404f78:	1a8a      	subs	r2, r1, r2
  404f7a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  404f7c:	697b      	ldr	r3, [r7, #20]
  404f7e:	681a      	ldr	r2, [r3, #0]
  404f80:	693b      	ldr	r3, [r7, #16]
  404f82:	601a      	str	r2, [r3, #0]
        t->next = timeout;
  404f84:	697b      	ldr	r3, [r7, #20]
  404f86:	693a      	ldr	r2, [r7, #16]
  404f88:	601a      	str	r2, [r3, #0]
        break;
  404f8a:	e007      	b.n	404f9c <sys_timeout+0xd4>
    for(t = next_timeout; t != NULL; t = t->next) {
  404f8c:	697b      	ldr	r3, [r7, #20]
  404f8e:	681b      	ldr	r3, [r3, #0]
  404f90:	617b      	str	r3, [r7, #20]
  404f92:	697b      	ldr	r3, [r7, #20]
  404f94:	2b00      	cmp	r3, #0
  404f96:	d1d2      	bne.n	404f3e <sys_timeout+0x76>
  404f98:	e000      	b.n	404f9c <sys_timeout+0xd4>
    return;
  404f9a:	bf00      	nop
      }
    }
  }
}
  404f9c:	3718      	adds	r7, #24
  404f9e:	46bd      	mov	sp, r7
  404fa0:	bd80      	pop	{r7, pc}
  404fa2:	bf00      	nop
  404fa4:	004054a5 	.word	0x004054a5
  404fa8:	20400ab4 	.word	0x20400ab4

00404fac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
  404fac:	b480      	push	{r7}
  404fae:	b085      	sub	sp, #20
  404fb0:	af00      	add	r7, sp, #0
  404fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);

  nmem = (struct mem *)(void *)&ram[mem->next];
  404fb4:	4b2a      	ldr	r3, [pc, #168]	; (405060 <plug_holes+0xb4>)
  404fb6:	681b      	ldr	r3, [r3, #0]
  404fb8:	687a      	ldr	r2, [r7, #4]
  404fba:	8812      	ldrh	r2, [r2, #0]
  404fbc:	4413      	add	r3, r2
  404fbe:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
  404fc0:	687a      	ldr	r2, [r7, #4]
  404fc2:	68fb      	ldr	r3, [r7, #12]
  404fc4:	429a      	cmp	r2, r3
  404fc6:	d01f      	beq.n	405008 <plug_holes+0x5c>
  404fc8:	68fb      	ldr	r3, [r7, #12]
  404fca:	791b      	ldrb	r3, [r3, #4]
  404fcc:	2b00      	cmp	r3, #0
  404fce:	d11b      	bne.n	405008 <plug_holes+0x5c>
  404fd0:	4b24      	ldr	r3, [pc, #144]	; (405064 <plug_holes+0xb8>)
  404fd2:	681b      	ldr	r3, [r3, #0]
  404fd4:	68fa      	ldr	r2, [r7, #12]
  404fd6:	429a      	cmp	r2, r3
  404fd8:	d016      	beq.n	405008 <plug_holes+0x5c>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
  404fda:	4b23      	ldr	r3, [pc, #140]	; (405068 <plug_holes+0xbc>)
  404fdc:	681a      	ldr	r2, [r3, #0]
  404fde:	68fb      	ldr	r3, [r7, #12]
  404fe0:	429a      	cmp	r2, r3
  404fe2:	d102      	bne.n	404fea <plug_holes+0x3e>
      lfree = mem;
  404fe4:	4a20      	ldr	r2, [pc, #128]	; (405068 <plug_holes+0xbc>)
  404fe6:	687b      	ldr	r3, [r7, #4]
  404fe8:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
  404fea:	68fb      	ldr	r3, [r7, #12]
  404fec:	881a      	ldrh	r2, [r3, #0]
  404fee:	687b      	ldr	r3, [r7, #4]
  404ff0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
  404ff2:	4b1b      	ldr	r3, [pc, #108]	; (405060 <plug_holes+0xb4>)
  404ff4:	681b      	ldr	r3, [r3, #0]
  404ff6:	68fa      	ldr	r2, [r7, #12]
  404ff8:	8812      	ldrh	r2, [r2, #0]
  404ffa:	4413      	add	r3, r2
  404ffc:	687a      	ldr	r2, [r7, #4]
  404ffe:	4918      	ldr	r1, [pc, #96]	; (405060 <plug_holes+0xb4>)
  405000:	6809      	ldr	r1, [r1, #0]
  405002:	1a52      	subs	r2, r2, r1
  405004:	b292      	uxth	r2, r2
  405006:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
  405008:	4b15      	ldr	r3, [pc, #84]	; (405060 <plug_holes+0xb4>)
  40500a:	681b      	ldr	r3, [r3, #0]
  40500c:	687a      	ldr	r2, [r7, #4]
  40500e:	8852      	ldrh	r2, [r2, #2]
  405010:	4413      	add	r3, r2
  405012:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
  405014:	68ba      	ldr	r2, [r7, #8]
  405016:	687b      	ldr	r3, [r7, #4]
  405018:	429a      	cmp	r2, r3
  40501a:	d01a      	beq.n	405052 <plug_holes+0xa6>
  40501c:	68bb      	ldr	r3, [r7, #8]
  40501e:	791b      	ldrb	r3, [r3, #4]
  405020:	2b00      	cmp	r3, #0
  405022:	d116      	bne.n	405052 <plug_holes+0xa6>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
  405024:	4b10      	ldr	r3, [pc, #64]	; (405068 <plug_holes+0xbc>)
  405026:	681a      	ldr	r2, [r3, #0]
  405028:	687b      	ldr	r3, [r7, #4]
  40502a:	429a      	cmp	r2, r3
  40502c:	d102      	bne.n	405034 <plug_holes+0x88>
      lfree = pmem;
  40502e:	4a0e      	ldr	r2, [pc, #56]	; (405068 <plug_holes+0xbc>)
  405030:	68bb      	ldr	r3, [r7, #8]
  405032:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
  405034:	687b      	ldr	r3, [r7, #4]
  405036:	881a      	ldrh	r2, [r3, #0]
  405038:	68bb      	ldr	r3, [r7, #8]
  40503a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
  40503c:	4b08      	ldr	r3, [pc, #32]	; (405060 <plug_holes+0xb4>)
  40503e:	681b      	ldr	r3, [r3, #0]
  405040:	687a      	ldr	r2, [r7, #4]
  405042:	8812      	ldrh	r2, [r2, #0]
  405044:	4413      	add	r3, r2
  405046:	68ba      	ldr	r2, [r7, #8]
  405048:	4905      	ldr	r1, [pc, #20]	; (405060 <plug_holes+0xb4>)
  40504a:	6809      	ldr	r1, [r1, #0]
  40504c:	1a52      	subs	r2, r2, r1
  40504e:	b292      	uxth	r2, r2
  405050:	805a      	strh	r2, [r3, #2]
  }
}
  405052:	bf00      	nop
  405054:	3714      	adds	r7, #20
  405056:	46bd      	mov	sp, r7
  405058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40505c:	4770      	bx	lr
  40505e:	bf00      	nop
  405060:	20400ac0 	.word	0x20400ac0
  405064:	20400ac4 	.word	0x20400ac4
  405068:	20400ac8 	.word	0x20400ac8

0040506c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
  40506c:	b480      	push	{r7}
  40506e:	b083      	sub	sp, #12
  405070:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
  405072:	4b19      	ldr	r3, [pc, #100]	; (4050d8 <mem_init+0x6c>)
  405074:	3303      	adds	r3, #3
  405076:	f023 0303 	bic.w	r3, r3, #3
  40507a:	461a      	mov	r2, r3
  40507c:	4b17      	ldr	r3, [pc, #92]	; (4050dc <mem_init+0x70>)
  40507e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  405080:	4b16      	ldr	r3, [pc, #88]	; (4050dc <mem_init+0x70>)
  405082:	681b      	ldr	r3, [r3, #0]
  405084:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
  405086:	687b      	ldr	r3, [r7, #4]
  405088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40508c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
  40508e:	687b      	ldr	r3, [r7, #4]
  405090:	2200      	movs	r2, #0
  405092:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
  405094:	687b      	ldr	r3, [r7, #4]
  405096:	2200      	movs	r2, #0
  405098:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
  40509a:	4b10      	ldr	r3, [pc, #64]	; (4050dc <mem_init+0x70>)
  40509c:	681b      	ldr	r3, [r3, #0]
  40509e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4050a2:	4a0f      	ldr	r2, [pc, #60]	; (4050e0 <mem_init+0x74>)
  4050a4:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
  4050a6:	4b0e      	ldr	r3, [pc, #56]	; (4050e0 <mem_init+0x74>)
  4050a8:	681b      	ldr	r3, [r3, #0]
  4050aa:	2201      	movs	r2, #1
  4050ac:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
  4050ae:	4b0c      	ldr	r3, [pc, #48]	; (4050e0 <mem_init+0x74>)
  4050b0:	681b      	ldr	r3, [r3, #0]
  4050b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4050b6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
  4050b8:	4b09      	ldr	r3, [pc, #36]	; (4050e0 <mem_init+0x74>)
  4050ba:	681b      	ldr	r3, [r3, #0]
  4050bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4050c0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
  4050c2:	4b06      	ldr	r3, [pc, #24]	; (4050dc <mem_init+0x70>)
  4050c4:	681b      	ldr	r3, [r3, #0]
  4050c6:	4a07      	ldr	r2, [pc, #28]	; (4050e4 <mem_init+0x78>)
  4050c8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if(sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
  4050ca:	bf00      	nop
  4050cc:	370c      	adds	r7, #12
  4050ce:	46bd      	mov	sp, r7
  4050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4050d4:	4770      	bx	lr
  4050d6:	bf00      	nop
  4050d8:	2040397c 	.word	0x2040397c
  4050dc:	20400ac0 	.word	0x20400ac0
  4050e0:	20400ac4 	.word	0x20400ac4
  4050e4:	20400ac8 	.word	0x20400ac8

004050e8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
  4050e8:	b580      	push	{r7, lr}
  4050ea:	b084      	sub	sp, #16
  4050ec:	af00      	add	r7, sp, #0
  4050ee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
  4050f0:	687b      	ldr	r3, [r7, #4]
  4050f2:	2b00      	cmp	r3, #0
  4050f4:	d01b      	beq.n	40512e <mem_free+0x46>
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  4050f6:	4b11      	ldr	r3, [pc, #68]	; (40513c <mem_free+0x54>)
  4050f8:	681b      	ldr	r3, [r3, #0]
  4050fa:	687a      	ldr	r2, [r7, #4]
  4050fc:	429a      	cmp	r2, r3
  4050fe:	d318      	bcc.n	405132 <mem_free+0x4a>
  405100:	4b0f      	ldr	r3, [pc, #60]	; (405140 <mem_free+0x58>)
  405102:	681b      	ldr	r3, [r3, #0]
  405104:	687a      	ldr	r2, [r7, #4]
  405106:	429a      	cmp	r2, r3
  405108:	d213      	bcs.n	405132 <mem_free+0x4a>
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  40510a:	687b      	ldr	r3, [r7, #4]
  40510c:	3b08      	subs	r3, #8
  40510e:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
  /* ... and is now unused. */
  mem->used = 0;
  405110:	68fb      	ldr	r3, [r7, #12]
  405112:	2200      	movs	r2, #0
  405114:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
  405116:	4b0b      	ldr	r3, [pc, #44]	; (405144 <mem_free+0x5c>)
  405118:	681b      	ldr	r3, [r3, #0]
  40511a:	68fa      	ldr	r2, [r7, #12]
  40511c:	429a      	cmp	r2, r3
  40511e:	d202      	bcs.n	405126 <mem_free+0x3e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
  405120:	4a08      	ldr	r2, [pc, #32]	; (405144 <mem_free+0x5c>)
  405122:	68fb      	ldr	r3, [r7, #12]
  405124:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
  405126:	68f8      	ldr	r0, [r7, #12]
  405128:	4b07      	ldr	r3, [pc, #28]	; (405148 <mem_free+0x60>)
  40512a:	4798      	blx	r3
  40512c:	e002      	b.n	405134 <mem_free+0x4c>
    return;
  40512e:	bf00      	nop
  405130:	e000      	b.n	405134 <mem_free+0x4c>
    return;
  405132:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
  405134:	3710      	adds	r7, #16
  405136:	46bd      	mov	sp, r7
  405138:	bd80      	pop	{r7, pc}
  40513a:	bf00      	nop
  40513c:	20400ac0 	.word	0x20400ac0
  405140:	20400ac4 	.word	0x20400ac4
  405144:	20400ac8 	.word	0x20400ac8
  405148:	00404fad 	.word	0x00404fad

0040514c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
  40514c:	b480      	push	{r7}
  40514e:	b087      	sub	sp, #28
  405150:	af00      	add	r7, sp, #0
  405152:	6078      	str	r0, [r7, #4]
  405154:	460b      	mov	r3, r1
  405156:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
  405158:	887b      	ldrh	r3, [r7, #2]
  40515a:	3303      	adds	r3, #3
  40515c:	b29b      	uxth	r3, r3
  40515e:	f023 0303 	bic.w	r3, r3, #3
  405162:	807b      	strh	r3, [r7, #2]

  if(newsize < MIN_SIZE_ALIGNED) {
  405164:	887b      	ldrh	r3, [r7, #2]
  405166:	2b0b      	cmp	r3, #11
  405168:	d801      	bhi.n	40516e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  40516a:	230c      	movs	r3, #12
  40516c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
  40516e:	887b      	ldrh	r3, [r7, #2]
  405170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405174:	d901      	bls.n	40517a <mem_trim+0x2e>
    return NULL;
  405176:	2300      	movs	r3, #0
  405178:	e095      	b.n	4052a6 <mem_trim+0x15a>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
  40517a:	4b4e      	ldr	r3, [pc, #312]	; (4052b4 <mem_trim+0x168>)
  40517c:	681b      	ldr	r3, [r3, #0]
  40517e:	687a      	ldr	r2, [r7, #4]
  405180:	429a      	cmp	r2, r3
  405182:	d304      	bcc.n	40518e <mem_trim+0x42>
  405184:	4b4c      	ldr	r3, [pc, #304]	; (4052b8 <mem_trim+0x16c>)
  405186:	681b      	ldr	r3, [r3, #0]
  405188:	687a      	ldr	r2, [r7, #4]
  40518a:	429a      	cmp	r2, r3
  40518c:	d301      	bcc.n	405192 <mem_trim+0x46>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
  40518e:	687b      	ldr	r3, [r7, #4]
  405190:	e089      	b.n	4052a6 <mem_trim+0x15a>
  }
  /* Get the corresponding struct mem ... */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
  405192:	687b      	ldr	r3, [r7, #4]
  405194:	3b08      	subs	r3, #8
  405196:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
  405198:	697b      	ldr	r3, [r7, #20]
  40519a:	4a46      	ldr	r2, [pc, #280]	; (4052b4 <mem_trim+0x168>)
  40519c:	6812      	ldr	r2, [r2, #0]
  40519e:	1a9b      	subs	r3, r3, r2
  4051a0:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
  4051a2:	697b      	ldr	r3, [r7, #20]
  4051a4:	881a      	ldrh	r2, [r3, #0]
  4051a6:	8a7b      	ldrh	r3, [r7, #18]
  4051a8:	1ad3      	subs	r3, r2, r3
  4051aa:	b29b      	uxth	r3, r3
  4051ac:	3b08      	subs	r3, #8
  4051ae:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
  if (newsize > size) {
  4051b0:	887a      	ldrh	r2, [r7, #2]
  4051b2:	8a3b      	ldrh	r3, [r7, #16]
  4051b4:	429a      	cmp	r2, r3
  4051b6:	d901      	bls.n	4051bc <mem_trim+0x70>
    /* not supported */
    return NULL;
  4051b8:	2300      	movs	r3, #0
  4051ba:	e074      	b.n	4052a6 <mem_trim+0x15a>
  }
  if (newsize == size) {
  4051bc:	887a      	ldrh	r2, [r7, #2]
  4051be:	8a3b      	ldrh	r3, [r7, #16]
  4051c0:	429a      	cmp	r2, r3
  4051c2:	d101      	bne.n	4051c8 <mem_trim+0x7c>
    /* No change in size, simply return */
    return rmem;
  4051c4:	687b      	ldr	r3, [r7, #4]
  4051c6:	e06e      	b.n	4052a6 <mem_trim+0x15a>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
  4051c8:	4b3a      	ldr	r3, [pc, #232]	; (4052b4 <mem_trim+0x168>)
  4051ca:	681b      	ldr	r3, [r3, #0]
  4051cc:	697a      	ldr	r2, [r7, #20]
  4051ce:	8812      	ldrh	r2, [r2, #0]
  4051d0:	4413      	add	r3, r2
  4051d2:	60fb      	str	r3, [r7, #12]
  if(mem2->used == 0) {
  4051d4:	68fb      	ldr	r3, [r7, #12]
  4051d6:	791b      	ldrb	r3, [r3, #4]
  4051d8:	2b00      	cmp	r3, #0
  4051da:	d131      	bne.n	405240 <mem_trim+0xf4>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
  4051dc:	68fb      	ldr	r3, [r7, #12]
  4051de:	881b      	ldrh	r3, [r3, #0]
  4051e0:	817b      	strh	r3, [r7, #10]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  4051e2:	8a7a      	ldrh	r2, [r7, #18]
  4051e4:	887b      	ldrh	r3, [r7, #2]
  4051e6:	4413      	add	r3, r2
  4051e8:	b29b      	uxth	r3, r3
  4051ea:	3308      	adds	r3, #8
  4051ec:	813b      	strh	r3, [r7, #8]
    if (lfree == mem2) {
  4051ee:	4b33      	ldr	r3, [pc, #204]	; (4052bc <mem_trim+0x170>)
  4051f0:	681a      	ldr	r2, [r3, #0]
  4051f2:	68fb      	ldr	r3, [r7, #12]
  4051f4:	429a      	cmp	r2, r3
  4051f6:	d105      	bne.n	405204 <mem_trim+0xb8>
      lfree = (struct mem *)(void *)&ram[ptr2];
  4051f8:	4b2e      	ldr	r3, [pc, #184]	; (4052b4 <mem_trim+0x168>)
  4051fa:	681a      	ldr	r2, [r3, #0]
  4051fc:	893b      	ldrh	r3, [r7, #8]
  4051fe:	4413      	add	r3, r2
  405200:	4a2e      	ldr	r2, [pc, #184]	; (4052bc <mem_trim+0x170>)
  405202:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
  405204:	4b2b      	ldr	r3, [pc, #172]	; (4052b4 <mem_trim+0x168>)
  405206:	681a      	ldr	r2, [r3, #0]
  405208:	893b      	ldrh	r3, [r7, #8]
  40520a:	4413      	add	r3, r2
  40520c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
  40520e:	68fb      	ldr	r3, [r7, #12]
  405210:	2200      	movs	r2, #0
  405212:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
  405214:	68fb      	ldr	r3, [r7, #12]
  405216:	897a      	ldrh	r2, [r7, #10]
  405218:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
  40521a:	68fb      	ldr	r3, [r7, #12]
  40521c:	8a7a      	ldrh	r2, [r7, #18]
  40521e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
  405220:	697b      	ldr	r3, [r7, #20]
  405222:	893a      	ldrh	r2, [r7, #8]
  405224:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
  405226:	68fb      	ldr	r3, [r7, #12]
  405228:	881b      	ldrh	r3, [r3, #0]
  40522a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  40522e:	d039      	beq.n	4052a4 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405230:	4b20      	ldr	r3, [pc, #128]	; (4052b4 <mem_trim+0x168>)
  405232:	681b      	ldr	r3, [r3, #0]
  405234:	68fa      	ldr	r2, [r7, #12]
  405236:	8812      	ldrh	r2, [r2, #0]
  405238:	4413      	add	r3, r2
  40523a:	893a      	ldrh	r2, [r7, #8]
  40523c:	805a      	strh	r2, [r3, #2]
  40523e:	e031      	b.n	4052a4 <mem_trim+0x158>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
  405240:	887b      	ldrh	r3, [r7, #2]
  405242:	f103 0214 	add.w	r2, r3, #20
  405246:	8a3b      	ldrh	r3, [r7, #16]
  405248:	429a      	cmp	r2, r3
  40524a:	d82b      	bhi.n	4052a4 <mem_trim+0x158>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
  40524c:	8a7a      	ldrh	r2, [r7, #18]
  40524e:	887b      	ldrh	r3, [r7, #2]
  405250:	4413      	add	r3, r2
  405252:	b29b      	uxth	r3, r3
  405254:	3308      	adds	r3, #8
  405256:	813b      	strh	r3, [r7, #8]
    mem2 = (struct mem *)(void *)&ram[ptr2];
  405258:	4b16      	ldr	r3, [pc, #88]	; (4052b4 <mem_trim+0x168>)
  40525a:	681a      	ldr	r2, [r3, #0]
  40525c:	893b      	ldrh	r3, [r7, #8]
  40525e:	4413      	add	r3, r2
  405260:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
  405262:	4b16      	ldr	r3, [pc, #88]	; (4052bc <mem_trim+0x170>)
  405264:	681b      	ldr	r3, [r3, #0]
  405266:	68fa      	ldr	r2, [r7, #12]
  405268:	429a      	cmp	r2, r3
  40526a:	d202      	bcs.n	405272 <mem_trim+0x126>
      lfree = mem2;
  40526c:	4a13      	ldr	r2, [pc, #76]	; (4052bc <mem_trim+0x170>)
  40526e:	68fb      	ldr	r3, [r7, #12]
  405270:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
  405272:	68fb      	ldr	r3, [r7, #12]
  405274:	2200      	movs	r2, #0
  405276:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
  405278:	697b      	ldr	r3, [r7, #20]
  40527a:	881a      	ldrh	r2, [r3, #0]
  40527c:	68fb      	ldr	r3, [r7, #12]
  40527e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
  405280:	68fb      	ldr	r3, [r7, #12]
  405282:	8a7a      	ldrh	r2, [r7, #18]
  405284:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
  405286:	697b      	ldr	r3, [r7, #20]
  405288:	893a      	ldrh	r2, [r7, #8]
  40528a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
  40528c:	68fb      	ldr	r3, [r7, #12]
  40528e:	881b      	ldrh	r3, [r3, #0]
  405290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405294:	d006      	beq.n	4052a4 <mem_trim+0x158>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405296:	4b07      	ldr	r3, [pc, #28]	; (4052b4 <mem_trim+0x168>)
  405298:	681b      	ldr	r3, [r3, #0]
  40529a:	68fa      	ldr	r2, [r7, #12]
  40529c:	8812      	ldrh	r2, [r2, #0]
  40529e:	4413      	add	r3, r2
  4052a0:	893a      	ldrh	r2, [r7, #8]
  4052a2:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
  4052a4:	687b      	ldr	r3, [r7, #4]
}
  4052a6:	4618      	mov	r0, r3
  4052a8:	371c      	adds	r7, #28
  4052aa:	46bd      	mov	sp, r7
  4052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4052b0:	4770      	bx	lr
  4052b2:	bf00      	nop
  4052b4:	20400ac0 	.word	0x20400ac0
  4052b8:	20400ac4 	.word	0x20400ac4
  4052bc:	20400ac8 	.word	0x20400ac8

004052c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
  4052c0:	b480      	push	{r7}
  4052c2:	b089      	sub	sp, #36	; 0x24
  4052c4:	af00      	add	r7, sp, #0
  4052c6:	4603      	mov	r3, r0
  4052c8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
  4052ca:	88fb      	ldrh	r3, [r7, #6]
  4052cc:	2b00      	cmp	r3, #0
  4052ce:	d101      	bne.n	4052d4 <mem_malloc+0x14>
    return NULL;
  4052d0:	2300      	movs	r3, #0
  4052d2:	e08c      	b.n	4053ee <mem_malloc+0x12e>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
  4052d4:	88fb      	ldrh	r3, [r7, #6]
  4052d6:	3303      	adds	r3, #3
  4052d8:	b29b      	uxth	r3, r3
  4052da:	f023 0303 	bic.w	r3, r3, #3
  4052de:	80fb      	strh	r3, [r7, #6]

  if(size < MIN_SIZE_ALIGNED) {
  4052e0:	88fb      	ldrh	r3, [r7, #6]
  4052e2:	2b0b      	cmp	r3, #11
  4052e4:	d801      	bhi.n	4052ea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  4052e6:	230c      	movs	r3, #12
  4052e8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
  4052ea:	88fb      	ldrh	r3, [r7, #6]
  4052ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  4052f0:	d901      	bls.n	4052f6 <mem_malloc+0x36>
    return NULL;
  4052f2:	2300      	movs	r3, #0
  4052f4:	e07b      	b.n	4053ee <mem_malloc+0x12e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  4052f6:	4b41      	ldr	r3, [pc, #260]	; (4053fc <mem_malloc+0x13c>)
  4052f8:	681b      	ldr	r3, [r3, #0]
  4052fa:	461a      	mov	r2, r3
  4052fc:	4b40      	ldr	r3, [pc, #256]	; (405400 <mem_malloc+0x140>)
  4052fe:	681b      	ldr	r3, [r3, #0]
  405300:	1ad3      	subs	r3, r2, r3
  405302:	83fb      	strh	r3, [r7, #30]
  405304:	e06c      	b.n	4053e0 <mem_malloc+0x120>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
  405306:	4b3e      	ldr	r3, [pc, #248]	; (405400 <mem_malloc+0x140>)
  405308:	681a      	ldr	r2, [r3, #0]
  40530a:	8bfb      	ldrh	r3, [r7, #30]
  40530c:	4413      	add	r3, r2
  40530e:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
  405310:	697b      	ldr	r3, [r7, #20]
  405312:	791b      	ldrb	r3, [r3, #4]
  405314:	2b00      	cmp	r3, #0
  405316:	d15d      	bne.n	4053d4 <mem_malloc+0x114>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
  405318:	697b      	ldr	r3, [r7, #20]
  40531a:	881b      	ldrh	r3, [r3, #0]
  40531c:	461a      	mov	r2, r3
  40531e:	8bfb      	ldrh	r3, [r7, #30]
  405320:	1ad3      	subs	r3, r2, r3
  405322:	f1a3 0208 	sub.w	r2, r3, #8
  405326:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
  405328:	429a      	cmp	r2, r3
  40532a:	d353      	bcc.n	4053d4 <mem_malloc+0x114>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
  40532c:	697b      	ldr	r3, [r7, #20]
  40532e:	881b      	ldrh	r3, [r3, #0]
  405330:	461a      	mov	r2, r3
  405332:	8bfb      	ldrh	r3, [r7, #30]
  405334:	1ad3      	subs	r3, r2, r3
  405336:	f1a3 0208 	sub.w	r2, r3, #8
  40533a:	88fb      	ldrh	r3, [r7, #6]
  40533c:	3314      	adds	r3, #20
  40533e:	429a      	cmp	r2, r3
  405340:	d327      	bcc.n	405392 <mem_malloc+0xd2>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
  405342:	8bfa      	ldrh	r2, [r7, #30]
  405344:	88fb      	ldrh	r3, [r7, #6]
  405346:	4413      	add	r3, r2
  405348:	b29b      	uxth	r3, r3
  40534a:	3308      	adds	r3, #8
  40534c:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
  40534e:	4b2c      	ldr	r3, [pc, #176]	; (405400 <mem_malloc+0x140>)
  405350:	681a      	ldr	r2, [r3, #0]
  405352:	8a7b      	ldrh	r3, [r7, #18]
  405354:	4413      	add	r3, r2
  405356:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
  405358:	68fb      	ldr	r3, [r7, #12]
  40535a:	2200      	movs	r2, #0
  40535c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
  40535e:	697b      	ldr	r3, [r7, #20]
  405360:	881a      	ldrh	r2, [r3, #0]
  405362:	68fb      	ldr	r3, [r7, #12]
  405364:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
  405366:	68fb      	ldr	r3, [r7, #12]
  405368:	8bfa      	ldrh	r2, [r7, #30]
  40536a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
  40536c:	697b      	ldr	r3, [r7, #20]
  40536e:	8a7a      	ldrh	r2, [r7, #18]
  405370:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
  405372:	697b      	ldr	r3, [r7, #20]
  405374:	2201      	movs	r2, #1
  405376:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
  405378:	68fb      	ldr	r3, [r7, #12]
  40537a:	881b      	ldrh	r3, [r3, #0]
  40537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  405380:	d00a      	beq.n	405398 <mem_malloc+0xd8>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
  405382:	4b1f      	ldr	r3, [pc, #124]	; (405400 <mem_malloc+0x140>)
  405384:	681b      	ldr	r3, [r3, #0]
  405386:	68fa      	ldr	r2, [r7, #12]
  405388:	8812      	ldrh	r2, [r2, #0]
  40538a:	4413      	add	r3, r2
  40538c:	8a7a      	ldrh	r2, [r7, #18]
  40538e:	805a      	strh	r2, [r3, #2]
  405390:	e002      	b.n	405398 <mem_malloc+0xd8>
           * take care of this).
           * -> near fit or excact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
  405392:	697b      	ldr	r3, [r7, #20]
  405394:	2201      	movs	r2, #1
  405396:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
  405398:	4b18      	ldr	r3, [pc, #96]	; (4053fc <mem_malloc+0x13c>)
  40539a:	681b      	ldr	r3, [r3, #0]
  40539c:	697a      	ldr	r2, [r7, #20]
  40539e:	429a      	cmp	r2, r3
  4053a0:	d115      	bne.n	4053ce <mem_malloc+0x10e>
          struct mem *cur = lfree;
  4053a2:	4b16      	ldr	r3, [pc, #88]	; (4053fc <mem_malloc+0x13c>)
  4053a4:	681b      	ldr	r3, [r3, #0]
  4053a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
  4053a8:	e005      	b.n	4053b6 <mem_malloc+0xf6>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
  4053aa:	4b15      	ldr	r3, [pc, #84]	; (405400 <mem_malloc+0x140>)
  4053ac:	681b      	ldr	r3, [r3, #0]
  4053ae:	69ba      	ldr	r2, [r7, #24]
  4053b0:	8812      	ldrh	r2, [r2, #0]
  4053b2:	4413      	add	r3, r2
  4053b4:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
  4053b6:	69bb      	ldr	r3, [r7, #24]
  4053b8:	791b      	ldrb	r3, [r3, #4]
  4053ba:	2b00      	cmp	r3, #0
  4053bc:	d004      	beq.n	4053c8 <mem_malloc+0x108>
  4053be:	4b11      	ldr	r3, [pc, #68]	; (405404 <mem_malloc+0x144>)
  4053c0:	681b      	ldr	r3, [r3, #0]
  4053c2:	69ba      	ldr	r2, [r7, #24]
  4053c4:	429a      	cmp	r2, r3
  4053c6:	d1f0      	bne.n	4053aa <mem_malloc+0xea>
          }
          lfree = cur;
  4053c8:	4a0c      	ldr	r2, [pc, #48]	; (4053fc <mem_malloc+0x13c>)
  4053ca:	69bb      	ldr	r3, [r7, #24]
  4053cc:	6013      	str	r3, [r2, #0]
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
  4053ce:	697b      	ldr	r3, [r7, #20]
  4053d0:	3308      	adds	r3, #8
  4053d2:	e00c      	b.n	4053ee <mem_malloc+0x12e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
  4053d4:	4b0a      	ldr	r3, [pc, #40]	; (405400 <mem_malloc+0x140>)
  4053d6:	681a      	ldr	r2, [r3, #0]
  4053d8:	8bfb      	ldrh	r3, [r7, #30]
  4053da:	4413      	add	r3, r2
  4053dc:	881b      	ldrh	r3, [r3, #0]
  4053de:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
  4053e0:	8bfa      	ldrh	r2, [r7, #30]
  4053e2:	88fb      	ldrh	r3, [r7, #6]
  4053e4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
  4053e8:	429a      	cmp	r2, r3
  4053ea:	db8c      	blt.n	405306 <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
  4053ec:	2300      	movs	r3, #0
}
  4053ee:	4618      	mov	r0, r3
  4053f0:	3724      	adds	r7, #36	; 0x24
  4053f2:	46bd      	mov	sp, r7
  4053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4053f8:	4770      	bx	lr
  4053fa:	bf00      	nop
  4053fc:	20400ac8 	.word	0x20400ac8
  405400:	20400ac0 	.word	0x20400ac0
  405404:	20400ac4 	.word	0x20400ac4

00405408 <memp_init>:
 * 
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  405408:	b480      	push	{r7}
  40540a:	b083      	sub	sp, #12
  40540c:	af00      	add	r7, sp, #0
  struct memp *memp;
  u16_t i, j;

  for (i = 0; i < MEMP_MAX; ++i) {
  40540e:	2300      	movs	r3, #0
  405410:	807b      	strh	r3, [r7, #2]
  405412:	e002      	b.n	40541a <memp_init+0x12>
  405414:	887b      	ldrh	r3, [r7, #2]
  405416:	3301      	adds	r3, #1
  405418:	807b      	strh	r3, [r7, #2]
  40541a:	887b      	ldrh	r3, [r7, #2]
  40541c:	2b07      	cmp	r3, #7
  40541e:	d9f9      	bls.n	405414 <memp_init+0xc>
    MEMP_STATS_AVAIL(err, i, 0);
    MEMP_STATS_AVAIL(avail, i, memp_num[i]);
  }

#if !MEMP_SEPARATE_POOLS
  memp = (struct memp *)LWIP_MEM_ALIGN(memp_memory);
  405420:	4b1c      	ldr	r3, [pc, #112]	; (405494 <memp_init+0x8c>)
  405422:	3303      	adds	r3, #3
  405424:	f023 0303 	bic.w	r3, r3, #3
  405428:	607b      	str	r3, [r7, #4]
#endif /* !MEMP_SEPARATE_POOLS */
  /* for every pool: */
  for (i = 0; i < MEMP_MAX; ++i) {
  40542a:	2300      	movs	r3, #0
  40542c:	807b      	strh	r3, [r7, #2]
  40542e:	e027      	b.n	405480 <memp_init+0x78>
    memp_tab[i] = NULL;
  405430:	887b      	ldrh	r3, [r7, #2]
  405432:	4a19      	ldr	r2, [pc, #100]	; (405498 <memp_init+0x90>)
  405434:	2100      	movs	r1, #0
  405436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
#if MEMP_SEPARATE_POOLS
    memp = (struct memp*)memp_bases[i];
#endif /* MEMP_SEPARATE_POOLS */
    /* create a linked list of memp elements */
    for (j = 0; j < memp_num[i]; ++j) {
  40543a:	2300      	movs	r3, #0
  40543c:	803b      	strh	r3, [r7, #0]
  40543e:	e015      	b.n	40546c <memp_init+0x64>
      memp->next = memp_tab[i];
  405440:	887b      	ldrh	r3, [r7, #2]
  405442:	4a15      	ldr	r2, [pc, #84]	; (405498 <memp_init+0x90>)
  405444:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405448:	687b      	ldr	r3, [r7, #4]
  40544a:	601a      	str	r2, [r3, #0]
      memp_tab[i] = memp;
  40544c:	887b      	ldrh	r3, [r7, #2]
  40544e:	4912      	ldr	r1, [pc, #72]	; (405498 <memp_init+0x90>)
  405450:	687a      	ldr	r2, [r7, #4]
  405452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + memp_sizes[i]
  405456:	887b      	ldrh	r3, [r7, #2]
  405458:	4a10      	ldr	r2, [pc, #64]	; (40549c <memp_init+0x94>)
  40545a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  40545e:	461a      	mov	r2, r3
  405460:	687b      	ldr	r3, [r7, #4]
  405462:	4413      	add	r3, r2
  405464:	607b      	str	r3, [r7, #4]
    for (j = 0; j < memp_num[i]; ++j) {
  405466:	883b      	ldrh	r3, [r7, #0]
  405468:	3301      	adds	r3, #1
  40546a:	803b      	strh	r3, [r7, #0]
  40546c:	887b      	ldrh	r3, [r7, #2]
  40546e:	4a0c      	ldr	r2, [pc, #48]	; (4054a0 <memp_init+0x98>)
  405470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
  405474:	883a      	ldrh	r2, [r7, #0]
  405476:	429a      	cmp	r2, r3
  405478:	d3e2      	bcc.n	405440 <memp_init+0x38>
  for (i = 0; i < MEMP_MAX; ++i) {
  40547a:	887b      	ldrh	r3, [r7, #2]
  40547c:	3301      	adds	r3, #1
  40547e:	807b      	strh	r3, [r7, #2]
  405480:	887b      	ldrh	r3, [r7, #2]
  405482:	2b07      	cmp	r3, #7
  405484:	d9d4      	bls.n	405430 <memp_init+0x28>
#if MEMP_OVERFLOW_CHECK
  memp_overflow_init();
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK */
}
  405486:	bf00      	nop
  405488:	370c      	adds	r7, #12
  40548a:	46bd      	mov	sp, r7
  40548c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405490:	4770      	bx	lr
  405492:	bf00      	nop
  405494:	20400aec 	.word	0x20400aec
  405498:	20400acc 	.word	0x20400acc
  40549c:	0040fafc 	.word	0x0040fafc
  4054a0:	0040fb0c 	.word	0x0040fb0c

004054a4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  4054a4:	b480      	push	{r7}
  4054a6:	b085      	sub	sp, #20
  4054a8:	af00      	add	r7, sp, #0
  4054aa:	4603      	mov	r3, r0
  4054ac:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);
 
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  4054ae:	79fb      	ldrb	r3, [r7, #7]
  4054b0:	2b07      	cmp	r3, #7
  4054b2:	d900      	bls.n	4054b6 <memp_malloc+0x12>
  4054b4:	e7fe      	b.n	4054b4 <memp_malloc+0x10>
  SYS_ARCH_PROTECT(old_level);
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

  memp = memp_tab[type];
  4054b6:	79fb      	ldrb	r3, [r7, #7]
  4054b8:	4a09      	ldr	r2, [pc, #36]	; (4054e0 <memp_malloc+0x3c>)
  4054ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4054be:	60fb      	str	r3, [r7, #12]
  
  if (memp != NULL) {
  4054c0:	68fb      	ldr	r3, [r7, #12]
  4054c2:	2b00      	cmp	r3, #0
  4054c4:	d005      	beq.n	4054d2 <memp_malloc+0x2e>
    memp_tab[type] = memp->next;
  4054c6:	79fb      	ldrb	r3, [r7, #7]
  4054c8:	68fa      	ldr	r2, [r7, #12]
  4054ca:	6812      	ldr	r2, [r2, #0]
  4054cc:	4904      	ldr	r1, [pc, #16]	; (4054e0 <memp_malloc+0x3c>)
  4054ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    MEMP_STATS_INC(err, type);
  }

  SYS_ARCH_UNPROTECT(old_level);

  return memp;
  4054d2:	68fb      	ldr	r3, [r7, #12]
}
  4054d4:	4618      	mov	r0, r3
  4054d6:	3714      	adds	r7, #20
  4054d8:	46bd      	mov	sp, r7
  4054da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4054de:	4770      	bx	lr
  4054e0:	20400acc 	.word	0x20400acc

004054e4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  4054e4:	b480      	push	{r7}
  4054e6:	b085      	sub	sp, #20
  4054e8:	af00      	add	r7, sp, #0
  4054ea:	4603      	mov	r3, r0
  4054ec:	6039      	str	r1, [r7, #0]
  4054ee:	71fb      	strb	r3, [r7, #7]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  if (mem == NULL) {
  4054f0:	683b      	ldr	r3, [r7, #0]
  4054f2:	2b00      	cmp	r3, #0
  4054f4:	d00d      	beq.n	405512 <memp_free+0x2e>
    return;
  }
  LWIP_ASSERT("memp_free: mem properly aligned",
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  4054f6:	683b      	ldr	r3, [r7, #0]
  4054f8:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
#endif /* MEMP_OVERFLOW_CHECK */

  MEMP_STATS_DEC(used, type); 
  
  memp->next = memp_tab[type]; 
  4054fa:	79fb      	ldrb	r3, [r7, #7]
  4054fc:	4a08      	ldr	r2, [pc, #32]	; (405520 <memp_free+0x3c>)
  4054fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  405502:	68fb      	ldr	r3, [r7, #12]
  405504:	601a      	str	r2, [r3, #0]
  memp_tab[type] = memp;
  405506:	79fb      	ldrb	r3, [r7, #7]
  405508:	4905      	ldr	r1, [pc, #20]	; (405520 <memp_free+0x3c>)
  40550a:	68fa      	ldr	r2, [r7, #12]
  40550c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405510:	e000      	b.n	405514 <memp_free+0x30>
    return;
  405512:	bf00      	nop
#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity());
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
}
  405514:	3714      	adds	r7, #20
  405516:	46bd      	mov	sp, r7
  405518:	f85d 7b04 	ldr.w	r7, [sp], #4
  40551c:	4770      	bx	lr
  40551e:	bf00      	nop
  405520:	20400acc 	.word	0x20400acc

00405524 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  405524:	b480      	push	{r7}
  405526:	af00      	add	r7, sp, #0
  netif_add(&loop_netif, &loop_ipaddr, &loop_netmask, &loop_gw, NULL, netif_loopif_init, tcpip_input);
#endif /* NO_SYS */
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  405528:	bf00      	nop
  40552a:	46bd      	mov	sp, r7
  40552c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405530:	4770      	bx	lr
	...

00405534 <netif_add>:
 * @return netif, or NULL if failed.
 */
struct netif *
netif_add(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
  ip_addr_t *gw, void *state, netif_init_fn init, netif_input_fn input)
{
  405534:	b590      	push	{r4, r7, lr}
  405536:	b085      	sub	sp, #20
  405538:	af00      	add	r7, sp, #0
  40553a:	60f8      	str	r0, [r7, #12]
  40553c:	60b9      	str	r1, [r7, #8]
  40553e:	607a      	str	r2, [r7, #4]
  405540:	603b      	str	r3, [r7, #0]

  LWIP_ASSERT("No init function given", init != NULL);

  /* reset new interface configuration state */
  ip_addr_set_zero(&netif->ip_addr);
  405542:	68fb      	ldr	r3, [r7, #12]
  405544:	2200      	movs	r2, #0
  405546:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero(&netif->netmask);
  405548:	68fb      	ldr	r3, [r7, #12]
  40554a:	2200      	movs	r2, #0
  40554c:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero(&netif->gw);
  40554e:	68fb      	ldr	r3, [r7, #12]
  405550:	2200      	movs	r2, #0
  405552:	60da      	str	r2, [r3, #12]
  netif->flags = 0;
  405554:	68fb      	ldr	r3, [r7, #12]
  405556:	2200      	movs	r2, #0
  405558:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_DHCP
  /* netif not under DHCP control by default */
  netif->dhcp = NULL;
  40555c:	68fb      	ldr	r3, [r7, #12]
  40555e:	2200      	movs	r2, #0
  405560:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  405562:	68fb      	ldr	r3, [r7, #12]
  405564:	6a3a      	ldr	r2, [r7, #32]
  405566:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
  405568:	4b12      	ldr	r3, [pc, #72]	; (4055b4 <netif_add+0x80>)
  40556a:	781b      	ldrb	r3, [r3, #0]
  40556c:	1c5a      	adds	r2, r3, #1
  40556e:	b2d1      	uxtb	r1, r2
  405570:	4a10      	ldr	r2, [pc, #64]	; (4055b4 <netif_add+0x80>)
  405572:	7011      	strb	r1, [r2, #0]
  405574:	68fa      	ldr	r2, [r7, #12]
  405576:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  netif->input = input;
  40557a:	68fb      	ldr	r3, [r7, #12]
  40557c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40557e:	611a      	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

  netif_set_addr(netif, ipaddr, netmask, gw);
  405580:	683b      	ldr	r3, [r7, #0]
  405582:	687a      	ldr	r2, [r7, #4]
  405584:	68b9      	ldr	r1, [r7, #8]
  405586:	68f8      	ldr	r0, [r7, #12]
  405588:	4c0b      	ldr	r4, [pc, #44]	; (4055b8 <netif_add+0x84>)
  40558a:	47a0      	blx	r4

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  40558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40558e:	68f8      	ldr	r0, [r7, #12]
  405590:	4798      	blx	r3
  405592:	4603      	mov	r3, r0
  405594:	2b00      	cmp	r3, #0
  405596:	d001      	beq.n	40559c <netif_add+0x68>
    return NULL;
  405598:	2300      	movs	r3, #0
  40559a:	e007      	b.n	4055ac <netif_add+0x78>
  }

  /* add this netif to the list */
  netif->next = netif_list;
  40559c:	4b07      	ldr	r3, [pc, #28]	; (4055bc <netif_add+0x88>)
  40559e:	681a      	ldr	r2, [r3, #0]
  4055a0:	68fb      	ldr	r3, [r7, #12]
  4055a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
  4055a4:	4a05      	ldr	r2, [pc, #20]	; (4055bc <netif_add+0x88>)
  4055a6:	68fb      	ldr	r3, [r7, #12]
  4055a8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
  ip_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip_addr_debug_print(NETIF_DEBUG, gw);
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  4055aa:	68fb      	ldr	r3, [r7, #12]
}
  4055ac:	4618      	mov	r0, r3
  4055ae:	3714      	adds	r7, #20
  4055b0:	46bd      	mov	sp, r7
  4055b2:	bd90      	pop	{r4, r7, pc}
  4055b4:	204025cb 	.word	0x204025cb
  4055b8:	004055c1 	.word	0x004055c1
  4055bc:	20404990 	.word	0x20404990

004055c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, ip_addr_t *ipaddr, ip_addr_t *netmask,
    ip_addr_t *gw)
{
  4055c0:	b580      	push	{r7, lr}
  4055c2:	b084      	sub	sp, #16
  4055c4:	af00      	add	r7, sp, #0
  4055c6:	60f8      	str	r0, [r7, #12]
  4055c8:	60b9      	str	r1, [r7, #8]
  4055ca:	607a      	str	r2, [r7, #4]
  4055cc:	603b      	str	r3, [r7, #0]
  netif_set_ipaddr(netif, ipaddr);
  4055ce:	68b9      	ldr	r1, [r7, #8]
  4055d0:	68f8      	ldr	r0, [r7, #12]
  4055d2:	4b07      	ldr	r3, [pc, #28]	; (4055f0 <netif_set_addr+0x30>)
  4055d4:	4798      	blx	r3
  netif_set_netmask(netif, netmask);
  4055d6:	6879      	ldr	r1, [r7, #4]
  4055d8:	68f8      	ldr	r0, [r7, #12]
  4055da:	4b06      	ldr	r3, [pc, #24]	; (4055f4 <netif_set_addr+0x34>)
  4055dc:	4798      	blx	r3
  netif_set_gw(netif, gw);
  4055de:	6839      	ldr	r1, [r7, #0]
  4055e0:	68f8      	ldr	r0, [r7, #12]
  4055e2:	4b05      	ldr	r3, [pc, #20]	; (4055f8 <netif_set_addr+0x38>)
  4055e4:	4798      	blx	r3
}
  4055e6:	bf00      	nop
  4055e8:	3710      	adds	r7, #16
  4055ea:	46bd      	mov	sp, r7
  4055ec:	bd80      	pop	{r7, pc}
  4055ee:	bf00      	nop
  4055f0:	004055fd 	.word	0x004055fd
  4055f4:	004056d9 	.word	0x004056d9
  4055f8:	004056b1 	.word	0x004056b1

004055fc <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, ip_addr_t *ipaddr)
{
  4055fc:	b580      	push	{r7, lr}
  4055fe:	b086      	sub	sp, #24
  405600:	af00      	add	r7, sp, #0
  405602:	6078      	str	r0, [r7, #4]
  405604:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct tcp_pcb *pcb;
  struct tcp_pcb_listen *lpcb;

  /* address is actually being changed? */
  if (ipaddr && (ip_addr_cmp(ipaddr, &(netif->ip_addr))) == 0) {
  405606:	683b      	ldr	r3, [r7, #0]
  405608:	2b00      	cmp	r3, #0
  40560a:	d03e      	beq.n	40568a <netif_set_ipaddr+0x8e>
  40560c:	683b      	ldr	r3, [r7, #0]
  40560e:	681a      	ldr	r2, [r3, #0]
  405610:	687b      	ldr	r3, [r7, #4]
  405612:	685b      	ldr	r3, [r3, #4]
  405614:	429a      	cmp	r2, r3
  405616:	d038      	beq.n	40568a <netif_set_ipaddr+0x8e>
    /* extern struct tcp_pcb *tcp_active_pcbs; defined by tcp.h */
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    pcb = tcp_active_pcbs;
  405618:	4b22      	ldr	r3, [pc, #136]	; (4056a4 <netif_set_ipaddr+0xa8>)
  40561a:	681b      	ldr	r3, [r3, #0]
  40561c:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
  40561e:	e011      	b.n	405644 <netif_set_ipaddr+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))
  405620:	697b      	ldr	r3, [r7, #20]
  405622:	681a      	ldr	r2, [r3, #0]
  405624:	687b      	ldr	r3, [r7, #4]
  405626:	685b      	ldr	r3, [r3, #4]
  405628:	429a      	cmp	r2, r3
  40562a:	d108      	bne.n	40563e <netif_set_ipaddr+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && !ip_addr_islinklocal(&(pcb->local_ip))
#endif /* LWIP_AUTOIP */
        ) {
        /* this connection must be aborted */
        struct tcp_pcb *next = pcb->next;
  40562c:	697b      	ldr	r3, [r7, #20]
  40562e:	68db      	ldr	r3, [r3, #12]
  405630:	60fb      	str	r3, [r7, #12]
        LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
        tcp_abort(pcb);
  405632:	6978      	ldr	r0, [r7, #20]
  405634:	4b1c      	ldr	r3, [pc, #112]	; (4056a8 <netif_set_ipaddr+0xac>)
  405636:	4798      	blx	r3
        pcb = next;
  405638:	68fb      	ldr	r3, [r7, #12]
  40563a:	617b      	str	r3, [r7, #20]
  40563c:	e002      	b.n	405644 <netif_set_ipaddr+0x48>
      } else {
        pcb = pcb->next;
  40563e:	697b      	ldr	r3, [r7, #20]
  405640:	68db      	ldr	r3, [r3, #12]
  405642:	617b      	str	r3, [r7, #20]
    while (pcb != NULL) {
  405644:	697b      	ldr	r3, [r7, #20]
  405646:	2b00      	cmp	r3, #0
  405648:	d1ea      	bne.n	405620 <netif_set_ipaddr+0x24>
      }
    }
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40564a:	4b18      	ldr	r3, [pc, #96]	; (4056ac <netif_set_ipaddr+0xb0>)
  40564c:	681b      	ldr	r3, [r3, #0]
  40564e:	613b      	str	r3, [r7, #16]
  405650:	e018      	b.n	405684 <netif_set_ipaddr+0x88>
      /* PCB bound to current local interface address? */
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  405652:	693b      	ldr	r3, [r7, #16]
  405654:	2b00      	cmp	r3, #0
  405656:	d012      	beq.n	40567e <netif_set_ipaddr+0x82>
  405658:	693b      	ldr	r3, [r7, #16]
  40565a:	681b      	ldr	r3, [r3, #0]
  40565c:	2b00      	cmp	r3, #0
  40565e:	d00e      	beq.n	40567e <netif_set_ipaddr+0x82>
          (ip_addr_cmp(&(lpcb->local_ip), &(netif->ip_addr)))) {
  405660:	693b      	ldr	r3, [r7, #16]
  405662:	681a      	ldr	r2, [r3, #0]
  405664:	687b      	ldr	r3, [r7, #4]
  405666:	685b      	ldr	r3, [r3, #4]
      if ((!(ip_addr_isany(&(lpcb->local_ip)))) &&
  405668:	429a      	cmp	r2, r3
  40566a:	d108      	bne.n	40567e <netif_set_ipaddr+0x82>
        /* The PCB is listening to the old ipaddr and
         * is set to listen to the new one instead */
        ip_addr_set(&(lpcb->local_ip), ipaddr);
  40566c:	683b      	ldr	r3, [r7, #0]
  40566e:	2b00      	cmp	r3, #0
  405670:	d002      	beq.n	405678 <netif_set_ipaddr+0x7c>
  405672:	683b      	ldr	r3, [r7, #0]
  405674:	681b      	ldr	r3, [r3, #0]
  405676:	e000      	b.n	40567a <netif_set_ipaddr+0x7e>
  405678:	2300      	movs	r3, #0
  40567a:	693a      	ldr	r2, [r7, #16]
  40567c:	6013      	str	r3, [r2, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40567e:	693b      	ldr	r3, [r7, #16]
  405680:	68db      	ldr	r3, [r3, #12]
  405682:	613b      	str	r3, [r7, #16]
  405684:	693b      	ldr	r3, [r7, #16]
  405686:	2b00      	cmp	r3, #0
  405688:	d1e3      	bne.n	405652 <netif_set_ipaddr+0x56>
  }
#endif
  snmp_delete_ipaddridx_tree(netif);
  snmp_delete_iprteidx_tree(0,netif);
  /* set new IP address to netif */
  ip_addr_set(&(netif->ip_addr), ipaddr);
  40568a:	683b      	ldr	r3, [r7, #0]
  40568c:	2b00      	cmp	r3, #0
  40568e:	d002      	beq.n	405696 <netif_set_ipaddr+0x9a>
  405690:	683b      	ldr	r3, [r7, #0]
  405692:	681b      	ldr	r3, [r3, #0]
  405694:	e000      	b.n	405698 <netif_set_ipaddr+0x9c>
  405696:	2300      	movs	r3, #0
  405698:	687a      	ldr	r2, [r7, #4]
  40569a:	6053      	str	r3, [r2, #4]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->ip_addr),
    ip4_addr2_16(&netif->ip_addr),
    ip4_addr3_16(&netif->ip_addr),
    ip4_addr4_16(&netif->ip_addr)));
}
  40569c:	bf00      	nop
  40569e:	3718      	adds	r7, #24
  4056a0:	46bd      	mov	sp, r7
  4056a2:	bd80      	pop	{r7, pc}
  4056a4:	204049a0 	.word	0x204049a0
  4056a8:	00406285 	.word	0x00406285
  4056ac:	204049a8 	.word	0x204049a8

004056b0 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, ip_addr_t *gw)
{
  4056b0:	b480      	push	{r7}
  4056b2:	b083      	sub	sp, #12
  4056b4:	af00      	add	r7, sp, #0
  4056b6:	6078      	str	r0, [r7, #4]
  4056b8:	6039      	str	r1, [r7, #0]
  ip_addr_set(&(netif->gw), gw);
  4056ba:	683b      	ldr	r3, [r7, #0]
  4056bc:	2b00      	cmp	r3, #0
  4056be:	d002      	beq.n	4056c6 <netif_set_gw+0x16>
  4056c0:	683b      	ldr	r3, [r7, #0]
  4056c2:	681b      	ldr	r3, [r3, #0]
  4056c4:	e000      	b.n	4056c8 <netif_set_gw+0x18>
  4056c6:	2300      	movs	r3, #0
  4056c8:	687a      	ldr	r2, [r7, #4]
  4056ca:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->gw),
    ip4_addr2_16(&netif->gw),
    ip4_addr3_16(&netif->gw),
    ip4_addr4_16(&netif->gw)));
}
  4056cc:	bf00      	nop
  4056ce:	370c      	adds	r7, #12
  4056d0:	46bd      	mov	sp, r7
  4056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056d6:	4770      	bx	lr

004056d8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, ip_addr_t *netmask)
{
  4056d8:	b480      	push	{r7}
  4056da:	b083      	sub	sp, #12
  4056dc:	af00      	add	r7, sp, #0
  4056de:	6078      	str	r0, [r7, #4]
  4056e0:	6039      	str	r1, [r7, #0]
  snmp_delete_iprteidx_tree(0, netif);
  /* set new netmask to netif */
  ip_addr_set(&(netif->netmask), netmask);
  4056e2:	683b      	ldr	r3, [r7, #0]
  4056e4:	2b00      	cmp	r3, #0
  4056e6:	d002      	beq.n	4056ee <netif_set_netmask+0x16>
  4056e8:	683b      	ldr	r3, [r7, #0]
  4056ea:	681b      	ldr	r3, [r3, #0]
  4056ec:	e000      	b.n	4056f0 <netif_set_netmask+0x18>
  4056ee:	2300      	movs	r3, #0
  4056f0:	687a      	ldr	r2, [r7, #4]
  4056f2:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(&netif->netmask),
    ip4_addr2_16(&netif->netmask),
    ip4_addr3_16(&netif->netmask),
    ip4_addr4_16(&netif->netmask)));
}
  4056f4:	bf00      	nop
  4056f6:	370c      	adds	r7, #12
  4056f8:	46bd      	mov	sp, r7
  4056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056fe:	4770      	bx	lr

00405700 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  405700:	b480      	push	{r7}
  405702:	b083      	sub	sp, #12
  405704:	af00      	add	r7, sp, #0
  405706:	6078      	str	r0, [r7, #4]
    snmp_delete_iprteidx_tree(1, netif);
  } else {
    /* install default route */
    snmp_insert_iprteidx_tree(1, netif);
  }
  netif_default = netif;
  405708:	4a04      	ldr	r2, [pc, #16]	; (40571c <netif_set_default+0x1c>)
  40570a:	687b      	ldr	r3, [r7, #4]
  40570c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  40570e:	bf00      	nop
  405710:	370c      	adds	r7, #12
  405712:	46bd      	mov	sp, r7
  405714:	f85d 7b04 	ldr.w	r7, [sp], #4
  405718:	4770      	bx	lr
  40571a:	bf00      	nop
  40571c:	20404994 	.word	0x20404994

00405720 <netif_set_up>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_up(struct netif *netif)
{
  405720:	b580      	push	{r7, lr}
  405722:	b082      	sub	sp, #8
  405724:	af00      	add	r7, sp, #0
  405726:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  405728:	687b      	ldr	r3, [r7, #4]
  40572a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40572e:	f003 0301 	and.w	r3, r3, #1
  405732:	2b00      	cmp	r3, #0
  405734:	d11c      	bne.n	405770 <netif_set_up+0x50>
    netif->flags |= NETIF_FLAG_UP;
  405736:	687b      	ldr	r3, [r7, #4]
  405738:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40573c:	f043 0301 	orr.w	r3, r3, #1
  405740:	b2da      	uxtb	r2, r3
  405742:	687b      	ldr	r3, [r7, #4]
  405744:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    snmp_get_sysuptime(&netif->ts);
#endif /* LWIP_SNMP */

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  405748:	687b      	ldr	r3, [r7, #4]
  40574a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40574e:	f003 0310 	and.w	r3, r3, #16
  405752:	2b00      	cmp	r3, #0
  405754:	d00c      	beq.n	405770 <netif_set_up+0x50>
#if LWIP_ARP
      /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */ 
      if (netif->flags & (NETIF_FLAG_ETHARP)) {
  405756:	687b      	ldr	r3, [r7, #4]
  405758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40575c:	f003 0320 	and.w	r3, r3, #32
  405760:	2b00      	cmp	r3, #0
  405762:	d005      	beq.n	405770 <netif_set_up+0x50>
        etharp_gratuitous(netif);
  405764:	687b      	ldr	r3, [r7, #4]
  405766:	3304      	adds	r3, #4
  405768:	4619      	mov	r1, r3
  40576a:	6878      	ldr	r0, [r7, #4]
  40576c:	4b02      	ldr	r3, [pc, #8]	; (405778 <netif_set_up+0x58>)
  40576e:	4798      	blx	r3
        igmp_report_groups( netif);
      }
#endif /* LWIP_IGMP */
    }
  }
}
  405770:	bf00      	nop
  405772:	3708      	adds	r7, #8
  405774:	46bd      	mov	sp, r7
  405776:	bd80      	pop	{r7, pc}
  405778:	0040b9fd 	.word	0x0040b9fd

0040577c <netif_set_down>:
 * up once configured.
 * 
 * @see dhcp_start()
 */ 
void netif_set_down(struct netif *netif)
{
  40577c:	b580      	push	{r7, lr}
  40577e:	b082      	sub	sp, #8
  405780:	af00      	add	r7, sp, #0
  405782:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
  405784:	687b      	ldr	r3, [r7, #4]
  405786:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40578a:	f003 0301 	and.w	r3, r3, #1
  40578e:	2b00      	cmp	r3, #0
  405790:	d012      	beq.n	4057b8 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
  405792:	687b      	ldr	r3, [r7, #4]
  405794:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  405798:	f023 0301 	bic.w	r3, r3, #1
  40579c:	b2da      	uxtb	r2, r3
  40579e:	687b      	ldr	r3, [r7, #4]
  4057a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#if LWIP_SNMP
    snmp_get_sysuptime(&netif->ts);
#endif

#if LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  4057a4:	687b      	ldr	r3, [r7, #4]
  4057a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  4057aa:	f003 0320 	and.w	r3, r3, #32
  4057ae:	2b00      	cmp	r3, #0
  4057b0:	d002      	beq.n	4057b8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
  4057b2:	6878      	ldr	r0, [r7, #4]
  4057b4:	4b02      	ldr	r3, [pc, #8]	; (4057c0 <netif_set_down+0x44>)
  4057b6:	4798      	blx	r3
    }
#endif /* LWIP_ARP */
    NETIF_STATUS_CALLBACK(netif);
  }
}
  4057b8:	bf00      	nop
  4057ba:	3708      	adds	r7, #8
  4057bc:	46bd      	mov	sp, r7
  4057be:	bd80      	pop	{r7, pc}
  4057c0:	0040b2bd 	.word	0x0040b2bd

004057c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  4057c4:	b480      	push	{r7}
  4057c6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  pbuf_free_ooseq_pending = 1;
  4057c8:	4b03      	ldr	r3, [pc, #12]	; (4057d8 <pbuf_pool_is_empty+0x14>)
  4057ca:	2201      	movs	r2, #1
  4057cc:	701a      	strb	r2, [r3, #0]
  if(!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  4057ce:	bf00      	nop
  4057d0:	46bd      	mov	sp, r7
  4057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057d6:	4770      	bx	lr
  4057d8:	20404998 	.word	0x20404998

004057dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  4057dc:	b580      	push	{r7, lr}
  4057de:	b088      	sub	sp, #32
  4057e0:	af00      	add	r7, sp, #0
  4057e2:	4603      	mov	r3, r0
  4057e4:	71fb      	strb	r3, [r7, #7]
  4057e6:	460b      	mov	r3, r1
  4057e8:	80bb      	strh	r3, [r7, #4]
  4057ea:	4613      	mov	r3, r2
  4057ec:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  4057ee:	79fb      	ldrb	r3, [r7, #7]
  4057f0:	2b03      	cmp	r3, #3
  4057f2:	d817      	bhi.n	405824 <pbuf_alloc+0x48>
  4057f4:	a201      	add	r2, pc, #4	; (adr r2, 4057fc <pbuf_alloc+0x20>)
  4057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4057fa:	bf00      	nop
  4057fc:	0040580d 	.word	0x0040580d
  405800:	00405813 	.word	0x00405813
  405804:	00405819 	.word	0x00405819
  405808:	0040581f 	.word	0x0040581f
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  40580c:	2336      	movs	r3, #54	; 0x36
  40580e:	82fb      	strh	r3, [r7, #22]
    break;
  405810:	e00a      	b.n	405828 <pbuf_alloc+0x4c>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_HLEN + PBUF_IP_HLEN;
  405812:	2322      	movs	r3, #34	; 0x22
  405814:	82fb      	strh	r3, [r7, #22]
    break;
  405816:	e007      	b.n	405828 <pbuf_alloc+0x4c>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_HLEN;
  405818:	230e      	movs	r3, #14
  40581a:	82fb      	strh	r3, [r7, #22]
    break;
  40581c:	e004      	b.n	405828 <pbuf_alloc+0x4c>
  case PBUF_RAW:
    offset = 0;
  40581e:	2300      	movs	r3, #0
  405820:	82fb      	strh	r3, [r7, #22]
    break;
  405822:	e001      	b.n	405828 <pbuf_alloc+0x4c>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
    return NULL;
  405824:	2300      	movs	r3, #0
  405826:	e0d3      	b.n	4059d0 <pbuf_alloc+0x1f4>
  }

  switch (type) {
  405828:	79bb      	ldrb	r3, [r7, #6]
  40582a:	2b03      	cmp	r3, #3
  40582c:	f200 80c7 	bhi.w	4059be <pbuf_alloc+0x1e2>
  405830:	a201      	add	r2, pc, #4	; (adr r2, 405838 <pbuf_alloc+0x5c>)
  405832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405836:	bf00      	nop
  405838:	0040592d 	.word	0x0040592d
  40583c:	0040598b 	.word	0x0040598b
  405840:	0040598b 	.word	0x0040598b
  405844:	00405849 	.word	0x00405849
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  405848:	2007      	movs	r0, #7
  40584a:	4b63      	ldr	r3, [pc, #396]	; (4059d8 <pbuf_alloc+0x1fc>)
  40584c:	4798      	blx	r3
  40584e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  405850:	69fb      	ldr	r3, [r7, #28]
  405852:	2b00      	cmp	r3, #0
  405854:	d103      	bne.n	40585e <pbuf_alloc+0x82>
      PBUF_POOL_IS_EMPTY();
  405856:	4b61      	ldr	r3, [pc, #388]	; (4059dc <pbuf_alloc+0x200>)
  405858:	4798      	blx	r3
      return NULL;
  40585a:	2300      	movs	r3, #0
  40585c:	e0b8      	b.n	4059d0 <pbuf_alloc+0x1f4>
    }
    p->type = type;
  40585e:	69fb      	ldr	r3, [r7, #28]
  405860:	79ba      	ldrb	r2, [r7, #6]
  405862:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
  405864:	69fb      	ldr	r3, [r7, #28]
  405866:	2200      	movs	r2, #0
  405868:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  40586a:	8afb      	ldrh	r3, [r7, #22]
  40586c:	3310      	adds	r3, #16
  40586e:	69fa      	ldr	r2, [r7, #28]
  405870:	4413      	add	r3, r2
  405872:	3303      	adds	r3, #3
  405874:	f023 0303 	bic.w	r3, r3, #3
  405878:	461a      	mov	r2, r3
  40587a:	69fb      	ldr	r3, [r7, #28]
  40587c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  40587e:	69fb      	ldr	r3, [r7, #28]
  405880:	88ba      	ldrh	r2, [r7, #4]
  405882:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  405884:	8afb      	ldrh	r3, [r7, #22]
  405886:	3303      	adds	r3, #3
  405888:	f023 0303 	bic.w	r3, r3, #3
  40588c:	f5c3 62c0 	rsb	r2, r3, #1536	; 0x600
  405890:	88bb      	ldrh	r3, [r7, #4]
  405892:	4293      	cmp	r3, r2
  405894:	bfa8      	it	ge
  405896:	4613      	movge	r3, r2
  405898:	b29a      	uxth	r2, r3
  40589a:	69fb      	ldr	r3, [r7, #28]
  40589c:	815a      	strh	r2, [r3, #10]
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  40589e:	69fb      	ldr	r3, [r7, #28]
  4058a0:	2201      	movs	r2, #1
  4058a2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  4058a4:	69fb      	ldr	r3, [r7, #28]
  4058a6:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  4058a8:	88bb      	ldrh	r3, [r7, #4]
  4058aa:	69fa      	ldr	r2, [r7, #28]
  4058ac:	8952      	ldrh	r2, [r2, #10]
  4058ae:	1a9b      	subs	r3, r3, r2
  4058b0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  4058b2:	e037      	b.n	405924 <pbuf_alloc+0x148>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  4058b4:	2007      	movs	r0, #7
  4058b6:	4b48      	ldr	r3, [pc, #288]	; (4059d8 <pbuf_alloc+0x1fc>)
  4058b8:	4798      	blx	r3
  4058ba:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
  4058bc:	68fb      	ldr	r3, [r7, #12]
  4058be:	2b00      	cmp	r3, #0
  4058c0:	d106      	bne.n	4058d0 <pbuf_alloc+0xf4>
        PBUF_POOL_IS_EMPTY();
  4058c2:	4b46      	ldr	r3, [pc, #280]	; (4059dc <pbuf_alloc+0x200>)
  4058c4:	4798      	blx	r3
        /* free chain so far allocated */
        pbuf_free(p);
  4058c6:	69f8      	ldr	r0, [r7, #28]
  4058c8:	4b45      	ldr	r3, [pc, #276]	; (4059e0 <pbuf_alloc+0x204>)
  4058ca:	4798      	blx	r3
        /* bail out unsuccesfully */
        return NULL;
  4058cc:	2300      	movs	r3, #0
  4058ce:	e07f      	b.n	4059d0 <pbuf_alloc+0x1f4>
      }
      q->type = type;
  4058d0:	68fb      	ldr	r3, [r7, #12]
  4058d2:	79ba      	ldrb	r2, [r7, #6]
  4058d4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
  4058d6:	68fb      	ldr	r3, [r7, #12]
  4058d8:	2200      	movs	r2, #0
  4058da:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
  4058dc:	68fb      	ldr	r3, [r7, #12]
  4058de:	2200      	movs	r2, #0
  4058e0:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  4058e2:	69bb      	ldr	r3, [r7, #24]
  4058e4:	68fa      	ldr	r2, [r7, #12]
  4058e6:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
      q->tot_len = (u16_t)rem_len;
  4058e8:	693b      	ldr	r3, [r7, #16]
  4058ea:	b29a      	uxth	r2, r3
  4058ec:	68fb      	ldr	r3, [r7, #12]
  4058ee:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  4058f0:	693b      	ldr	r3, [r7, #16]
  4058f2:	b29b      	uxth	r3, r3
  4058f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
  4058f8:	bf28      	it	cs
  4058fa:	f44f 63c0 	movcs.w	r3, #1536	; 0x600
  4058fe:	b29a      	uxth	r2, r3
  405900:	68fb      	ldr	r3, [r7, #12]
  405902:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  405904:	68fb      	ldr	r3, [r7, #12]
  405906:	f103 0210 	add.w	r2, r3, #16
  40590a:	68fb      	ldr	r3, [r7, #12]
  40590c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  40590e:	68fb      	ldr	r3, [r7, #12]
  405910:	2201      	movs	r2, #1
  405912:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  405914:	68fb      	ldr	r3, [r7, #12]
  405916:	895b      	ldrh	r3, [r3, #10]
  405918:	461a      	mov	r2, r3
  40591a:	693b      	ldr	r3, [r7, #16]
  40591c:	1a9b      	subs	r3, r3, r2
  40591e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
  405920:	68fb      	ldr	r3, [r7, #12]
  405922:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
  405924:	693b      	ldr	r3, [r7, #16]
  405926:	2b00      	cmp	r3, #0
  405928:	dcc4      	bgt.n	4058b4 <pbuf_alloc+0xd8>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  40592a:	e04a      	b.n	4059c2 <pbuf_alloc+0x1e6>
  case PBUF_RAM:
    /* If pbuf is to be allocated in RAM, allocate memory for it. */
    p = (struct pbuf*)mem_malloc(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length));
  40592c:	8afb      	ldrh	r3, [r7, #22]
  40592e:	3313      	adds	r3, #19
  405930:	b29b      	uxth	r3, r3
  405932:	f023 0303 	bic.w	r3, r3, #3
  405936:	b29a      	uxth	r2, r3
  405938:	88bb      	ldrh	r3, [r7, #4]
  40593a:	3303      	adds	r3, #3
  40593c:	b29b      	uxth	r3, r3
  40593e:	f023 0303 	bic.w	r3, r3, #3
  405942:	b29b      	uxth	r3, r3
  405944:	4413      	add	r3, r2
  405946:	b29b      	uxth	r3, r3
  405948:	4618      	mov	r0, r3
  40594a:	4b26      	ldr	r3, [pc, #152]	; (4059e4 <pbuf_alloc+0x208>)
  40594c:	4798      	blx	r3
  40594e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  405950:	69fb      	ldr	r3, [r7, #28]
  405952:	2b00      	cmp	r3, #0
  405954:	d101      	bne.n	40595a <pbuf_alloc+0x17e>
      return NULL;
  405956:	2300      	movs	r3, #0
  405958:	e03a      	b.n	4059d0 <pbuf_alloc+0x1f4>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  40595a:	8afb      	ldrh	r3, [r7, #22]
  40595c:	3310      	adds	r3, #16
  40595e:	69fa      	ldr	r2, [r7, #28]
  405960:	4413      	add	r3, r2
  405962:	3303      	adds	r3, #3
  405964:	f023 0303 	bic.w	r3, r3, #3
  405968:	461a      	mov	r2, r3
  40596a:	69fb      	ldr	r3, [r7, #28]
  40596c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  40596e:	69fb      	ldr	r3, [r7, #28]
  405970:	88ba      	ldrh	r2, [r7, #4]
  405972:	811a      	strh	r2, [r3, #8]
  405974:	69fb      	ldr	r3, [r7, #28]
  405976:	891a      	ldrh	r2, [r3, #8]
  405978:	69fb      	ldr	r3, [r7, #28]
  40597a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  40597c:	69fb      	ldr	r3, [r7, #28]
  40597e:	2200      	movs	r2, #0
  405980:	601a      	str	r2, [r3, #0]
    p->type = type;
  405982:	69fb      	ldr	r3, [r7, #28]
  405984:	79ba      	ldrb	r2, [r7, #6]
  405986:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  405988:	e01b      	b.n	4059c2 <pbuf_alloc+0x1e6>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  40598a:	2006      	movs	r0, #6
  40598c:	4b12      	ldr	r3, [pc, #72]	; (4059d8 <pbuf_alloc+0x1fc>)
  40598e:	4798      	blx	r3
  405990:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
  405992:	69fb      	ldr	r3, [r7, #28]
  405994:	2b00      	cmp	r3, #0
  405996:	d101      	bne.n	40599c <pbuf_alloc+0x1c0>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  405998:	2300      	movs	r3, #0
  40599a:	e019      	b.n	4059d0 <pbuf_alloc+0x1f4>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  40599c:	69fb      	ldr	r3, [r7, #28]
  40599e:	2200      	movs	r2, #0
  4059a0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  4059a2:	69fb      	ldr	r3, [r7, #28]
  4059a4:	88ba      	ldrh	r2, [r7, #4]
  4059a6:	811a      	strh	r2, [r3, #8]
  4059a8:	69fb      	ldr	r3, [r7, #28]
  4059aa:	891a      	ldrh	r2, [r3, #8]
  4059ac:	69fb      	ldr	r3, [r7, #28]
  4059ae:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
  4059b0:	69fb      	ldr	r3, [r7, #28]
  4059b2:	2200      	movs	r2, #0
  4059b4:	601a      	str	r2, [r3, #0]
    p->type = type;
  4059b6:	69fb      	ldr	r3, [r7, #28]
  4059b8:	79ba      	ldrb	r2, [r7, #6]
  4059ba:	731a      	strb	r2, [r3, #12]
    break;
  4059bc:	e001      	b.n	4059c2 <pbuf_alloc+0x1e6>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
    return NULL;
  4059be:	2300      	movs	r3, #0
  4059c0:	e006      	b.n	4059d0 <pbuf_alloc+0x1f4>
  }
  /* set reference count */
  p->ref = 1;
  4059c2:	69fb      	ldr	r3, [r7, #28]
  4059c4:	2201      	movs	r2, #1
  4059c6:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  4059c8:	69fb      	ldr	r3, [r7, #28]
  4059ca:	2200      	movs	r2, #0
  4059cc:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  4059ce:	69fb      	ldr	r3, [r7, #28]
}
  4059d0:	4618      	mov	r0, r3
  4059d2:	3720      	adds	r7, #32
  4059d4:	46bd      	mov	sp, r7
  4059d6:	bd80      	pop	{r7, pc}
  4059d8:	004054a5 	.word	0x004054a5
  4059dc:	004057c5 	.word	0x004057c5
  4059e0:	00405b81 	.word	0x00405b81
  4059e4:	004052c1 	.word	0x004052c1

004059e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  4059e8:	b580      	push	{r7, lr}
  4059ea:	b086      	sub	sp, #24
  4059ec:	af00      	add	r7, sp, #0
  4059ee:	6078      	str	r0, [r7, #4]
  4059f0:	460b      	mov	r3, r1
  4059f2:	807b      	strh	r3, [r7, #2]
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  4059f4:	687b      	ldr	r3, [r7, #4]
  4059f6:	891b      	ldrh	r3, [r3, #8]
  4059f8:	887a      	ldrh	r2, [r7, #2]
  4059fa:	429a      	cmp	r2, r3
  4059fc:	d249      	bcs.n	405a92 <pbuf_realloc+0xaa>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  4059fe:	887b      	ldrh	r3, [r7, #2]
  405a00:	687a      	ldr	r2, [r7, #4]
  405a02:	8912      	ldrh	r2, [r2, #8]
  405a04:	1a9b      	subs	r3, r3, r2
  405a06:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  405a08:	887b      	ldrh	r3, [r7, #2]
  405a0a:	827b      	strh	r3, [r7, #18]
  q = p;
  405a0c:	687b      	ldr	r3, [r7, #4]
  405a0e:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  405a10:	e00f      	b.n	405a32 <pbuf_realloc+0x4a>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  405a12:	697b      	ldr	r3, [r7, #20]
  405a14:	895b      	ldrh	r3, [r3, #10]
  405a16:	8a7a      	ldrh	r2, [r7, #18]
  405a18:	1ad3      	subs	r3, r2, r3
  405a1a:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
    q->tot_len += (u16_t)grow;
  405a1c:	697b      	ldr	r3, [r7, #20]
  405a1e:	891a      	ldrh	r2, [r3, #8]
  405a20:	68fb      	ldr	r3, [r7, #12]
  405a22:	b29b      	uxth	r3, r3
  405a24:	4413      	add	r3, r2
  405a26:	b29a      	uxth	r2, r3
  405a28:	697b      	ldr	r3, [r7, #20]
  405a2a:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  405a2c:	697b      	ldr	r3, [r7, #20]
  405a2e:	681b      	ldr	r3, [r3, #0]
  405a30:	617b      	str	r3, [r7, #20]
  while (rem_len > q->len) {
  405a32:	697b      	ldr	r3, [r7, #20]
  405a34:	895b      	ldrh	r3, [r3, #10]
  405a36:	8a7a      	ldrh	r2, [r7, #18]
  405a38:	429a      	cmp	r2, r3
  405a3a:	d8ea      	bhi.n	405a12 <pbuf_realloc+0x2a>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)) {
  405a3c:	697b      	ldr	r3, [r7, #20]
  405a3e:	7b1b      	ldrb	r3, [r3, #12]
  405a40:	2b00      	cmp	r3, #0
  405a42:	d112      	bne.n	405a6a <pbuf_realloc+0x82>
  405a44:	697b      	ldr	r3, [r7, #20]
  405a46:	895b      	ldrh	r3, [r3, #10]
  405a48:	8a7a      	ldrh	r2, [r7, #18]
  405a4a:	429a      	cmp	r2, r3
  405a4c:	d00d      	beq.n	405a6a <pbuf_realloc+0x82>
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  405a4e:	697b      	ldr	r3, [r7, #20]
  405a50:	685b      	ldr	r3, [r3, #4]
  405a52:	461a      	mov	r2, r3
  405a54:	697b      	ldr	r3, [r7, #20]
  405a56:	1ad3      	subs	r3, r2, r3
  405a58:	b29a      	uxth	r2, r3
  405a5a:	8a7b      	ldrh	r3, [r7, #18]
  405a5c:	4413      	add	r3, r2
  405a5e:	b29b      	uxth	r3, r3
  405a60:	4619      	mov	r1, r3
  405a62:	6978      	ldr	r0, [r7, #20]
  405a64:	4b0d      	ldr	r3, [pc, #52]	; (405a9c <pbuf_realloc+0xb4>)
  405a66:	4798      	blx	r3
  405a68:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  405a6a:	697b      	ldr	r3, [r7, #20]
  405a6c:	8a7a      	ldrh	r2, [r7, #18]
  405a6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
  405a70:	697b      	ldr	r3, [r7, #20]
  405a72:	895a      	ldrh	r2, [r3, #10]
  405a74:	697b      	ldr	r3, [r7, #20]
  405a76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  405a78:	697b      	ldr	r3, [r7, #20]
  405a7a:	681b      	ldr	r3, [r3, #0]
  405a7c:	2b00      	cmp	r3, #0
  405a7e:	d004      	beq.n	405a8a <pbuf_realloc+0xa2>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  405a80:	697b      	ldr	r3, [r7, #20]
  405a82:	681b      	ldr	r3, [r3, #0]
  405a84:	4618      	mov	r0, r3
  405a86:	4b06      	ldr	r3, [pc, #24]	; (405aa0 <pbuf_realloc+0xb8>)
  405a88:	4798      	blx	r3
  }
  /* q is last packet in chain */
  q->next = NULL;
  405a8a:	697b      	ldr	r3, [r7, #20]
  405a8c:	2200      	movs	r2, #0
  405a8e:	601a      	str	r2, [r3, #0]
  405a90:	e000      	b.n	405a94 <pbuf_realloc+0xac>
    return;
  405a92:	bf00      	nop

}
  405a94:	3718      	adds	r7, #24
  405a96:	46bd      	mov	sp, r7
  405a98:	bd80      	pop	{r7, pc}
  405a9a:	bf00      	nop
  405a9c:	0040514d 	.word	0x0040514d
  405aa0:	00405b81 	.word	0x00405b81

00405aa4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  405aa4:	b480      	push	{r7}
  405aa6:	b085      	sub	sp, #20
  405aa8:	af00      	add	r7, sp, #0
  405aaa:	6078      	str	r0, [r7, #4]
  405aac:	460b      	mov	r3, r1
  405aae:	807b      	strh	r3, [r7, #2]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  if ((header_size_increment == 0) || (p == NULL)) {
  405ab0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405ab4:	2b00      	cmp	r3, #0
  405ab6:	d002      	beq.n	405abe <pbuf_header+0x1a>
  405ab8:	687b      	ldr	r3, [r7, #4]
  405aba:	2b00      	cmp	r3, #0
  405abc:	d101      	bne.n	405ac2 <pbuf_header+0x1e>
    return 0;
  405abe:	2300      	movs	r3, #0
  405ac0:	e058      	b.n	405b74 <pbuf_header+0xd0>
  }
 
  if (header_size_increment < 0){
  405ac2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405ac6:	2b00      	cmp	r3, #0
  405ac8:	da08      	bge.n	405adc <pbuf_header+0x38>
    increment_magnitude = -header_size_increment;
  405aca:	887b      	ldrh	r3, [r7, #2]
  405acc:	425b      	negs	r3, r3
  405ace:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  405ad0:	687b      	ldr	r3, [r7, #4]
  405ad2:	895b      	ldrh	r3, [r3, #10]
  405ad4:	89fa      	ldrh	r2, [r7, #14]
  405ad6:	429a      	cmp	r2, r3
  405ad8:	d902      	bls.n	405ae0 <pbuf_header+0x3c>
  405ada:	e7fe      	b.n	405ada <pbuf_header+0x36>
  } else {
    increment_magnitude = header_size_increment;
  405adc:	887b      	ldrh	r3, [r7, #2]
  405ade:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  405ae0:	687b      	ldr	r3, [r7, #4]
  405ae2:	7b1b      	ldrb	r3, [r3, #12]
  405ae4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
  405ae6:	687b      	ldr	r3, [r7, #4]
  405ae8:	685b      	ldr	r3, [r3, #4]
  405aea:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  405aec:	89bb      	ldrh	r3, [r7, #12]
  405aee:	2b00      	cmp	r3, #0
  405af0:	d002      	beq.n	405af8 <pbuf_header+0x54>
  405af2:	89bb      	ldrh	r3, [r7, #12]
  405af4:	2b03      	cmp	r3, #3
  405af6:	d112      	bne.n	405b1e <pbuf_header+0x7a>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  405af8:	687b      	ldr	r3, [r7, #4]
  405afa:	685a      	ldr	r2, [r3, #4]
  405afc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405b00:	425b      	negs	r3, r3
  405b02:	441a      	add	r2, r3
  405b04:	687b      	ldr	r3, [r7, #4]
  405b06:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  405b08:	687b      	ldr	r3, [r7, #4]
  405b0a:	685a      	ldr	r2, [r3, #4]
  405b0c:	687b      	ldr	r3, [r7, #4]
  405b0e:	3310      	adds	r3, #16
  405b10:	429a      	cmp	r2, r3
  405b12:	d220      	bcs.n	405b56 <pbuf_header+0xb2>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)(p + 1)));
      /* restore old payload pointer */
      p->payload = payload;
  405b14:	687b      	ldr	r3, [r7, #4]
  405b16:	68ba      	ldr	r2, [r7, #8]
  405b18:	605a      	str	r2, [r3, #4]
      /* bail out unsuccesfully */
      return 1;
  405b1a:	2301      	movs	r3, #1
  405b1c:	e02a      	b.n	405b74 <pbuf_header+0xd0>
    }
  /* pbuf types refering to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  405b1e:	89bb      	ldrh	r3, [r7, #12]
  405b20:	2b02      	cmp	r3, #2
  405b22:	d002      	beq.n	405b2a <pbuf_header+0x86>
  405b24:	89bb      	ldrh	r3, [r7, #12]
  405b26:	2b01      	cmp	r3, #1
  405b28:	d113      	bne.n	405b52 <pbuf_header+0xae>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  405b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405b2e:	2b00      	cmp	r3, #0
  405b30:	da0d      	bge.n	405b4e <pbuf_header+0xaa>
  405b32:	687b      	ldr	r3, [r7, #4]
  405b34:	895b      	ldrh	r3, [r3, #10]
  405b36:	89fa      	ldrh	r2, [r7, #14]
  405b38:	429a      	cmp	r2, r3
  405b3a:	d808      	bhi.n	405b4e <pbuf_header+0xaa>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  405b3c:	687b      	ldr	r3, [r7, #4]
  405b3e:	685a      	ldr	r2, [r3, #4]
  405b40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  405b44:	425b      	negs	r3, r3
  405b46:	441a      	add	r2, r3
  405b48:	687b      	ldr	r3, [r7, #4]
  405b4a:	605a      	str	r2, [r3, #4]
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  405b4c:	e003      	b.n	405b56 <pbuf_header+0xb2>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccesfully */
      return 1;
  405b4e:	2301      	movs	r3, #1
  405b50:	e010      	b.n	405b74 <pbuf_header+0xd0>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
    return 1;
  405b52:	2301      	movs	r3, #1
  405b54:	e00e      	b.n	405b74 <pbuf_header+0xd0>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  405b56:	687b      	ldr	r3, [r7, #4]
  405b58:	895a      	ldrh	r2, [r3, #10]
  405b5a:	887b      	ldrh	r3, [r7, #2]
  405b5c:	4413      	add	r3, r2
  405b5e:	b29a      	uxth	r2, r3
  405b60:	687b      	ldr	r3, [r7, #4]
  405b62:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  405b64:	687b      	ldr	r3, [r7, #4]
  405b66:	891a      	ldrh	r2, [r3, #8]
  405b68:	887b      	ldrh	r3, [r7, #2]
  405b6a:	4413      	add	r3, r2
  405b6c:	b29a      	uxth	r2, r3
  405b6e:	687b      	ldr	r3, [r7, #4]
  405b70:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  405b72:	2300      	movs	r3, #0
}
  405b74:	4618      	mov	r0, r3
  405b76:	3714      	adds	r7, #20
  405b78:	46bd      	mov	sp, r7
  405b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
  405b7e:	4770      	bx	lr

00405b80 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  405b80:	b580      	push	{r7, lr}
  405b82:	b086      	sub	sp, #24
  405b84:	af00      	add	r7, sp, #0
  405b86:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  405b88:	687b      	ldr	r3, [r7, #4]
  405b8a:	2b00      	cmp	r3, #0
  405b8c:	d101      	bne.n	405b92 <pbuf_free+0x12>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  405b8e:	2300      	movs	r3, #0
  405b90:	e036      	b.n	405c00 <pbuf_free+0x80>

  LWIP_ASSERT("pbuf_free: sane type",
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  405b92:	2300      	movs	r3, #0
  405b94:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  405b96:	e02f      	b.n	405bf8 <pbuf_free+0x78>
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  405b98:	687b      	ldr	r3, [r7, #4]
  405b9a:	89db      	ldrh	r3, [r3, #14]
  405b9c:	3b01      	subs	r3, #1
  405b9e:	b29a      	uxth	r2, r3
  405ba0:	687b      	ldr	r3, [r7, #4]
  405ba2:	81da      	strh	r2, [r3, #14]
  405ba4:	687b      	ldr	r3, [r7, #4]
  405ba6:	89db      	ldrh	r3, [r3, #14]
  405ba8:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  405baa:	8abb      	ldrh	r3, [r7, #20]
  405bac:	2b00      	cmp	r3, #0
  405bae:	d121      	bne.n	405bf4 <pbuf_free+0x74>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  405bb0:	687b      	ldr	r3, [r7, #4]
  405bb2:	681b      	ldr	r3, [r3, #0]
  405bb4:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  405bb6:	687b      	ldr	r3, [r7, #4]
  405bb8:	7b1b      	ldrb	r3, [r3, #12]
  405bba:	81fb      	strh	r3, [r7, #14]
        pc->custom_free_function(p);
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  405bbc:	89fb      	ldrh	r3, [r7, #14]
  405bbe:	2b03      	cmp	r3, #3
  405bc0:	d104      	bne.n	405bcc <pbuf_free+0x4c>
          memp_free(MEMP_PBUF_POOL, p);
  405bc2:	6879      	ldr	r1, [r7, #4]
  405bc4:	2007      	movs	r0, #7
  405bc6:	4b10      	ldr	r3, [pc, #64]	; (405c08 <pbuf_free+0x88>)
  405bc8:	4798      	blx	r3
  405bca:	e00d      	b.n	405be8 <pbuf_free+0x68>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  405bcc:	89fb      	ldrh	r3, [r7, #14]
  405bce:	2b01      	cmp	r3, #1
  405bd0:	d002      	beq.n	405bd8 <pbuf_free+0x58>
  405bd2:	89fb      	ldrh	r3, [r7, #14]
  405bd4:	2b02      	cmp	r3, #2
  405bd6:	d104      	bne.n	405be2 <pbuf_free+0x62>
          memp_free(MEMP_PBUF, p);
  405bd8:	6879      	ldr	r1, [r7, #4]
  405bda:	2006      	movs	r0, #6
  405bdc:	4b0a      	ldr	r3, [pc, #40]	; (405c08 <pbuf_free+0x88>)
  405bde:	4798      	blx	r3
  405be0:	e002      	b.n	405be8 <pbuf_free+0x68>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  405be2:	6878      	ldr	r0, [r7, #4]
  405be4:	4b09      	ldr	r3, [pc, #36]	; (405c0c <pbuf_free+0x8c>)
  405be6:	4798      	blx	r3
        }
      }
      count++;
  405be8:	7dfb      	ldrb	r3, [r7, #23]
  405bea:	3301      	adds	r3, #1
  405bec:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
  405bee:	693b      	ldr	r3, [r7, #16]
  405bf0:	607b      	str	r3, [r7, #4]
  405bf2:	e001      	b.n	405bf8 <pbuf_free+0x78>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  405bf4:	2300      	movs	r3, #0
  405bf6:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
  405bf8:	687b      	ldr	r3, [r7, #4]
  405bfa:	2b00      	cmp	r3, #0
  405bfc:	d1cc      	bne.n	405b98 <pbuf_free+0x18>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  405bfe:	7dfb      	ldrb	r3, [r7, #23]
}
  405c00:	4618      	mov	r0, r3
  405c02:	3718      	adds	r7, #24
  405c04:	46bd      	mov	sp, r7
  405c06:	bd80      	pop	{r7, pc}
  405c08:	004054e5 	.word	0x004054e5
  405c0c:	004050e9 	.word	0x004050e9

00405c10 <pbuf_clen>:
 * @return the number of pbufs in a chain
 */

u8_t
pbuf_clen(struct pbuf *p)
{
  405c10:	b480      	push	{r7}
  405c12:	b085      	sub	sp, #20
  405c14:	af00      	add	r7, sp, #0
  405c16:	6078      	str	r0, [r7, #4]
  u8_t len;

  len = 0;
  405c18:	2300      	movs	r3, #0
  405c1a:	73fb      	strb	r3, [r7, #15]
  while (p != NULL) {
  405c1c:	e005      	b.n	405c2a <pbuf_clen+0x1a>
    ++len;
  405c1e:	7bfb      	ldrb	r3, [r7, #15]
  405c20:	3301      	adds	r3, #1
  405c22:	73fb      	strb	r3, [r7, #15]
    p = p->next;
  405c24:	687b      	ldr	r3, [r7, #4]
  405c26:	681b      	ldr	r3, [r3, #0]
  405c28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
  405c2a:	687b      	ldr	r3, [r7, #4]
  405c2c:	2b00      	cmp	r3, #0
  405c2e:	d1f6      	bne.n	405c1e <pbuf_clen+0xe>
  }
  return len;
  405c30:	7bfb      	ldrb	r3, [r7, #15]
}
  405c32:	4618      	mov	r0, r3
  405c34:	3714      	adds	r7, #20
  405c36:	46bd      	mov	sp, r7
  405c38:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c3c:	4770      	bx	lr

00405c3e <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  405c3e:	b480      	push	{r7}
  405c40:	b083      	sub	sp, #12
  405c42:	af00      	add	r7, sp, #0
  405c44:	6078      	str	r0, [r7, #4]
  SYS_ARCH_DECL_PROTECT(old_level);
  /* pbuf given? */
  if (p != NULL) {
  405c46:	687b      	ldr	r3, [r7, #4]
  405c48:	2b00      	cmp	r3, #0
  405c4a:	d005      	beq.n	405c58 <pbuf_ref+0x1a>
    SYS_ARCH_PROTECT(old_level);
    ++(p->ref);
  405c4c:	687b      	ldr	r3, [r7, #4]
  405c4e:	89db      	ldrh	r3, [r3, #14]
  405c50:	3301      	adds	r3, #1
  405c52:	b29a      	uxth	r2, r3
  405c54:	687b      	ldr	r3, [r7, #4]
  405c56:	81da      	strh	r2, [r3, #14]
    SYS_ARCH_UNPROTECT(old_level);
  }
}
  405c58:	bf00      	nop
  405c5a:	370c      	adds	r7, #12
  405c5c:	46bd      	mov	sp, r7
  405c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405c62:	4770      	bx	lr

00405c64 <pbuf_cat>:
 * @see pbuf_chain()
 */

void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  405c64:	b480      	push	{r7}
  405c66:	b085      	sub	sp, #20
  405c68:	af00      	add	r7, sp, #0
  405c6a:	6078      	str	r0, [r7, #4]
  405c6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  405c6e:	687b      	ldr	r3, [r7, #4]
  405c70:	2b00      	cmp	r3, #0
  405c72:	d002      	beq.n	405c7a <pbuf_cat+0x16>
  405c74:	683b      	ldr	r3, [r7, #0]
  405c76:	2b00      	cmp	r3, #0
  405c78:	d100      	bne.n	405c7c <pbuf_cat+0x18>
  405c7a:	e7fe      	b.n	405c7a <pbuf_cat+0x16>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  405c7c:	687b      	ldr	r3, [r7, #4]
  405c7e:	60fb      	str	r3, [r7, #12]
  405c80:	e00a      	b.n	405c98 <pbuf_cat+0x34>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  405c82:	68fb      	ldr	r3, [r7, #12]
  405c84:	891a      	ldrh	r2, [r3, #8]
  405c86:	683b      	ldr	r3, [r7, #0]
  405c88:	891b      	ldrh	r3, [r3, #8]
  405c8a:	4413      	add	r3, r2
  405c8c:	b29a      	uxth	r2, r3
  405c8e:	68fb      	ldr	r3, [r7, #12]
  405c90:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  405c92:	68fb      	ldr	r3, [r7, #12]
  405c94:	681b      	ldr	r3, [r3, #0]
  405c96:	60fb      	str	r3, [r7, #12]
  405c98:	68fb      	ldr	r3, [r7, #12]
  405c9a:	681b      	ldr	r3, [r3, #0]
  405c9c:	2b00      	cmp	r3, #0
  405c9e:	d1f0      	bne.n	405c82 <pbuf_cat+0x1e>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  405ca0:	68fb      	ldr	r3, [r7, #12]
  405ca2:	891a      	ldrh	r2, [r3, #8]
  405ca4:	683b      	ldr	r3, [r7, #0]
  405ca6:	891b      	ldrh	r3, [r3, #8]
  405ca8:	4413      	add	r3, r2
  405caa:	b29a      	uxth	r2, r3
  405cac:	68fb      	ldr	r3, [r7, #12]
  405cae:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  405cb0:	68fb      	ldr	r3, [r7, #12]
  405cb2:	683a      	ldr	r2, [r7, #0]
  405cb4:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  405cb6:	bf00      	nop
  405cb8:	3714      	adds	r7, #20
  405cba:	46bd      	mov	sp, r7
  405cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  405cc0:	4770      	bx	lr
	...

00405cc4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  405cc4:	b580      	push	{r7, lr}
  405cc6:	b082      	sub	sp, #8
  405cc8:	af00      	add	r7, sp, #0
  405cca:	6078      	str	r0, [r7, #4]
  405ccc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
  405cce:	6839      	ldr	r1, [r7, #0]
  405cd0:	6878      	ldr	r0, [r7, #4]
  405cd2:	4b04      	ldr	r3, [pc, #16]	; (405ce4 <pbuf_chain+0x20>)
  405cd4:	4798      	blx	r3
  /* t is now referenced by h */
  pbuf_ref(t);
  405cd6:	6838      	ldr	r0, [r7, #0]
  405cd8:	4b03      	ldr	r3, [pc, #12]	; (405ce8 <pbuf_chain+0x24>)
  405cda:	4798      	blx	r3
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  405cdc:	bf00      	nop
  405cde:	3708      	adds	r7, #8
  405ce0:	46bd      	mov	sp, r7
  405ce2:	bd80      	pop	{r7, pc}
  405ce4:	00405c65 	.word	0x00405c65
  405ce8:	00405c3f 	.word	0x00405c3f

00405cec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, struct pbuf *p_from)
{
  405cec:	b580      	push	{r7, lr}
  405cee:	b084      	sub	sp, #16
  405cf0:	af00      	add	r7, sp, #0
  405cf2:	6078      	str	r0, [r7, #4]
  405cf4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
  405cf6:	2300      	movs	r3, #0
  405cf8:	81fb      	strh	r3, [r7, #14]
  405cfa:	2300      	movs	r3, #0
  405cfc:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (void*)p_to, (void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  405cfe:	687b      	ldr	r3, [r7, #4]
  405d00:	2b00      	cmp	r3, #0
  405d02:	d008      	beq.n	405d16 <pbuf_copy+0x2a>
  405d04:	683b      	ldr	r3, [r7, #0]
  405d06:	2b00      	cmp	r3, #0
  405d08:	d005      	beq.n	405d16 <pbuf_copy+0x2a>
  405d0a:	687b      	ldr	r3, [r7, #4]
  405d0c:	891a      	ldrh	r2, [r3, #8]
  405d0e:	683b      	ldr	r3, [r7, #0]
  405d10:	891b      	ldrh	r3, [r3, #8]
  405d12:	429a      	cmp	r2, r3
  405d14:	d200      	bcs.n	405d18 <pbuf_copy+0x2c>
  405d16:	e7fe      	b.n	405d16 <pbuf_copy+0x2a>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  405d18:	687b      	ldr	r3, [r7, #4]
  405d1a:	895b      	ldrh	r3, [r3, #10]
  405d1c:	461a      	mov	r2, r3
  405d1e:	89fb      	ldrh	r3, [r7, #14]
  405d20:	1ad2      	subs	r2, r2, r3
  405d22:	683b      	ldr	r3, [r7, #0]
  405d24:	895b      	ldrh	r3, [r3, #10]
  405d26:	4619      	mov	r1, r3
  405d28:	89bb      	ldrh	r3, [r7, #12]
  405d2a:	1acb      	subs	r3, r1, r3
  405d2c:	429a      	cmp	r2, r3
  405d2e:	db05      	blt.n	405d3c <pbuf_copy+0x50>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  405d30:	683b      	ldr	r3, [r7, #0]
  405d32:	895a      	ldrh	r2, [r3, #10]
  405d34:	89bb      	ldrh	r3, [r7, #12]
  405d36:	1ad3      	subs	r3, r2, r3
  405d38:	817b      	strh	r3, [r7, #10]
  405d3a:	e004      	b.n	405d46 <pbuf_copy+0x5a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  405d3c:	687b      	ldr	r3, [r7, #4]
  405d3e:	895a      	ldrh	r2, [r3, #10]
  405d40:	89fb      	ldrh	r3, [r7, #14]
  405d42:	1ad3      	subs	r3, r2, r3
  405d44:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  405d46:	687b      	ldr	r3, [r7, #4]
  405d48:	685a      	ldr	r2, [r3, #4]
  405d4a:	89fb      	ldrh	r3, [r7, #14]
  405d4c:	18d0      	adds	r0, r2, r3
  405d4e:	683b      	ldr	r3, [r7, #0]
  405d50:	685a      	ldr	r2, [r3, #4]
  405d52:	89bb      	ldrh	r3, [r7, #12]
  405d54:	4413      	add	r3, r2
  405d56:	897a      	ldrh	r2, [r7, #10]
  405d58:	4619      	mov	r1, r3
  405d5a:	4b24      	ldr	r3, [pc, #144]	; (405dec <pbuf_copy+0x100>)
  405d5c:	4798      	blx	r3
    offset_to += len;
  405d5e:	89fa      	ldrh	r2, [r7, #14]
  405d60:	897b      	ldrh	r3, [r7, #10]
  405d62:	4413      	add	r3, r2
  405d64:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
  405d66:	89ba      	ldrh	r2, [r7, #12]
  405d68:	897b      	ldrh	r3, [r7, #10]
  405d6a:	4413      	add	r3, r2
  405d6c:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
    if (offset_from >= p_from->len) {
  405d6e:	683b      	ldr	r3, [r7, #0]
  405d70:	895b      	ldrh	r3, [r3, #10]
  405d72:	89ba      	ldrh	r2, [r7, #12]
  405d74:	429a      	cmp	r2, r3
  405d76:	d304      	bcc.n	405d82 <pbuf_copy+0x96>
      /* on to next p_from (if any) */
      offset_from = 0;
  405d78:	2300      	movs	r3, #0
  405d7a:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
  405d7c:	683b      	ldr	r3, [r7, #0]
  405d7e:	681b      	ldr	r3, [r3, #0]
  405d80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
  405d82:	687b      	ldr	r3, [r7, #4]
  405d84:	895b      	ldrh	r3, [r3, #10]
  405d86:	89fa      	ldrh	r2, [r7, #14]
  405d88:	429a      	cmp	r2, r3
  405d8a:	d10b      	bne.n	405da4 <pbuf_copy+0xb8>
      /* on to next p_to (if any) */
      offset_to = 0;
  405d8c:	2300      	movs	r3, #0
  405d8e:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
  405d90:	687b      	ldr	r3, [r7, #4]
  405d92:	681b      	ldr	r3, [r3, #0]
  405d94:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  405d96:	687b      	ldr	r3, [r7, #4]
  405d98:	2b00      	cmp	r3, #0
  405d9a:	d103      	bne.n	405da4 <pbuf_copy+0xb8>
  405d9c:	683b      	ldr	r3, [r7, #0]
  405d9e:	2b00      	cmp	r3, #0
  405da0:	d000      	beq.n	405da4 <pbuf_copy+0xb8>
  405da2:	e7fe      	b.n	405da2 <pbuf_copy+0xb6>
    }

    if((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  405da4:	683b      	ldr	r3, [r7, #0]
  405da6:	2b00      	cmp	r3, #0
  405da8:	d00a      	beq.n	405dc0 <pbuf_copy+0xd4>
  405daa:	683b      	ldr	r3, [r7, #0]
  405dac:	895a      	ldrh	r2, [r3, #10]
  405dae:	683b      	ldr	r3, [r7, #0]
  405db0:	891b      	ldrh	r3, [r3, #8]
  405db2:	429a      	cmp	r2, r3
  405db4:	d104      	bne.n	405dc0 <pbuf_copy+0xd4>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  405db6:	683b      	ldr	r3, [r7, #0]
  405db8:	681b      	ldr	r3, [r3, #0]
  405dba:	2b00      	cmp	r3, #0
  405dbc:	d000      	beq.n	405dc0 <pbuf_copy+0xd4>
  405dbe:	e7fe      	b.n	405dbe <pbuf_copy+0xd2>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  405dc0:	687b      	ldr	r3, [r7, #4]
  405dc2:	2b00      	cmp	r3, #0
  405dc4:	d00a      	beq.n	405ddc <pbuf_copy+0xf0>
  405dc6:	687b      	ldr	r3, [r7, #4]
  405dc8:	895a      	ldrh	r2, [r3, #10]
  405dca:	687b      	ldr	r3, [r7, #4]
  405dcc:	891b      	ldrh	r3, [r3, #8]
  405dce:	429a      	cmp	r2, r3
  405dd0:	d104      	bne.n	405ddc <pbuf_copy+0xf0>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!\n",
  405dd2:	687b      	ldr	r3, [r7, #4]
  405dd4:	681b      	ldr	r3, [r3, #0]
  405dd6:	2b00      	cmp	r3, #0
  405dd8:	d000      	beq.n	405ddc <pbuf_copy+0xf0>
  405dda:	e7fe      	b.n	405dda <pbuf_copy+0xee>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  405ddc:	683b      	ldr	r3, [r7, #0]
  405dde:	2b00      	cmp	r3, #0
  405de0:	d19a      	bne.n	405d18 <pbuf_copy+0x2c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  405de2:	2300      	movs	r3, #0
}
  405de4:	4618      	mov	r0, r3
  405de6:	3710      	adds	r7, #16
  405de8:	46bd      	mov	sp, r7
  405dea:	bd80      	pop	{r7, pc}
  405dec:	0040cd79 	.word	0x0040cd79

00405df0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  405df0:	b580      	push	{r7, lr}
  405df2:	b088      	sub	sp, #32
  405df4:	af00      	add	r7, sp, #0
  405df6:	60f8      	str	r0, [r7, #12]
  405df8:	60b9      	str	r1, [r7, #8]
  405dfa:	4611      	mov	r1, r2
  405dfc:	461a      	mov	r2, r3
  405dfe:	460b      	mov	r3, r1
  405e00:	80fb      	strh	r3, [r7, #6]
  405e02:	4613      	mov	r3, r2
  405e04:	80bb      	strh	r3, [r7, #4]
  struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  405e06:	2300      	movs	r3, #0
  405e08:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  405e0a:	68fb      	ldr	r3, [r7, #12]
  405e0c:	2b00      	cmp	r3, #0
  405e0e:	d100      	bne.n	405e12 <pbuf_copy_partial+0x22>
  405e10:	e7fe      	b.n	405e10 <pbuf_copy_partial+0x20>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  405e12:	68bb      	ldr	r3, [r7, #8]
  405e14:	2b00      	cmp	r3, #0
  405e16:	d100      	bne.n	405e1a <pbuf_copy_partial+0x2a>
  405e18:	e7fe      	b.n	405e18 <pbuf_copy_partial+0x28>

  left = 0;
  405e1a:	2300      	movs	r3, #0
  405e1c:	837b      	strh	r3, [r7, #26]

  if((buf == NULL) || (dataptr == NULL)) {
  405e1e:	68fb      	ldr	r3, [r7, #12]
  405e20:	2b00      	cmp	r3, #0
  405e22:	d002      	beq.n	405e2a <pbuf_copy_partial+0x3a>
  405e24:	68bb      	ldr	r3, [r7, #8]
  405e26:	2b00      	cmp	r3, #0
  405e28:	d101      	bne.n	405e2e <pbuf_copy_partial+0x3e>
    return 0;
  405e2a:	2300      	movs	r3, #0
  405e2c:	e03e      	b.n	405eac <pbuf_copy_partial+0xbc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  405e2e:	68fb      	ldr	r3, [r7, #12]
  405e30:	61fb      	str	r3, [r7, #28]
  405e32:	e034      	b.n	405e9e <pbuf_copy_partial+0xae>
    if ((offset != 0) && (offset >= p->len)) {
  405e34:	88bb      	ldrh	r3, [r7, #4]
  405e36:	2b00      	cmp	r3, #0
  405e38:	d00a      	beq.n	405e50 <pbuf_copy_partial+0x60>
  405e3a:	69fb      	ldr	r3, [r7, #28]
  405e3c:	895b      	ldrh	r3, [r3, #10]
  405e3e:	88ba      	ldrh	r2, [r7, #4]
  405e40:	429a      	cmp	r2, r3
  405e42:	d305      	bcc.n	405e50 <pbuf_copy_partial+0x60>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  405e44:	69fb      	ldr	r3, [r7, #28]
  405e46:	895b      	ldrh	r3, [r3, #10]
  405e48:	88ba      	ldrh	r2, [r7, #4]
  405e4a:	1ad3      	subs	r3, r2, r3
  405e4c:	80bb      	strh	r3, [r7, #4]
  405e4e:	e023      	b.n	405e98 <pbuf_copy_partial+0xa8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  405e50:	69fb      	ldr	r3, [r7, #28]
  405e52:	895a      	ldrh	r2, [r3, #10]
  405e54:	88bb      	ldrh	r3, [r7, #4]
  405e56:	1ad3      	subs	r3, r2, r3
  405e58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len)
  405e5a:	8b3a      	ldrh	r2, [r7, #24]
  405e5c:	88fb      	ldrh	r3, [r7, #6]
  405e5e:	429a      	cmp	r2, r3
  405e60:	d901      	bls.n	405e66 <pbuf_copy_partial+0x76>
          buf_copy_len = len;
  405e62:	88fb      	ldrh	r3, [r7, #6]
  405e64:	833b      	strh	r3, [r7, #24]
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  405e66:	8b7b      	ldrh	r3, [r7, #26]
  405e68:	68ba      	ldr	r2, [r7, #8]
  405e6a:	18d0      	adds	r0, r2, r3
  405e6c:	69fb      	ldr	r3, [r7, #28]
  405e6e:	685a      	ldr	r2, [r3, #4]
  405e70:	88bb      	ldrh	r3, [r7, #4]
  405e72:	4413      	add	r3, r2
  405e74:	8b3a      	ldrh	r2, [r7, #24]
  405e76:	4619      	mov	r1, r3
  405e78:	4b0e      	ldr	r3, [pc, #56]	; (405eb4 <pbuf_copy_partial+0xc4>)
  405e7a:	4798      	blx	r3
      copied_total += buf_copy_len;
  405e7c:	8afa      	ldrh	r2, [r7, #22]
  405e7e:	8b3b      	ldrh	r3, [r7, #24]
  405e80:	4413      	add	r3, r2
  405e82:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
  405e84:	8b7a      	ldrh	r2, [r7, #26]
  405e86:	8b3b      	ldrh	r3, [r7, #24]
  405e88:	4413      	add	r3, r2
  405e8a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
  405e8c:	88fa      	ldrh	r2, [r7, #6]
  405e8e:	8b3b      	ldrh	r3, [r7, #24]
  405e90:	1ad3      	subs	r3, r2, r3
  405e92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
  405e94:	2300      	movs	r3, #0
  405e96:	80bb      	strh	r3, [r7, #4]
  for(p = buf; len != 0 && p != NULL; p = p->next) {
  405e98:	69fb      	ldr	r3, [r7, #28]
  405e9a:	681b      	ldr	r3, [r3, #0]
  405e9c:	61fb      	str	r3, [r7, #28]
  405e9e:	88fb      	ldrh	r3, [r7, #6]
  405ea0:	2b00      	cmp	r3, #0
  405ea2:	d002      	beq.n	405eaa <pbuf_copy_partial+0xba>
  405ea4:	69fb      	ldr	r3, [r7, #28]
  405ea6:	2b00      	cmp	r3, #0
  405ea8:	d1c4      	bne.n	405e34 <pbuf_copy_partial+0x44>
    }
  }
  return copied_total;
  405eaa:	8afb      	ldrh	r3, [r7, #22]
}
  405eac:	4618      	mov	r0, r3
  405eae:	3720      	adds	r7, #32
  405eb0:	46bd      	mov	sp, r7
  405eb2:	bd80      	pop	{r7, pc}
  405eb4:	0040cd79 	.word	0x0040cd79

00405eb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  405eb8:	b480      	push	{r7}
  405eba:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  405ebc:	bf00      	nop
  405ebe:	46bd      	mov	sp, r7
  405ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ec4:	4770      	bx	lr
	...

00405ec8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  405ec8:	b580      	push	{r7, lr}
  405eca:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  405ecc:	4b08      	ldr	r3, [pc, #32]	; (405ef0 <tcp_tmr+0x28>)
  405ece:	4798      	blx	r3

  if (++tcp_timer & 1) {
  405ed0:	4b08      	ldr	r3, [pc, #32]	; (405ef4 <tcp_tmr+0x2c>)
  405ed2:	781b      	ldrb	r3, [r3, #0]
  405ed4:	3301      	adds	r3, #1
  405ed6:	b2da      	uxtb	r2, r3
  405ed8:	4b06      	ldr	r3, [pc, #24]	; (405ef4 <tcp_tmr+0x2c>)
  405eda:	701a      	strb	r2, [r3, #0]
  405edc:	4b05      	ldr	r3, [pc, #20]	; (405ef4 <tcp_tmr+0x2c>)
  405ede:	781b      	ldrb	r3, [r3, #0]
  405ee0:	f003 0301 	and.w	r3, r3, #1
  405ee4:	2b00      	cmp	r3, #0
  405ee6:	d001      	beq.n	405eec <tcp_tmr+0x24>
    /* Call tcp_tmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  405ee8:	4b03      	ldr	r3, [pc, #12]	; (405ef8 <tcp_tmr+0x30>)
  405eea:	4798      	blx	r3
  }
}
  405eec:	bf00      	nop
  405eee:	bd80      	pop	{r7, pc}
  405ef0:	00406c91 	.word	0x00406c91
  405ef4:	204025cc 	.word	0x204025cc
  405ef8:	00406811 	.word	0x00406811

00405efc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  405efc:	b5b0      	push	{r4, r5, r7, lr}
  405efe:	b086      	sub	sp, #24
  405f00:	af02      	add	r7, sp, #8
  405f02:	6078      	str	r0, [r7, #4]
  405f04:	460b      	mov	r3, r1
  405f06:	70fb      	strb	r3, [r7, #3]
  err_t err;

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  405f08:	78fb      	ldrb	r3, [r7, #3]
  405f0a:	2b00      	cmp	r3, #0
  405f0c:	d067      	beq.n	405fde <tcp_close_shutdown+0xe2>
  405f0e:	687b      	ldr	r3, [r7, #4]
  405f10:	7e1b      	ldrb	r3, [r3, #24]
  405f12:	2b04      	cmp	r3, #4
  405f14:	d003      	beq.n	405f1e <tcp_close_shutdown+0x22>
  405f16:	687b      	ldr	r3, [r7, #4]
  405f18:	7e1b      	ldrb	r3, [r3, #24]
  405f1a:	2b07      	cmp	r3, #7
  405f1c:	d15f      	bne.n	405fde <tcp_close_shutdown+0xe2>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND)) {
  405f1e:	687b      	ldr	r3, [r7, #4]
  405f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  405f22:	2b00      	cmp	r3, #0
  405f24:	d105      	bne.n	405f32 <tcp_close_shutdown+0x36>
  405f26:	687b      	ldr	r3, [r7, #4]
  405f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  405f2a:	f640 3268 	movw	r2, #2920	; 0xb68
  405f2e:	4293      	cmp	r3, r2
  405f30:	d055      	beq.n	405fde <tcp_close_shutdown+0xe2>
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  405f32:	687b      	ldr	r3, [r7, #4]
  405f34:	6d18      	ldr	r0, [r3, #80]	; 0x50
  405f36:	687b      	ldr	r3, [r7, #4]
  405f38:	6a99      	ldr	r1, [r3, #40]	; 0x28
  405f3a:	687c      	ldr	r4, [r7, #4]
  405f3c:	687b      	ldr	r3, [r7, #4]
  405f3e:	1d1d      	adds	r5, r3, #4
  405f40:	687b      	ldr	r3, [r7, #4]
  405f42:	8b5b      	ldrh	r3, [r3, #26]
  405f44:	687a      	ldr	r2, [r7, #4]
  405f46:	8b92      	ldrh	r2, [r2, #28]
  405f48:	9201      	str	r2, [sp, #4]
  405f4a:	9300      	str	r3, [sp, #0]
  405f4c:	462b      	mov	r3, r5
  405f4e:	4622      	mov	r2, r4
  405f50:	4c79      	ldr	r4, [pc, #484]	; (406138 <tcp_close_shutdown+0x23c>)
  405f52:	47a0      	blx	r4
        pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  405f54:	6878      	ldr	r0, [r7, #4]
  405f56:	4b79      	ldr	r3, [pc, #484]	; (40613c <tcp_close_shutdown+0x240>)
  405f58:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  405f5a:	4b79      	ldr	r3, [pc, #484]	; (406140 <tcp_close_shutdown+0x244>)
  405f5c:	681a      	ldr	r2, [r3, #0]
  405f5e:	687b      	ldr	r3, [r7, #4]
  405f60:	429a      	cmp	r2, r3
  405f62:	d105      	bne.n	405f70 <tcp_close_shutdown+0x74>
  405f64:	4b76      	ldr	r3, [pc, #472]	; (406140 <tcp_close_shutdown+0x244>)
  405f66:	681b      	ldr	r3, [r3, #0]
  405f68:	68db      	ldr	r3, [r3, #12]
  405f6a:	4a75      	ldr	r2, [pc, #468]	; (406140 <tcp_close_shutdown+0x244>)
  405f6c:	6013      	str	r3, [r2, #0]
  405f6e:	e019      	b.n	405fa4 <tcp_close_shutdown+0xa8>
  405f70:	4b73      	ldr	r3, [pc, #460]	; (406140 <tcp_close_shutdown+0x244>)
  405f72:	681b      	ldr	r3, [r3, #0]
  405f74:	4a73      	ldr	r2, [pc, #460]	; (406144 <tcp_close_shutdown+0x248>)
  405f76:	6013      	str	r3, [r2, #0]
  405f78:	e010      	b.n	405f9c <tcp_close_shutdown+0xa0>
  405f7a:	4b72      	ldr	r3, [pc, #456]	; (406144 <tcp_close_shutdown+0x248>)
  405f7c:	681b      	ldr	r3, [r3, #0]
  405f7e:	68da      	ldr	r2, [r3, #12]
  405f80:	687b      	ldr	r3, [r7, #4]
  405f82:	429a      	cmp	r2, r3
  405f84:	d105      	bne.n	405f92 <tcp_close_shutdown+0x96>
  405f86:	4b6f      	ldr	r3, [pc, #444]	; (406144 <tcp_close_shutdown+0x248>)
  405f88:	681b      	ldr	r3, [r3, #0]
  405f8a:	687a      	ldr	r2, [r7, #4]
  405f8c:	68d2      	ldr	r2, [r2, #12]
  405f8e:	60da      	str	r2, [r3, #12]
  405f90:	e008      	b.n	405fa4 <tcp_close_shutdown+0xa8>
  405f92:	4b6c      	ldr	r3, [pc, #432]	; (406144 <tcp_close_shutdown+0x248>)
  405f94:	681b      	ldr	r3, [r3, #0]
  405f96:	68db      	ldr	r3, [r3, #12]
  405f98:	4a6a      	ldr	r2, [pc, #424]	; (406144 <tcp_close_shutdown+0x248>)
  405f9a:	6013      	str	r3, [r2, #0]
  405f9c:	4b69      	ldr	r3, [pc, #420]	; (406144 <tcp_close_shutdown+0x248>)
  405f9e:	681b      	ldr	r3, [r3, #0]
  405fa0:	2b00      	cmp	r3, #0
  405fa2:	d1ea      	bne.n	405f7a <tcp_close_shutdown+0x7e>
  405fa4:	687b      	ldr	r3, [r7, #4]
  405fa6:	2200      	movs	r2, #0
  405fa8:	60da      	str	r2, [r3, #12]
  405faa:	4b67      	ldr	r3, [pc, #412]	; (406148 <tcp_close_shutdown+0x24c>)
  405fac:	2201      	movs	r2, #1
  405fae:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
  405fb0:	687b      	ldr	r3, [r7, #4]
  405fb2:	7e1b      	ldrb	r3, [r3, #24]
  405fb4:	2b04      	cmp	r3, #4
  405fb6:	d10c      	bne.n	405fd2 <tcp_close_shutdown+0xd6>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  405fb8:	687b      	ldr	r3, [r7, #4]
  405fba:	220a      	movs	r2, #10
  405fbc:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  405fbe:	4b63      	ldr	r3, [pc, #396]	; (40614c <tcp_close_shutdown+0x250>)
  405fc0:	681a      	ldr	r2, [r3, #0]
  405fc2:	687b      	ldr	r3, [r7, #4]
  405fc4:	60da      	str	r2, [r3, #12]
  405fc6:	4a61      	ldr	r2, [pc, #388]	; (40614c <tcp_close_shutdown+0x250>)
  405fc8:	687b      	ldr	r3, [r7, #4]
  405fca:	6013      	str	r3, [r2, #0]
  405fcc:	4b60      	ldr	r3, [pc, #384]	; (406150 <tcp_close_shutdown+0x254>)
  405fce:	4798      	blx	r3
  405fd0:	e003      	b.n	405fda <tcp_close_shutdown+0xde>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        memp_free(MEMP_TCP_PCB, pcb);
  405fd2:	6879      	ldr	r1, [r7, #4]
  405fd4:	2001      	movs	r0, #1
  405fd6:	4b5f      	ldr	r3, [pc, #380]	; (406154 <tcp_close_shutdown+0x258>)
  405fd8:	4798      	blx	r3
      }
      return ERR_OK;
  405fda:	2300      	movs	r3, #0
  405fdc:	e0a7      	b.n	40612e <tcp_close_shutdown+0x232>
    }
  }

  switch (pcb->state) {
  405fde:	687b      	ldr	r3, [r7, #4]
  405fe0:	7e1b      	ldrb	r3, [r3, #24]
  405fe2:	2b07      	cmp	r3, #7
  405fe4:	f200 808d 	bhi.w	406102 <tcp_close_shutdown+0x206>
  405fe8:	a201      	add	r2, pc, #4	; (adr r2, 405ff0 <tcp_close_shutdown+0xf4>)
  405fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  405fee:	bf00      	nop
  405ff0:	00406011 	.word	0x00406011
  405ff4:	0040607b 	.word	0x0040607b
  405ff8:	00406095 	.word	0x00406095
  405ffc:	004060b5 	.word	0x004060b5
  406000:	004060cf 	.word	0x004060cf
  406004:	00406103 	.word	0x00406103
  406008:	00406103 	.word	0x00406103
  40600c:	004060e9 	.word	0x004060e9
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state 
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    err = ERR_OK;
  406010:	2300      	movs	r3, #0
  406012:	73fb      	strb	r3, [r7, #15]
    if (pcb->local_port != 0) {
  406014:	687b      	ldr	r3, [r7, #4]
  406016:	8b5b      	ldrh	r3, [r3, #26]
  406018:	2b00      	cmp	r3, #0
  40601a:	d027      	beq.n	40606c <tcp_close_shutdown+0x170>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  40601c:	4b4e      	ldr	r3, [pc, #312]	; (406158 <tcp_close_shutdown+0x25c>)
  40601e:	681a      	ldr	r2, [r3, #0]
  406020:	687b      	ldr	r3, [r7, #4]
  406022:	429a      	cmp	r2, r3
  406024:	d105      	bne.n	406032 <tcp_close_shutdown+0x136>
  406026:	4b4c      	ldr	r3, [pc, #304]	; (406158 <tcp_close_shutdown+0x25c>)
  406028:	681b      	ldr	r3, [r3, #0]
  40602a:	68db      	ldr	r3, [r3, #12]
  40602c:	4a4a      	ldr	r2, [pc, #296]	; (406158 <tcp_close_shutdown+0x25c>)
  40602e:	6013      	str	r3, [r2, #0]
  406030:	e019      	b.n	406066 <tcp_close_shutdown+0x16a>
  406032:	4b49      	ldr	r3, [pc, #292]	; (406158 <tcp_close_shutdown+0x25c>)
  406034:	681b      	ldr	r3, [r3, #0]
  406036:	4a43      	ldr	r2, [pc, #268]	; (406144 <tcp_close_shutdown+0x248>)
  406038:	6013      	str	r3, [r2, #0]
  40603a:	e010      	b.n	40605e <tcp_close_shutdown+0x162>
  40603c:	4b41      	ldr	r3, [pc, #260]	; (406144 <tcp_close_shutdown+0x248>)
  40603e:	681b      	ldr	r3, [r3, #0]
  406040:	68da      	ldr	r2, [r3, #12]
  406042:	687b      	ldr	r3, [r7, #4]
  406044:	429a      	cmp	r2, r3
  406046:	d105      	bne.n	406054 <tcp_close_shutdown+0x158>
  406048:	4b3e      	ldr	r3, [pc, #248]	; (406144 <tcp_close_shutdown+0x248>)
  40604a:	681b      	ldr	r3, [r3, #0]
  40604c:	687a      	ldr	r2, [r7, #4]
  40604e:	68d2      	ldr	r2, [r2, #12]
  406050:	60da      	str	r2, [r3, #12]
  406052:	e008      	b.n	406066 <tcp_close_shutdown+0x16a>
  406054:	4b3b      	ldr	r3, [pc, #236]	; (406144 <tcp_close_shutdown+0x248>)
  406056:	681b      	ldr	r3, [r3, #0]
  406058:	68db      	ldr	r3, [r3, #12]
  40605a:	4a3a      	ldr	r2, [pc, #232]	; (406144 <tcp_close_shutdown+0x248>)
  40605c:	6013      	str	r3, [r2, #0]
  40605e:	4b39      	ldr	r3, [pc, #228]	; (406144 <tcp_close_shutdown+0x248>)
  406060:	681b      	ldr	r3, [r3, #0]
  406062:	2b00      	cmp	r3, #0
  406064:	d1ea      	bne.n	40603c <tcp_close_shutdown+0x140>
  406066:	687b      	ldr	r3, [r7, #4]
  406068:	2200      	movs	r2, #0
  40606a:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  40606c:	6879      	ldr	r1, [r7, #4]
  40606e:	2001      	movs	r0, #1
  406070:	4b38      	ldr	r3, [pc, #224]	; (406154 <tcp_close_shutdown+0x258>)
  406072:	4798      	blx	r3
    pcb = NULL;
  406074:	2300      	movs	r3, #0
  406076:	607b      	str	r3, [r7, #4]
    break;
  406078:	e04d      	b.n	406116 <tcp_close_shutdown+0x21a>
  case LISTEN:
    err = ERR_OK;
  40607a:	2300      	movs	r3, #0
  40607c:	73fb      	strb	r3, [r7, #15]
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  40607e:	6879      	ldr	r1, [r7, #4]
  406080:	4836      	ldr	r0, [pc, #216]	; (40615c <tcp_close_shutdown+0x260>)
  406082:	4b37      	ldr	r3, [pc, #220]	; (406160 <tcp_close_shutdown+0x264>)
  406084:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  406086:	6879      	ldr	r1, [r7, #4]
  406088:	2002      	movs	r0, #2
  40608a:	4b32      	ldr	r3, [pc, #200]	; (406154 <tcp_close_shutdown+0x258>)
  40608c:	4798      	blx	r3
    pcb = NULL;
  40608e:	2300      	movs	r3, #0
  406090:	607b      	str	r3, [r7, #4]
    break;
  406092:	e040      	b.n	406116 <tcp_close_shutdown+0x21a>
  case SYN_SENT:
    err = ERR_OK;
  406094:	2300      	movs	r3, #0
  406096:	73fb      	strb	r3, [r7, #15]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  406098:	6879      	ldr	r1, [r7, #4]
  40609a:	4829      	ldr	r0, [pc, #164]	; (406140 <tcp_close_shutdown+0x244>)
  40609c:	4b30      	ldr	r3, [pc, #192]	; (406160 <tcp_close_shutdown+0x264>)
  40609e:	4798      	blx	r3
  4060a0:	4b29      	ldr	r3, [pc, #164]	; (406148 <tcp_close_shutdown+0x24c>)
  4060a2:	2201      	movs	r2, #1
  4060a4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
  4060a6:	6879      	ldr	r1, [r7, #4]
  4060a8:	2001      	movs	r0, #1
  4060aa:	4b2a      	ldr	r3, [pc, #168]	; (406154 <tcp_close_shutdown+0x258>)
  4060ac:	4798      	blx	r3
    pcb = NULL;
  4060ae:	2300      	movs	r3, #0
  4060b0:	607b      	str	r3, [r7, #4]
    snmp_inc_tcpattemptfails();
    break;
  4060b2:	e030      	b.n	406116 <tcp_close_shutdown+0x21a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  4060b4:	6878      	ldr	r0, [r7, #4]
  4060b6:	4b2b      	ldr	r3, [pc, #172]	; (406164 <tcp_close_shutdown+0x268>)
  4060b8:	4798      	blx	r3
  4060ba:	4603      	mov	r3, r0
  4060bc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4060c2:	2b00      	cmp	r3, #0
  4060c4:	d122      	bne.n	40610c <tcp_close_shutdown+0x210>
      snmp_inc_tcpattemptfails();
      pcb->state = FIN_WAIT_1;
  4060c6:	687b      	ldr	r3, [r7, #4]
  4060c8:	2205      	movs	r2, #5
  4060ca:	761a      	strb	r2, [r3, #24]
    }
    break;
  4060cc:	e01e      	b.n	40610c <tcp_close_shutdown+0x210>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  4060ce:	6878      	ldr	r0, [r7, #4]
  4060d0:	4b24      	ldr	r3, [pc, #144]	; (406164 <tcp_close_shutdown+0x268>)
  4060d2:	4798      	blx	r3
  4060d4:	4603      	mov	r3, r0
  4060d6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4060d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4060dc:	2b00      	cmp	r3, #0
  4060de:	d117      	bne.n	406110 <tcp_close_shutdown+0x214>
      snmp_inc_tcpestabresets();
      pcb->state = FIN_WAIT_1;
  4060e0:	687b      	ldr	r3, [r7, #4]
  4060e2:	2205      	movs	r2, #5
  4060e4:	761a      	strb	r2, [r3, #24]
    }
    break;
  4060e6:	e013      	b.n	406110 <tcp_close_shutdown+0x214>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  4060e8:	6878      	ldr	r0, [r7, #4]
  4060ea:	4b1e      	ldr	r3, [pc, #120]	; (406164 <tcp_close_shutdown+0x268>)
  4060ec:	4798      	blx	r3
  4060ee:	4603      	mov	r3, r0
  4060f0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
  4060f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4060f6:	2b00      	cmp	r3, #0
  4060f8:	d10c      	bne.n	406114 <tcp_close_shutdown+0x218>
      snmp_inc_tcpestabresets();
      pcb->state = LAST_ACK;
  4060fa:	687b      	ldr	r3, [r7, #4]
  4060fc:	2209      	movs	r2, #9
  4060fe:	761a      	strb	r2, [r3, #24]
    }
    break;
  406100:	e008      	b.n	406114 <tcp_close_shutdown+0x218>
  default:
    /* Has already been closed, do nothing. */
    err = ERR_OK;
  406102:	2300      	movs	r3, #0
  406104:	73fb      	strb	r3, [r7, #15]
    pcb = NULL;
  406106:	2300      	movs	r3, #0
  406108:	607b      	str	r3, [r7, #4]
    break;
  40610a:	e004      	b.n	406116 <tcp_close_shutdown+0x21a>
    break;
  40610c:	bf00      	nop
  40610e:	e002      	b.n	406116 <tcp_close_shutdown+0x21a>
    break;
  406110:	bf00      	nop
  406112:	e000      	b.n	406116 <tcp_close_shutdown+0x21a>
    break;
  406114:	bf00      	nop
  }

  if (pcb != NULL && err == ERR_OK) {
  406116:	687b      	ldr	r3, [r7, #4]
  406118:	2b00      	cmp	r3, #0
  40611a:	d006      	beq.n	40612a <tcp_close_shutdown+0x22e>
  40611c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406120:	2b00      	cmp	r3, #0
  406122:	d102      	bne.n	40612a <tcp_close_shutdown+0x22e>
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    /* @todo: When implementing SO_LINGER, this must be changed somehow:
       If SOF_LINGER is set, the data should be sent and acked before close returns.
       This can only be valid for sequential APIs, not for the raw API. */
    tcp_output(pcb);
  406124:	6878      	ldr	r0, [r7, #4]
  406126:	4b10      	ldr	r3, [pc, #64]	; (406168 <tcp_close_shutdown+0x26c>)
  406128:	4798      	blx	r3
  }
  return err;
  40612a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
  40612e:	4618      	mov	r0, r3
  406130:	3710      	adds	r7, #16
  406132:	46bd      	mov	sp, r7
  406134:	bdb0      	pop	{r4, r5, r7, pc}
  406136:	bf00      	nop
  406138:	0040a2c1 	.word	0x0040a2c1
  40613c:	0040720d 	.word	0x0040720d
  406140:	204049a0 	.word	0x204049a0
  406144:	204049ac 	.word	0x204049ac
  406148:	2040499c 	.word	0x2040499c
  40614c:	204049b4 	.word	0x204049b4
  406150:	00404d75 	.word	0x00404d75
  406154:	004054e5 	.word	0x004054e5
  406158:	204049b0 	.word	0x204049b0
  40615c:	204049a8 	.word	0x204049a8
  406160:	00407299 	.word	0x00407299
  406164:	00409529 	.word	0x00409529
  406168:	00409e75 	.word	0x00409e75

0040616c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  40616c:	b580      	push	{r7, lr}
  40616e:	b082      	sub	sp, #8
  406170:	af00      	add	r7, sp, #0
  406172:	6078      	str	r0, [r7, #4]
#if TCP_DEBUG
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */

  if (pcb->state != LISTEN) {
  406174:	687b      	ldr	r3, [r7, #4]
  406176:	7e1b      	ldrb	r3, [r3, #24]
  406178:	2b01      	cmp	r3, #1
  40617a:	d006      	beq.n	40618a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  40617c:	687b      	ldr	r3, [r7, #4]
  40617e:	7f9b      	ldrb	r3, [r3, #30]
  406180:	f043 0310 	orr.w	r3, r3, #16
  406184:	b2da      	uxtb	r2, r3
  406186:	687b      	ldr	r3, [r7, #4]
  406188:	779a      	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  40618a:	2101      	movs	r1, #1
  40618c:	6878      	ldr	r0, [r7, #4]
  40618e:	4b03      	ldr	r3, [pc, #12]	; (40619c <tcp_close+0x30>)
  406190:	4798      	blx	r3
  406192:	4603      	mov	r3, r0
}
  406194:	4618      	mov	r0, r3
  406196:	3708      	adds	r7, #8
  406198:	46bd      	mov	sp, r7
  40619a:	bd80      	pop	{r7, pc}
  40619c:	00405efd 	.word	0x00405efd

004061a0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  4061a0:	b590      	push	{r4, r7, lr}
  4061a2:	b089      	sub	sp, #36	; 0x24
  4061a4:	af02      	add	r7, sp, #8
  4061a6:	6078      	str	r0, [r7, #4]
  4061a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  4061aa:	687b      	ldr	r3, [r7, #4]
  4061ac:	7e1b      	ldrb	r3, [r3, #24]
  4061ae:	2b0a      	cmp	r3, #10
  4061b0:	d108      	bne.n	4061c4 <tcp_abandon+0x24>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  4061b2:	6879      	ldr	r1, [r7, #4]
  4061b4:	482c      	ldr	r0, [pc, #176]	; (406268 <tcp_abandon+0xc8>)
  4061b6:	4b2d      	ldr	r3, [pc, #180]	; (40626c <tcp_abandon+0xcc>)
  4061b8:	4798      	blx	r3
    memp_free(MEMP_TCP_PCB, pcb);
  4061ba:	6879      	ldr	r1, [r7, #4]
  4061bc:	2001      	movs	r0, #1
  4061be:	4b2c      	ldr	r3, [pc, #176]	; (406270 <tcp_abandon+0xd0>)
  4061c0:	4798      	blx	r3
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
    }
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  }
}
  4061c2:	e04c      	b.n	40625e <tcp_abandon+0xbe>
    seqno = pcb->snd_nxt;
  4061c4:	687b      	ldr	r3, [r7, #4]
  4061c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  4061c8:	617b      	str	r3, [r7, #20]
    ackno = pcb->rcv_nxt;
  4061ca:	687b      	ldr	r3, [r7, #4]
  4061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4061ce:	613b      	str	r3, [r7, #16]
    errf = pcb->errf;
  4061d0:	687b      	ldr	r3, [r7, #4]
  4061d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4061d6:	60fb      	str	r3, [r7, #12]
    errf_arg = pcb->callback_arg;
  4061d8:	687b      	ldr	r3, [r7, #4]
  4061da:	691b      	ldr	r3, [r3, #16]
  4061dc:	60bb      	str	r3, [r7, #8]
    TCP_PCB_REMOVE_ACTIVE(pcb);
  4061de:	6879      	ldr	r1, [r7, #4]
  4061e0:	4824      	ldr	r0, [pc, #144]	; (406274 <tcp_abandon+0xd4>)
  4061e2:	4b22      	ldr	r3, [pc, #136]	; (40626c <tcp_abandon+0xcc>)
  4061e4:	4798      	blx	r3
  4061e6:	4b24      	ldr	r3, [pc, #144]	; (406278 <tcp_abandon+0xd8>)
  4061e8:	2201      	movs	r2, #1
  4061ea:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
  4061ec:	687b      	ldr	r3, [r7, #4]
  4061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4061f0:	2b00      	cmp	r3, #0
  4061f2:	d004      	beq.n	4061fe <tcp_abandon+0x5e>
      tcp_segs_free(pcb->unacked);
  4061f4:	687b      	ldr	r3, [r7, #4]
  4061f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4061f8:	4618      	mov	r0, r3
  4061fa:	4b20      	ldr	r3, [pc, #128]	; (40627c <tcp_abandon+0xdc>)
  4061fc:	4798      	blx	r3
    if (pcb->unsent != NULL) {
  4061fe:	687b      	ldr	r3, [r7, #4]
  406200:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  406202:	2b00      	cmp	r3, #0
  406204:	d004      	beq.n	406210 <tcp_abandon+0x70>
      tcp_segs_free(pcb->unsent);
  406206:	687b      	ldr	r3, [r7, #4]
  406208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40620a:	4618      	mov	r0, r3
  40620c:	4b1b      	ldr	r3, [pc, #108]	; (40627c <tcp_abandon+0xdc>)
  40620e:	4798      	blx	r3
    if (pcb->ooseq != NULL) {
  406210:	687b      	ldr	r3, [r7, #4]
  406212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406214:	2b00      	cmp	r3, #0
  406216:	d004      	beq.n	406222 <tcp_abandon+0x82>
      tcp_segs_free(pcb->ooseq);
  406218:	687b      	ldr	r3, [r7, #4]
  40621a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40621c:	4618      	mov	r0, r3
  40621e:	4b17      	ldr	r3, [pc, #92]	; (40627c <tcp_abandon+0xdc>)
  406220:	4798      	blx	r3
    if (reset) {
  406222:	683b      	ldr	r3, [r7, #0]
  406224:	2b00      	cmp	r3, #0
  406226:	d00e      	beq.n	406246 <tcp_abandon+0xa6>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, pcb->local_port, pcb->remote_port);
  406228:	6879      	ldr	r1, [r7, #4]
  40622a:	687b      	ldr	r3, [r7, #4]
  40622c:	1d18      	adds	r0, r3, #4
  40622e:	687b      	ldr	r3, [r7, #4]
  406230:	8b5b      	ldrh	r3, [r3, #26]
  406232:	687a      	ldr	r2, [r7, #4]
  406234:	8b92      	ldrh	r2, [r2, #28]
  406236:	9201      	str	r2, [sp, #4]
  406238:	9300      	str	r3, [sp, #0]
  40623a:	4603      	mov	r3, r0
  40623c:	460a      	mov	r2, r1
  40623e:	6939      	ldr	r1, [r7, #16]
  406240:	6978      	ldr	r0, [r7, #20]
  406242:	4c0f      	ldr	r4, [pc, #60]	; (406280 <tcp_abandon+0xe0>)
  406244:	47a0      	blx	r4
    memp_free(MEMP_TCP_PCB, pcb);
  406246:	6879      	ldr	r1, [r7, #4]
  406248:	2001      	movs	r0, #1
  40624a:	4b09      	ldr	r3, [pc, #36]	; (406270 <tcp_abandon+0xd0>)
  40624c:	4798      	blx	r3
    TCP_EVENT_ERR(errf, errf_arg, ERR_ABRT);
  40624e:	68fb      	ldr	r3, [r7, #12]
  406250:	2b00      	cmp	r3, #0
  406252:	d004      	beq.n	40625e <tcp_abandon+0xbe>
  406254:	68fb      	ldr	r3, [r7, #12]
  406256:	f06f 0109 	mvn.w	r1, #9
  40625a:	68b8      	ldr	r0, [r7, #8]
  40625c:	4798      	blx	r3
}
  40625e:	bf00      	nop
  406260:	371c      	adds	r7, #28
  406262:	46bd      	mov	sp, r7
  406264:	bd90      	pop	{r4, r7, pc}
  406266:	bf00      	nop
  406268:	204049b4 	.word	0x204049b4
  40626c:	00407299 	.word	0x00407299
  406270:	004054e5 	.word	0x004054e5
  406274:	204049a0 	.word	0x204049a0
  406278:	2040499c 	.word	0x2040499c
  40627c:	00406e11 	.word	0x00406e11
  406280:	0040a2c1 	.word	0x0040a2c1

00406284 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  406284:	b580      	push	{r7, lr}
  406286:	b082      	sub	sp, #8
  406288:	af00      	add	r7, sp, #0
  40628a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
  40628c:	2101      	movs	r1, #1
  40628e:	6878      	ldr	r0, [r7, #4]
  406290:	4b02      	ldr	r3, [pc, #8]	; (40629c <tcp_abort+0x18>)
  406292:	4798      	blx	r3
}
  406294:	bf00      	nop
  406296:	3708      	adds	r7, #8
  406298:	46bd      	mov	sp, r7
  40629a:	bd80      	pop	{r7, pc}
  40629c:	004061a1 	.word	0x004061a1

004062a0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  4062a0:	b580      	push	{r7, lr}
  4062a2:	b088      	sub	sp, #32
  4062a4:	af00      	add	r7, sp, #0
  4062a6:	60f8      	str	r0, [r7, #12]
  4062a8:	60b9      	str	r1, [r7, #8]
  4062aa:	4613      	mov	r3, r2
  4062ac:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  4062ae:	2304      	movs	r3, #4
  4062b0:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  4062b2:	68fb      	ldr	r3, [r7, #12]
  4062b4:	7e1b      	ldrb	r3, [r3, #24]
  4062b6:	2b00      	cmp	r3, #0
  4062b8:	d000      	beq.n	4062bc <tcp_bind+0x1c>
  4062ba:	e7fe      	b.n	4062ba <tcp_bind+0x1a>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
  4062bc:	88fb      	ldrh	r3, [r7, #6]
  4062be:	2b00      	cmp	r3, #0
  4062c0:	d109      	bne.n	4062d6 <tcp_bind+0x36>
    port = tcp_new_port();
  4062c2:	4b2c      	ldr	r3, [pc, #176]	; (406374 <tcp_bind+0xd4>)
  4062c4:	4798      	blx	r3
  4062c6:	4603      	mov	r3, r0
  4062c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
  4062ca:	88fb      	ldrh	r3, [r7, #6]
  4062cc:	2b00      	cmp	r3, #0
  4062ce:	d102      	bne.n	4062d6 <tcp_bind+0x36>
      return ERR_BUF;
  4062d0:	f06f 0301 	mvn.w	r3, #1
  4062d4:	e04a      	b.n	40636c <tcp_bind+0xcc>
    }
  }

  /* Check if the address already is in use (on all lists) */
  for (i = 0; i < max_pcb_list; i++) {
  4062d6:	2300      	movs	r3, #0
  4062d8:	61fb      	str	r3, [r7, #28]
  4062da:	e02b      	b.n	406334 <tcp_bind+0x94>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  4062dc:	4a26      	ldr	r2, [pc, #152]	; (406378 <tcp_bind+0xd8>)
  4062de:	69fb      	ldr	r3, [r7, #28]
  4062e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4062e4:	681b      	ldr	r3, [r3, #0]
  4062e6:	61bb      	str	r3, [r7, #24]
  4062e8:	e01e      	b.n	406328 <tcp_bind+0x88>
      if (cpcb->local_port == port) {
  4062ea:	69bb      	ldr	r3, [r7, #24]
  4062ec:	8b5b      	ldrh	r3, [r3, #26]
  4062ee:	88fa      	ldrh	r2, [r7, #6]
  4062f0:	429a      	cmp	r2, r3
  4062f2:	d116      	bne.n	406322 <tcp_bind+0x82>
           tcp_connect. */
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          if (ip_addr_isany(&(cpcb->local_ip)) ||
  4062f4:	69bb      	ldr	r3, [r7, #24]
  4062f6:	2b00      	cmp	r3, #0
  4062f8:	d010      	beq.n	40631c <tcp_bind+0x7c>
  4062fa:	69bb      	ldr	r3, [r7, #24]
  4062fc:	681b      	ldr	r3, [r3, #0]
  4062fe:	2b00      	cmp	r3, #0
  406300:	d00c      	beq.n	40631c <tcp_bind+0x7c>
  406302:	68bb      	ldr	r3, [r7, #8]
  406304:	2b00      	cmp	r3, #0
  406306:	d009      	beq.n	40631c <tcp_bind+0x7c>
              ip_addr_isany(ipaddr) ||
  406308:	68bb      	ldr	r3, [r7, #8]
  40630a:	681b      	ldr	r3, [r3, #0]
  40630c:	2b00      	cmp	r3, #0
  40630e:	d005      	beq.n	40631c <tcp_bind+0x7c>
              ip_addr_cmp(&(cpcb->local_ip), ipaddr)) {
  406310:	69bb      	ldr	r3, [r7, #24]
  406312:	681a      	ldr	r2, [r3, #0]
  406314:	68bb      	ldr	r3, [r7, #8]
  406316:	681b      	ldr	r3, [r3, #0]
              ip_addr_isany(ipaddr) ||
  406318:	429a      	cmp	r2, r3
  40631a:	d102      	bne.n	406322 <tcp_bind+0x82>
            return ERR_USE;
  40631c:	f06f 0307 	mvn.w	r3, #7
  406320:	e024      	b.n	40636c <tcp_bind+0xcc>
    for(cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  406322:	69bb      	ldr	r3, [r7, #24]
  406324:	68db      	ldr	r3, [r3, #12]
  406326:	61bb      	str	r3, [r7, #24]
  406328:	69bb      	ldr	r3, [r7, #24]
  40632a:	2b00      	cmp	r3, #0
  40632c:	d1dd      	bne.n	4062ea <tcp_bind+0x4a>
  for (i = 0; i < max_pcb_list; i++) {
  40632e:	69fb      	ldr	r3, [r7, #28]
  406330:	3301      	adds	r3, #1
  406332:	61fb      	str	r3, [r7, #28]
  406334:	69fa      	ldr	r2, [r7, #28]
  406336:	697b      	ldr	r3, [r7, #20]
  406338:	429a      	cmp	r2, r3
  40633a:	dbcf      	blt.n	4062dc <tcp_bind+0x3c>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  40633c:	68bb      	ldr	r3, [r7, #8]
  40633e:	2b00      	cmp	r3, #0
  406340:	d007      	beq.n	406352 <tcp_bind+0xb2>
  406342:	68bb      	ldr	r3, [r7, #8]
  406344:	681b      	ldr	r3, [r3, #0]
  406346:	2b00      	cmp	r3, #0
  406348:	d003      	beq.n	406352 <tcp_bind+0xb2>
    pcb->local_ip = *ipaddr;
  40634a:	68fb      	ldr	r3, [r7, #12]
  40634c:	68ba      	ldr	r2, [r7, #8]
  40634e:	6812      	ldr	r2, [r2, #0]
  406350:	601a      	str	r2, [r3, #0]
  }
  pcb->local_port = port;
  406352:	68fb      	ldr	r3, [r7, #12]
  406354:	88fa      	ldrh	r2, [r7, #6]
  406356:	835a      	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  406358:	4b08      	ldr	r3, [pc, #32]	; (40637c <tcp_bind+0xdc>)
  40635a:	681a      	ldr	r2, [r3, #0]
  40635c:	68fb      	ldr	r3, [r7, #12]
  40635e:	60da      	str	r2, [r3, #12]
  406360:	4a06      	ldr	r2, [pc, #24]	; (40637c <tcp_bind+0xdc>)
  406362:	68fb      	ldr	r3, [r7, #12]
  406364:	6013      	str	r3, [r2, #0]
  406366:	4b06      	ldr	r3, [pc, #24]	; (406380 <tcp_bind+0xe0>)
  406368:	4798      	blx	r3
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  40636a:	2300      	movs	r3, #0
}
  40636c:	4618      	mov	r0, r3
  40636e:	3720      	adds	r7, #32
  406370:	46bd      	mov	sp, r7
  406372:	bd80      	pop	{r7, pc}
  406374:	004065b1 	.word	0x004065b1
  406378:	0040fb34 	.word	0x0040fb34
  40637c:	204049b0 	.word	0x204049b0
  406380:	00404d75 	.word	0x00404d75

00406384 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  406384:	b480      	push	{r7}
  406386:	b085      	sub	sp, #20
  406388:	af00      	add	r7, sp, #0
  40638a:	60f8      	str	r0, [r7, #12]
  40638c:	60b9      	str	r1, [r7, #8]
  40638e:	4613      	mov	r3, r2
  406390:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(err);

  return ERR_ABRT;
  406392:	f06f 0309 	mvn.w	r3, #9
}
  406396:	4618      	mov	r0, r3
  406398:	3714      	adds	r7, #20
  40639a:	46bd      	mov	sp, r7
  40639c:	f85d 7b04 	ldr.w	r7, [sp], #4
  4063a0:	4770      	bx	lr
	...

004063a4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen(tpcb);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  4063a4:	b580      	push	{r7, lr}
  4063a6:	b084      	sub	sp, #16
  4063a8:	af00      	add	r7, sp, #0
  4063aa:	6078      	str	r0, [r7, #4]
  4063ac:	460b      	mov	r3, r1
  4063ae:	70fb      	strb	r3, [r7, #3]
  struct tcp_pcb_listen *lpcb;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, return NULL);
  4063b0:	687b      	ldr	r3, [r7, #4]
  4063b2:	7e1b      	ldrb	r3, [r3, #24]
  4063b4:	2b00      	cmp	r3, #0
  4063b6:	d000      	beq.n	4063ba <tcp_listen_with_backlog+0x16>
  4063b8:	e7fe      	b.n	4063b8 <tcp_listen_with_backlog+0x14>

  /* already listening? */
  if (pcb->state == LISTEN) {
  4063ba:	687b      	ldr	r3, [r7, #4]
  4063bc:	7e1b      	ldrb	r3, [r3, #24]
  4063be:	2b01      	cmp	r3, #1
  4063c0:	d101      	bne.n	4063c6 <tcp_listen_with_backlog+0x22>
    return pcb;
  4063c2:	687b      	ldr	r3, [r7, #4]
  4063c4:	e06b      	b.n	40649e <tcp_listen_with_backlog+0xfa>
        }
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  4063c6:	2002      	movs	r0, #2
  4063c8:	4b37      	ldr	r3, [pc, #220]	; (4064a8 <tcp_listen_with_backlog+0x104>)
  4063ca:	4798      	blx	r3
  4063cc:	60f8      	str	r0, [r7, #12]
  if (lpcb == NULL) {
  4063ce:	68fb      	ldr	r3, [r7, #12]
  4063d0:	2b00      	cmp	r3, #0
  4063d2:	d101      	bne.n	4063d8 <tcp_listen_with_backlog+0x34>
    return NULL;
  4063d4:	2300      	movs	r3, #0
  4063d6:	e062      	b.n	40649e <tcp_listen_with_backlog+0xfa>
  }
  lpcb->callback_arg = pcb->callback_arg;
  4063d8:	687b      	ldr	r3, [r7, #4]
  4063da:	691a      	ldr	r2, [r3, #16]
  4063dc:	68fb      	ldr	r3, [r7, #12]
  4063de:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  4063e0:	687b      	ldr	r3, [r7, #4]
  4063e2:	8b5a      	ldrh	r2, [r3, #26]
  4063e4:	68fb      	ldr	r3, [r7, #12]
  4063e6:	835a      	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  4063e8:	68fb      	ldr	r3, [r7, #12]
  4063ea:	2201      	movs	r2, #1
  4063ec:	761a      	strb	r2, [r3, #24]
  lpcb->prio = pcb->prio;
  4063ee:	687b      	ldr	r3, [r7, #4]
  4063f0:	7e5a      	ldrb	r2, [r3, #25]
  4063f2:	68fb      	ldr	r3, [r7, #12]
  4063f4:	765a      	strb	r2, [r3, #25]
  lpcb->so_options = pcb->so_options;
  4063f6:	687b      	ldr	r3, [r7, #4]
  4063f8:	7a1a      	ldrb	r2, [r3, #8]
  4063fa:	68fb      	ldr	r3, [r7, #12]
  4063fc:	721a      	strb	r2, [r3, #8]
  ip_set_option(lpcb, SOF_ACCEPTCONN);
  4063fe:	68fb      	ldr	r3, [r7, #12]
  406400:	7a1b      	ldrb	r3, [r3, #8]
  406402:	f043 0302 	orr.w	r3, r3, #2
  406406:	b2da      	uxtb	r2, r3
  406408:	68fb      	ldr	r3, [r7, #12]
  40640a:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  40640c:	687b      	ldr	r3, [r7, #4]
  40640e:	7a9a      	ldrb	r2, [r3, #10]
  406410:	68fb      	ldr	r3, [r7, #12]
  406412:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  406414:	687b      	ldr	r3, [r7, #4]
  406416:	7a5a      	ldrb	r2, [r3, #9]
  406418:	68fb      	ldr	r3, [r7, #12]
  40641a:	725a      	strb	r2, [r3, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  40641c:	687b      	ldr	r3, [r7, #4]
  40641e:	681a      	ldr	r2, [r3, #0]
  406420:	68fb      	ldr	r3, [r7, #12]
  406422:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
  406424:	687b      	ldr	r3, [r7, #4]
  406426:	8b5b      	ldrh	r3, [r3, #26]
  406428:	2b00      	cmp	r3, #0
  40642a:	d027      	beq.n	40647c <tcp_listen_with_backlog+0xd8>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  40642c:	4b1f      	ldr	r3, [pc, #124]	; (4064ac <tcp_listen_with_backlog+0x108>)
  40642e:	681a      	ldr	r2, [r3, #0]
  406430:	687b      	ldr	r3, [r7, #4]
  406432:	429a      	cmp	r2, r3
  406434:	d105      	bne.n	406442 <tcp_listen_with_backlog+0x9e>
  406436:	4b1d      	ldr	r3, [pc, #116]	; (4064ac <tcp_listen_with_backlog+0x108>)
  406438:	681b      	ldr	r3, [r3, #0]
  40643a:	68db      	ldr	r3, [r3, #12]
  40643c:	4a1b      	ldr	r2, [pc, #108]	; (4064ac <tcp_listen_with_backlog+0x108>)
  40643e:	6013      	str	r3, [r2, #0]
  406440:	e019      	b.n	406476 <tcp_listen_with_backlog+0xd2>
  406442:	4b1a      	ldr	r3, [pc, #104]	; (4064ac <tcp_listen_with_backlog+0x108>)
  406444:	681b      	ldr	r3, [r3, #0]
  406446:	4a1a      	ldr	r2, [pc, #104]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  406448:	6013      	str	r3, [r2, #0]
  40644a:	e010      	b.n	40646e <tcp_listen_with_backlog+0xca>
  40644c:	4b18      	ldr	r3, [pc, #96]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  40644e:	681b      	ldr	r3, [r3, #0]
  406450:	68da      	ldr	r2, [r3, #12]
  406452:	687b      	ldr	r3, [r7, #4]
  406454:	429a      	cmp	r2, r3
  406456:	d105      	bne.n	406464 <tcp_listen_with_backlog+0xc0>
  406458:	4b15      	ldr	r3, [pc, #84]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  40645a:	681b      	ldr	r3, [r3, #0]
  40645c:	687a      	ldr	r2, [r7, #4]
  40645e:	68d2      	ldr	r2, [r2, #12]
  406460:	60da      	str	r2, [r3, #12]
  406462:	e008      	b.n	406476 <tcp_listen_with_backlog+0xd2>
  406464:	4b12      	ldr	r3, [pc, #72]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  406466:	681b      	ldr	r3, [r3, #0]
  406468:	68db      	ldr	r3, [r3, #12]
  40646a:	4a11      	ldr	r2, [pc, #68]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  40646c:	6013      	str	r3, [r2, #0]
  40646e:	4b10      	ldr	r3, [pc, #64]	; (4064b0 <tcp_listen_with_backlog+0x10c>)
  406470:	681b      	ldr	r3, [r3, #0]
  406472:	2b00      	cmp	r3, #0
  406474:	d1ea      	bne.n	40644c <tcp_listen_with_backlog+0xa8>
  406476:	687b      	ldr	r3, [r7, #4]
  406478:	2200      	movs	r2, #0
  40647a:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  40647c:	6879      	ldr	r1, [r7, #4]
  40647e:	2001      	movs	r0, #1
  406480:	4b0c      	ldr	r3, [pc, #48]	; (4064b4 <tcp_listen_with_backlog+0x110>)
  406482:	4798      	blx	r3
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  406484:	68fb      	ldr	r3, [r7, #12]
  406486:	4a0c      	ldr	r2, [pc, #48]	; (4064b8 <tcp_listen_with_backlog+0x114>)
  406488:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  lpcb->backlog = (backlog ? backlog : 1);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  40648a:	4b0c      	ldr	r3, [pc, #48]	; (4064bc <tcp_listen_with_backlog+0x118>)
  40648c:	681a      	ldr	r2, [r3, #0]
  40648e:	68fb      	ldr	r3, [r7, #12]
  406490:	60da      	str	r2, [r3, #12]
  406492:	4a0a      	ldr	r2, [pc, #40]	; (4064bc <tcp_listen_with_backlog+0x118>)
  406494:	68fb      	ldr	r3, [r7, #12]
  406496:	6013      	str	r3, [r2, #0]
  406498:	4b09      	ldr	r3, [pc, #36]	; (4064c0 <tcp_listen_with_backlog+0x11c>)
  40649a:	4798      	blx	r3
  return (struct tcp_pcb *)lpcb;
  40649c:	68fb      	ldr	r3, [r7, #12]
}
  40649e:	4618      	mov	r0, r3
  4064a0:	3710      	adds	r7, #16
  4064a2:	46bd      	mov	sp, r7
  4064a4:	bd80      	pop	{r7, pc}
  4064a6:	bf00      	nop
  4064a8:	004054a5 	.word	0x004054a5
  4064ac:	204049b0 	.word	0x204049b0
  4064b0:	204049ac 	.word	0x204049ac
  4064b4:	004054e5 	.word	0x004054e5
  4064b8:	00406385 	.word	0x00406385
  4064bc:	204049a8 	.word	0x204049a8
  4064c0:	00404d75 	.word	0x00404d75

004064c4 <tcp_update_rcv_ann_wnd>:
 *
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  4064c4:	b480      	push	{r7}
  4064c6:	b085      	sub	sp, #20
  4064c8:	af00      	add	r7, sp, #0
  4064ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  4064cc:	687b      	ldr	r3, [r7, #4]
  4064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4064d0:	687a      	ldr	r2, [r7, #4]
  4064d2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  4064d4:	4413      	add	r3, r2
  4064d6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  4064d8:	687b      	ldr	r3, [r7, #4]
  4064da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4064dc:	687a      	ldr	r2, [r7, #4]
  4064de:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  4064e0:	f240 51b4 	movw	r1, #1460	; 0x5b4
  4064e4:	428a      	cmp	r2, r1
  4064e6:	d802      	bhi.n	4064ee <tcp_update_rcv_ann_wnd+0x2a>
  4064e8:	687a      	ldr	r2, [r7, #4]
  4064ea:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
  4064ec:	e001      	b.n	4064f2 <tcp_update_rcv_ann_wnd+0x2e>
  4064ee:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4064f2:	4413      	add	r3, r2
  4064f4:	68fa      	ldr	r2, [r7, #12]
  4064f6:	1ad3      	subs	r3, r2, r3
  4064f8:	2b00      	cmp	r3, #0
  4064fa:	db08      	blt.n	40650e <tcp_update_rcv_ann_wnd+0x4a>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  4064fc:	687b      	ldr	r3, [r7, #4]
  4064fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  406500:	687b      	ldr	r3, [r7, #4]
  406502:	85da      	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  406504:	687b      	ldr	r3, [r7, #4]
  406506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406508:	68fa      	ldr	r2, [r7, #12]
  40650a:	1ad3      	subs	r3, r2, r3
  40650c:	e015      	b.n	40653a <tcp_update_rcv_ann_wnd+0x76>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  40650e:	687b      	ldr	r3, [r7, #4]
  406510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  406512:	687b      	ldr	r3, [r7, #4]
  406514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  406516:	1ad3      	subs	r3, r2, r3
  406518:	2b00      	cmp	r3, #0
  40651a:	dd03      	ble.n	406524 <tcp_update_rcv_ann_wnd+0x60>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  40651c:	687b      	ldr	r3, [r7, #4]
  40651e:	2200      	movs	r2, #0
  406520:	85da      	strh	r2, [r3, #46]	; 0x2e
  406522:	e009      	b.n	406538 <tcp_update_rcv_ann_wnd+0x74>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  406524:	687b      	ldr	r3, [r7, #4]
  406526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406528:	687b      	ldr	r3, [r7, #4]
  40652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40652c:	1ad3      	subs	r3, r2, r3
  40652e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
      pcb->rcv_ann_wnd = (u16_t)new_rcv_ann_wnd;
  406530:	68bb      	ldr	r3, [r7, #8]
  406532:	b29a      	uxth	r2, r3
  406534:	687b      	ldr	r3, [r7, #4]
  406536:	85da      	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  406538:	2300      	movs	r3, #0
  }
}
  40653a:	4618      	mov	r0, r3
  40653c:	3714      	adds	r7, #20
  40653e:	46bd      	mov	sp, r7
  406540:	f85d 7b04 	ldr.w	r7, [sp], #4
  406544:	4770      	bx	lr
	...

00406548 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  406548:	b580      	push	{r7, lr}
  40654a:	b084      	sub	sp, #16
  40654c:	af00      	add	r7, sp, #0
  40654e:	6078      	str	r0, [r7, #4]
  406550:	460b      	mov	r3, r1
  406552:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
    pcb->state != LISTEN);
  LWIP_ASSERT("tcp_recved: len would wrap rcv_wnd\n",
              len <= 0xffff - pcb->rcv_wnd );

  pcb->rcv_wnd += len;
  406554:	687b      	ldr	r3, [r7, #4]
  406556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  406558:	887b      	ldrh	r3, [r7, #2]
  40655a:	4413      	add	r3, r2
  40655c:	b29a      	uxth	r2, r3
  40655e:	687b      	ldr	r3, [r7, #4]
  406560:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND) {
  406562:	687b      	ldr	r3, [r7, #4]
  406564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406566:	f640 3268 	movw	r2, #2920	; 0xb68
  40656a:	4293      	cmp	r3, r2
  40656c:	d903      	bls.n	406576 <tcp_recved+0x2e>
    pcb->rcv_wnd = TCP_WND;
  40656e:	687b      	ldr	r3, [r7, #4]
  406570:	f640 3268 	movw	r2, #2920	; 0xb68
  406574:	859a      	strh	r2, [r3, #44]	; 0x2c
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  406576:	6878      	ldr	r0, [r7, #4]
  406578:	4b0b      	ldr	r3, [pc, #44]	; (4065a8 <tcp_recved+0x60>)
  40657a:	4798      	blx	r3
  40657c:	4603      	mov	r3, r0
  40657e:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  406580:	68fb      	ldr	r3, [r7, #12]
  406582:	f240 22d9 	movw	r2, #729	; 0x2d9
  406586:	4293      	cmp	r3, r2
  406588:	dd09      	ble.n	40659e <tcp_recved+0x56>
    tcp_ack_now(pcb);
  40658a:	687b      	ldr	r3, [r7, #4]
  40658c:	7f9b      	ldrb	r3, [r3, #30]
  40658e:	f043 0302 	orr.w	r3, r3, #2
  406592:	b2da      	uxtb	r2, r3
  406594:	687b      	ldr	r3, [r7, #4]
  406596:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  406598:	6878      	ldr	r0, [r7, #4]
  40659a:	4b04      	ldr	r3, [pc, #16]	; (4065ac <tcp_recved+0x64>)
  40659c:	4798      	blx	r3
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: recveived %"U16_F" bytes, wnd %"U16_F" (%"U16_F").\n",
         len, pcb->rcv_wnd, TCP_WND - pcb->rcv_wnd));
}
  40659e:	bf00      	nop
  4065a0:	3710      	adds	r7, #16
  4065a2:	46bd      	mov	sp, r7
  4065a4:	bd80      	pop	{r7, pc}
  4065a6:	bf00      	nop
  4065a8:	004064c5 	.word	0x004064c5
  4065ac:	00409e75 	.word	0x00409e75

004065b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  4065b0:	b480      	push	{r7}
  4065b2:	b083      	sub	sp, #12
  4065b4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
  4065b6:	2300      	movs	r3, #0
  4065b8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;
  
again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  4065ba:	4b1d      	ldr	r3, [pc, #116]	; (406630 <tcp_new_port+0x80>)
  4065bc:	881b      	ldrh	r3, [r3, #0]
  4065be:	1c5a      	adds	r2, r3, #1
  4065c0:	b291      	uxth	r1, r2
  4065c2:	4a1b      	ldr	r2, [pc, #108]	; (406630 <tcp_new_port+0x80>)
  4065c4:	8011      	strh	r1, [r2, #0]
  4065c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4065ca:	4293      	cmp	r3, r2
  4065cc:	d103      	bne.n	4065d6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  4065ce:	4b18      	ldr	r3, [pc, #96]	; (406630 <tcp_new_port+0x80>)
  4065d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  4065d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  4065d6:	2300      	movs	r3, #0
  4065d8:	71fb      	strb	r3, [r7, #7]
  4065da:	e01e      	b.n	40661a <tcp_new_port+0x6a>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  4065dc:	79fb      	ldrb	r3, [r7, #7]
  4065de:	4a15      	ldr	r2, [pc, #84]	; (406634 <tcp_new_port+0x84>)
  4065e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4065e4:	681b      	ldr	r3, [r3, #0]
  4065e6:	603b      	str	r3, [r7, #0]
  4065e8:	e011      	b.n	40660e <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
  4065ea:	683b      	ldr	r3, [r7, #0]
  4065ec:	8b5a      	ldrh	r2, [r3, #26]
  4065ee:	4b10      	ldr	r3, [pc, #64]	; (406630 <tcp_new_port+0x80>)
  4065f0:	881b      	ldrh	r3, [r3, #0]
  4065f2:	429a      	cmp	r2, r3
  4065f4:	d108      	bne.n	406608 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  4065f6:	88bb      	ldrh	r3, [r7, #4]
  4065f8:	3301      	adds	r3, #1
  4065fa:	80bb      	strh	r3, [r7, #4]
  4065fc:	88bb      	ldrh	r3, [r7, #4]
  4065fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  406602:	d3da      	bcc.n	4065ba <tcp_new_port+0xa>
          return 0;
  406604:	2300      	movs	r3, #0
  406606:	e00d      	b.n	406624 <tcp_new_port+0x74>
    for(pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  406608:	683b      	ldr	r3, [r7, #0]
  40660a:	68db      	ldr	r3, [r3, #12]
  40660c:	603b      	str	r3, [r7, #0]
  40660e:	683b      	ldr	r3, [r7, #0]
  406610:	2b00      	cmp	r3, #0
  406612:	d1ea      	bne.n	4065ea <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  406614:	79fb      	ldrb	r3, [r7, #7]
  406616:	3301      	adds	r3, #1
  406618:	71fb      	strb	r3, [r7, #7]
  40661a:	79fb      	ldrb	r3, [r7, #7]
  40661c:	2b03      	cmp	r3, #3
  40661e:	d9dd      	bls.n	4065dc <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  406620:	4b03      	ldr	r3, [pc, #12]	; (406630 <tcp_new_port+0x80>)
  406622:	881b      	ldrh	r3, [r3, #0]
}
  406624:	4618      	mov	r0, r3
  406626:	370c      	adds	r7, #12
  406628:	46bd      	mov	sp, r7
  40662a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40662e:	4770      	bx	lr
  406630:	2040000c 	.word	0x2040000c
  406634:	0040fb34 	.word	0x0040fb34

00406638 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  406638:	b580      	push	{r7, lr}
  40663a:	b088      	sub	sp, #32
  40663c:	af00      	add	r7, sp, #0
  40663e:	60f8      	str	r0, [r7, #12]
  406640:	60b9      	str	r1, [r7, #8]
  406642:	603b      	str	r3, [r7, #0]
  406644:	4613      	mov	r3, r2
  406646:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  406648:	68fb      	ldr	r3, [r7, #12]
  40664a:	7e1b      	ldrb	r3, [r3, #24]
  40664c:	2b00      	cmp	r3, #0
  40664e:	d000      	beq.n	406652 <tcp_connect+0x1a>
  406650:	e7fe      	b.n	406650 <tcp_connect+0x18>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  if (ipaddr != NULL) {
  406652:	68bb      	ldr	r3, [r7, #8]
  406654:	2b00      	cmp	r3, #0
  406656:	d00a      	beq.n	40666e <tcp_connect+0x36>
    pcb->remote_ip = *ipaddr;
  406658:	68fb      	ldr	r3, [r7, #12]
  40665a:	68ba      	ldr	r2, [r7, #8]
  40665c:	6812      	ldr	r2, [r2, #0]
  40665e:	605a      	str	r2, [r3, #4]
  } else {
    return ERR_VAL;
  }
  pcb->remote_port = port;
  406660:	68fb      	ldr	r3, [r7, #12]
  406662:	88fa      	ldrh	r2, [r7, #6]
  406664:	839a      	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&(pcb->local_ip))) {
  406666:	68fb      	ldr	r3, [r7, #12]
  406668:	2b00      	cmp	r3, #0
  40666a:	d007      	beq.n	40667c <tcp_connect+0x44>
  40666c:	e002      	b.n	406674 <tcp_connect+0x3c>
    return ERR_VAL;
  40666e:	f06f 0305 	mvn.w	r3, #5
  406672:	e0b2      	b.n	4067da <tcp_connect+0x1a2>
  if (ip_addr_isany(&(pcb->local_ip))) {
  406674:	68fb      	ldr	r3, [r7, #12]
  406676:	681b      	ldr	r3, [r3, #0]
  406678:	2b00      	cmp	r3, #0
  40667a:	d10f      	bne.n	40669c <tcp_connect+0x64>
    /* no local IP address set, yet. */
    struct netif *netif = ip_route(&(pcb->remote_ip));
  40667c:	68fb      	ldr	r3, [r7, #12]
  40667e:	3304      	adds	r3, #4
  406680:	4618      	mov	r0, r3
  406682:	4b58      	ldr	r3, [pc, #352]	; (4067e4 <tcp_connect+0x1ac>)
  406684:	4798      	blx	r3
  406686:	61f8      	str	r0, [r7, #28]
    if (netif == NULL) {
  406688:	69fb      	ldr	r3, [r7, #28]
  40668a:	2b00      	cmp	r3, #0
  40668c:	d102      	bne.n	406694 <tcp_connect+0x5c>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  40668e:	f06f 0303 	mvn.w	r3, #3
  406692:	e0a2      	b.n	4067da <tcp_connect+0x1a2>
    }
    /* Use the netif's IP address as local address. */
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  406694:	69fb      	ldr	r3, [r7, #28]
  406696:	685a      	ldr	r2, [r3, #4]
  406698:	68fb      	ldr	r3, [r7, #12]
  40669a:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
  40669c:	68fb      	ldr	r3, [r7, #12]
  40669e:	8b5b      	ldrh	r3, [r3, #26]
  4066a0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
  4066a2:	68fb      	ldr	r3, [r7, #12]
  4066a4:	8b5b      	ldrh	r3, [r3, #26]
  4066a6:	2b00      	cmp	r3, #0
  4066a8:	d10c      	bne.n	4066c4 <tcp_connect+0x8c>
    pcb->local_port = tcp_new_port();
  4066aa:	4b4f      	ldr	r3, [pc, #316]	; (4067e8 <tcp_connect+0x1b0>)
  4066ac:	4798      	blx	r3
  4066ae:	4603      	mov	r3, r0
  4066b0:	461a      	mov	r2, r3
  4066b2:	68fb      	ldr	r3, [r7, #12]
  4066b4:	835a      	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  4066b6:	68fb      	ldr	r3, [r7, #12]
  4066b8:	8b5b      	ldrh	r3, [r3, #26]
  4066ba:	2b00      	cmp	r3, #0
  4066bc:	d102      	bne.n	4066c4 <tcp_connect+0x8c>
      return ERR_BUF;
  4066be:	f06f 0301 	mvn.w	r3, #1
  4066c2:	e08a      	b.n	4067da <tcp_connect+0x1a2>
        }
      }
    }
  }
#endif /* SO_REUSE */
  iss = tcp_next_iss();
  4066c4:	4b49      	ldr	r3, [pc, #292]	; (4067ec <tcp_connect+0x1b4>)
  4066c6:	4798      	blx	r3
  4066c8:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
  4066ca:	68fb      	ldr	r3, [r7, #12]
  4066cc:	2200      	movs	r2, #0
  4066ce:	629a      	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  4066d0:	68fb      	ldr	r3, [r7, #12]
  4066d2:	697a      	ldr	r2, [r7, #20]
  4066d4:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  4066d6:	697b      	ldr	r3, [r7, #20]
  4066d8:	1e5a      	subs	r2, r3, #1
  4066da:	68fb      	ldr	r3, [r7, #12]
  4066dc:	649a      	str	r2, [r3, #72]	; 0x48
  pcb->snd_lbb = iss - 1;
  4066de:	697b      	ldr	r3, [r7, #20]
  4066e0:	1e5a      	subs	r2, r3, #1
  4066e2:	68fb      	ldr	r3, [r7, #12]
  4066e4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->rcv_wnd = TCP_WND;
  4066e6:	68fb      	ldr	r3, [r7, #12]
  4066e8:	f640 3268 	movw	r2, #2920	; 0xb68
  4066ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_wnd = TCP_WND;
  4066ee:	68fb      	ldr	r3, [r7, #12]
  4066f0:	f640 3268 	movw	r2, #2920	; 0xb68
  4066f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  4066f6:	68fb      	ldr	r3, [r7, #12]
  4066f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  4066fa:	68fb      	ldr	r3, [r7, #12]
  4066fc:	631a      	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  4066fe:	68fb      	ldr	r3, [r7, #12]
  406700:	f640 3268 	movw	r2, #2920	; 0xb68
  406704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  406708:	68fb      	ldr	r3, [r7, #12]
  40670a:	f44f 7206 	mov.w	r2, #536	; 0x218
  40670e:	86da      	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, ipaddr);
  406710:	68fb      	ldr	r3, [r7, #12]
  406712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406714:	68b9      	ldr	r1, [r7, #8]
  406716:	4618      	mov	r0, r3
  406718:	4b35      	ldr	r3, [pc, #212]	; (4067f0 <tcp_connect+0x1b8>)
  40671a:	4798      	blx	r3
  40671c:	4603      	mov	r3, r0
  40671e:	461a      	mov	r2, r3
  406720:	68fb      	ldr	r3, [r7, #12]
  406722:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  406724:	68fb      	ldr	r3, [r7, #12]
  406726:	2201      	movs	r2, #1
  406728:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pcb->ssthresh = pcb->mss * 10;
  40672c:	68fb      	ldr	r3, [r7, #12]
  40672e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406730:	461a      	mov	r2, r3
  406732:	0092      	lsls	r2, r2, #2
  406734:	4413      	add	r3, r2
  406736:	005b      	lsls	r3, r3, #1
  406738:	b29a      	uxth	r2, r3
  40673a:	68fb      	ldr	r3, [r7, #12]
  40673c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  406740:	68fb      	ldr	r3, [r7, #12]
  406742:	683a      	ldr	r2, [r7, #0]
  406744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  406748:	2102      	movs	r1, #2
  40674a:	68f8      	ldr	r0, [r7, #12]
  40674c:	4b29      	ldr	r3, [pc, #164]	; (4067f4 <tcp_connect+0x1bc>)
  40674e:	4798      	blx	r3
  406750:	4603      	mov	r3, r0
  406752:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
  406754:	f997 3013 	ldrsb.w	r3, [r7, #19]
  406758:	2b00      	cmp	r3, #0
  40675a:	d13c      	bne.n	4067d6 <tcp_connect+0x19e>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  40675c:	68fb      	ldr	r3, [r7, #12]
  40675e:	2202      	movs	r2, #2
  406760:	761a      	strb	r2, [r3, #24]
    if (old_local_port != 0) {
  406762:	8b7b      	ldrh	r3, [r7, #26]
  406764:	2b00      	cmp	r3, #0
  406766:	d027      	beq.n	4067b8 <tcp_connect+0x180>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  406768:	4b23      	ldr	r3, [pc, #140]	; (4067f8 <tcp_connect+0x1c0>)
  40676a:	681a      	ldr	r2, [r3, #0]
  40676c:	68fb      	ldr	r3, [r7, #12]
  40676e:	429a      	cmp	r2, r3
  406770:	d105      	bne.n	40677e <tcp_connect+0x146>
  406772:	4b21      	ldr	r3, [pc, #132]	; (4067f8 <tcp_connect+0x1c0>)
  406774:	681b      	ldr	r3, [r3, #0]
  406776:	68db      	ldr	r3, [r3, #12]
  406778:	4a1f      	ldr	r2, [pc, #124]	; (4067f8 <tcp_connect+0x1c0>)
  40677a:	6013      	str	r3, [r2, #0]
  40677c:	e019      	b.n	4067b2 <tcp_connect+0x17a>
  40677e:	4b1e      	ldr	r3, [pc, #120]	; (4067f8 <tcp_connect+0x1c0>)
  406780:	681b      	ldr	r3, [r3, #0]
  406782:	4a1e      	ldr	r2, [pc, #120]	; (4067fc <tcp_connect+0x1c4>)
  406784:	6013      	str	r3, [r2, #0]
  406786:	e010      	b.n	4067aa <tcp_connect+0x172>
  406788:	4b1c      	ldr	r3, [pc, #112]	; (4067fc <tcp_connect+0x1c4>)
  40678a:	681b      	ldr	r3, [r3, #0]
  40678c:	68da      	ldr	r2, [r3, #12]
  40678e:	68fb      	ldr	r3, [r7, #12]
  406790:	429a      	cmp	r2, r3
  406792:	d105      	bne.n	4067a0 <tcp_connect+0x168>
  406794:	4b19      	ldr	r3, [pc, #100]	; (4067fc <tcp_connect+0x1c4>)
  406796:	681b      	ldr	r3, [r3, #0]
  406798:	68fa      	ldr	r2, [r7, #12]
  40679a:	68d2      	ldr	r2, [r2, #12]
  40679c:	60da      	str	r2, [r3, #12]
  40679e:	e008      	b.n	4067b2 <tcp_connect+0x17a>
  4067a0:	4b16      	ldr	r3, [pc, #88]	; (4067fc <tcp_connect+0x1c4>)
  4067a2:	681b      	ldr	r3, [r3, #0]
  4067a4:	68db      	ldr	r3, [r3, #12]
  4067a6:	4a15      	ldr	r2, [pc, #84]	; (4067fc <tcp_connect+0x1c4>)
  4067a8:	6013      	str	r3, [r2, #0]
  4067aa:	4b14      	ldr	r3, [pc, #80]	; (4067fc <tcp_connect+0x1c4>)
  4067ac:	681b      	ldr	r3, [r3, #0]
  4067ae:	2b00      	cmp	r3, #0
  4067b0:	d1ea      	bne.n	406788 <tcp_connect+0x150>
  4067b2:	68fb      	ldr	r3, [r7, #12]
  4067b4:	2200      	movs	r2, #0
  4067b6:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  4067b8:	4b11      	ldr	r3, [pc, #68]	; (406800 <tcp_connect+0x1c8>)
  4067ba:	681a      	ldr	r2, [r3, #0]
  4067bc:	68fb      	ldr	r3, [r7, #12]
  4067be:	60da      	str	r2, [r3, #12]
  4067c0:	4a0f      	ldr	r2, [pc, #60]	; (406800 <tcp_connect+0x1c8>)
  4067c2:	68fb      	ldr	r3, [r7, #12]
  4067c4:	6013      	str	r3, [r2, #0]
  4067c6:	4b0f      	ldr	r3, [pc, #60]	; (406804 <tcp_connect+0x1cc>)
  4067c8:	4798      	blx	r3
  4067ca:	4b0f      	ldr	r3, [pc, #60]	; (406808 <tcp_connect+0x1d0>)
  4067cc:	2201      	movs	r2, #1
  4067ce:	701a      	strb	r2, [r3, #0]
    snmp_inc_tcpactiveopens();

    tcp_output(pcb);
  4067d0:	68f8      	ldr	r0, [r7, #12]
  4067d2:	4b0e      	ldr	r3, [pc, #56]	; (40680c <tcp_connect+0x1d4>)
  4067d4:	4798      	blx	r3
  }
  return ret;
  4067d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
  4067da:	4618      	mov	r0, r3
  4067dc:	3720      	adds	r7, #32
  4067de:	46bd      	mov	sp, r7
  4067e0:	bd80      	pop	{r7, pc}
  4067e2:	bf00      	nop
  4067e4:	00403edd 	.word	0x00403edd
  4067e8:	004065b1 	.word	0x004065b1
  4067ec:	00407345 	.word	0x00407345
  4067f0:	0040736d 	.word	0x0040736d
  4067f4:	00409c41 	.word	0x00409c41
  4067f8:	204049b0 	.word	0x204049b0
  4067fc:	204049ac 	.word	0x204049ac
  406800:	204049a0 	.word	0x204049a0
  406804:	00404d75 	.word	0x00404d75
  406808:	2040499c 	.word	0x2040499c
  40680c:	00409e75 	.word	0x00409e75

00406810 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  406810:	b5b0      	push	{r4, r5, r7, lr}
  406812:	b08a      	sub	sp, #40	; 0x28
  406814:	af02      	add	r7, sp, #8
  u16_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  406816:	2300      	movs	r3, #0
  406818:	757b      	strb	r3, [r7, #21]

  ++tcp_ticks;
  40681a:	4b7f      	ldr	r3, [pc, #508]	; (406a18 <tcp_slowtmr+0x208>)
  40681c:	681b      	ldr	r3, [r3, #0]
  40681e:	3301      	adds	r3, #1
  406820:	4a7d      	ldr	r2, [pc, #500]	; (406a18 <tcp_slowtmr+0x208>)
  406822:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
  406824:	4b7d      	ldr	r3, [pc, #500]	; (406a1c <tcp_slowtmr+0x20c>)
  406826:	781b      	ldrb	r3, [r3, #0]
  406828:	3301      	adds	r3, #1
  40682a:	b2da      	uxtb	r2, r3
  40682c:	4b7b      	ldr	r3, [pc, #492]	; (406a1c <tcp_slowtmr+0x20c>)
  40682e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  406830:	2300      	movs	r3, #0
  406832:	61bb      	str	r3, [r7, #24]
  pcb = tcp_active_pcbs;
  406834:	4b7a      	ldr	r3, [pc, #488]	; (406a20 <tcp_slowtmr+0x210>)
  406836:	681b      	ldr	r3, [r3, #0]
  406838:	61fb      	str	r3, [r7, #28]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  40683a:	e1d3      	b.n	406be4 <tcp_slowtmr+0x3d4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
    if (pcb->last_timer == tcp_timer_ctr) {
  40683c:	69fb      	ldr	r3, [r7, #28]
  40683e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  406842:	4b76      	ldr	r3, [pc, #472]	; (406a1c <tcp_slowtmr+0x20c>)
  406844:	781b      	ldrb	r3, [r3, #0]
  406846:	429a      	cmp	r2, r3
  406848:	d103      	bne.n	406852 <tcp_slowtmr+0x42>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  40684a:	69fb      	ldr	r3, [r7, #28]
  40684c:	68db      	ldr	r3, [r3, #12]
  40684e:	61fb      	str	r3, [r7, #28]
      continue;
  406850:	e1c8      	b.n	406be4 <tcp_slowtmr+0x3d4>
    }
    pcb->last_timer = tcp_timer_ctr;
  406852:	4b72      	ldr	r3, [pc, #456]	; (406a1c <tcp_slowtmr+0x20c>)
  406854:	781a      	ldrb	r2, [r3, #0]
  406856:	69fb      	ldr	r3, [r7, #28]
  406858:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  40685c:	2300      	movs	r3, #0
  40685e:	75fb      	strb	r3, [r7, #23]
    pcb_reset = 0;
  406860:	2300      	movs	r3, #0
  406862:	75bb      	strb	r3, [r7, #22]

    if (pcb->state == SYN_SENT && pcb->nrtx == TCP_SYNMAXRTX) {
  406864:	69fb      	ldr	r3, [r7, #28]
  406866:	7e1b      	ldrb	r3, [r3, #24]
  406868:	2b02      	cmp	r3, #2
  40686a:	d108      	bne.n	40687e <tcp_slowtmr+0x6e>
  40686c:	69fb      	ldr	r3, [r7, #28]
  40686e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  406872:	2b06      	cmp	r3, #6
  406874:	d103      	bne.n	40687e <tcp_slowtmr+0x6e>
      ++pcb_remove;
  406876:	7dfb      	ldrb	r3, [r7, #23]
  406878:	3301      	adds	r3, #1
  40687a:	75fb      	strb	r3, [r7, #23]
  40687c:	e093      	b.n	4069a6 <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx == TCP_MAXRTX) {
  40687e:	69fb      	ldr	r3, [r7, #28]
  406880:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  406884:	2b0c      	cmp	r3, #12
  406886:	d103      	bne.n	406890 <tcp_slowtmr+0x80>
      ++pcb_remove;
  406888:	7dfb      	ldrb	r3, [r7, #23]
  40688a:	3301      	adds	r3, #1
  40688c:	75fb      	strb	r3, [r7, #23]
  40688e:	e08a      	b.n	4069a6 <tcp_slowtmr+0x196>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  406890:	69fb      	ldr	r3, [r7, #28]
  406892:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  406896:	2b00      	cmp	r3, #0
  406898:	d027      	beq.n	4068ea <tcp_slowtmr+0xda>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        pcb->persist_cnt++;
  40689a:	69fb      	ldr	r3, [r7, #28]
  40689c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
  4068a0:	3301      	adds	r3, #1
  4068a2:	b2da      	uxtb	r2, r3
  4068a4:	69fb      	ldr	r3, [r7, #28]
  4068a6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        if (pcb->persist_cnt >= tcp_persist_backoff[pcb->persist_backoff-1]) {
  4068aa:	69fb      	ldr	r3, [r7, #28]
  4068ac:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
  4068b0:	69fb      	ldr	r3, [r7, #28]
  4068b2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  4068b6:	3b01      	subs	r3, #1
  4068b8:	495a      	ldr	r1, [pc, #360]	; (406a24 <tcp_slowtmr+0x214>)
  4068ba:	5ccb      	ldrb	r3, [r1, r3]
  4068bc:	429a      	cmp	r2, r3
  4068be:	d372      	bcc.n	4069a6 <tcp_slowtmr+0x196>
          pcb->persist_cnt = 0;
  4068c0:	69fb      	ldr	r3, [r7, #28]
  4068c2:	2200      	movs	r2, #0
  4068c4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  4068c8:	69fb      	ldr	r3, [r7, #28]
  4068ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  4068ce:	2b06      	cmp	r3, #6
  4068d0:	d807      	bhi.n	4068e2 <tcp_slowtmr+0xd2>
            pcb->persist_backoff++;
  4068d2:	69fb      	ldr	r3, [r7, #28]
  4068d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  4068d8:	3301      	adds	r3, #1
  4068da:	b2da      	uxtb	r2, r3
  4068dc:	69fb      	ldr	r3, [r7, #28]
  4068de:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
          }
          tcp_zero_window_probe(pcb);
  4068e2:	69f8      	ldr	r0, [r7, #28]
  4068e4:	4b50      	ldr	r3, [pc, #320]	; (406a28 <tcp_slowtmr+0x218>)
  4068e6:	4798      	blx	r3
  4068e8:	e05d      	b.n	4069a6 <tcp_slowtmr+0x196>
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if(pcb->rtime >= 0) {
  4068ea:	69fb      	ldr	r3, [r7, #28]
  4068ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  4068f0:	2b00      	cmp	r3, #0
  4068f2:	db08      	blt.n	406906 <tcp_slowtmr+0xf6>
          ++pcb->rtime;
  4068f4:	69fb      	ldr	r3, [r7, #28]
  4068f6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  4068fa:	b29b      	uxth	r3, r3
  4068fc:	3301      	adds	r3, #1
  4068fe:	b29b      	uxth	r3, r3
  406900:	b21a      	sxth	r2, r3
  406902:	69fb      	ldr	r3, [r7, #28]
  406904:	869a      	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  406906:	69fb      	ldr	r3, [r7, #28]
  406908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40690a:	2b00      	cmp	r3, #0
  40690c:	d04b      	beq.n	4069a6 <tcp_slowtmr+0x196>
  40690e:	69fb      	ldr	r3, [r7, #28]
  406910:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
  406914:	69fb      	ldr	r3, [r7, #28]
  406916:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  40691a:	429a      	cmp	r2, r3
  40691c:	db43      	blt.n	4069a6 <tcp_slowtmr+0x196>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  40691e:	69fb      	ldr	r3, [r7, #28]
  406920:	7e1b      	ldrb	r3, [r3, #24]
  406922:	2b02      	cmp	r3, #2
  406924:	d014      	beq.n	406950 <tcp_slowtmr+0x140>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[pcb->nrtx];
  406926:	69fb      	ldr	r3, [r7, #28]
  406928:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  40692c:	10db      	asrs	r3, r3, #3
  40692e:	b21b      	sxth	r3, r3
  406930:	461a      	mov	r2, r3
  406932:	69fb      	ldr	r3, [r7, #28]
  406934:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  406938:	4413      	add	r3, r2
  40693a:	69fa      	ldr	r2, [r7, #28]
  40693c:	f892 2046 	ldrb.w	r2, [r2, #70]	; 0x46
  406940:	4611      	mov	r1, r2
  406942:	4a3a      	ldr	r2, [pc, #232]	; (406a2c <tcp_slowtmr+0x21c>)
  406944:	5c52      	ldrb	r2, [r2, r1]
  406946:	4093      	lsls	r3, r2
  406948:	b21a      	sxth	r2, r3
  40694a:	69fb      	ldr	r3, [r7, #28]
  40694c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  406950:	69fb      	ldr	r3, [r7, #28]
  406952:	2200      	movs	r2, #0
  406954:	869a      	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  406956:	69fb      	ldr	r3, [r7, #28]
  406958:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  40695c:	69fb      	ldr	r3, [r7, #28]
  40695e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  406962:	4293      	cmp	r3, r2
  406964:	bf28      	it	cs
  406966:	4613      	movcs	r3, r2
  406968:	827b      	strh	r3, [r7, #18]
          pcb->ssthresh = eff_wnd >> 1;
  40696a:	8a7b      	ldrh	r3, [r7, #18]
  40696c:	085b      	lsrs	r3, r3, #1
  40696e:	b29a      	uxth	r2, r3
  406970:	69fb      	ldr	r3, [r7, #28]
  406972:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (pcb->mss << 1)) {
  406976:	69fb      	ldr	r3, [r7, #28]
  406978:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  40697c:	461a      	mov	r2, r3
  40697e:	69fb      	ldr	r3, [r7, #28]
  406980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  406982:	005b      	lsls	r3, r3, #1
  406984:	429a      	cmp	r2, r3
  406986:	da06      	bge.n	406996 <tcp_slowtmr+0x186>
            pcb->ssthresh = (pcb->mss << 1);
  406988:	69fb      	ldr	r3, [r7, #28]
  40698a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40698c:	005b      	lsls	r3, r3, #1
  40698e:	b29a      	uxth	r2, r3
  406990:	69fb      	ldr	r3, [r7, #28]
  406992:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  406996:	69fb      	ldr	r3, [r7, #28]
  406998:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  40699a:	69fb      	ldr	r3, [r7, #28]
  40699c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"U16_F"\n",
                                       pcb->cwnd, pcb->ssthresh));
 
          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  4069a0:	69f8      	ldr	r0, [r7, #28]
  4069a2:	4b23      	ldr	r3, [pc, #140]	; (406a30 <tcp_slowtmr+0x220>)
  4069a4:	4798      	blx	r3
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  4069a6:	69fb      	ldr	r3, [r7, #28]
  4069a8:	7e1b      	ldrb	r3, [r3, #24]
  4069aa:	2b06      	cmp	r3, #6
  4069ac:	d10f      	bne.n	4069ce <tcp_slowtmr+0x1be>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  4069ae:	69fb      	ldr	r3, [r7, #28]
  4069b0:	7f9b      	ldrb	r3, [r3, #30]
  4069b2:	f003 0310 	and.w	r3, r3, #16
  4069b6:	2b00      	cmp	r3, #0
  4069b8:	d009      	beq.n	4069ce <tcp_slowtmr+0x1be>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  4069ba:	4b17      	ldr	r3, [pc, #92]	; (406a18 <tcp_slowtmr+0x208>)
  4069bc:	681a      	ldr	r2, [r3, #0]
  4069be:	69fb      	ldr	r3, [r7, #28]
  4069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4069c2:	1ad3      	subs	r3, r2, r3
  4069c4:	2b28      	cmp	r3, #40	; 0x28
  4069c6:	d902      	bls.n	4069ce <tcp_slowtmr+0x1be>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  4069c8:	7dfb      	ldrb	r3, [r7, #23]
  4069ca:	3301      	adds	r3, #1
  4069cc:	75fb      	strb	r3, [r7, #23]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  4069ce:	69fb      	ldr	r3, [r7, #28]
  4069d0:	7a1b      	ldrb	r3, [r3, #8]
  4069d2:	f003 0308 	and.w	r3, r3, #8
  4069d6:	2b00      	cmp	r3, #0
  4069d8:	d051      	beq.n	406a7e <tcp_slowtmr+0x26e>
       ((pcb->state == ESTABLISHED) ||
  4069da:	69fb      	ldr	r3, [r7, #28]
  4069dc:	7e1b      	ldrb	r3, [r3, #24]
    if(ip_get_option(pcb, SOF_KEEPALIVE) &&
  4069de:	2b04      	cmp	r3, #4
  4069e0:	d003      	beq.n	4069ea <tcp_slowtmr+0x1da>
        (pcb->state == CLOSE_WAIT))) {
  4069e2:	69fb      	ldr	r3, [r7, #28]
  4069e4:	7e1b      	ldrb	r3, [r3, #24]
       ((pcb->state == ESTABLISHED) ||
  4069e6:	2b07      	cmp	r3, #7
  4069e8:	d149      	bne.n	406a7e <tcp_slowtmr+0x26e>
      if((u32_t)(tcp_ticks - pcb->tmr) >
  4069ea:	4b0b      	ldr	r3, [pc, #44]	; (406a18 <tcp_slowtmr+0x208>)
  4069ec:	681a      	ldr	r2, [r3, #0]
  4069ee:	69fb      	ldr	r3, [r7, #28]
  4069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4069f2:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  4069f4:	69fb      	ldr	r3, [r7, #28]
  4069f6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  4069fa:	4b0e      	ldr	r3, [pc, #56]	; (406a34 <tcp_slowtmr+0x224>)
  4069fc:	440b      	add	r3, r1
  4069fe:	490e      	ldr	r1, [pc, #56]	; (406a38 <tcp_slowtmr+0x228>)
  406a00:	fba1 1303 	umull	r1, r3, r1, r3
  406a04:	095b      	lsrs	r3, r3, #5
      if((u32_t)(tcp_ticks - pcb->tmr) >
  406a06:	429a      	cmp	r2, r3
  406a08:	d918      	bls.n	406a3c <tcp_slowtmr+0x22c>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to %"U16_F".%"U16_F".%"U16_F".%"U16_F".\n",
                                ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                                ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));
        
        ++pcb_remove;
  406a0a:	7dfb      	ldrb	r3, [r7, #23]
  406a0c:	3301      	adds	r3, #1
  406a0e:	75fb      	strb	r3, [r7, #23]
        ++pcb_reset;
  406a10:	7dbb      	ldrb	r3, [r7, #22]
  406a12:	3301      	adds	r3, #1
  406a14:	75bb      	strb	r3, [r7, #22]
  406a16:	e032      	b.n	406a7e <tcp_slowtmr+0x26e>
  406a18:	204049a4 	.word	0x204049a4
  406a1c:	204025cd 	.word	0x204025cd
  406a20:	204049a0 	.word	0x204049a0
  406a24:	0040fb2c 	.word	0x0040fb2c
  406a28:	0040a5e5 	.word	0x0040a5e5
  406a2c:	0040fb1c 	.word	0x0040fb1c
  406a30:	0040a3ad 	.word	0x0040a3ad
  406a34:	000a4cb8 	.word	0x000a4cb8
  406a38:	10624dd3 	.word	0x10624dd3
      }
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  406a3c:	4b88      	ldr	r3, [pc, #544]	; (406c60 <tcp_slowtmr+0x450>)
  406a3e:	681a      	ldr	r2, [r3, #0]
  406a40:	69fb      	ldr	r3, [r7, #28]
  406a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406a44:	1ad2      	subs	r2, r2, r3
              (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  406a46:	69fb      	ldr	r3, [r7, #28]
  406a48:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
  406a4c:	69fb      	ldr	r3, [r7, #28]
  406a4e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  406a52:	4618      	mov	r0, r3
  406a54:	4b83      	ldr	r3, [pc, #524]	; (406c64 <tcp_slowtmr+0x454>)
  406a56:	fb03 f300 	mul.w	r3, r3, r0
  406a5a:	440b      	add	r3, r1
              / TCP_SLOW_INTERVAL)
  406a5c:	4982      	ldr	r1, [pc, #520]	; (406c68 <tcp_slowtmr+0x458>)
  406a5e:	fba1 1303 	umull	r1, r3, r1, r3
  406a62:	095b      	lsrs	r3, r3, #5
      else if((u32_t)(tcp_ticks - pcb->tmr) > 
  406a64:	429a      	cmp	r2, r3
  406a66:	d90a      	bls.n	406a7e <tcp_slowtmr+0x26e>
      {
        tcp_keepalive(pcb);
  406a68:	69f8      	ldr	r0, [r7, #28]
  406a6a:	4b80      	ldr	r3, [pc, #512]	; (406c6c <tcp_slowtmr+0x45c>)
  406a6c:	4798      	blx	r3
        pcb->keep_cnt_sent++;
  406a6e:	69fb      	ldr	r3, [r7, #28]
  406a70:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
  406a74:	3301      	adds	r3, #1
  406a76:	b2da      	uxtb	r2, r3
  406a78:	69fb      	ldr	r3, [r7, #28]
  406a7a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  406a7e:	69fb      	ldr	r3, [r7, #28]
  406a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406a82:	2b00      	cmp	r3, #0
  406a84:	d016      	beq.n	406ab4 <tcp_slowtmr+0x2a4>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  406a86:	4b76      	ldr	r3, [pc, #472]	; (406c60 <tcp_slowtmr+0x450>)
  406a88:	681a      	ldr	r2, [r3, #0]
  406a8a:	69fb      	ldr	r3, [r7, #28]
  406a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406a8e:	1ad2      	subs	r2, r2, r3
  406a90:	69fb      	ldr	r3, [r7, #28]
  406a92:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
  406a96:	4619      	mov	r1, r3
  406a98:	460b      	mov	r3, r1
  406a9a:	005b      	lsls	r3, r3, #1
  406a9c:	440b      	add	r3, r1
  406a9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
  406aa0:	429a      	cmp	r2, r3
  406aa2:	d307      	bcc.n	406ab4 <tcp_slowtmr+0x2a4>
      tcp_segs_free(pcb->ooseq);
  406aa4:	69fb      	ldr	r3, [r7, #28]
  406aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  406aa8:	4618      	mov	r0, r3
  406aaa:	4b71      	ldr	r3, [pc, #452]	; (406c70 <tcp_slowtmr+0x460>)
  406aac:	4798      	blx	r3
      pcb->ooseq = NULL;
  406aae:	69fb      	ldr	r3, [r7, #28]
  406ab0:	2200      	movs	r2, #0
  406ab2:	675a      	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  406ab4:	69fb      	ldr	r3, [r7, #28]
  406ab6:	7e1b      	ldrb	r3, [r3, #24]
  406ab8:	2b03      	cmp	r3, #3
  406aba:	d109      	bne.n	406ad0 <tcp_slowtmr+0x2c0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  406abc:	4b68      	ldr	r3, [pc, #416]	; (406c60 <tcp_slowtmr+0x450>)
  406abe:	681a      	ldr	r2, [r3, #0]
  406ac0:	69fb      	ldr	r3, [r7, #28]
  406ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406ac4:	1ad3      	subs	r3, r2, r3
  406ac6:	2b28      	cmp	r3, #40	; 0x28
  406ac8:	d902      	bls.n	406ad0 <tcp_slowtmr+0x2c0>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  406aca:	7dfb      	ldrb	r3, [r7, #23]
  406acc:	3301      	adds	r3, #1
  406ace:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  406ad0:	69fb      	ldr	r3, [r7, #28]
  406ad2:	7e1b      	ldrb	r3, [r3, #24]
  406ad4:	2b09      	cmp	r3, #9
  406ad6:	d109      	bne.n	406aec <tcp_slowtmr+0x2dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406ad8:	4b61      	ldr	r3, [pc, #388]	; (406c60 <tcp_slowtmr+0x450>)
  406ada:	681a      	ldr	r2, [r3, #0]
  406adc:	69fb      	ldr	r3, [r7, #28]
  406ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406ae0:	1ad3      	subs	r3, r2, r3
  406ae2:	2bf0      	cmp	r3, #240	; 0xf0
  406ae4:	d902      	bls.n	406aec <tcp_slowtmr+0x2dc>
        ++pcb_remove;
  406ae6:	7dfb      	ldrb	r3, [r7, #23]
  406ae8:	3301      	adds	r3, #1
  406aea:	75fb      	strb	r3, [r7, #23]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  406aec:	7dfb      	ldrb	r3, [r7, #23]
  406aee:	2b00      	cmp	r3, #0
  406af0:	d042      	beq.n	406b78 <tcp_slowtmr+0x368>
      struct tcp_pcb *pcb2;
      tcp_err_fn err_fn;
      void *err_arg;
      tcp_pcb_purge(pcb);
  406af2:	69f8      	ldr	r0, [r7, #28]
  406af4:	4b5f      	ldr	r3, [pc, #380]	; (406c74 <tcp_slowtmr+0x464>)
  406af6:	4798      	blx	r3
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  406af8:	69bb      	ldr	r3, [r7, #24]
  406afa:	2b00      	cmp	r3, #0
  406afc:	d004      	beq.n	406b08 <tcp_slowtmr+0x2f8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
        prev->next = pcb->next;
  406afe:	69fb      	ldr	r3, [r7, #28]
  406b00:	68da      	ldr	r2, [r3, #12]
  406b02:	69bb      	ldr	r3, [r7, #24]
  406b04:	60da      	str	r2, [r3, #12]
  406b06:	e003      	b.n	406b10 <tcp_slowtmr+0x300>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
        tcp_active_pcbs = pcb->next;
  406b08:	69fb      	ldr	r3, [r7, #28]
  406b0a:	68db      	ldr	r3, [r3, #12]
  406b0c:	4a5a      	ldr	r2, [pc, #360]	; (406c78 <tcp_slowtmr+0x468>)
  406b0e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
  406b10:	7dbb      	ldrb	r3, [r7, #22]
  406b12:	2b00      	cmp	r3, #0
  406b14:	d010      	beq.n	406b38 <tcp_slowtmr+0x328>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  406b16:	69fb      	ldr	r3, [r7, #28]
  406b18:	6d18      	ldr	r0, [r3, #80]	; 0x50
  406b1a:	69fb      	ldr	r3, [r7, #28]
  406b1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  406b1e:	69fc      	ldr	r4, [r7, #28]
  406b20:	69fb      	ldr	r3, [r7, #28]
  406b22:	1d1d      	adds	r5, r3, #4
  406b24:	69fb      	ldr	r3, [r7, #28]
  406b26:	8b5b      	ldrh	r3, [r3, #26]
  406b28:	69fa      	ldr	r2, [r7, #28]
  406b2a:	8b92      	ldrh	r2, [r2, #28]
  406b2c:	9201      	str	r2, [sp, #4]
  406b2e:	9300      	str	r3, [sp, #0]
  406b30:	462b      	mov	r3, r5
  406b32:	4622      	mov	r2, r4
  406b34:	4c51      	ldr	r4, [pc, #324]	; (406c7c <tcp_slowtmr+0x46c>)
  406b36:	47a0      	blx	r4
          pcb->local_port, pcb->remote_port);
      }

      err_fn = pcb->errf;
  406b38:	69fb      	ldr	r3, [r7, #28]
  406b3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  406b3e:	60fb      	str	r3, [r7, #12]
      err_arg = pcb->callback_arg;
  406b40:	69fb      	ldr	r3, [r7, #28]
  406b42:	691b      	ldr	r3, [r3, #16]
  406b44:	60bb      	str	r3, [r7, #8]
      pcb2 = pcb;
  406b46:	69fb      	ldr	r3, [r7, #28]
  406b48:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
  406b4a:	69fb      	ldr	r3, [r7, #28]
  406b4c:	68db      	ldr	r3, [r3, #12]
  406b4e:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  406b50:	6879      	ldr	r1, [r7, #4]
  406b52:	2001      	movs	r0, #1
  406b54:	4b4a      	ldr	r3, [pc, #296]	; (406c80 <tcp_slowtmr+0x470>)
  406b56:	4798      	blx	r3

      tcp_active_pcbs_changed = 0;
  406b58:	4b4a      	ldr	r3, [pc, #296]	; (406c84 <tcp_slowtmr+0x474>)
  406b5a:	2200      	movs	r2, #0
  406b5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(err_fn, err_arg, ERR_ABRT);
  406b5e:	68fb      	ldr	r3, [r7, #12]
  406b60:	2b00      	cmp	r3, #0
  406b62:	d004      	beq.n	406b6e <tcp_slowtmr+0x35e>
  406b64:	68fb      	ldr	r3, [r7, #12]
  406b66:	f06f 0109 	mvn.w	r1, #9
  406b6a:	68b8      	ldr	r0, [r7, #8]
  406b6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
  406b6e:	4b45      	ldr	r3, [pc, #276]	; (406c84 <tcp_slowtmr+0x474>)
  406b70:	781b      	ldrb	r3, [r3, #0]
  406b72:	2b00      	cmp	r3, #0
  406b74:	d036      	beq.n	406be4 <tcp_slowtmr+0x3d4>
        goto tcp_slowtmr_start;
  406b76:	e65b      	b.n	406830 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  406b78:	69fb      	ldr	r3, [r7, #28]
  406b7a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  406b7c:	69fb      	ldr	r3, [r7, #28]
  406b7e:	68db      	ldr	r3, [r3, #12]
  406b80:	61fb      	str	r3, [r7, #28]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  406b82:	69bb      	ldr	r3, [r7, #24]
  406b84:	7fdb      	ldrb	r3, [r3, #31]
  406b86:	3301      	adds	r3, #1
  406b88:	b2da      	uxtb	r2, r3
  406b8a:	69bb      	ldr	r3, [r7, #24]
  406b8c:	77da      	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  406b8e:	69bb      	ldr	r3, [r7, #24]
  406b90:	7fda      	ldrb	r2, [r3, #31]
  406b92:	69bb      	ldr	r3, [r7, #24]
  406b94:	f893 3020 	ldrb.w	r3, [r3, #32]
  406b98:	429a      	cmp	r2, r3
  406b9a:	d323      	bcc.n	406be4 <tcp_slowtmr+0x3d4>
        prev->polltmr = 0;
  406b9c:	69bb      	ldr	r3, [r7, #24]
  406b9e:	2200      	movs	r2, #0
  406ba0:	77da      	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  406ba2:	4b38      	ldr	r3, [pc, #224]	; (406c84 <tcp_slowtmr+0x474>)
  406ba4:	2200      	movs	r2, #0
  406ba6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
  406ba8:	69bb      	ldr	r3, [r7, #24]
  406baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  406bae:	2b00      	cmp	r3, #0
  406bb0:	d00a      	beq.n	406bc8 <tcp_slowtmr+0x3b8>
  406bb2:	69bb      	ldr	r3, [r7, #24]
  406bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
  406bb8:	69ba      	ldr	r2, [r7, #24]
  406bba:	6912      	ldr	r2, [r2, #16]
  406bbc:	69b9      	ldr	r1, [r7, #24]
  406bbe:	4610      	mov	r0, r2
  406bc0:	4798      	blx	r3
  406bc2:	4603      	mov	r3, r0
  406bc4:	757b      	strb	r3, [r7, #21]
  406bc6:	e001      	b.n	406bcc <tcp_slowtmr+0x3bc>
  406bc8:	2300      	movs	r3, #0
  406bca:	757b      	strb	r3, [r7, #21]
        if (tcp_active_pcbs_changed) {
  406bcc:	4b2d      	ldr	r3, [pc, #180]	; (406c84 <tcp_slowtmr+0x474>)
  406bce:	781b      	ldrb	r3, [r3, #0]
  406bd0:	2b00      	cmp	r3, #0
  406bd2:	d000      	beq.n	406bd6 <tcp_slowtmr+0x3c6>
          goto tcp_slowtmr_start;
  406bd4:	e62c      	b.n	406830 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  406bd6:	f997 3015 	ldrsb.w	r3, [r7, #21]
  406bda:	2b00      	cmp	r3, #0
  406bdc:	d102      	bne.n	406be4 <tcp_slowtmr+0x3d4>
          tcp_output(prev);
  406bde:	69b8      	ldr	r0, [r7, #24]
  406be0:	4b29      	ldr	r3, [pc, #164]	; (406c88 <tcp_slowtmr+0x478>)
  406be2:	4798      	blx	r3
  while (pcb != NULL) {
  406be4:	69fb      	ldr	r3, [r7, #28]
  406be6:	2b00      	cmp	r3, #0
  406be8:	f47f ae28 	bne.w	40683c <tcp_slowtmr+0x2c>
    }
  }

  
  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  406bec:	2300      	movs	r3, #0
  406bee:	61bb      	str	r3, [r7, #24]
  pcb = tcp_tw_pcbs;
  406bf0:	4b26      	ldr	r3, [pc, #152]	; (406c8c <tcp_slowtmr+0x47c>)
  406bf2:	681b      	ldr	r3, [r3, #0]
  406bf4:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
  406bf6:	e02c      	b.n	406c52 <tcp_slowtmr+0x442>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
    pcb_remove = 0;
  406bf8:	2300      	movs	r3, #0
  406bfa:	75fb      	strb	r3, [r7, #23]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  406bfc:	4b18      	ldr	r3, [pc, #96]	; (406c60 <tcp_slowtmr+0x450>)
  406bfe:	681a      	ldr	r2, [r3, #0]
  406c00:	69fb      	ldr	r3, [r7, #28]
  406c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406c04:	1ad3      	subs	r3, r2, r3
  406c06:	2bf0      	cmp	r3, #240	; 0xf0
  406c08:	d902      	bls.n	406c10 <tcp_slowtmr+0x400>
      ++pcb_remove;
  406c0a:	7dfb      	ldrb	r3, [r7, #23]
  406c0c:	3301      	adds	r3, #1
  406c0e:	75fb      	strb	r3, [r7, #23]
    }
    


    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  406c10:	7dfb      	ldrb	r3, [r7, #23]
  406c12:	2b00      	cmp	r3, #0
  406c14:	d018      	beq.n	406c48 <tcp_slowtmr+0x438>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  406c16:	69f8      	ldr	r0, [r7, #28]
  406c18:	4b16      	ldr	r3, [pc, #88]	; (406c74 <tcp_slowtmr+0x464>)
  406c1a:	4798      	blx	r3
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  406c1c:	69bb      	ldr	r3, [r7, #24]
  406c1e:	2b00      	cmp	r3, #0
  406c20:	d004      	beq.n	406c2c <tcp_slowtmr+0x41c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
        prev->next = pcb->next;
  406c22:	69fb      	ldr	r3, [r7, #28]
  406c24:	68da      	ldr	r2, [r3, #12]
  406c26:	69bb      	ldr	r3, [r7, #24]
  406c28:	60da      	str	r2, [r3, #12]
  406c2a:	e003      	b.n	406c34 <tcp_slowtmr+0x424>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
        tcp_tw_pcbs = pcb->next;
  406c2c:	69fb      	ldr	r3, [r7, #28]
  406c2e:	68db      	ldr	r3, [r3, #12]
  406c30:	4a16      	ldr	r2, [pc, #88]	; (406c8c <tcp_slowtmr+0x47c>)
  406c32:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
  406c34:	69fb      	ldr	r3, [r7, #28]
  406c36:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
  406c38:	69fb      	ldr	r3, [r7, #28]
  406c3a:	68db      	ldr	r3, [r3, #12]
  406c3c:	61fb      	str	r3, [r7, #28]
      memp_free(MEMP_TCP_PCB, pcb2);
  406c3e:	6839      	ldr	r1, [r7, #0]
  406c40:	2001      	movs	r0, #1
  406c42:	4b0f      	ldr	r3, [pc, #60]	; (406c80 <tcp_slowtmr+0x470>)
  406c44:	4798      	blx	r3
  406c46:	e004      	b.n	406c52 <tcp_slowtmr+0x442>
    } else {
      prev = pcb;
  406c48:	69fb      	ldr	r3, [r7, #28]
  406c4a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
  406c4c:	69fb      	ldr	r3, [r7, #28]
  406c4e:	68db      	ldr	r3, [r3, #12]
  406c50:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
  406c52:	69fb      	ldr	r3, [r7, #28]
  406c54:	2b00      	cmp	r3, #0
  406c56:	d1cf      	bne.n	406bf8 <tcp_slowtmr+0x3e8>
    }
  }
}
  406c58:	bf00      	nop
  406c5a:	3720      	adds	r7, #32
  406c5c:	46bd      	mov	sp, r7
  406c5e:	bdb0      	pop	{r4, r5, r7, pc}
  406c60:	204049a4 	.word	0x204049a4
  406c64:	000124f8 	.word	0x000124f8
  406c68:	10624dd3 	.word	0x10624dd3
  406c6c:	0040a55d 	.word	0x0040a55d
  406c70:	00406e11 	.word	0x00406e11
  406c74:	0040720d 	.word	0x0040720d
  406c78:	204049a0 	.word	0x204049a0
  406c7c:	0040a2c1 	.word	0x0040a2c1
  406c80:	004054e5 	.word	0x004054e5
  406c84:	2040499c 	.word	0x2040499c
  406c88:	00409e75 	.word	0x00409e75
  406c8c:	204049b4 	.word	0x204049b4

00406c90 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  406c90:	b580      	push	{r7, lr}
  406c92:	b082      	sub	sp, #8
  406c94:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  406c96:	4b24      	ldr	r3, [pc, #144]	; (406d28 <tcp_fasttmr+0x98>)
  406c98:	781b      	ldrb	r3, [r3, #0]
  406c9a:	3301      	adds	r3, #1
  406c9c:	b2da      	uxtb	r2, r3
  406c9e:	4b22      	ldr	r3, [pc, #136]	; (406d28 <tcp_fasttmr+0x98>)
  406ca0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  406ca2:	4b22      	ldr	r3, [pc, #136]	; (406d2c <tcp_fasttmr+0x9c>)
  406ca4:	681b      	ldr	r3, [r3, #0]
  406ca6:	607b      	str	r3, [r7, #4]

  while(pcb != NULL) {
  406ca8:	e036      	b.n	406d18 <tcp_fasttmr+0x88>
    if (pcb->last_timer != tcp_timer_ctr) {
  406caa:	687b      	ldr	r3, [r7, #4]
  406cac:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
  406cb0:	4b1d      	ldr	r3, [pc, #116]	; (406d28 <tcp_fasttmr+0x98>)
  406cb2:	781b      	ldrb	r3, [r3, #0]
  406cb4:	429a      	cmp	r2, r3
  406cb6:	d02f      	beq.n	406d18 <tcp_fasttmr+0x88>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  406cb8:	4b1b      	ldr	r3, [pc, #108]	; (406d28 <tcp_fasttmr+0x98>)
  406cba:	781a      	ldrb	r2, [r3, #0]
  406cbc:	687b      	ldr	r3, [r7, #4]
  406cbe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  406cc2:	687b      	ldr	r3, [r7, #4]
  406cc4:	7f9b      	ldrb	r3, [r3, #30]
  406cc6:	f003 0301 	and.w	r3, r3, #1
  406cca:	2b00      	cmp	r3, #0
  406ccc:	d010      	beq.n	406cf0 <tcp_fasttmr+0x60>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  406cce:	687b      	ldr	r3, [r7, #4]
  406cd0:	7f9b      	ldrb	r3, [r3, #30]
  406cd2:	f043 0302 	orr.w	r3, r3, #2
  406cd6:	b2da      	uxtb	r2, r3
  406cd8:	687b      	ldr	r3, [r7, #4]
  406cda:	779a      	strb	r2, [r3, #30]
        tcp_output(pcb);
  406cdc:	6878      	ldr	r0, [r7, #4]
  406cde:	4b14      	ldr	r3, [pc, #80]	; (406d30 <tcp_fasttmr+0xa0>)
  406ce0:	4798      	blx	r3
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  406ce2:	687b      	ldr	r3, [r7, #4]
  406ce4:	7f9b      	ldrb	r3, [r3, #30]
  406ce6:	f023 0303 	bic.w	r3, r3, #3
  406cea:	b2da      	uxtb	r2, r3
  406cec:	687b      	ldr	r3, [r7, #4]
  406cee:	779a      	strb	r2, [r3, #30]
      }

      next = pcb->next;
  406cf0:	687b      	ldr	r3, [r7, #4]
  406cf2:	68db      	ldr	r3, [r3, #12]
  406cf4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  406cf6:	687b      	ldr	r3, [r7, #4]
  406cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406cfa:	2b00      	cmp	r3, #0
  406cfc:	d00a      	beq.n	406d14 <tcp_fasttmr+0x84>
        tcp_active_pcbs_changed = 0;
  406cfe:	4b0d      	ldr	r3, [pc, #52]	; (406d34 <tcp_fasttmr+0xa4>)
  406d00:	2200      	movs	r2, #0
  406d02:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
  406d04:	6878      	ldr	r0, [r7, #4]
  406d06:	4b0c      	ldr	r3, [pc, #48]	; (406d38 <tcp_fasttmr+0xa8>)
  406d08:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
  406d0a:	4b0a      	ldr	r3, [pc, #40]	; (406d34 <tcp_fasttmr+0xa4>)
  406d0c:	781b      	ldrb	r3, [r3, #0]
  406d0e:	2b00      	cmp	r3, #0
  406d10:	d000      	beq.n	406d14 <tcp_fasttmr+0x84>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  406d12:	e7c6      	b.n	406ca2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
  406d14:	683b      	ldr	r3, [r7, #0]
  406d16:	607b      	str	r3, [r7, #4]
  while(pcb != NULL) {
  406d18:	687b      	ldr	r3, [r7, #4]
  406d1a:	2b00      	cmp	r3, #0
  406d1c:	d1c5      	bne.n	406caa <tcp_fasttmr+0x1a>
    }
  }
}
  406d1e:	bf00      	nop
  406d20:	3708      	adds	r7, #8
  406d22:	46bd      	mov	sp, r7
  406d24:	bd80      	pop	{r7, pc}
  406d26:	bf00      	nop
  406d28:	204025cd 	.word	0x204025cd
  406d2c:	204049a0 	.word	0x204049a0
  406d30:	00409e75 	.word	0x00409e75
  406d34:	2040499c 	.word	0x2040499c
  406d38:	00406d3d 	.word	0x00406d3d

00406d3c <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  406d3c:	b590      	push	{r4, r7, lr}
  406d3e:	b085      	sub	sp, #20
  406d40:	af00      	add	r7, sp, #0
  406d42:	6078      	str	r0, [r7, #4]
  err_t err;
  u8_t refused_flags = pcb->refused_data->flags;
  406d44:	687b      	ldr	r3, [r7, #4]
  406d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406d48:	7b5b      	ldrb	r3, [r3, #13]
  406d4a:	73bb      	strb	r3, [r7, #14]
  /* set pcb->refused_data to NULL in case the callback frees it and then
     closes the pcb */
  struct pbuf *refused_data = pcb->refused_data;
  406d4c:	687b      	ldr	r3, [r7, #4]
  406d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  406d50:	60bb      	str	r3, [r7, #8]
  pcb->refused_data = NULL;
  406d52:	687b      	ldr	r3, [r7, #4]
  406d54:	2200      	movs	r2, #0
  406d56:	679a      	str	r2, [r3, #120]	; 0x78
  /* Notify again application with data previously received. */
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
  TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  406d58:	687b      	ldr	r3, [r7, #4]
  406d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  406d5e:	2b00      	cmp	r3, #0
  406d60:	d00b      	beq.n	406d7a <tcp_process_refused_data+0x3e>
  406d62:	687b      	ldr	r3, [r7, #4]
  406d64:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  406d68:	687b      	ldr	r3, [r7, #4]
  406d6a:	6918      	ldr	r0, [r3, #16]
  406d6c:	2300      	movs	r3, #0
  406d6e:	68ba      	ldr	r2, [r7, #8]
  406d70:	6879      	ldr	r1, [r7, #4]
  406d72:	47a0      	blx	r4
  406d74:	4603      	mov	r3, r0
  406d76:	73fb      	strb	r3, [r7, #15]
  406d78:	e007      	b.n	406d8a <tcp_process_refused_data+0x4e>
  406d7a:	2300      	movs	r3, #0
  406d7c:	68ba      	ldr	r2, [r7, #8]
  406d7e:	6879      	ldr	r1, [r7, #4]
  406d80:	2000      	movs	r0, #0
  406d82:	4c22      	ldr	r4, [pc, #136]	; (406e0c <tcp_process_refused_data+0xd0>)
  406d84:	47a0      	blx	r4
  406d86:	4603      	mov	r3, r0
  406d88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
  406d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406d8e:	2b00      	cmp	r3, #0
  406d90:	d12b      	bne.n	406dea <tcp_process_refused_data+0xae>
    /* did refused_data include a FIN? */
    if (refused_flags & PBUF_FLAG_TCP_FIN) {
  406d92:	7bbb      	ldrb	r3, [r7, #14]
  406d94:	f003 0320 	and.w	r3, r3, #32
  406d98:	2b00      	cmp	r3, #0
  406d9a:	d031      	beq.n	406e00 <tcp_process_refused_data+0xc4>
      /* correct rcv_wnd as the application won't call tcp_recved()
         for the FIN's seqno */
      if (pcb->rcv_wnd != TCP_WND) {
  406d9c:	687b      	ldr	r3, [r7, #4]
  406d9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406da0:	f640 3268 	movw	r2, #2920	; 0xb68
  406da4:	4293      	cmp	r3, r2
  406da6:	d005      	beq.n	406db4 <tcp_process_refused_data+0x78>
        pcb->rcv_wnd++;
  406da8:	687b      	ldr	r3, [r7, #4]
  406daa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  406dac:	3301      	adds	r3, #1
  406dae:	b29a      	uxth	r2, r3
  406db0:	687b      	ldr	r3, [r7, #4]
  406db2:	859a      	strh	r2, [r3, #44]	; 0x2c
      }
      TCP_EVENT_CLOSED(pcb, err);
  406db4:	687b      	ldr	r3, [r7, #4]
  406db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  406dba:	2b00      	cmp	r3, #0
  406dbc:	d00b      	beq.n	406dd6 <tcp_process_refused_data+0x9a>
  406dbe:	687b      	ldr	r3, [r7, #4]
  406dc0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  406dc4:	687b      	ldr	r3, [r7, #4]
  406dc6:	6918      	ldr	r0, [r3, #16]
  406dc8:	2300      	movs	r3, #0
  406dca:	2200      	movs	r2, #0
  406dcc:	6879      	ldr	r1, [r7, #4]
  406dce:	47a0      	blx	r4
  406dd0:	4603      	mov	r3, r0
  406dd2:	73fb      	strb	r3, [r7, #15]
  406dd4:	e001      	b.n	406dda <tcp_process_refused_data+0x9e>
  406dd6:	2300      	movs	r3, #0
  406dd8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_ABRT) {
  406dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406dde:	f113 0f0a 	cmn.w	r3, #10
  406de2:	d10d      	bne.n	406e00 <tcp_process_refused_data+0xc4>
        return ERR_ABRT;
  406de4:	f06f 0309 	mvn.w	r3, #9
  406de8:	e00b      	b.n	406e02 <tcp_process_refused_data+0xc6>
      }
    }
  } else if (err == ERR_ABRT) {
  406dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
  406dee:	f113 0f0a 	cmn.w	r3, #10
  406df2:	d102      	bne.n	406dfa <tcp_process_refused_data+0xbe>
    /* if err == ERR_ABRT, 'pcb' is already deallocated */
    /* Drop incoming packets because pcb is "full" (only if the incoming
       segment contains data). */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
    return ERR_ABRT;
  406df4:	f06f 0309 	mvn.w	r3, #9
  406df8:	e003      	b.n	406e02 <tcp_process_refused_data+0xc6>
  } else {
    /* data is still refused, pbuf is still valid (go on for ACK-only packets) */
    pcb->refused_data = refused_data;
  406dfa:	687b      	ldr	r3, [r7, #4]
  406dfc:	68ba      	ldr	r2, [r7, #8]
  406dfe:	679a      	str	r2, [r3, #120]	; 0x78
  }
  return ERR_OK;
  406e00:	2300      	movs	r3, #0
}
  406e02:	4618      	mov	r0, r3
  406e04:	3714      	adds	r7, #20
  406e06:	46bd      	mov	sp, r7
  406e08:	bd90      	pop	{r4, r7, pc}
  406e0a:	bf00      	nop
  406e0c:	00406ed9 	.word	0x00406ed9

00406e10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  406e10:	b580      	push	{r7, lr}
  406e12:	b084      	sub	sp, #16
  406e14:	af00      	add	r7, sp, #0
  406e16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
  406e18:	e007      	b.n	406e2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
  406e1a:	687b      	ldr	r3, [r7, #4]
  406e1c:	681b      	ldr	r3, [r3, #0]
  406e1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
  406e20:	6878      	ldr	r0, [r7, #4]
  406e22:	4b05      	ldr	r3, [pc, #20]	; (406e38 <tcp_segs_free+0x28>)
  406e24:	4798      	blx	r3
    seg = next;
  406e26:	68fb      	ldr	r3, [r7, #12]
  406e28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
  406e2a:	687b      	ldr	r3, [r7, #4]
  406e2c:	2b00      	cmp	r3, #0
  406e2e:	d1f4      	bne.n	406e1a <tcp_segs_free+0xa>
  }
}
  406e30:	bf00      	nop
  406e32:	3710      	adds	r7, #16
  406e34:	46bd      	mov	sp, r7
  406e36:	bd80      	pop	{r7, pc}
  406e38:	00406e3d 	.word	0x00406e3d

00406e3c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  406e3c:	b580      	push	{r7, lr}
  406e3e:	b082      	sub	sp, #8
  406e40:	af00      	add	r7, sp, #0
  406e42:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
  406e44:	687b      	ldr	r3, [r7, #4]
  406e46:	2b00      	cmp	r3, #0
  406e48:	d00c      	beq.n	406e64 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
  406e4a:	687b      	ldr	r3, [r7, #4]
  406e4c:	685b      	ldr	r3, [r3, #4]
  406e4e:	2b00      	cmp	r3, #0
  406e50:	d004      	beq.n	406e5c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
  406e52:	687b      	ldr	r3, [r7, #4]
  406e54:	685b      	ldr	r3, [r3, #4]
  406e56:	4618      	mov	r0, r3
  406e58:	4b04      	ldr	r3, [pc, #16]	; (406e6c <tcp_seg_free+0x30>)
  406e5a:	4798      	blx	r3
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  406e5c:	6879      	ldr	r1, [r7, #4]
  406e5e:	2003      	movs	r0, #3
  406e60:	4b03      	ldr	r3, [pc, #12]	; (406e70 <tcp_seg_free+0x34>)
  406e62:	4798      	blx	r3
  }
}
  406e64:	bf00      	nop
  406e66:	3708      	adds	r7, #8
  406e68:	46bd      	mov	sp, r7
  406e6a:	bd80      	pop	{r7, pc}
  406e6c:	00405b81 	.word	0x00405b81
  406e70:	004054e5 	.word	0x004054e5

00406e74 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  406e74:	b480      	push	{r7}
  406e76:	b083      	sub	sp, #12
  406e78:	af00      	add	r7, sp, #0
  406e7a:	6078      	str	r0, [r7, #4]
  406e7c:	460b      	mov	r3, r1
  406e7e:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
  406e80:	687b      	ldr	r3, [r7, #4]
  406e82:	78fa      	ldrb	r2, [r7, #3]
  406e84:	765a      	strb	r2, [r3, #25]
}
  406e86:	bf00      	nop
  406e88:	370c      	adds	r7, #12
  406e8a:	46bd      	mov	sp, r7
  406e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e90:	4770      	bx	lr
	...

00406e94 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */ 
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  406e94:	b580      	push	{r7, lr}
  406e96:	b084      	sub	sp, #16
  406e98:	af00      	add	r7, sp, #0
  406e9a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  406e9c:	2003      	movs	r0, #3
  406e9e:	4b0b      	ldr	r3, [pc, #44]	; (406ecc <tcp_seg_copy+0x38>)
  406ea0:	4798      	blx	r3
  406ea2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
  406ea4:	68fb      	ldr	r3, [r7, #12]
  406ea6:	2b00      	cmp	r3, #0
  406ea8:	d101      	bne.n	406eae <tcp_seg_copy+0x1a>
    return NULL;
  406eaa:	2300      	movs	r3, #0
  406eac:	e00a      	b.n	406ec4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg)); 
  406eae:	2210      	movs	r2, #16
  406eb0:	6879      	ldr	r1, [r7, #4]
  406eb2:	68f8      	ldr	r0, [r7, #12]
  406eb4:	4b06      	ldr	r3, [pc, #24]	; (406ed0 <tcp_seg_copy+0x3c>)
  406eb6:	4798      	blx	r3
  pbuf_ref(cseg->p);
  406eb8:	68fb      	ldr	r3, [r7, #12]
  406eba:	685b      	ldr	r3, [r3, #4]
  406ebc:	4618      	mov	r0, r3
  406ebe:	4b05      	ldr	r3, [pc, #20]	; (406ed4 <tcp_seg_copy+0x40>)
  406ec0:	4798      	blx	r3
  return cseg;
  406ec2:	68fb      	ldr	r3, [r7, #12]
}
  406ec4:	4618      	mov	r0, r3
  406ec6:	3710      	adds	r7, #16
  406ec8:	46bd      	mov	sp, r7
  406eca:	bd80      	pop	{r7, pc}
  406ecc:	004054a5 	.word	0x004054a5
  406ed0:	0040cd79 	.word	0x0040cd79
  406ed4:	00405c3f 	.word	0x00405c3f

00406ed8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  406ed8:	b580      	push	{r7, lr}
  406eda:	b084      	sub	sp, #16
  406edc:	af00      	add	r7, sp, #0
  406ede:	60f8      	str	r0, [r7, #12]
  406ee0:	60b9      	str	r1, [r7, #8]
  406ee2:	607a      	str	r2, [r7, #4]
  406ee4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  406ee6:	687b      	ldr	r3, [r7, #4]
  406ee8:	2b00      	cmp	r3, #0
  406eea:	d009      	beq.n	406f00 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
  406eec:	687b      	ldr	r3, [r7, #4]
  406eee:	891b      	ldrh	r3, [r3, #8]
  406ef0:	4619      	mov	r1, r3
  406ef2:	68b8      	ldr	r0, [r7, #8]
  406ef4:	4b09      	ldr	r3, [pc, #36]	; (406f1c <tcp_recv_null+0x44>)
  406ef6:	4798      	blx	r3
    pbuf_free(p);
  406ef8:	6878      	ldr	r0, [r7, #4]
  406efa:	4b09      	ldr	r3, [pc, #36]	; (406f20 <tcp_recv_null+0x48>)
  406efc:	4798      	blx	r3
  406efe:	e008      	b.n	406f12 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
  406f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
  406f04:	2b00      	cmp	r3, #0
  406f06:	d104      	bne.n	406f12 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
  406f08:	68b8      	ldr	r0, [r7, #8]
  406f0a:	4b06      	ldr	r3, [pc, #24]	; (406f24 <tcp_recv_null+0x4c>)
  406f0c:	4798      	blx	r3
  406f0e:	4603      	mov	r3, r0
  406f10:	e000      	b.n	406f14 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
  406f12:	2300      	movs	r3, #0
}
  406f14:	4618      	mov	r0, r3
  406f16:	3710      	adds	r7, #16
  406f18:	46bd      	mov	sp, r7
  406f1a:	bd80      	pop	{r7, pc}
  406f1c:	00406549 	.word	0x00406549
  406f20:	00405b81 	.word	0x00405b81
  406f24:	0040616d 	.word	0x0040616d

00406f28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  406f28:	b580      	push	{r7, lr}
  406f2a:	b086      	sub	sp, #24
  406f2c:	af00      	add	r7, sp, #0
  406f2e:	4603      	mov	r3, r0
  406f30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;


  mprio = TCP_PRIO_MAX;
  406f32:	237f      	movs	r3, #127	; 0x7f
  406f34:	72fb      	strb	r3, [r7, #11]
  
  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  406f36:	2300      	movs	r3, #0
  406f38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
  406f3a:	2300      	movs	r3, #0
  406f3c:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  406f3e:	4b18      	ldr	r3, [pc, #96]	; (406fa0 <tcp_kill_prio+0x78>)
  406f40:	681b      	ldr	r3, [r3, #0]
  406f42:	617b      	str	r3, [r7, #20]
  406f44:	e01f      	b.n	406f86 <tcp_kill_prio+0x5e>
    if (pcb->prio <= prio &&
  406f46:	697b      	ldr	r3, [r7, #20]
  406f48:	7e5b      	ldrb	r3, [r3, #25]
  406f4a:	79fa      	ldrb	r2, [r7, #7]
  406f4c:	429a      	cmp	r2, r3
  406f4e:	d317      	bcc.n	406f80 <tcp_kill_prio+0x58>
       pcb->prio <= mprio &&
  406f50:	697b      	ldr	r3, [r7, #20]
  406f52:	7e5b      	ldrb	r3, [r3, #25]
    if (pcb->prio <= prio &&
  406f54:	7afa      	ldrb	r2, [r7, #11]
  406f56:	429a      	cmp	r2, r3
  406f58:	d312      	bcc.n	406f80 <tcp_kill_prio+0x58>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  406f5a:	4b12      	ldr	r3, [pc, #72]	; (406fa4 <tcp_kill_prio+0x7c>)
  406f5c:	681a      	ldr	r2, [r3, #0]
  406f5e:	697b      	ldr	r3, [r7, #20]
  406f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406f62:	1ad2      	subs	r2, r2, r3
       pcb->prio <= mprio &&
  406f64:	68fb      	ldr	r3, [r7, #12]
  406f66:	429a      	cmp	r2, r3
  406f68:	d30a      	bcc.n	406f80 <tcp_kill_prio+0x58>
      inactivity = tcp_ticks - pcb->tmr;
  406f6a:	4b0e      	ldr	r3, [pc, #56]	; (406fa4 <tcp_kill_prio+0x7c>)
  406f6c:	681a      	ldr	r2, [r3, #0]
  406f6e:	697b      	ldr	r3, [r7, #20]
  406f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406f72:	1ad3      	subs	r3, r2, r3
  406f74:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
  406f76:	697b      	ldr	r3, [r7, #20]
  406f78:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
  406f7a:	697b      	ldr	r3, [r7, #20]
  406f7c:	7e5b      	ldrb	r3, [r3, #25]
  406f7e:	72fb      	strb	r3, [r7, #11]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  406f80:	697b      	ldr	r3, [r7, #20]
  406f82:	68db      	ldr	r3, [r3, #12]
  406f84:	617b      	str	r3, [r7, #20]
  406f86:	697b      	ldr	r3, [r7, #20]
  406f88:	2b00      	cmp	r3, #0
  406f8a:	d1dc      	bne.n	406f46 <tcp_kill_prio+0x1e>
    }
  }
  if (inactive != NULL) {
  406f8c:	693b      	ldr	r3, [r7, #16]
  406f8e:	2b00      	cmp	r3, #0
  406f90:	d002      	beq.n	406f98 <tcp_kill_prio+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  406f92:	6938      	ldr	r0, [r7, #16]
  406f94:	4b04      	ldr	r3, [pc, #16]	; (406fa8 <tcp_kill_prio+0x80>)
  406f96:	4798      	blx	r3
  }
}
  406f98:	bf00      	nop
  406f9a:	3718      	adds	r7, #24
  406f9c:	46bd      	mov	sp, r7
  406f9e:	bd80      	pop	{r7, pc}
  406fa0:	204049a0 	.word	0x204049a0
  406fa4:	204049a4 	.word	0x204049a4
  406fa8:	00406285 	.word	0x00406285

00406fac <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  406fac:	b580      	push	{r7, lr}
  406fae:	b084      	sub	sp, #16
  406fb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  406fb2:	2300      	movs	r3, #0
  406fb4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
  406fb6:	2300      	movs	r3, #0
  406fb8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  406fba:	4b12      	ldr	r3, [pc, #72]	; (407004 <tcp_kill_timewait+0x58>)
  406fbc:	681b      	ldr	r3, [r3, #0]
  406fbe:	60fb      	str	r3, [r7, #12]
  406fc0:	e012      	b.n	406fe8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  406fc2:	4b11      	ldr	r3, [pc, #68]	; (407008 <tcp_kill_timewait+0x5c>)
  406fc4:	681a      	ldr	r2, [r3, #0]
  406fc6:	68fb      	ldr	r3, [r7, #12]
  406fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406fca:	1ad2      	subs	r2, r2, r3
  406fcc:	687b      	ldr	r3, [r7, #4]
  406fce:	429a      	cmp	r2, r3
  406fd0:	d307      	bcc.n	406fe2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
  406fd2:	4b0d      	ldr	r3, [pc, #52]	; (407008 <tcp_kill_timewait+0x5c>)
  406fd4:	681a      	ldr	r2, [r3, #0]
  406fd6:	68fb      	ldr	r3, [r7, #12]
  406fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  406fda:	1ad3      	subs	r3, r2, r3
  406fdc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
  406fde:	68fb      	ldr	r3, [r7, #12]
  406fe0:	60bb      	str	r3, [r7, #8]
  for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  406fe2:	68fb      	ldr	r3, [r7, #12]
  406fe4:	68db      	ldr	r3, [r3, #12]
  406fe6:	60fb      	str	r3, [r7, #12]
  406fe8:	68fb      	ldr	r3, [r7, #12]
  406fea:	2b00      	cmp	r3, #0
  406fec:	d1e9      	bne.n	406fc2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
  406fee:	68bb      	ldr	r3, [r7, #8]
  406ff0:	2b00      	cmp	r3, #0
  406ff2:	d002      	beq.n	406ffa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  406ff4:	68b8      	ldr	r0, [r7, #8]
  406ff6:	4b05      	ldr	r3, [pc, #20]	; (40700c <tcp_kill_timewait+0x60>)
  406ff8:	4798      	blx	r3
  }
}
  406ffa:	bf00      	nop
  406ffc:	3710      	adds	r7, #16
  406ffe:	46bd      	mov	sp, r7
  407000:	bd80      	pop	{r7, pc}
  407002:	bf00      	nop
  407004:	204049b4 	.word	0x204049b4
  407008:	204049a4 	.word	0x204049a4
  40700c:	00406285 	.word	0x00406285

00407010 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  407010:	b580      	push	{r7, lr}
  407012:	b084      	sub	sp, #16
  407014:	af00      	add	r7, sp, #0
  407016:	4603      	mov	r3, r0
  407018:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  u32_t iss;
  
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40701a:	2001      	movs	r0, #1
  40701c:	4b3e      	ldr	r3, [pc, #248]	; (407118 <tcp_alloc+0x108>)
  40701e:	4798      	blx	r3
  407020:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
  407022:	68fb      	ldr	r3, [r7, #12]
  407024:	2b00      	cmp	r3, #0
  407026:	d110      	bne.n	40704a <tcp_alloc+0x3a>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  407028:	4b3c      	ldr	r3, [pc, #240]	; (40711c <tcp_alloc+0x10c>)
  40702a:	4798      	blx	r3
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  40702c:	2001      	movs	r0, #1
  40702e:	4b3a      	ldr	r3, [pc, #232]	; (407118 <tcp_alloc+0x108>)
  407030:	4798      	blx	r3
  407032:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
  407034:	68fb      	ldr	r3, [r7, #12]
  407036:	2b00      	cmp	r3, #0
  407038:	d107      	bne.n	40704a <tcp_alloc+0x3a>
      /* Try killing active connections with lower priority than the new one. */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
      tcp_kill_prio(prio);
  40703a:	79fb      	ldrb	r3, [r7, #7]
  40703c:	4618      	mov	r0, r3
  40703e:	4b38      	ldr	r3, [pc, #224]	; (407120 <tcp_alloc+0x110>)
  407040:	4798      	blx	r3
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  407042:	2001      	movs	r0, #1
  407044:	4b34      	ldr	r3, [pc, #208]	; (407118 <tcp_alloc+0x108>)
  407046:	4798      	blx	r3
  407048:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: timewait PCB was freed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
  40704a:	68fb      	ldr	r3, [r7, #12]
  40704c:	2b00      	cmp	r3, #0
  40704e:	d05d      	beq.n	40710c <tcp_alloc+0xfc>
    memset(pcb, 0, sizeof(struct tcp_pcb));
  407050:	2298      	movs	r2, #152	; 0x98
  407052:	2100      	movs	r1, #0
  407054:	68f8      	ldr	r0, [r7, #12]
  407056:	4b33      	ldr	r3, [pc, #204]	; (407124 <tcp_alloc+0x114>)
  407058:	4798      	blx	r3
    pcb->prio = prio;
  40705a:	68fb      	ldr	r3, [r7, #12]
  40705c:	79fa      	ldrb	r2, [r7, #7]
  40705e:	765a      	strb	r2, [r3, #25]
    pcb->snd_buf = TCP_SND_BUF;
  407060:	68fb      	ldr	r3, [r7, #12]
  407062:	f640 3268 	movw	r2, #2920	; 0xb68
  407066:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    pcb->snd_queuelen = 0;
  40706a:	68fb      	ldr	r3, [r7, #12]
  40706c:	2200      	movs	r2, #0
  40706e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    pcb->rcv_wnd = TCP_WND;
  407072:	68fb      	ldr	r3, [r7, #12]
  407074:	f640 3268 	movw	r2, #2920	; 0xb68
  407078:	859a      	strh	r2, [r3, #44]	; 0x2c
    pcb->rcv_ann_wnd = TCP_WND;
  40707a:	68fb      	ldr	r3, [r7, #12]
  40707c:	f640 3268 	movw	r2, #2920	; 0xb68
  407080:	85da      	strh	r2, [r3, #46]	; 0x2e
    pcb->tos = 0;
  407082:	68fb      	ldr	r3, [r7, #12]
  407084:	2200      	movs	r2, #0
  407086:	725a      	strb	r2, [r3, #9]
    pcb->ttl = TCP_TTL;
  407088:	68fb      	ldr	r3, [r7, #12]
  40708a:	22ff      	movs	r2, #255	; 0xff
  40708c:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = (TCP_MSS > 536) ? 536 : TCP_MSS;
  40708e:	68fb      	ldr	r3, [r7, #12]
  407090:	f44f 7206 	mov.w	r2, #536	; 0x218
  407094:	86da      	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  407096:	68fb      	ldr	r3, [r7, #12]
  407098:	2206      	movs	r2, #6
  40709a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    pcb->sa = 0;
  40709e:	68fb      	ldr	r3, [r7, #12]
  4070a0:	2200      	movs	r2, #0
  4070a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  4070a6:	68fb      	ldr	r3, [r7, #12]
  4070a8:	2206      	movs	r2, #6
  4070aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  4070ae:	68fb      	ldr	r3, [r7, #12]
  4070b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
  4070b4:	869a      	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  4070b6:	68fb      	ldr	r3, [r7, #12]
  4070b8:	2201      	movs	r2, #1
  4070ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    iss = tcp_next_iss();
  4070be:	4b1a      	ldr	r3, [pc, #104]	; (407128 <tcp_alloc+0x118>)
  4070c0:	4798      	blx	r3
  4070c2:	60b8      	str	r0, [r7, #8]
    pcb->snd_wl2 = iss;
  4070c4:	68fb      	ldr	r3, [r7, #12]
  4070c6:	68ba      	ldr	r2, [r7, #8]
  4070c8:	659a      	str	r2, [r3, #88]	; 0x58
    pcb->snd_nxt = iss;
  4070ca:	68fb      	ldr	r3, [r7, #12]
  4070cc:	68ba      	ldr	r2, [r7, #8]
  4070ce:	651a      	str	r2, [r3, #80]	; 0x50
    pcb->lastack = iss;
  4070d0:	68fb      	ldr	r3, [r7, #12]
  4070d2:	68ba      	ldr	r2, [r7, #8]
  4070d4:	649a      	str	r2, [r3, #72]	; 0x48
    pcb->snd_lbb = iss;   
  4070d6:	68fb      	ldr	r3, [r7, #12]
  4070d8:	68ba      	ldr	r2, [r7, #8]
  4070da:	65da      	str	r2, [r3, #92]	; 0x5c
    pcb->tmr = tcp_ticks;
  4070dc:	4b13      	ldr	r3, [pc, #76]	; (40712c <tcp_alloc+0x11c>)
  4070de:	681a      	ldr	r2, [r3, #0]
  4070e0:	68fb      	ldr	r3, [r7, #12]
  4070e2:	625a      	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  4070e4:	4b12      	ldr	r3, [pc, #72]	; (407130 <tcp_alloc+0x120>)
  4070e6:	781a      	ldrb	r2, [r3, #0]
  4070e8:	68fb      	ldr	r3, [r7, #12]
  4070ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    pcb->polltmr = 0;
  4070ee:	68fb      	ldr	r3, [r7, #12]
  4070f0:	2200      	movs	r2, #0
  4070f2:	77da      	strb	r2, [r3, #31]

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  4070f4:	68fb      	ldr	r3, [r7, #12]
  4070f6:	4a0f      	ldr	r2, [pc, #60]	; (407134 <tcp_alloc+0x124>)
  4070f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */  
    
    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  4070fc:	68fb      	ldr	r3, [r7, #12]
  4070fe:	4a0e      	ldr	r2, [pc, #56]	; (407138 <tcp_alloc+0x128>)
  407100:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */

    pcb->keep_cnt_sent = 0;
  407104:	68fb      	ldr	r3, [r7, #12]
  407106:	2200      	movs	r2, #0
  407108:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }
  return pcb;
  40710c:	68fb      	ldr	r3, [r7, #12]
}
  40710e:	4618      	mov	r0, r3
  407110:	3710      	adds	r7, #16
  407112:	46bd      	mov	sp, r7
  407114:	bd80      	pop	{r7, pc}
  407116:	bf00      	nop
  407118:	004054a5 	.word	0x004054a5
  40711c:	00406fad 	.word	0x00406fad
  407120:	00406f29 	.word	0x00406f29
  407124:	0040cead 	.word	0x0040cead
  407128:	00407345 	.word	0x00407345
  40712c:	204049a4 	.word	0x204049a4
  407130:	204025cd 	.word	0x204025cd
  407134:	00406ed9 	.word	0x00406ed9
  407138:	006ddd00 	.word	0x006ddd00

0040713c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  40713c:	b580      	push	{r7, lr}
  40713e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
  407140:	2040      	movs	r0, #64	; 0x40
  407142:	4b02      	ldr	r3, [pc, #8]	; (40714c <tcp_new+0x10>)
  407144:	4798      	blx	r3
  407146:	4603      	mov	r3, r0
}
  407148:	4618      	mov	r0, r3
  40714a:	bd80      	pop	{r7, pc}
  40714c:	00407011 	.word	0x00407011

00407150 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */ 
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  407150:	b480      	push	{r7}
  407152:	b083      	sub	sp, #12
  407154:	af00      	add	r7, sp, #0
  407156:	6078      	str	r0, [r7, #4]
  407158:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->callback_arg = arg;
  40715a:	687b      	ldr	r3, [r7, #4]
  40715c:	683a      	ldr	r2, [r7, #0]
  40715e:	611a      	str	r2, [r3, #16]
}
  407160:	bf00      	nop
  407162:	370c      	adds	r7, #12
  407164:	46bd      	mov	sp, r7
  407166:	f85d 7b04 	ldr.w	r7, [sp], #4
  40716a:	4770      	bx	lr

0040716c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */ 
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  40716c:	b480      	push	{r7}
  40716e:	b083      	sub	sp, #12
  407170:	af00      	add	r7, sp, #0
  407172:	6078      	str	r0, [r7, #4]
  407174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  pcb->recv = recv;
  407176:	687b      	ldr	r3, [r7, #4]
  407178:	683a      	ldr	r2, [r7, #0]
  40717a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
  40717e:	bf00      	nop
  407180:	370c      	adds	r7, #12
  407182:	46bd      	mov	sp, r7
  407184:	f85d 7b04 	ldr.w	r7, [sp], #4
  407188:	4770      	bx	lr

0040718a <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */ 
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  40718a:	b480      	push	{r7}
  40718c:	b083      	sub	sp, #12
  40718e:	af00      	add	r7, sp, #0
  407190:	6078      	str	r0, [r7, #4]
  407192:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  pcb->sent = sent;
  407194:	687b      	ldr	r3, [r7, #4]
  407196:	683a      	ldr	r2, [r7, #0]
  407198:	67da      	str	r2, [r3, #124]	; 0x7c
}
  40719a:	bf00      	nop
  40719c:	370c      	adds	r7, #12
  40719e:	46bd      	mov	sp, r7
  4071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071a4:	4770      	bx	lr

004071a6 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occured on the connection
 */ 
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  4071a6:	b480      	push	{r7}
  4071a8:	b083      	sub	sp, #12
  4071aa:	af00      	add	r7, sp, #0
  4071ac:	6078      	str	r0, [r7, #4]
  4071ae:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  pcb->errf = err;
  4071b0:	687b      	ldr	r3, [r7, #4]
  4071b2:	683a      	ldr	r2, [r7, #0]
  4071b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
}
  4071b8:	bf00      	nop
  4071ba:	370c      	adds	r7, #12
  4071bc:	46bd      	mov	sp, r7
  4071be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071c2:	4770      	bx	lr

004071c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */ 
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  4071c4:	b480      	push	{r7}
  4071c6:	b083      	sub	sp, #12
  4071c8:	af00      	add	r7, sp, #0
  4071ca:	6078      	str	r0, [r7, #4]
  4071cc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  pcb->accept = accept;
  4071ce:	687b      	ldr	r3, [r7, #4]
  4071d0:	683a      	ldr	r2, [r7, #0]
  4071d2:	615a      	str	r2, [r3, #20]
}
  4071d4:	bf00      	nop
  4071d6:	370c      	adds	r7, #12
  4071d8:	46bd      	mov	sp, r7
  4071da:	f85d 7b04 	ldr.w	r7, [sp], #4
  4071de:	4770      	bx	lr

004071e0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */ 
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  4071e0:	b480      	push	{r7}
  4071e2:	b085      	sub	sp, #20
  4071e4:	af00      	add	r7, sp, #0
  4071e6:	60f8      	str	r0, [r7, #12]
  4071e8:	60b9      	str	r1, [r7, #8]
  4071ea:	4613      	mov	r3, r2
  4071ec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  4071ee:	68fb      	ldr	r3, [r7, #12]
  4071f0:	68ba      	ldr	r2, [r7, #8]
  4071f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */  
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */  
  pcb->pollinterval = interval;
  4071f6:	68fb      	ldr	r3, [r7, #12]
  4071f8:	79fa      	ldrb	r2, [r7, #7]
  4071fa:	f883 2020 	strb.w	r2, [r3, #32]
}
  4071fe:	bf00      	nop
  407200:	3714      	adds	r7, #20
  407202:	46bd      	mov	sp, r7
  407204:	f85d 7b04 	ldr.w	r7, [sp], #4
  407208:	4770      	bx	lr
	...

0040720c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  40720c:	b580      	push	{r7, lr}
  40720e:	b082      	sub	sp, #8
  407210:	af00      	add	r7, sp, #0
  407212:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
  407214:	687b      	ldr	r3, [r7, #4]
  407216:	7e1b      	ldrb	r3, [r3, #24]
  407218:	2b00      	cmp	r3, #0
  40721a:	d034      	beq.n	407286 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
  40721c:	687b      	ldr	r3, [r7, #4]
  40721e:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != CLOSED &&
  407220:	2b0a      	cmp	r3, #10
  407222:	d030      	beq.n	407286 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
  407224:	687b      	ldr	r3, [r7, #4]
  407226:	7e1b      	ldrb	r3, [r3, #24]
     pcb->state != TIME_WAIT &&
  407228:	2b01      	cmp	r3, #1
  40722a:	d02c      	beq.n	407286 <tcp_pcb_purge+0x7a>
      }
    }
#endif /* TCP_LISTEN_BACKLOG */


    if (pcb->refused_data != NULL) {
  40722c:	687b      	ldr	r3, [r7, #4]
  40722e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407230:	2b00      	cmp	r3, #0
  407232:	d007      	beq.n	407244 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  407234:	687b      	ldr	r3, [r7, #4]
  407236:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407238:	4618      	mov	r0, r3
  40723a:	4b15      	ldr	r3, [pc, #84]	; (407290 <tcp_pcb_purge+0x84>)
  40723c:	4798      	blx	r3
      pcb->refused_data = NULL;
  40723e:	687b      	ldr	r3, [r7, #4]
  407240:	2200      	movs	r2, #0
  407242:	679a      	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  407244:	687b      	ldr	r3, [r7, #4]
  407246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  407248:	4618      	mov	r0, r3
  40724a:	4b12      	ldr	r3, [pc, #72]	; (407294 <tcp_pcb_purge+0x88>)
  40724c:	4798      	blx	r3
    pcb->ooseq = NULL;
  40724e:	687b      	ldr	r3, [r7, #4]
  407250:	2200      	movs	r2, #0
  407252:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  407254:	687b      	ldr	r3, [r7, #4]
  407256:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40725a:	869a      	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  40725c:	687b      	ldr	r3, [r7, #4]
  40725e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  407260:	4618      	mov	r0, r3
  407262:	4b0c      	ldr	r3, [pc, #48]	; (407294 <tcp_pcb_purge+0x88>)
  407264:	4798      	blx	r3
    tcp_segs_free(pcb->unacked);
  407266:	687b      	ldr	r3, [r7, #4]
  407268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40726a:	4618      	mov	r0, r3
  40726c:	4b09      	ldr	r3, [pc, #36]	; (407294 <tcp_pcb_purge+0x88>)
  40726e:	4798      	blx	r3
    pcb->unacked = pcb->unsent = NULL;
  407270:	687b      	ldr	r3, [r7, #4]
  407272:	2200      	movs	r2, #0
  407274:	66da      	str	r2, [r3, #108]	; 0x6c
  407276:	687b      	ldr	r3, [r7, #4]
  407278:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  40727a:	687b      	ldr	r3, [r7, #4]
  40727c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  40727e:	687b      	ldr	r3, [r7, #4]
  407280:	2200      	movs	r2, #0
  407282:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */
  }
}
  407286:	bf00      	nop
  407288:	3708      	adds	r7, #8
  40728a:	46bd      	mov	sp, r7
  40728c:	bd80      	pop	{r7, pc}
  40728e:	bf00      	nop
  407290:	00405b81 	.word	0x00405b81
  407294:	00406e11 	.word	0x00406e11

00407298 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  407298:	b580      	push	{r7, lr}
  40729a:	b082      	sub	sp, #8
  40729c:	af00      	add	r7, sp, #0
  40729e:	6078      	str	r0, [r7, #4]
  4072a0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
  4072a2:	687b      	ldr	r3, [r7, #4]
  4072a4:	681a      	ldr	r2, [r3, #0]
  4072a6:	683b      	ldr	r3, [r7, #0]
  4072a8:	429a      	cmp	r2, r3
  4072aa:	d105      	bne.n	4072b8 <tcp_pcb_remove+0x20>
  4072ac:	687b      	ldr	r3, [r7, #4]
  4072ae:	681b      	ldr	r3, [r3, #0]
  4072b0:	68da      	ldr	r2, [r3, #12]
  4072b2:	687b      	ldr	r3, [r7, #4]
  4072b4:	601a      	str	r2, [r3, #0]
  4072b6:	e019      	b.n	4072ec <tcp_pcb_remove+0x54>
  4072b8:	687b      	ldr	r3, [r7, #4]
  4072ba:	681b      	ldr	r3, [r3, #0]
  4072bc:	4a1e      	ldr	r2, [pc, #120]	; (407338 <tcp_pcb_remove+0xa0>)
  4072be:	6013      	str	r3, [r2, #0]
  4072c0:	e010      	b.n	4072e4 <tcp_pcb_remove+0x4c>
  4072c2:	4b1d      	ldr	r3, [pc, #116]	; (407338 <tcp_pcb_remove+0xa0>)
  4072c4:	681b      	ldr	r3, [r3, #0]
  4072c6:	68da      	ldr	r2, [r3, #12]
  4072c8:	683b      	ldr	r3, [r7, #0]
  4072ca:	429a      	cmp	r2, r3
  4072cc:	d105      	bne.n	4072da <tcp_pcb_remove+0x42>
  4072ce:	4b1a      	ldr	r3, [pc, #104]	; (407338 <tcp_pcb_remove+0xa0>)
  4072d0:	681b      	ldr	r3, [r3, #0]
  4072d2:	683a      	ldr	r2, [r7, #0]
  4072d4:	68d2      	ldr	r2, [r2, #12]
  4072d6:	60da      	str	r2, [r3, #12]
  4072d8:	e008      	b.n	4072ec <tcp_pcb_remove+0x54>
  4072da:	4b17      	ldr	r3, [pc, #92]	; (407338 <tcp_pcb_remove+0xa0>)
  4072dc:	681b      	ldr	r3, [r3, #0]
  4072de:	68db      	ldr	r3, [r3, #12]
  4072e0:	4a15      	ldr	r2, [pc, #84]	; (407338 <tcp_pcb_remove+0xa0>)
  4072e2:	6013      	str	r3, [r2, #0]
  4072e4:	4b14      	ldr	r3, [pc, #80]	; (407338 <tcp_pcb_remove+0xa0>)
  4072e6:	681b      	ldr	r3, [r3, #0]
  4072e8:	2b00      	cmp	r3, #0
  4072ea:	d1ea      	bne.n	4072c2 <tcp_pcb_remove+0x2a>
  4072ec:	683b      	ldr	r3, [r7, #0]
  4072ee:	2200      	movs	r2, #0
  4072f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  4072f2:	6838      	ldr	r0, [r7, #0]
  4072f4:	4b11      	ldr	r3, [pc, #68]	; (40733c <tcp_pcb_remove+0xa4>)
  4072f6:	4798      	blx	r3
  
  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  4072f8:	683b      	ldr	r3, [r7, #0]
  4072fa:	7e1b      	ldrb	r3, [r3, #24]
  4072fc:	2b0a      	cmp	r3, #10
  4072fe:	d013      	beq.n	407328 <tcp_pcb_remove+0x90>
     pcb->state != LISTEN &&
  407300:	683b      	ldr	r3, [r7, #0]
  407302:	7e1b      	ldrb	r3, [r3, #24]
  if (pcb->state != TIME_WAIT &&
  407304:	2b01      	cmp	r3, #1
  407306:	d00f      	beq.n	407328 <tcp_pcb_remove+0x90>
     pcb->flags & TF_ACK_DELAY) {
  407308:	683b      	ldr	r3, [r7, #0]
  40730a:	7f9b      	ldrb	r3, [r3, #30]
  40730c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
  407310:	2b00      	cmp	r3, #0
  407312:	d009      	beq.n	407328 <tcp_pcb_remove+0x90>
    pcb->flags |= TF_ACK_NOW;
  407314:	683b      	ldr	r3, [r7, #0]
  407316:	7f9b      	ldrb	r3, [r3, #30]
  407318:	f043 0302 	orr.w	r3, r3, #2
  40731c:	b2da      	uxtb	r2, r3
  40731e:	683b      	ldr	r3, [r7, #0]
  407320:	779a      	strb	r2, [r3, #30]
    tcp_output(pcb);
  407322:	6838      	ldr	r0, [r7, #0]
  407324:	4b06      	ldr	r3, [pc, #24]	; (407340 <tcp_pcb_remove+0xa8>)
  407326:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  407328:	683b      	ldr	r3, [r7, #0]
  40732a:	2200      	movs	r2, #0
  40732c:	761a      	strb	r2, [r3, #24]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  40732e:	bf00      	nop
  407330:	3708      	adds	r7, #8
  407332:	46bd      	mov	sp, r7
  407334:	bd80      	pop	{r7, pc}
  407336:	bf00      	nop
  407338:	204049ac 	.word	0x204049ac
  40733c:	0040720d 	.word	0x0040720d
  407340:	00409e75 	.word	0x00409e75

00407344 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(void)
{
  407344:	b480      	push	{r7}
  407346:	af00      	add	r7, sp, #0
  static u32_t iss = 6510;
  
  iss += tcp_ticks;       /* XXX */
  407348:	4b06      	ldr	r3, [pc, #24]	; (407364 <tcp_next_iss+0x20>)
  40734a:	681a      	ldr	r2, [r3, #0]
  40734c:	4b06      	ldr	r3, [pc, #24]	; (407368 <tcp_next_iss+0x24>)
  40734e:	681b      	ldr	r3, [r3, #0]
  407350:	4413      	add	r3, r2
  407352:	4a04      	ldr	r2, [pc, #16]	; (407364 <tcp_next_iss+0x20>)
  407354:	6013      	str	r3, [r2, #0]
  return iss;
  407356:	4b03      	ldr	r3, [pc, #12]	; (407364 <tcp_next_iss+0x20>)
  407358:	681b      	ldr	r3, [r3, #0]
}
  40735a:	4618      	mov	r0, r3
  40735c:	46bd      	mov	sp, r7
  40735e:	f85d 7b04 	ldr.w	r7, [sp], #4
  407362:	4770      	bx	lr
  407364:	20400010 	.word	0x20400010
  407368:	204049a4 	.word	0x204049a4

0040736c <tcp_eff_send_mss>:
 * by using ip_route to determin the netif used to send to the address and
 * calculating the minimum of TCP_MSS and that netif's mtu (if set).
 */
u16_t
tcp_eff_send_mss(u16_t sendmss, ip_addr_t *addr)
{
  40736c:	b580      	push	{r7, lr}
  40736e:	b084      	sub	sp, #16
  407370:	af00      	add	r7, sp, #0
  407372:	4603      	mov	r3, r0
  407374:	6039      	str	r1, [r7, #0]
  407376:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;

  outif = ip_route(addr);
  407378:	6838      	ldr	r0, [r7, #0]
  40737a:	4b0c      	ldr	r3, [pc, #48]	; (4073ac <tcp_eff_send_mss+0x40>)
  40737c:	4798      	blx	r3
  40737e:	60f8      	str	r0, [r7, #12]
  if ((outif != NULL) && (outif->mtu != 0)) {
  407380:	68fb      	ldr	r3, [r7, #12]
  407382:	2b00      	cmp	r3, #0
  407384:	d00d      	beq.n	4073a2 <tcp_eff_send_mss+0x36>
  407386:	68fb      	ldr	r3, [r7, #12]
  407388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  40738a:	2b00      	cmp	r3, #0
  40738c:	d009      	beq.n	4073a2 <tcp_eff_send_mss+0x36>
    mss_s = outif->mtu - IP_HLEN - TCP_HLEN;
  40738e:	68fb      	ldr	r3, [r7, #12]
  407390:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  407392:	3b28      	subs	r3, #40	; 0x28
  407394:	817b      	strh	r3, [r7, #10]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  407396:	897a      	ldrh	r2, [r7, #10]
  407398:	88fb      	ldrh	r3, [r7, #6]
  40739a:	4293      	cmp	r3, r2
  40739c:	bf28      	it	cs
  40739e:	4613      	movcs	r3, r2
  4073a0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
  4073a2:	88fb      	ldrh	r3, [r7, #6]
}
  4073a4:	4618      	mov	r0, r3
  4073a6:	3710      	adds	r7, #16
  4073a8:	46bd      	mov	sp, r7
  4073aa:	bd80      	pop	{r7, pc}
  4073ac:	00403edd 	.word	0x00403edd

004073b0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the IP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  4073b0:	b590      	push	{r4, r7, lr}
  4073b2:	b089      	sub	sp, #36	; 0x24
  4073b4:	af02      	add	r7, sp, #8
  4073b6:	6078      	str	r0, [r7, #4]
  4073b8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  snmp_inc_tcpinsegs();

  iphdr = (struct ip_hdr *)p->payload;
  4073ba:	687b      	ldr	r3, [r7, #4]
  4073bc:	685b      	ldr	r3, [r3, #4]
  4073be:	4a95      	ldr	r2, [pc, #596]	; (407614 <tcp_input+0x264>)
  4073c0:	6013      	str	r3, [r2, #0]
  tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  4073c2:	687b      	ldr	r3, [r7, #4]
  4073c4:	685b      	ldr	r3, [r3, #4]
  4073c6:	4a93      	ldr	r2, [pc, #588]	; (407614 <tcp_input+0x264>)
  4073c8:	6812      	ldr	r2, [r2, #0]
  4073ca:	7812      	ldrb	r2, [r2, #0]
  4073cc:	f002 020f 	and.w	r2, r2, #15
  4073d0:	0092      	lsls	r2, r2, #2
  4073d2:	4413      	add	r3, r2
  4073d4:	4a90      	ldr	r2, [pc, #576]	; (407618 <tcp_input+0x268>)
  4073d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* remove header from payload */
  if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  4073d8:	4b8e      	ldr	r3, [pc, #568]	; (407614 <tcp_input+0x264>)
  4073da:	681b      	ldr	r3, [r3, #0]
  4073dc:	781b      	ldrb	r3, [r3, #0]
  4073de:	b29b      	uxth	r3, r3
  4073e0:	f003 030f 	and.w	r3, r3, #15
  4073e4:	b29b      	uxth	r3, r3
  4073e6:	009b      	lsls	r3, r3, #2
  4073e8:	b29b      	uxth	r3, r3
  4073ea:	425b      	negs	r3, r3
  4073ec:	b29b      	uxth	r3, r3
  4073ee:	b21b      	sxth	r3, r3
  4073f0:	4619      	mov	r1, r3
  4073f2:	6878      	ldr	r0, [r7, #4]
  4073f4:	4b89      	ldr	r3, [pc, #548]	; (40761c <tcp_input+0x26c>)
  4073f6:	4798      	blx	r3
  4073f8:	4603      	mov	r3, r0
  4073fa:	2b00      	cmp	r3, #0
  4073fc:	f040 82ea 	bne.w	4079d4 <tcp_input+0x624>
  407400:	687b      	ldr	r3, [r7, #4]
  407402:	891b      	ldrh	r3, [r3, #8]
  407404:	2b13      	cmp	r3, #19
  407406:	f240 82e5 	bls.w	4079d4 <tcp_input+0x624>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  40740a:	4b85      	ldr	r3, [pc, #532]	; (407620 <tcp_input+0x270>)
  40740c:	681b      	ldr	r3, [r3, #0]
  40740e:	6839      	ldr	r1, [r7, #0]
  407410:	4618      	mov	r0, r3
  407412:	4b84      	ldr	r3, [pc, #528]	; (407624 <tcp_input+0x274>)
  407414:	4798      	blx	r3
  407416:	4603      	mov	r3, r0
  407418:	2b00      	cmp	r3, #0
  40741a:	f040 82db 	bne.w	4079d4 <tcp_input+0x624>
      ip_addr_ismulticast(&current_iphdr_dest)) {
  40741e:	4b80      	ldr	r3, [pc, #512]	; (407620 <tcp_input+0x270>)
  407420:	681b      	ldr	r3, [r3, #0]
  407422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
  407426:	2be0      	cmp	r3, #224	; 0xe0
  407428:	f000 82d4 	beq.w	4079d4 <tcp_input+0x624>
    goto dropped;
  }

#if CHECKSUM_CHECK_TCP
  /* Verify TCP checksum. */
  if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40742c:	687b      	ldr	r3, [r7, #4]
  40742e:	891b      	ldrh	r3, [r3, #8]
  407430:	9300      	str	r3, [sp, #0]
  407432:	2306      	movs	r3, #6
  407434:	4a7a      	ldr	r2, [pc, #488]	; (407620 <tcp_input+0x270>)
  407436:	497c      	ldr	r1, [pc, #496]	; (407628 <tcp_input+0x278>)
  407438:	6878      	ldr	r0, [r7, #4]
  40743a:	4c7c      	ldr	r4, [pc, #496]	; (40762c <tcp_input+0x27c>)
  40743c:	47a0      	blx	r4
  40743e:	4603      	mov	r3, r0
  407440:	2b00      	cmp	r3, #0
  407442:	f040 82c4 	bne.w	4079ce <tcp_input+0x61e>
  }
#endif

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  hdrlen = TCPH_HDRLEN(tcphdr);
  407446:	4b74      	ldr	r3, [pc, #464]	; (407618 <tcp_input+0x268>)
  407448:	681b      	ldr	r3, [r3, #0]
  40744a:	899b      	ldrh	r3, [r3, #12]
  40744c:	b29b      	uxth	r3, r3
  40744e:	4618      	mov	r0, r3
  407450:	4b77      	ldr	r3, [pc, #476]	; (407630 <tcp_input+0x280>)
  407452:	4798      	blx	r3
  407454:	4603      	mov	r3, r0
  407456:	0b1b      	lsrs	r3, r3, #12
  407458:	b29b      	uxth	r3, r3
  40745a:	72bb      	strb	r3, [r7, #10]
  if(pbuf_header(p, -(hdrlen * 4))){
  40745c:	7abb      	ldrb	r3, [r7, #10]
  40745e:	b29b      	uxth	r3, r3
  407460:	461a      	mov	r2, r3
  407462:	0392      	lsls	r2, r2, #14
  407464:	1ad3      	subs	r3, r2, r3
  407466:	009b      	lsls	r3, r3, #2
  407468:	b29b      	uxth	r3, r3
  40746a:	b21b      	sxth	r3, r3
  40746c:	4619      	mov	r1, r3
  40746e:	6878      	ldr	r0, [r7, #4]
  407470:	4b6a      	ldr	r3, [pc, #424]	; (40761c <tcp_input+0x26c>)
  407472:	4798      	blx	r3
  407474:	4603      	mov	r3, r0
  407476:	2b00      	cmp	r3, #0
  407478:	f040 82ab 	bne.w	4079d2 <tcp_input+0x622>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = ntohs(tcphdr->src);
  40747c:	4b66      	ldr	r3, [pc, #408]	; (407618 <tcp_input+0x268>)
  40747e:	681c      	ldr	r4, [r3, #0]
  407480:	4b65      	ldr	r3, [pc, #404]	; (407618 <tcp_input+0x268>)
  407482:	681b      	ldr	r3, [r3, #0]
  407484:	881b      	ldrh	r3, [r3, #0]
  407486:	b29b      	uxth	r3, r3
  407488:	4618      	mov	r0, r3
  40748a:	4b69      	ldr	r3, [pc, #420]	; (407630 <tcp_input+0x280>)
  40748c:	4798      	blx	r3
  40748e:	4603      	mov	r3, r0
  407490:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = ntohs(tcphdr->dest);
  407492:	4b61      	ldr	r3, [pc, #388]	; (407618 <tcp_input+0x268>)
  407494:	681c      	ldr	r4, [r3, #0]
  407496:	4b60      	ldr	r3, [pc, #384]	; (407618 <tcp_input+0x268>)
  407498:	681b      	ldr	r3, [r3, #0]
  40749a:	885b      	ldrh	r3, [r3, #2]
  40749c:	b29b      	uxth	r3, r3
  40749e:	4618      	mov	r0, r3
  4074a0:	4b63      	ldr	r3, [pc, #396]	; (407630 <tcp_input+0x280>)
  4074a2:	4798      	blx	r3
  4074a4:	4603      	mov	r3, r0
  4074a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
  4074a8:	4b5b      	ldr	r3, [pc, #364]	; (407618 <tcp_input+0x268>)
  4074aa:	681c      	ldr	r4, [r3, #0]
  4074ac:	4b5a      	ldr	r3, [pc, #360]	; (407618 <tcp_input+0x268>)
  4074ae:	681b      	ldr	r3, [r3, #0]
  4074b0:	685b      	ldr	r3, [r3, #4]
  4074b2:	4618      	mov	r0, r3
  4074b4:	4b5f      	ldr	r3, [pc, #380]	; (407634 <tcp_input+0x284>)
  4074b6:	4798      	blx	r3
  4074b8:	4603      	mov	r3, r0
  4074ba:	6063      	str	r3, [r4, #4]
  4074bc:	6863      	ldr	r3, [r4, #4]
  4074be:	4a5e      	ldr	r2, [pc, #376]	; (407638 <tcp_input+0x288>)
  4074c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
  4074c2:	4b55      	ldr	r3, [pc, #340]	; (407618 <tcp_input+0x268>)
  4074c4:	681c      	ldr	r4, [r3, #0]
  4074c6:	4b54      	ldr	r3, [pc, #336]	; (407618 <tcp_input+0x268>)
  4074c8:	681b      	ldr	r3, [r3, #0]
  4074ca:	689b      	ldr	r3, [r3, #8]
  4074cc:	4618      	mov	r0, r3
  4074ce:	4b59      	ldr	r3, [pc, #356]	; (407634 <tcp_input+0x284>)
  4074d0:	4798      	blx	r3
  4074d2:	4603      	mov	r3, r0
  4074d4:	60a3      	str	r3, [r4, #8]
  4074d6:	68a3      	ldr	r3, [r4, #8]
  4074d8:	4a58      	ldr	r2, [pc, #352]	; (40763c <tcp_input+0x28c>)
  4074da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = ntohs(tcphdr->wnd);
  4074dc:	4b4e      	ldr	r3, [pc, #312]	; (407618 <tcp_input+0x268>)
  4074de:	681c      	ldr	r4, [r3, #0]
  4074e0:	4b4d      	ldr	r3, [pc, #308]	; (407618 <tcp_input+0x268>)
  4074e2:	681b      	ldr	r3, [r3, #0]
  4074e4:	89db      	ldrh	r3, [r3, #14]
  4074e6:	b29b      	uxth	r3, r3
  4074e8:	4618      	mov	r0, r3
  4074ea:	4b51      	ldr	r3, [pc, #324]	; (407630 <tcp_input+0x280>)
  4074ec:	4798      	blx	r3
  4074ee:	4603      	mov	r3, r0
  4074f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  4074f2:	4b49      	ldr	r3, [pc, #292]	; (407618 <tcp_input+0x268>)
  4074f4:	681b      	ldr	r3, [r3, #0]
  4074f6:	899b      	ldrh	r3, [r3, #12]
  4074f8:	b29b      	uxth	r3, r3
  4074fa:	4618      	mov	r0, r3
  4074fc:	4b4c      	ldr	r3, [pc, #304]	; (407630 <tcp_input+0x280>)
  4074fe:	4798      	blx	r3
  407500:	4603      	mov	r3, r0
  407502:	b2db      	uxtb	r3, r3
  407504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  407508:	b2da      	uxtb	r2, r3
  40750a:	4b4d      	ldr	r3, [pc, #308]	; (407640 <tcp_input+0x290>)
  40750c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  40750e:	687b      	ldr	r3, [r7, #4]
  407510:	891a      	ldrh	r2, [r3, #8]
  407512:	4b4b      	ldr	r3, [pc, #300]	; (407640 <tcp_input+0x290>)
  407514:	781b      	ldrb	r3, [r3, #0]
  407516:	f003 0303 	and.w	r3, r3, #3
  40751a:	2b00      	cmp	r3, #0
  40751c:	bf14      	ite	ne
  40751e:	2301      	movne	r3, #1
  407520:	2300      	moveq	r3, #0
  407522:	b2db      	uxtb	r3, r3
  407524:	b29b      	uxth	r3, r3
  407526:	4413      	add	r3, r2
  407528:	b29a      	uxth	r2, r3
  40752a:	4b46      	ldr	r3, [pc, #280]	; (407644 <tcp_input+0x294>)
  40752c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  40752e:	2300      	movs	r3, #0
  407530:	613b      	str	r3, [r7, #16]

  
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  407532:	4b45      	ldr	r3, [pc, #276]	; (407648 <tcp_input+0x298>)
  407534:	681b      	ldr	r3, [r3, #0]
  407536:	617b      	str	r3, [r7, #20]
  407538:	e02f      	b.n	40759a <tcp_input+0x1ea>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
    if (pcb->remote_port == tcphdr->src &&
  40753a:	697b      	ldr	r3, [r7, #20]
  40753c:	8b9a      	ldrh	r2, [r3, #28]
  40753e:	4b36      	ldr	r3, [pc, #216]	; (407618 <tcp_input+0x268>)
  407540:	681b      	ldr	r3, [r3, #0]
  407542:	881b      	ldrh	r3, [r3, #0]
  407544:	b29b      	uxth	r3, r3
  407546:	429a      	cmp	r2, r3
  407548:	d122      	bne.n	407590 <tcp_input+0x1e0>
       pcb->local_port == tcphdr->dest &&
  40754a:	697b      	ldr	r3, [r7, #20]
  40754c:	8b5a      	ldrh	r2, [r3, #26]
  40754e:	4b32      	ldr	r3, [pc, #200]	; (407618 <tcp_input+0x268>)
  407550:	681b      	ldr	r3, [r3, #0]
  407552:	885b      	ldrh	r3, [r3, #2]
  407554:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  407556:	429a      	cmp	r2, r3
  407558:	d11a      	bne.n	407590 <tcp_input+0x1e0>
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40755a:	697b      	ldr	r3, [r7, #20]
  40755c:	685a      	ldr	r2, [r3, #4]
  40755e:	4b32      	ldr	r3, [pc, #200]	; (407628 <tcp_input+0x278>)
  407560:	681b      	ldr	r3, [r3, #0]
       pcb->local_port == tcphdr->dest &&
  407562:	429a      	cmp	r2, r3
  407564:	d114      	bne.n	407590 <tcp_input+0x1e0>
       ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  407566:	697b      	ldr	r3, [r7, #20]
  407568:	681a      	ldr	r2, [r3, #0]
  40756a:	4b2d      	ldr	r3, [pc, #180]	; (407620 <tcp_input+0x270>)
  40756c:	681b      	ldr	r3, [r3, #0]
       ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  40756e:	429a      	cmp	r2, r3
  407570:	d10e      	bne.n	407590 <tcp_input+0x1e0>

      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
      if (prev != NULL) {
  407572:	693b      	ldr	r3, [r7, #16]
  407574:	2b00      	cmp	r3, #0
  407576:	d014      	beq.n	4075a2 <tcp_input+0x1f2>
        prev->next = pcb->next;
  407578:	697b      	ldr	r3, [r7, #20]
  40757a:	68da      	ldr	r2, [r3, #12]
  40757c:	693b      	ldr	r3, [r7, #16]
  40757e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  407580:	4b31      	ldr	r3, [pc, #196]	; (407648 <tcp_input+0x298>)
  407582:	681a      	ldr	r2, [r3, #0]
  407584:	697b      	ldr	r3, [r7, #20]
  407586:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  407588:	4a2f      	ldr	r2, [pc, #188]	; (407648 <tcp_input+0x298>)
  40758a:	697b      	ldr	r3, [r7, #20]
  40758c:	6013      	str	r3, [r2, #0]
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
      break;
  40758e:	e008      	b.n	4075a2 <tcp_input+0x1f2>
    }
    prev = pcb;
  407590:	697b      	ldr	r3, [r7, #20]
  407592:	613b      	str	r3, [r7, #16]
  for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  407594:	697b      	ldr	r3, [r7, #20]
  407596:	68db      	ldr	r3, [r3, #12]
  407598:	617b      	str	r3, [r7, #20]
  40759a:	697b      	ldr	r3, [r7, #20]
  40759c:	2b00      	cmp	r3, #0
  40759e:	d1cc      	bne.n	40753a <tcp_input+0x18a>
  4075a0:	e000      	b.n	4075a4 <tcp_input+0x1f4>
      break;
  4075a2:	bf00      	nop
  }

  if (pcb == NULL) {
  4075a4:	697b      	ldr	r3, [r7, #20]
  4075a6:	2b00      	cmp	r3, #0
  4075a8:	f040 808d 	bne.w	4076c6 <tcp_input+0x316>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4075ac:	4b27      	ldr	r3, [pc, #156]	; (40764c <tcp_input+0x29c>)
  4075ae:	681b      	ldr	r3, [r3, #0]
  4075b0:	617b      	str	r3, [r7, #20]
  4075b2:	e025      	b.n	407600 <tcp_input+0x250>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
      if (pcb->remote_port == tcphdr->src &&
  4075b4:	697b      	ldr	r3, [r7, #20]
  4075b6:	8b9a      	ldrh	r2, [r3, #28]
  4075b8:	4b17      	ldr	r3, [pc, #92]	; (407618 <tcp_input+0x268>)
  4075ba:	681b      	ldr	r3, [r3, #0]
  4075bc:	881b      	ldrh	r3, [r3, #0]
  4075be:	b29b      	uxth	r3, r3
  4075c0:	429a      	cmp	r2, r3
  4075c2:	d11a      	bne.n	4075fa <tcp_input+0x24a>
         pcb->local_port == tcphdr->dest &&
  4075c4:	697b      	ldr	r3, [r7, #20]
  4075c6:	8b5a      	ldrh	r2, [r3, #26]
  4075c8:	4b13      	ldr	r3, [pc, #76]	; (407618 <tcp_input+0x268>)
  4075ca:	681b      	ldr	r3, [r3, #0]
  4075cc:	885b      	ldrh	r3, [r3, #2]
  4075ce:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  4075d0:	429a      	cmp	r2, r3
  4075d2:	d112      	bne.n	4075fa <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4075d4:	697b      	ldr	r3, [r7, #20]
  4075d6:	685a      	ldr	r2, [r3, #4]
  4075d8:	4b13      	ldr	r3, [pc, #76]	; (407628 <tcp_input+0x278>)
  4075da:	681b      	ldr	r3, [r3, #0]
         pcb->local_port == tcphdr->dest &&
  4075dc:	429a      	cmp	r2, r3
  4075de:	d10c      	bne.n	4075fa <tcp_input+0x24a>
         ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
  4075e0:	697b      	ldr	r3, [r7, #20]
  4075e2:	681a      	ldr	r2, [r3, #0]
  4075e4:	4b0e      	ldr	r3, [pc, #56]	; (407620 <tcp_input+0x270>)
  4075e6:	681b      	ldr	r3, [r3, #0]
         ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
  4075e8:	429a      	cmp	r2, r3
  4075ea:	d106      	bne.n	4075fa <tcp_input+0x24a>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  4075ec:	6978      	ldr	r0, [r7, #20]
  4075ee:	4b18      	ldr	r3, [pc, #96]	; (407650 <tcp_input+0x2a0>)
  4075f0:	4798      	blx	r3
        pbuf_free(p);
  4075f2:	6878      	ldr	r0, [r7, #4]
  4075f4:	4b17      	ldr	r3, [pc, #92]	; (407654 <tcp_input+0x2a4>)
  4075f6:	4798      	blx	r3
        return;
  4075f8:	e1f1      	b.n	4079de <tcp_input+0x62e>
    for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  4075fa:	697b      	ldr	r3, [r7, #20]
  4075fc:	68db      	ldr	r3, [r3, #12]
  4075fe:	617b      	str	r3, [r7, #20]
  407600:	697b      	ldr	r3, [r7, #20]
  407602:	2b00      	cmp	r3, #0
  407604:	d1d6      	bne.n	4075b4 <tcp_input+0x204>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  407606:	2300      	movs	r3, #0
  407608:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40760a:	4b13      	ldr	r3, [pc, #76]	; (407658 <tcp_input+0x2a8>)
  40760c:	681b      	ldr	r3, [r3, #0]
  40760e:	60fb      	str	r3, [r7, #12]
  407610:	e03e      	b.n	407690 <tcp_input+0x2e0>
  407612:	bf00      	nop
  407614:	204025e4 	.word	0x204025e4
  407618:	204025e0 	.word	0x204025e0
  40761c:	00405aa5 	.word	0x00405aa5
  407620:	20403974 	.word	0x20403974
  407624:	004043d1 	.word	0x004043d1
  407628:	2040396c 	.word	0x2040396c
  40762c:	00403d09 	.word	0x00403d09
  407630:	00401fc5 	.word	0x00401fc5
  407634:	00402019 	.word	0x00402019
  407638:	204025e8 	.word	0x204025e8
  40763c:	204025ec 	.word	0x204025ec
  407640:	204025f0 	.word	0x204025f0
  407644:	204025f2 	.word	0x204025f2
  407648:	204049a0 	.word	0x204049a0
  40764c:	204049b4 	.word	0x204049b4
  407650:	00407bcd 	.word	0x00407bcd
  407654:	00405b81 	.word	0x00405b81
  407658:	204049a8 	.word	0x204049a8
      if (lpcb->local_port == tcphdr->dest) {
  40765c:	68fb      	ldr	r3, [r7, #12]
  40765e:	8b5a      	ldrh	r2, [r3, #26]
  407660:	4b94      	ldr	r3, [pc, #592]	; (4078b4 <tcp_input+0x504>)
  407662:	681b      	ldr	r3, [r3, #0]
  407664:	885b      	ldrh	r3, [r3, #2]
  407666:	b29b      	uxth	r3, r3
  407668:	429a      	cmp	r2, r3
  40766a:	d10c      	bne.n	407686 <tcp_input+0x2d6>
          /* found an ANY-match */
          lpcb_any = lpcb;
          lpcb_prev = prev;
        }
#else /* SO_REUSE */
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40766c:	68fb      	ldr	r3, [r7, #12]
  40766e:	681a      	ldr	r2, [r3, #0]
  407670:	4b91      	ldr	r3, [pc, #580]	; (4078b8 <tcp_input+0x508>)
  407672:	681b      	ldr	r3, [r3, #0]
  407674:	429a      	cmp	r2, r3
  407676:	d00e      	beq.n	407696 <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  407678:	68fb      	ldr	r3, [r7, #12]
        if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
  40767a:	2b00      	cmp	r3, #0
  40767c:	d00b      	beq.n	407696 <tcp_input+0x2e6>
            ip_addr_isany(&(lpcb->local_ip))) {
  40767e:	68fb      	ldr	r3, [r7, #12]
  407680:	681b      	ldr	r3, [r3, #0]
  407682:	2b00      	cmp	r3, #0
  407684:	d007      	beq.n	407696 <tcp_input+0x2e6>
          /* found a match */
          break;
        }
#endif /* SO_REUSE */
      }
      prev = (struct tcp_pcb *)lpcb;
  407686:	68fb      	ldr	r3, [r7, #12]
  407688:	613b      	str	r3, [r7, #16]
    for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  40768a:	68fb      	ldr	r3, [r7, #12]
  40768c:	68db      	ldr	r3, [r3, #12]
  40768e:	60fb      	str	r3, [r7, #12]
  407690:	68fb      	ldr	r3, [r7, #12]
  407692:	2b00      	cmp	r3, #0
  407694:	d1e2      	bne.n	40765c <tcp_input+0x2ac>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  407696:	68fb      	ldr	r3, [r7, #12]
  407698:	2b00      	cmp	r3, #0
  40769a:	d014      	beq.n	4076c6 <tcp_input+0x316>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  40769c:	693b      	ldr	r3, [r7, #16]
  40769e:	2b00      	cmp	r3, #0
  4076a0:	d00a      	beq.n	4076b8 <tcp_input+0x308>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  4076a2:	68fb      	ldr	r3, [r7, #12]
  4076a4:	68da      	ldr	r2, [r3, #12]
  4076a6:	693b      	ldr	r3, [r7, #16]
  4076a8:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  4076aa:	4b84      	ldr	r3, [pc, #528]	; (4078bc <tcp_input+0x50c>)
  4076ac:	681a      	ldr	r2, [r3, #0]
  4076ae:	68fb      	ldr	r3, [r7, #12]
  4076b0:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  4076b2:	4a82      	ldr	r2, [pc, #520]	; (4078bc <tcp_input+0x50c>)
  4076b4:	68fb      	ldr	r3, [r7, #12]
  4076b6:	6013      	str	r3, [r2, #0]
      }
    
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  4076b8:	68f8      	ldr	r0, [r7, #12]
  4076ba:	4b81      	ldr	r3, [pc, #516]	; (4078c0 <tcp_input+0x510>)
  4076bc:	4798      	blx	r3
      pbuf_free(p);
  4076be:	6878      	ldr	r0, [r7, #4]
  4076c0:	4b80      	ldr	r3, [pc, #512]	; (4078c4 <tcp_input+0x514>)
  4076c2:	4798      	blx	r3
      return;
  4076c4:	e18b      	b.n	4079de <tcp_input+0x62e>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  4076c6:	697b      	ldr	r3, [r7, #20]
  4076c8:	2b00      	cmp	r3, #0
  4076ca:	f000 815a 	beq.w	407982 <tcp_input+0x5d2>
    tcp_debug_print_state(pcb->state);
#endif /* TCP_DEBUG */
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  4076ce:	4b7e      	ldr	r3, [pc, #504]	; (4078c8 <tcp_input+0x518>)
  4076d0:	2200      	movs	r2, #0
  4076d2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
  4076d4:	687b      	ldr	r3, [r7, #4]
  4076d6:	891a      	ldrh	r2, [r3, #8]
  4076d8:	4b7b      	ldr	r3, [pc, #492]	; (4078c8 <tcp_input+0x518>)
  4076da:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
  4076dc:	4a7a      	ldr	r2, [pc, #488]	; (4078c8 <tcp_input+0x518>)
  4076de:	687b      	ldr	r3, [r7, #4]
  4076e0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
  4076e2:	4b74      	ldr	r3, [pc, #464]	; (4078b4 <tcp_input+0x504>)
  4076e4:	681b      	ldr	r3, [r3, #0]
  4076e6:	4a78      	ldr	r2, [pc, #480]	; (4078c8 <tcp_input+0x518>)
  4076e8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
  4076ea:	4b78      	ldr	r3, [pc, #480]	; (4078cc <tcp_input+0x51c>)
  4076ec:	2200      	movs	r2, #0
  4076ee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
  4076f0:	4b77      	ldr	r3, [pc, #476]	; (4078d0 <tcp_input+0x520>)
  4076f2:	2200      	movs	r2, #0
  4076f4:	701a      	strb	r2, [r3, #0]

    if (flags & TCP_PSH) {
  4076f6:	4b77      	ldr	r3, [pc, #476]	; (4078d4 <tcp_input+0x524>)
  4076f8:	781b      	ldrb	r3, [r3, #0]
  4076fa:	f003 0308 	and.w	r3, r3, #8
  4076fe:	2b00      	cmp	r3, #0
  407700:	d006      	beq.n	407710 <tcp_input+0x360>
      p->flags |= PBUF_FLAG_PUSH;
  407702:	687b      	ldr	r3, [r7, #4]
  407704:	7b5b      	ldrb	r3, [r3, #13]
  407706:	f043 0301 	orr.w	r3, r3, #1
  40770a:	b2da      	uxtb	r2, r3
  40770c:	687b      	ldr	r3, [r7, #4]
  40770e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  407710:	697b      	ldr	r3, [r7, #20]
  407712:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  407714:	2b00      	cmp	r3, #0
  407716:	d010      	beq.n	40773a <tcp_input+0x38a>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  407718:	6978      	ldr	r0, [r7, #20]
  40771a:	4b6f      	ldr	r3, [pc, #444]	; (4078d8 <tcp_input+0x528>)
  40771c:	4798      	blx	r3
  40771e:	4603      	mov	r3, r0
  407720:	f113 0f0a 	cmn.w	r3, #10
  407724:	f000 811a 	beq.w	40795c <tcp_input+0x5ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407728:	697b      	ldr	r3, [r7, #20]
  40772a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  40772c:	2b00      	cmp	r3, #0
  40772e:	d004      	beq.n	40773a <tcp_input+0x38a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  407730:	4b6a      	ldr	r3, [pc, #424]	; (4078dc <tcp_input+0x52c>)
  407732:	881b      	ldrh	r3, [r3, #0]
  407734:	2b00      	cmp	r3, #0
  407736:	f040 8111 	bne.w	40795c <tcp_input+0x5ac>
        TCP_STATS_INC(tcp.drop);
        snmp_inc_tcpinerrs();
        goto aborted;
      }
    }
    tcp_input_pcb = pcb;
  40773a:	4a69      	ldr	r2, [pc, #420]	; (4078e0 <tcp_input+0x530>)
  40773c:	697b      	ldr	r3, [r7, #20]
  40773e:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
  407740:	6978      	ldr	r0, [r7, #20]
  407742:	4b68      	ldr	r3, [pc, #416]	; (4078e4 <tcp_input+0x534>)
  407744:	4798      	blx	r3
  407746:	4603      	mov	r3, r0
  407748:	72fb      	strb	r3, [r7, #11]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  40774a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40774e:	f113 0f0a 	cmn.w	r3, #10
  407752:	f000 8103 	beq.w	40795c <tcp_input+0x5ac>
      if (recv_flags & TF_RESET) {
  407756:	4b5e      	ldr	r3, [pc, #376]	; (4078d0 <tcp_input+0x520>)
  407758:	781b      	ldrb	r3, [r3, #0]
  40775a:	f003 0308 	and.w	r3, r3, #8
  40775e:	2b00      	cmp	r3, #0
  407760:	d016      	beq.n	407790 <tcp_input+0x3e0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
  407762:	697b      	ldr	r3, [r7, #20]
  407764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407768:	2b00      	cmp	r3, #0
  40776a:	d008      	beq.n	40777e <tcp_input+0x3ce>
  40776c:	697b      	ldr	r3, [r7, #20]
  40776e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  407772:	697a      	ldr	r2, [r7, #20]
  407774:	6912      	ldr	r2, [r2, #16]
  407776:	f06f 010a 	mvn.w	r1, #10
  40777a:	4610      	mov	r0, r2
  40777c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  40777e:	6979      	ldr	r1, [r7, #20]
  407780:	4859      	ldr	r0, [pc, #356]	; (4078e8 <tcp_input+0x538>)
  407782:	4b5a      	ldr	r3, [pc, #360]	; (4078ec <tcp_input+0x53c>)
  407784:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  407786:	6979      	ldr	r1, [r7, #20]
  407788:	2001      	movs	r0, #1
  40778a:	4b59      	ldr	r3, [pc, #356]	; (4078f0 <tcp_input+0x540>)
  40778c:	4798      	blx	r3
  40778e:	e0e5      	b.n	40795c <tcp_input+0x5ac>
      } else if (recv_flags & TF_CLOSED) {
  407790:	4b4f      	ldr	r3, [pc, #316]	; (4078d0 <tcp_input+0x520>)
  407792:	781b      	ldrb	r3, [r3, #0]
  407794:	f003 0310 	and.w	r3, r3, #16
  407798:	2b00      	cmp	r3, #0
  40779a:	d01c      	beq.n	4077d6 <tcp_input+0x426>
        /* The connection has been closed and we will deallocate the
           PCB. */
        if (!(pcb->flags & TF_RXCLOSED)) {
  40779c:	697b      	ldr	r3, [r7, #20]
  40779e:	7f9b      	ldrb	r3, [r3, #30]
  4077a0:	f003 0310 	and.w	r3, r3, #16
  4077a4:	2b00      	cmp	r3, #0
  4077a6:	d10d      	bne.n	4077c4 <tcp_input+0x414>
          /* Connection closed although the application has only shut down the
             tx side: call the PCB's err callback and indicate the closure to
             ensure the application doesn't continue using the PCB. */
          TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
  4077a8:	697b      	ldr	r3, [r7, #20]
  4077aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4077ae:	2b00      	cmp	r3, #0
  4077b0:	d008      	beq.n	4077c4 <tcp_input+0x414>
  4077b2:	697b      	ldr	r3, [r7, #20]
  4077b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  4077b8:	697a      	ldr	r2, [r7, #20]
  4077ba:	6912      	ldr	r2, [r2, #16]
  4077bc:	f06f 010b 	mvn.w	r1, #11
  4077c0:	4610      	mov	r0, r2
  4077c2:	4798      	blx	r3
        }
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  4077c4:	6979      	ldr	r1, [r7, #20]
  4077c6:	4848      	ldr	r0, [pc, #288]	; (4078e8 <tcp_input+0x538>)
  4077c8:	4b48      	ldr	r3, [pc, #288]	; (4078ec <tcp_input+0x53c>)
  4077ca:	4798      	blx	r3
        memp_free(MEMP_TCP_PCB, pcb);
  4077cc:	6979      	ldr	r1, [r7, #20]
  4077ce:	2001      	movs	r0, #1
  4077d0:	4b47      	ldr	r3, [pc, #284]	; (4078f0 <tcp_input+0x540>)
  4077d2:	4798      	blx	r3
  4077d4:	e0c2      	b.n	40795c <tcp_input+0x5ac>
      } else {
        err = ERR_OK;
  4077d6:	2300      	movs	r3, #0
  4077d8:	72fb      	strb	r3, [r7, #11]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (pcb->acked > 0) {
  4077da:	697b      	ldr	r3, [r7, #20]
  4077dc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4077e0:	2b00      	cmp	r3, #0
  4077e2:	d017      	beq.n	407814 <tcp_input+0x464>
          TCP_EVENT_SENT(pcb, pcb->acked, err);
  4077e4:	697b      	ldr	r3, [r7, #20]
  4077e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  4077e8:	2b00      	cmp	r3, #0
  4077ea:	d00b      	beq.n	407804 <tcp_input+0x454>
  4077ec:	697b      	ldr	r3, [r7, #20]
  4077ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  4077f0:	697a      	ldr	r2, [r7, #20]
  4077f2:	6910      	ldr	r0, [r2, #16]
  4077f4:	697a      	ldr	r2, [r7, #20]
  4077f6:	f8b2 2064 	ldrh.w	r2, [r2, #100]	; 0x64
  4077fa:	6979      	ldr	r1, [r7, #20]
  4077fc:	4798      	blx	r3
  4077fe:	4603      	mov	r3, r0
  407800:	72fb      	strb	r3, [r7, #11]
  407802:	e001      	b.n	407808 <tcp_input+0x458>
  407804:	2300      	movs	r3, #0
  407806:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407808:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40780c:	f113 0f0a 	cmn.w	r3, #10
  407810:	f000 809f 	beq.w	407952 <tcp_input+0x5a2>
            goto aborted;
          }
        }

        if (recv_data != NULL) {
  407814:	4b2d      	ldr	r3, [pc, #180]	; (4078cc <tcp_input+0x51c>)
  407816:	681b      	ldr	r3, [r3, #0]
  407818:	2b00      	cmp	r3, #0
  40781a:	d036      	beq.n	40788a <tcp_input+0x4da>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
          if (pcb->flags & TF_RXCLOSED) {
  40781c:	697b      	ldr	r3, [r7, #20]
  40781e:	7f9b      	ldrb	r3, [r3, #30]
  407820:	f003 0310 	and.w	r3, r3, #16
  407824:	2b00      	cmp	r3, #0
  407826:	d008      	beq.n	40783a <tcp_input+0x48a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  407828:	4b28      	ldr	r3, [pc, #160]	; (4078cc <tcp_input+0x51c>)
  40782a:	681b      	ldr	r3, [r3, #0]
  40782c:	4618      	mov	r0, r3
  40782e:	4b25      	ldr	r3, [pc, #148]	; (4078c4 <tcp_input+0x514>)
  407830:	4798      	blx	r3
            tcp_abort(pcb);
  407832:	6978      	ldr	r0, [r7, #20]
  407834:	4b2f      	ldr	r3, [pc, #188]	; (4078f4 <tcp_input+0x544>)
  407836:	4798      	blx	r3
            goto aborted;
  407838:	e090      	b.n	40795c <tcp_input+0x5ac>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  40783a:	697b      	ldr	r3, [r7, #20]
  40783c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  407840:	2b00      	cmp	r3, #0
  407842:	d00c      	beq.n	40785e <tcp_input+0x4ae>
  407844:	697b      	ldr	r3, [r7, #20]
  407846:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  40784a:	697b      	ldr	r3, [r7, #20]
  40784c:	6918      	ldr	r0, [r3, #16]
  40784e:	4b1f      	ldr	r3, [pc, #124]	; (4078cc <tcp_input+0x51c>)
  407850:	681a      	ldr	r2, [r3, #0]
  407852:	2300      	movs	r3, #0
  407854:	6979      	ldr	r1, [r7, #20]
  407856:	47a0      	blx	r4
  407858:	4603      	mov	r3, r0
  40785a:	72fb      	strb	r3, [r7, #11]
  40785c:	e008      	b.n	407870 <tcp_input+0x4c0>
  40785e:	4b1b      	ldr	r3, [pc, #108]	; (4078cc <tcp_input+0x51c>)
  407860:	681a      	ldr	r2, [r3, #0]
  407862:	2300      	movs	r3, #0
  407864:	6979      	ldr	r1, [r7, #20]
  407866:	2000      	movs	r0, #0
  407868:	4c23      	ldr	r4, [pc, #140]	; (4078f8 <tcp_input+0x548>)
  40786a:	47a0      	blx	r4
  40786c:	4603      	mov	r3, r0
  40786e:	72fb      	strb	r3, [r7, #11]
          if (err == ERR_ABRT) {
  407870:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407874:	f113 0f0a 	cmn.w	r3, #10
  407878:	d06d      	beq.n	407956 <tcp_input+0x5a6>
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  40787a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40787e:	2b00      	cmp	r3, #0
  407880:	d003      	beq.n	40788a <tcp_input+0x4da>
            pcb->refused_data = recv_data;
  407882:	4b12      	ldr	r3, [pc, #72]	; (4078cc <tcp_input+0x51c>)
  407884:	681a      	ldr	r2, [r3, #0]
  407886:	697b      	ldr	r3, [r7, #20]
  407888:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  40788a:	4b11      	ldr	r3, [pc, #68]	; (4078d0 <tcp_input+0x520>)
  40788c:	781b      	ldrb	r3, [r3, #0]
  40788e:	f003 0320 	and.w	r3, r3, #32
  407892:	2b00      	cmp	r3, #0
  407894:	d056      	beq.n	407944 <tcp_input+0x594>
          if (pcb->refused_data != NULL) {
  407896:	697b      	ldr	r3, [r7, #20]
  407898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  40789a:	2b00      	cmp	r3, #0
  40789c:	d02e      	beq.n	4078fc <tcp_input+0x54c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  40789e:	697b      	ldr	r3, [r7, #20]
  4078a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  4078a2:	697a      	ldr	r2, [r7, #20]
  4078a4:	6f92      	ldr	r2, [r2, #120]	; 0x78
  4078a6:	7b52      	ldrb	r2, [r2, #13]
  4078a8:	f042 0220 	orr.w	r2, r2, #32
  4078ac:	b2d2      	uxtb	r2, r2
  4078ae:	735a      	strb	r2, [r3, #13]
  4078b0:	e048      	b.n	407944 <tcp_input+0x594>
  4078b2:	bf00      	nop
  4078b4:	204025e0 	.word	0x204025e0
  4078b8:	20403974 	.word	0x20403974
  4078bc:	204049a8 	.word	0x204049a8
  4078c0:	00407a19 	.word	0x00407a19
  4078c4:	00405b81 	.word	0x00405b81
  4078c8:	204025d0 	.word	0x204025d0
  4078cc:	204025f8 	.word	0x204025f8
  4078d0:	204025f4 	.word	0x204025f4
  4078d4:	204025f0 	.word	0x204025f0
  4078d8:	00406d3d 	.word	0x00406d3d
  4078dc:	204025f2 	.word	0x204025f2
  4078e0:	204049b8 	.word	0x204049b8
  4078e4:	00407ca9 	.word	0x00407ca9
  4078e8:	204049a0 	.word	0x204049a0
  4078ec:	00407299 	.word	0x00407299
  4078f0:	004054e5 	.word	0x004054e5
  4078f4:	00406285 	.word	0x00406285
  4078f8:	00406ed9 	.word	0x00406ed9
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND) {
  4078fc:	697b      	ldr	r3, [r7, #20]
  4078fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  407900:	f640 3268 	movw	r2, #2920	; 0xb68
  407904:	4293      	cmp	r3, r2
  407906:	d005      	beq.n	407914 <tcp_input+0x564>
              pcb->rcv_wnd++;
  407908:	697b      	ldr	r3, [r7, #20]
  40790a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
  40790c:	3301      	adds	r3, #1
  40790e:	b29a      	uxth	r2, r3
  407910:	697b      	ldr	r3, [r7, #20]
  407912:	859a      	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  407914:	697b      	ldr	r3, [r7, #20]
  407916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  40791a:	2b00      	cmp	r3, #0
  40791c:	d00b      	beq.n	407936 <tcp_input+0x586>
  40791e:	697b      	ldr	r3, [r7, #20]
  407920:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  407924:	697b      	ldr	r3, [r7, #20]
  407926:	6918      	ldr	r0, [r3, #16]
  407928:	2300      	movs	r3, #0
  40792a:	2200      	movs	r2, #0
  40792c:	6979      	ldr	r1, [r7, #20]
  40792e:	47a0      	blx	r4
  407930:	4603      	mov	r3, r0
  407932:	72fb      	strb	r3, [r7, #11]
  407934:	e001      	b.n	40793a <tcp_input+0x58a>
  407936:	2300      	movs	r3, #0
  407938:	72fb      	strb	r3, [r7, #11]
            if (err == ERR_ABRT) {
  40793a:	f997 300b 	ldrsb.w	r3, [r7, #11]
  40793e:	f113 0f0a 	cmn.w	r3, #10
  407942:	d00a      	beq.n	40795a <tcp_input+0x5aa>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  407944:	4b27      	ldr	r3, [pc, #156]	; (4079e4 <tcp_input+0x634>)
  407946:	2200      	movs	r2, #0
  407948:	601a      	str	r2, [r3, #0]
        /* Try to send something out. */
        tcp_output(pcb);
  40794a:	6978      	ldr	r0, [r7, #20]
  40794c:	4b26      	ldr	r3, [pc, #152]	; (4079e8 <tcp_input+0x638>)
  40794e:	4798      	blx	r3
  407950:	e004      	b.n	40795c <tcp_input+0x5ac>
            goto aborted;
  407952:	bf00      	nop
  407954:	e002      	b.n	40795c <tcp_input+0x5ac>
            goto aborted;
  407956:	bf00      	nop
  407958:	e000      	b.n	40795c <tcp_input+0x5ac>
              goto aborted;
  40795a:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
  40795c:	4b21      	ldr	r3, [pc, #132]	; (4079e4 <tcp_input+0x634>)
  40795e:	2200      	movs	r2, #0
  407960:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
  407962:	4b22      	ldr	r3, [pc, #136]	; (4079ec <tcp_input+0x63c>)
  407964:	2200      	movs	r2, #0
  407966:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  407968:	4b21      	ldr	r3, [pc, #132]	; (4079f0 <tcp_input+0x640>)
  40796a:	685b      	ldr	r3, [r3, #4]
  40796c:	2b00      	cmp	r3, #0
  40796e:	d035      	beq.n	4079dc <tcp_input+0x62c>
    {
      pbuf_free(inseg.p);
  407970:	4b1f      	ldr	r3, [pc, #124]	; (4079f0 <tcp_input+0x640>)
  407972:	685b      	ldr	r3, [r3, #4]
  407974:	4618      	mov	r0, r3
  407976:	4b1f      	ldr	r3, [pc, #124]	; (4079f4 <tcp_input+0x644>)
  407978:	4798      	blx	r3
      inseg.p = NULL;
  40797a:	4b1d      	ldr	r3, [pc, #116]	; (4079f0 <tcp_input+0x640>)
  40797c:	2200      	movs	r2, #0
  40797e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  407980:	e02c      	b.n	4079dc <tcp_input+0x62c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  407982:	4b1d      	ldr	r3, [pc, #116]	; (4079f8 <tcp_input+0x648>)
  407984:	681b      	ldr	r3, [r3, #0]
  407986:	899b      	ldrh	r3, [r3, #12]
  407988:	b29b      	uxth	r3, r3
  40798a:	4618      	mov	r0, r3
  40798c:	4b1b      	ldr	r3, [pc, #108]	; (4079fc <tcp_input+0x64c>)
  40798e:	4798      	blx	r3
  407990:	4603      	mov	r3, r0
  407992:	f003 0304 	and.w	r3, r3, #4
  407996:	2b00      	cmp	r3, #0
  407998:	d115      	bne.n	4079c6 <tcp_input+0x616>
      tcp_rst(ackno, seqno + tcplen,
  40799a:	4b19      	ldr	r3, [pc, #100]	; (407a00 <tcp_input+0x650>)
  40799c:	6818      	ldr	r0, [r3, #0]
  40799e:	4b19      	ldr	r3, [pc, #100]	; (407a04 <tcp_input+0x654>)
  4079a0:	881b      	ldrh	r3, [r3, #0]
  4079a2:	461a      	mov	r2, r3
  4079a4:	4b18      	ldr	r3, [pc, #96]	; (407a08 <tcp_input+0x658>)
  4079a6:	681b      	ldr	r3, [r3, #0]
  4079a8:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  4079aa:	4b13      	ldr	r3, [pc, #76]	; (4079f8 <tcp_input+0x648>)
  4079ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen,
  4079ae:	885b      	ldrh	r3, [r3, #2]
  4079b0:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  4079b2:	4a11      	ldr	r2, [pc, #68]	; (4079f8 <tcp_input+0x648>)
  4079b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen,
  4079b6:	8812      	ldrh	r2, [r2, #0]
  4079b8:	b292      	uxth	r2, r2
  4079ba:	9201      	str	r2, [sp, #4]
  4079bc:	9300      	str	r3, [sp, #0]
  4079be:	4b13      	ldr	r3, [pc, #76]	; (407a0c <tcp_input+0x65c>)
  4079c0:	4a13      	ldr	r2, [pc, #76]	; (407a10 <tcp_input+0x660>)
  4079c2:	4c14      	ldr	r4, [pc, #80]	; (407a14 <tcp_input+0x664>)
  4079c4:	47a0      	blx	r4
    pbuf_free(p);
  4079c6:	6878      	ldr	r0, [r7, #4]
  4079c8:	4b0a      	ldr	r3, [pc, #40]	; (4079f4 <tcp_input+0x644>)
  4079ca:	4798      	blx	r3
  return;
  4079cc:	e006      	b.n	4079dc <tcp_input+0x62c>
    goto dropped;
  4079ce:	bf00      	nop
  4079d0:	e000      	b.n	4079d4 <tcp_input+0x624>
    goto dropped;
  4079d2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  snmp_inc_tcpinerrs();
  pbuf_free(p);
  4079d4:	6878      	ldr	r0, [r7, #4]
  4079d6:	4b07      	ldr	r3, [pc, #28]	; (4079f4 <tcp_input+0x644>)
  4079d8:	4798      	blx	r3
  4079da:	e000      	b.n	4079de <tcp_input+0x62e>
  return;
  4079dc:	bf00      	nop
}
  4079de:	371c      	adds	r7, #28
  4079e0:	46bd      	mov	sp, r7
  4079e2:	bd90      	pop	{r4, r7, pc}
  4079e4:	204049b8 	.word	0x204049b8
  4079e8:	00409e75 	.word	0x00409e75
  4079ec:	204025f8 	.word	0x204025f8
  4079f0:	204025d0 	.word	0x204025d0
  4079f4:	00405b81 	.word	0x00405b81
  4079f8:	204025e0 	.word	0x204025e0
  4079fc:	00401fc5 	.word	0x00401fc5
  407a00:	204025ec 	.word	0x204025ec
  407a04:	204025f2 	.word	0x204025f2
  407a08:	204025e8 	.word	0x204025e8
  407a0c:	2040396c 	.word	0x2040396c
  407a10:	20403974 	.word	0x20403974
  407a14:	0040a2c1 	.word	0x0040a2c1

00407a18 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  407a18:	b590      	push	{r4, r7, lr}
  407a1a:	b087      	sub	sp, #28
  407a1c:	af02      	add	r7, sp, #8
  407a1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  err_t rc;

  if (flags & TCP_RST) {
  407a20:	4b59      	ldr	r3, [pc, #356]	; (407b88 <tcp_listen_input+0x170>)
  407a22:	781b      	ldrb	r3, [r3, #0]
  407a24:	f003 0304 	and.w	r3, r3, #4
  407a28:	2b00      	cmp	r3, #0
  407a2a:	d001      	beq.n	407a30 <tcp_listen_input+0x18>
    /* An incoming RST should be ignored. Return. */
    return ERR_OK;
  407a2c:	2300      	movs	r3, #0
  407a2e:	e0a7      	b.n	407b80 <tcp_listen_input+0x168>
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  407a30:	4b55      	ldr	r3, [pc, #340]	; (407b88 <tcp_listen_input+0x170>)
  407a32:	781b      	ldrb	r3, [r3, #0]
  407a34:	f003 0310 	and.w	r3, r3, #16
  407a38:	2b00      	cmp	r3, #0
  407a3a:	d016      	beq.n	407a6a <tcp_listen_input+0x52>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407a3c:	4b53      	ldr	r3, [pc, #332]	; (407b8c <tcp_listen_input+0x174>)
  407a3e:	6818      	ldr	r0, [r3, #0]
  407a40:	4b53      	ldr	r3, [pc, #332]	; (407b90 <tcp_listen_input+0x178>)
  407a42:	881b      	ldrh	r3, [r3, #0]
  407a44:	461a      	mov	r2, r3
  407a46:	4b53      	ldr	r3, [pc, #332]	; (407b94 <tcp_listen_input+0x17c>)
  407a48:	681b      	ldr	r3, [r3, #0]
  407a4a:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  407a4c:	4b52      	ldr	r3, [pc, #328]	; (407b98 <tcp_listen_input+0x180>)
  407a4e:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407a50:	885b      	ldrh	r3, [r3, #2]
  407a52:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  407a54:	4a50      	ldr	r2, [pc, #320]	; (407b98 <tcp_listen_input+0x180>)
  407a56:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  407a58:	8812      	ldrh	r2, [r2, #0]
  407a5a:	b292      	uxth	r2, r2
  407a5c:	9201      	str	r2, [sp, #4]
  407a5e:	9300      	str	r3, [sp, #0]
  407a60:	4b4e      	ldr	r3, [pc, #312]	; (407b9c <tcp_listen_input+0x184>)
  407a62:	4a4f      	ldr	r2, [pc, #316]	; (407ba0 <tcp_listen_input+0x188>)
  407a64:	4c4f      	ldr	r4, [pc, #316]	; (407ba4 <tcp_listen_input+0x18c>)
  407a66:	47a0      	blx	r4
  407a68:	e089      	b.n	407b7e <tcp_listen_input+0x166>
  } else if (flags & TCP_SYN) {
  407a6a:	4b47      	ldr	r3, [pc, #284]	; (407b88 <tcp_listen_input+0x170>)
  407a6c:	781b      	ldrb	r3, [r3, #0]
  407a6e:	f003 0302 	and.w	r3, r3, #2
  407a72:	2b00      	cmp	r3, #0
  407a74:	f000 8083 	beq.w	407b7e <tcp_listen_input+0x166>
    if (pcb->accepts_pending >= pcb->backlog) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
      return ERR_ABRT;
    }
#endif /* TCP_LISTEN_BACKLOG */
    npcb = tcp_alloc(pcb->prio);
  407a78:	687b      	ldr	r3, [r7, #4]
  407a7a:	7e5b      	ldrb	r3, [r3, #25]
  407a7c:	4618      	mov	r0, r3
  407a7e:	4b4a      	ldr	r3, [pc, #296]	; (407ba8 <tcp_listen_input+0x190>)
  407a80:	4798      	blx	r3
  407a82:	60f8      	str	r0, [r7, #12]
    /* If a new PCB could not be created (probably due to lack of memory),
       we don't do anything, but rely on the sender will retransmit the
       SYN at a time when we have more memory available. */
    if (npcb == NULL) {
  407a84:	68fb      	ldr	r3, [r7, #12]
  407a86:	2b00      	cmp	r3, #0
  407a88:	d102      	bne.n	407a90 <tcp_listen_input+0x78>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
      TCP_STATS_INC(tcp.memerr);
      return ERR_MEM;
  407a8a:	f04f 33ff 	mov.w	r3, #4294967295
  407a8e:	e077      	b.n	407b80 <tcp_listen_input+0x168>
    }
#if TCP_LISTEN_BACKLOG
    pcb->accepts_pending++;
#endif /* TCP_LISTEN_BACKLOG */
    /* Set up the new PCB. */
    ip_addr_copy(npcb->local_ip, current_iphdr_dest);
  407a90:	4b43      	ldr	r3, [pc, #268]	; (407ba0 <tcp_listen_input+0x188>)
  407a92:	681a      	ldr	r2, [r3, #0]
  407a94:	68fb      	ldr	r3, [r7, #12]
  407a96:	601a      	str	r2, [r3, #0]
    npcb->local_port = pcb->local_port;
  407a98:	687b      	ldr	r3, [r7, #4]
  407a9a:	8b5a      	ldrh	r2, [r3, #26]
  407a9c:	68fb      	ldr	r3, [r7, #12]
  407a9e:	835a      	strh	r2, [r3, #26]
    ip_addr_copy(npcb->remote_ip, current_iphdr_src);
  407aa0:	4b3e      	ldr	r3, [pc, #248]	; (407b9c <tcp_listen_input+0x184>)
  407aa2:	681a      	ldr	r2, [r3, #0]
  407aa4:	68fb      	ldr	r3, [r7, #12]
  407aa6:	605a      	str	r2, [r3, #4]
    npcb->remote_port = tcphdr->src;
  407aa8:	4b3b      	ldr	r3, [pc, #236]	; (407b98 <tcp_listen_input+0x180>)
  407aaa:	681b      	ldr	r3, [r3, #0]
  407aac:	881b      	ldrh	r3, [r3, #0]
  407aae:	b29a      	uxth	r2, r3
  407ab0:	68fb      	ldr	r3, [r7, #12]
  407ab2:	839a      	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  407ab4:	68fb      	ldr	r3, [r7, #12]
  407ab6:	2203      	movs	r2, #3
  407ab8:	761a      	strb	r2, [r3, #24]
    npcb->rcv_nxt = seqno + 1;
  407aba:	4b36      	ldr	r3, [pc, #216]	; (407b94 <tcp_listen_input+0x17c>)
  407abc:	681b      	ldr	r3, [r3, #0]
  407abe:	1c5a      	adds	r2, r3, #1
  407ac0:	68fb      	ldr	r3, [r7, #12]
  407ac2:	629a      	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  407ac4:	68fb      	ldr	r3, [r7, #12]
  407ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407ac8:	68fb      	ldr	r3, [r7, #12]
  407aca:	631a      	str	r2, [r3, #48]	; 0x30
    npcb->snd_wnd = tcphdr->wnd;
  407acc:	4b32      	ldr	r3, [pc, #200]	; (407b98 <tcp_listen_input+0x180>)
  407ace:	681b      	ldr	r3, [r3, #0]
  407ad0:	89db      	ldrh	r3, [r3, #14]
  407ad2:	b29a      	uxth	r2, r3
  407ad4:	68fb      	ldr	r3, [r7, #12]
  407ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = tcphdr->wnd;
  407ada:	4b2f      	ldr	r3, [pc, #188]	; (407b98 <tcp_listen_input+0x180>)
  407adc:	681b      	ldr	r3, [r3, #0]
  407ade:	89db      	ldrh	r3, [r3, #14]
  407ae0:	b29a      	uxth	r2, r3
  407ae2:	68fb      	ldr	r3, [r7, #12]
  407ae4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->ssthresh = npcb->snd_wnd;
  407ae8:	68fb      	ldr	r3, [r7, #12]
  407aea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  407aee:	68fb      	ldr	r3, [r7, #12]
  407af0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  407af4:	4b27      	ldr	r3, [pc, #156]	; (407b94 <tcp_listen_input+0x17c>)
  407af6:	681b      	ldr	r3, [r3, #0]
  407af8:	1e5a      	subs	r2, r3, #1
  407afa:	68fb      	ldr	r3, [r7, #12]
  407afc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  407afe:	687b      	ldr	r3, [r7, #4]
  407b00:	691a      	ldr	r2, [r3, #16]
  407b02:	68fb      	ldr	r3, [r7, #12]
  407b04:	611a      	str	r2, [r3, #16]
#if LWIP_CALLBACK_API
    npcb->accept = pcb->accept;
  407b06:	687b      	ldr	r3, [r7, #4]
  407b08:	695a      	ldr	r2, [r3, #20]
  407b0a:	68fb      	ldr	r3, [r7, #12]
  407b0c:	615a      	str	r2, [r3, #20]
#endif /* LWIP_CALLBACK_API */
    /* inherit socket options */
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  407b0e:	687b      	ldr	r3, [r7, #4]
  407b10:	7a1b      	ldrb	r3, [r3, #8]
  407b12:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  407b16:	b2da      	uxtb	r2, r3
  407b18:	68fb      	ldr	r3, [r7, #12]
  407b1a:	721a      	strb	r2, [r3, #8]
    /* Register the new PCB so that we can begin receiving segments
       for it. */
    TCP_REG_ACTIVE(npcb);
  407b1c:	4b23      	ldr	r3, [pc, #140]	; (407bac <tcp_listen_input+0x194>)
  407b1e:	681a      	ldr	r2, [r3, #0]
  407b20:	68fb      	ldr	r3, [r7, #12]
  407b22:	60da      	str	r2, [r3, #12]
  407b24:	4a21      	ldr	r2, [pc, #132]	; (407bac <tcp_listen_input+0x194>)
  407b26:	68fb      	ldr	r3, [r7, #12]
  407b28:	6013      	str	r3, [r2, #0]
  407b2a:	4b21      	ldr	r3, [pc, #132]	; (407bb0 <tcp_listen_input+0x198>)
  407b2c:	4798      	blx	r3
  407b2e:	4b21      	ldr	r3, [pc, #132]	; (407bb4 <tcp_listen_input+0x19c>)
  407b30:	2201      	movs	r2, #1
  407b32:	701a      	strb	r2, [r3, #0]

    /* Parse any options in the SYN. */
    tcp_parseopt(npcb);
  407b34:	68f8      	ldr	r0, [r7, #12]
  407b36:	4b20      	ldr	r3, [pc, #128]	; (407bb8 <tcp_listen_input+0x1a0>)
  407b38:	4798      	blx	r3
#if TCP_CALCULATE_EFF_SEND_MSS
    npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
  407b3a:	68fb      	ldr	r3, [r7, #12]
  407b3c:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  407b3e:	68fb      	ldr	r3, [r7, #12]
  407b40:	3304      	adds	r3, #4
  407b42:	4619      	mov	r1, r3
  407b44:	4610      	mov	r0, r2
  407b46:	4b1d      	ldr	r3, [pc, #116]	; (407bbc <tcp_listen_input+0x1a4>)
  407b48:	4798      	blx	r3
  407b4a:	4603      	mov	r3, r0
  407b4c:	461a      	mov	r2, r3
  407b4e:	68fb      	ldr	r3, [r7, #12]
  407b50:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

    snmp_inc_tcppassiveopens();

    /* Send a SYN|ACK together with the MSS option. */
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  407b52:	2112      	movs	r1, #18
  407b54:	68f8      	ldr	r0, [r7, #12]
  407b56:	4b1a      	ldr	r3, [pc, #104]	; (407bc0 <tcp_listen_input+0x1a8>)
  407b58:	4798      	blx	r3
  407b5a:	4603      	mov	r3, r0
  407b5c:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
  407b5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407b62:	2b00      	cmp	r3, #0
  407b64:	d006      	beq.n	407b74 <tcp_listen_input+0x15c>
      tcp_abandon(npcb, 0);
  407b66:	2100      	movs	r1, #0
  407b68:	68f8      	ldr	r0, [r7, #12]
  407b6a:	4b16      	ldr	r3, [pc, #88]	; (407bc4 <tcp_listen_input+0x1ac>)
  407b6c:	4798      	blx	r3
      return rc;
  407b6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
  407b72:	e005      	b.n	407b80 <tcp_listen_input+0x168>
    }
    return tcp_output(npcb);
  407b74:	68f8      	ldr	r0, [r7, #12]
  407b76:	4b14      	ldr	r3, [pc, #80]	; (407bc8 <tcp_listen_input+0x1b0>)
  407b78:	4798      	blx	r3
  407b7a:	4603      	mov	r3, r0
  407b7c:	e000      	b.n	407b80 <tcp_listen_input+0x168>
  }
  return ERR_OK;
  407b7e:	2300      	movs	r3, #0
}
  407b80:	4618      	mov	r0, r3
  407b82:	3714      	adds	r7, #20
  407b84:	46bd      	mov	sp, r7
  407b86:	bd90      	pop	{r4, r7, pc}
  407b88:	204025f0 	.word	0x204025f0
  407b8c:	204025ec 	.word	0x204025ec
  407b90:	204025f2 	.word	0x204025f2
  407b94:	204025e8 	.word	0x204025e8
  407b98:	204025e0 	.word	0x204025e0
  407b9c:	2040396c 	.word	0x2040396c
  407ba0:	20403974 	.word	0x20403974
  407ba4:	0040a2c1 	.word	0x0040a2c1
  407ba8:	00407011 	.word	0x00407011
  407bac:	204049a0 	.word	0x204049a0
  407bb0:	00404d75 	.word	0x00404d75
  407bb4:	2040499c 	.word	0x2040499c
  407bb8:	00409341 	.word	0x00409341
  407bbc:	0040736d 	.word	0x0040736d
  407bc0:	00409c41 	.word	0x00409c41
  407bc4:	004061a1 	.word	0x004061a1
  407bc8:	00409e75 	.word	0x00409e75

00407bcc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_timewait_input(struct tcp_pcb *pcb)
{
  407bcc:	b590      	push	{r4, r7, lr}
  407bce:	b085      	sub	sp, #20
  407bd0:	af02      	add	r7, sp, #8
  407bd2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST)  {
  407bd4:	4b2a      	ldr	r3, [pc, #168]	; (407c80 <tcp_timewait_input+0xb4>)
  407bd6:	781b      	ldrb	r3, [r3, #0]
  407bd8:	f003 0304 	and.w	r3, r3, #4
  407bdc:	2b00      	cmp	r3, #0
  407bde:	d001      	beq.n	407be4 <tcp_timewait_input+0x18>
    return ERR_OK;
  407be0:	2300      	movs	r3, #0
  407be2:	e049      	b.n	407c78 <tcp_timewait_input+0xac>
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  407be4:	4b26      	ldr	r3, [pc, #152]	; (407c80 <tcp_timewait_input+0xb4>)
  407be6:	781b      	ldrb	r3, [r3, #0]
  407be8:	f003 0302 	and.w	r3, r3, #2
  407bec:	2b00      	cmp	r3, #0
  407bee:	d028      	beq.n	407c42 <tcp_timewait_input+0x76>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
  407bf0:	4b24      	ldr	r3, [pc, #144]	; (407c84 <tcp_timewait_input+0xb8>)
  407bf2:	681a      	ldr	r2, [r3, #0]
  407bf4:	687b      	ldr	r3, [r7, #4]
  407bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407bf8:	1ad3      	subs	r3, r2, r3
  407bfa:	2b00      	cmp	r3, #0
  407bfc:	db2b      	blt.n	407c56 <tcp_timewait_input+0x8a>
  407bfe:	4b21      	ldr	r3, [pc, #132]	; (407c84 <tcp_timewait_input+0xb8>)
  407c00:	681a      	ldr	r2, [r3, #0]
  407c02:	687b      	ldr	r3, [r7, #4]
  407c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407c06:	6879      	ldr	r1, [r7, #4]
  407c08:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  407c0a:	440b      	add	r3, r1
  407c0c:	1ad3      	subs	r3, r2, r3
  407c0e:	2b00      	cmp	r3, #0
  407c10:	dc21      	bgt.n	407c56 <tcp_timewait_input+0x8a>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c12:	4b1d      	ldr	r3, [pc, #116]	; (407c88 <tcp_timewait_input+0xbc>)
  407c14:	6818      	ldr	r0, [r3, #0]
  407c16:	4b1d      	ldr	r3, [pc, #116]	; (407c8c <tcp_timewait_input+0xc0>)
  407c18:	881b      	ldrh	r3, [r3, #0]
  407c1a:	461a      	mov	r2, r3
  407c1c:	4b19      	ldr	r3, [pc, #100]	; (407c84 <tcp_timewait_input+0xb8>)
  407c1e:	681b      	ldr	r3, [r3, #0]
  407c20:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  407c22:	4b1b      	ldr	r3, [pc, #108]	; (407c90 <tcp_timewait_input+0xc4>)
  407c24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c26:	885b      	ldrh	r3, [r3, #2]
  407c28:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  407c2a:	4a19      	ldr	r2, [pc, #100]	; (407c90 <tcp_timewait_input+0xc4>)
  407c2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407c2e:	8812      	ldrh	r2, [r2, #0]
  407c30:	b292      	uxth	r2, r2
  407c32:	9201      	str	r2, [sp, #4]
  407c34:	9300      	str	r3, [sp, #0]
  407c36:	4b17      	ldr	r3, [pc, #92]	; (407c94 <tcp_timewait_input+0xc8>)
  407c38:	4a17      	ldr	r2, [pc, #92]	; (407c98 <tcp_timewait_input+0xcc>)
  407c3a:	4c18      	ldr	r4, [pc, #96]	; (407c9c <tcp_timewait_input+0xd0>)
  407c3c:	47a0      	blx	r4
      return ERR_OK;
  407c3e:	2300      	movs	r3, #0
  407c40:	e01a      	b.n	407c78 <tcp_timewait_input+0xac>
    }
  } else if (flags & TCP_FIN) {
  407c42:	4b0f      	ldr	r3, [pc, #60]	; (407c80 <tcp_timewait_input+0xb4>)
  407c44:	781b      	ldrb	r3, [r3, #0]
  407c46:	f003 0301 	and.w	r3, r3, #1
  407c4a:	2b00      	cmp	r3, #0
  407c4c:	d003      	beq.n	407c56 <tcp_timewait_input+0x8a>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  407c4e:	4b14      	ldr	r3, [pc, #80]	; (407ca0 <tcp_timewait_input+0xd4>)
  407c50:	681a      	ldr	r2, [r3, #0]
  407c52:	687b      	ldr	r3, [r7, #4]
  407c54:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0))  {
  407c56:	4b0d      	ldr	r3, [pc, #52]	; (407c8c <tcp_timewait_input+0xc0>)
  407c58:	881b      	ldrh	r3, [r3, #0]
  407c5a:	2b00      	cmp	r3, #0
  407c5c:	d00b      	beq.n	407c76 <tcp_timewait_input+0xaa>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  407c5e:	687b      	ldr	r3, [r7, #4]
  407c60:	7f9b      	ldrb	r3, [r3, #30]
  407c62:	f043 0302 	orr.w	r3, r3, #2
  407c66:	b2da      	uxtb	r2, r3
  407c68:	687b      	ldr	r3, [r7, #4]
  407c6a:	779a      	strb	r2, [r3, #30]
    return tcp_output(pcb);
  407c6c:	6878      	ldr	r0, [r7, #4]
  407c6e:	4b0d      	ldr	r3, [pc, #52]	; (407ca4 <tcp_timewait_input+0xd8>)
  407c70:	4798      	blx	r3
  407c72:	4603      	mov	r3, r0
  407c74:	e000      	b.n	407c78 <tcp_timewait_input+0xac>
  }
  return ERR_OK;
  407c76:	2300      	movs	r3, #0
}
  407c78:	4618      	mov	r0, r3
  407c7a:	370c      	adds	r7, #12
  407c7c:	46bd      	mov	sp, r7
  407c7e:	bd90      	pop	{r4, r7, pc}
  407c80:	204025f0 	.word	0x204025f0
  407c84:	204025e8 	.word	0x204025e8
  407c88:	204025ec 	.word	0x204025ec
  407c8c:	204025f2 	.word	0x204025f2
  407c90:	204025e0 	.word	0x204025e0
  407c94:	2040396c 	.word	0x2040396c
  407c98:	20403974 	.word	0x20403974
  407c9c:	0040a2c1 	.word	0x0040a2c1
  407ca0:	204049a4 	.word	0x204049a4
  407ca4:	00409e75 	.word	0x00409e75

00407ca8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  407ca8:	b590      	push	{r4, r7, lr}
  407caa:	b089      	sub	sp, #36	; 0x24
  407cac:	af02      	add	r7, sp, #8
  407cae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  407cb0:	2300      	movs	r3, #0
  407cb2:	75fb      	strb	r3, [r7, #23]
  err_t err;

  err = ERR_OK;
  407cb4:	2300      	movs	r3, #0
  407cb6:	75bb      	strb	r3, [r7, #22]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  407cb8:	4b96      	ldr	r3, [pc, #600]	; (407f14 <tcp_process+0x26c>)
  407cba:	781b      	ldrb	r3, [r3, #0]
  407cbc:	f003 0304 	and.w	r3, r3, #4
  407cc0:	2b00      	cmp	r3, #0
  407cc2:	d035      	beq.n	407d30 <tcp_process+0x88>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  407cc4:	687b      	ldr	r3, [r7, #4]
  407cc6:	7e1b      	ldrb	r3, [r3, #24]
  407cc8:	2b02      	cmp	r3, #2
  407cca:	d108      	bne.n	407cde <tcp_process+0x36>
      if (ackno == pcb->snd_nxt) {
  407ccc:	687b      	ldr	r3, [r7, #4]
  407cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  407cd0:	4b91      	ldr	r3, [pc, #580]	; (407f18 <tcp_process+0x270>)
  407cd2:	681b      	ldr	r3, [r3, #0]
  407cd4:	429a      	cmp	r2, r3
  407cd6:	d115      	bne.n	407d04 <tcp_process+0x5c>
        acceptable = 1;
  407cd8:	2301      	movs	r3, #1
  407cda:	75fb      	strb	r3, [r7, #23]
  407cdc:	e012      	b.n	407d04 <tcp_process+0x5c>
      }
    } else {
      if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  407cde:	4b8f      	ldr	r3, [pc, #572]	; (407f1c <tcp_process+0x274>)
  407ce0:	681a      	ldr	r2, [r3, #0]
  407ce2:	687b      	ldr	r3, [r7, #4]
  407ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407ce6:	1ad3      	subs	r3, r2, r3
  407ce8:	2b00      	cmp	r3, #0
  407cea:	db0b      	blt.n	407d04 <tcp_process+0x5c>
  407cec:	4b8b      	ldr	r3, [pc, #556]	; (407f1c <tcp_process+0x274>)
  407cee:	681a      	ldr	r2, [r3, #0]
  407cf0:	687b      	ldr	r3, [r7, #4]
  407cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  407cf4:	6879      	ldr	r1, [r7, #4]
  407cf6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  407cf8:	440b      	add	r3, r1
  407cfa:	1ad3      	subs	r3, r2, r3
  407cfc:	2b00      	cmp	r3, #0
  407cfe:	dc01      	bgt.n	407d04 <tcp_process+0x5c>
                          pcb->rcv_nxt+pcb->rcv_wnd)) {
        acceptable = 1;
  407d00:	2301      	movs	r3, #1
  407d02:	75fb      	strb	r3, [r7, #23]
      }
    }

    if (acceptable) {
  407d04:	7dfb      	ldrb	r3, [r7, #23]
  407d06:	2b00      	cmp	r3, #0
  407d08:	d010      	beq.n	407d2c <tcp_process+0x84>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
      recv_flags |= TF_RESET;
  407d0a:	4b85      	ldr	r3, [pc, #532]	; (407f20 <tcp_process+0x278>)
  407d0c:	781b      	ldrb	r3, [r3, #0]
  407d0e:	f043 0308 	orr.w	r3, r3, #8
  407d12:	b2da      	uxtb	r2, r3
  407d14:	4b82      	ldr	r3, [pc, #520]	; (407f20 <tcp_process+0x278>)
  407d16:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
  407d18:	687b      	ldr	r3, [r7, #4]
  407d1a:	7f9b      	ldrb	r3, [r3, #30]
  407d1c:	f023 0301 	bic.w	r3, r3, #1
  407d20:	b2da      	uxtb	r2, r3
  407d22:	687b      	ldr	r3, [r7, #4]
  407d24:	779a      	strb	r2, [r3, #30]
      return ERR_RST;
  407d26:	f06f 030a 	mvn.w	r3, #10
  407d2a:	e324      	b.n	408376 <tcp_process+0x6ce>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  407d2c:	2300      	movs	r3, #0
  407d2e:	e322      	b.n	408376 <tcp_process+0x6ce>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
  407d30:	4b78      	ldr	r3, [pc, #480]	; (407f14 <tcp_process+0x26c>)
  407d32:	781b      	ldrb	r3, [r3, #0]
  407d34:	f003 0302 	and.w	r3, r3, #2
  407d38:	2b00      	cmp	r3, #0
  407d3a:	d010      	beq.n	407d5e <tcp_process+0xb6>
  407d3c:	687b      	ldr	r3, [r7, #4]
  407d3e:	7e1b      	ldrb	r3, [r3, #24]
  407d40:	2b02      	cmp	r3, #2
  407d42:	d00c      	beq.n	407d5e <tcp_process+0xb6>
  407d44:	687b      	ldr	r3, [r7, #4]
  407d46:	7e1b      	ldrb	r3, [r3, #24]
  407d48:	2b03      	cmp	r3, #3
  407d4a:	d008      	beq.n	407d5e <tcp_process+0xb6>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  407d4c:	687b      	ldr	r3, [r7, #4]
  407d4e:	7f9b      	ldrb	r3, [r3, #30]
  407d50:	f043 0302 	orr.w	r3, r3, #2
  407d54:	b2da      	uxtb	r2, r3
  407d56:	687b      	ldr	r3, [r7, #4]
  407d58:	779a      	strb	r2, [r3, #30]
    return ERR_OK;
  407d5a:	2300      	movs	r3, #0
  407d5c:	e30b      	b.n	408376 <tcp_process+0x6ce>
  }
  
  if ((pcb->flags & TF_RXCLOSED) == 0) {
  407d5e:	687b      	ldr	r3, [r7, #4]
  407d60:	7f9b      	ldrb	r3, [r3, #30]
  407d62:	f003 0310 	and.w	r3, r3, #16
  407d66:	2b00      	cmp	r3, #0
  407d68:	d103      	bne.n	407d72 <tcp_process+0xca>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  407d6a:	4b6e      	ldr	r3, [pc, #440]	; (407f24 <tcp_process+0x27c>)
  407d6c:	681a      	ldr	r2, [r3, #0]
  407d6e:	687b      	ldr	r3, [r7, #4]
  407d70:	625a      	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  407d72:	687b      	ldr	r3, [r7, #4]
  407d74:	2200      	movs	r2, #0
  407d76:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
  407d7a:	6878      	ldr	r0, [r7, #4]
  407d7c:	4b6a      	ldr	r3, [pc, #424]	; (407f28 <tcp_process+0x280>)
  407d7e:	4798      	blx	r3

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  407d80:	687b      	ldr	r3, [r7, #4]
  407d82:	7e1b      	ldrb	r3, [r3, #24]
  407d84:	3b02      	subs	r3, #2
  407d86:	2b07      	cmp	r3, #7
  407d88:	f200 82e5 	bhi.w	408356 <tcp_process+0x6ae>
  407d8c:	a201      	add	r2, pc, #4	; (adr r2, 407d94 <tcp_process+0xec>)
  407d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  407d92:	bf00      	nop
  407d94:	00407db5 	.word	0x00407db5
  407d98:	00407f79 	.word	0x00407f79
  407d9c:	004080a3 	.word	0x004080a3
  407da0:	004080cd 	.word	0x004080cd
  407da4:	004081fd 	.word	0x004081fd
  407da8:	004080a3 	.word	0x004080a3
  407dac:	00408295 	.word	0x00408295
  407db0:	00408329 	.word	0x00408329
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  407db4:	4b57      	ldr	r3, [pc, #348]	; (407f14 <tcp_process+0x26c>)
  407db6:	781b      	ldrb	r3, [r3, #0]
  407db8:	f003 0310 	and.w	r3, r3, #16
  407dbc:	2b00      	cmp	r3, #0
  407dbe:	f000 80bd 	beq.w	407f3c <tcp_process+0x294>
  407dc2:	4b54      	ldr	r3, [pc, #336]	; (407f14 <tcp_process+0x26c>)
  407dc4:	781b      	ldrb	r3, [r3, #0]
  407dc6:	f003 0302 	and.w	r3, r3, #2
  407dca:	2b00      	cmp	r3, #0
  407dcc:	f000 80b6 	beq.w	407f3c <tcp_process+0x294>
        && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
  407dd0:	687b      	ldr	r3, [r7, #4]
  407dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407dd4:	68db      	ldr	r3, [r3, #12]
  407dd6:	685b      	ldr	r3, [r3, #4]
  407dd8:	4618      	mov	r0, r3
  407dda:	4b54      	ldr	r3, [pc, #336]	; (407f2c <tcp_process+0x284>)
  407ddc:	4798      	blx	r3
  407dde:	4603      	mov	r3, r0
  407de0:	1c5a      	adds	r2, r3, #1
  407de2:	4b4d      	ldr	r3, [pc, #308]	; (407f18 <tcp_process+0x270>)
  407de4:	681b      	ldr	r3, [r3, #0]
  407de6:	429a      	cmp	r2, r3
  407de8:	f040 80a8 	bne.w	407f3c <tcp_process+0x294>
      pcb->snd_buf++;
  407dec:	687b      	ldr	r3, [r7, #4]
  407dee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  407df2:	3301      	adds	r3, #1
  407df4:	b29a      	uxth	r2, r3
  407df6:	687b      	ldr	r3, [r7, #4]
  407df8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
      pcb->rcv_nxt = seqno + 1;
  407dfc:	4b47      	ldr	r3, [pc, #284]	; (407f1c <tcp_process+0x274>)
  407dfe:	681b      	ldr	r3, [r3, #0]
  407e00:	1c5a      	adds	r2, r3, #1
  407e02:	687b      	ldr	r3, [r7, #4]
  407e04:	629a      	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  407e06:	687b      	ldr	r3, [r7, #4]
  407e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  407e0a:	687b      	ldr	r3, [r7, #4]
  407e0c:	631a      	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  407e0e:	4b42      	ldr	r3, [pc, #264]	; (407f18 <tcp_process+0x270>)
  407e10:	681a      	ldr	r2, [r3, #0]
  407e12:	687b      	ldr	r3, [r7, #4]
  407e14:	649a      	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  407e16:	4b46      	ldr	r3, [pc, #280]	; (407f30 <tcp_process+0x288>)
  407e18:	681b      	ldr	r3, [r3, #0]
  407e1a:	89db      	ldrh	r3, [r3, #14]
  407e1c:	b29a      	uxth	r2, r3
  407e1e:	687b      	ldr	r3, [r7, #4]
  407e20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = tcphdr->wnd;
  407e24:	4b42      	ldr	r3, [pc, #264]	; (407f30 <tcp_process+0x288>)
  407e26:	681b      	ldr	r3, [r3, #0]
  407e28:	89db      	ldrh	r3, [r3, #14]
  407e2a:	b29a      	uxth	r2, r3
  407e2c:	687b      	ldr	r3, [r7, #4]
  407e2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  407e32:	4b3a      	ldr	r3, [pc, #232]	; (407f1c <tcp_process+0x274>)
  407e34:	681b      	ldr	r3, [r3, #0]
  407e36:	1e5a      	subs	r2, r3, #1
  407e38:	687b      	ldr	r3, [r7, #4]
  407e3a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  407e3c:	687b      	ldr	r3, [r7, #4]
  407e3e:	2204      	movs	r2, #4
  407e40:	761a      	strb	r2, [r3, #24]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
  407e42:	687b      	ldr	r3, [r7, #4]
  407e44:	8eda      	ldrh	r2, [r3, #54]	; 0x36
  407e46:	687b      	ldr	r3, [r7, #4]
  407e48:	3304      	adds	r3, #4
  407e4a:	4619      	mov	r1, r3
  407e4c:	4610      	mov	r0, r2
  407e4e:	4b39      	ldr	r3, [pc, #228]	; (407f34 <tcp_process+0x28c>)
  407e50:	4798      	blx	r3
  407e52:	4603      	mov	r3, r0
  407e54:	461a      	mov	r2, r3
  407e56:	687b      	ldr	r3, [r7, #4]
  407e58:	86da      	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
       * but for the default value of pcb->mss) */
      pcb->ssthresh = pcb->mss * 10;
  407e5a:	687b      	ldr	r3, [r7, #4]
  407e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407e5e:	461a      	mov	r2, r3
  407e60:	0092      	lsls	r2, r2, #2
  407e62:	4413      	add	r3, r2
  407e64:	005b      	lsls	r3, r3, #1
  407e66:	b29a      	uxth	r2, r3
  407e68:	687b      	ldr	r3, [r7, #4]
  407e6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

      pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  407e6e:	687b      	ldr	r3, [r7, #4]
  407e70:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  407e74:	2b01      	cmp	r3, #1
  407e76:	d104      	bne.n	407e82 <tcp_process+0x1da>
  407e78:	687b      	ldr	r3, [r7, #4]
  407e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407e7c:	005b      	lsls	r3, r3, #1
  407e7e:	b29b      	uxth	r3, r3
  407e80:	e001      	b.n	407e86 <tcp_process+0x1de>
  407e82:	687b      	ldr	r3, [r7, #4]
  407e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  407e86:	687a      	ldr	r2, [r7, #4]
  407e88:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
      --pcb->snd_queuelen;
  407e8c:	687b      	ldr	r3, [r7, #4]
  407e8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  407e92:	3b01      	subs	r3, #1
  407e94:	b29a      	uxth	r2, r3
  407e96:	687b      	ldr	r3, [r7, #4]
  407e98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  407e9c:	687b      	ldr	r3, [r7, #4]
  407e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407ea0:	613b      	str	r3, [r7, #16]
      pcb->unacked = rseg->next;
  407ea2:	693b      	ldr	r3, [r7, #16]
  407ea4:	681a      	ldr	r2, [r3, #0]
  407ea6:	687b      	ldr	r3, [r7, #4]
  407ea8:	671a      	str	r2, [r3, #112]	; 0x70
      tcp_seg_free(rseg);
  407eaa:	6938      	ldr	r0, [r7, #16]
  407eac:	4b22      	ldr	r3, [pc, #136]	; (407f38 <tcp_process+0x290>)
  407eae:	4798      	blx	r3

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  407eb0:	687b      	ldr	r3, [r7, #4]
  407eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  407eb4:	2b00      	cmp	r3, #0
  407eb6:	d104      	bne.n	407ec2 <tcp_process+0x21a>
        pcb->rtime = -1;
  407eb8:	687b      	ldr	r3, [r7, #4]
  407eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
  407ebe:	869a      	strh	r2, [r3, #52]	; 0x34
  407ec0:	e006      	b.n	407ed0 <tcp_process+0x228>
      else {
        pcb->rtime = 0;
  407ec2:	687b      	ldr	r3, [r7, #4]
  407ec4:	2200      	movs	r2, #0
  407ec6:	869a      	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  407ec8:	687b      	ldr	r3, [r7, #4]
  407eca:	2200      	movs	r2, #0
  407ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when sucessfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  407ed0:	687b      	ldr	r3, [r7, #4]
  407ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  407ed6:	2b00      	cmp	r3, #0
  407ed8:	d00a      	beq.n	407ef0 <tcp_process+0x248>
  407eda:	687b      	ldr	r3, [r7, #4]
  407edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  407ee0:	687a      	ldr	r2, [r7, #4]
  407ee2:	6910      	ldr	r0, [r2, #16]
  407ee4:	2200      	movs	r2, #0
  407ee6:	6879      	ldr	r1, [r7, #4]
  407ee8:	4798      	blx	r3
  407eea:	4603      	mov	r3, r0
  407eec:	75bb      	strb	r3, [r7, #22]
  407eee:	e001      	b.n	407ef4 <tcp_process+0x24c>
  407ef0:	2300      	movs	r3, #0
  407ef2:	75bb      	strb	r3, [r7, #22]
      if (err == ERR_ABRT) {
  407ef4:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407ef8:	f113 0f0a 	cmn.w	r3, #10
  407efc:	d102      	bne.n	407f04 <tcp_process+0x25c>
        return ERR_ABRT;
  407efe:	f06f 0309 	mvn.w	r3, #9
  407f02:	e238      	b.n	408376 <tcp_process+0x6ce>
      }
      tcp_ack_now(pcb);
  407f04:	687b      	ldr	r3, [r7, #4]
  407f06:	7f9b      	ldrb	r3, [r3, #30]
  407f08:	f043 0302 	orr.w	r3, r3, #2
  407f0c:	b2da      	uxtb	r2, r3
  407f0e:	687b      	ldr	r3, [r7, #4]
  407f10:	779a      	strb	r2, [r3, #30]
    else if (flags & TCP_ACK) {
      /* send a RST to bring the other side in a non-synchronized state. */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
        tcphdr->dest, tcphdr->src);
    }
    break;
  407f12:	e222      	b.n	40835a <tcp_process+0x6b2>
  407f14:	204025f0 	.word	0x204025f0
  407f18:	204025ec 	.word	0x204025ec
  407f1c:	204025e8 	.word	0x204025e8
  407f20:	204025f4 	.word	0x204025f4
  407f24:	204049a4 	.word	0x204049a4
  407f28:	00409341 	.word	0x00409341
  407f2c:	00402019 	.word	0x00402019
  407f30:	204025e0 	.word	0x204025e0
  407f34:	0040736d 	.word	0x0040736d
  407f38:	00406e3d 	.word	0x00406e3d
    else if (flags & TCP_ACK) {
  407f3c:	4b94      	ldr	r3, [pc, #592]	; (408190 <tcp_process+0x4e8>)
  407f3e:	781b      	ldrb	r3, [r3, #0]
  407f40:	f003 0310 	and.w	r3, r3, #16
  407f44:	2b00      	cmp	r3, #0
  407f46:	f000 8208 	beq.w	40835a <tcp_process+0x6b2>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f4a:	4b92      	ldr	r3, [pc, #584]	; (408194 <tcp_process+0x4ec>)
  407f4c:	6818      	ldr	r0, [r3, #0]
  407f4e:	4b92      	ldr	r3, [pc, #584]	; (408198 <tcp_process+0x4f0>)
  407f50:	881b      	ldrh	r3, [r3, #0]
  407f52:	461a      	mov	r2, r3
  407f54:	4b91      	ldr	r3, [pc, #580]	; (40819c <tcp_process+0x4f4>)
  407f56:	681b      	ldr	r3, [r3, #0]
  407f58:	18d1      	adds	r1, r2, r3
        tcphdr->dest, tcphdr->src);
  407f5a:	4b91      	ldr	r3, [pc, #580]	; (4081a0 <tcp_process+0x4f8>)
  407f5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f5e:	885b      	ldrh	r3, [r3, #2]
  407f60:	b29b      	uxth	r3, r3
        tcphdr->dest, tcphdr->src);
  407f62:	4a8f      	ldr	r2, [pc, #572]	; (4081a0 <tcp_process+0x4f8>)
  407f64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  407f66:	8812      	ldrh	r2, [r2, #0]
  407f68:	b292      	uxth	r2, r2
  407f6a:	9201      	str	r2, [sp, #4]
  407f6c:	9300      	str	r3, [sp, #0]
  407f6e:	4b8d      	ldr	r3, [pc, #564]	; (4081a4 <tcp_process+0x4fc>)
  407f70:	4a8d      	ldr	r2, [pc, #564]	; (4081a8 <tcp_process+0x500>)
  407f72:	4c8e      	ldr	r4, [pc, #568]	; (4081ac <tcp_process+0x504>)
  407f74:	47a0      	blx	r4
    break;
  407f76:	e1f0      	b.n	40835a <tcp_process+0x6b2>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  407f78:	4b85      	ldr	r3, [pc, #532]	; (408190 <tcp_process+0x4e8>)
  407f7a:	781b      	ldrb	r3, [r3, #0]
  407f7c:	f003 0310 	and.w	r3, r3, #16
  407f80:	2b00      	cmp	r3, #0
  407f82:	d079      	beq.n	408078 <tcp_process+0x3d0>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  407f84:	4b83      	ldr	r3, [pc, #524]	; (408194 <tcp_process+0x4ec>)
  407f86:	681a      	ldr	r2, [r3, #0]
  407f88:	687b      	ldr	r3, [r7, #4]
  407f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  407f8c:	1ad3      	subs	r3, r2, r3
  407f8e:	3b01      	subs	r3, #1
  407f90:	2b00      	cmp	r3, #0
  407f92:	db5a      	blt.n	40804a <tcp_process+0x3a2>
  407f94:	4b7f      	ldr	r3, [pc, #508]	; (408194 <tcp_process+0x4ec>)
  407f96:	681a      	ldr	r2, [r3, #0]
  407f98:	687b      	ldr	r3, [r7, #4]
  407f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  407f9c:	1ad3      	subs	r3, r2, r3
  407f9e:	2b00      	cmp	r3, #0
  407fa0:	dc53      	bgt.n	40804a <tcp_process+0x3a2>
        u16_t old_cwnd;
        pcb->state = ESTABLISHED;
  407fa2:	687b      	ldr	r3, [r7, #4]
  407fa4:	2204      	movs	r2, #4
  407fa6:	761a      	strb	r2, [r3, #24]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
#endif
        /* Call the accept function. */
        TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
  407fa8:	687b      	ldr	r3, [r7, #4]
  407faa:	695b      	ldr	r3, [r3, #20]
  407fac:	2b00      	cmp	r3, #0
  407fae:	d009      	beq.n	407fc4 <tcp_process+0x31c>
  407fb0:	687b      	ldr	r3, [r7, #4]
  407fb2:	695b      	ldr	r3, [r3, #20]
  407fb4:	687a      	ldr	r2, [r7, #4]
  407fb6:	6910      	ldr	r0, [r2, #16]
  407fb8:	2200      	movs	r2, #0
  407fba:	6879      	ldr	r1, [r7, #4]
  407fbc:	4798      	blx	r3
  407fbe:	4603      	mov	r3, r0
  407fc0:	75bb      	strb	r3, [r7, #22]
  407fc2:	e001      	b.n	407fc8 <tcp_process+0x320>
  407fc4:	23f2      	movs	r3, #242	; 0xf2
  407fc6:	75bb      	strb	r3, [r7, #22]
        if (err != ERR_OK) {
  407fc8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407fcc:	2b00      	cmp	r3, #0
  407fce:	d00a      	beq.n	407fe6 <tcp_process+0x33e>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  407fd0:	f997 3016 	ldrsb.w	r3, [r7, #22]
  407fd4:	f113 0f0a 	cmn.w	r3, #10
  407fd8:	d002      	beq.n	407fe0 <tcp_process+0x338>
            tcp_abort(pcb);
  407fda:	6878      	ldr	r0, [r7, #4]
  407fdc:	4b74      	ldr	r3, [pc, #464]	; (4081b0 <tcp_process+0x508>)
  407fde:	4798      	blx	r3
          }
          return ERR_ABRT;
  407fe0:	f06f 0309 	mvn.w	r3, #9
  407fe4:	e1c7      	b.n	408376 <tcp_process+0x6ce>
        }
        old_cwnd = pcb->cwnd;
  407fe6:	687b      	ldr	r3, [r7, #4]
  407fe8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  407fec:	81fb      	strh	r3, [r7, #14]
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  407fee:	6878      	ldr	r0, [r7, #4]
  407ff0:	4b70      	ldr	r3, [pc, #448]	; (4081b4 <tcp_process+0x50c>)
  407ff2:	4798      	blx	r3

        /* Prevent ACK for SYN to generate a sent event */
        if (pcb->acked != 0) {
  407ff4:	687b      	ldr	r3, [r7, #4]
  407ff6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  407ffa:	2b00      	cmp	r3, #0
  407ffc:	d007      	beq.n	40800e <tcp_process+0x366>
          pcb->acked--;
  407ffe:	687b      	ldr	r3, [r7, #4]
  408000:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  408004:	3b01      	subs	r3, #1
  408006:	b29a      	uxth	r2, r3
  408008:	687b      	ldr	r3, [r7, #4]
  40800a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
  40800e:	89fb      	ldrh	r3, [r7, #14]
  408010:	2b01      	cmp	r3, #1
  408012:	d104      	bne.n	40801e <tcp_process+0x376>
  408014:	687b      	ldr	r3, [r7, #4]
  408016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408018:	005b      	lsls	r3, r3, #1
  40801a:	b29b      	uxth	r3, r3
  40801c:	e001      	b.n	408022 <tcp_process+0x37a>
  40801e:	687b      	ldr	r3, [r7, #4]
  408020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408022:	687a      	ldr	r2, [r7, #4]
  408024:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c

        if (recv_flags & TF_GOT_FIN) {
  408028:	4b63      	ldr	r3, [pc, #396]	; (4081b8 <tcp_process+0x510>)
  40802a:	781b      	ldrb	r3, [r3, #0]
  40802c:	f003 0320 	and.w	r3, r3, #32
  408030:	2b00      	cmp	r3, #0
  408032:	d034      	beq.n	40809e <tcp_process+0x3f6>
          tcp_ack_now(pcb);
  408034:	687b      	ldr	r3, [r7, #4]
  408036:	7f9b      	ldrb	r3, [r3, #30]
  408038:	f043 0302 	orr.w	r3, r3, #2
  40803c:	b2da      	uxtb	r2, r3
  40803e:	687b      	ldr	r3, [r7, #4]
  408040:	779a      	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  408042:	687b      	ldr	r3, [r7, #4]
  408044:	2207      	movs	r2, #7
  408046:	761a      	strb	r2, [r3, #24]
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  408048:	e029      	b.n	40809e <tcp_process+0x3f6>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40804a:	4b52      	ldr	r3, [pc, #328]	; (408194 <tcp_process+0x4ec>)
  40804c:	6818      	ldr	r0, [r3, #0]
  40804e:	4b52      	ldr	r3, [pc, #328]	; (408198 <tcp_process+0x4f0>)
  408050:	881b      	ldrh	r3, [r3, #0]
  408052:	461a      	mov	r2, r3
  408054:	4b51      	ldr	r3, [pc, #324]	; (40819c <tcp_process+0x4f4>)
  408056:	681b      	ldr	r3, [r3, #0]
  408058:	18d1      	adds	r1, r2, r3
                tcphdr->dest, tcphdr->src);
  40805a:	4b51      	ldr	r3, [pc, #324]	; (4081a0 <tcp_process+0x4f8>)
  40805c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  40805e:	885b      	ldrh	r3, [r3, #2]
  408060:	b29b      	uxth	r3, r3
                tcphdr->dest, tcphdr->src);
  408062:	4a4f      	ldr	r2, [pc, #316]	; (4081a0 <tcp_process+0x4f8>)
  408064:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
  408066:	8812      	ldrh	r2, [r2, #0]
  408068:	b292      	uxth	r2, r2
  40806a:	9201      	str	r2, [sp, #4]
  40806c:	9300      	str	r3, [sp, #0]
  40806e:	4b4d      	ldr	r3, [pc, #308]	; (4081a4 <tcp_process+0x4fc>)
  408070:	4a4d      	ldr	r2, [pc, #308]	; (4081a8 <tcp_process+0x500>)
  408072:	4c4e      	ldr	r4, [pc, #312]	; (4081ac <tcp_process+0x504>)
  408074:	47a0      	blx	r4
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  408076:	e172      	b.n	40835e <tcp_process+0x6b6>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  408078:	4b45      	ldr	r3, [pc, #276]	; (408190 <tcp_process+0x4e8>)
  40807a:	781b      	ldrb	r3, [r3, #0]
  40807c:	f003 0302 	and.w	r3, r3, #2
  408080:	2b00      	cmp	r3, #0
  408082:	f000 816c 	beq.w	40835e <tcp_process+0x6b6>
  408086:	687b      	ldr	r3, [r7, #4]
  408088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40808a:	1e5a      	subs	r2, r3, #1
  40808c:	4b43      	ldr	r3, [pc, #268]	; (40819c <tcp_process+0x4f4>)
  40808e:	681b      	ldr	r3, [r3, #0]
  408090:	429a      	cmp	r2, r3
  408092:	f040 8164 	bne.w	40835e <tcp_process+0x6b6>
      tcp_rexmit(pcb);
  408096:	6878      	ldr	r0, [r7, #4]
  408098:	4b48      	ldr	r3, [pc, #288]	; (4081bc <tcp_process+0x514>)
  40809a:	4798      	blx	r3
    break;
  40809c:	e15f      	b.n	40835e <tcp_process+0x6b6>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  40809e:	bf00      	nop
    break;
  4080a0:	e15d      	b.n	40835e <tcp_process+0x6b6>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  4080a2:	6878      	ldr	r0, [r7, #4]
  4080a4:	4b43      	ldr	r3, [pc, #268]	; (4081b4 <tcp_process+0x50c>)
  4080a6:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  4080a8:	4b43      	ldr	r3, [pc, #268]	; (4081b8 <tcp_process+0x510>)
  4080aa:	781b      	ldrb	r3, [r3, #0]
  4080ac:	f003 0320 	and.w	r3, r3, #32
  4080b0:	2b00      	cmp	r3, #0
  4080b2:	f000 8156 	beq.w	408362 <tcp_process+0x6ba>
      tcp_ack_now(pcb);
  4080b6:	687b      	ldr	r3, [r7, #4]
  4080b8:	7f9b      	ldrb	r3, [r3, #30]
  4080ba:	f043 0302 	orr.w	r3, r3, #2
  4080be:	b2da      	uxtb	r2, r3
  4080c0:	687b      	ldr	r3, [r7, #4]
  4080c2:	779a      	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  4080c4:	687b      	ldr	r3, [r7, #4]
  4080c6:	2207      	movs	r2, #7
  4080c8:	761a      	strb	r2, [r3, #24]
    }
    break;
  4080ca:	e14a      	b.n	408362 <tcp_process+0x6ba>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  4080cc:	6878      	ldr	r0, [r7, #4]
  4080ce:	4b39      	ldr	r3, [pc, #228]	; (4081b4 <tcp_process+0x50c>)
  4080d0:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  4080d2:	4b39      	ldr	r3, [pc, #228]	; (4081b8 <tcp_process+0x510>)
  4080d4:	781b      	ldrb	r3, [r3, #0]
  4080d6:	f003 0320 	and.w	r3, r3, #32
  4080da:	2b00      	cmp	r3, #0
  4080dc:	d07c      	beq.n	4081d8 <tcp_process+0x530>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4080de:	4b2c      	ldr	r3, [pc, #176]	; (408190 <tcp_process+0x4e8>)
  4080e0:	781b      	ldrb	r3, [r3, #0]
  4080e2:	f003 0310 	and.w	r3, r3, #16
  4080e6:	2b00      	cmp	r3, #0
  4080e8:	d047      	beq.n	40817a <tcp_process+0x4d2>
  4080ea:	687b      	ldr	r3, [r7, #4]
  4080ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4080ee:	4b29      	ldr	r3, [pc, #164]	; (408194 <tcp_process+0x4ec>)
  4080f0:	681b      	ldr	r3, [r3, #0]
  4080f2:	429a      	cmp	r2, r3
  4080f4:	d141      	bne.n	40817a <tcp_process+0x4d2>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  4080f6:	687b      	ldr	r3, [r7, #4]
  4080f8:	7f9b      	ldrb	r3, [r3, #30]
  4080fa:	f043 0302 	orr.w	r3, r3, #2
  4080fe:	b2da      	uxtb	r2, r3
  408100:	687b      	ldr	r3, [r7, #4]
  408102:	779a      	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  408104:	6878      	ldr	r0, [r7, #4]
  408106:	4b2e      	ldr	r3, [pc, #184]	; (4081c0 <tcp_process+0x518>)
  408108:	4798      	blx	r3
        TCP_RMV_ACTIVE(pcb);
  40810a:	4b2e      	ldr	r3, [pc, #184]	; (4081c4 <tcp_process+0x51c>)
  40810c:	681a      	ldr	r2, [r3, #0]
  40810e:	687b      	ldr	r3, [r7, #4]
  408110:	429a      	cmp	r2, r3
  408112:	d105      	bne.n	408120 <tcp_process+0x478>
  408114:	4b2b      	ldr	r3, [pc, #172]	; (4081c4 <tcp_process+0x51c>)
  408116:	681b      	ldr	r3, [r3, #0]
  408118:	68db      	ldr	r3, [r3, #12]
  40811a:	4a2a      	ldr	r2, [pc, #168]	; (4081c4 <tcp_process+0x51c>)
  40811c:	6013      	str	r3, [r2, #0]
  40811e:	e019      	b.n	408154 <tcp_process+0x4ac>
  408120:	4b28      	ldr	r3, [pc, #160]	; (4081c4 <tcp_process+0x51c>)
  408122:	681b      	ldr	r3, [r3, #0]
  408124:	4a28      	ldr	r2, [pc, #160]	; (4081c8 <tcp_process+0x520>)
  408126:	6013      	str	r3, [r2, #0]
  408128:	e010      	b.n	40814c <tcp_process+0x4a4>
  40812a:	4b27      	ldr	r3, [pc, #156]	; (4081c8 <tcp_process+0x520>)
  40812c:	681b      	ldr	r3, [r3, #0]
  40812e:	68da      	ldr	r2, [r3, #12]
  408130:	687b      	ldr	r3, [r7, #4]
  408132:	429a      	cmp	r2, r3
  408134:	d105      	bne.n	408142 <tcp_process+0x49a>
  408136:	4b24      	ldr	r3, [pc, #144]	; (4081c8 <tcp_process+0x520>)
  408138:	681b      	ldr	r3, [r3, #0]
  40813a:	687a      	ldr	r2, [r7, #4]
  40813c:	68d2      	ldr	r2, [r2, #12]
  40813e:	60da      	str	r2, [r3, #12]
  408140:	e008      	b.n	408154 <tcp_process+0x4ac>
  408142:	4b21      	ldr	r3, [pc, #132]	; (4081c8 <tcp_process+0x520>)
  408144:	681b      	ldr	r3, [r3, #0]
  408146:	68db      	ldr	r3, [r3, #12]
  408148:	4a1f      	ldr	r2, [pc, #124]	; (4081c8 <tcp_process+0x520>)
  40814a:	6013      	str	r3, [r2, #0]
  40814c:	4b1e      	ldr	r3, [pc, #120]	; (4081c8 <tcp_process+0x520>)
  40814e:	681b      	ldr	r3, [r3, #0]
  408150:	2b00      	cmp	r3, #0
  408152:	d1ea      	bne.n	40812a <tcp_process+0x482>
  408154:	687b      	ldr	r3, [r7, #4]
  408156:	2200      	movs	r2, #0
  408158:	60da      	str	r2, [r3, #12]
  40815a:	4b1c      	ldr	r3, [pc, #112]	; (4081cc <tcp_process+0x524>)
  40815c:	2201      	movs	r2, #1
  40815e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
  408160:	687b      	ldr	r3, [r7, #4]
  408162:	220a      	movs	r2, #10
  408164:	761a      	strb	r2, [r3, #24]
        TCP_REG(&tcp_tw_pcbs, pcb);
  408166:	4b1a      	ldr	r3, [pc, #104]	; (4081d0 <tcp_process+0x528>)
  408168:	681a      	ldr	r2, [r3, #0]
  40816a:	687b      	ldr	r3, [r7, #4]
  40816c:	60da      	str	r2, [r3, #12]
  40816e:	4a18      	ldr	r2, [pc, #96]	; (4081d0 <tcp_process+0x528>)
  408170:	687b      	ldr	r3, [r7, #4]
  408172:	6013      	str	r3, [r2, #0]
  408174:	4b17      	ldr	r3, [pc, #92]	; (4081d4 <tcp_process+0x52c>)
  408176:	4798      	blx	r3
        pcb->state = CLOSING;
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  408178:	e0f5      	b.n	408366 <tcp_process+0x6be>
        tcp_ack_now(pcb);
  40817a:	687b      	ldr	r3, [r7, #4]
  40817c:	7f9b      	ldrb	r3, [r3, #30]
  40817e:	f043 0302 	orr.w	r3, r3, #2
  408182:	b2da      	uxtb	r2, r3
  408184:	687b      	ldr	r3, [r7, #4]
  408186:	779a      	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  408188:	687b      	ldr	r3, [r7, #4]
  40818a:	2208      	movs	r2, #8
  40818c:	761a      	strb	r2, [r3, #24]
    break;
  40818e:	e0ea      	b.n	408366 <tcp_process+0x6be>
  408190:	204025f0 	.word	0x204025f0
  408194:	204025ec 	.word	0x204025ec
  408198:	204025f2 	.word	0x204025f2
  40819c:	204025e8 	.word	0x204025e8
  4081a0:	204025e0 	.word	0x204025e0
  4081a4:	2040396c 	.word	0x2040396c
  4081a8:	20403974 	.word	0x20403974
  4081ac:	0040a2c1 	.word	0x0040a2c1
  4081b0:	00406285 	.word	0x00406285
  4081b4:	004084a9 	.word	0x004084a9
  4081b8:	204025f4 	.word	0x204025f4
  4081bc:	0040a415 	.word	0x0040a415
  4081c0:	0040720d 	.word	0x0040720d
  4081c4:	204049a0 	.word	0x204049a0
  4081c8:	204049ac 	.word	0x204049ac
  4081cc:	2040499c 	.word	0x2040499c
  4081d0:	204049b4 	.word	0x204049b4
  4081d4:	00404d75 	.word	0x00404d75
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
  4081d8:	4b69      	ldr	r3, [pc, #420]	; (408380 <tcp_process+0x6d8>)
  4081da:	781b      	ldrb	r3, [r3, #0]
  4081dc:	f003 0310 	and.w	r3, r3, #16
  4081e0:	2b00      	cmp	r3, #0
  4081e2:	f000 80c0 	beq.w	408366 <tcp_process+0x6be>
  4081e6:	687b      	ldr	r3, [r7, #4]
  4081e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4081ea:	4b66      	ldr	r3, [pc, #408]	; (408384 <tcp_process+0x6dc>)
  4081ec:	681b      	ldr	r3, [r3, #0]
  4081ee:	429a      	cmp	r2, r3
  4081f0:	f040 80b9 	bne.w	408366 <tcp_process+0x6be>
      pcb->state = FIN_WAIT_2;
  4081f4:	687b      	ldr	r3, [r7, #4]
  4081f6:	2206      	movs	r2, #6
  4081f8:	761a      	strb	r2, [r3, #24]
    break;
  4081fa:	e0b4      	b.n	408366 <tcp_process+0x6be>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  4081fc:	6878      	ldr	r0, [r7, #4]
  4081fe:	4b62      	ldr	r3, [pc, #392]	; (408388 <tcp_process+0x6e0>)
  408200:	4798      	blx	r3
    if (recv_flags & TF_GOT_FIN) {
  408202:	4b62      	ldr	r3, [pc, #392]	; (40838c <tcp_process+0x6e4>)
  408204:	781b      	ldrb	r3, [r3, #0]
  408206:	f003 0320 	and.w	r3, r3, #32
  40820a:	2b00      	cmp	r3, #0
  40820c:	f000 80ad 	beq.w	40836a <tcp_process+0x6c2>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  408210:	687b      	ldr	r3, [r7, #4]
  408212:	7f9b      	ldrb	r3, [r3, #30]
  408214:	f043 0302 	orr.w	r3, r3, #2
  408218:	b2da      	uxtb	r2, r3
  40821a:	687b      	ldr	r3, [r7, #4]
  40821c:	779a      	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  40821e:	6878      	ldr	r0, [r7, #4]
  408220:	4b5b      	ldr	r3, [pc, #364]	; (408390 <tcp_process+0x6e8>)
  408222:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  408224:	4b5b      	ldr	r3, [pc, #364]	; (408394 <tcp_process+0x6ec>)
  408226:	681a      	ldr	r2, [r3, #0]
  408228:	687b      	ldr	r3, [r7, #4]
  40822a:	429a      	cmp	r2, r3
  40822c:	d105      	bne.n	40823a <tcp_process+0x592>
  40822e:	4b59      	ldr	r3, [pc, #356]	; (408394 <tcp_process+0x6ec>)
  408230:	681b      	ldr	r3, [r3, #0]
  408232:	68db      	ldr	r3, [r3, #12]
  408234:	4a57      	ldr	r2, [pc, #348]	; (408394 <tcp_process+0x6ec>)
  408236:	6013      	str	r3, [r2, #0]
  408238:	e019      	b.n	40826e <tcp_process+0x5c6>
  40823a:	4b56      	ldr	r3, [pc, #344]	; (408394 <tcp_process+0x6ec>)
  40823c:	681b      	ldr	r3, [r3, #0]
  40823e:	4a56      	ldr	r2, [pc, #344]	; (408398 <tcp_process+0x6f0>)
  408240:	6013      	str	r3, [r2, #0]
  408242:	e010      	b.n	408266 <tcp_process+0x5be>
  408244:	4b54      	ldr	r3, [pc, #336]	; (408398 <tcp_process+0x6f0>)
  408246:	681b      	ldr	r3, [r3, #0]
  408248:	68da      	ldr	r2, [r3, #12]
  40824a:	687b      	ldr	r3, [r7, #4]
  40824c:	429a      	cmp	r2, r3
  40824e:	d105      	bne.n	40825c <tcp_process+0x5b4>
  408250:	4b51      	ldr	r3, [pc, #324]	; (408398 <tcp_process+0x6f0>)
  408252:	681b      	ldr	r3, [r3, #0]
  408254:	687a      	ldr	r2, [r7, #4]
  408256:	68d2      	ldr	r2, [r2, #12]
  408258:	60da      	str	r2, [r3, #12]
  40825a:	e008      	b.n	40826e <tcp_process+0x5c6>
  40825c:	4b4e      	ldr	r3, [pc, #312]	; (408398 <tcp_process+0x6f0>)
  40825e:	681b      	ldr	r3, [r3, #0]
  408260:	68db      	ldr	r3, [r3, #12]
  408262:	4a4d      	ldr	r2, [pc, #308]	; (408398 <tcp_process+0x6f0>)
  408264:	6013      	str	r3, [r2, #0]
  408266:	4b4c      	ldr	r3, [pc, #304]	; (408398 <tcp_process+0x6f0>)
  408268:	681b      	ldr	r3, [r3, #0]
  40826a:	2b00      	cmp	r3, #0
  40826c:	d1ea      	bne.n	408244 <tcp_process+0x59c>
  40826e:	687b      	ldr	r3, [r7, #4]
  408270:	2200      	movs	r2, #0
  408272:	60da      	str	r2, [r3, #12]
  408274:	4b49      	ldr	r3, [pc, #292]	; (40839c <tcp_process+0x6f4>)
  408276:	2201      	movs	r2, #1
  408278:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  40827a:	687b      	ldr	r3, [r7, #4]
  40827c:	220a      	movs	r2, #10
  40827e:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  408280:	4b47      	ldr	r3, [pc, #284]	; (4083a0 <tcp_process+0x6f8>)
  408282:	681a      	ldr	r2, [r3, #0]
  408284:	687b      	ldr	r3, [r7, #4]
  408286:	60da      	str	r2, [r3, #12]
  408288:	4a45      	ldr	r2, [pc, #276]	; (4083a0 <tcp_process+0x6f8>)
  40828a:	687b      	ldr	r3, [r7, #4]
  40828c:	6013      	str	r3, [r2, #0]
  40828e:	4b45      	ldr	r3, [pc, #276]	; (4083a4 <tcp_process+0x6fc>)
  408290:	4798      	blx	r3
    }
    break;
  408292:	e06a      	b.n	40836a <tcp_process+0x6c2>
  case CLOSING:
    tcp_receive(pcb);
  408294:	6878      	ldr	r0, [r7, #4]
  408296:	4b3c      	ldr	r3, [pc, #240]	; (408388 <tcp_process+0x6e0>)
  408298:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  40829a:	4b39      	ldr	r3, [pc, #228]	; (408380 <tcp_process+0x6d8>)
  40829c:	781b      	ldrb	r3, [r3, #0]
  40829e:	f003 0310 	and.w	r3, r3, #16
  4082a2:	2b00      	cmp	r3, #0
  4082a4:	d063      	beq.n	40836e <tcp_process+0x6c6>
  4082a6:	687b      	ldr	r3, [r7, #4]
  4082a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  4082aa:	4b36      	ldr	r3, [pc, #216]	; (408384 <tcp_process+0x6dc>)
  4082ac:	681b      	ldr	r3, [r3, #0]
  4082ae:	429a      	cmp	r2, r3
  4082b0:	d15d      	bne.n	40836e <tcp_process+0x6c6>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  4082b2:	6878      	ldr	r0, [r7, #4]
  4082b4:	4b36      	ldr	r3, [pc, #216]	; (408390 <tcp_process+0x6e8>)
  4082b6:	4798      	blx	r3
      TCP_RMV_ACTIVE(pcb);
  4082b8:	4b36      	ldr	r3, [pc, #216]	; (408394 <tcp_process+0x6ec>)
  4082ba:	681a      	ldr	r2, [r3, #0]
  4082bc:	687b      	ldr	r3, [r7, #4]
  4082be:	429a      	cmp	r2, r3
  4082c0:	d105      	bne.n	4082ce <tcp_process+0x626>
  4082c2:	4b34      	ldr	r3, [pc, #208]	; (408394 <tcp_process+0x6ec>)
  4082c4:	681b      	ldr	r3, [r3, #0]
  4082c6:	68db      	ldr	r3, [r3, #12]
  4082c8:	4a32      	ldr	r2, [pc, #200]	; (408394 <tcp_process+0x6ec>)
  4082ca:	6013      	str	r3, [r2, #0]
  4082cc:	e019      	b.n	408302 <tcp_process+0x65a>
  4082ce:	4b31      	ldr	r3, [pc, #196]	; (408394 <tcp_process+0x6ec>)
  4082d0:	681b      	ldr	r3, [r3, #0]
  4082d2:	4a31      	ldr	r2, [pc, #196]	; (408398 <tcp_process+0x6f0>)
  4082d4:	6013      	str	r3, [r2, #0]
  4082d6:	e010      	b.n	4082fa <tcp_process+0x652>
  4082d8:	4b2f      	ldr	r3, [pc, #188]	; (408398 <tcp_process+0x6f0>)
  4082da:	681b      	ldr	r3, [r3, #0]
  4082dc:	68da      	ldr	r2, [r3, #12]
  4082de:	687b      	ldr	r3, [r7, #4]
  4082e0:	429a      	cmp	r2, r3
  4082e2:	d105      	bne.n	4082f0 <tcp_process+0x648>
  4082e4:	4b2c      	ldr	r3, [pc, #176]	; (408398 <tcp_process+0x6f0>)
  4082e6:	681b      	ldr	r3, [r3, #0]
  4082e8:	687a      	ldr	r2, [r7, #4]
  4082ea:	68d2      	ldr	r2, [r2, #12]
  4082ec:	60da      	str	r2, [r3, #12]
  4082ee:	e008      	b.n	408302 <tcp_process+0x65a>
  4082f0:	4b29      	ldr	r3, [pc, #164]	; (408398 <tcp_process+0x6f0>)
  4082f2:	681b      	ldr	r3, [r3, #0]
  4082f4:	68db      	ldr	r3, [r3, #12]
  4082f6:	4a28      	ldr	r2, [pc, #160]	; (408398 <tcp_process+0x6f0>)
  4082f8:	6013      	str	r3, [r2, #0]
  4082fa:	4b27      	ldr	r3, [pc, #156]	; (408398 <tcp_process+0x6f0>)
  4082fc:	681b      	ldr	r3, [r3, #0]
  4082fe:	2b00      	cmp	r3, #0
  408300:	d1ea      	bne.n	4082d8 <tcp_process+0x630>
  408302:	687b      	ldr	r3, [r7, #4]
  408304:	2200      	movs	r2, #0
  408306:	60da      	str	r2, [r3, #12]
  408308:	4b24      	ldr	r3, [pc, #144]	; (40839c <tcp_process+0x6f4>)
  40830a:	2201      	movs	r2, #1
  40830c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
  40830e:	687b      	ldr	r3, [r7, #4]
  408310:	220a      	movs	r2, #10
  408312:	761a      	strb	r2, [r3, #24]
      TCP_REG(&tcp_tw_pcbs, pcb);
  408314:	4b22      	ldr	r3, [pc, #136]	; (4083a0 <tcp_process+0x6f8>)
  408316:	681a      	ldr	r2, [r3, #0]
  408318:	687b      	ldr	r3, [r7, #4]
  40831a:	60da      	str	r2, [r3, #12]
  40831c:	4a20      	ldr	r2, [pc, #128]	; (4083a0 <tcp_process+0x6f8>)
  40831e:	687b      	ldr	r3, [r7, #4]
  408320:	6013      	str	r3, [r2, #0]
  408322:	4b20      	ldr	r3, [pc, #128]	; (4083a4 <tcp_process+0x6fc>)
  408324:	4798      	blx	r3
    }
    break;
  408326:	e022      	b.n	40836e <tcp_process+0x6c6>
  case LAST_ACK:
    tcp_receive(pcb);
  408328:	6878      	ldr	r0, [r7, #4]
  40832a:	4b17      	ldr	r3, [pc, #92]	; (408388 <tcp_process+0x6e0>)
  40832c:	4798      	blx	r3
    if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
  40832e:	4b14      	ldr	r3, [pc, #80]	; (408380 <tcp_process+0x6d8>)
  408330:	781b      	ldrb	r3, [r3, #0]
  408332:	f003 0310 	and.w	r3, r3, #16
  408336:	2b00      	cmp	r3, #0
  408338:	d01b      	beq.n	408372 <tcp_process+0x6ca>
  40833a:	687b      	ldr	r3, [r7, #4]
  40833c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  40833e:	4b11      	ldr	r3, [pc, #68]	; (408384 <tcp_process+0x6dc>)
  408340:	681b      	ldr	r3, [r3, #0]
  408342:	429a      	cmp	r2, r3
  408344:	d115      	bne.n	408372 <tcp_process+0x6ca>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  408346:	4b11      	ldr	r3, [pc, #68]	; (40838c <tcp_process+0x6e4>)
  408348:	781b      	ldrb	r3, [r3, #0]
  40834a:	f043 0310 	orr.w	r3, r3, #16
  40834e:	b2da      	uxtb	r2, r3
  408350:	4b0e      	ldr	r3, [pc, #56]	; (40838c <tcp_process+0x6e4>)
  408352:	701a      	strb	r2, [r3, #0]
    }
    break;
  408354:	e00d      	b.n	408372 <tcp_process+0x6ca>
  default:
    break;
  408356:	bf00      	nop
  408358:	e00c      	b.n	408374 <tcp_process+0x6cc>
    break;
  40835a:	bf00      	nop
  40835c:	e00a      	b.n	408374 <tcp_process+0x6cc>
    break;
  40835e:	bf00      	nop
  408360:	e008      	b.n	408374 <tcp_process+0x6cc>
    break;
  408362:	bf00      	nop
  408364:	e006      	b.n	408374 <tcp_process+0x6cc>
    break;
  408366:	bf00      	nop
  408368:	e004      	b.n	408374 <tcp_process+0x6cc>
    break;
  40836a:	bf00      	nop
  40836c:	e002      	b.n	408374 <tcp_process+0x6cc>
    break;
  40836e:	bf00      	nop
  408370:	e000      	b.n	408374 <tcp_process+0x6cc>
    break;
  408372:	bf00      	nop
  }
  return ERR_OK;
  408374:	2300      	movs	r3, #0
}
  408376:	4618      	mov	r0, r3
  408378:	371c      	adds	r7, #28
  40837a:	46bd      	mov	sp, r7
  40837c:	bd90      	pop	{r4, r7, pc}
  40837e:	bf00      	nop
  408380:	204025f0 	.word	0x204025f0
  408384:	204025ec 	.word	0x204025ec
  408388:	004084a9 	.word	0x004084a9
  40838c:	204025f4 	.word	0x204025f4
  408390:	0040720d 	.word	0x0040720d
  408394:	204049a0 	.word	0x204049a0
  408398:	204049ac 	.word	0x204049ac
  40839c:	2040499c 	.word	0x2040499c
  4083a0:	204049b4 	.word	0x204049b4
  4083a4:	00404d75 	.word	0x00404d75

004083a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  4083a8:	b5b0      	push	{r4, r5, r7, lr}
  4083aa:	b084      	sub	sp, #16
  4083ac:	af00      	add	r7, sp, #0
  4083ae:	6078      	str	r0, [r7, #4]
  4083b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  4083b2:	687b      	ldr	r3, [r7, #4]
  4083b4:	68db      	ldr	r3, [r3, #12]
  4083b6:	899b      	ldrh	r3, [r3, #12]
  4083b8:	b29b      	uxth	r3, r3
  4083ba:	4618      	mov	r0, r3
  4083bc:	4b34      	ldr	r3, [pc, #208]	; (408490 <tcp_oos_insert_segment+0xe8>)
  4083be:	4798      	blx	r3
  4083c0:	4603      	mov	r3, r0
  4083c2:	f003 0301 	and.w	r3, r3, #1
  4083c6:	2b00      	cmp	r3, #0
  4083c8:	d026      	beq.n	408418 <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  4083ca:	6838      	ldr	r0, [r7, #0]
  4083cc:	4b31      	ldr	r3, [pc, #196]	; (408494 <tcp_oos_insert_segment+0xec>)
  4083ce:	4798      	blx	r3
    next = NULL;
  4083d0:	2300      	movs	r3, #0
  4083d2:	603b      	str	r3, [r7, #0]
  4083d4:	e054      	b.n	408480 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  4083d6:	683b      	ldr	r3, [r7, #0]
  4083d8:	68db      	ldr	r3, [r3, #12]
  4083da:	899b      	ldrh	r3, [r3, #12]
  4083dc:	b29b      	uxth	r3, r3
  4083de:	4618      	mov	r0, r3
  4083e0:	4b2b      	ldr	r3, [pc, #172]	; (408490 <tcp_oos_insert_segment+0xe8>)
  4083e2:	4798      	blx	r3
  4083e4:	4603      	mov	r3, r0
  4083e6:	f003 0301 	and.w	r3, r3, #1
  4083ea:	2b00      	cmp	r3, #0
  4083ec:	d00c      	beq.n	408408 <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  4083ee:	687b      	ldr	r3, [r7, #4]
  4083f0:	68dc      	ldr	r4, [r3, #12]
  4083f2:	687b      	ldr	r3, [r7, #4]
  4083f4:	68db      	ldr	r3, [r3, #12]
  4083f6:	899b      	ldrh	r3, [r3, #12]
  4083f8:	b29d      	uxth	r5, r3
  4083fa:	2001      	movs	r0, #1
  4083fc:	4b26      	ldr	r3, [pc, #152]	; (408498 <tcp_oos_insert_segment+0xf0>)
  4083fe:	4798      	blx	r3
  408400:	4603      	mov	r3, r0
  408402:	432b      	orrs	r3, r5
  408404:	b29b      	uxth	r3, r3
  408406:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
  408408:	683b      	ldr	r3, [r7, #0]
  40840a:	60fb      	str	r3, [r7, #12]
      next = next->next;
  40840c:	683b      	ldr	r3, [r7, #0]
  40840e:	681b      	ldr	r3, [r3, #0]
  408410:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
  408412:	68f8      	ldr	r0, [r7, #12]
  408414:	4b21      	ldr	r3, [pc, #132]	; (40849c <tcp_oos_insert_segment+0xf4>)
  408416:	4798      	blx	r3
    while (next &&
  408418:	683b      	ldr	r3, [r7, #0]
  40841a:	2b00      	cmp	r3, #0
  40841c:	d00e      	beq.n	40843c <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
  40841e:	687b      	ldr	r3, [r7, #4]
  408420:	891b      	ldrh	r3, [r3, #8]
  408422:	461a      	mov	r2, r3
  408424:	4b1e      	ldr	r3, [pc, #120]	; (4084a0 <tcp_oos_insert_segment+0xf8>)
  408426:	681b      	ldr	r3, [r3, #0]
  408428:	441a      	add	r2, r3
  40842a:	683b      	ldr	r3, [r7, #0]
  40842c:	68db      	ldr	r3, [r3, #12]
  40842e:	685b      	ldr	r3, [r3, #4]
  408430:	6839      	ldr	r1, [r7, #0]
  408432:	8909      	ldrh	r1, [r1, #8]
  408434:	440b      	add	r3, r1
  408436:	1ad3      	subs	r3, r2, r3
    while (next &&
  408438:	2b00      	cmp	r3, #0
  40843a:	dacc      	bge.n	4083d6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
  40843c:	683b      	ldr	r3, [r7, #0]
  40843e:	2b00      	cmp	r3, #0
  408440:	d01e      	beq.n	408480 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  408442:	687b      	ldr	r3, [r7, #4]
  408444:	891b      	ldrh	r3, [r3, #8]
  408446:	461a      	mov	r2, r3
  408448:	4b15      	ldr	r3, [pc, #84]	; (4084a0 <tcp_oos_insert_segment+0xf8>)
  40844a:	681b      	ldr	r3, [r3, #0]
  40844c:	441a      	add	r2, r3
  40844e:	683b      	ldr	r3, [r7, #0]
  408450:	68db      	ldr	r3, [r3, #12]
  408452:	685b      	ldr	r3, [r3, #4]
  408454:	1ad3      	subs	r3, r2, r3
    if (next &&
  408456:	2b00      	cmp	r3, #0
  408458:	dd12      	ble.n	408480 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  40845a:	683b      	ldr	r3, [r7, #0]
  40845c:	68db      	ldr	r3, [r3, #12]
  40845e:	685b      	ldr	r3, [r3, #4]
  408460:	b29a      	uxth	r2, r3
  408462:	4b0f      	ldr	r3, [pc, #60]	; (4084a0 <tcp_oos_insert_segment+0xf8>)
  408464:	681b      	ldr	r3, [r3, #0]
  408466:	b29b      	uxth	r3, r3
  408468:	1ad3      	subs	r3, r2, r3
  40846a:	b29a      	uxth	r2, r3
  40846c:	687b      	ldr	r3, [r7, #4]
  40846e:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  408470:	687b      	ldr	r3, [r7, #4]
  408472:	685a      	ldr	r2, [r3, #4]
  408474:	687b      	ldr	r3, [r7, #4]
  408476:	891b      	ldrh	r3, [r3, #8]
  408478:	4619      	mov	r1, r3
  40847a:	4610      	mov	r0, r2
  40847c:	4b09      	ldr	r3, [pc, #36]	; (4084a4 <tcp_oos_insert_segment+0xfc>)
  40847e:	4798      	blx	r3
    }
  }
  cseg->next = next;
  408480:	687b      	ldr	r3, [r7, #4]
  408482:	683a      	ldr	r2, [r7, #0]
  408484:	601a      	str	r2, [r3, #0]
}
  408486:	bf00      	nop
  408488:	3710      	adds	r7, #16
  40848a:	46bd      	mov	sp, r7
  40848c:	bdb0      	pop	{r4, r5, r7, pc}
  40848e:	bf00      	nop
  408490:	00401fc5 	.word	0x00401fc5
  408494:	00406e11 	.word	0x00406e11
  408498:	00401f99 	.word	0x00401f99
  40849c:	00406e3d 	.word	0x00406e3d
  4084a0:	204025e8 	.word	0x204025e8
  4084a4:	004059e9 	.word	0x004059e9

004084a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  4084a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4084aa:	b08d      	sub	sp, #52	; 0x34
  4084ac:	af00      	add	r7, sp, #0
  4084ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  4084b0:	2300      	movs	r3, #0
  4084b2:	61bb      	str	r3, [r7, #24]
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);

  if (flags & TCP_ACK) {
  4084b4:	4ba4      	ldr	r3, [pc, #656]	; (408748 <tcp_receive+0x2a0>)
  4084b6:	781b      	ldrb	r3, [r3, #0]
  4084b8:	f003 0310 	and.w	r3, r3, #16
  4084bc:	2b00      	cmp	r3, #0
  4084be:	f000 82aa 	beq.w	408a16 <tcp_receive+0x56e>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  4084c2:	687b      	ldr	r3, [r7, #4]
  4084c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  4084c8:	461a      	mov	r2, r3
  4084ca:	687b      	ldr	r3, [r7, #4]
  4084cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4084ce:	4413      	add	r3, r2
  4084d0:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  4084d2:	687b      	ldr	r3, [r7, #4]
  4084d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4084d6:	4b9d      	ldr	r3, [pc, #628]	; (40874c <tcp_receive+0x2a4>)
  4084d8:	681b      	ldr	r3, [r3, #0]
  4084da:	1ad3      	subs	r3, r2, r3
  4084dc:	2b00      	cmp	r3, #0
  4084de:	db1b      	blt.n	408518 <tcp_receive+0x70>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  4084e0:	687b      	ldr	r3, [r7, #4]
  4084e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  4084e4:	4b99      	ldr	r3, [pc, #612]	; (40874c <tcp_receive+0x2a4>)
  4084e6:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  4084e8:	429a      	cmp	r2, r3
  4084ea:	d106      	bne.n	4084fa <tcp_receive+0x52>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  4084ec:	687b      	ldr	r3, [r7, #4]
  4084ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  4084f0:	4b97      	ldr	r3, [pc, #604]	; (408750 <tcp_receive+0x2a8>)
  4084f2:	681b      	ldr	r3, [r3, #0]
  4084f4:	1ad3      	subs	r3, r2, r3
  4084f6:	2b00      	cmp	r3, #0
  4084f8:	db0e      	blt.n	408518 <tcp_receive+0x70>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  4084fa:	687b      	ldr	r3, [r7, #4]
  4084fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  4084fe:	4b94      	ldr	r3, [pc, #592]	; (408750 <tcp_receive+0x2a8>)
  408500:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  408502:	429a      	cmp	r2, r3
  408504:	d143      	bne.n	40858e <tcp_receive+0xe6>
       (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
  408506:	4b93      	ldr	r3, [pc, #588]	; (408754 <tcp_receive+0x2ac>)
  408508:	681b      	ldr	r3, [r3, #0]
  40850a:	89db      	ldrh	r3, [r3, #14]
  40850c:	b29a      	uxth	r2, r3
  40850e:	687b      	ldr	r3, [r7, #4]
  408510:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  408514:	429a      	cmp	r2, r3
  408516:	d93a      	bls.n	40858e <tcp_receive+0xe6>
      pcb->snd_wnd = tcphdr->wnd;
  408518:	4b8e      	ldr	r3, [pc, #568]	; (408754 <tcp_receive+0x2ac>)
  40851a:	681b      	ldr	r3, [r3, #0]
  40851c:	89db      	ldrh	r3, [r3, #14]
  40851e:	b29a      	uxth	r2, r3
  408520:	687b      	ldr	r3, [r7, #4]
  408522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < tcphdr->wnd) {
  408526:	687b      	ldr	r3, [r7, #4]
  408528:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
  40852c:	4b89      	ldr	r3, [pc, #548]	; (408754 <tcp_receive+0x2ac>)
  40852e:	681b      	ldr	r3, [r3, #0]
  408530:	89db      	ldrh	r3, [r3, #14]
  408532:	b29b      	uxth	r3, r3
  408534:	429a      	cmp	r2, r3
  408536:	d206      	bcs.n	408546 <tcp_receive+0x9e>
        pcb->snd_wnd_max = tcphdr->wnd;
  408538:	4b86      	ldr	r3, [pc, #536]	; (408754 <tcp_receive+0x2ac>)
  40853a:	681b      	ldr	r3, [r3, #0]
  40853c:	89db      	ldrh	r3, [r3, #14]
  40853e:	b29a      	uxth	r2, r3
  408540:	687b      	ldr	r3, [r7, #4]
  408542:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  408546:	4b81      	ldr	r3, [pc, #516]	; (40874c <tcp_receive+0x2a4>)
  408548:	681a      	ldr	r2, [r3, #0]
  40854a:	687b      	ldr	r3, [r7, #4]
  40854c:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  40854e:	4b80      	ldr	r3, [pc, #512]	; (408750 <tcp_receive+0x2a8>)
  408550:	681a      	ldr	r2, [r3, #0]
  408552:	687b      	ldr	r3, [r7, #4]
  408554:	659a      	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  408556:	687b      	ldr	r3, [r7, #4]
  408558:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40855c:	2b00      	cmp	r3, #0
  40855e:	d10d      	bne.n	40857c <tcp_receive+0xd4>
        if (pcb->persist_backoff == 0) {
  408560:	687b      	ldr	r3, [r7, #4]
  408562:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  408566:	2b00      	cmp	r3, #0
  408568:	d111      	bne.n	40858e <tcp_receive+0xe6>
          /* start persist timer */
          pcb->persist_cnt = 0;
  40856a:	687b      	ldr	r3, [r7, #4]
  40856c:	2200      	movs	r2, #0
  40856e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
  408572:	687b      	ldr	r3, [r7, #4]
  408574:	2201      	movs	r2, #1
  408576:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
  40857a:	e008      	b.n	40858e <tcp_receive+0xe6>
        }
      } else if (pcb->persist_backoff > 0) {
  40857c:	687b      	ldr	r3, [r7, #4]
  40857e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
  408582:	2b00      	cmp	r3, #0
  408584:	d003      	beq.n	40858e <tcp_receive+0xe6>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  408586:	687b      	ldr	r3, [r7, #4]
  408588:	2200      	movs	r2, #0
  40858a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  40858e:	4b70      	ldr	r3, [pc, #448]	; (408750 <tcp_receive+0x2a8>)
  408590:	681a      	ldr	r2, [r3, #0]
  408592:	687b      	ldr	r3, [r7, #4]
  408594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  408596:	1ad3      	subs	r3, r2, r3
  408598:	2b00      	cmp	r3, #0
  40859a:	dc5c      	bgt.n	408656 <tcp_receive+0x1ae>
      pcb->acked = 0;
  40859c:	687b      	ldr	r3, [r7, #4]
  40859e:	2200      	movs	r2, #0
  4085a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* Clause 2 */
      if (tcplen == 0) {
  4085a4:	4b6c      	ldr	r3, [pc, #432]	; (408758 <tcp_receive+0x2b0>)
  4085a6:	881b      	ldrh	r3, [r3, #0]
  4085a8:	2b00      	cmp	r3, #0
  4085aa:	d14b      	bne.n	408644 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
  4085ac:	687b      	ldr	r3, [r7, #4]
  4085ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  4085b0:	687a      	ldr	r2, [r7, #4]
  4085b2:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
  4085b6:	441a      	add	r2, r3
  4085b8:	697b      	ldr	r3, [r7, #20]
  4085ba:	429a      	cmp	r2, r3
  4085bc:	d142      	bne.n	408644 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  4085be:	687b      	ldr	r3, [r7, #4]
  4085c0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  4085c4:	2b00      	cmp	r3, #0
  4085c6:	db3d      	blt.n	408644 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  4085c8:	687b      	ldr	r3, [r7, #4]
  4085ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  4085cc:	4b60      	ldr	r3, [pc, #384]	; (408750 <tcp_receive+0x2a8>)
  4085ce:	681b      	ldr	r3, [r3, #0]
  4085d0:	429a      	cmp	r2, r3
  4085d2:	d137      	bne.n	408644 <tcp_receive+0x19c>
              found_dupack = 1;
  4085d4:	2301      	movs	r3, #1
  4085d6:	61bb      	str	r3, [r7, #24]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  4085d8:	687b      	ldr	r3, [r7, #4]
  4085da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4085de:	3301      	adds	r3, #1
  4085e0:	b2da      	uxtb	r2, r3
  4085e2:	687b      	ldr	r3, [r7, #4]
  4085e4:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4085e8:	429a      	cmp	r2, r3
  4085ea:	d907      	bls.n	4085fc <tcp_receive+0x154>
                ++pcb->dupacks;
  4085ec:	687b      	ldr	r3, [r7, #4]
  4085ee:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  4085f2:	3301      	adds	r3, #1
  4085f4:	b2da      	uxtb	r2, r3
  4085f6:	687b      	ldr	r3, [r7, #4]
  4085f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  4085fc:	687b      	ldr	r3, [r7, #4]
  4085fe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  408602:	2b03      	cmp	r3, #3
  408604:	d916      	bls.n	408634 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  408606:	687b      	ldr	r3, [r7, #4]
  408608:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40860c:	687b      	ldr	r3, [r7, #4]
  40860e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408610:	4413      	add	r3, r2
  408612:	b29a      	uxth	r2, r3
  408614:	687b      	ldr	r3, [r7, #4]
  408616:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40861a:	429a      	cmp	r2, r3
  40861c:	d912      	bls.n	408644 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
  40861e:	687b      	ldr	r3, [r7, #4]
  408620:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408624:	687b      	ldr	r3, [r7, #4]
  408626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408628:	4413      	add	r3, r2
  40862a:	b29a      	uxth	r2, r3
  40862c:	687b      	ldr	r3, [r7, #4]
  40862e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  408632:	e007      	b.n	408644 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
  408634:	687b      	ldr	r3, [r7, #4]
  408636:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
  40863a:	2b03      	cmp	r3, #3
  40863c:	d102      	bne.n	408644 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  40863e:	6878      	ldr	r0, [r7, #4]
  408640:	4b46      	ldr	r3, [pc, #280]	; (40875c <tcp_receive+0x2b4>)
  408642:	4798      	blx	r3
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  408644:	69bb      	ldr	r3, [r7, #24]
  408646:	2b00      	cmp	r3, #0
  408648:	f040 815e 	bne.w	408908 <tcp_receive+0x460>
        pcb->dupacks = 0;
  40864c:	687b      	ldr	r3, [r7, #4]
  40864e:	2200      	movs	r2, #0
  408650:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  408654:	e158      	b.n	408908 <tcp_receive+0x460>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
  408656:	4b3e      	ldr	r3, [pc, #248]	; (408750 <tcp_receive+0x2a8>)
  408658:	681a      	ldr	r2, [r3, #0]
  40865a:	687b      	ldr	r3, [r7, #4]
  40865c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40865e:	1ad3      	subs	r3, r2, r3
  408660:	3b01      	subs	r3, #1
  408662:	2b00      	cmp	r3, #0
  408664:	f2c0 8104 	blt.w	408870 <tcp_receive+0x3c8>
  408668:	4b39      	ldr	r3, [pc, #228]	; (408750 <tcp_receive+0x2a8>)
  40866a:	681a      	ldr	r2, [r3, #0]
  40866c:	687b      	ldr	r3, [r7, #4]
  40866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  408670:	1ad3      	subs	r3, r2, r3
  408672:	2b00      	cmp	r3, #0
  408674:	f300 80fc 	bgt.w	408870 <tcp_receive+0x3c8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  408678:	687b      	ldr	r3, [r7, #4]
  40867a:	7f9b      	ldrb	r3, [r3, #30]
  40867c:	f003 0304 	and.w	r3, r3, #4
  408680:	2b00      	cmp	r3, #0
  408682:	d00c      	beq.n	40869e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
  408684:	687b      	ldr	r3, [r7, #4]
  408686:	7f9b      	ldrb	r3, [r3, #30]
  408688:	f023 0304 	bic.w	r3, r3, #4
  40868c:	b2da      	uxtb	r2, r3
  40868e:	687b      	ldr	r3, [r7, #4]
  408690:	779a      	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  408692:	687b      	ldr	r3, [r7, #4]
  408694:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  408698:	687b      	ldr	r3, [r7, #4]
  40869a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  40869e:	687b      	ldr	r3, [r7, #4]
  4086a0:	2200      	movs	r2, #0
  4086a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4086a6:	687b      	ldr	r3, [r7, #4]
  4086a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4086ac:	10db      	asrs	r3, r3, #3
  4086ae:	b21b      	sxth	r3, r3
  4086b0:	b29a      	uxth	r2, r3
  4086b2:	687b      	ldr	r3, [r7, #4]
  4086b4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4086b8:	b29b      	uxth	r3, r3
  4086ba:	4413      	add	r3, r2
  4086bc:	b29b      	uxth	r3, r3
  4086be:	b21a      	sxth	r2, r3
  4086c0:	687b      	ldr	r3, [r7, #4]
  4086c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      /* Update the send buffer space. Diff between the two can never exceed 64K? */
      pcb->acked = (u16_t)(ackno - pcb->lastack);
  4086c6:	4b22      	ldr	r3, [pc, #136]	; (408750 <tcp_receive+0x2a8>)
  4086c8:	681b      	ldr	r3, [r3, #0]
  4086ca:	b29a      	uxth	r2, r3
  4086cc:	687b      	ldr	r3, [r7, #4]
  4086ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  4086d0:	b29b      	uxth	r3, r3
  4086d2:	1ad3      	subs	r3, r2, r3
  4086d4:	b29a      	uxth	r2, r3
  4086d6:	687b      	ldr	r3, [r7, #4]
  4086d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

      pcb->snd_buf += pcb->acked;
  4086dc:	687b      	ldr	r3, [r7, #4]
  4086de:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  4086e2:	687b      	ldr	r3, [r7, #4]
  4086e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4086e8:	4413      	add	r3, r2
  4086ea:	b29a      	uxth	r2, r3
  4086ec:	687b      	ldr	r3, [r7, #4]
  4086ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  4086f2:	687b      	ldr	r3, [r7, #4]
  4086f4:	2200      	movs	r2, #0
  4086f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  4086fa:	4b15      	ldr	r3, [pc, #84]	; (408750 <tcp_receive+0x2a8>)
  4086fc:	681a      	ldr	r2, [r3, #0]
  4086fe:	687b      	ldr	r3, [r7, #4]
  408700:	649a      	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  408702:	687b      	ldr	r3, [r7, #4]
  408704:	7e1b      	ldrb	r3, [r3, #24]
  408706:	2b03      	cmp	r3, #3
  408708:	d97b      	bls.n	408802 <tcp_receive+0x35a>
        if (pcb->cwnd < pcb->ssthresh) {
  40870a:	687b      	ldr	r3, [r7, #4]
  40870c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408710:	687b      	ldr	r3, [r7, #4]
  408712:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  408716:	429a      	cmp	r2, r3
  408718:	d222      	bcs.n	408760 <tcp_receive+0x2b8>
          if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  40871a:	687b      	ldr	r3, [r7, #4]
  40871c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408720:	687b      	ldr	r3, [r7, #4]
  408722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408724:	4413      	add	r3, r2
  408726:	b29a      	uxth	r2, r3
  408728:	687b      	ldr	r3, [r7, #4]
  40872a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40872e:	429a      	cmp	r2, r3
  408730:	d967      	bls.n	408802 <tcp_receive+0x35a>
            pcb->cwnd += pcb->mss;
  408732:	687b      	ldr	r3, [r7, #4]
  408734:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408738:	687b      	ldr	r3, [r7, #4]
  40873a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40873c:	4413      	add	r3, r2
  40873e:	b29a      	uxth	r2, r3
  408740:	687b      	ldr	r3, [r7, #4]
  408742:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  408746:	e05c      	b.n	408802 <tcp_receive+0x35a>
  408748:	204025f0 	.word	0x204025f0
  40874c:	204025e8 	.word	0x204025e8
  408750:	204025ec 	.word	0x204025ec
  408754:	204025e0 	.word	0x204025e0
  408758:	204025f2 	.word	0x204025f2
  40875c:	0040a4b1 	.word	0x0040a4b1
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
        } else {
          u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  408760:	687b      	ldr	r3, [r7, #4]
  408762:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  408766:	687b      	ldr	r3, [r7, #4]
  408768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40876a:	4619      	mov	r1, r3
  40876c:	687b      	ldr	r3, [r7, #4]
  40876e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  408770:	fb03 f301 	mul.w	r3, r3, r1
  408774:	6879      	ldr	r1, [r7, #4]
  408776:	f8b1 104c 	ldrh.w	r1, [r1, #76]	; 0x4c
  40877a:	fb93 f3f1 	sdiv	r3, r3, r1
  40877e:	b29b      	uxth	r3, r3
  408780:	4413      	add	r3, r2
  408782:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
  408784:	687b      	ldr	r3, [r7, #4]
  408786:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40878a:	8a7a      	ldrh	r2, [r7, #18]
  40878c:	429a      	cmp	r2, r3
  40878e:	d938      	bls.n	408802 <tcp_receive+0x35a>
            pcb->cwnd = new_cwnd;
  408790:	687b      	ldr	r3, [r7, #4]
  408792:	8a7a      	ldrh	r2, [r7, #18]
  408794:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowlegdes them. */
      while (pcb->unacked != NULL &&
  408798:	e033      	b.n	408802 <tcp_receive+0x35a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      ntohl(pcb->unacked->tcphdr->seqno),
                                      ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  40879a:	687b      	ldr	r3, [r7, #4]
  40879c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40879e:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
  4087a0:	687b      	ldr	r3, [r7, #4]
  4087a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4087a4:	681a      	ldr	r2, [r3, #0]
  4087a6:	687b      	ldr	r3, [r7, #4]
  4087a8:	671a      	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
        /* Prevent ACK for FIN to generate a sent event */
        if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4087aa:	687b      	ldr	r3, [r7, #4]
  4087ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4087b0:	2b00      	cmp	r3, #0
  4087b2:	d013      	beq.n	4087dc <tcp_receive+0x334>
  4087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4087b6:	68db      	ldr	r3, [r3, #12]
  4087b8:	899b      	ldrh	r3, [r3, #12]
  4087ba:	b29b      	uxth	r3, r3
  4087bc:	4618      	mov	r0, r3
  4087be:	4b2f      	ldr	r3, [pc, #188]	; (40887c <tcp_receive+0x3d4>)
  4087c0:	4798      	blx	r3
  4087c2:	4603      	mov	r3, r0
  4087c4:	f003 0301 	and.w	r3, r3, #1
  4087c8:	2b00      	cmp	r3, #0
  4087ca:	d007      	beq.n	4087dc <tcp_receive+0x334>
          pcb->acked--;
  4087cc:	687b      	ldr	r3, [r7, #4]
  4087ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4087d2:	3b01      	subs	r3, #1
  4087d4:	b29a      	uxth	r2, r3
  4087d6:	687b      	ldr	r3, [r7, #4]
  4087d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
        }

        pcb->snd_queuelen -= pbuf_clen(next->p);
  4087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4087de:	685b      	ldr	r3, [r3, #4]
  4087e0:	4618      	mov	r0, r3
  4087e2:	4b27      	ldr	r3, [pc, #156]	; (408880 <tcp_receive+0x3d8>)
  4087e4:	4798      	blx	r3
  4087e6:	4603      	mov	r3, r0
  4087e8:	4619      	mov	r1, r3
  4087ea:	687b      	ldr	r3, [r7, #4]
  4087ec:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  4087f0:	b28b      	uxth	r3, r1
  4087f2:	1ad3      	subs	r3, r2, r3
  4087f4:	b29a      	uxth	r2, r3
  4087f6:	687b      	ldr	r3, [r7, #4]
  4087f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        tcp_seg_free(next);
  4087fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  4087fe:	4b21      	ldr	r3, [pc, #132]	; (408884 <tcp_receive+0x3dc>)
  408800:	4798      	blx	r3
      while (pcb->unacked != NULL &&
  408802:	687b      	ldr	r3, [r7, #4]
  408804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408806:	2b00      	cmp	r3, #0
  408808:	d022      	beq.n	408850 <tcp_receive+0x3a8>
             TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
  40880a:	687b      	ldr	r3, [r7, #4]
  40880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40880e:	68db      	ldr	r3, [r3, #12]
  408810:	685b      	ldr	r3, [r3, #4]
  408812:	4618      	mov	r0, r3
  408814:	4b1c      	ldr	r3, [pc, #112]	; (408888 <tcp_receive+0x3e0>)
  408816:	4798      	blx	r3
  408818:	4604      	mov	r4, r0
  40881a:	687b      	ldr	r3, [r7, #4]
  40881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40881e:	891b      	ldrh	r3, [r3, #8]
  408820:	461d      	mov	r5, r3
  408822:	687b      	ldr	r3, [r7, #4]
  408824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408826:	68db      	ldr	r3, [r3, #12]
  408828:	899b      	ldrh	r3, [r3, #12]
  40882a:	b29b      	uxth	r3, r3
  40882c:	4618      	mov	r0, r3
  40882e:	4b13      	ldr	r3, [pc, #76]	; (40887c <tcp_receive+0x3d4>)
  408830:	4798      	blx	r3
  408832:	4603      	mov	r3, r0
  408834:	f003 0303 	and.w	r3, r3, #3
  408838:	2b00      	cmp	r3, #0
  40883a:	bf14      	ite	ne
  40883c:	2301      	movne	r3, #1
  40883e:	2300      	moveq	r3, #0
  408840:	b2db      	uxtb	r3, r3
  408842:	442b      	add	r3, r5
  408844:	18e2      	adds	r2, r4, r3
  408846:	4b11      	ldr	r3, [pc, #68]	; (40888c <tcp_receive+0x3e4>)
  408848:	681b      	ldr	r3, [r3, #0]
  40884a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
  40884c:	2b00      	cmp	r3, #0
  40884e:	dda4      	ble.n	40879a <tcp_receive+0x2f2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if(pcb->unacked == NULL)
  408850:	687b      	ldr	r3, [r7, #4]
  408852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  408854:	2b00      	cmp	r3, #0
  408856:	d104      	bne.n	408862 <tcp_receive+0x3ba>
        pcb->rtime = -1;
  408858:	687b      	ldr	r3, [r7, #4]
  40885a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40885e:	869a      	strh	r2, [r3, #52]	; 0x34
  408860:	e002      	b.n	408868 <tcp_receive+0x3c0>
      else
        pcb->rtime = 0;
  408862:	687b      	ldr	r3, [r7, #4]
  408864:	2200      	movs	r2, #0
  408866:	869a      	strh	r2, [r3, #52]	; 0x34

      pcb->polltmr = 0;
  408868:	687b      	ldr	r3, [r7, #4]
  40886a:	2200      	movs	r2, #0
  40886c:	77da      	strb	r2, [r3, #31]
  40886e:	e003      	b.n	408878 <tcp_receive+0x3d0>
    } else {
      /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
      pcb->acked = 0;
  408870:	687b      	ldr	r3, [r7, #4]
  408872:	2200      	movs	r2, #0
  408874:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  408878:	e046      	b.n	408908 <tcp_receive+0x460>
  40887a:	bf00      	nop
  40887c:	00401fc5 	.word	0x00401fc5
  408880:	00405c11 	.word	0x00405c11
  408884:	00406e3d 	.word	0x00406e3d
  408888:	00402019 	.word	0x00402019
  40888c:	204025ec 	.word	0x204025ec
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  408890:	687b      	ldr	r3, [r7, #4]
  408892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408894:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
  408896:	687b      	ldr	r3, [r7, #4]
  408898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40889a:	681a      	ldr	r2, [r3, #0]
  40889c:	687b      	ldr	r3, [r7, #4]
  40889e:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  4088a0:	687b      	ldr	r3, [r7, #4]
  4088a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  4088a4:	2b00      	cmp	r3, #0
  4088a6:	d103      	bne.n	4088b0 <tcp_receive+0x408>
        pcb->unsent_oversize = 0;
  4088a8:	687b      	ldr	r3, [r7, #4]
  4088aa:	2200      	movs	r2, #0
  4088ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }
#endif /* TCP_OVERSIZE */ 
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
      /* Prevent ACK for FIN to generate a sent event */
      if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
  4088b0:	687b      	ldr	r3, [r7, #4]
  4088b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4088b6:	2b00      	cmp	r3, #0
  4088b8:	d013      	beq.n	4088e2 <tcp_receive+0x43a>
  4088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4088bc:	68db      	ldr	r3, [r3, #12]
  4088be:	899b      	ldrh	r3, [r3, #12]
  4088c0:	b29b      	uxth	r3, r3
  4088c2:	4618      	mov	r0, r3
  4088c4:	4b90      	ldr	r3, [pc, #576]	; (408b08 <tcp_receive+0x660>)
  4088c6:	4798      	blx	r3
  4088c8:	4603      	mov	r3, r0
  4088ca:	f003 0301 	and.w	r3, r3, #1
  4088ce:	2b00      	cmp	r3, #0
  4088d0:	d007      	beq.n	4088e2 <tcp_receive+0x43a>
        pcb->acked--;
  4088d2:	687b      	ldr	r3, [r7, #4]
  4088d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
  4088d8:	3b01      	subs	r3, #1
  4088da:	b29a      	uxth	r2, r3
  4088dc:	687b      	ldr	r3, [r7, #4]
  4088de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
      pcb->snd_queuelen -= pbuf_clen(next->p);
  4088e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4088e4:	685b      	ldr	r3, [r3, #4]
  4088e6:	4618      	mov	r0, r3
  4088e8:	4b88      	ldr	r3, [pc, #544]	; (408b0c <tcp_receive+0x664>)
  4088ea:	4798      	blx	r3
  4088ec:	4603      	mov	r3, r0
  4088ee:	4619      	mov	r1, r3
  4088f0:	687b      	ldr	r3, [r7, #4]
  4088f2:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  4088f6:	b28b      	uxth	r3, r1
  4088f8:	1ad3      	subs	r3, r2, r3
  4088fa:	b29a      	uxth	r2, r3
  4088fc:	687b      	ldr	r3, [r7, #4]
  4088fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      tcp_seg_free(next);
  408902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  408904:	4b82      	ldr	r3, [pc, #520]	; (408b10 <tcp_receive+0x668>)
  408906:	4798      	blx	r3
    while (pcb->unsent != NULL &&
  408908:	687b      	ldr	r3, [r7, #4]
  40890a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40890c:	2b00      	cmp	r3, #0
  40890e:	d029      	beq.n	408964 <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408910:	4b80      	ldr	r3, [pc, #512]	; (408b14 <tcp_receive+0x66c>)
  408912:	681c      	ldr	r4, [r3, #0]
  408914:	687b      	ldr	r3, [r7, #4]
  408916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408918:	68db      	ldr	r3, [r3, #12]
  40891a:	685b      	ldr	r3, [r3, #4]
  40891c:	4618      	mov	r0, r3
  40891e:	4b7e      	ldr	r3, [pc, #504]	; (408b18 <tcp_receive+0x670>)
  408920:	4798      	blx	r3
  408922:	4605      	mov	r5, r0
  408924:	687b      	ldr	r3, [r7, #4]
  408926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408928:	891b      	ldrh	r3, [r3, #8]
  40892a:	461e      	mov	r6, r3
  40892c:	687b      	ldr	r3, [r7, #4]
  40892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  408930:	68db      	ldr	r3, [r3, #12]
  408932:	899b      	ldrh	r3, [r3, #12]
  408934:	b29b      	uxth	r3, r3
  408936:	4618      	mov	r0, r3
  408938:	4b73      	ldr	r3, [pc, #460]	; (408b08 <tcp_receive+0x660>)
  40893a:	4798      	blx	r3
  40893c:	4603      	mov	r3, r0
  40893e:	f003 0303 	and.w	r3, r3, #3
  408942:	2b00      	cmp	r3, #0
  408944:	bf14      	ite	ne
  408946:	2301      	movne	r3, #1
  408948:	2300      	moveq	r3, #0
  40894a:	b2db      	uxtb	r3, r3
  40894c:	4433      	add	r3, r6
  40894e:	442b      	add	r3, r5
  408950:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
  408952:	2b00      	cmp	r3, #0
  408954:	db06      	blt.n	408964 <tcp_receive+0x4bc>
           TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
  408956:	4b6f      	ldr	r3, [pc, #444]	; (408b14 <tcp_receive+0x66c>)
  408958:	681a      	ldr	r2, [r3, #0]
  40895a:	687b      	ldr	r3, [r7, #4]
  40895c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40895e:	1ad3      	subs	r3, r2, r3
  408960:	2b00      	cmp	r3, #0
  408962:	dd95      	ble.n	408890 <tcp_receive+0x3e8>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  408964:	687b      	ldr	r3, [r7, #4]
  408966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408968:	2b00      	cmp	r3, #0
  40896a:	d054      	beq.n	408a16 <tcp_receive+0x56e>
  40896c:	687b      	ldr	r3, [r7, #4]
  40896e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  408970:	4b68      	ldr	r3, [pc, #416]	; (408b14 <tcp_receive+0x66c>)
  408972:	681b      	ldr	r3, [r3, #0]
  408974:	1ad3      	subs	r3, r2, r3
  408976:	2b00      	cmp	r3, #0
  408978:	da4d      	bge.n	408a16 <tcp_receive+0x56e>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  40897a:	4b68      	ldr	r3, [pc, #416]	; (408b1c <tcp_receive+0x674>)
  40897c:	681b      	ldr	r3, [r3, #0]
  40897e:	b29a      	uxth	r2, r3
  408980:	687b      	ldr	r3, [r7, #4]
  408982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  408984:	b29b      	uxth	r3, r3
  408986:	1ad3      	subs	r3, r2, r3
  408988:	b29b      	uxth	r3, r3
  40898a:	83fb      	strh	r3, [r7, #30]

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, m * TCP_SLOW_INTERVAL));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  40898c:	8bfa      	ldrh	r2, [r7, #30]
  40898e:	687b      	ldr	r3, [r7, #4]
  408990:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  408994:	10db      	asrs	r3, r3, #3
  408996:	b21b      	sxth	r3, r3
  408998:	b29b      	uxth	r3, r3
  40899a:	1ad3      	subs	r3, r2, r3
  40899c:	b29b      	uxth	r3, r3
  40899e:	83fb      	strh	r3, [r7, #30]
      pcb->sa += m;
  4089a0:	687b      	ldr	r3, [r7, #4]
  4089a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4089a6:	b29a      	uxth	r2, r3
  4089a8:	8bfb      	ldrh	r3, [r7, #30]
  4089aa:	4413      	add	r3, r2
  4089ac:	b29b      	uxth	r3, r3
  4089ae:	b21a      	sxth	r2, r3
  4089b0:	687b      	ldr	r3, [r7, #4]
  4089b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      if (m < 0) {
  4089b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  4089ba:	2b00      	cmp	r3, #0
  4089bc:	da03      	bge.n	4089c6 <tcp_receive+0x51e>
        m = -m;
  4089be:	8bfb      	ldrh	r3, [r7, #30]
  4089c0:	425b      	negs	r3, r3
  4089c2:	b29b      	uxth	r3, r3
  4089c4:	83fb      	strh	r3, [r7, #30]
      }
      m = m - (pcb->sv >> 2);
  4089c6:	8bfa      	ldrh	r2, [r7, #30]
  4089c8:	687b      	ldr	r3, [r7, #4]
  4089ca:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4089ce:	109b      	asrs	r3, r3, #2
  4089d0:	b21b      	sxth	r3, r3
  4089d2:	b29b      	uxth	r3, r3
  4089d4:	1ad3      	subs	r3, r2, r3
  4089d6:	b29b      	uxth	r3, r3
  4089d8:	83fb      	strh	r3, [r7, #30]
      pcb->sv += m;
  4089da:	687b      	ldr	r3, [r7, #4]
  4089dc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  4089e0:	b29a      	uxth	r2, r3
  4089e2:	8bfb      	ldrh	r3, [r7, #30]
  4089e4:	4413      	add	r3, r2
  4089e6:	b29b      	uxth	r3, r3
  4089e8:	b21a      	sxth	r2, r3
  4089ea:	687b      	ldr	r3, [r7, #4]
  4089ec:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  4089f0:	687b      	ldr	r3, [r7, #4]
  4089f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
  4089f6:	10db      	asrs	r3, r3, #3
  4089f8:	b21b      	sxth	r3, r3
  4089fa:	b29a      	uxth	r2, r3
  4089fc:	687b      	ldr	r3, [r7, #4]
  4089fe:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
  408a02:	b29b      	uxth	r3, r3
  408a04:	4413      	add	r3, r2
  408a06:	b29b      	uxth	r3, r3
  408a08:	b21a      	sxth	r2, r3
  408a0a:	687b      	ldr	r3, [r7, #4]
  408a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));

      pcb->rttest = 0;
  408a10:	687b      	ldr	r3, [r7, #4]
  408a12:	2200      	movs	r2, #0
  408a14:	639a      	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  408a16:	4b42      	ldr	r3, [pc, #264]	; (408b20 <tcp_receive+0x678>)
  408a18:	881b      	ldrh	r3, [r3, #0]
  408a1a:	2b00      	cmp	r3, #0
  408a1c:	f000 8462 	beq.w	4092e4 <tcp_receive+0xe3c>
  408a20:	687b      	ldr	r3, [r7, #4]
  408a22:	7e1b      	ldrb	r3, [r3, #24]
  408a24:	2b06      	cmp	r3, #6
  408a26:	f200 845d 	bhi.w	4092e4 <tcp_receive+0xe3c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
  408a2a:	687b      	ldr	r3, [r7, #4]
  408a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408a2e:	4b3d      	ldr	r3, [pc, #244]	; (408b24 <tcp_receive+0x67c>)
  408a30:	681b      	ldr	r3, [r3, #0]
  408a32:	1ad3      	subs	r3, r2, r3
  408a34:	3b01      	subs	r3, #1
  408a36:	2b00      	cmp	r3, #0
  408a38:	db7a      	blt.n	408b30 <tcp_receive+0x688>
  408a3a:	687b      	ldr	r3, [r7, #4]
  408a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408a3e:	4b38      	ldr	r3, [pc, #224]	; (408b20 <tcp_receive+0x678>)
  408a40:	881b      	ldrh	r3, [r3, #0]
  408a42:	4619      	mov	r1, r3
  408a44:	4b37      	ldr	r3, [pc, #220]	; (408b24 <tcp_receive+0x67c>)
  408a46:	681b      	ldr	r3, [r3, #0]
  408a48:	440b      	add	r3, r1
  408a4a:	1ad3      	subs	r3, r2, r3
  408a4c:	3301      	adds	r3, #1
  408a4e:	2b00      	cmp	r3, #0
  408a50:	dc6e      	bgt.n	408b30 <tcp_receive+0x688>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      off = pcb->rcv_nxt - seqno;
  408a52:	687b      	ldr	r3, [r7, #4]
  408a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408a56:	4b33      	ldr	r3, [pc, #204]	; (408b24 <tcp_receive+0x67c>)
  408a58:	681b      	ldr	r3, [r3, #0]
  408a5a:	1ad3      	subs	r3, r2, r3
  408a5c:	623b      	str	r3, [r7, #32]
      p = inseg.p;
  408a5e:	4b32      	ldr	r3, [pc, #200]	; (408b28 <tcp_receive+0x680>)
  408a60:	685b      	ldr	r3, [r3, #4]
  408a62:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
      if (inseg.p->len < off) {
  408a64:	4b30      	ldr	r3, [pc, #192]	; (408b28 <tcp_receive+0x680>)
  408a66:	685b      	ldr	r3, [r3, #4]
  408a68:	895b      	ldrh	r3, [r3, #10]
  408a6a:	461a      	mov	r2, r3
  408a6c:	6a3b      	ldr	r3, [r7, #32]
  408a6e:	429a      	cmp	r2, r3
  408a70:	da26      	bge.n	408ac0 <tcp_receive+0x618>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  408a72:	4b2d      	ldr	r3, [pc, #180]	; (408b28 <tcp_receive+0x680>)
  408a74:	685b      	ldr	r3, [r3, #4]
  408a76:	891a      	ldrh	r2, [r3, #8]
  408a78:	6a3b      	ldr	r3, [r7, #32]
  408a7a:	b29b      	uxth	r3, r3
  408a7c:	1ad3      	subs	r3, r2, r3
  408a7e:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
  408a80:	e00e      	b.n	408aa0 <tcp_receive+0x5f8>
          off -= p->len;
  408a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408a84:	895b      	ldrh	r3, [r3, #10]
  408a86:	461a      	mov	r2, r3
  408a88:	6a3b      	ldr	r3, [r7, #32]
  408a8a:	1a9b      	subs	r3, r3, r2
  408a8c:	623b      	str	r3, [r7, #32]
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  408a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408a90:	8a3a      	ldrh	r2, [r7, #16]
  408a92:	811a      	strh	r2, [r3, #8]
          p->len = 0;
  408a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408a96:	2200      	movs	r2, #0
  408a98:	815a      	strh	r2, [r3, #10]
          p = p->next;
  408a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408a9c:	681b      	ldr	r3, [r3, #0]
  408a9e:	627b      	str	r3, [r7, #36]	; 0x24
        while (p->len < off) {
  408aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  408aa2:	895b      	ldrh	r3, [r3, #10]
  408aa4:	461a      	mov	r2, r3
  408aa6:	6a3b      	ldr	r3, [r7, #32]
  408aa8:	429a      	cmp	r2, r3
  408aaa:	dbea      	blt.n	408a82 <tcp_receive+0x5da>
        }
        if(pbuf_header(p, (s16_t)-off)) {
  408aac:	6a3b      	ldr	r3, [r7, #32]
  408aae:	b29b      	uxth	r3, r3
  408ab0:	425b      	negs	r3, r3
  408ab2:	b29b      	uxth	r3, r3
  408ab4:	b21b      	sxth	r3, r3
  408ab6:	4619      	mov	r1, r3
  408ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
  408aba:	4b1c      	ldr	r3, [pc, #112]	; (408b2c <tcp_receive+0x684>)
  408abc:	4798      	blx	r3
  408abe:	e00a      	b.n	408ad6 <tcp_receive+0x62e>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      } else {
        if(pbuf_header(inseg.p, (s16_t)-off)) {
  408ac0:	4b19      	ldr	r3, [pc, #100]	; (408b28 <tcp_receive+0x680>)
  408ac2:	685b      	ldr	r3, [r3, #4]
  408ac4:	6a3a      	ldr	r2, [r7, #32]
  408ac6:	b292      	uxth	r2, r2
  408ac8:	4252      	negs	r2, r2
  408aca:	b292      	uxth	r2, r2
  408acc:	b212      	sxth	r2, r2
  408ace:	4611      	mov	r1, r2
  408ad0:	4618      	mov	r0, r3
  408ad2:	4b16      	ldr	r3, [pc, #88]	; (408b2c <tcp_receive+0x684>)
  408ad4:	4798      	blx	r3
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  408ad6:	4b14      	ldr	r3, [pc, #80]	; (408b28 <tcp_receive+0x680>)
  408ad8:	891a      	ldrh	r2, [r3, #8]
  408ada:	4b12      	ldr	r3, [pc, #72]	; (408b24 <tcp_receive+0x67c>)
  408adc:	681b      	ldr	r3, [r3, #0]
  408ade:	b299      	uxth	r1, r3
  408ae0:	687b      	ldr	r3, [r7, #4]
  408ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408ae4:	b29b      	uxth	r3, r3
  408ae6:	1acb      	subs	r3, r1, r3
  408ae8:	b29b      	uxth	r3, r3
  408aea:	4413      	add	r3, r2
  408aec:	b29a      	uxth	r2, r3
  408aee:	4b0e      	ldr	r3, [pc, #56]	; (408b28 <tcp_receive+0x680>)
  408af0:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  408af2:	4b0d      	ldr	r3, [pc, #52]	; (408b28 <tcp_receive+0x680>)
  408af4:	68db      	ldr	r3, [r3, #12]
  408af6:	687a      	ldr	r2, [r7, #4]
  408af8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  408afa:	490a      	ldr	r1, [pc, #40]	; (408b24 <tcp_receive+0x67c>)
  408afc:	600a      	str	r2, [r1, #0]
  408afe:	4a09      	ldr	r2, [pc, #36]	; (408b24 <tcp_receive+0x67c>)
  408b00:	6812      	ldr	r2, [r2, #0]
  408b02:	605a      	str	r2, [r3, #4]
  408b04:	e022      	b.n	408b4c <tcp_receive+0x6a4>
  408b06:	bf00      	nop
  408b08:	00401fc5 	.word	0x00401fc5
  408b0c:	00405c11 	.word	0x00405c11
  408b10:	00406e3d 	.word	0x00406e3d
  408b14:	204025ec 	.word	0x204025ec
  408b18:	00402019 	.word	0x00402019
  408b1c:	204049a4 	.word	0x204049a4
  408b20:	204025f2 	.word	0x204025f2
  408b24:	204025e8 	.word	0x204025e8
  408b28:	204025d0 	.word	0x204025d0
  408b2c:	00405aa5 	.word	0x00405aa5
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
  408b30:	4b64      	ldr	r3, [pc, #400]	; (408cc4 <tcp_receive+0x81c>)
  408b32:	681a      	ldr	r2, [r3, #0]
  408b34:	687b      	ldr	r3, [r7, #4]
  408b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408b38:	1ad3      	subs	r3, r2, r3
  408b3a:	2b00      	cmp	r3, #0
  408b3c:	da06      	bge.n	408b4c <tcp_receive+0x6a4>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  408b3e:	687b      	ldr	r3, [r7, #4]
  408b40:	7f9b      	ldrb	r3, [r3, #30]
  408b42:	f043 0302 	orr.w	r3, r3, #2
  408b46:	b2da      	uxtb	r2, r3
  408b48:	687b      	ldr	r3, [r7, #4]
  408b4a:	779a      	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  408b4c:	4b5d      	ldr	r3, [pc, #372]	; (408cc4 <tcp_receive+0x81c>)
  408b4e:	681a      	ldr	r2, [r3, #0]
  408b50:	687b      	ldr	r3, [r7, #4]
  408b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408b54:	1ad3      	subs	r3, r2, r3
  408b56:	2b00      	cmp	r3, #0
  408b58:	f2c0 83bf 	blt.w	4092da <tcp_receive+0xe32>
  408b5c:	4b59      	ldr	r3, [pc, #356]	; (408cc4 <tcp_receive+0x81c>)
  408b5e:	681a      	ldr	r2, [r3, #0]
  408b60:	687b      	ldr	r3, [r7, #4]
  408b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408b64:	6879      	ldr	r1, [r7, #4]
  408b66:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  408b68:	440b      	add	r3, r1
  408b6a:	1ad3      	subs	r3, r2, r3
  408b6c:	3301      	adds	r3, #1
  408b6e:	2b00      	cmp	r3, #0
  408b70:	f300 83b3 	bgt.w	4092da <tcp_receive+0xe32>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)){
      if (pcb->rcv_nxt == seqno) {
  408b74:	687b      	ldr	r3, [r7, #4]
  408b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  408b78:	4b52      	ldr	r3, [pc, #328]	; (408cc4 <tcp_receive+0x81c>)
  408b7a:	681b      	ldr	r3, [r3, #0]
  408b7c:	429a      	cmp	r2, r3
  408b7e:	f040 823d 	bne.w	408ffc <tcp_receive+0xb54>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  408b82:	4b51      	ldr	r3, [pc, #324]	; (408cc8 <tcp_receive+0x820>)
  408b84:	891c      	ldrh	r4, [r3, #8]
  408b86:	4b50      	ldr	r3, [pc, #320]	; (408cc8 <tcp_receive+0x820>)
  408b88:	68db      	ldr	r3, [r3, #12]
  408b8a:	899b      	ldrh	r3, [r3, #12]
  408b8c:	b29b      	uxth	r3, r3
  408b8e:	4618      	mov	r0, r3
  408b90:	4b4e      	ldr	r3, [pc, #312]	; (408ccc <tcp_receive+0x824>)
  408b92:	4798      	blx	r3
  408b94:	4603      	mov	r3, r0
  408b96:	f003 0303 	and.w	r3, r3, #3
  408b9a:	2b00      	cmp	r3, #0
  408b9c:	bf14      	ite	ne
  408b9e:	2301      	movne	r3, #1
  408ba0:	2300      	moveq	r3, #0
  408ba2:	b2db      	uxtb	r3, r3
  408ba4:	b29b      	uxth	r3, r3
  408ba6:	4423      	add	r3, r4
  408ba8:	b29a      	uxth	r2, r3
  408baa:	4b49      	ldr	r3, [pc, #292]	; (408cd0 <tcp_receive+0x828>)
  408bac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
  408bae:	687b      	ldr	r3, [r7, #4]
  408bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408bb2:	4b47      	ldr	r3, [pc, #284]	; (408cd0 <tcp_receive+0x828>)
  408bb4:	881b      	ldrh	r3, [r3, #0]
  408bb6:	429a      	cmp	r2, r3
  408bb8:	d25d      	bcs.n	408c76 <tcp_receive+0x7ce>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408bba:	4b43      	ldr	r3, [pc, #268]	; (408cc8 <tcp_receive+0x820>)
  408bbc:	68db      	ldr	r3, [r3, #12]
  408bbe:	899b      	ldrh	r3, [r3, #12]
  408bc0:	b29b      	uxth	r3, r3
  408bc2:	4618      	mov	r0, r3
  408bc4:	4b41      	ldr	r3, [pc, #260]	; (408ccc <tcp_receive+0x824>)
  408bc6:	4798      	blx	r3
  408bc8:	4603      	mov	r3, r0
  408bca:	f003 0301 	and.w	r3, r3, #1
  408bce:	2b00      	cmp	r3, #0
  408bd0:	d01d      	beq.n	408c0e <tcp_receive+0x766>
            /* Must remove the FIN from the header as we're trimming 
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
  408bd2:	4b3d      	ldr	r3, [pc, #244]	; (408cc8 <tcp_receive+0x820>)
  408bd4:	68dc      	ldr	r4, [r3, #12]
  408bd6:	4b3c      	ldr	r3, [pc, #240]	; (408cc8 <tcp_receive+0x820>)
  408bd8:	68db      	ldr	r3, [r3, #12]
  408bda:	899b      	ldrh	r3, [r3, #12]
  408bdc:	b29b      	uxth	r3, r3
  408bde:	b21b      	sxth	r3, r3
  408be0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  408be4:	b21d      	sxth	r5, r3
  408be6:	4b38      	ldr	r3, [pc, #224]	; (408cc8 <tcp_receive+0x820>)
  408be8:	68db      	ldr	r3, [r3, #12]
  408bea:	899b      	ldrh	r3, [r3, #12]
  408bec:	b29b      	uxth	r3, r3
  408bee:	4618      	mov	r0, r3
  408bf0:	4b36      	ldr	r3, [pc, #216]	; (408ccc <tcp_receive+0x824>)
  408bf2:	4798      	blx	r3
  408bf4:	4603      	mov	r3, r0
  408bf6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  408bfa:	b29b      	uxth	r3, r3
  408bfc:	4618      	mov	r0, r3
  408bfe:	4b35      	ldr	r3, [pc, #212]	; (408cd4 <tcp_receive+0x82c>)
  408c00:	4798      	blx	r3
  408c02:	4603      	mov	r3, r0
  408c04:	b21b      	sxth	r3, r3
  408c06:	432b      	orrs	r3, r5
  408c08:	b21b      	sxth	r3, r3
  408c0a:	b29b      	uxth	r3, r3
  408c0c:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          inseg.len = pcb->rcv_wnd;
  408c0e:	687b      	ldr	r3, [r7, #4]
  408c10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408c12:	4b2d      	ldr	r3, [pc, #180]	; (408cc8 <tcp_receive+0x820>)
  408c14:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  408c16:	4b2c      	ldr	r3, [pc, #176]	; (408cc8 <tcp_receive+0x820>)
  408c18:	68db      	ldr	r3, [r3, #12]
  408c1a:	899b      	ldrh	r3, [r3, #12]
  408c1c:	b29b      	uxth	r3, r3
  408c1e:	4618      	mov	r0, r3
  408c20:	4b2a      	ldr	r3, [pc, #168]	; (408ccc <tcp_receive+0x824>)
  408c22:	4798      	blx	r3
  408c24:	4603      	mov	r3, r0
  408c26:	f003 0302 	and.w	r3, r3, #2
  408c2a:	2b00      	cmp	r3, #0
  408c2c:	d005      	beq.n	408c3a <tcp_receive+0x792>
            inseg.len -= 1;
  408c2e:	4b26      	ldr	r3, [pc, #152]	; (408cc8 <tcp_receive+0x820>)
  408c30:	891b      	ldrh	r3, [r3, #8]
  408c32:	3b01      	subs	r3, #1
  408c34:	b29a      	uxth	r2, r3
  408c36:	4b24      	ldr	r3, [pc, #144]	; (408cc8 <tcp_receive+0x820>)
  408c38:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  408c3a:	4b23      	ldr	r3, [pc, #140]	; (408cc8 <tcp_receive+0x820>)
  408c3c:	685a      	ldr	r2, [r3, #4]
  408c3e:	4b22      	ldr	r3, [pc, #136]	; (408cc8 <tcp_receive+0x820>)
  408c40:	891b      	ldrh	r3, [r3, #8]
  408c42:	4619      	mov	r1, r3
  408c44:	4610      	mov	r0, r2
  408c46:	4b24      	ldr	r3, [pc, #144]	; (408cd8 <tcp_receive+0x830>)
  408c48:	4798      	blx	r3
          tcplen = TCP_TCPLEN(&inseg);
  408c4a:	4b1f      	ldr	r3, [pc, #124]	; (408cc8 <tcp_receive+0x820>)
  408c4c:	891c      	ldrh	r4, [r3, #8]
  408c4e:	4b1e      	ldr	r3, [pc, #120]	; (408cc8 <tcp_receive+0x820>)
  408c50:	68db      	ldr	r3, [r3, #12]
  408c52:	899b      	ldrh	r3, [r3, #12]
  408c54:	b29b      	uxth	r3, r3
  408c56:	4618      	mov	r0, r3
  408c58:	4b1c      	ldr	r3, [pc, #112]	; (408ccc <tcp_receive+0x824>)
  408c5a:	4798      	blx	r3
  408c5c:	4603      	mov	r3, r0
  408c5e:	f003 0303 	and.w	r3, r3, #3
  408c62:	2b00      	cmp	r3, #0
  408c64:	bf14      	ite	ne
  408c66:	2301      	movne	r3, #1
  408c68:	2300      	moveq	r3, #0
  408c6a:	b2db      	uxtb	r3, r3
  408c6c:	b29b      	uxth	r3, r3
  408c6e:	4423      	add	r3, r4
  408c70:	b29a      	uxth	r2, r3
  408c72:	4b17      	ldr	r3, [pc, #92]	; (408cd0 <tcp_receive+0x828>)
  408c74:	801a      	strh	r2, [r3, #0]
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  408c76:	687b      	ldr	r3, [r7, #4]
  408c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408c7a:	2b00      	cmp	r3, #0
  408c7c:	f000 80d2 	beq.w	408e24 <tcp_receive+0x97c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408c80:	4b11      	ldr	r3, [pc, #68]	; (408cc8 <tcp_receive+0x820>)
  408c82:	68db      	ldr	r3, [r3, #12]
  408c84:	899b      	ldrh	r3, [r3, #12]
  408c86:	b29b      	uxth	r3, r3
  408c88:	4618      	mov	r0, r3
  408c8a:	4b10      	ldr	r3, [pc, #64]	; (408ccc <tcp_receive+0x824>)
  408c8c:	4798      	blx	r3
  408c8e:	4603      	mov	r3, r0
  408c90:	f003 0301 	and.w	r3, r3, #1
  408c94:	2b00      	cmp	r3, #0
  408c96:	d010      	beq.n	408cba <tcp_receive+0x812>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  408c98:	e00a      	b.n	408cb0 <tcp_receive+0x808>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  408c9a:	687b      	ldr	r3, [r7, #4]
  408c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408c9e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
  408ca0:	687b      	ldr	r3, [r7, #4]
  408ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408ca4:	681a      	ldr	r2, [r3, #0]
  408ca6:	687b      	ldr	r3, [r7, #4]
  408ca8:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  408caa:	68f8      	ldr	r0, [r7, #12]
  408cac:	4b0b      	ldr	r3, [pc, #44]	; (408cdc <tcp_receive+0x834>)
  408cae:	4798      	blx	r3
            while (pcb->ooseq != NULL) {
  408cb0:	687b      	ldr	r3, [r7, #4]
  408cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408cb4:	2b00      	cmp	r3, #0
  408cb6:	d1f0      	bne.n	408c9a <tcp_receive+0x7f2>
  408cb8:	e0b4      	b.n	408e24 <tcp_receive+0x97c>
            }
          } else {
            next = pcb->ooseq;
  408cba:	687b      	ldr	r3, [r7, #4]
  408cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  408cc0:	e051      	b.n	408d66 <tcp_receive+0x8be>
  408cc2:	bf00      	nop
  408cc4:	204025e8 	.word	0x204025e8
  408cc8:	204025d0 	.word	0x204025d0
  408ccc:	00401fc5 	.word	0x00401fc5
  408cd0:	204025f2 	.word	0x204025f2
  408cd4:	00401f99 	.word	0x00401f99
  408cd8:	004059e9 	.word	0x004059e9
  408cdc:	00406e3d 	.word	0x00406e3d
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  408ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408ce2:	68db      	ldr	r3, [r3, #12]
  408ce4:	899b      	ldrh	r3, [r3, #12]
  408ce6:	b29b      	uxth	r3, r3
  408ce8:	4618      	mov	r0, r3
  408cea:	4b90      	ldr	r3, [pc, #576]	; (408f2c <tcp_receive+0xa84>)
  408cec:	4798      	blx	r3
  408cee:	4603      	mov	r3, r0
  408cf0:	f003 0301 	and.w	r3, r3, #1
  408cf4:	2b00      	cmp	r3, #0
  408cf6:	d02e      	beq.n	408d56 <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  408cf8:	4b8d      	ldr	r3, [pc, #564]	; (408f30 <tcp_receive+0xa88>)
  408cfa:	68db      	ldr	r3, [r3, #12]
  408cfc:	899b      	ldrh	r3, [r3, #12]
  408cfe:	b29b      	uxth	r3, r3
  408d00:	4618      	mov	r0, r3
  408d02:	4b8a      	ldr	r3, [pc, #552]	; (408f2c <tcp_receive+0xa84>)
  408d04:	4798      	blx	r3
  408d06:	4603      	mov	r3, r0
  408d08:	f003 0302 	and.w	r3, r3, #2
              if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
  408d0c:	2b00      	cmp	r3, #0
  408d0e:	d122      	bne.n	408d56 <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  408d10:	4b87      	ldr	r3, [pc, #540]	; (408f30 <tcp_receive+0xa88>)
  408d12:	68dc      	ldr	r4, [r3, #12]
  408d14:	4b86      	ldr	r3, [pc, #536]	; (408f30 <tcp_receive+0xa88>)
  408d16:	68db      	ldr	r3, [r3, #12]
  408d18:	899b      	ldrh	r3, [r3, #12]
  408d1a:	b29d      	uxth	r5, r3
  408d1c:	2001      	movs	r0, #1
  408d1e:	4b85      	ldr	r3, [pc, #532]	; (408f34 <tcp_receive+0xa8c>)
  408d20:	4798      	blx	r3
  408d22:	4603      	mov	r3, r0
  408d24:	432b      	orrs	r3, r5
  408d26:	b29b      	uxth	r3, r3
  408d28:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
  408d2a:	4b81      	ldr	r3, [pc, #516]	; (408f30 <tcp_receive+0xa88>)
  408d2c:	891c      	ldrh	r4, [r3, #8]
  408d2e:	4b80      	ldr	r3, [pc, #512]	; (408f30 <tcp_receive+0xa88>)
  408d30:	68db      	ldr	r3, [r3, #12]
  408d32:	899b      	ldrh	r3, [r3, #12]
  408d34:	b29b      	uxth	r3, r3
  408d36:	4618      	mov	r0, r3
  408d38:	4b7c      	ldr	r3, [pc, #496]	; (408f2c <tcp_receive+0xa84>)
  408d3a:	4798      	blx	r3
  408d3c:	4603      	mov	r3, r0
  408d3e:	f003 0303 	and.w	r3, r3, #3
  408d42:	2b00      	cmp	r3, #0
  408d44:	bf14      	ite	ne
  408d46:	2301      	movne	r3, #1
  408d48:	2300      	moveq	r3, #0
  408d4a:	b2db      	uxtb	r3, r3
  408d4c:	b29b      	uxth	r3, r3
  408d4e:	4423      	add	r3, r4
  408d50:	b29a      	uxth	r2, r3
  408d52:	4b79      	ldr	r3, [pc, #484]	; (408f38 <tcp_receive+0xa90>)
  408d54:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
  408d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d58:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
  408d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d5c:	681b      	ldr	r3, [r3, #0]
  408d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
  408d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
  408d62:	4b76      	ldr	r3, [pc, #472]	; (408f3c <tcp_receive+0xa94>)
  408d64:	4798      	blx	r3
            while (next &&
  408d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d68:	2b00      	cmp	r3, #0
  408d6a:	d00e      	beq.n	408d8a <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
  408d6c:	4b72      	ldr	r3, [pc, #456]	; (408f38 <tcp_receive+0xa90>)
  408d6e:	881b      	ldrh	r3, [r3, #0]
  408d70:	461a      	mov	r2, r3
  408d72:	4b73      	ldr	r3, [pc, #460]	; (408f40 <tcp_receive+0xa98>)
  408d74:	681b      	ldr	r3, [r3, #0]
  408d76:	441a      	add	r2, r3
  408d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d7a:	68db      	ldr	r3, [r3, #12]
  408d7c:	685b      	ldr	r3, [r3, #4]
  408d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  408d80:	8909      	ldrh	r1, [r1, #8]
  408d82:	440b      	add	r3, r1
  408d84:	1ad3      	subs	r3, r2, r3
            while (next &&
  408d86:	2b00      	cmp	r3, #0
  408d88:	daaa      	bge.n	408ce0 <tcp_receive+0x838>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  408d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d8c:	2b00      	cmp	r3, #0
  408d8e:	d046      	beq.n	408e1e <tcp_receive+0x976>
                TCP_SEQ_GT(seqno + tcplen,
  408d90:	4b69      	ldr	r3, [pc, #420]	; (408f38 <tcp_receive+0xa90>)
  408d92:	881b      	ldrh	r3, [r3, #0]
  408d94:	461a      	mov	r2, r3
  408d96:	4b6a      	ldr	r3, [pc, #424]	; (408f40 <tcp_receive+0xa98>)
  408d98:	681b      	ldr	r3, [r3, #0]
  408d9a:	441a      	add	r2, r3
  408d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408d9e:	68db      	ldr	r3, [r3, #12]
  408da0:	685b      	ldr	r3, [r3, #4]
  408da2:	1ad3      	subs	r3, r2, r3
            if (next &&
  408da4:	2b00      	cmp	r3, #0
  408da6:	dd3a      	ble.n	408e1e <tcp_receive+0x976>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  408da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  408daa:	68db      	ldr	r3, [r3, #12]
  408dac:	685b      	ldr	r3, [r3, #4]
  408dae:	b29a      	uxth	r2, r3
  408db0:	4b63      	ldr	r3, [pc, #396]	; (408f40 <tcp_receive+0xa98>)
  408db2:	681b      	ldr	r3, [r3, #0]
  408db4:	b29b      	uxth	r3, r3
  408db6:	1ad3      	subs	r3, r2, r3
  408db8:	b29a      	uxth	r2, r3
  408dba:	4b5d      	ldr	r3, [pc, #372]	; (408f30 <tcp_receive+0xa88>)
  408dbc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  408dbe:	4b5c      	ldr	r3, [pc, #368]	; (408f30 <tcp_receive+0xa88>)
  408dc0:	68db      	ldr	r3, [r3, #12]
  408dc2:	899b      	ldrh	r3, [r3, #12]
  408dc4:	b29b      	uxth	r3, r3
  408dc6:	4618      	mov	r0, r3
  408dc8:	4b58      	ldr	r3, [pc, #352]	; (408f2c <tcp_receive+0xa84>)
  408dca:	4798      	blx	r3
  408dcc:	4603      	mov	r3, r0
  408dce:	f003 0302 	and.w	r3, r3, #2
  408dd2:	2b00      	cmp	r3, #0
  408dd4:	d005      	beq.n	408de2 <tcp_receive+0x93a>
                inseg.len -= 1;
  408dd6:	4b56      	ldr	r3, [pc, #344]	; (408f30 <tcp_receive+0xa88>)
  408dd8:	891b      	ldrh	r3, [r3, #8]
  408dda:	3b01      	subs	r3, #1
  408ddc:	b29a      	uxth	r2, r3
  408dde:	4b54      	ldr	r3, [pc, #336]	; (408f30 <tcp_receive+0xa88>)
  408de0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  408de2:	4b53      	ldr	r3, [pc, #332]	; (408f30 <tcp_receive+0xa88>)
  408de4:	685a      	ldr	r2, [r3, #4]
  408de6:	4b52      	ldr	r3, [pc, #328]	; (408f30 <tcp_receive+0xa88>)
  408de8:	891b      	ldrh	r3, [r3, #8]
  408dea:	4619      	mov	r1, r3
  408dec:	4610      	mov	r0, r2
  408dee:	4b55      	ldr	r3, [pc, #340]	; (408f44 <tcp_receive+0xa9c>)
  408df0:	4798      	blx	r3
              tcplen = TCP_TCPLEN(&inseg);
  408df2:	4b4f      	ldr	r3, [pc, #316]	; (408f30 <tcp_receive+0xa88>)
  408df4:	891c      	ldrh	r4, [r3, #8]
  408df6:	4b4e      	ldr	r3, [pc, #312]	; (408f30 <tcp_receive+0xa88>)
  408df8:	68db      	ldr	r3, [r3, #12]
  408dfa:	899b      	ldrh	r3, [r3, #12]
  408dfc:	b29b      	uxth	r3, r3
  408dfe:	4618      	mov	r0, r3
  408e00:	4b4a      	ldr	r3, [pc, #296]	; (408f2c <tcp_receive+0xa84>)
  408e02:	4798      	blx	r3
  408e04:	4603      	mov	r3, r0
  408e06:	f003 0303 	and.w	r3, r3, #3
  408e0a:	2b00      	cmp	r3, #0
  408e0c:	bf14      	ite	ne
  408e0e:	2301      	movne	r3, #1
  408e10:	2300      	moveq	r3, #0
  408e12:	b2db      	uxtb	r3, r3
  408e14:	b29b      	uxth	r3, r3
  408e16:	4423      	add	r3, r4
  408e18:	b29a      	uxth	r2, r3
  408e1a:	4b47      	ldr	r3, [pc, #284]	; (408f38 <tcp_receive+0xa90>)
  408e1c:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  408e1e:	687b      	ldr	r3, [r7, #4]
  408e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  408e22:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  408e24:	4b44      	ldr	r3, [pc, #272]	; (408f38 <tcp_receive+0xa90>)
  408e26:	881b      	ldrh	r3, [r3, #0]
  408e28:	461a      	mov	r2, r3
  408e2a:	4b45      	ldr	r3, [pc, #276]	; (408f40 <tcp_receive+0xa98>)
  408e2c:	681b      	ldr	r3, [r3, #0]
  408e2e:	441a      	add	r2, r3
  408e30:	687b      	ldr	r3, [r7, #4]
  408e32:	629a      	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
        pcb->rcv_wnd -= tcplen;
  408e34:	687b      	ldr	r3, [r7, #4]
  408e36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408e38:	4b3f      	ldr	r3, [pc, #252]	; (408f38 <tcp_receive+0xa90>)
  408e3a:	881b      	ldrh	r3, [r3, #0]
  408e3c:	1ad3      	subs	r3, r2, r3
  408e3e:	b29a      	uxth	r2, r3
  408e40:	687b      	ldr	r3, [r7, #4]
  408e42:	859a      	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  408e44:	6878      	ldr	r0, [r7, #4]
  408e46:	4b40      	ldr	r3, [pc, #256]	; (408f48 <tcp_receive+0xaa0>)
  408e48:	4798      	blx	r3
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  408e4a:	4b39      	ldr	r3, [pc, #228]	; (408f30 <tcp_receive+0xa88>)
  408e4c:	685b      	ldr	r3, [r3, #4]
  408e4e:	891b      	ldrh	r3, [r3, #8]
  408e50:	2b00      	cmp	r3, #0
  408e52:	d006      	beq.n	408e62 <tcp_receive+0x9ba>
          recv_data = inseg.p;
  408e54:	4b36      	ldr	r3, [pc, #216]	; (408f30 <tcp_receive+0xa88>)
  408e56:	685b      	ldr	r3, [r3, #4]
  408e58:	4a3c      	ldr	r2, [pc, #240]	; (408f4c <tcp_receive+0xaa4>)
  408e5a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  408e5c:	4b34      	ldr	r3, [pc, #208]	; (408f30 <tcp_receive+0xa88>)
  408e5e:	2200      	movs	r2, #0
  408e60:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  408e62:	4b33      	ldr	r3, [pc, #204]	; (408f30 <tcp_receive+0xa88>)
  408e64:	68db      	ldr	r3, [r3, #12]
  408e66:	899b      	ldrh	r3, [r3, #12]
  408e68:	b29b      	uxth	r3, r3
  408e6a:	4618      	mov	r0, r3
  408e6c:	4b2f      	ldr	r3, [pc, #188]	; (408f2c <tcp_receive+0xa84>)
  408e6e:	4798      	blx	r3
  408e70:	4603      	mov	r3, r0
  408e72:	f003 0301 	and.w	r3, r3, #1
  408e76:	2b00      	cmp	r3, #0
  408e78:	f000 8096 	beq.w	408fa8 <tcp_receive+0xb00>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  408e7c:	4b34      	ldr	r3, [pc, #208]	; (408f50 <tcp_receive+0xaa8>)
  408e7e:	781b      	ldrb	r3, [r3, #0]
  408e80:	f043 0320 	orr.w	r3, r3, #32
  408e84:	b2da      	uxtb	r2, r3
  408e86:	4b32      	ldr	r3, [pc, #200]	; (408f50 <tcp_receive+0xaa8>)
  408e88:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  408e8a:	e08d      	b.n	408fa8 <tcp_receive+0xb00>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  408e8c:	687b      	ldr	r3, [r7, #4]
  408e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408e90:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
  408e92:	687b      	ldr	r3, [r7, #4]
  408e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408e96:	68db      	ldr	r3, [r3, #12]
  408e98:	685b      	ldr	r3, [r3, #4]
  408e9a:	4a29      	ldr	r2, [pc, #164]	; (408f40 <tcp_receive+0xa98>)
  408e9c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  408e9e:	68bb      	ldr	r3, [r7, #8]
  408ea0:	891b      	ldrh	r3, [r3, #8]
  408ea2:	461c      	mov	r4, r3
  408ea4:	68bb      	ldr	r3, [r7, #8]
  408ea6:	68db      	ldr	r3, [r3, #12]
  408ea8:	899b      	ldrh	r3, [r3, #12]
  408eaa:	b29b      	uxth	r3, r3
  408eac:	4618      	mov	r0, r3
  408eae:	4b1f      	ldr	r3, [pc, #124]	; (408f2c <tcp_receive+0xa84>)
  408eb0:	4798      	blx	r3
  408eb2:	4603      	mov	r3, r0
  408eb4:	f003 0303 	and.w	r3, r3, #3
  408eb8:	2b00      	cmp	r3, #0
  408eba:	bf14      	ite	ne
  408ebc:	2301      	movne	r3, #1
  408ebe:	2300      	moveq	r3, #0
  408ec0:	b2db      	uxtb	r3, r3
  408ec2:	18e2      	adds	r2, r4, r3
  408ec4:	687b      	ldr	r3, [r7, #4]
  408ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  408ec8:	441a      	add	r2, r3
  408eca:	687b      	ldr	r3, [r7, #4]
  408ecc:	629a      	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  408ece:	68bb      	ldr	r3, [r7, #8]
  408ed0:	891b      	ldrh	r3, [r3, #8]
  408ed2:	461c      	mov	r4, r3
  408ed4:	68bb      	ldr	r3, [r7, #8]
  408ed6:	68db      	ldr	r3, [r3, #12]
  408ed8:	899b      	ldrh	r3, [r3, #12]
  408eda:	b29b      	uxth	r3, r3
  408edc:	4618      	mov	r0, r3
  408ede:	4b13      	ldr	r3, [pc, #76]	; (408f2c <tcp_receive+0xa84>)
  408ee0:	4798      	blx	r3
  408ee2:	4603      	mov	r3, r0
  408ee4:	f003 0303 	and.w	r3, r3, #3
  408ee8:	2b00      	cmp	r3, #0
  408eea:	bf14      	ite	ne
  408eec:	2301      	movne	r3, #1
  408eee:	2300      	moveq	r3, #0
  408ef0:	b2db      	uxtb	r3, r3
  408ef2:	18e1      	adds	r1, r4, r3
  408ef4:	687b      	ldr	r3, [r7, #4]
  408ef6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
  408ef8:	b28b      	uxth	r3, r1
  408efa:	1ad3      	subs	r3, r2, r3
  408efc:	b29a      	uxth	r2, r3
  408efe:	687b      	ldr	r3, [r7, #4]
  408f00:	859a      	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  408f02:	6878      	ldr	r0, [r7, #4]
  408f04:	4b10      	ldr	r3, [pc, #64]	; (408f48 <tcp_receive+0xaa0>)
  408f06:	4798      	blx	r3

          if (cseg->p->tot_len > 0) {
  408f08:	68bb      	ldr	r3, [r7, #8]
  408f0a:	685b      	ldr	r3, [r3, #4]
  408f0c:	891b      	ldrh	r3, [r3, #8]
  408f0e:	2b00      	cmp	r3, #0
  408f10:	d029      	beq.n	408f66 <tcp_receive+0xabe>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            if (recv_data) {
  408f12:	4b0e      	ldr	r3, [pc, #56]	; (408f4c <tcp_receive+0xaa4>)
  408f14:	681b      	ldr	r3, [r3, #0]
  408f16:	2b00      	cmp	r3, #0
  408f18:	d01e      	beq.n	408f58 <tcp_receive+0xab0>
              pbuf_cat(recv_data, cseg->p);
  408f1a:	4b0c      	ldr	r3, [pc, #48]	; (408f4c <tcp_receive+0xaa4>)
  408f1c:	681a      	ldr	r2, [r3, #0]
  408f1e:	68bb      	ldr	r3, [r7, #8]
  408f20:	685b      	ldr	r3, [r3, #4]
  408f22:	4619      	mov	r1, r3
  408f24:	4610      	mov	r0, r2
  408f26:	4b0b      	ldr	r3, [pc, #44]	; (408f54 <tcp_receive+0xaac>)
  408f28:	4798      	blx	r3
  408f2a:	e019      	b.n	408f60 <tcp_receive+0xab8>
  408f2c:	00401fc5 	.word	0x00401fc5
  408f30:	204025d0 	.word	0x204025d0
  408f34:	00401f99 	.word	0x00401f99
  408f38:	204025f2 	.word	0x204025f2
  408f3c:	00406e3d 	.word	0x00406e3d
  408f40:	204025e8 	.word	0x204025e8
  408f44:	004059e9 	.word	0x004059e9
  408f48:	004064c5 	.word	0x004064c5
  408f4c:	204025f8 	.word	0x204025f8
  408f50:	204025f4 	.word	0x204025f4
  408f54:	00405c65 	.word	0x00405c65
            } else {
              recv_data = cseg->p;
  408f58:	68bb      	ldr	r3, [r7, #8]
  408f5a:	685b      	ldr	r3, [r3, #4]
  408f5c:	4a71      	ldr	r2, [pc, #452]	; (409124 <tcp_receive+0xc7c>)
  408f5e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
  408f60:	68bb      	ldr	r3, [r7, #8]
  408f62:	2200      	movs	r2, #0
  408f64:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  408f66:	68bb      	ldr	r3, [r7, #8]
  408f68:	68db      	ldr	r3, [r3, #12]
  408f6a:	899b      	ldrh	r3, [r3, #12]
  408f6c:	b29b      	uxth	r3, r3
  408f6e:	4618      	mov	r0, r3
  408f70:	4b6d      	ldr	r3, [pc, #436]	; (409128 <tcp_receive+0xc80>)
  408f72:	4798      	blx	r3
  408f74:	4603      	mov	r3, r0
  408f76:	f003 0301 	and.w	r3, r3, #1
  408f7a:	2b00      	cmp	r3, #0
  408f7c:	d00d      	beq.n	408f9a <tcp_receive+0xaf2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  408f7e:	4b6b      	ldr	r3, [pc, #428]	; (40912c <tcp_receive+0xc84>)
  408f80:	781b      	ldrb	r3, [r3, #0]
  408f82:	f043 0320 	orr.w	r3, r3, #32
  408f86:	b2da      	uxtb	r2, r3
  408f88:	4b68      	ldr	r3, [pc, #416]	; (40912c <tcp_receive+0xc84>)
  408f8a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  408f8c:	687b      	ldr	r3, [r7, #4]
  408f8e:	7e1b      	ldrb	r3, [r3, #24]
  408f90:	2b04      	cmp	r3, #4
  408f92:	d102      	bne.n	408f9a <tcp_receive+0xaf2>
              pcb->state = CLOSE_WAIT;
  408f94:	687b      	ldr	r3, [r7, #4]
  408f96:	2207      	movs	r2, #7
  408f98:	761a      	strb	r2, [r3, #24]
            } 
          }

          pcb->ooseq = cseg->next;
  408f9a:	68bb      	ldr	r3, [r7, #8]
  408f9c:	681a      	ldr	r2, [r3, #0]
  408f9e:	687b      	ldr	r3, [r7, #4]
  408fa0:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  408fa2:	68b8      	ldr	r0, [r7, #8]
  408fa4:	4b62      	ldr	r3, [pc, #392]	; (409130 <tcp_receive+0xc88>)
  408fa6:	4798      	blx	r3
        while (pcb->ooseq != NULL &&
  408fa8:	687b      	ldr	r3, [r7, #4]
  408faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fac:	2b00      	cmp	r3, #0
  408fae:	d008      	beq.n	408fc2 <tcp_receive+0xb1a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  408fb0:	687b      	ldr	r3, [r7, #4]
  408fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  408fb4:	68db      	ldr	r3, [r3, #12]
  408fb6:	685a      	ldr	r2, [r3, #4]
  408fb8:	687b      	ldr	r3, [r7, #4]
  408fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  408fbc:	429a      	cmp	r2, r3
  408fbe:	f43f af65 	beq.w	408e8c <tcp_receive+0x9e4>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  408fc2:	687b      	ldr	r3, [r7, #4]
  408fc4:	7f9b      	ldrb	r3, [r3, #30]
  408fc6:	f003 0301 	and.w	r3, r3, #1
  408fca:	2b00      	cmp	r3, #0
  408fcc:	d00e      	beq.n	408fec <tcp_receive+0xb44>
  408fce:	687b      	ldr	r3, [r7, #4]
  408fd0:	7f9b      	ldrb	r3, [r3, #30]
  408fd2:	f023 0301 	bic.w	r3, r3, #1
  408fd6:	b2da      	uxtb	r2, r3
  408fd8:	687b      	ldr	r3, [r7, #4]
  408fda:	779a      	strb	r2, [r3, #30]
  408fdc:	687b      	ldr	r3, [r7, #4]
  408fde:	7f9b      	ldrb	r3, [r3, #30]
  408fe0:	f043 0302 	orr.w	r3, r3, #2
  408fe4:	b2da      	uxtb	r2, r3
  408fe6:	687b      	ldr	r3, [r7, #4]
  408fe8:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  408fea:	e17a      	b.n	4092e2 <tcp_receive+0xe3a>
        tcp_ack(pcb);
  408fec:	687b      	ldr	r3, [r7, #4]
  408fee:	7f9b      	ldrb	r3, [r3, #30]
  408ff0:	f043 0301 	orr.w	r3, r3, #1
  408ff4:	b2da      	uxtb	r2, r3
  408ff6:	687b      	ldr	r3, [r7, #4]
  408ff8:	779a      	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  408ffa:	e172      	b.n	4092e2 <tcp_receive+0xe3a>

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  408ffc:	6878      	ldr	r0, [r7, #4]
  408ffe:	4b4d      	ldr	r3, [pc, #308]	; (409134 <tcp_receive+0xc8c>)
  409000:	4798      	blx	r3
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  409002:	687b      	ldr	r3, [r7, #4]
  409004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  409006:	2b00      	cmp	r3, #0
  409008:	d106      	bne.n	409018 <tcp_receive+0xb70>
          pcb->ooseq = tcp_seg_copy(&inseg);
  40900a:	484b      	ldr	r0, [pc, #300]	; (409138 <tcp_receive+0xc90>)
  40900c:	4b4b      	ldr	r3, [pc, #300]	; (40913c <tcp_receive+0xc94>)
  40900e:	4798      	blx	r3
  409010:	4602      	mov	r2, r0
  409012:	687b      	ldr	r3, [r7, #4]
  409014:	675a      	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  409016:	e164      	b.n	4092e2 <tcp_receive+0xe3a>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  409018:	2300      	movs	r3, #0
  40901a:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  40901c:	687b      	ldr	r3, [r7, #4]
  40901e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  409020:	62fb      	str	r3, [r7, #44]	; 0x2c
  409022:	e149      	b.n	4092b8 <tcp_receive+0xe10>
            if (seqno == next->tcphdr->seqno) {
  409024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409026:	68db      	ldr	r3, [r3, #12]
  409028:	685a      	ldr	r2, [r3, #4]
  40902a:	4b45      	ldr	r3, [pc, #276]	; (409140 <tcp_receive+0xc98>)
  40902c:	681b      	ldr	r3, [r3, #0]
  40902e:	429a      	cmp	r2, r3
  409030:	d11d      	bne.n	40906e <tcp_receive+0xbc6>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  409032:	4b41      	ldr	r3, [pc, #260]	; (409138 <tcp_receive+0xc90>)
  409034:	891a      	ldrh	r2, [r3, #8]
  409036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409038:	891b      	ldrh	r3, [r3, #8]
  40903a:	429a      	cmp	r2, r3
  40903c:	f240 8141 	bls.w	4092c2 <tcp_receive+0xe1a>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  409040:	483d      	ldr	r0, [pc, #244]	; (409138 <tcp_receive+0xc90>)
  409042:	4b3e      	ldr	r3, [pc, #248]	; (40913c <tcp_receive+0xc94>)
  409044:	4798      	blx	r3
  409046:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
  409048:	68bb      	ldr	r3, [r7, #8]
  40904a:	2b00      	cmp	r3, #0
  40904c:	f000 813b 	beq.w	4092c6 <tcp_receive+0xe1e>
                  if (prev != NULL) {
  409050:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409052:	2b00      	cmp	r3, #0
  409054:	d003      	beq.n	40905e <tcp_receive+0xbb6>
                    prev->next = cseg;
  409056:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409058:	68ba      	ldr	r2, [r7, #8]
  40905a:	601a      	str	r2, [r3, #0]
  40905c:	e002      	b.n	409064 <tcp_receive+0xbbc>
                  } else {
                    pcb->ooseq = cseg;
  40905e:	687b      	ldr	r3, [r7, #4]
  409060:	68ba      	ldr	r2, [r7, #8]
  409062:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  409064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  409066:	68b8      	ldr	r0, [r7, #8]
  409068:	4b36      	ldr	r3, [pc, #216]	; (409144 <tcp_receive+0xc9c>)
  40906a:	4798      	blx	r3
                }
                break;
  40906c:	e12b      	b.n	4092c6 <tcp_receive+0xe1e>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  40906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409070:	2b00      	cmp	r3, #0
  409072:	d117      	bne.n	4090a4 <tcp_receive+0xbfc>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  409074:	4b32      	ldr	r3, [pc, #200]	; (409140 <tcp_receive+0xc98>)
  409076:	681a      	ldr	r2, [r3, #0]
  409078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40907a:	68db      	ldr	r3, [r3, #12]
  40907c:	685b      	ldr	r3, [r3, #4]
  40907e:	1ad3      	subs	r3, r2, r3
  409080:	2b00      	cmp	r3, #0
  409082:	da63      	bge.n	40914c <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  409084:	482c      	ldr	r0, [pc, #176]	; (409138 <tcp_receive+0xc90>)
  409086:	4b2d      	ldr	r3, [pc, #180]	; (40913c <tcp_receive+0xc94>)
  409088:	4798      	blx	r3
  40908a:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  40908c:	68bb      	ldr	r3, [r7, #8]
  40908e:	2b00      	cmp	r3, #0
  409090:	f000 811b 	beq.w	4092ca <tcp_receive+0xe22>
                    pcb->ooseq = cseg;
  409094:	687b      	ldr	r3, [r7, #4]
  409096:	68ba      	ldr	r2, [r7, #8]
  409098:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  40909a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40909c:	68b8      	ldr	r0, [r7, #8]
  40909e:	4b29      	ldr	r3, [pc, #164]	; (409144 <tcp_receive+0xc9c>)
  4090a0:	4798      	blx	r3
                  }
                  break;
  4090a2:	e112      	b.n	4092ca <tcp_receive+0xe22>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  4090a4:	4b26      	ldr	r3, [pc, #152]	; (409140 <tcp_receive+0xc98>)
  4090a6:	681a      	ldr	r2, [r3, #0]
  4090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4090aa:	68db      	ldr	r3, [r3, #12]
  4090ac:	685b      	ldr	r3, [r3, #4]
  4090ae:	1ad3      	subs	r3, r2, r3
  4090b0:	3b01      	subs	r3, #1
  4090b2:	2b00      	cmp	r3, #0
  4090b4:	db4a      	blt.n	40914c <tcp_receive+0xca4>
  4090b6:	4b22      	ldr	r3, [pc, #136]	; (409140 <tcp_receive+0xc98>)
  4090b8:	681a      	ldr	r2, [r3, #0]
  4090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4090bc:	68db      	ldr	r3, [r3, #12]
  4090be:	685b      	ldr	r3, [r3, #4]
  4090c0:	1ad3      	subs	r3, r2, r3
  4090c2:	3301      	adds	r3, #1
  4090c4:	2b00      	cmp	r3, #0
  4090c6:	dc41      	bgt.n	40914c <tcp_receive+0xca4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  4090c8:	481b      	ldr	r0, [pc, #108]	; (409138 <tcp_receive+0xc90>)
  4090ca:	4b1c      	ldr	r3, [pc, #112]	; (40913c <tcp_receive+0xc94>)
  4090cc:	4798      	blx	r3
  4090ce:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
  4090d0:	68bb      	ldr	r3, [r7, #8]
  4090d2:	2b00      	cmp	r3, #0
  4090d4:	f000 80fb 	beq.w	4092ce <tcp_receive+0xe26>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  4090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4090da:	68db      	ldr	r3, [r3, #12]
  4090dc:	685b      	ldr	r3, [r3, #4]
  4090de:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4090e0:	8912      	ldrh	r2, [r2, #8]
  4090e2:	441a      	add	r2, r3
  4090e4:	4b16      	ldr	r3, [pc, #88]	; (409140 <tcp_receive+0xc98>)
  4090e6:	681b      	ldr	r3, [r3, #0]
  4090e8:	1ad3      	subs	r3, r2, r3
  4090ea:	2b00      	cmp	r3, #0
  4090ec:	dd12      	ble.n	409114 <tcp_receive+0xc6c>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  4090ee:	4b14      	ldr	r3, [pc, #80]	; (409140 <tcp_receive+0xc98>)
  4090f0:	681b      	ldr	r3, [r3, #0]
  4090f2:	b29a      	uxth	r2, r3
  4090f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4090f6:	68db      	ldr	r3, [r3, #12]
  4090f8:	685b      	ldr	r3, [r3, #4]
  4090fa:	b29b      	uxth	r3, r3
  4090fc:	1ad3      	subs	r3, r2, r3
  4090fe:	b29a      	uxth	r2, r3
  409100:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409102:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  409104:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409106:	685a      	ldr	r2, [r3, #4]
  409108:	6abb      	ldr	r3, [r7, #40]	; 0x28
  40910a:	891b      	ldrh	r3, [r3, #8]
  40910c:	4619      	mov	r1, r3
  40910e:	4610      	mov	r0, r2
  409110:	4b0d      	ldr	r3, [pc, #52]	; (409148 <tcp_receive+0xca0>)
  409112:	4798      	blx	r3
                    }
                    prev->next = cseg;
  409114:	6abb      	ldr	r3, [r7, #40]	; 0x28
  409116:	68ba      	ldr	r2, [r7, #8]
  409118:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
  40911a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40911c:	68b8      	ldr	r0, [r7, #8]
  40911e:	4b09      	ldr	r3, [pc, #36]	; (409144 <tcp_receive+0xc9c>)
  409120:	4798      	blx	r3
                  }
                  break;
  409122:	e0d4      	b.n	4092ce <tcp_receive+0xe26>
  409124:	204025f8 	.word	0x204025f8
  409128:	00401fc5 	.word	0x00401fc5
  40912c:	204025f4 	.word	0x204025f4
  409130:	00406e3d 	.word	0x00406e3d
  409134:	00409dcd 	.word	0x00409dcd
  409138:	204025d0 	.word	0x204025d0
  40913c:	00406e95 	.word	0x00406e95
  409140:	204025e8 	.word	0x204025e8
  409144:	004083a9 	.word	0x004083a9
  409148:	004059e9 	.word	0x004059e9
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  40914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40914e:	681b      	ldr	r3, [r3, #0]
  409150:	2b00      	cmp	r3, #0
  409152:	f040 80ac 	bne.w	4092ae <tcp_receive+0xe06>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  409156:	4b72      	ldr	r3, [pc, #456]	; (409320 <tcp_receive+0xe78>)
  409158:	681a      	ldr	r2, [r3, #0]
  40915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40915c:	68db      	ldr	r3, [r3, #12]
  40915e:	685b      	ldr	r3, [r3, #4]
  409160:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
  409162:	2b00      	cmp	r3, #0
  409164:	f340 80a3 	ble.w	4092ae <tcp_receive+0xe06>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  409168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40916a:	68db      	ldr	r3, [r3, #12]
  40916c:	899b      	ldrh	r3, [r3, #12]
  40916e:	b29b      	uxth	r3, r3
  409170:	4618      	mov	r0, r3
  409172:	4b6c      	ldr	r3, [pc, #432]	; (409324 <tcp_receive+0xe7c>)
  409174:	4798      	blx	r3
  409176:	4603      	mov	r3, r0
  409178:	f003 0301 	and.w	r3, r3, #1
  40917c:	2b00      	cmp	r3, #0
  40917e:	f040 80a8 	bne.w	4092d2 <tcp_receive+0xe2a>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  409182:	4869      	ldr	r0, [pc, #420]	; (409328 <tcp_receive+0xe80>)
  409184:	4b69      	ldr	r3, [pc, #420]	; (40932c <tcp_receive+0xe84>)
  409186:	4798      	blx	r3
  409188:	4602      	mov	r2, r0
  40918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40918c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
  40918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409190:	681b      	ldr	r3, [r3, #0]
  409192:	2b00      	cmp	r3, #0
  409194:	f000 809f 	beq.w	4092d6 <tcp_receive+0xe2e>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  409198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40919a:	68db      	ldr	r3, [r3, #12]
  40919c:	685b      	ldr	r3, [r3, #4]
  40919e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  4091a0:	8912      	ldrh	r2, [r2, #8]
  4091a2:	441a      	add	r2, r3
  4091a4:	4b5e      	ldr	r3, [pc, #376]	; (409320 <tcp_receive+0xe78>)
  4091a6:	681b      	ldr	r3, [r3, #0]
  4091a8:	1ad3      	subs	r3, r2, r3
  4091aa:	2b00      	cmp	r3, #0
  4091ac:	dd12      	ble.n	4091d4 <tcp_receive+0xd2c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  4091ae:	4b5c      	ldr	r3, [pc, #368]	; (409320 <tcp_receive+0xe78>)
  4091b0:	681b      	ldr	r3, [r3, #0]
  4091b2:	b29a      	uxth	r2, r3
  4091b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4091b6:	68db      	ldr	r3, [r3, #12]
  4091b8:	685b      	ldr	r3, [r3, #4]
  4091ba:	b29b      	uxth	r3, r3
  4091bc:	1ad3      	subs	r3, r2, r3
  4091be:	b29a      	uxth	r2, r3
  4091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4091c2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  4091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4091c6:	685a      	ldr	r2, [r3, #4]
  4091c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4091ca:	891b      	ldrh	r3, [r3, #8]
  4091cc:	4619      	mov	r1, r3
  4091ce:	4610      	mov	r0, r2
  4091d0:	4b57      	ldr	r3, [pc, #348]	; (409330 <tcp_receive+0xe88>)
  4091d2:	4798      	blx	r3
                  }
                  /* check if the remote side overruns our receive window */
                  if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
  4091d4:	4b57      	ldr	r3, [pc, #348]	; (409334 <tcp_receive+0xe8c>)
  4091d6:	881b      	ldrh	r3, [r3, #0]
  4091d8:	461a      	mov	r2, r3
  4091da:	4b51      	ldr	r3, [pc, #324]	; (409320 <tcp_receive+0xe78>)
  4091dc:	681b      	ldr	r3, [r3, #0]
  4091de:	441a      	add	r2, r3
  4091e0:	687b      	ldr	r3, [r7, #4]
  4091e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4091e4:	6879      	ldr	r1, [r7, #4]
  4091e6:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  4091e8:	440b      	add	r3, r1
  4091ea:	429a      	cmp	r2, r3
  4091ec:	d973      	bls.n	4092d6 <tcp_receive+0xe2e>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG, 
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  4091ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4091f0:	681b      	ldr	r3, [r3, #0]
  4091f2:	68db      	ldr	r3, [r3, #12]
  4091f4:	899b      	ldrh	r3, [r3, #12]
  4091f6:	b29b      	uxth	r3, r3
  4091f8:	4618      	mov	r0, r3
  4091fa:	4b4a      	ldr	r3, [pc, #296]	; (409324 <tcp_receive+0xe7c>)
  4091fc:	4798      	blx	r3
  4091fe:	4603      	mov	r3, r0
  409200:	f003 0301 	and.w	r3, r3, #1
  409204:	2b00      	cmp	r3, #0
  409206:	d020      	beq.n	40924a <tcp_receive+0xda2>
                      /* Must remove the FIN from the header as we're trimming 
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN);
  409208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40920a:	681b      	ldr	r3, [r3, #0]
  40920c:	68dc      	ldr	r4, [r3, #12]
  40920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409210:	681b      	ldr	r3, [r3, #0]
  409212:	68db      	ldr	r3, [r3, #12]
  409214:	899b      	ldrh	r3, [r3, #12]
  409216:	b29b      	uxth	r3, r3
  409218:	b21b      	sxth	r3, r3
  40921a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  40921e:	b21d      	sxth	r5, r3
  409220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409222:	681b      	ldr	r3, [r3, #0]
  409224:	68db      	ldr	r3, [r3, #12]
  409226:	899b      	ldrh	r3, [r3, #12]
  409228:	b29b      	uxth	r3, r3
  40922a:	4618      	mov	r0, r3
  40922c:	4b3d      	ldr	r3, [pc, #244]	; (409324 <tcp_receive+0xe7c>)
  40922e:	4798      	blx	r3
  409230:	4603      	mov	r3, r0
  409232:	f003 033e 	and.w	r3, r3, #62	; 0x3e
  409236:	b29b      	uxth	r3, r3
  409238:	4618      	mov	r0, r3
  40923a:	4b3f      	ldr	r3, [pc, #252]	; (409338 <tcp_receive+0xe90>)
  40923c:	4798      	blx	r3
  40923e:	4603      	mov	r3, r0
  409240:	b21b      	sxth	r3, r3
  409242:	432b      	orrs	r3, r5
  409244:	b21b      	sxth	r3, r3
  409246:	b29b      	uxth	r3, r3
  409248:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
  40924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40924c:	681b      	ldr	r3, [r3, #0]
  40924e:	687a      	ldr	r2, [r7, #4]
  409250:	6a92      	ldr	r2, [r2, #40]	; 0x28
  409252:	b291      	uxth	r1, r2
  409254:	687a      	ldr	r2, [r7, #4]
  409256:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  409258:	440a      	add	r2, r1
  40925a:	b291      	uxth	r1, r2
  40925c:	4a30      	ldr	r2, [pc, #192]	; (409320 <tcp_receive+0xe78>)
  40925e:	6812      	ldr	r2, [r2, #0]
  409260:	b292      	uxth	r2, r2
  409262:	1a8a      	subs	r2, r1, r2
  409264:	b292      	uxth	r2, r2
  409266:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  409268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40926a:	681b      	ldr	r3, [r3, #0]
  40926c:	685a      	ldr	r2, [r3, #4]
  40926e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409270:	681b      	ldr	r3, [r3, #0]
  409272:	891b      	ldrh	r3, [r3, #8]
  409274:	4619      	mov	r1, r3
  409276:	4610      	mov	r0, r2
  409278:	4b2d      	ldr	r3, [pc, #180]	; (409330 <tcp_receive+0xe88>)
  40927a:	4798      	blx	r3
                    tcplen = TCP_TCPLEN(next->next);
  40927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40927e:	681b      	ldr	r3, [r3, #0]
  409280:	891c      	ldrh	r4, [r3, #8]
  409282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409284:	681b      	ldr	r3, [r3, #0]
  409286:	68db      	ldr	r3, [r3, #12]
  409288:	899b      	ldrh	r3, [r3, #12]
  40928a:	b29b      	uxth	r3, r3
  40928c:	4618      	mov	r0, r3
  40928e:	4b25      	ldr	r3, [pc, #148]	; (409324 <tcp_receive+0xe7c>)
  409290:	4798      	blx	r3
  409292:	4603      	mov	r3, r0
  409294:	f003 0303 	and.w	r3, r3, #3
  409298:	2b00      	cmp	r3, #0
  40929a:	bf14      	ite	ne
  40929c:	2301      	movne	r3, #1
  40929e:	2300      	moveq	r3, #0
  4092a0:	b2db      	uxtb	r3, r3
  4092a2:	b29b      	uxth	r3, r3
  4092a4:	4423      	add	r3, r4
  4092a6:	b29a      	uxth	r2, r3
  4092a8:	4b22      	ldr	r3, [pc, #136]	; (409334 <tcp_receive+0xe8c>)
  4092aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  4092ac:	e013      	b.n	4092d6 <tcp_receive+0xe2e>
              }
            }
            prev = next;
  4092ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4092b0:	62bb      	str	r3, [r7, #40]	; 0x28
          for(next = pcb->ooseq; next != NULL; next = next->next) {
  4092b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4092b4:	681b      	ldr	r3, [r3, #0]
  4092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  4092b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4092ba:	2b00      	cmp	r3, #0
  4092bc:	f47f aeb2 	bne.w	409024 <tcp_receive+0xb7c>
      if (pcb->rcv_nxt == seqno) {
  4092c0:	e00f      	b.n	4092e2 <tcp_receive+0xe3a>
                break;
  4092c2:	bf00      	nop
  4092c4:	e00d      	b.n	4092e2 <tcp_receive+0xe3a>
                break;
  4092c6:	bf00      	nop
  4092c8:	e00b      	b.n	4092e2 <tcp_receive+0xe3a>
                  break;
  4092ca:	bf00      	nop
  4092cc:	e009      	b.n	4092e2 <tcp_receive+0xe3a>
                  break;
  4092ce:	bf00      	nop
  4092d0:	e007      	b.n	4092e2 <tcp_receive+0xe3a>
                  break;
  4092d2:	bf00      	nop
  4092d4:	e005      	b.n	4092e2 <tcp_receive+0xe3a>
                break;
  4092d6:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
  4092d8:	e003      	b.n	4092e2 <tcp_receive+0xe3a>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not withing the window. */
      tcp_send_empty_ack(pcb);
  4092da:	6878      	ldr	r0, [r7, #4]
  4092dc:	4b17      	ldr	r3, [pc, #92]	; (40933c <tcp_receive+0xe94>)
  4092de:	4798      	blx	r3
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
  4092e0:	e01a      	b.n	409318 <tcp_receive+0xe70>
  4092e2:	e019      	b.n	409318 <tcp_receive+0xe70>
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
      TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
    if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
  4092e4:	4b0e      	ldr	r3, [pc, #56]	; (409320 <tcp_receive+0xe78>)
  4092e6:	681a      	ldr	r2, [r3, #0]
  4092e8:	687b      	ldr	r3, [r7, #4]
  4092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4092ec:	1ad3      	subs	r3, r2, r3
  4092ee:	2b00      	cmp	r3, #0
  4092f0:	db0a      	blt.n	409308 <tcp_receive+0xe60>
  4092f2:	4b0b      	ldr	r3, [pc, #44]	; (409320 <tcp_receive+0xe78>)
  4092f4:	681a      	ldr	r2, [r3, #0]
  4092f6:	687b      	ldr	r3, [r7, #4]
  4092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4092fa:	6879      	ldr	r1, [r7, #4]
  4092fc:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
  4092fe:	440b      	add	r3, r1
  409300:	1ad3      	subs	r3, r2, r3
  409302:	3301      	adds	r3, #1
  409304:	2b00      	cmp	r3, #0
  409306:	dd07      	ble.n	409318 <tcp_receive+0xe70>
      tcp_ack_now(pcb);
  409308:	687b      	ldr	r3, [r7, #4]
  40930a:	7f9b      	ldrb	r3, [r3, #30]
  40930c:	f043 0302 	orr.w	r3, r3, #2
  409310:	b2da      	uxtb	r2, r3
  409312:	687b      	ldr	r3, [r7, #4]
  409314:	779a      	strb	r2, [r3, #30]
    }
  }
}
  409316:	e7ff      	b.n	409318 <tcp_receive+0xe70>
  409318:	bf00      	nop
  40931a:	3734      	adds	r7, #52	; 0x34
  40931c:	46bd      	mov	sp, r7
  40931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409320:	204025e8 	.word	0x204025e8
  409324:	00401fc5 	.word	0x00401fc5
  409328:	204025d0 	.word	0x204025d0
  40932c:	00406e95 	.word	0x00406e95
  409330:	004059e9 	.word	0x004059e9
  409334:	204025f2 	.word	0x204025f2
  409338:	00401f99 	.word	0x00401f99
  40933c:	00409dcd 	.word	0x00409dcd

00409340 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  409340:	b580      	push	{r7, lr}
  409342:	b086      	sub	sp, #24
  409344:	af00      	add	r7, sp, #0
  409346:	6078      	str	r0, [r7, #4]
  u8_t *opts, opt;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  opts = (u8_t *)tcphdr + TCP_HLEN;
  409348:	4b3e      	ldr	r3, [pc, #248]	; (409444 <tcp_parseopt+0x104>)
  40934a:	681b      	ldr	r3, [r3, #0]
  40934c:	3314      	adds	r3, #20
  40934e:	613b      	str	r3, [r7, #16]

  /* Parse the TCP MSS option, if present. */
  if(TCPH_HDRLEN(tcphdr) > 0x5) {
  409350:	4b3c      	ldr	r3, [pc, #240]	; (409444 <tcp_parseopt+0x104>)
  409352:	681b      	ldr	r3, [r3, #0]
  409354:	899b      	ldrh	r3, [r3, #12]
  409356:	b29b      	uxth	r3, r3
  409358:	4618      	mov	r0, r3
  40935a:	4b3b      	ldr	r3, [pc, #236]	; (409448 <tcp_parseopt+0x108>)
  40935c:	4798      	blx	r3
  40935e:	4603      	mov	r3, r0
  409360:	0b1b      	lsrs	r3, r3, #12
  409362:	b29b      	uxth	r3, r3
  409364:	2b05      	cmp	r3, #5
  409366:	d969      	bls.n	40943c <tcp_parseopt+0xfc>
    max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
  409368:	4b36      	ldr	r3, [pc, #216]	; (409444 <tcp_parseopt+0x104>)
  40936a:	681b      	ldr	r3, [r3, #0]
  40936c:	899b      	ldrh	r3, [r3, #12]
  40936e:	b29b      	uxth	r3, r3
  409370:	4618      	mov	r0, r3
  409372:	4b35      	ldr	r3, [pc, #212]	; (409448 <tcp_parseopt+0x108>)
  409374:	4798      	blx	r3
  409376:	4603      	mov	r3, r0
  409378:	0b1b      	lsrs	r3, r3, #12
  40937a:	b29b      	uxth	r3, r3
  40937c:	3b05      	subs	r3, #5
  40937e:	b29b      	uxth	r3, r3
  409380:	009b      	lsls	r3, r3, #2
  409382:	81fb      	strh	r3, [r7, #14]
    for (c = 0; c < max_c; ) {
  409384:	2300      	movs	r3, #0
  409386:	82fb      	strh	r3, [r7, #22]
  409388:	e04e      	b.n	409428 <tcp_parseopt+0xe8>
      opt = opts[c];
  40938a:	8afb      	ldrh	r3, [r7, #22]
  40938c:	693a      	ldr	r2, [r7, #16]
  40938e:	4413      	add	r3, r2
  409390:	781b      	ldrb	r3, [r3, #0]
  409392:	737b      	strb	r3, [r7, #13]
      switch (opt) {
  409394:	7b7b      	ldrb	r3, [r7, #13]
  409396:	2b01      	cmp	r3, #1
  409398:	d004      	beq.n	4093a4 <tcp_parseopt+0x64>
  40939a:	2b02      	cmp	r3, #2
  40939c:	d006      	beq.n	4093ac <tcp_parseopt+0x6c>
  40939e:	2b00      	cmp	r3, #0
  4093a0:	d047      	beq.n	409432 <tcp_parseopt+0xf2>
  4093a2:	e031      	b.n	409408 <tcp_parseopt+0xc8>
        /* End of options. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
        return;
      case 0x01:
        /* NOP option. */
        ++c;
  4093a4:	8afb      	ldrh	r3, [r7, #22]
  4093a6:	3301      	adds	r3, #1
  4093a8:	82fb      	strh	r3, [r7, #22]
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
  4093aa:	e03d      	b.n	409428 <tcp_parseopt+0xe8>
      case 0x02:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
  4093ac:	8afb      	ldrh	r3, [r7, #22]
  4093ae:	3301      	adds	r3, #1
  4093b0:	693a      	ldr	r2, [r7, #16]
  4093b2:	4413      	add	r3, r2
  4093b4:	781b      	ldrb	r3, [r3, #0]
  4093b6:	2b04      	cmp	r3, #4
  4093b8:	d13d      	bne.n	409436 <tcp_parseopt+0xf6>
  4093ba:	8afb      	ldrh	r3, [r7, #22]
  4093bc:	1d1a      	adds	r2, r3, #4
  4093be:	89fb      	ldrh	r3, [r7, #14]
  4093c0:	429a      	cmp	r2, r3
  4093c2:	dc38      	bgt.n	409436 <tcp_parseopt+0xf6>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (opts[c + 2] << 8) | opts[c + 3];
  4093c4:	8afb      	ldrh	r3, [r7, #22]
  4093c6:	3302      	adds	r3, #2
  4093c8:	693a      	ldr	r2, [r7, #16]
  4093ca:	4413      	add	r3, r2
  4093cc:	781b      	ldrb	r3, [r3, #0]
  4093ce:	021b      	lsls	r3, r3, #8
  4093d0:	b21a      	sxth	r2, r3
  4093d2:	8afb      	ldrh	r3, [r7, #22]
  4093d4:	3303      	adds	r3, #3
  4093d6:	6939      	ldr	r1, [r7, #16]
  4093d8:	440b      	add	r3, r1
  4093da:	781b      	ldrb	r3, [r3, #0]
  4093dc:	b21b      	sxth	r3, r3
  4093de:	4313      	orrs	r3, r2
  4093e0:	b21b      	sxth	r3, r3
  4093e2:	817b      	strh	r3, [r7, #10]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  4093e4:	897b      	ldrh	r3, [r7, #10]
  4093e6:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4093ea:	4293      	cmp	r3, r2
  4093ec:	d804      	bhi.n	4093f8 <tcp_parseopt+0xb8>
  4093ee:	897b      	ldrh	r3, [r7, #10]
  4093f0:	2b00      	cmp	r3, #0
  4093f2:	d001      	beq.n	4093f8 <tcp_parseopt+0xb8>
  4093f4:	897a      	ldrh	r2, [r7, #10]
  4093f6:	e001      	b.n	4093fc <tcp_parseopt+0xbc>
  4093f8:	f240 52b4 	movw	r2, #1460	; 0x5b4
  4093fc:	687b      	ldr	r3, [r7, #4]
  4093fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Advance to next option */
        c += 0x04;
  409400:	8afb      	ldrh	r3, [r7, #22]
  409402:	3304      	adds	r3, #4
  409404:	82fb      	strh	r3, [r7, #22]
        break;
  409406:	e00f      	b.n	409428 <tcp_parseopt+0xe8>
        c += 0x0A;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        if (opts[c + 1] == 0) {
  409408:	8afb      	ldrh	r3, [r7, #22]
  40940a:	3301      	adds	r3, #1
  40940c:	693a      	ldr	r2, [r7, #16]
  40940e:	4413      	add	r3, r2
  409410:	781b      	ldrb	r3, [r3, #0]
  409412:	2b00      	cmp	r3, #0
  409414:	d011      	beq.n	40943a <tcp_parseopt+0xfa>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        c += opts[c + 1];
  409416:	8afb      	ldrh	r3, [r7, #22]
  409418:	3301      	adds	r3, #1
  40941a:	693a      	ldr	r2, [r7, #16]
  40941c:	4413      	add	r3, r2
  40941e:	781b      	ldrb	r3, [r3, #0]
  409420:	b29a      	uxth	r2, r3
  409422:	8afb      	ldrh	r3, [r7, #22]
  409424:	4413      	add	r3, r2
  409426:	82fb      	strh	r3, [r7, #22]
    for (c = 0; c < max_c; ) {
  409428:	8afa      	ldrh	r2, [r7, #22]
  40942a:	89fb      	ldrh	r3, [r7, #14]
  40942c:	429a      	cmp	r2, r3
  40942e:	d3ac      	bcc.n	40938a <tcp_parseopt+0x4a>
  409430:	e004      	b.n	40943c <tcp_parseopt+0xfc>
        return;
  409432:	bf00      	nop
  409434:	e002      	b.n	40943c <tcp_parseopt+0xfc>
          return;
  409436:	bf00      	nop
  409438:	e000      	b.n	40943c <tcp_parseopt+0xfc>
          return;
  40943a:	bf00      	nop
      }
    }
  }
}
  40943c:	3718      	adds	r7, #24
  40943e:	46bd      	mov	sp, r7
  409440:	bd80      	pop	{r7, pc}
  409442:	bf00      	nop
  409444:	204025e0 	.word	0x204025e0
  409448:	00401fc5 	.word	0x00401fc5

0040944c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  40944c:	b580      	push	{r7, lr}
  40944e:	b086      	sub	sp, #24
  409450:	af00      	add	r7, sp, #0
  409452:	60f8      	str	r0, [r7, #12]
  409454:	607b      	str	r3, [r7, #4]
  409456:	460b      	mov	r3, r1
  409458:	817b      	strh	r3, [r7, #10]
  40945a:	4613      	mov	r3, r2
  40945c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  40945e:	897a      	ldrh	r2, [r7, #10]
  409460:	893b      	ldrh	r3, [r7, #8]
  409462:	4413      	add	r3, r2
  409464:	b29b      	uxth	r3, r3
  409466:	3314      	adds	r3, #20
  409468:	b29b      	uxth	r3, r3
  40946a:	2200      	movs	r2, #0
  40946c:	4619      	mov	r1, r3
  40946e:	2001      	movs	r0, #1
  409470:	4b2a      	ldr	r3, [pc, #168]	; (40951c <tcp_output_alloc_header+0xd0>)
  409472:	4798      	blx	r3
  409474:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
  409476:	697b      	ldr	r3, [r7, #20]
  409478:	2b00      	cmp	r3, #0
  40947a:	d04a      	beq.n	409512 <tcp_output_alloc_header+0xc6>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  40947c:	697b      	ldr	r3, [r7, #20]
  40947e:	685b      	ldr	r3, [r3, #4]
  409480:	613b      	str	r3, [r7, #16]
    tcphdr->src = htons(pcb->local_port);
  409482:	68fb      	ldr	r3, [r7, #12]
  409484:	8b5b      	ldrh	r3, [r3, #26]
  409486:	4618      	mov	r0, r3
  409488:	4b25      	ldr	r3, [pc, #148]	; (409520 <tcp_output_alloc_header+0xd4>)
  40948a:	4798      	blx	r3
  40948c:	4603      	mov	r3, r0
  40948e:	461a      	mov	r2, r3
  409490:	693b      	ldr	r3, [r7, #16]
  409492:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = htons(pcb->remote_port);
  409494:	68fb      	ldr	r3, [r7, #12]
  409496:	8b9b      	ldrh	r3, [r3, #28]
  409498:	4618      	mov	r0, r3
  40949a:	4b21      	ldr	r3, [pc, #132]	; (409520 <tcp_output_alloc_header+0xd4>)
  40949c:	4798      	blx	r3
  40949e:	4603      	mov	r3, r0
  4094a0:	461a      	mov	r2, r3
  4094a2:	693b      	ldr	r3, [r7, #16]
  4094a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  4094a6:	693b      	ldr	r3, [r7, #16]
  4094a8:	687a      	ldr	r2, [r7, #4]
  4094aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = htonl(pcb->rcv_nxt);
  4094ac:	68fb      	ldr	r3, [r7, #12]
  4094ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  4094b0:	4618      	mov	r0, r3
  4094b2:	4b1c      	ldr	r3, [pc, #112]	; (409524 <tcp_output_alloc_header+0xd8>)
  4094b4:	4798      	blx	r3
  4094b6:	4602      	mov	r2, r0
  4094b8:	693b      	ldr	r3, [r7, #16]
  4094ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  4094bc:	897b      	ldrh	r3, [r7, #10]
  4094be:	089b      	lsrs	r3, r3, #2
  4094c0:	b29b      	uxth	r3, r3
  4094c2:	3305      	adds	r3, #5
  4094c4:	b29b      	uxth	r3, r3
  4094c6:	031b      	lsls	r3, r3, #12
  4094c8:	b29b      	uxth	r3, r3
  4094ca:	f043 0310 	orr.w	r3, r3, #16
  4094ce:	b29b      	uxth	r3, r3
  4094d0:	4618      	mov	r0, r3
  4094d2:	4b13      	ldr	r3, [pc, #76]	; (409520 <tcp_output_alloc_header+0xd4>)
  4094d4:	4798      	blx	r3
  4094d6:	4603      	mov	r3, r0
  4094d8:	461a      	mov	r2, r3
  4094da:	693b      	ldr	r3, [r7, #16]
  4094dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  4094de:	68fb      	ldr	r3, [r7, #12]
  4094e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  4094e2:	4618      	mov	r0, r3
  4094e4:	4b0e      	ldr	r3, [pc, #56]	; (409520 <tcp_output_alloc_header+0xd4>)
  4094e6:	4798      	blx	r3
  4094e8:	4603      	mov	r3, r0
  4094ea:	461a      	mov	r2, r3
  4094ec:	693b      	ldr	r3, [r7, #16]
  4094ee:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  4094f0:	693b      	ldr	r3, [r7, #16]
  4094f2:	2200      	movs	r2, #0
  4094f4:	741a      	strb	r2, [r3, #16]
  4094f6:	2200      	movs	r2, #0
  4094f8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  4094fa:	693b      	ldr	r3, [r7, #16]
  4094fc:	2200      	movs	r2, #0
  4094fe:	749a      	strb	r2, [r3, #18]
  409500:	2200      	movs	r2, #0
  409502:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  409504:	68fb      	ldr	r3, [r7, #12]
  409506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  409508:	68fa      	ldr	r2, [r7, #12]
  40950a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  40950c:	441a      	add	r2, r3
  40950e:	68fb      	ldr	r3, [r7, #12]
  409510:	631a      	str	r2, [r3, #48]	; 0x30
  }
  return p;
  409512:	697b      	ldr	r3, [r7, #20]
}
  409514:	4618      	mov	r0, r3
  409516:	3718      	adds	r7, #24
  409518:	46bd      	mov	sp, r7
  40951a:	bd80      	pop	{r7, pc}
  40951c:	004057dd 	.word	0x004057dd
  409520:	00401f99 	.word	0x00401f99
  409524:	00401fe5 	.word	0x00401fe5

00409528 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  409528:	b5b0      	push	{r4, r5, r7, lr}
  40952a:	b084      	sub	sp, #16
  40952c:	af00      	add	r7, sp, #0
  40952e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  409530:	687b      	ldr	r3, [r7, #4]
  409532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409534:	2b00      	cmp	r3, #0
  409536:	d02c      	beq.n	409592 <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409538:	687b      	ldr	r3, [r7, #4]
  40953a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40953c:	60fb      	str	r3, [r7, #12]
  40953e:	e002      	b.n	409546 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
  409540:	68fb      	ldr	r3, [r7, #12]
  409542:	681b      	ldr	r3, [r3, #0]
  409544:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  409546:	68fb      	ldr	r3, [r7, #12]
  409548:	681b      	ldr	r3, [r3, #0]
  40954a:	2b00      	cmp	r3, #0
  40954c:	d1f8      	bne.n	409540 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  40954e:	68fb      	ldr	r3, [r7, #12]
  409550:	68db      	ldr	r3, [r3, #12]
  409552:	899b      	ldrh	r3, [r3, #12]
  409554:	b29b      	uxth	r3, r3
  409556:	4618      	mov	r0, r3
  409558:	4b12      	ldr	r3, [pc, #72]	; (4095a4 <tcp_send_fin+0x7c>)
  40955a:	4798      	blx	r3
  40955c:	4603      	mov	r3, r0
  40955e:	f003 0307 	and.w	r3, r3, #7
  409562:	2b00      	cmp	r3, #0
  409564:	d115      	bne.n	409592 <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  409566:	68fb      	ldr	r3, [r7, #12]
  409568:	68dc      	ldr	r4, [r3, #12]
  40956a:	68fb      	ldr	r3, [r7, #12]
  40956c:	68db      	ldr	r3, [r3, #12]
  40956e:	899b      	ldrh	r3, [r3, #12]
  409570:	b29d      	uxth	r5, r3
  409572:	2001      	movs	r0, #1
  409574:	4b0c      	ldr	r3, [pc, #48]	; (4095a8 <tcp_send_fin+0x80>)
  409576:	4798      	blx	r3
  409578:	4603      	mov	r3, r0
  40957a:	432b      	orrs	r3, r5
  40957c:	b29b      	uxth	r3, r3
  40957e:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
  409580:	687b      	ldr	r3, [r7, #4]
  409582:	7f9b      	ldrb	r3, [r3, #30]
  409584:	f043 0320 	orr.w	r3, r3, #32
  409588:	b2da      	uxtb	r2, r3
  40958a:	687b      	ldr	r3, [r7, #4]
  40958c:	779a      	strb	r2, [r3, #30]
      return ERR_OK;
  40958e:	2300      	movs	r3, #0
  409590:	e004      	b.n	40959c <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  409592:	2101      	movs	r1, #1
  409594:	6878      	ldr	r0, [r7, #4]
  409596:	4b05      	ldr	r3, [pc, #20]	; (4095ac <tcp_send_fin+0x84>)
  409598:	4798      	blx	r3
  40959a:	4603      	mov	r3, r0
}
  40959c:	4618      	mov	r0, r3
  40959e:	3710      	adds	r7, #16
  4095a0:	46bd      	mov	sp, r7
  4095a2:	bdb0      	pop	{r4, r5, r7, pc}
  4095a4:	00401fc5 	.word	0x00401fc5
  4095a8:	00401f99 	.word	0x00401f99
  4095ac:	00409c41 	.word	0x00409c41

004095b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  4095b0:	b590      	push	{r4, r7, lr}
  4095b2:	b087      	sub	sp, #28
  4095b4:	af00      	add	r7, sp, #0
  4095b6:	60f8      	str	r0, [r7, #12]
  4095b8:	60b9      	str	r1, [r7, #8]
  4095ba:	603b      	str	r3, [r7, #0]
  4095bc:	4613      	mov	r3, r2
  4095be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  4095c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4095c4:	f003 0301 	and.w	r3, r3, #1
  4095c8:	2b00      	cmp	r3, #0
  4095ca:	d001      	beq.n	4095d0 <tcp_create_segment+0x20>
  4095cc:	2204      	movs	r2, #4
  4095ce:	e000      	b.n	4095d2 <tcp_create_segment+0x22>
  4095d0:	2200      	movs	r2, #0
  4095d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
  4095d6:	f003 0302 	and.w	r3, r3, #2
  4095da:	2b00      	cmp	r3, #0
  4095dc:	d001      	beq.n	4095e2 <tcp_create_segment+0x32>
  4095de:	230c      	movs	r3, #12
  4095e0:	e000      	b.n	4095e4 <tcp_create_segment+0x34>
  4095e2:	2300      	movs	r3, #0
  4095e4:	4413      	add	r3, r2
  4095e6:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  4095e8:	2003      	movs	r0, #3
  4095ea:	4b32      	ldr	r3, [pc, #200]	; (4096b4 <tcp_create_segment+0x104>)
  4095ec:	4798      	blx	r3
  4095ee:	6138      	str	r0, [r7, #16]
  4095f0:	693b      	ldr	r3, [r7, #16]
  4095f2:	2b00      	cmp	r3, #0
  4095f4:	d104      	bne.n	409600 <tcp_create_segment+0x50>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  4095f6:	68b8      	ldr	r0, [r7, #8]
  4095f8:	4b2f      	ldr	r3, [pc, #188]	; (4096b8 <tcp_create_segment+0x108>)
  4095fa:	4798      	blx	r3
    return NULL;
  4095fc:	2300      	movs	r3, #0
  4095fe:	e054      	b.n	4096aa <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
  409600:	693b      	ldr	r3, [r7, #16]
  409602:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
  409606:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
  409608:	693b      	ldr	r3, [r7, #16]
  40960a:	2200      	movs	r2, #0
  40960c:	601a      	str	r2, [r3, #0]
  seg->p = p;
  40960e:	693b      	ldr	r3, [r7, #16]
  409610:	68ba      	ldr	r2, [r7, #8]
  409612:	605a      	str	r2, [r3, #4]
  seg->len = p->tot_len - optlen;
  409614:	68bb      	ldr	r3, [r7, #8]
  409616:	891a      	ldrh	r2, [r3, #8]
  409618:	7dfb      	ldrb	r3, [r7, #23]
  40961a:	b29b      	uxth	r3, r3
  40961c:	1ad3      	subs	r3, r2, r3
  40961e:	b29a      	uxth	r2, r3
  409620:	693b      	ldr	r3, [r7, #16]
  409622:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  409624:	2114      	movs	r1, #20
  409626:	68b8      	ldr	r0, [r7, #8]
  409628:	4b24      	ldr	r3, [pc, #144]	; (4096bc <tcp_create_segment+0x10c>)
  40962a:	4798      	blx	r3
  40962c:	4603      	mov	r3, r0
  40962e:	2b00      	cmp	r3, #0
  409630:	d004      	beq.n	40963c <tcp_create_segment+0x8c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
  409632:	6938      	ldr	r0, [r7, #16]
  409634:	4b22      	ldr	r3, [pc, #136]	; (4096c0 <tcp_create_segment+0x110>)
  409636:	4798      	blx	r3
    return NULL;
  409638:	2300      	movs	r3, #0
  40963a:	e036      	b.n	4096aa <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  40963c:	693b      	ldr	r3, [r7, #16]
  40963e:	685b      	ldr	r3, [r3, #4]
  409640:	685a      	ldr	r2, [r3, #4]
  409642:	693b      	ldr	r3, [r7, #16]
  409644:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = htons(pcb->local_port);
  409646:	693b      	ldr	r3, [r7, #16]
  409648:	68dc      	ldr	r4, [r3, #12]
  40964a:	68fb      	ldr	r3, [r7, #12]
  40964c:	8b5b      	ldrh	r3, [r3, #26]
  40964e:	4618      	mov	r0, r3
  409650:	4b1c      	ldr	r3, [pc, #112]	; (4096c4 <tcp_create_segment+0x114>)
  409652:	4798      	blx	r3
  409654:	4603      	mov	r3, r0
  409656:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = htons(pcb->remote_port);
  409658:	693b      	ldr	r3, [r7, #16]
  40965a:	68dc      	ldr	r4, [r3, #12]
  40965c:	68fb      	ldr	r3, [r7, #12]
  40965e:	8b9b      	ldrh	r3, [r3, #28]
  409660:	4618      	mov	r0, r3
  409662:	4b18      	ldr	r3, [pc, #96]	; (4096c4 <tcp_create_segment+0x114>)
  409664:	4798      	blx	r3
  409666:	4603      	mov	r3, r0
  409668:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = htonl(seqno);
  40966a:	693b      	ldr	r3, [r7, #16]
  40966c:	68dc      	ldr	r4, [r3, #12]
  40966e:	6838      	ldr	r0, [r7, #0]
  409670:	4b15      	ldr	r3, [pc, #84]	; (4096c8 <tcp_create_segment+0x118>)
  409672:	4798      	blx	r3
  409674:	4603      	mov	r3, r0
  409676:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  409678:	693b      	ldr	r3, [r7, #16]
  40967a:	68dc      	ldr	r4, [r3, #12]
  40967c:	7dfb      	ldrb	r3, [r7, #23]
  40967e:	089b      	lsrs	r3, r3, #2
  409680:	b2db      	uxtb	r3, r3
  409682:	3305      	adds	r3, #5
  409684:	031b      	lsls	r3, r3, #12
  409686:	b21a      	sxth	r2, r3
  409688:	79fb      	ldrb	r3, [r7, #7]
  40968a:	b21b      	sxth	r3, r3
  40968c:	4313      	orrs	r3, r2
  40968e:	b21b      	sxth	r3, r3
  409690:	b29b      	uxth	r3, r3
  409692:	4618      	mov	r0, r3
  409694:	4b0b      	ldr	r3, [pc, #44]	; (4096c4 <tcp_create_segment+0x114>)
  409696:	4798      	blx	r3
  409698:	4603      	mov	r3, r0
  40969a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  40969c:	693b      	ldr	r3, [r7, #16]
  40969e:	68db      	ldr	r3, [r3, #12]
  4096a0:	2200      	movs	r2, #0
  4096a2:	749a      	strb	r2, [r3, #18]
  4096a4:	2200      	movs	r2, #0
  4096a6:	74da      	strb	r2, [r3, #19]
  return seg;
  4096a8:	693b      	ldr	r3, [r7, #16]
} 
  4096aa:	4618      	mov	r0, r3
  4096ac:	371c      	adds	r7, #28
  4096ae:	46bd      	mov	sp, r7
  4096b0:	bd90      	pop	{r4, r7, pc}
  4096b2:	bf00      	nop
  4096b4:	004054a5 	.word	0x004054a5
  4096b8:	00405b81 	.word	0x00405b81
  4096bc:	00405aa5 	.word	0x00405aa5
  4096c0:	00406e3d 	.word	0x00406e3d
  4096c4:	00401f99 	.word	0x00401f99
  4096c8:	00401fe5 	.word	0x00401fe5

004096cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  4096cc:	b580      	push	{r7, lr}
  4096ce:	b086      	sub	sp, #24
  4096d0:	af00      	add	r7, sp, #0
  4096d2:	607b      	str	r3, [r7, #4]
  4096d4:	4603      	mov	r3, r0
  4096d6:	73fb      	strb	r3, [r7, #15]
  4096d8:	460b      	mov	r3, r1
  4096da:	81bb      	strh	r3, [r7, #12]
  4096dc:	4613      	mov	r3, r2
  4096de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
  4096e0:	89bb      	ldrh	r3, [r7, #12]
  4096e2:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(max_length);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  /* always create MSS-sized pbufs */
  alloc = max_length;
  4096e4:	897b      	ldrh	r3, [r7, #10]
  4096e6:	82fb      	strh	r3, [r7, #22]
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(length + TCP_OVERSIZE));
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  4096e8:	8af9      	ldrh	r1, [r7, #22]
  4096ea:	7bfb      	ldrb	r3, [r7, #15]
  4096ec:	2200      	movs	r2, #0
  4096ee:	4618      	mov	r0, r3
  4096f0:	4b0d      	ldr	r3, [pc, #52]	; (409728 <tcp_pbuf_prealloc+0x5c>)
  4096f2:	4798      	blx	r3
  4096f4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  4096f6:	693b      	ldr	r3, [r7, #16]
  4096f8:	2b00      	cmp	r3, #0
  4096fa:	d101      	bne.n	409700 <tcp_pbuf_prealloc+0x34>
    return NULL;
  4096fc:	2300      	movs	r3, #0
  4096fe:	e00e      	b.n	40971e <tcp_pbuf_prealloc+0x52>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  *oversize = p->len - length;
  409700:	693b      	ldr	r3, [r7, #16]
  409702:	895a      	ldrh	r2, [r3, #10]
  409704:	89bb      	ldrh	r3, [r7, #12]
  409706:	1ad3      	subs	r3, r2, r3
  409708:	b29a      	uxth	r2, r3
  40970a:	687b      	ldr	r3, [r7, #4]
  40970c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  40970e:	693b      	ldr	r3, [r7, #16]
  409710:	89ba      	ldrh	r2, [r7, #12]
  409712:	811a      	strh	r2, [r3, #8]
  409714:	693b      	ldr	r3, [r7, #16]
  409716:	891a      	ldrh	r2, [r3, #8]
  409718:	693b      	ldr	r3, [r7, #16]
  40971a:	815a      	strh	r2, [r3, #10]
  return p;
  40971c:	693b      	ldr	r3, [r7, #16]
}
  40971e:	4618      	mov	r0, r3
  409720:	3718      	adds	r7, #24
  409722:	46bd      	mov	sp, r7
  409724:	bd80      	pop	{r7, pc}
  409726:	bf00      	nop
  409728:	004057dd 	.word	0x004057dd

0040972c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  40972c:	b480      	push	{r7}
  40972e:	b083      	sub	sp, #12
  409730:	af00      	add	r7, sp, #0
  409732:	6078      	str	r0, [r7, #4]
  409734:	460b      	mov	r3, r1
  409736:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  409738:	687b      	ldr	r3, [r7, #4]
  40973a:	7e1b      	ldrb	r3, [r3, #24]
  40973c:	2b04      	cmp	r3, #4
  40973e:	d00e      	beq.n	40975e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
  409740:	687b      	ldr	r3, [r7, #4]
  409742:	7e1b      	ldrb	r3, [r3, #24]
  if ((pcb->state != ESTABLISHED) &&
  409744:	2b07      	cmp	r3, #7
  409746:	d00a      	beq.n	40975e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
  409748:	687b      	ldr	r3, [r7, #4]
  40974a:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != CLOSE_WAIT) &&
  40974c:	2b02      	cmp	r3, #2
  40974e:	d006      	beq.n	40975e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
  409750:	687b      	ldr	r3, [r7, #4]
  409752:	7e1b      	ldrb	r3, [r3, #24]
      (pcb->state != SYN_SENT) &&
  409754:	2b03      	cmp	r3, #3
  409756:	d002      	beq.n	40975e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  409758:	f06f 030c 	mvn.w	r3, #12
  40975c:	e02b      	b.n	4097b6 <tcp_write_checks+0x8a>
  } else if (len == 0) {
  40975e:	887b      	ldrh	r3, [r7, #2]
  409760:	2b00      	cmp	r3, #0
  409762:	d101      	bne.n	409768 <tcp_write_checks+0x3c>
    return ERR_OK;
  409764:	2300      	movs	r3, #0
  409766:	e026      	b.n	4097b6 <tcp_write_checks+0x8a>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  409768:	687b      	ldr	r3, [r7, #4]
  40976a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  40976e:	887a      	ldrh	r2, [r7, #2]
  409770:	429a      	cmp	r2, r3
  409772:	d909      	bls.n	409788 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  409774:	687b      	ldr	r3, [r7, #4]
  409776:	7f9b      	ldrb	r3, [r3, #30]
  409778:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40977c:	b2da      	uxtb	r2, r3
  40977e:	687b      	ldr	r3, [r7, #4]
  409780:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  409782:	f04f 33ff 	mov.w	r3, #4294967295
  409786:	e016      	b.n	4097b6 <tcp_write_checks+0x8a>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409788:	687b      	ldr	r3, [r7, #4]
  40978a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  40978e:	2b07      	cmp	r3, #7
  409790:	d806      	bhi.n	4097a0 <tcp_write_checks+0x74>
  409792:	687b      	ldr	r3, [r7, #4]
  409794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409798:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  40979c:	4293      	cmp	r3, r2
  40979e:	d909      	bls.n	4097b4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  4097a0:	687b      	ldr	r3, [r7, #4]
  4097a2:	7f9b      	ldrb	r3, [r3, #30]
  4097a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  4097a8:	b2da      	uxtb	r2, r3
  4097aa:	687b      	ldr	r3, [r7, #4]
  4097ac:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  4097ae:	f04f 33ff 	mov.w	r3, #4294967295
  4097b2:	e000      	b.n	4097b6 <tcp_write_checks+0x8a>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  4097b4:	2300      	movs	r3, #0
}
  4097b6:	4618      	mov	r0, r3
  4097b8:	370c      	adds	r7, #12
  4097ba:	46bd      	mov	sp, r7
  4097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4097c0:	4770      	bx	lr
	...

004097c4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  4097c4:	b5b0      	push	{r4, r5, r7, lr}
  4097c6:	b098      	sub	sp, #96	; 0x60
  4097c8:	af04      	add	r7, sp, #16
  4097ca:	60f8      	str	r0, [r7, #12]
  4097cc:	60b9      	str	r1, [r7, #8]
  4097ce:	4611      	mov	r1, r2
  4097d0:	461a      	mov	r2, r3
  4097d2:	460b      	mov	r3, r1
  4097d4:	80fb      	strh	r3, [r7, #6]
  4097d6:	4613      	mov	r3, r2
  4097d8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
  4097da:	2300      	movs	r3, #0
  4097dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  4097de:	2300      	movs	r3, #0
  4097e0:	64bb      	str	r3, [r7, #72]	; 0x48
  4097e2:	2300      	movs	r3, #0
  4097e4:	647b      	str	r3, [r7, #68]	; 0x44
  4097e6:	2300      	movs	r3, #0
  4097e8:	643b      	str	r3, [r7, #64]	; 0x40
  4097ea:	2300      	movs	r3, #0
  4097ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  u16_t pos = 0; /* position in 'arg' data */
  4097ee:	2300      	movs	r3, #0
  4097f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t queuelen;
  u8_t optlen = 0;
  4097f2:	2300      	movs	r3, #0
  4097f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  u8_t optflags = 0;
  4097f8:	2300      	movs	r3, #0
  4097fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
#if TCP_OVERSIZE
  u16_t oversize = 0;
  4097fe:	2300      	movs	r3, #0
  409800:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
  409802:	2300      	movs	r3, #0
  409804:	86fb      	strh	r3, [r7, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, pcb->snd_wnd_max/2);
  409806:	68fb      	ldr	r3, [r7, #12]
  409808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
  40980c:	085b      	lsrs	r3, r3, #1
  40980e:	b29a      	uxth	r2, r3
  409810:	68fb      	ldr	r3, [r7, #12]
  409812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  409814:	4293      	cmp	r3, r2
  409816:	bf28      	it	cs
  409818:	4613      	movcs	r3, r2
  40981a:	853b      	strh	r3, [r7, #40]	; 0x28

#if LWIP_NETIF_TX_SINGLE_PBUF
  /* Always copy to try to create single pbufs for TX */
  apiflags |= TCP_WRITE_FLAG_COPY;
  40981c:	797b      	ldrb	r3, [r7, #5]
  40981e:	f043 0301 	orr.w	r3, r3, #1
  409822:	717b      	strb	r3, [r7, #5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)", 
  409824:	68bb      	ldr	r3, [r7, #8]
  409826:	2b00      	cmp	r3, #0
  409828:	d100      	bne.n	40982c <tcp_write+0x68>
  40982a:	e7fe      	b.n	40982a <tcp_write+0x66>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  40982c:	88fb      	ldrh	r3, [r7, #6]
  40982e:	4619      	mov	r1, r3
  409830:	68f8      	ldr	r0, [r7, #12]
  409832:	4b93      	ldr	r3, [pc, #588]	; (409a80 <tcp_write+0x2bc>)
  409834:	4798      	blx	r3
  409836:	4603      	mov	r3, r0
  409838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
  40983c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409840:	2b00      	cmp	r3, #0
  409842:	d002      	beq.n	40984a <tcp_write+0x86>
    return err;
  409844:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  409848:	e1e9      	b.n	409c1e <tcp_write+0x45a>
  }
  queuelen = pcb->snd_queuelen;
  40984a:	68fb      	ldr	r3, [r7, #12]
  40984c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409850:	873b      	strh	r3, [r7, #56]	; 0x38
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  409852:	68fb      	ldr	r3, [r7, #12]
  409854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409856:	2b00      	cmp	r3, #0
  409858:	f000 8141 	beq.w	409ade <tcp_write+0x31a>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40985c:	68fb      	ldr	r3, [r7, #12]
  40985e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409860:	64bb      	str	r3, [r7, #72]	; 0x48
  409862:	e002      	b.n	40986a <tcp_write+0xa6>
         last_unsent = last_unsent->next);
  409864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409866:	681b      	ldr	r3, [r3, #0]
  409868:	64bb      	str	r3, [r7, #72]	; 0x48
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  40986a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40986c:	681b      	ldr	r3, [r3, #0]
  40986e:	2b00      	cmp	r3, #0
  409870:	d1f8      	bne.n	409864 <tcp_write+0xa0>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  409872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409874:	7a9b      	ldrb	r3, [r3, #10]
  409876:	f003 0301 	and.w	r3, r3, #1
  40987a:	2b00      	cmp	r3, #0
  40987c:	d001      	beq.n	409882 <tcp_write+0xbe>
  40987e:	2204      	movs	r2, #4
  409880:	e000      	b.n	409884 <tcp_write+0xc0>
  409882:	2200      	movs	r2, #0
  409884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409886:	7a9b      	ldrb	r3, [r3, #10]
  409888:	f003 0302 	and.w	r3, r3, #2
  40988c:	2b00      	cmp	r3, #0
  40988e:	d001      	beq.n	409894 <tcp_write+0xd0>
  409890:	230c      	movs	r3, #12
  409892:	e000      	b.n	409896 <tcp_write+0xd2>
  409894:	2300      	movs	r3, #0
  409896:	4413      	add	r3, r2
  409898:	84bb      	strh	r3, [r7, #36]	; 0x24
    space = mss_local - (last_unsent->len + unsent_optlen);
  40989a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40989c:	891a      	ldrh	r2, [r3, #8]
  40989e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
  4098a0:	4413      	add	r3, r2
  4098a2:	b29b      	uxth	r3, r3
  4098a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4098a6:	1ad3      	subs	r3, r2, r3
  4098a8:	86bb      	strh	r3, [r7, #52]	; 0x34
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->unsent_oversize */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  4098aa:	68fb      	ldr	r3, [r7, #12]
  4098ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
  4098b0:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
  4098b2:	8afb      	ldrh	r3, [r7, #22]
  4098b4:	2b00      	cmp	r3, #0
  4098b6:	d014      	beq.n	4098e2 <tcp_write+0x11e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize_used <= space);
      seg = last_unsent;
  4098b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4098ba:	647b      	str	r3, [r7, #68]	; 0x44
      oversize_used = oversize < len ? oversize : len;
  4098bc:	8afb      	ldrh	r3, [r7, #22]
  4098be:	88fa      	ldrh	r2, [r7, #6]
  4098c0:	4293      	cmp	r3, r2
  4098c2:	bf28      	it	cs
  4098c4:	4613      	movcs	r3, r2
  4098c6:	86fb      	strh	r3, [r7, #54]	; 0x36
      pos += oversize_used;
  4098c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4098ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4098cc:	4413      	add	r3, r2
  4098ce:	877b      	strh	r3, [r7, #58]	; 0x3a
      oversize -= oversize_used;
  4098d0:	8afa      	ldrh	r2, [r7, #22]
  4098d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4098d4:	1ad3      	subs	r3, r2, r3
  4098d6:	b29b      	uxth	r3, r3
  4098d8:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
  4098da:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  4098dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  4098de:	1ad3      	subs	r3, r2, r3
  4098e0:	86bb      	strh	r3, [r7, #52]	; 0x34
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  4098e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  4098e4:	88fb      	ldrh	r3, [r7, #6]
  4098e6:	429a      	cmp	r2, r3
  4098e8:	f080 80f9 	bcs.w	409ade <tcp_write+0x31a>
  4098ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  4098ee:	2b00      	cmp	r3, #0
  4098f0:	f000 80f5 	beq.w	409ade <tcp_write+0x31a>
  4098f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  4098f6:	891b      	ldrh	r3, [r3, #8]
  4098f8:	2b00      	cmp	r3, #0
  4098fa:	f000 80f0 	beq.w	409ade <tcp_write+0x31a>
      u16_t seglen = space < len - pos ? space : len - pos;
  4098fe:	88fa      	ldrh	r2, [r7, #6]
  409900:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409902:	1ad2      	subs	r2, r2, r3
  409904:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  409906:	4293      	cmp	r3, r2
  409908:	bfa8      	it	ge
  40990a:	4613      	movge	r3, r2
  40990c:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
  40990e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409910:	647b      	str	r3, [r7, #68]	; 0x44

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  409912:	797b      	ldrb	r3, [r7, #5]
  409914:	f003 0301 	and.w	r3, r3, #1
  409918:	2b00      	cmp	r3, #0
  40991a:	d01c      	beq.n	409956 <tcp_write+0x192>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  40991c:	f107 0016 	add.w	r0, r7, #22
  409920:	8eba      	ldrh	r2, [r7, #52]	; 0x34
  409922:	8c79      	ldrh	r1, [r7, #34]	; 0x22
  409924:	2301      	movs	r3, #1
  409926:	9302      	str	r3, [sp, #8]
  409928:	797b      	ldrb	r3, [r7, #5]
  40992a:	9301      	str	r3, [sp, #4]
  40992c:	68fb      	ldr	r3, [r7, #12]
  40992e:	9300      	str	r3, [sp, #0]
  409930:	4603      	mov	r3, r0
  409932:	2003      	movs	r0, #3
  409934:	4c53      	ldr	r4, [pc, #332]	; (409a84 <tcp_write+0x2c0>)
  409936:	47a0      	blx	r4
  409938:	64f8      	str	r0, [r7, #76]	; 0x4c
  40993a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40993c:	2b00      	cmp	r3, #0
  40993e:	f000 8150 	beq.w	409be2 <tcp_write+0x41e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        last_unsent->oversize_left += oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  409942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409944:	6858      	ldr	r0, [r3, #4]
  409946:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409948:	68ba      	ldr	r2, [r7, #8]
  40994a:	4413      	add	r3, r2
  40994c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
  40994e:	4619      	mov	r1, r3
  409950:	4b4d      	ldr	r3, [pc, #308]	; (409a88 <tcp_write+0x2c4>)
  409952:	4798      	blx	r3
  409954:	e00f      	b.n	409976 <tcp_write+0x1b2>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      } else {
        /* Data is not copied */
        if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  409956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  409958:	2201      	movs	r2, #1
  40995a:	4619      	mov	r1, r3
  40995c:	2003      	movs	r0, #3
  40995e:	4b4b      	ldr	r3, [pc, #300]	; (409a8c <tcp_write+0x2c8>)
  409960:	4798      	blx	r3
  409962:	64f8      	str	r0, [r7, #76]	; 0x4c
  409964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409966:	2b00      	cmp	r3, #0
  409968:	f000 813d 	beq.w	409be6 <tcp_write+0x422>
        tcp_seg_add_chksum(~inet_chksum((u8_t*)arg + pos, seglen), seglen,
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        /* reference the non-volatile payload data */
        concat_p->payload = (u8_t*)arg + pos;
  40996c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  40996e:	68ba      	ldr	r2, [r7, #8]
  409970:	441a      	add	r2, r3
  409972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409974:	605a      	str	r2, [r3, #4]
      }

      pos += seglen;
  409976:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409978:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
  40997a:	4413      	add	r3, r2
  40997c:	877b      	strh	r3, [r7, #58]	; 0x3a
      queuelen += pbuf_clen(concat_p);
  40997e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  409980:	4b43      	ldr	r3, [pc, #268]	; (409a90 <tcp_write+0x2cc>)
  409982:	4798      	blx	r3
  409984:	4603      	mov	r3, r0
  409986:	b29a      	uxth	r2, r3
  409988:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  40998a:	4413      	add	r3, r2
  40998c:	873b      	strh	r3, [r7, #56]	; 0x38
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  40998e:	e0a6      	b.n	409ade <tcp_write+0x31a>
    struct pbuf *p;
    u16_t left = len - pos;
  409990:	88fa      	ldrh	r2, [r7, #6]
  409992:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409994:	1ad3      	subs	r3, r2, r3
  409996:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
  409998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40999c:	b29b      	uxth	r3, r3
  40999e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4099a0:	1ad3      	subs	r3, r2, r3
  4099a2:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = left > max_len ? max_len : left;
  4099a4:	8c3a      	ldrh	r2, [r7, #32]
  4099a6:	8bfb      	ldrh	r3, [r7, #30]
  4099a8:	4293      	cmp	r3, r2
  4099aa:	bf28      	it	cs
  4099ac:	4613      	movcs	r3, r2
  4099ae:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  4099b0:	797b      	ldrb	r3, [r7, #5]
  4099b2:	f003 0301 	and.w	r3, r3, #1
  4099b6:	2b00      	cmp	r3, #0
  4099b8:	d029      	beq.n	409a0e <tcp_write+0x24a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  4099ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4099be:	b29a      	uxth	r2, r3
  4099c0:	8bbb      	ldrh	r3, [r7, #28]
  4099c2:	4413      	add	r3, r2
  4099c4:	b299      	uxth	r1, r3
  4099c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  4099c8:	2b00      	cmp	r3, #0
  4099ca:	bf0c      	ite	eq
  4099cc:	2301      	moveq	r3, #1
  4099ce:	2300      	movne	r3, #0
  4099d0:	b2db      	uxtb	r3, r3
  4099d2:	f107 0016 	add.w	r0, r7, #22
  4099d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
  4099d8:	9302      	str	r3, [sp, #8]
  4099da:	797b      	ldrb	r3, [r7, #5]
  4099dc:	9301      	str	r3, [sp, #4]
  4099de:	68fb      	ldr	r3, [r7, #12]
  4099e0:	9300      	str	r3, [sp, #0]
  4099e2:	4603      	mov	r3, r0
  4099e4:	2000      	movs	r0, #0
  4099e6:	4c27      	ldr	r4, [pc, #156]	; (409a84 <tcp_write+0x2c0>)
  4099e8:	47a0      	blx	r4
  4099ea:	6338      	str	r0, [r7, #48]	; 0x30
  4099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4099ee:	2b00      	cmp	r3, #0
  4099f0:	f000 80fb 	beq.w	409bea <tcp_write+0x426>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  4099f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4099f6:	685a      	ldr	r2, [r3, #4]
  4099f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4099fc:	18d0      	adds	r0, r2, r3
  4099fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409a00:	68ba      	ldr	r2, [r7, #8]
  409a02:	4413      	add	r3, r2
  409a04:	8bba      	ldrh	r2, [r7, #28]
  409a06:	4619      	mov	r1, r3
  409a08:	4b1f      	ldr	r3, [pc, #124]	; (409a88 <tcp_write+0x2c4>)
  409a0a:	4798      	blx	r3
  409a0c:	e023      	b.n	409a56 <tcp_write+0x292>
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  409a0e:	8bbb      	ldrh	r3, [r7, #28]
  409a10:	2201      	movs	r2, #1
  409a12:	4619      	mov	r1, r3
  409a14:	2000      	movs	r0, #0
  409a16:	4b1d      	ldr	r3, [pc, #116]	; (409a8c <tcp_write+0x2c8>)
  409a18:	4798      	blx	r3
  409a1a:	61b8      	str	r0, [r7, #24]
  409a1c:	69bb      	ldr	r3, [r7, #24]
  409a1e:	2b00      	cmp	r3, #0
  409a20:	f000 80e5 	beq.w	409bee <tcp_write+0x42a>
#if TCP_CHECKSUM_ON_COPY
      /* calculate the checksum of nocopy-data */
      chksum = ~inet_chksum((u8_t*)arg + pos, seglen);
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      p2->payload = (u8_t*)arg + pos;
  409a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409a26:	68ba      	ldr	r2, [r7, #8]
  409a28:	441a      	add	r2, r3
  409a2a:	69bb      	ldr	r3, [r7, #24]
  409a2c:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  409a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  409a32:	b29b      	uxth	r3, r3
  409a34:	2200      	movs	r2, #0
  409a36:	4619      	mov	r1, r3
  409a38:	2000      	movs	r0, #0
  409a3a:	4b14      	ldr	r3, [pc, #80]	; (409a8c <tcp_write+0x2c8>)
  409a3c:	4798      	blx	r3
  409a3e:	6338      	str	r0, [r7, #48]	; 0x30
  409a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  409a42:	2b00      	cmp	r3, #0
  409a44:	d103      	bne.n	409a4e <tcp_write+0x28a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  409a46:	69b8      	ldr	r0, [r7, #24]
  409a48:	4b12      	ldr	r3, [pc, #72]	; (409a94 <tcp_write+0x2d0>)
  409a4a:	4798      	blx	r3
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  409a4c:	e0d2      	b.n	409bf4 <tcp_write+0x430>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  409a4e:	69b9      	ldr	r1, [r7, #24]
  409a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409a52:	4b11      	ldr	r3, [pc, #68]	; (409a98 <tcp_write+0x2d4>)
  409a54:	4798      	blx	r3
    }

    queuelen += pbuf_clen(p);
  409a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409a58:	4b0d      	ldr	r3, [pc, #52]	; (409a90 <tcp_write+0x2cc>)
  409a5a:	4798      	blx	r3
  409a5c:	4603      	mov	r3, r0
  409a5e:	b29a      	uxth	r2, r3
  409a60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409a62:	4413      	add	r3, r2
  409a64:	873b      	strh	r3, [r7, #56]	; 0x38

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409a66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409a68:	2b08      	cmp	r3, #8
  409a6a:	d804      	bhi.n	409a76 <tcp_write+0x2b2>
  409a6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
  409a6e:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409a72:	4293      	cmp	r3, r2
  409a74:	d912      	bls.n	409a9c <tcp_write+0x2d8>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_write: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
      pbuf_free(p);
  409a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
  409a78:	4b06      	ldr	r3, [pc, #24]	; (409a94 <tcp_write+0x2d0>)
  409a7a:	4798      	blx	r3
      goto memerr;
  409a7c:	e0ba      	b.n	409bf4 <tcp_write+0x430>
  409a7e:	bf00      	nop
  409a80:	0040972d 	.word	0x0040972d
  409a84:	004096cd 	.word	0x004096cd
  409a88:	0040cd79 	.word	0x0040cd79
  409a8c:	004057dd 	.word	0x004057dd
  409a90:	00405c11 	.word	0x00405c11
  409a94:	00405b81 	.word	0x00405b81
  409a98:	00405c65 	.word	0x00405c65
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  409a9c:	68fb      	ldr	r3, [r7, #12]
  409a9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  409aa0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
  409aa2:	441a      	add	r2, r3
  409aa4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
  409aa8:	9300      	str	r3, [sp, #0]
  409aaa:	4613      	mov	r3, r2
  409aac:	2200      	movs	r2, #0
  409aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
  409ab0:	68f8      	ldr	r0, [r7, #12]
  409ab2:	4c5d      	ldr	r4, [pc, #372]	; (409c28 <tcp_write+0x464>)
  409ab4:	47a0      	blx	r4
  409ab6:	6478      	str	r0, [r7, #68]	; 0x44
  409ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409aba:	2b00      	cmp	r3, #0
  409abc:	f000 8099 	beq.w	409bf2 <tcp_write+0x42e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  409ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409ac2:	2b00      	cmp	r3, #0
  409ac4:	d102      	bne.n	409acc <tcp_write+0x308>
      queue = seg;
  409ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  409aca:	e002      	b.n	409ad2 <tcp_write+0x30e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
      prev_seg->next = seg;
  409acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  409ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
  409ad0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  409ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409ad4:	643b      	str	r3, [r7, #64]	; 0x40

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      ntohl(seg->tcphdr->seqno),
      ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  409ad6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409ad8:	8bbb      	ldrh	r3, [r7, #28]
  409ada:	4413      	add	r3, r2
  409adc:	877b      	strh	r3, [r7, #58]	; 0x3a
  while (pos < len) {
  409ade:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
  409ae0:	88fb      	ldrh	r3, [r7, #6]
  409ae2:	429a      	cmp	r2, r3
  409ae4:	f4ff af54 	bcc.w	409990 <tcp_write+0x1cc>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  409ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409aea:	2b00      	cmp	r3, #0
  409aec:	d02c      	beq.n	409b48 <tcp_write+0x384>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  409aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409af0:	685b      	ldr	r3, [r3, #4]
  409af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  409af4:	e01e      	b.n	409b34 <tcp_write+0x370>
      p->tot_len += oversize_used;
  409af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409af8:	891a      	ldrh	r2, [r3, #8]
  409afa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409afc:	4413      	add	r3, r2
  409afe:	b29a      	uxth	r2, r3
  409b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b02:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
  409b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b06:	681b      	ldr	r3, [r3, #0]
  409b08:	2b00      	cmp	r3, #0
  409b0a:	d110      	bne.n	409b2e <tcp_write+0x36a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  409b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b0e:	685b      	ldr	r3, [r3, #4]
  409b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
  409b12:	8952      	ldrh	r2, [r2, #10]
  409b14:	4413      	add	r3, r2
  409b16:	8efa      	ldrh	r2, [r7, #54]	; 0x36
  409b18:	68b9      	ldr	r1, [r7, #8]
  409b1a:	4618      	mov	r0, r3
  409b1c:	4b43      	ldr	r3, [pc, #268]	; (409c2c <tcp_write+0x468>)
  409b1e:	4798      	blx	r3
        p->len += oversize_used;
  409b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b22:	895a      	ldrh	r2, [r3, #10]
  409b24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409b26:	4413      	add	r3, r2
  409b28:	b29a      	uxth	r2, r3
  409b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b2c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  409b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b30:	681b      	ldr	r3, [r3, #0]
  409b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  409b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  409b36:	2b00      	cmp	r3, #0
  409b38:	d1dd      	bne.n	409af6 <tcp_write+0x332>
      }
    }
    last_unsent->len += oversize_used;
  409b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b3c:	891a      	ldrh	r2, [r3, #8]
  409b3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
  409b40:	4413      	add	r3, r2
  409b42:	b29a      	uxth	r2, r3
  409b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b46:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  409b48:	8afa      	ldrh	r2, [r7, #22]
  409b4a:	68fb      	ldr	r3, [r7, #12]
  409b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p
   */
  if (concat_p != NULL) {
  409b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409b52:	2b00      	cmp	r3, #0
  409b54:	d00d      	beq.n	409b72 <tcp_write+0x3ae>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  409b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b58:	685b      	ldr	r3, [r3, #4]
  409b5a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
  409b5c:	4618      	mov	r0, r3
  409b5e:	4b34      	ldr	r3, [pc, #208]	; (409c30 <tcp_write+0x46c>)
  409b60:	4798      	blx	r3
    last_unsent->len += concat_p->tot_len;
  409b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b64:	891a      	ldrh	r2, [r3, #8]
  409b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409b68:	891b      	ldrh	r3, [r3, #8]
  409b6a:	4413      	add	r3, r2
  409b6c:	b29a      	uxth	r2, r3
  409b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b70:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  409b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b74:	2b00      	cmp	r3, #0
  409b76:	d103      	bne.n	409b80 <tcp_write+0x3bc>
    pcb->unsent = queue;
  409b78:	68fb      	ldr	r3, [r7, #12]
  409b7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  409b7c:	66da      	str	r2, [r3, #108]	; 0x6c
  409b7e:	e002      	b.n	409b86 <tcp_write+0x3c2>
  } else {
    last_unsent->next = queue;
  409b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  409b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
  409b84:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  409b86:	68fb      	ldr	r3, [r7, #12]
  409b88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  409b8a:	88fb      	ldrh	r3, [r7, #6]
  409b8c:	441a      	add	r2, r3
  409b8e:	68fb      	ldr	r3, [r7, #12]
  409b90:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  409b92:	68fb      	ldr	r3, [r7, #12]
  409b94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
  409b98:	88fb      	ldrh	r3, [r7, #6]
  409b9a:	1ad3      	subs	r3, r2, r3
  409b9c:	b29a      	uxth	r2, r3
  409b9e:	68fb      	ldr	r3, [r7, #12]
  409ba0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  pcb->snd_queuelen = queuelen;
  409ba4:	68fb      	ldr	r3, [r7, #12]
  409ba6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
  409ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    LWIP_ASSERT("tcp_write: valid queue length",
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  409bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409bae:	2b00      	cmp	r3, #0
  409bb0:	d015      	beq.n	409bde <tcp_write+0x41a>
  409bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409bb4:	68db      	ldr	r3, [r3, #12]
  409bb6:	2b00      	cmp	r3, #0
  409bb8:	d011      	beq.n	409bde <tcp_write+0x41a>
  409bba:	797b      	ldrb	r3, [r7, #5]
  409bbc:	f003 0302 	and.w	r3, r3, #2
  409bc0:	2b00      	cmp	r3, #0
  409bc2:	d10c      	bne.n	409bde <tcp_write+0x41a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  409bc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409bc6:	68dc      	ldr	r4, [r3, #12]
  409bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  409bca:	68db      	ldr	r3, [r3, #12]
  409bcc:	899b      	ldrh	r3, [r3, #12]
  409bce:	b29d      	uxth	r5, r3
  409bd0:	2008      	movs	r0, #8
  409bd2:	4b18      	ldr	r3, [pc, #96]	; (409c34 <tcp_write+0x470>)
  409bd4:	4798      	blx	r3
  409bd6:	4603      	mov	r3, r0
  409bd8:	432b      	orrs	r3, r5
  409bda:	b29b      	uxth	r3, r3
  409bdc:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
  409bde:	2300      	movs	r3, #0
  409be0:	e01d      	b.n	409c1e <tcp_write+0x45a>
          goto memerr;
  409be2:	bf00      	nop
  409be4:	e006      	b.n	409bf4 <tcp_write+0x430>
          goto memerr;
  409be6:	bf00      	nop
  409be8:	e004      	b.n	409bf4 <tcp_write+0x430>
        goto memerr;
  409bea:	bf00      	nop
  409bec:	e002      	b.n	409bf4 <tcp_write+0x430>
        goto memerr;
  409bee:	bf00      	nop
  409bf0:	e000      	b.n	409bf4 <tcp_write+0x430>
      goto memerr;
  409bf2:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  409bf4:	68fb      	ldr	r3, [r7, #12]
  409bf6:	7f9b      	ldrb	r3, [r3, #30]
  409bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409bfc:	b2da      	uxtb	r2, r3
  409bfe:	68fb      	ldr	r3, [r7, #12]
  409c00:	779a      	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
  409c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  409c04:	2b00      	cmp	r3, #0
  409c06:	d002      	beq.n	409c0e <tcp_write+0x44a>
    pbuf_free(concat_p);
  409c08:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
  409c0a:	4b0b      	ldr	r3, [pc, #44]	; (409c38 <tcp_write+0x474>)
  409c0c:	4798      	blx	r3
  }
  if (queue != NULL) {
  409c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  409c10:	2b00      	cmp	r3, #0
  409c12:	d002      	beq.n	409c1a <tcp_write+0x456>
    tcp_segs_free(queue);
  409c14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
  409c16:	4b09      	ldr	r3, [pc, #36]	; (409c3c <tcp_write+0x478>)
  409c18:	4798      	blx	r3
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  409c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
  409c1e:	4618      	mov	r0, r3
  409c20:	3750      	adds	r7, #80	; 0x50
  409c22:	46bd      	mov	sp, r7
  409c24:	bdb0      	pop	{r4, r5, r7, pc}
  409c26:	bf00      	nop
  409c28:	004095b1 	.word	0x004095b1
  409c2c:	0040cd79 	.word	0x0040cd79
  409c30:	00405c65 	.word	0x00405c65
  409c34:	00401f99 	.word	0x00401f99
  409c38:	00405b81 	.word	0x00405b81
  409c3c:	00406e11 	.word	0x00406e11

00409c40 <tcp_enqueue_flags>:
 * @param optdata pointer to TCP options, or NULL.
 * @param optlen length of TCP options in bytes.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  409c40:	b590      	push	{r4, r7, lr}
  409c42:	b08b      	sub	sp, #44	; 0x2c
  409c44:	af02      	add	r7, sp, #8
  409c46:	6078      	str	r0, [r7, #4]
  409c48:	460b      	mov	r3, r1
  409c4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  409c4c:	2300      	movs	r3, #0
  409c4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
  409c50:	2300      	movs	r3, #0
  409c52:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  409c54:	687b      	ldr	r3, [r7, #4]
  409c56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409c5a:	2b07      	cmp	r3, #7
  409c5c:	d806      	bhi.n	409c6c <tcp_enqueue_flags+0x2c>
  409c5e:	687b      	ldr	r3, [r7, #4]
  409c60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409c64:	f64f 72fc 	movw	r2, #65532	; 0xfffc
  409c68:	4293      	cmp	r3, r2
  409c6a:	d909      	bls.n	409c80 <tcp_enqueue_flags+0x40>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
  409c6c:	687b      	ldr	r3, [r7, #4]
  409c6e:	7f9b      	ldrb	r3, [r3, #30]
  409c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409c74:	b2da      	uxtb	r2, r3
  409c76:	687b      	ldr	r3, [r7, #4]
  409c78:	779a      	strb	r2, [r3, #30]
    return ERR_MEM;
  409c7a:	f04f 33ff 	mov.w	r3, #4294967295
  409c7e:	e09b      	b.n	409db8 <tcp_enqueue_flags+0x178>
  }

  if (flags & TCP_SYN) {
  409c80:	78fb      	ldrb	r3, [r7, #3]
  409c82:	f003 0302 	and.w	r3, r3, #2
  409c86:	2b00      	cmp	r3, #0
  409c88:	d001      	beq.n	409c8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
  409c8a:	2301      	movs	r3, #1
  409c8c:	77fb      	strb	r3, [r7, #31]
#if LWIP_TCP_TIMESTAMPS
  if ((pcb->flags & TF_TIMESTAMP)) {
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  409c8e:	7ffb      	ldrb	r3, [r7, #31]
  409c90:	f003 0301 	and.w	r3, r3, #1
  409c94:	2b00      	cmp	r3, #0
  409c96:	d001      	beq.n	409c9c <tcp_enqueue_flags+0x5c>
  409c98:	2204      	movs	r2, #4
  409c9a:	e000      	b.n	409c9e <tcp_enqueue_flags+0x5e>
  409c9c:	2200      	movs	r2, #0
  409c9e:	7ffb      	ldrb	r3, [r7, #31]
  409ca0:	f003 0302 	and.w	r3, r3, #2
  409ca4:	2b00      	cmp	r3, #0
  409ca6:	d001      	beq.n	409cac <tcp_enqueue_flags+0x6c>
  409ca8:	230c      	movs	r3, #12
  409caa:	e000      	b.n	409cae <tcp_enqueue_flags+0x6e>
  409cac:	2300      	movs	r3, #0
  409cae:	4413      	add	r3, r2
  409cb0:	75fb      	strb	r3, [r7, #23]

  /* tcp_enqueue_flags is always called with either SYN or FIN in flags.
   * We need one available snd_buf byte to do that.
   * This means we can't send FIN while snd_buf==0. A better fix would be to
   * not include SYN and FIN sequence numbers in the snd_buf count. */
  if (pcb->snd_buf == 0) {
  409cb2:	687b      	ldr	r3, [r7, #4]
  409cb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409cb8:	2b00      	cmp	r3, #0
  409cba:	d102      	bne.n	409cc2 <tcp_enqueue_flags+0x82>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue_flags: no send buffer available\n"));
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409cbc:	f04f 33ff 	mov.w	r3, #4294967295
  409cc0:	e07a      	b.n	409db8 <tcp_enqueue_flags+0x178>
  }

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  409cc2:	7dfb      	ldrb	r3, [r7, #23]
  409cc4:	b29b      	uxth	r3, r3
  409cc6:	2200      	movs	r2, #0
  409cc8:	4619      	mov	r1, r3
  409cca:	2000      	movs	r0, #0
  409ccc:	4b3c      	ldr	r3, [pc, #240]	; (409dc0 <tcp_enqueue_flags+0x180>)
  409cce:	4798      	blx	r3
  409cd0:	6138      	str	r0, [r7, #16]
  409cd2:	693b      	ldr	r3, [r7, #16]
  409cd4:	2b00      	cmp	r3, #0
  409cd6:	d109      	bne.n	409cec <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
  409cd8:	687b      	ldr	r3, [r7, #4]
  409cda:	7f9b      	ldrb	r3, [r3, #30]
  409cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409ce0:	b2da      	uxtb	r2, r3
  409ce2:	687b      	ldr	r3, [r7, #4]
  409ce4:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409ce6:	f04f 33ff 	mov.w	r3, #4294967295
  409cea:	e065      	b.n	409db8 <tcp_enqueue_flags+0x178>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  409cec:	687b      	ldr	r3, [r7, #4]
  409cee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
  409cf0:	78fa      	ldrb	r2, [r7, #3]
  409cf2:	7ffb      	ldrb	r3, [r7, #31]
  409cf4:	9300      	str	r3, [sp, #0]
  409cf6:	460b      	mov	r3, r1
  409cf8:	6939      	ldr	r1, [r7, #16]
  409cfa:	6878      	ldr	r0, [r7, #4]
  409cfc:	4c31      	ldr	r4, [pc, #196]	; (409dc4 <tcp_enqueue_flags+0x184>)
  409cfe:	47a0      	blx	r4
  409d00:	60f8      	str	r0, [r7, #12]
  409d02:	68fb      	ldr	r3, [r7, #12]
  409d04:	2b00      	cmp	r3, #0
  409d06:	d109      	bne.n	409d1c <tcp_enqueue_flags+0xdc>
    pcb->flags |= TF_NAGLEMEMERR;
  409d08:	687b      	ldr	r3, [r7, #4]
  409d0a:	7f9b      	ldrb	r3, [r3, #30]
  409d0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
  409d10:	b2da      	uxtb	r2, r3
  409d12:	687b      	ldr	r3, [r7, #4]
  409d14:	779a      	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
  409d16:	f04f 33ff 	mov.w	r3, #4294967295
  409d1a:	e04d      	b.n	409db8 <tcp_enqueue_flags+0x178>
               ntohl(seg->tcphdr->seqno),
               ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  409d1c:	687b      	ldr	r3, [r7, #4]
  409d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409d20:	2b00      	cmp	r3, #0
  409d22:	d103      	bne.n	409d2c <tcp_enqueue_flags+0xec>
    pcb->unsent = seg;
  409d24:	687b      	ldr	r3, [r7, #4]
  409d26:	68fa      	ldr	r2, [r7, #12]
  409d28:	66da      	str	r2, [r3, #108]	; 0x6c
  409d2a:	e00d      	b.n	409d48 <tcp_enqueue_flags+0x108>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  409d2c:	687b      	ldr	r3, [r7, #4]
  409d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409d30:	61bb      	str	r3, [r7, #24]
  409d32:	e002      	b.n	409d3a <tcp_enqueue_flags+0xfa>
  409d34:	69bb      	ldr	r3, [r7, #24]
  409d36:	681b      	ldr	r3, [r3, #0]
  409d38:	61bb      	str	r3, [r7, #24]
  409d3a:	69bb      	ldr	r3, [r7, #24]
  409d3c:	681b      	ldr	r3, [r3, #0]
  409d3e:	2b00      	cmp	r3, #0
  409d40:	d1f8      	bne.n	409d34 <tcp_enqueue_flags+0xf4>
    useg->next = seg;
  409d42:	69bb      	ldr	r3, [r7, #24]
  409d44:	68fa      	ldr	r2, [r7, #12]
  409d46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  409d48:	687b      	ldr	r3, [r7, #4]
  409d4a:	2200      	movs	r2, #0
  409d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  409d50:	78fb      	ldrb	r3, [r7, #3]
  409d52:	f003 0302 	and.w	r3, r3, #2
  409d56:	2b00      	cmp	r3, #0
  409d58:	d104      	bne.n	409d64 <tcp_enqueue_flags+0x124>
  409d5a:	78fb      	ldrb	r3, [r7, #3]
  409d5c:	f003 0301 	and.w	r3, r3, #1
  409d60:	2b00      	cmp	r3, #0
  409d62:	d00c      	beq.n	409d7e <tcp_enqueue_flags+0x13e>
    pcb->snd_lbb++;
  409d64:	687b      	ldr	r3, [r7, #4]
  409d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  409d68:	1c5a      	adds	r2, r3, #1
  409d6a:	687b      	ldr	r3, [r7, #4]
  409d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
    pcb->snd_buf--;
  409d6e:	687b      	ldr	r3, [r7, #4]
  409d70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409d74:	3b01      	subs	r3, #1
  409d76:	b29a      	uxth	r2, r3
  409d78:	687b      	ldr	r3, [r7, #4]
  409d7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  }
  if (flags & TCP_FIN) {
  409d7e:	78fb      	ldrb	r3, [r7, #3]
  409d80:	f003 0301 	and.w	r3, r3, #1
  409d84:	2b00      	cmp	r3, #0
  409d86:	d006      	beq.n	409d96 <tcp_enqueue_flags+0x156>
    pcb->flags |= TF_FIN;
  409d88:	687b      	ldr	r3, [r7, #4]
  409d8a:	7f9b      	ldrb	r3, [r3, #30]
  409d8c:	f043 0320 	orr.w	r3, r3, #32
  409d90:	b2da      	uxtb	r2, r3
  409d92:	687b      	ldr	r3, [r7, #4]
  409d94:	779a      	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  409d96:	68fb      	ldr	r3, [r7, #12]
  409d98:	685b      	ldr	r3, [r3, #4]
  409d9a:	4618      	mov	r0, r3
  409d9c:	4b0a      	ldr	r3, [pc, #40]	; (409dc8 <tcp_enqueue_flags+0x188>)
  409d9e:	4798      	blx	r3
  409da0:	4603      	mov	r3, r0
  409da2:	4619      	mov	r1, r3
  409da4:	687b      	ldr	r3, [r7, #4]
  409da6:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
  409daa:	b28b      	uxth	r3, r1
  409dac:	4413      	add	r3, r2
  409dae:	b29a      	uxth	r2, r3
  409db0:	687b      	ldr	r3, [r7, #4]
  409db2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  if (pcb->snd_queuelen != 0) {
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  409db6:	2300      	movs	r3, #0
}
  409db8:	4618      	mov	r0, r3
  409dba:	3724      	adds	r7, #36	; 0x24
  409dbc:	46bd      	mov	sp, r7
  409dbe:	bd90      	pop	{r4, r7, pc}
  409dc0:	004057dd 	.word	0x004057dd
  409dc4:	004095b1 	.word	0x004095b1
  409dc8:	00405c11 	.word	0x00405c11

00409dcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  409dcc:	b590      	push	{r4, r7, lr}
  409dce:	b089      	sub	sp, #36	; 0x24
  409dd0:	af02      	add	r7, sp, #8
  409dd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  u8_t optlen = 0;
  409dd4:	2300      	movs	r3, #0
  409dd6:	75fb      	strb	r3, [r7, #23]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, htonl(pcb->snd_nxt));
  409dd8:	7dfb      	ldrb	r3, [r7, #23]
  409dda:	b29c      	uxth	r4, r3
  409ddc:	687b      	ldr	r3, [r7, #4]
  409dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  409de0:	4618      	mov	r0, r3
  409de2:	4b1f      	ldr	r3, [pc, #124]	; (409e60 <tcp_send_empty_ack+0x94>)
  409de4:	4798      	blx	r3
  409de6:	4603      	mov	r3, r0
  409de8:	2200      	movs	r2, #0
  409dea:	4621      	mov	r1, r4
  409dec:	6878      	ldr	r0, [r7, #4]
  409dee:	4c1d      	ldr	r4, [pc, #116]	; (409e64 <tcp_send_empty_ack+0x98>)
  409df0:	47a0      	blx	r4
  409df2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
  409df4:	693b      	ldr	r3, [r7, #16]
  409df6:	2b00      	cmp	r3, #0
  409df8:	d102      	bne.n	409e00 <tcp_send_empty_ack+0x34>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  409dfa:	f06f 0301 	mvn.w	r3, #1
  409dfe:	e02a      	b.n	409e56 <tcp_send_empty_ack+0x8a>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  409e00:	693b      	ldr	r3, [r7, #16]
  409e02:	685b      	ldr	r3, [r3, #4]
  409e04:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  /* remove ACK flags from the PCB, as we send an empty ACK now */
  pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  409e06:	687b      	ldr	r3, [r7, #4]
  409e08:	7f9b      	ldrb	r3, [r3, #30]
  409e0a:	f023 0303 	bic.w	r3, r3, #3
  409e0e:	b2da      	uxtb	r2, r3
  409e10:	687b      	ldr	r3, [r7, #4]
  409e12:	779a      	strb	r2, [r3, #30]
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif 

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
  409e14:	6879      	ldr	r1, [r7, #4]
  409e16:	687b      	ldr	r3, [r7, #4]
  409e18:	1d1a      	adds	r2, r3, #4
  409e1a:	693b      	ldr	r3, [r7, #16]
  409e1c:	891b      	ldrh	r3, [r3, #8]
  409e1e:	9300      	str	r3, [sp, #0]
  409e20:	2306      	movs	r3, #6
  409e22:	6938      	ldr	r0, [r7, #16]
  409e24:	4c10      	ldr	r4, [pc, #64]	; (409e68 <tcp_send_empty_ack+0x9c>)
  409e26:	47a0      	blx	r4
  409e28:	4603      	mov	r3, r0
  409e2a:	461a      	mov	r2, r3
  409e2c:	68fb      	ldr	r3, [r7, #12]
  409e2e:	821a      	strh	r2, [r3, #16]
#endif
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  409e30:	6879      	ldr	r1, [r7, #4]
  409e32:	687b      	ldr	r3, [r7, #4]
  409e34:	1d18      	adds	r0, r3, #4
  409e36:	687b      	ldr	r3, [r7, #4]
  409e38:	7a9c      	ldrb	r4, [r3, #10]
  409e3a:	687b      	ldr	r3, [r7, #4]
  409e3c:	7a5b      	ldrb	r3, [r3, #9]
  409e3e:	2206      	movs	r2, #6
  409e40:	9201      	str	r2, [sp, #4]
  409e42:	9300      	str	r3, [sp, #0]
  409e44:	4623      	mov	r3, r4
  409e46:	4602      	mov	r2, r0
  409e48:	6938      	ldr	r0, [r7, #16]
  409e4a:	4c08      	ldr	r4, [pc, #32]	; (409e6c <tcp_send_empty_ack+0xa0>)
  409e4c:	47a0      	blx	r4
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
  pbuf_free(p);
  409e4e:	6938      	ldr	r0, [r7, #16]
  409e50:	4b07      	ldr	r3, [pc, #28]	; (409e70 <tcp_send_empty_ack+0xa4>)
  409e52:	4798      	blx	r3

  return ERR_OK;
  409e54:	2300      	movs	r3, #0
}
  409e56:	4618      	mov	r0, r3
  409e58:	371c      	adds	r7, #28
  409e5a:	46bd      	mov	sp, r7
  409e5c:	bd90      	pop	{r4, r7, pc}
  409e5e:	bf00      	nop
  409e60:	00401fe5 	.word	0x00401fe5
  409e64:	0040944d 	.word	0x0040944d
  409e68:	00403d09 	.word	0x00403d09
  409e6c:	0040437d 	.word	0x0040437d
  409e70:	00405b81 	.word	0x00405b81

00409e74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  409e74:	b5b0      	push	{r4, r5, r7, lr}
  409e76:	b088      	sub	sp, #32
  409e78:	af00      	add	r7, sp, #0
  409e7a:	6078      	str	r0, [r7, #4]

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  409e7c:	4b8d      	ldr	r3, [pc, #564]	; (40a0b4 <tcp_output+0x240>)
  409e7e:	681a      	ldr	r2, [r3, #0]
  409e80:	687b      	ldr	r3, [r7, #4]
  409e82:	429a      	cmp	r2, r3
  409e84:	d101      	bne.n	409e8a <tcp_output+0x16>
    return ERR_OK;
  409e86:	2300      	movs	r3, #0
  409e88:	e14c      	b.n	40a124 <tcp_output+0x2b0>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  409e8a:	687b      	ldr	r3, [r7, #4]
  409e8c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
  409e90:	687b      	ldr	r3, [r7, #4]
  409e92:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  409e96:	429a      	cmp	r2, r3
  409e98:	d203      	bcs.n	409ea2 <tcp_output+0x2e>
  409e9a:	687b      	ldr	r3, [r7, #4]
  409e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  409ea0:	e002      	b.n	409ea8 <tcp_output+0x34>
  409ea2:	687b      	ldr	r3, [r7, #4]
  409ea4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  409ea8:	613b      	str	r3, [r7, #16]

  seg = pcb->unsent;
  409eaa:	687b      	ldr	r3, [r7, #4]
  409eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409eae:	61fb      	str	r3, [r7, #28]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  409eb0:	687b      	ldr	r3, [r7, #4]
  409eb2:	7f9b      	ldrb	r3, [r3, #30]
  409eb4:	f003 0302 	and.w	r3, r3, #2
  409eb8:	2b00      	cmp	r3, #0
  409eba:	d017      	beq.n	409eec <tcp_output+0x78>
  409ebc:	69fb      	ldr	r3, [r7, #28]
  409ebe:	2b00      	cmp	r3, #0
  409ec0:	d00f      	beq.n	409ee2 <tcp_output+0x6e>
     (seg == NULL ||
      ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  409ec2:	69fb      	ldr	r3, [r7, #28]
  409ec4:	68db      	ldr	r3, [r3, #12]
  409ec6:	685b      	ldr	r3, [r3, #4]
  409ec8:	4618      	mov	r0, r3
  409eca:	4b7b      	ldr	r3, [pc, #492]	; (40a0b8 <tcp_output+0x244>)
  409ecc:	4798      	blx	r3
  409ece:	4602      	mov	r2, r0
  409ed0:	687b      	ldr	r3, [r7, #4]
  409ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  409ed4:	1ad3      	subs	r3, r2, r3
  409ed6:	69fa      	ldr	r2, [r7, #28]
  409ed8:	8912      	ldrh	r2, [r2, #8]
  409eda:	441a      	add	r2, r3
     (seg == NULL ||
  409edc:	693b      	ldr	r3, [r7, #16]
  409ede:	429a      	cmp	r2, r3
  409ee0:	d904      	bls.n	409eec <tcp_output+0x78>
     return tcp_send_empty_ack(pcb);
  409ee2:	6878      	ldr	r0, [r7, #4]
  409ee4:	4b75      	ldr	r3, [pc, #468]	; (40a0bc <tcp_output+0x248>)
  409ee6:	4798      	blx	r3
  409ee8:	4603      	mov	r3, r0
  409eea:	e11b      	b.n	40a124 <tcp_output+0x2b0>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  409eec:	687b      	ldr	r3, [r7, #4]
  409eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409ef0:	61bb      	str	r3, [r7, #24]
  if (useg != NULL) {
  409ef2:	69bb      	ldr	r3, [r7, #24]
  409ef4:	2b00      	cmp	r3, #0
  409ef6:	f000 80ef 	beq.w	40a0d8 <tcp_output+0x264>
    for (; useg->next != NULL; useg = useg->next);
  409efa:	e002      	b.n	409f02 <tcp_output+0x8e>
  409efc:	69bb      	ldr	r3, [r7, #24]
  409efe:	681b      	ldr	r3, [r3, #0]
  409f00:	61bb      	str	r3, [r7, #24]
  409f02:	69bb      	ldr	r3, [r7, #24]
  409f04:	681b      	ldr	r3, [r3, #0]
  409f06:	2b00      	cmp	r3, #0
  409f08:	d1f8      	bne.n	409efc <tcp_output+0x88>
                 ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 ntohl(seg->tcphdr->seqno), pcb->lastack));
  }
#endif /* TCP_CWND_DEBUG */
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
  409f0a:	e0e5      	b.n	40a0d8 <tcp_output+0x264>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if((tcp_do_output_nagle(pcb) == 0) &&
  409f0c:	687b      	ldr	r3, [r7, #4]
  409f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  409f10:	2b00      	cmp	r3, #0
  409f12:	d01f      	beq.n	409f54 <tcp_output+0xe0>
  409f14:	687b      	ldr	r3, [r7, #4]
  409f16:	7f9b      	ldrb	r3, [r3, #30]
  409f18:	f003 0344 	and.w	r3, r3, #68	; 0x44
  409f1c:	2b00      	cmp	r3, #0
  409f1e:	d119      	bne.n	409f54 <tcp_output+0xe0>
  409f20:	687b      	ldr	r3, [r7, #4]
  409f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409f24:	2b00      	cmp	r3, #0
  409f26:	d00b      	beq.n	409f40 <tcp_output+0xcc>
  409f28:	687b      	ldr	r3, [r7, #4]
  409f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409f2c:	681b      	ldr	r3, [r3, #0]
  409f2e:	2b00      	cmp	r3, #0
  409f30:	d110      	bne.n	409f54 <tcp_output+0xe0>
  409f32:	687b      	ldr	r3, [r7, #4]
  409f34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  409f36:	891a      	ldrh	r2, [r3, #8]
  409f38:	687b      	ldr	r3, [r7, #4]
  409f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  409f3c:	429a      	cmp	r2, r3
  409f3e:	d209      	bcs.n	409f54 <tcp_output+0xe0>
  409f40:	687b      	ldr	r3, [r7, #4]
  409f42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
  409f46:	2b00      	cmp	r3, #0
  409f48:	d004      	beq.n	409f54 <tcp_output+0xe0>
  409f4a:	687b      	ldr	r3, [r7, #4]
  409f4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
  409f50:	2b07      	cmp	r3, #7
  409f52:	d901      	bls.n	409f58 <tcp_output+0xe4>
  409f54:	2301      	movs	r3, #1
  409f56:	e000      	b.n	409f5a <tcp_output+0xe6>
  409f58:	2300      	movs	r3, #0
  409f5a:	2b00      	cmp	r3, #0
  409f5c:	d106      	bne.n	409f6c <tcp_output+0xf8>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
  409f5e:	687b      	ldr	r3, [r7, #4]
  409f60:	7f9b      	ldrb	r3, [r3, #30]
  409f62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if((tcp_do_output_nagle(pcb) == 0) &&
  409f66:	2b00      	cmp	r3, #0
  409f68:	f000 80cb 	beq.w	40a102 <tcp_output+0x28e>
                            pcb->lastack,
                            ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    pcb->unsent = seg->next;
  409f6c:	69fb      	ldr	r3, [r7, #28]
  409f6e:	681a      	ldr	r2, [r3, #0]
  409f70:	687b      	ldr	r3, [r7, #4]
  409f72:	66da      	str	r2, [r3, #108]	; 0x6c

    if (pcb->state != SYN_SENT) {
  409f74:	687b      	ldr	r3, [r7, #4]
  409f76:	7e1b      	ldrb	r3, [r3, #24]
  409f78:	2b02      	cmp	r3, #2
  409f7a:	d013      	beq.n	409fa4 <tcp_output+0x130>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  409f7c:	69fb      	ldr	r3, [r7, #28]
  409f7e:	68dc      	ldr	r4, [r3, #12]
  409f80:	69fb      	ldr	r3, [r7, #28]
  409f82:	68db      	ldr	r3, [r3, #12]
  409f84:	899b      	ldrh	r3, [r3, #12]
  409f86:	b29d      	uxth	r5, r3
  409f88:	2010      	movs	r0, #16
  409f8a:	4b4d      	ldr	r3, [pc, #308]	; (40a0c0 <tcp_output+0x24c>)
  409f8c:	4798      	blx	r3
  409f8e:	4603      	mov	r3, r0
  409f90:	432b      	orrs	r3, r5
  409f92:	b29b      	uxth	r3, r3
  409f94:	81a3      	strh	r3, [r4, #12]
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  409f96:	687b      	ldr	r3, [r7, #4]
  409f98:	7f9b      	ldrb	r3, [r3, #30]
  409f9a:	f023 0303 	bic.w	r3, r3, #3
  409f9e:	b2da      	uxtb	r2, r3
  409fa0:	687b      	ldr	r3, [r7, #4]
  409fa2:	779a      	strb	r2, [r3, #30]
    }

    tcp_output_segment(seg, pcb);
  409fa4:	6879      	ldr	r1, [r7, #4]
  409fa6:	69f8      	ldr	r0, [r7, #28]
  409fa8:	4b46      	ldr	r3, [pc, #280]	; (40a0c4 <tcp_output+0x250>)
  409faa:	4798      	blx	r3
    snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  409fac:	69fb      	ldr	r3, [r7, #28]
  409fae:	68db      	ldr	r3, [r3, #12]
  409fb0:	685b      	ldr	r3, [r3, #4]
  409fb2:	4618      	mov	r0, r3
  409fb4:	4b40      	ldr	r3, [pc, #256]	; (40a0b8 <tcp_output+0x244>)
  409fb6:	4798      	blx	r3
  409fb8:	4604      	mov	r4, r0
  409fba:	69fb      	ldr	r3, [r7, #28]
  409fbc:	891b      	ldrh	r3, [r3, #8]
  409fbe:	461d      	mov	r5, r3
  409fc0:	69fb      	ldr	r3, [r7, #28]
  409fc2:	68db      	ldr	r3, [r3, #12]
  409fc4:	899b      	ldrh	r3, [r3, #12]
  409fc6:	b29b      	uxth	r3, r3
  409fc8:	4618      	mov	r0, r3
  409fca:	4b3f      	ldr	r3, [pc, #252]	; (40a0c8 <tcp_output+0x254>)
  409fcc:	4798      	blx	r3
  409fce:	4603      	mov	r3, r0
  409fd0:	f003 0303 	and.w	r3, r3, #3
  409fd4:	2b00      	cmp	r3, #0
  409fd6:	bf14      	ite	ne
  409fd8:	2301      	movne	r3, #1
  409fda:	2300      	moveq	r3, #0
  409fdc:	b2db      	uxtb	r3, r3
  409fde:	442b      	add	r3, r5
  409fe0:	4423      	add	r3, r4
  409fe2:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  409fe4:	687b      	ldr	r3, [r7, #4]
  409fe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  409fe8:	68fb      	ldr	r3, [r7, #12]
  409fea:	1ad3      	subs	r3, r2, r3
  409fec:	2b00      	cmp	r3, #0
  409fee:	da02      	bge.n	409ff6 <tcp_output+0x182>
      pcb->snd_nxt = snd_nxt;
  409ff0:	687b      	ldr	r3, [r7, #4]
  409ff2:	68fa      	ldr	r2, [r7, #12]
  409ff4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  409ff6:	69fb      	ldr	r3, [r7, #28]
  409ff8:	891b      	ldrh	r3, [r3, #8]
  409ffa:	461c      	mov	r4, r3
  409ffc:	69fb      	ldr	r3, [r7, #28]
  409ffe:	68db      	ldr	r3, [r3, #12]
  40a000:	899b      	ldrh	r3, [r3, #12]
  40a002:	b29b      	uxth	r3, r3
  40a004:	4618      	mov	r0, r3
  40a006:	4b30      	ldr	r3, [pc, #192]	; (40a0c8 <tcp_output+0x254>)
  40a008:	4798      	blx	r3
  40a00a:	4603      	mov	r3, r0
  40a00c:	f003 0303 	and.w	r3, r3, #3
  40a010:	2b00      	cmp	r3, #0
  40a012:	bf14      	ite	ne
  40a014:	2301      	movne	r3, #1
  40a016:	2300      	moveq	r3, #0
  40a018:	b2db      	uxtb	r3, r3
  40a01a:	4423      	add	r3, r4
  40a01c:	2b00      	cmp	r3, #0
  40a01e:	dd55      	ble.n	40a0cc <tcp_output+0x258>
      seg->next = NULL;
  40a020:	69fb      	ldr	r3, [r7, #28]
  40a022:	2200      	movs	r2, #0
  40a024:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  40a026:	687b      	ldr	r3, [r7, #4]
  40a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a02a:	2b00      	cmp	r3, #0
  40a02c:	d105      	bne.n	40a03a <tcp_output+0x1c6>
        pcb->unacked = seg;
  40a02e:	687b      	ldr	r3, [r7, #4]
  40a030:	69fa      	ldr	r2, [r7, #28]
  40a032:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
  40a034:	69fb      	ldr	r3, [r7, #28]
  40a036:	61bb      	str	r3, [r7, #24]
  40a038:	e04b      	b.n	40a0d2 <tcp_output+0x25e>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))) {
  40a03a:	69fb      	ldr	r3, [r7, #28]
  40a03c:	68db      	ldr	r3, [r3, #12]
  40a03e:	685b      	ldr	r3, [r3, #4]
  40a040:	4618      	mov	r0, r3
  40a042:	4b1d      	ldr	r3, [pc, #116]	; (40a0b8 <tcp_output+0x244>)
  40a044:	4798      	blx	r3
  40a046:	4604      	mov	r4, r0
  40a048:	69bb      	ldr	r3, [r7, #24]
  40a04a:	68db      	ldr	r3, [r3, #12]
  40a04c:	685b      	ldr	r3, [r3, #4]
  40a04e:	4618      	mov	r0, r3
  40a050:	4b19      	ldr	r3, [pc, #100]	; (40a0b8 <tcp_output+0x244>)
  40a052:	4798      	blx	r3
  40a054:	4603      	mov	r3, r0
  40a056:	1ae3      	subs	r3, r4, r3
  40a058:	2b00      	cmp	r3, #0
  40a05a:	da24      	bge.n	40a0a6 <tcp_output+0x232>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  40a05c:	687b      	ldr	r3, [r7, #4]
  40a05e:	3370      	adds	r3, #112	; 0x70
  40a060:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
  40a062:	e002      	b.n	40a06a <tcp_output+0x1f6>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  40a064:	697b      	ldr	r3, [r7, #20]
  40a066:	681b      	ldr	r3, [r3, #0]
  40a068:	617b      	str	r3, [r7, #20]
          while (*cur_seg &&
  40a06a:	697b      	ldr	r3, [r7, #20]
  40a06c:	681b      	ldr	r3, [r3, #0]
  40a06e:	2b00      	cmp	r3, #0
  40a070:	d011      	beq.n	40a096 <tcp_output+0x222>
            TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40a072:	697b      	ldr	r3, [r7, #20]
  40a074:	681b      	ldr	r3, [r3, #0]
  40a076:	68db      	ldr	r3, [r3, #12]
  40a078:	685b      	ldr	r3, [r3, #4]
  40a07a:	4618      	mov	r0, r3
  40a07c:	4b0e      	ldr	r3, [pc, #56]	; (40a0b8 <tcp_output+0x244>)
  40a07e:	4798      	blx	r3
  40a080:	4604      	mov	r4, r0
  40a082:	69fb      	ldr	r3, [r7, #28]
  40a084:	68db      	ldr	r3, [r3, #12]
  40a086:	685b      	ldr	r3, [r3, #4]
  40a088:	4618      	mov	r0, r3
  40a08a:	4b0b      	ldr	r3, [pc, #44]	; (40a0b8 <tcp_output+0x244>)
  40a08c:	4798      	blx	r3
  40a08e:	4603      	mov	r3, r0
  40a090:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
  40a092:	2b00      	cmp	r3, #0
  40a094:	dbe6      	blt.n	40a064 <tcp_output+0x1f0>
          }
          seg->next = (*cur_seg);
  40a096:	697b      	ldr	r3, [r7, #20]
  40a098:	681a      	ldr	r2, [r3, #0]
  40a09a:	69fb      	ldr	r3, [r7, #28]
  40a09c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
  40a09e:	697b      	ldr	r3, [r7, #20]
  40a0a0:	69fa      	ldr	r2, [r7, #28]
  40a0a2:	601a      	str	r2, [r3, #0]
  40a0a4:	e015      	b.n	40a0d2 <tcp_output+0x25e>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  40a0a6:	69bb      	ldr	r3, [r7, #24]
  40a0a8:	69fa      	ldr	r2, [r7, #28]
  40a0aa:	601a      	str	r2, [r3, #0]
          useg = useg->next;
  40a0ac:	69bb      	ldr	r3, [r7, #24]
  40a0ae:	681b      	ldr	r3, [r3, #0]
  40a0b0:	61bb      	str	r3, [r7, #24]
  40a0b2:	e00e      	b.n	40a0d2 <tcp_output+0x25e>
  40a0b4:	204049b8 	.word	0x204049b8
  40a0b8:	00402019 	.word	0x00402019
  40a0bc:	00409dcd 	.word	0x00409dcd
  40a0c0:	00401f99 	.word	0x00401f99
  40a0c4:	0040a135 	.word	0x0040a135
  40a0c8:	00401fc5 	.word	0x00401fc5
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  40a0cc:	69f8      	ldr	r0, [r7, #28]
  40a0ce:	4b17      	ldr	r3, [pc, #92]	; (40a12c <tcp_output+0x2b8>)
  40a0d0:	4798      	blx	r3
    }
    seg = pcb->unsent;
  40a0d2:	687b      	ldr	r3, [r7, #4]
  40a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a0d6:	61fb      	str	r3, [r7, #28]
  while (seg != NULL &&
  40a0d8:	69fb      	ldr	r3, [r7, #28]
  40a0da:	2b00      	cmp	r3, #0
  40a0dc:	d012      	beq.n	40a104 <tcp_output+0x290>
         ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  40a0de:	69fb      	ldr	r3, [r7, #28]
  40a0e0:	68db      	ldr	r3, [r3, #12]
  40a0e2:	685b      	ldr	r3, [r3, #4]
  40a0e4:	4618      	mov	r0, r3
  40a0e6:	4b12      	ldr	r3, [pc, #72]	; (40a130 <tcp_output+0x2bc>)
  40a0e8:	4798      	blx	r3
  40a0ea:	4602      	mov	r2, r0
  40a0ec:	687b      	ldr	r3, [r7, #4]
  40a0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40a0f0:	1ad3      	subs	r3, r2, r3
  40a0f2:	69fa      	ldr	r2, [r7, #28]
  40a0f4:	8912      	ldrh	r2, [r2, #8]
  40a0f6:	441a      	add	r2, r3
  while (seg != NULL &&
  40a0f8:	693b      	ldr	r3, [r7, #16]
  40a0fa:	429a      	cmp	r2, r3
  40a0fc:	f67f af06 	bls.w	409f0c <tcp_output+0x98>
  40a100:	e000      	b.n	40a104 <tcp_output+0x290>
      break;
  40a102:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  40a104:	687b      	ldr	r3, [r7, #4]
  40a106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a108:	2b00      	cmp	r3, #0
  40a10a:	d103      	bne.n	40a114 <tcp_output+0x2a0>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40a10c:	687b      	ldr	r3, [r7, #4]
  40a10e:	2200      	movs	r2, #0
  40a110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  40a114:	687b      	ldr	r3, [r7, #4]
  40a116:	7f9b      	ldrb	r3, [r3, #30]
  40a118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40a11c:	b2da      	uxtb	r2, r3
  40a11e:	687b      	ldr	r3, [r7, #4]
  40a120:	779a      	strb	r2, [r3, #30]
  return ERR_OK;
  40a122:	2300      	movs	r3, #0
}
  40a124:	4618      	mov	r0, r3
  40a126:	3720      	adds	r7, #32
  40a128:	46bd      	mov	sp, r7
  40a12a:	bdb0      	pop	{r4, r5, r7, pc}
  40a12c:	00406e3d 	.word	0x00406e3d
  40a130:	00402019 	.word	0x00402019

0040a134 <tcp_output_segment>:
 * @param seg the tcp_seg to send
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 */
static void
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
{
  40a134:	b5b0      	push	{r4, r5, r7, lr}
  40a136:	b088      	sub	sp, #32
  40a138:	af02      	add	r7, sp, #8
  40a13a:	6078      	str	r0, [r7, #4]
  40a13c:	6039      	str	r1, [r7, #0]
  /** @bug Exclude retransmitted segments from this count. */
  snmp_inc_tcpoutsegs();

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
  40a13e:	687b      	ldr	r3, [r7, #4]
  40a140:	68dc      	ldr	r4, [r3, #12]
  40a142:	683b      	ldr	r3, [r7, #0]
  40a144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40a146:	4618      	mov	r0, r3
  40a148:	4b55      	ldr	r3, [pc, #340]	; (40a2a0 <tcp_output_segment+0x16c>)
  40a14a:	4798      	blx	r3
  40a14c:	4603      	mov	r3, r0
  40a14e:	60a3      	str	r3, [r4, #8]

  /* advertise our receive window size in this TCP segment */
  seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
  40a150:	687b      	ldr	r3, [r7, #4]
  40a152:	68dc      	ldr	r4, [r3, #12]
  40a154:	683b      	ldr	r3, [r7, #0]
  40a156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
  40a158:	4618      	mov	r0, r3
  40a15a:	4b52      	ldr	r3, [pc, #328]	; (40a2a4 <tcp_output_segment+0x170>)
  40a15c:	4798      	blx	r3
  40a15e:	4603      	mov	r3, r0
  40a160:	81e3      	strh	r3, [r4, #14]

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  40a162:	683b      	ldr	r3, [r7, #0]
  40a164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40a166:	683a      	ldr	r2, [r7, #0]
  40a168:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
  40a16a:	441a      	add	r2, r3
  40a16c:	683b      	ldr	r3, [r7, #0]
  40a16e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  40a170:	687b      	ldr	r3, [r7, #4]
  40a172:	68db      	ldr	r3, [r3, #12]
  40a174:	3314      	adds	r3, #20
  40a176:	617b      	str	r3, [r7, #20]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  40a178:	687b      	ldr	r3, [r7, #4]
  40a17a:	7a9b      	ldrb	r3, [r3, #10]
  40a17c:	f003 0301 	and.w	r3, r3, #1
  40a180:	2b00      	cmp	r3, #0
  40a182:	d014      	beq.n	40a1ae <tcp_output_segment+0x7a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->remote_ip);
  40a184:	683b      	ldr	r3, [r7, #0]
  40a186:	3304      	adds	r3, #4
  40a188:	4619      	mov	r1, r3
  40a18a:	f240 50b4 	movw	r0, #1460	; 0x5b4
  40a18e:	4b46      	ldr	r3, [pc, #280]	; (40a2a8 <tcp_output_segment+0x174>)
  40a190:	4798      	blx	r3
  40a192:	4603      	mov	r3, r0
  40a194:	827b      	strh	r3, [r7, #18]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  40a196:	8a7b      	ldrh	r3, [r7, #18]
  40a198:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
  40a19c:	4618      	mov	r0, r3
  40a19e:	4b40      	ldr	r3, [pc, #256]	; (40a2a0 <tcp_output_segment+0x16c>)
  40a1a0:	4798      	blx	r3
  40a1a2:	4602      	mov	r2, r0
  40a1a4:	697b      	ldr	r3, [r7, #20]
  40a1a6:	601a      	str	r2, [r3, #0]
    opts += 1;
  40a1a8:	697b      	ldr	r3, [r7, #20]
  40a1aa:	3304      	adds	r3, #4
  40a1ac:	617b      	str	r3, [r7, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled 
     This must be set before checking the route. */
  if (pcb->rtime == -1) {
  40a1ae:	683b      	ldr	r3, [r7, #0]
  40a1b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
  40a1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  40a1b8:	d102      	bne.n	40a1c0 <tcp_output_segment+0x8c>
    pcb->rtime = 0;
  40a1ba:	683b      	ldr	r3, [r7, #0]
  40a1bc:	2200      	movs	r2, #0
  40a1be:	869a      	strh	r2, [r3, #52]	; 0x34
  }

  /* If we don't have a local IP address, we get one by
     calling ip_route(). */
  if (ip_addr_isany(&(pcb->local_ip))) {
  40a1c0:	683b      	ldr	r3, [r7, #0]
  40a1c2:	2b00      	cmp	r3, #0
  40a1c4:	d003      	beq.n	40a1ce <tcp_output_segment+0x9a>
  40a1c6:	683b      	ldr	r3, [r7, #0]
  40a1c8:	681b      	ldr	r3, [r3, #0]
  40a1ca:	2b00      	cmp	r3, #0
  40a1cc:	d10c      	bne.n	40a1e8 <tcp_output_segment+0xb4>
    netif = ip_route(&(pcb->remote_ip));
  40a1ce:	683b      	ldr	r3, [r7, #0]
  40a1d0:	3304      	adds	r3, #4
  40a1d2:	4618      	mov	r0, r3
  40a1d4:	4b35      	ldr	r3, [pc, #212]	; (40a2ac <tcp_output_segment+0x178>)
  40a1d6:	4798      	blx	r3
  40a1d8:	60f8      	str	r0, [r7, #12]
    if (netif == NULL) {
  40a1da:	68fb      	ldr	r3, [r7, #12]
  40a1dc:	2b00      	cmp	r3, #0
  40a1de:	d05a      	beq.n	40a296 <tcp_output_segment+0x162>
      return;
    }
    ip_addr_copy(pcb->local_ip, netif->ip_addr);
  40a1e0:	68fb      	ldr	r3, [r7, #12]
  40a1e2:	685a      	ldr	r2, [r3, #4]
  40a1e4:	683b      	ldr	r3, [r7, #0]
  40a1e6:	601a      	str	r2, [r3, #0]
  }

  if (pcb->rttest == 0) {
  40a1e8:	683b      	ldr	r3, [r7, #0]
  40a1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  40a1ec:	2b00      	cmp	r3, #0
  40a1ee:	d10c      	bne.n	40a20a <tcp_output_segment+0xd6>
    pcb->rttest = tcp_ticks;
  40a1f0:	4b2f      	ldr	r3, [pc, #188]	; (40a2b0 <tcp_output_segment+0x17c>)
  40a1f2:	681a      	ldr	r2, [r3, #0]
  40a1f4:	683b      	ldr	r3, [r7, #0]
  40a1f6:	639a      	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = ntohl(seg->tcphdr->seqno);
  40a1f8:	687b      	ldr	r3, [r7, #4]
  40a1fa:	68db      	ldr	r3, [r3, #12]
  40a1fc:	685b      	ldr	r3, [r3, #4]
  40a1fe:	4618      	mov	r0, r3
  40a200:	4b2c      	ldr	r3, [pc, #176]	; (40a2b4 <tcp_output_segment+0x180>)
  40a202:	4798      	blx	r3
  40a204:	4602      	mov	r2, r0
  40a206:	683b      	ldr	r3, [r7, #0]
  40a208:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  40a20a:	687b      	ldr	r3, [r7, #4]
  40a20c:	68db      	ldr	r3, [r3, #12]
  40a20e:	461a      	mov	r2, r3
  40a210:	687b      	ldr	r3, [r7, #4]
  40a212:	685b      	ldr	r3, [r3, #4]
  40a214:	685b      	ldr	r3, [r3, #4]
  40a216:	1ad3      	subs	r3, r2, r3
  40a218:	817b      	strh	r3, [r7, #10]

  seg->p->len -= len;
  40a21a:	687b      	ldr	r3, [r7, #4]
  40a21c:	685b      	ldr	r3, [r3, #4]
  40a21e:	687a      	ldr	r2, [r7, #4]
  40a220:	6852      	ldr	r2, [r2, #4]
  40a222:	8951      	ldrh	r1, [r2, #10]
  40a224:	897a      	ldrh	r2, [r7, #10]
  40a226:	1a8a      	subs	r2, r1, r2
  40a228:	b292      	uxth	r2, r2
  40a22a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  40a22c:	687b      	ldr	r3, [r7, #4]
  40a22e:	685b      	ldr	r3, [r3, #4]
  40a230:	687a      	ldr	r2, [r7, #4]
  40a232:	6852      	ldr	r2, [r2, #4]
  40a234:	8911      	ldrh	r1, [r2, #8]
  40a236:	897a      	ldrh	r2, [r7, #10]
  40a238:	1a8a      	subs	r2, r1, r2
  40a23a:	b292      	uxth	r2, r2
  40a23c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  40a23e:	687b      	ldr	r3, [r7, #4]
  40a240:	685b      	ldr	r3, [r3, #4]
  40a242:	687a      	ldr	r2, [r7, #4]
  40a244:	68d2      	ldr	r2, [r2, #12]
  40a246:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  40a248:	687b      	ldr	r3, [r7, #4]
  40a24a:	68db      	ldr	r3, [r3, #12]
  40a24c:	2200      	movs	r2, #0
  40a24e:	741a      	strb	r2, [r3, #16]
  40a250:	2200      	movs	r2, #0
  40a252:	745a      	strb	r2, [r3, #17]
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
  }
#else /* TCP_CHECKSUM_ON_COPY */
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40a254:	687b      	ldr	r3, [r7, #4]
  40a256:	68dc      	ldr	r4, [r3, #12]
  40a258:	687b      	ldr	r3, [r7, #4]
  40a25a:	6858      	ldr	r0, [r3, #4]
  40a25c:	6839      	ldr	r1, [r7, #0]
  40a25e:	683b      	ldr	r3, [r7, #0]
  40a260:	1d1a      	adds	r2, r3, #4
         &(pcb->remote_ip),
         IP_PROTO_TCP, seg->p->tot_len);
  40a262:	687b      	ldr	r3, [r7, #4]
  40a264:	685b      	ldr	r3, [r3, #4]
  seg->tcphdr->chksum = inet_chksum_pseudo(seg->p, &(pcb->local_ip),
  40a266:	891b      	ldrh	r3, [r3, #8]
  40a268:	9300      	str	r3, [sp, #0]
  40a26a:	2306      	movs	r3, #6
  40a26c:	4d12      	ldr	r5, [pc, #72]	; (40a2b8 <tcp_output_segment+0x184>)
  40a26e:	47a8      	blx	r5
  40a270:	4603      	mov	r3, r0
  40a272:	8223      	strh	r3, [r4, #16]

#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
      IP_PROTO_TCP, &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
  40a274:	687b      	ldr	r3, [r7, #4]
  40a276:	6858      	ldr	r0, [r3, #4]
  40a278:	6839      	ldr	r1, [r7, #0]
  40a27a:	683b      	ldr	r3, [r7, #0]
  40a27c:	1d1c      	adds	r4, r3, #4
  40a27e:	683b      	ldr	r3, [r7, #0]
  40a280:	7a9d      	ldrb	r5, [r3, #10]
  40a282:	683b      	ldr	r3, [r7, #0]
  40a284:	7a5b      	ldrb	r3, [r3, #9]
  40a286:	2206      	movs	r2, #6
  40a288:	9201      	str	r2, [sp, #4]
  40a28a:	9300      	str	r3, [sp, #0]
  40a28c:	462b      	mov	r3, r5
  40a28e:	4622      	mov	r2, r4
  40a290:	4c0a      	ldr	r4, [pc, #40]	; (40a2bc <tcp_output_segment+0x188>)
  40a292:	47a0      	blx	r4
  40a294:	e000      	b.n	40a298 <tcp_output_segment+0x164>
      return;
  40a296:	bf00      	nop
      IP_PROTO_TCP);
#endif /* LWIP_NETIF_HWADDRHINT*/
}
  40a298:	3718      	adds	r7, #24
  40a29a:	46bd      	mov	sp, r7
  40a29c:	bdb0      	pop	{r4, r5, r7, pc}
  40a29e:	bf00      	nop
  40a2a0:	00401fe5 	.word	0x00401fe5
  40a2a4:	00401f99 	.word	0x00401f99
  40a2a8:	0040736d 	.word	0x0040736d
  40a2ac:	00403edd 	.word	0x00403edd
  40a2b0:	204049a4 	.word	0x204049a4
  40a2b4:	00402019 	.word	0x00402019
  40a2b8:	00403d09 	.word	0x00403d09
  40a2bc:	0040437d 	.word	0x0040437d

0040a2c0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  ip_addr_t *local_ip, ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  40a2c0:	b590      	push	{r4, r7, lr}
  40a2c2:	b089      	sub	sp, #36	; 0x24
  40a2c4:	af02      	add	r7, sp, #8
  40a2c6:	60f8      	str	r0, [r7, #12]
  40a2c8:	60b9      	str	r1, [r7, #8]
  40a2ca:	607a      	str	r2, [r7, #4]
  40a2cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  40a2ce:	2200      	movs	r2, #0
  40a2d0:	2114      	movs	r1, #20
  40a2d2:	2001      	movs	r0, #1
  40a2d4:	4b2f      	ldr	r3, [pc, #188]	; (40a394 <tcp_rst+0xd4>)
  40a2d6:	4798      	blx	r3
  40a2d8:	6178      	str	r0, [r7, #20]
  if (p == NULL) {
  40a2da:	697b      	ldr	r3, [r7, #20]
  40a2dc:	2b00      	cmp	r3, #0
  40a2de:	d054      	beq.n	40a38a <tcp_rst+0xca>
      return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  40a2e0:	697b      	ldr	r3, [r7, #20]
  40a2e2:	685b      	ldr	r3, [r3, #4]
  40a2e4:	613b      	str	r3, [r7, #16]
  tcphdr->src = htons(local_port);
  40a2e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
  40a2e8:	4618      	mov	r0, r3
  40a2ea:	4b2b      	ldr	r3, [pc, #172]	; (40a398 <tcp_rst+0xd8>)
  40a2ec:	4798      	blx	r3
  40a2ee:	4603      	mov	r3, r0
  40a2f0:	461a      	mov	r2, r3
  40a2f2:	693b      	ldr	r3, [r7, #16]
  40a2f4:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = htons(remote_port);
  40a2f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
  40a2f8:	4618      	mov	r0, r3
  40a2fa:	4b27      	ldr	r3, [pc, #156]	; (40a398 <tcp_rst+0xd8>)
  40a2fc:	4798      	blx	r3
  40a2fe:	4603      	mov	r3, r0
  40a300:	461a      	mov	r2, r3
  40a302:	693b      	ldr	r3, [r7, #16]
  40a304:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = htonl(seqno);
  40a306:	68f8      	ldr	r0, [r7, #12]
  40a308:	4b24      	ldr	r3, [pc, #144]	; (40a39c <tcp_rst+0xdc>)
  40a30a:	4798      	blx	r3
  40a30c:	4602      	mov	r2, r0
  40a30e:	693b      	ldr	r3, [r7, #16]
  40a310:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = htonl(ackno);
  40a312:	68b8      	ldr	r0, [r7, #8]
  40a314:	4b21      	ldr	r3, [pc, #132]	; (40a39c <tcp_rst+0xdc>)
  40a316:	4798      	blx	r3
  40a318:	4602      	mov	r2, r0
  40a31a:	693b      	ldr	r3, [r7, #16]
  40a31c:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  40a31e:	f245 0014 	movw	r0, #20500	; 0x5014
  40a322:	4b1d      	ldr	r3, [pc, #116]	; (40a398 <tcp_rst+0xd8>)
  40a324:	4798      	blx	r3
  40a326:	4603      	mov	r3, r0
  40a328:	461a      	mov	r2, r3
  40a32a:	693b      	ldr	r3, [r7, #16]
  40a32c:	819a      	strh	r2, [r3, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
  40a32e:	693b      	ldr	r3, [r7, #16]
  40a330:	2200      	movs	r2, #0
  40a332:	f042 020b 	orr.w	r2, r2, #11
  40a336:	739a      	strb	r2, [r3, #14]
  40a338:	2200      	movs	r2, #0
  40a33a:	f042 0268 	orr.w	r2, r2, #104	; 0x68
  40a33e:	73da      	strb	r2, [r3, #15]
  tcphdr->chksum = 0;
  40a340:	693b      	ldr	r3, [r7, #16]
  40a342:	2200      	movs	r2, #0
  40a344:	741a      	strb	r2, [r3, #16]
  40a346:	2200      	movs	r2, #0
  40a348:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  40a34a:	693b      	ldr	r3, [r7, #16]
  40a34c:	2200      	movs	r2, #0
  40a34e:	749a      	strb	r2, [r3, #18]
  40a350:	2200      	movs	r2, #0
  40a352:	74da      	strb	r2, [r3, #19]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
  40a354:	697b      	ldr	r3, [r7, #20]
  40a356:	891b      	ldrh	r3, [r3, #8]
  40a358:	9300      	str	r3, [sp, #0]
  40a35a:	2306      	movs	r3, #6
  40a35c:	683a      	ldr	r2, [r7, #0]
  40a35e:	6879      	ldr	r1, [r7, #4]
  40a360:	6978      	ldr	r0, [r7, #20]
  40a362:	4c0f      	ldr	r4, [pc, #60]	; (40a3a0 <tcp_rst+0xe0>)
  40a364:	47a0      	blx	r4
  40a366:	4603      	mov	r3, r0
  40a368:	461a      	mov	r2, r3
  40a36a:	693b      	ldr	r3, [r7, #16]
  40a36c:	821a      	strh	r2, [r3, #16]
              IP_PROTO_TCP, p->tot_len);
#endif
  TCP_STATS_INC(tcp.xmit);
  snmp_inc_tcpoutrsts();
   /* Send output with hardcoded TTL since we have no access to the pcb */
  ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
  40a36e:	2306      	movs	r3, #6
  40a370:	9301      	str	r3, [sp, #4]
  40a372:	2300      	movs	r3, #0
  40a374:	9300      	str	r3, [sp, #0]
  40a376:	23ff      	movs	r3, #255	; 0xff
  40a378:	683a      	ldr	r2, [r7, #0]
  40a37a:	6879      	ldr	r1, [r7, #4]
  40a37c:	6978      	ldr	r0, [r7, #20]
  40a37e:	4c09      	ldr	r4, [pc, #36]	; (40a3a4 <tcp_rst+0xe4>)
  40a380:	47a0      	blx	r4
  pbuf_free(p);
  40a382:	6978      	ldr	r0, [r7, #20]
  40a384:	4b08      	ldr	r3, [pc, #32]	; (40a3a8 <tcp_rst+0xe8>)
  40a386:	4798      	blx	r3
  40a388:	e000      	b.n	40a38c <tcp_rst+0xcc>
      return;
  40a38a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  40a38c:	371c      	adds	r7, #28
  40a38e:	46bd      	mov	sp, r7
  40a390:	bd90      	pop	{r4, r7, pc}
  40a392:	bf00      	nop
  40a394:	004057dd 	.word	0x004057dd
  40a398:	00401f99 	.word	0x00401f99
  40a39c:	00401fe5 	.word	0x00401fe5
  40a3a0:	00403d09 	.word	0x00403d09
  40a3a4:	0040437d 	.word	0x0040437d
  40a3a8:	00405b81 	.word	0x00405b81

0040a3ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  40a3ac:	b580      	push	{r7, lr}
  40a3ae:	b084      	sub	sp, #16
  40a3b0:	af00      	add	r7, sp, #0
  40a3b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  40a3b4:	687b      	ldr	r3, [r7, #4]
  40a3b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a3b8:	2b00      	cmp	r3, #0
  40a3ba:	d024      	beq.n	40a406 <tcp_rexmit_rto+0x5a>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  40a3bc:	687b      	ldr	r3, [r7, #4]
  40a3be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a3c0:	60fb      	str	r3, [r7, #12]
  40a3c2:	e002      	b.n	40a3ca <tcp_rexmit_rto+0x1e>
  40a3c4:	68fb      	ldr	r3, [r7, #12]
  40a3c6:	681b      	ldr	r3, [r3, #0]
  40a3c8:	60fb      	str	r3, [r7, #12]
  40a3ca:	68fb      	ldr	r3, [r7, #12]
  40a3cc:	681b      	ldr	r3, [r3, #0]
  40a3ce:	2b00      	cmp	r3, #0
  40a3d0:	d1f8      	bne.n	40a3c4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  40a3d2:	687b      	ldr	r3, [r7, #4]
  40a3d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
  40a3d6:	68fb      	ldr	r3, [r7, #12]
  40a3d8:	601a      	str	r2, [r3, #0]
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  40a3da:	687b      	ldr	r3, [r7, #4]
  40a3dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40a3de:	687b      	ldr	r3, [r7, #4]
  40a3e0:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  40a3e2:	687b      	ldr	r3, [r7, #4]
  40a3e4:	2200      	movs	r2, #0
  40a3e6:	671a      	str	r2, [r3, #112]	; 0x70
  /* last unsent hasn't changed, no need to reset unsent_oversize */

  /* increment number of retransmissions */
  ++pcb->nrtx;
  40a3e8:	687b      	ldr	r3, [r7, #4]
  40a3ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a3ee:	3301      	adds	r3, #1
  40a3f0:	b2da      	uxtb	r2, r3
  40a3f2:	687b      	ldr	r3, [r7, #4]
  40a3f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  40a3f8:	687b      	ldr	r3, [r7, #4]
  40a3fa:	2200      	movs	r2, #0
  40a3fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  40a3fe:	6878      	ldr	r0, [r7, #4]
  40a400:	4b03      	ldr	r3, [pc, #12]	; (40a410 <tcp_rexmit_rto+0x64>)
  40a402:	4798      	blx	r3
  40a404:	e000      	b.n	40a408 <tcp_rexmit_rto+0x5c>
    return;
  40a406:	bf00      	nop
}
  40a408:	3710      	adds	r7, #16
  40a40a:	46bd      	mov	sp, r7
  40a40c:	bd80      	pop	{r7, pc}
  40a40e:	bf00      	nop
  40a410:	00409e75 	.word	0x00409e75

0040a414 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  40a414:	b590      	push	{r4, r7, lr}
  40a416:	b085      	sub	sp, #20
  40a418:	af00      	add	r7, sp, #0
  40a41a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  40a41c:	687b      	ldr	r3, [r7, #4]
  40a41e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a420:	2b00      	cmp	r3, #0
  40a422:	d03e      	beq.n	40a4a2 <tcp_rexmit+0x8e>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  40a424:	687b      	ldr	r3, [r7, #4]
  40a426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a428:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
  40a42a:	68bb      	ldr	r3, [r7, #8]
  40a42c:	681a      	ldr	r2, [r3, #0]
  40a42e:	687b      	ldr	r3, [r7, #4]
  40a430:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  40a432:	687b      	ldr	r3, [r7, #4]
  40a434:	336c      	adds	r3, #108	; 0x6c
  40a436:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
  40a438:	e002      	b.n	40a440 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  40a43a:	68fb      	ldr	r3, [r7, #12]
  40a43c:	681b      	ldr	r3, [r3, #0]
  40a43e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
  40a440:	68fb      	ldr	r3, [r7, #12]
  40a442:	681b      	ldr	r3, [r3, #0]
  40a444:	2b00      	cmp	r3, #0
  40a446:	d011      	beq.n	40a46c <tcp_rexmit+0x58>
    TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
  40a448:	68fb      	ldr	r3, [r7, #12]
  40a44a:	681b      	ldr	r3, [r3, #0]
  40a44c:	68db      	ldr	r3, [r3, #12]
  40a44e:	685b      	ldr	r3, [r3, #4]
  40a450:	4618      	mov	r0, r3
  40a452:	4b16      	ldr	r3, [pc, #88]	; (40a4ac <tcp_rexmit+0x98>)
  40a454:	4798      	blx	r3
  40a456:	4604      	mov	r4, r0
  40a458:	68bb      	ldr	r3, [r7, #8]
  40a45a:	68db      	ldr	r3, [r3, #12]
  40a45c:	685b      	ldr	r3, [r3, #4]
  40a45e:	4618      	mov	r0, r3
  40a460:	4b12      	ldr	r3, [pc, #72]	; (40a4ac <tcp_rexmit+0x98>)
  40a462:	4798      	blx	r3
  40a464:	4603      	mov	r3, r0
  40a466:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
  40a468:	2b00      	cmp	r3, #0
  40a46a:	dbe6      	blt.n	40a43a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
  40a46c:	68fb      	ldr	r3, [r7, #12]
  40a46e:	681a      	ldr	r2, [r3, #0]
  40a470:	68bb      	ldr	r3, [r7, #8]
  40a472:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
  40a474:	68fb      	ldr	r3, [r7, #12]
  40a476:	68ba      	ldr	r2, [r7, #8]
  40a478:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  40a47a:	68bb      	ldr	r3, [r7, #8]
  40a47c:	681b      	ldr	r3, [r3, #0]
  40a47e:	2b00      	cmp	r3, #0
  40a480:	d103      	bne.n	40a48a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  40a482:	687b      	ldr	r3, [r7, #4]
  40a484:	2200      	movs	r2, #0
  40a486:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
#endif /* TCP_OVERSIZE */

  ++pcb->nrtx;
  40a48a:	687b      	ldr	r3, [r7, #4]
  40a48c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
  40a490:	3301      	adds	r3, #1
  40a492:	b2da      	uxtb	r2, r3
  40a494:	687b      	ldr	r3, [r7, #4]
  40a496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  40a49a:	687b      	ldr	r3, [r7, #4]
  40a49c:	2200      	movs	r2, #0
  40a49e:	639a      	str	r2, [r3, #56]	; 0x38
  40a4a0:	e000      	b.n	40a4a4 <tcp_rexmit+0x90>
    return;
  40a4a2:	bf00      	nop

  /* Do the actual retransmission. */
  snmp_inc_tcpretranssegs();
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  40a4a4:	3714      	adds	r7, #20
  40a4a6:	46bd      	mov	sp, r7
  40a4a8:	bd90      	pop	{r4, r7, pc}
  40a4aa:	bf00      	nop
  40a4ac:	00402019 	.word	0x00402019

0040a4b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void 
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  40a4b0:	b580      	push	{r7, lr}
  40a4b2:	b082      	sub	sp, #8
  40a4b4:	af00      	add	r7, sp, #0
  40a4b6:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  40a4b8:	687b      	ldr	r3, [r7, #4]
  40a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a4bc:	2b00      	cmp	r3, #0
  40a4be:	d046      	beq.n	40a54e <tcp_rexmit_fast+0x9e>
  40a4c0:	687b      	ldr	r3, [r7, #4]
  40a4c2:	7f9b      	ldrb	r3, [r3, #30]
  40a4c4:	f003 0304 	and.w	r3, r3, #4
  40a4c8:	2b00      	cmp	r3, #0
  40a4ca:	d140      	bne.n	40a54e <tcp_rexmit_fast+0x9e>
    LWIP_DEBUGF(TCP_FR_DEBUG, 
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  40a4cc:	6878      	ldr	r0, [r7, #4]
  40a4ce:	4b22      	ldr	r3, [pc, #136]	; (40a558 <tcp_rexmit_fast+0xa8>)
  40a4d0:	4798      	blx	r3

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    if (pcb->cwnd > pcb->snd_wnd) {
  40a4d2:	687b      	ldr	r3, [r7, #4]
  40a4d4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
  40a4d8:	687b      	ldr	r3, [r7, #4]
  40a4da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a4de:	429a      	cmp	r2, r3
  40a4e0:	d908      	bls.n	40a4f4 <tcp_rexmit_fast+0x44>
      pcb->ssthresh = pcb->snd_wnd / 2;
  40a4e2:	687b      	ldr	r3, [r7, #4]
  40a4e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
  40a4e8:	085b      	lsrs	r3, r3, #1
  40a4ea:	b29a      	uxth	r2, r3
  40a4ec:	687b      	ldr	r3, [r7, #4]
  40a4ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  40a4f2:	e007      	b.n	40a504 <tcp_rexmit_fast+0x54>
    } else {
      pcb->ssthresh = pcb->cwnd / 2;
  40a4f4:	687b      	ldr	r3, [r7, #4]
  40a4f6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
  40a4fa:	085b      	lsrs	r3, r3, #1
  40a4fc:	b29a      	uxth	r2, r3
  40a4fe:	687b      	ldr	r3, [r7, #4]
  40a500:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < 2*pcb->mss) {
  40a504:	687b      	ldr	r3, [r7, #4]
  40a506:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
  40a50a:	461a      	mov	r2, r3
  40a50c:	687b      	ldr	r3, [r7, #4]
  40a50e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a510:	005b      	lsls	r3, r3, #1
  40a512:	429a      	cmp	r2, r3
  40a514:	da06      	bge.n	40a524 <tcp_rexmit_fast+0x74>
      LWIP_DEBUGF(TCP_FR_DEBUG, 
                  ("tcp_receive: The minimum value for ssthresh %"U16_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, 2*pcb->mss));
      pcb->ssthresh = 2*pcb->mss;
  40a516:	687b      	ldr	r3, [r7, #4]
  40a518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a51a:	005b      	lsls	r3, r3, #1
  40a51c:	b29a      	uxth	r2, r3
  40a51e:	687b      	ldr	r3, [r7, #4]
  40a520:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    }
    
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  40a524:	687b      	ldr	r3, [r7, #4]
  40a526:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
  40a52a:	687b      	ldr	r3, [r7, #4]
  40a52c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
  40a52e:	4619      	mov	r1, r3
  40a530:	0049      	lsls	r1, r1, #1
  40a532:	440b      	add	r3, r1
  40a534:	b29b      	uxth	r3, r3
  40a536:	4413      	add	r3, r2
  40a538:	b29a      	uxth	r2, r3
  40a53a:	687b      	ldr	r3, [r7, #4]
  40a53c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  40a540:	687b      	ldr	r3, [r7, #4]
  40a542:	7f9b      	ldrb	r3, [r3, #30]
  40a544:	f043 0304 	orr.w	r3, r3, #4
  40a548:	b2da      	uxtb	r2, r3
  40a54a:	687b      	ldr	r3, [r7, #4]
  40a54c:	779a      	strb	r2, [r3, #30]
  } 
}
  40a54e:	bf00      	nop
  40a550:	3708      	adds	r7, #8
  40a552:	46bd      	mov	sp, r7
  40a554:	bd80      	pop	{r7, pc}
  40a556:	bf00      	nop
  40a558:	0040a415 	.word	0x0040a415

0040a55c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
void
tcp_keepalive(struct tcp_pcb *pcb)
{
  40a55c:	b590      	push	{r4, r7, lr}
  40a55e:	b087      	sub	sp, #28
  40a560:	af02      	add	r7, sp, #8
  40a562:	6078      	str	r0, [r7, #4]
                          ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip)));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
                          tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
   
  p = tcp_output_alloc_header(pcb, 0, 0, htonl(pcb->snd_nxt - 1));
  40a564:	687b      	ldr	r3, [r7, #4]
  40a566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  40a568:	3b01      	subs	r3, #1
  40a56a:	4618      	mov	r0, r3
  40a56c:	4b18      	ldr	r3, [pc, #96]	; (40a5d0 <tcp_keepalive+0x74>)
  40a56e:	4798      	blx	r3
  40a570:	4603      	mov	r3, r0
  40a572:	2200      	movs	r2, #0
  40a574:	2100      	movs	r1, #0
  40a576:	6878      	ldr	r0, [r7, #4]
  40a578:	4c16      	ldr	r4, [pc, #88]	; (40a5d4 <tcp_keepalive+0x78>)
  40a57a:	47a0      	blx	r4
  40a57c:	60f8      	str	r0, [r7, #12]
  if(p == NULL) {
  40a57e:	68fb      	ldr	r3, [r7, #12]
  40a580:	2b00      	cmp	r3, #0
  40a582:	d021      	beq.n	40a5c8 <tcp_keepalive+0x6c>
    LWIP_DEBUGF(TCP_DEBUG, 
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a584:	68fb      	ldr	r3, [r7, #12]
  40a586:	685b      	ldr	r3, [r3, #4]
  40a588:	60bb      	str	r3, [r7, #8]

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a58a:	6879      	ldr	r1, [r7, #4]
  40a58c:	687b      	ldr	r3, [r7, #4]
  40a58e:	1d1a      	adds	r2, r3, #4
  40a590:	68fb      	ldr	r3, [r7, #12]
  40a592:	891b      	ldrh	r3, [r3, #8]
  40a594:	9300      	str	r3, [sp, #0]
  40a596:	2306      	movs	r3, #6
  40a598:	68f8      	ldr	r0, [r7, #12]
  40a59a:	4c0f      	ldr	r4, [pc, #60]	; (40a5d8 <tcp_keepalive+0x7c>)
  40a59c:	47a0      	blx	r4
  40a59e:	4603      	mov	r3, r0
  40a5a0:	461a      	mov	r2, r3
  40a5a2:	68bb      	ldr	r3, [r7, #8]
  40a5a4:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a5a6:	6879      	ldr	r1, [r7, #4]
  40a5a8:	687b      	ldr	r3, [r7, #4]
  40a5aa:	1d1a      	adds	r2, r3, #4
  40a5ac:	687b      	ldr	r3, [r7, #4]
  40a5ae:	7a98      	ldrb	r0, [r3, #10]
  40a5b0:	2306      	movs	r3, #6
  40a5b2:	9301      	str	r3, [sp, #4]
  40a5b4:	2300      	movs	r3, #0
  40a5b6:	9300      	str	r3, [sp, #0]
  40a5b8:	4603      	mov	r3, r0
  40a5ba:	68f8      	ldr	r0, [r7, #12]
  40a5bc:	4c07      	ldr	r4, [pc, #28]	; (40a5dc <tcp_keepalive+0x80>)
  40a5be:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a5c0:	68f8      	ldr	r0, [r7, #12]
  40a5c2:	4b07      	ldr	r3, [pc, #28]	; (40a5e0 <tcp_keepalive+0x84>)
  40a5c4:	4798      	blx	r3
  40a5c6:	e000      	b.n	40a5ca <tcp_keepalive+0x6e>
    return;
  40a5c8:	bf00      	nop

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a5ca:	3714      	adds	r7, #20
  40a5cc:	46bd      	mov	sp, r7
  40a5ce:	bd90      	pop	{r4, r7, pc}
  40a5d0:	00401fe5 	.word	0x00401fe5
  40a5d4:	0040944d 	.word	0x0040944d
  40a5d8:	00403d09 	.word	0x00403d09
  40a5dc:	0040437d 	.word	0x0040437d
  40a5e0:	00405b81 	.word	0x00405b81

0040a5e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
void
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  40a5e4:	b590      	push	{r4, r7, lr}
  40a5e6:	b08b      	sub	sp, #44	; 0x2c
  40a5e8:	af02      	add	r7, sp, #8
  40a5ea:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, 
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
               tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));

  seg = pcb->unacked;
  40a5ec:	687b      	ldr	r3, [r7, #4]
  40a5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40a5f0:	61fb      	str	r3, [r7, #28]

  if(seg == NULL) {
  40a5f2:	69fb      	ldr	r3, [r7, #28]
  40a5f4:	2b00      	cmp	r3, #0
  40a5f6:	d102      	bne.n	40a5fe <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
  40a5f8:	687b      	ldr	r3, [r7, #4]
  40a5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  40a5fc:	61fb      	str	r3, [r7, #28]
  }
  if(seg == NULL) {
  40a5fe:	69fb      	ldr	r3, [r7, #28]
  40a600:	2b00      	cmp	r3, #0
  40a602:	d06e      	beq.n	40a6e2 <tcp_zero_window_probe+0xfe>
    return;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  40a604:	69fb      	ldr	r3, [r7, #28]
  40a606:	68db      	ldr	r3, [r3, #12]
  40a608:	899b      	ldrh	r3, [r3, #12]
  40a60a:	b29b      	uxth	r3, r3
  40a60c:	4618      	mov	r0, r3
  40a60e:	4b38      	ldr	r3, [pc, #224]	; (40a6f0 <tcp_zero_window_probe+0x10c>)
  40a610:	4798      	blx	r3
  40a612:	4603      	mov	r3, r0
  40a614:	f003 0301 	and.w	r3, r3, #1
  40a618:	2b00      	cmp	r3, #0
  40a61a:	d005      	beq.n	40a628 <tcp_zero_window_probe+0x44>
  40a61c:	69fb      	ldr	r3, [r7, #28]
  40a61e:	891b      	ldrh	r3, [r3, #8]
  40a620:	2b00      	cmp	r3, #0
  40a622:	d101      	bne.n	40a628 <tcp_zero_window_probe+0x44>
  40a624:	2301      	movs	r3, #1
  40a626:	e000      	b.n	40a62a <tcp_zero_window_probe+0x46>
  40a628:	2300      	movs	r3, #0
  40a62a:	76fb      	strb	r3, [r7, #27]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  40a62c:	7efb      	ldrb	r3, [r7, #27]
  40a62e:	2b00      	cmp	r3, #0
  40a630:	bf0c      	ite	eq
  40a632:	2301      	moveq	r3, #1
  40a634:	2300      	movne	r3, #0
  40a636:	b2db      	uxtb	r3, r3
  40a638:	833b      	strh	r3, [r7, #24]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  40a63a:	69fb      	ldr	r3, [r7, #28]
  40a63c:	68db      	ldr	r3, [r3, #12]
  40a63e:	685b      	ldr	r3, [r3, #4]
  40a640:	8b3a      	ldrh	r2, [r7, #24]
  40a642:	2100      	movs	r1, #0
  40a644:	6878      	ldr	r0, [r7, #4]
  40a646:	4c2b      	ldr	r4, [pc, #172]	; (40a6f4 <tcp_zero_window_probe+0x110>)
  40a648:	47a0      	blx	r4
  40a64a:	6178      	str	r0, [r7, #20]
  if(p == NULL) {
  40a64c:	697b      	ldr	r3, [r7, #20]
  40a64e:	2b00      	cmp	r3, #0
  40a650:	d049      	beq.n	40a6e6 <tcp_zero_window_probe+0x102>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  40a652:	697b      	ldr	r3, [r7, #20]
  40a654:	685b      	ldr	r3, [r3, #4]
  40a656:	613b      	str	r3, [r7, #16]

  if (is_fin) {
  40a658:	7efb      	ldrb	r3, [r7, #27]
  40a65a:	2b00      	cmp	r3, #0
  40a65c:	d011      	beq.n	40a682 <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  40a65e:	693b      	ldr	r3, [r7, #16]
  40a660:	899b      	ldrh	r3, [r3, #12]
  40a662:	b29b      	uxth	r3, r3
  40a664:	b21b      	sxth	r3, r3
  40a666:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
  40a66a:	b21c      	sxth	r4, r3
  40a66c:	2011      	movs	r0, #17
  40a66e:	4b22      	ldr	r3, [pc, #136]	; (40a6f8 <tcp_zero_window_probe+0x114>)
  40a670:	4798      	blx	r3
  40a672:	4603      	mov	r3, r0
  40a674:	b21b      	sxth	r3, r3
  40a676:	4323      	orrs	r3, r4
  40a678:	b21b      	sxth	r3, r3
  40a67a:	b29a      	uxth	r2, r3
  40a67c:	693b      	ldr	r3, [r7, #16]
  40a67e:	819a      	strh	r2, [r3, #12]
  40a680:	e010      	b.n	40a6a4 <tcp_zero_window_probe+0xc0>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  40a682:	697b      	ldr	r3, [r7, #20]
  40a684:	685b      	ldr	r3, [r3, #4]
  40a686:	3314      	adds	r3, #20
  40a688:	60fb      	str	r3, [r7, #12]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  40a68a:	69fb      	ldr	r3, [r7, #28]
  40a68c:	6858      	ldr	r0, [r3, #4]
  40a68e:	69fb      	ldr	r3, [r7, #28]
  40a690:	685b      	ldr	r3, [r3, #4]
  40a692:	891a      	ldrh	r2, [r3, #8]
  40a694:	69fb      	ldr	r3, [r7, #28]
  40a696:	891b      	ldrh	r3, [r3, #8]
  40a698:	1ad3      	subs	r3, r2, r3
  40a69a:	b29b      	uxth	r3, r3
  40a69c:	2201      	movs	r2, #1
  40a69e:	68f9      	ldr	r1, [r7, #12]
  40a6a0:	4c16      	ldr	r4, [pc, #88]	; (40a6fc <tcp_zero_window_probe+0x118>)
  40a6a2:	47a0      	blx	r4
  }

#if CHECKSUM_GEN_TCP
  tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
  40a6a4:	6879      	ldr	r1, [r7, #4]
  40a6a6:	687b      	ldr	r3, [r7, #4]
  40a6a8:	1d1a      	adds	r2, r3, #4
  40a6aa:	697b      	ldr	r3, [r7, #20]
  40a6ac:	891b      	ldrh	r3, [r3, #8]
  40a6ae:	9300      	str	r3, [sp, #0]
  40a6b0:	2306      	movs	r3, #6
  40a6b2:	6978      	ldr	r0, [r7, #20]
  40a6b4:	4c12      	ldr	r4, [pc, #72]	; (40a700 <tcp_zero_window_probe+0x11c>)
  40a6b6:	47a0      	blx	r4
  40a6b8:	4603      	mov	r3, r0
  40a6ba:	461a      	mov	r2, r3
  40a6bc:	693b      	ldr	r3, [r7, #16]
  40a6be:	821a      	strh	r2, [r3, #16]
  /* Send output to IP */
#if LWIP_NETIF_HWADDRHINT
  ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
    &(pcb->addr_hint));
#else /* LWIP_NETIF_HWADDRHINT*/
  ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
  40a6c0:	6879      	ldr	r1, [r7, #4]
  40a6c2:	687b      	ldr	r3, [r7, #4]
  40a6c4:	1d1a      	adds	r2, r3, #4
  40a6c6:	687b      	ldr	r3, [r7, #4]
  40a6c8:	7a98      	ldrb	r0, [r3, #10]
  40a6ca:	2306      	movs	r3, #6
  40a6cc:	9301      	str	r3, [sp, #4]
  40a6ce:	2300      	movs	r3, #0
  40a6d0:	9300      	str	r3, [sp, #0]
  40a6d2:	4603      	mov	r3, r0
  40a6d4:	6978      	ldr	r0, [r7, #20]
  40a6d6:	4c0b      	ldr	r4, [pc, #44]	; (40a704 <tcp_zero_window_probe+0x120>)
  40a6d8:	47a0      	blx	r4
#endif /* LWIP_NETIF_HWADDRHINT*/

  pbuf_free(p);
  40a6da:	6978      	ldr	r0, [r7, #20]
  40a6dc:	4b0a      	ldr	r3, [pc, #40]	; (40a708 <tcp_zero_window_probe+0x124>)
  40a6de:	4798      	blx	r3
  40a6e0:	e002      	b.n	40a6e8 <tcp_zero_window_probe+0x104>
    return;
  40a6e2:	bf00      	nop
  40a6e4:	e000      	b.n	40a6e8 <tcp_zero_window_probe+0x104>
    return;
  40a6e6:	bf00      	nop

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F".\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt));
}
  40a6e8:	3724      	adds	r7, #36	; 0x24
  40a6ea:	46bd      	mov	sp, r7
  40a6ec:	bd90      	pop	{r4, r7, pc}
  40a6ee:	bf00      	nop
  40a6f0:	00401fc5 	.word	0x00401fc5
  40a6f4:	0040944d 	.word	0x0040944d
  40a6f8:	00401f99 	.word	0x00401f99
  40a6fc:	00405df1 	.word	0x00405df1
  40a700:	00403d09 	.word	0x00403d09
  40a704:	0040437d 	.word	0x0040437d
  40a708:	00405b81 	.word	0x00405b81

0040a70c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  40a70c:	b480      	push	{r7}
  40a70e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  40a710:	bf00      	nop
  40a712:	46bd      	mov	sp, r7
  40a714:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a718:	4770      	bx	lr
	...

0040a71c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  40a71c:	b480      	push	{r7}
  40a71e:	b083      	sub	sp, #12
  40a720:	af00      	add	r7, sp, #0
  u16_t n = 0;
  40a722:	2300      	movs	r3, #0
  40a724:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;
  
again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  40a726:	4b17      	ldr	r3, [pc, #92]	; (40a784 <udp_new_port+0x68>)
  40a728:	881b      	ldrh	r3, [r3, #0]
  40a72a:	1c5a      	adds	r2, r3, #1
  40a72c:	b291      	uxth	r1, r2
  40a72e:	4a15      	ldr	r2, [pc, #84]	; (40a784 <udp_new_port+0x68>)
  40a730:	8011      	strh	r1, [r2, #0]
  40a732:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40a736:	4293      	cmp	r3, r2
  40a738:	d103      	bne.n	40a742 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  40a73a:	4b12      	ldr	r3, [pc, #72]	; (40a784 <udp_new_port+0x68>)
  40a73c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  40a740:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a742:	4b11      	ldr	r3, [pc, #68]	; (40a788 <udp_new_port+0x6c>)
  40a744:	681b      	ldr	r3, [r3, #0]
  40a746:	603b      	str	r3, [r7, #0]
  40a748:	e011      	b.n	40a76e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
  40a74a:	683b      	ldr	r3, [r7, #0]
  40a74c:	8a5a      	ldrh	r2, [r3, #18]
  40a74e:	4b0d      	ldr	r3, [pc, #52]	; (40a784 <udp_new_port+0x68>)
  40a750:	881b      	ldrh	r3, [r3, #0]
  40a752:	429a      	cmp	r2, r3
  40a754:	d108      	bne.n	40a768 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  40a756:	88fb      	ldrh	r3, [r7, #6]
  40a758:	3301      	adds	r3, #1
  40a75a:	80fb      	strh	r3, [r7, #6]
  40a75c:	88fb      	ldrh	r3, [r7, #6]
  40a75e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
  40a762:	d3e0      	bcc.n	40a726 <udp_new_port+0xa>
        return 0;
  40a764:	2300      	movs	r3, #0
  40a766:	e007      	b.n	40a778 <udp_new_port+0x5c>
  for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a768:	683b      	ldr	r3, [r7, #0]
  40a76a:	68db      	ldr	r3, [r3, #12]
  40a76c:	603b      	str	r3, [r7, #0]
  40a76e:	683b      	ldr	r3, [r7, #0]
  40a770:	2b00      	cmp	r3, #0
  40a772:	d1ea      	bne.n	40a74a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
  40a774:	4b03      	ldr	r3, [pc, #12]	; (40a784 <udp_new_port+0x68>)
  40a776:	881b      	ldrh	r3, [r3, #0]
  if (ipcb != NULL) {
    return 0;
  }
  return udp_port;
#endif
}
  40a778:	4618      	mov	r0, r3
  40a77a:	370c      	adds	r7, #12
  40a77c:	46bd      	mov	sp, r7
  40a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40a782:	4770      	bx	lr
  40a784:	20400014 	.word	0x20400014
  40a788:	204049bc 	.word	0x204049bc

0040a78c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  40a78c:	b590      	push	{r4, r7, lr}
  40a78e:	b08d      	sub	sp, #52	; 0x34
  40a790:	af02      	add	r7, sp, #8
  40a792:	6078      	str	r0, [r7, #4]
  40a794:	6039      	str	r1, [r7, #0]

  PERF_START;

  UDP_STATS_INC(udp.recv);

  iphdr = (struct ip_hdr *)p->payload;
  40a796:	687b      	ldr	r3, [r7, #4]
  40a798:	685b      	ldr	r3, [r3, #4]
  40a79a:	617b      	str	r3, [r7, #20]

  /* Check minimum length (IP header + UDP header)
   * and move payload pointer to UDP header */
  if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
  40a79c:	687b      	ldr	r3, [r7, #4]
  40a79e:	891b      	ldrh	r3, [r3, #8]
  40a7a0:	461a      	mov	r2, r3
  40a7a2:	697b      	ldr	r3, [r7, #20]
  40a7a4:	781b      	ldrb	r3, [r3, #0]
  40a7a6:	f003 030f 	and.w	r3, r3, #15
  40a7aa:	3302      	adds	r3, #2
  40a7ac:	009b      	lsls	r3, r3, #2
  40a7ae:	429a      	cmp	r2, r3
  40a7b0:	db11      	blt.n	40a7d6 <udp_input+0x4a>
  40a7b2:	697b      	ldr	r3, [r7, #20]
  40a7b4:	781b      	ldrb	r3, [r3, #0]
  40a7b6:	b29b      	uxth	r3, r3
  40a7b8:	f003 030f 	and.w	r3, r3, #15
  40a7bc:	b29b      	uxth	r3, r3
  40a7be:	009b      	lsls	r3, r3, #2
  40a7c0:	b29b      	uxth	r3, r3
  40a7c2:	425b      	negs	r3, r3
  40a7c4:	b29b      	uxth	r3, r3
  40a7c6:	b21b      	sxth	r3, r3
  40a7c8:	4619      	mov	r1, r3
  40a7ca:	6878      	ldr	r0, [r7, #4]
  40a7cc:	4b92      	ldr	r3, [pc, #584]	; (40aa18 <udp_input+0x28c>)
  40a7ce:	4798      	blx	r3
  40a7d0:	4603      	mov	r3, r0
  40a7d2:	2b00      	cmp	r3, #0
  40a7d4:	d003      	beq.n	40a7de <udp_input+0x52>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    snmp_inc_udpinerrors();
    pbuf_free(p);
  40a7d6:	6878      	ldr	r0, [r7, #4]
  40a7d8:	4b90      	ldr	r3, [pc, #576]	; (40aa1c <udp_input+0x290>)
  40a7da:	4798      	blx	r3
    goto end;
  40a7dc:	e131      	b.n	40aa42 <udp_input+0x2b6>
  }

  udphdr = (struct udp_hdr *)p->payload;
  40a7de:	687b      	ldr	r3, [r7, #4]
  40a7e0:	685b      	ldr	r3, [r3, #4]
  40a7e2:	613b      	str	r3, [r7, #16]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
  40a7e4:	4b8e      	ldr	r3, [pc, #568]	; (40aa20 <udp_input+0x294>)
  40a7e6:	681b      	ldr	r3, [r3, #0]
  40a7e8:	6839      	ldr	r1, [r7, #0]
  40a7ea:	4618      	mov	r0, r3
  40a7ec:	4b8d      	ldr	r3, [pc, #564]	; (40aa24 <udp_input+0x298>)
  40a7ee:	4798      	blx	r3
  40a7f0:	4603      	mov	r3, r0
  40a7f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = ntohs(udphdr->src);
  40a7f4:	693b      	ldr	r3, [r7, #16]
  40a7f6:	881b      	ldrh	r3, [r3, #0]
  40a7f8:	b29b      	uxth	r3, r3
  40a7fa:	4618      	mov	r0, r3
  40a7fc:	4b8a      	ldr	r3, [pc, #552]	; (40aa28 <udp_input+0x29c>)
  40a7fe:	4798      	blx	r3
  40a800:	4603      	mov	r3, r0
  40a802:	81bb      	strh	r3, [r7, #12]
  dest = ntohs(udphdr->dest);
  40a804:	693b      	ldr	r3, [r7, #16]
  40a806:	885b      	ldrh	r3, [r3, #2]
  40a808:	b29b      	uxth	r3, r3
  40a80a:	4618      	mov	r0, r3
  40a80c:	4b86      	ldr	r3, [pc, #536]	; (40aa28 <udp_input+0x29c>)
  40a80e:	4798      	blx	r3
  40a810:	4603      	mov	r3, r0
  40a812:	817b      	strh	r3, [r7, #10]
               ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
               ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
               ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));

#if LWIP_DHCP
  pcb = NULL;
  40a814:	2300      	movs	r3, #0
  40a816:	627b      	str	r3, [r7, #36]	; 0x24
  /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
     the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
  if (dest == DHCP_CLIENT_PORT) {
  40a818:	897b      	ldrh	r3, [r7, #10]
  40a81a:	2b44      	cmp	r3, #68	; 0x44
  40a81c:	d127      	bne.n	40a86e <udp_input+0xe2>
    /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
    if (src == DHCP_SERVER_PORT) {
  40a81e:	89bb      	ldrh	r3, [r7, #12]
  40a820:	2b43      	cmp	r3, #67	; 0x43
  40a822:	f040 809a 	bne.w	40a95a <udp_input+0x1ce>
      if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
  40a826:	683b      	ldr	r3, [r7, #0]
  40a828:	6a1b      	ldr	r3, [r3, #32]
  40a82a:	2b00      	cmp	r3, #0
  40a82c:	f000 8095 	beq.w	40a95a <udp_input+0x1ce>
  40a830:	683b      	ldr	r3, [r7, #0]
  40a832:	6a1b      	ldr	r3, [r3, #32]
  40a834:	685b      	ldr	r3, [r3, #4]
  40a836:	2b00      	cmp	r3, #0
  40a838:	f000 808f 	beq.w	40a95a <udp_input+0x1ce>
        /* accept the packe if 
           (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
           - inp->dhcp->pcb->remote == ANY or iphdr->src */
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40a83c:	683b      	ldr	r3, [r7, #0]
  40a83e:	6a1b      	ldr	r3, [r3, #32]
  40a840:	685b      	ldr	r3, [r3, #4]
  40a842:	3304      	adds	r3, #4
  40a844:	2b00      	cmp	r3, #0
  40a846:	d00d      	beq.n	40a864 <udp_input+0xd8>
  40a848:	683b      	ldr	r3, [r7, #0]
  40a84a:	6a1b      	ldr	r3, [r3, #32]
  40a84c:	685b      	ldr	r3, [r3, #4]
  40a84e:	685b      	ldr	r3, [r3, #4]
  40a850:	2b00      	cmp	r3, #0
  40a852:	d007      	beq.n	40a864 <udp_input+0xd8>
           ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
  40a854:	683b      	ldr	r3, [r7, #0]
  40a856:	6a1b      	ldr	r3, [r3, #32]
  40a858:	685b      	ldr	r3, [r3, #4]
  40a85a:	685a      	ldr	r2, [r3, #4]
  40a85c:	4b73      	ldr	r3, [pc, #460]	; (40aa2c <udp_input+0x2a0>)
  40a85e:	681b      	ldr	r3, [r3, #0]
        if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
  40a860:	429a      	cmp	r2, r3
  40a862:	d17a      	bne.n	40a95a <udp_input+0x1ce>
          pcb = inp->dhcp->pcb;
  40a864:	683b      	ldr	r3, [r7, #0]
  40a866:	6a1b      	ldr	r3, [r3, #32]
  40a868:	685b      	ldr	r3, [r3, #4]
  40a86a:	627b      	str	r3, [r7, #36]	; 0x24
  40a86c:	e075      	b.n	40a95a <udp_input+0x1ce>
      }
    }
  } else
#endif /* LWIP_DHCP */
  {
    prev = NULL;
  40a86e:	2300      	movs	r3, #0
  40a870:	623b      	str	r3, [r7, #32]
    local_match = 0;
  40a872:	2300      	movs	r3, #0
  40a874:	76fb      	strb	r3, [r7, #27]
    uncon_pcb = NULL;
  40a876:	2300      	movs	r3, #0
  40a878:	61fb      	str	r3, [r7, #28]
    /* Iterate through the UDP pcb list for a matching pcb.
     * 'Perfect match' pcbs (connected to the remote port & ip address) are
     * preferred. If no perfect match is found, the first unconnected pcb that
     * matches the local port and ip address gets the datagram. */
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a87a:	4b6d      	ldr	r3, [pc, #436]	; (40aa30 <udp_input+0x2a4>)
  40a87c:	681b      	ldr	r3, [r3, #0]
  40a87e:	627b      	str	r3, [r7, #36]	; 0x24
  40a880:	e061      	b.n	40a946 <udp_input+0x1ba>
      local_match = 0;
  40a882:	2300      	movs	r3, #0
  40a884:	76fb      	strb	r3, [r7, #27]
                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
                   ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
                   ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));

      /* compare PCB local addr+port to UDP destination addr+port */
      if (pcb->local_port == dest) {
  40a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a888:	8a5b      	ldrh	r3, [r3, #18]
  40a88a:	897a      	ldrh	r2, [r7, #10]
  40a88c:	429a      	cmp	r2, r3
  40a88e:	d130      	bne.n	40a8f2 <udp_input+0x166>
        if (
  40a890:	7bfb      	ldrb	r3, [r7, #15]
  40a892:	2b00      	cmp	r3, #0
  40a894:	d106      	bne.n	40a8a4 <udp_input+0x118>
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a898:	2b00      	cmp	r3, #0
  40a89a:	d01d      	beq.n	40a8d8 <udp_input+0x14c>
  40a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a89e:	681b      	ldr	r3, [r3, #0]
  40a8a0:	2b00      	cmp	r3, #0
  40a8a2:	d019      	beq.n	40a8d8 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8a6:	681a      	ldr	r2, [r3, #0]
  40a8a8:	4b5d      	ldr	r3, [pc, #372]	; (40aa20 <udp_input+0x294>)
  40a8aa:	681b      	ldr	r3, [r3, #0]
           (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
  40a8ac:	429a      	cmp	r2, r3
  40a8ae:	d013      	beq.n	40a8d8 <udp_input+0x14c>
           ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
  40a8b0:	7bfb      	ldrb	r3, [r7, #15]
  40a8b2:	2b00      	cmp	r3, #0
  40a8b4:	d01d      	beq.n	40a8f2 <udp_input+0x166>
            (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
             (ip_addr_isany(&pcb->local_ip) ||
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
#else /* IP_SOF_BROADCAST_RECV */
            (broadcast &&
             (ip_addr_isany(&pcb->local_ip) ||
  40a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
            (broadcast &&
  40a8b8:	2b00      	cmp	r3, #0
  40a8ba:	d00d      	beq.n	40a8d8 <udp_input+0x14c>
             (ip_addr_isany(&pcb->local_ip) ||
  40a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8be:	681b      	ldr	r3, [r3, #0]
  40a8c0:	2b00      	cmp	r3, #0
  40a8c2:	d009      	beq.n	40a8d8 <udp_input+0x14c>
              ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
  40a8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8c6:	681a      	ldr	r2, [r3, #0]
  40a8c8:	4b55      	ldr	r3, [pc, #340]	; (40aa20 <udp_input+0x294>)
  40a8ca:	681b      	ldr	r3, [r3, #0]
  40a8cc:	405a      	eors	r2, r3
  40a8ce:	683b      	ldr	r3, [r7, #0]
  40a8d0:	689b      	ldr	r3, [r3, #8]
  40a8d2:	4013      	ands	r3, r2
             (ip_addr_isany(&pcb->local_ip) ||
  40a8d4:	2b00      	cmp	r3, #0
  40a8d6:	d10c      	bne.n	40a8f2 <udp_input+0x166>
#endif /* IP_SOF_BROADCAST_RECV */ 
          local_match = 1;
  40a8d8:	2301      	movs	r3, #1
  40a8da:	76fb      	strb	r3, [r7, #27]
          if ((uncon_pcb == NULL) && 
  40a8dc:	69fb      	ldr	r3, [r7, #28]
  40a8de:	2b00      	cmp	r3, #0
  40a8e0:	d107      	bne.n	40a8f2 <udp_input+0x166>
              ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
  40a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8e4:	7c1b      	ldrb	r3, [r3, #16]
  40a8e6:	f003 0304 	and.w	r3, r3, #4
          if ((uncon_pcb == NULL) && 
  40a8ea:	2b00      	cmp	r3, #0
  40a8ec:	d101      	bne.n	40a8f2 <udp_input+0x166>
            /* the first unconnected matching PCB */
            uncon_pcb = pcb;
  40a8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }
      /* compare PCB remote addr+port to UDP source addr+port */
      if ((local_match != 0) &&
  40a8f2:	7efb      	ldrb	r3, [r7, #27]
  40a8f4:	2b00      	cmp	r3, #0
  40a8f6:	d021      	beq.n	40a93c <udp_input+0x1b0>
          (pcb->remote_port == src) &&
  40a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a8fa:	8a9b      	ldrh	r3, [r3, #20]
      if ((local_match != 0) &&
  40a8fc:	89ba      	ldrh	r2, [r7, #12]
  40a8fe:	429a      	cmp	r2, r3
  40a900:	d11c      	bne.n	40a93c <udp_input+0x1b0>
          (ip_addr_isany(&pcb->remote_ip) ||
  40a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a904:	3304      	adds	r3, #4
          (pcb->remote_port == src) &&
  40a906:	2b00      	cmp	r3, #0
  40a908:	d009      	beq.n	40a91e <udp_input+0x192>
          (ip_addr_isany(&pcb->remote_ip) ||
  40a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a90c:	685b      	ldr	r3, [r3, #4]
  40a90e:	2b00      	cmp	r3, #0
  40a910:	d005      	beq.n	40a91e <udp_input+0x192>
           ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
  40a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a914:	685a      	ldr	r2, [r3, #4]
  40a916:	4b45      	ldr	r3, [pc, #276]	; (40aa2c <udp_input+0x2a0>)
  40a918:	681b      	ldr	r3, [r3, #0]
          (ip_addr_isany(&pcb->remote_ip) ||
  40a91a:	429a      	cmp	r2, r3
  40a91c:	d10e      	bne.n	40a93c <udp_input+0x1b0>
        /* the first fully matching PCB */
        if (prev != NULL) {
  40a91e:	6a3b      	ldr	r3, [r7, #32]
  40a920:	2b00      	cmp	r3, #0
  40a922:	d014      	beq.n	40a94e <udp_input+0x1c2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  40a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a926:	68da      	ldr	r2, [r3, #12]
  40a928:	6a3b      	ldr	r3, [r7, #32]
  40a92a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  40a92c:	4b40      	ldr	r3, [pc, #256]	; (40aa30 <udp_input+0x2a4>)
  40a92e:	681a      	ldr	r2, [r3, #0]
  40a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a932:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
  40a934:	4a3e      	ldr	r2, [pc, #248]	; (40aa30 <udp_input+0x2a4>)
  40a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a938:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  40a93a:	e008      	b.n	40a94e <udp_input+0x1c2>
      }
      prev = pcb;
  40a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a93e:	623b      	str	r3, [r7, #32]
    for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  40a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a942:	68db      	ldr	r3, [r3, #12]
  40a944:	627b      	str	r3, [r7, #36]	; 0x24
  40a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a948:	2b00      	cmp	r3, #0
  40a94a:	d19a      	bne.n	40a882 <udp_input+0xf6>
  40a94c:	e000      	b.n	40a950 <udp_input+0x1c4>
        break;
  40a94e:	bf00      	nop
    }
    /* no fully matching pcb found? then look for an unconnected pcb */
    if (pcb == NULL) {
  40a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a952:	2b00      	cmp	r3, #0
  40a954:	d101      	bne.n	40a95a <udp_input+0x1ce>
      pcb = uncon_pcb;
  40a956:	69fb      	ldr	r3, [r7, #28]
  40a958:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
  40a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a95c:	2b00      	cmp	r3, #0
  40a95e:	d105      	bne.n	40a96c <udp_input+0x1e0>
  40a960:	683b      	ldr	r3, [r7, #0]
  40a962:	685a      	ldr	r2, [r3, #4]
  40a964:	4b2e      	ldr	r3, [pc, #184]	; (40aa20 <udp_input+0x294>)
  40a966:	681b      	ldr	r3, [r3, #0]
  40a968:	429a      	cmp	r2, r3
  40a96a:	d167      	bne.n	40aa3c <udp_input+0x2b0>
#endif /* CHECKSUM_CHECK_UDP */
    } else
#endif /* LWIP_UDPLITE */
    {
#if CHECKSUM_CHECK_UDP
      if (udphdr->chksum != 0) {
  40a96c:	693b      	ldr	r3, [r7, #16]
  40a96e:	88db      	ldrh	r3, [r3, #6]
  40a970:	b29b      	uxth	r3, r3
  40a972:	2b00      	cmp	r3, #0
  40a974:	d00f      	beq.n	40a996 <udp_input+0x20a>
        if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
  40a976:	687b      	ldr	r3, [r7, #4]
  40a978:	891b      	ldrh	r3, [r3, #8]
  40a97a:	9300      	str	r3, [sp, #0]
  40a97c:	2311      	movs	r3, #17
  40a97e:	4a28      	ldr	r2, [pc, #160]	; (40aa20 <udp_input+0x294>)
  40a980:	492a      	ldr	r1, [pc, #168]	; (40aa2c <udp_input+0x2a0>)
  40a982:	6878      	ldr	r0, [r7, #4]
  40a984:	4c2b      	ldr	r4, [pc, #172]	; (40aa34 <udp_input+0x2a8>)
  40a986:	47a0      	blx	r4
  40a988:	4603      	mov	r3, r0
  40a98a:	2b00      	cmp	r3, #0
  40a98c:	d003      	beq.n	40a996 <udp_input+0x20a>
          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                      ("udp_input: UDP datagram discarded due to failing checksum\n"));
          UDP_STATS_INC(udp.chkerr);
          UDP_STATS_INC(udp.drop);
          snmp_inc_udpinerrors();
          pbuf_free(p);
  40a98e:	6878      	ldr	r0, [r7, #4]
  40a990:	4b22      	ldr	r3, [pc, #136]	; (40aa1c <udp_input+0x290>)
  40a992:	4798      	blx	r3
          goto end;
  40a994:	e055      	b.n	40aa42 <udp_input+0x2b6>
        }
      }
#endif /* CHECKSUM_CHECK_UDP */
    }
    if(pbuf_header(p, -UDP_HLEN)) {
  40a996:	f06f 0107 	mvn.w	r1, #7
  40a99a:	6878      	ldr	r0, [r7, #4]
  40a99c:	4b1e      	ldr	r3, [pc, #120]	; (40aa18 <udp_input+0x28c>)
  40a99e:	4798      	blx	r3
  40a9a0:	4603      	mov	r3, r0
  40a9a2:	2b00      	cmp	r3, #0
  40a9a4:	d003      	beq.n	40a9ae <udp_input+0x222>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpinerrors();
      pbuf_free(p);
  40a9a6:	6878      	ldr	r0, [r7, #4]
  40a9a8:	4b1c      	ldr	r3, [pc, #112]	; (40aa1c <udp_input+0x290>)
  40a9aa:	4798      	blx	r3
      goto end;
  40a9ac:	e049      	b.n	40aa42 <udp_input+0x2b6>
    }
    if (pcb != NULL) {
  40a9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a9b0:	2b00      	cmp	r3, #0
  40a9b2:	d012      	beq.n	40a9da <udp_input+0x24e>
          pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  40a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a9b6:	699b      	ldr	r3, [r3, #24]
  40a9b8:	2b00      	cmp	r3, #0
  40a9ba:	d00a      	beq.n	40a9d2 <udp_input+0x246>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  40a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a9be:	699c      	ldr	r4, [r3, #24]
  40a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40a9c2:	69d8      	ldr	r0, [r3, #28]
  40a9c4:	89bb      	ldrh	r3, [r7, #12]
  40a9c6:	9300      	str	r3, [sp, #0]
  40a9c8:	4b18      	ldr	r3, [pc, #96]	; (40aa2c <udp_input+0x2a0>)
  40a9ca:	687a      	ldr	r2, [r7, #4]
  40a9cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
  40a9ce:	47a0      	blx	r4
    if (pcb != NULL) {
  40a9d0:	e037      	b.n	40aa42 <udp_input+0x2b6>
      } else {
        /* no recv function registered? then we have to free the pbuf! */
        pbuf_free(p);
  40a9d2:	6878      	ldr	r0, [r7, #4]
  40a9d4:	4b11      	ldr	r3, [pc, #68]	; (40aa1c <udp_input+0x290>)
  40a9d6:	4798      	blx	r3
        goto end;
  40a9d8:	e033      	b.n	40aa42 <udp_input+0x2b6>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));

#if LWIP_ICMP
      /* No match was found, send ICMP destination port unreachable unless
         destination address was broadcast/multicast. */
      if (!broadcast &&
  40a9da:	7bfb      	ldrb	r3, [r7, #15]
  40a9dc:	2b00      	cmp	r3, #0
  40a9de:	d116      	bne.n	40aa0e <udp_input+0x282>
          !ip_addr_ismulticast(&current_iphdr_dest)) {
  40a9e0:	4b0f      	ldr	r3, [pc, #60]	; (40aa20 <udp_input+0x294>)
  40a9e2:	681b      	ldr	r3, [r3, #0]
  40a9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!broadcast &&
  40a9e8:	2be0      	cmp	r3, #224	; 0xe0
  40a9ea:	d010      	beq.n	40aa0e <udp_input+0x282>
        /* move payload pointer back to ip header */
        pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
  40a9ec:	697b      	ldr	r3, [r7, #20]
  40a9ee:	781b      	ldrb	r3, [r3, #0]
  40a9f0:	f003 030f 	and.w	r3, r3, #15
  40a9f4:	3302      	adds	r3, #2
  40a9f6:	b29b      	uxth	r3, r3
  40a9f8:	009b      	lsls	r3, r3, #2
  40a9fa:	b29b      	uxth	r3, r3
  40a9fc:	b21b      	sxth	r3, r3
  40a9fe:	4619      	mov	r1, r3
  40aa00:	6878      	ldr	r0, [r7, #4]
  40aa02:	4b05      	ldr	r3, [pc, #20]	; (40aa18 <udp_input+0x28c>)
  40aa04:	4798      	blx	r3
        LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
        icmp_dest_unreach(p, ICMP_DUR_PORT);
  40aa06:	2103      	movs	r1, #3
  40aa08:	6878      	ldr	r0, [r7, #4]
  40aa0a:	4b0b      	ldr	r3, [pc, #44]	; (40aa38 <udp_input+0x2ac>)
  40aa0c:	4798      	blx	r3
      }
#endif /* LWIP_ICMP */
      UDP_STATS_INC(udp.proterr);
      UDP_STATS_INC(udp.drop);
      snmp_inc_udpnoports();
      pbuf_free(p);
  40aa0e:	6878      	ldr	r0, [r7, #4]
  40aa10:	4b02      	ldr	r3, [pc, #8]	; (40aa1c <udp_input+0x290>)
  40aa12:	4798      	blx	r3
    if (pcb != NULL) {
  40aa14:	e015      	b.n	40aa42 <udp_input+0x2b6>
  40aa16:	bf00      	nop
  40aa18:	00405aa5 	.word	0x00405aa5
  40aa1c:	00405b81 	.word	0x00405b81
  40aa20:	20403974 	.word	0x20403974
  40aa24:	004043d1 	.word	0x004043d1
  40aa28:	00401fc5 	.word	0x00401fc5
  40aa2c:	2040396c 	.word	0x2040396c
  40aa30:	204049bc 	.word	0x204049bc
  40aa34:	00403d09 	.word	0x00403d09
  40aa38:	00403b45 	.word	0x00403b45
    }
  } else {
    pbuf_free(p);
  40aa3c:	6878      	ldr	r0, [r7, #4]
  40aa3e:	4b03      	ldr	r3, [pc, #12]	; (40aa4c <udp_input+0x2c0>)
  40aa40:	4798      	blx	r3
  }
end:
  PERF_STOP("udp_input");
}
  40aa42:	bf00      	nop
  40aa44:	372c      	adds	r7, #44	; 0x2c
  40aa46:	46bd      	mov	sp, r7
  40aa48:	bd90      	pop	{r4, r7, pc}
  40aa4a:	bf00      	nop
  40aa4c:	00405b81 	.word	0x00405b81

0040aa50 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  40aa50:	b590      	push	{r4, r7, lr}
  40aa52:	b08d      	sub	sp, #52	; 0x34
  40aa54:	af04      	add	r7, sp, #16
  40aa56:	60f8      	str	r0, [r7, #12]
  40aa58:	60b9      	str	r1, [r7, #8]
  40aa5a:	607a      	str	r2, [r7, #4]
  40aa5c:	807b      	strh	r3, [r7, #2]
    return ERR_VAL;
  }
#endif /* IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  40aa5e:	68fb      	ldr	r3, [r7, #12]
  40aa60:	8a5b      	ldrh	r3, [r3, #18]
  40aa62:	2b00      	cmp	r3, #0
  40aa64:	d10f      	bne.n	40aa86 <udp_sendto_if+0x36>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40aa66:	68f9      	ldr	r1, [r7, #12]
  40aa68:	68fb      	ldr	r3, [r7, #12]
  40aa6a:	8a5b      	ldrh	r3, [r3, #18]
  40aa6c:	461a      	mov	r2, r3
  40aa6e:	68f8      	ldr	r0, [r7, #12]
  40aa70:	4b51      	ldr	r3, [pc, #324]	; (40abb8 <udp_sendto_if+0x168>)
  40aa72:	4798      	blx	r3
  40aa74:	4603      	mov	r3, r0
  40aa76:	757b      	strb	r3, [r7, #21]
    if (err != ERR_OK) {
  40aa78:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40aa7c:	2b00      	cmp	r3, #0
  40aa7e:	d002      	beq.n	40aa86 <udp_sendto_if+0x36>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  40aa80:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40aa84:	e094      	b.n	40abb0 <udp_sendto_if+0x160>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  40aa86:	2108      	movs	r1, #8
  40aa88:	68b8      	ldr	r0, [r7, #8]
  40aa8a:	4b4c      	ldr	r3, [pc, #304]	; (40abbc <udp_sendto_if+0x16c>)
  40aa8c:	4798      	blx	r3
  40aa8e:	4603      	mov	r3, r0
  40aa90:	2b00      	cmp	r3, #0
  40aa92:	d014      	beq.n	40aabe <udp_sendto_if+0x6e>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  40aa94:	2200      	movs	r2, #0
  40aa96:	2108      	movs	r1, #8
  40aa98:	2001      	movs	r0, #1
  40aa9a:	4b49      	ldr	r3, [pc, #292]	; (40abc0 <udp_sendto_if+0x170>)
  40aa9c:	4798      	blx	r3
  40aa9e:	61b8      	str	r0, [r7, #24]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  40aaa0:	69bb      	ldr	r3, [r7, #24]
  40aaa2:	2b00      	cmp	r3, #0
  40aaa4:	d102      	bne.n	40aaac <udp_sendto_if+0x5c>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  40aaa6:	f04f 33ff 	mov.w	r3, #4294967295
  40aaaa:	e081      	b.n	40abb0 <udp_sendto_if+0x160>
    }
    if (p->tot_len != 0) {
  40aaac:	68bb      	ldr	r3, [r7, #8]
  40aaae:	891b      	ldrh	r3, [r3, #8]
  40aab0:	2b00      	cmp	r3, #0
  40aab2:	d006      	beq.n	40aac2 <udp_sendto_if+0x72>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  40aab4:	68b9      	ldr	r1, [r7, #8]
  40aab6:	69b8      	ldr	r0, [r7, #24]
  40aab8:	4b42      	ldr	r3, [pc, #264]	; (40abc4 <udp_sendto_if+0x174>)
  40aaba:	4798      	blx	r3
  40aabc:	e001      	b.n	40aac2 <udp_sendto_if+0x72>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  40aabe:	68bb      	ldr	r3, [r7, #8]
  40aac0:	61bb      	str	r3, [r7, #24]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  40aac2:	69bb      	ldr	r3, [r7, #24]
  40aac4:	685b      	ldr	r3, [r3, #4]
  40aac6:	613b      	str	r3, [r7, #16]
  udphdr->src = htons(pcb->local_port);
  40aac8:	68fb      	ldr	r3, [r7, #12]
  40aaca:	8a5b      	ldrh	r3, [r3, #18]
  40aacc:	4618      	mov	r0, r3
  40aace:	4b3e      	ldr	r3, [pc, #248]	; (40abc8 <udp_sendto_if+0x178>)
  40aad0:	4798      	blx	r3
  40aad2:	4603      	mov	r3, r0
  40aad4:	461a      	mov	r2, r3
  40aad6:	693b      	ldr	r3, [r7, #16]
  40aad8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = htons(dst_port);
  40aada:	887b      	ldrh	r3, [r7, #2]
  40aadc:	4618      	mov	r0, r3
  40aade:	4b3a      	ldr	r3, [pc, #232]	; (40abc8 <udp_sendto_if+0x178>)
  40aae0:	4798      	blx	r3
  40aae2:	4603      	mov	r3, r0
  40aae4:	461a      	mov	r2, r3
  40aae6:	693b      	ldr	r3, [r7, #16]
  40aae8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000; 
  40aaea:	693b      	ldr	r3, [r7, #16]
  40aaec:	2200      	movs	r2, #0
  40aaee:	719a      	strb	r2, [r3, #6]
  40aaf0:	2200      	movs	r2, #0
  40aaf2:	71da      	strb	r2, [r3, #7]
  }
#endif /* LWIP_IGMP */


  /* PCB local address is IP_ANY_ADDR? */
  if (ip_addr_isany(&pcb->local_ip)) {
  40aaf4:	68fb      	ldr	r3, [r7, #12]
  40aaf6:	2b00      	cmp	r3, #0
  40aaf8:	d003      	beq.n	40ab02 <udp_sendto_if+0xb2>
  40aafa:	68fb      	ldr	r3, [r7, #12]
  40aafc:	681b      	ldr	r3, [r3, #0]
  40aafe:	2b00      	cmp	r3, #0
  40ab00:	d103      	bne.n	40ab0a <udp_sendto_if+0xba>
    /* use outgoing network interface IP address as source address */
    src_ip = &(netif->ip_addr);
  40ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ab04:	3304      	adds	r3, #4
  40ab06:	61fb      	str	r3, [r7, #28]
  40ab08:	e013      	b.n	40ab32 <udp_sendto_if+0xe2>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
  40ab0a:	68fb      	ldr	r3, [r7, #12]
  40ab0c:	681a      	ldr	r2, [r3, #0]
  40ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40ab10:	685b      	ldr	r3, [r3, #4]
  40ab12:	429a      	cmp	r2, r3
  40ab14:	d00b      	beq.n	40ab2e <udp_sendto_if+0xde>
      /* local_ip doesn't match, drop the packet */
      if (q != p) {
  40ab16:	69ba      	ldr	r2, [r7, #24]
  40ab18:	68bb      	ldr	r3, [r7, #8]
  40ab1a:	429a      	cmp	r2, r3
  40ab1c:	d004      	beq.n	40ab28 <udp_sendto_if+0xd8>
        /* free the header pbuf */
        pbuf_free(q);
  40ab1e:	69b8      	ldr	r0, [r7, #24]
  40ab20:	4b2a      	ldr	r3, [pc, #168]	; (40abcc <udp_sendto_if+0x17c>)
  40ab22:	4798      	blx	r3
        q = NULL;
  40ab24:	2300      	movs	r3, #0
  40ab26:	61bb      	str	r3, [r7, #24]
        /* p is still referenced by the caller, and will live on */
      }
      return ERR_VAL;
  40ab28:	f06f 0305 	mvn.w	r3, #5
  40ab2c:	e040      	b.n	40abb0 <udp_sendto_if+0x160>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &(pcb->local_ip);
  40ab2e:	68fb      	ldr	r3, [r7, #12]
  40ab30:	61fb      	str	r3, [r7, #28]
    NETIF_SET_HWADDRHINT(netif, NULL);
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = htons(q->tot_len);
  40ab32:	69bb      	ldr	r3, [r7, #24]
  40ab34:	891b      	ldrh	r3, [r3, #8]
  40ab36:	4618      	mov	r0, r3
  40ab38:	4b23      	ldr	r3, [pc, #140]	; (40abc8 <udp_sendto_if+0x178>)
  40ab3a:	4798      	blx	r3
  40ab3c:	4603      	mov	r3, r0
  40ab3e:	461a      	mov	r2, r3
  40ab40:	693b      	ldr	r3, [r7, #16]
  40ab42:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  40ab44:	68fb      	ldr	r3, [r7, #12]
  40ab46:	7c1b      	ldrb	r3, [r3, #16]
  40ab48:	f003 0301 	and.w	r3, r3, #1
  40ab4c:	2b00      	cmp	r3, #0
  40ab4e:	d113      	bne.n	40ab78 <udp_sendto_if+0x128>
        acc = udpchksum + (u16_t)~(chksum);
        udpchksum = FOLD_U32T(acc);
      } else
#endif /* LWIP_CHECKSUM_ON_COPY */
      {
        udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
  40ab50:	69bb      	ldr	r3, [r7, #24]
  40ab52:	891b      	ldrh	r3, [r3, #8]
  40ab54:	9300      	str	r3, [sp, #0]
  40ab56:	2311      	movs	r3, #17
  40ab58:	687a      	ldr	r2, [r7, #4]
  40ab5a:	69f9      	ldr	r1, [r7, #28]
  40ab5c:	69b8      	ldr	r0, [r7, #24]
  40ab5e:	4c1c      	ldr	r4, [pc, #112]	; (40abd0 <udp_sendto_if+0x180>)
  40ab60:	47a0      	blx	r4
  40ab62:	4603      	mov	r3, r0
  40ab64:	82fb      	strh	r3, [r7, #22]
      }

      /* chksum zero must become 0xffff, as zero means 'no checksum' */
      if (udpchksum == 0x0000) {
  40ab66:	8afb      	ldrh	r3, [r7, #22]
  40ab68:	2b00      	cmp	r3, #0
  40ab6a:	d102      	bne.n	40ab72 <udp_sendto_if+0x122>
        udpchksum = 0xffff;
  40ab6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  40ab70:	82fb      	strh	r3, [r7, #22]
      }
      udphdr->chksum = udpchksum;
  40ab72:	693b      	ldr	r3, [r7, #16]
  40ab74:	8afa      	ldrh	r2, [r7, #22]
  40ab76:	80da      	strh	r2, [r3, #6]
#endif /* CHECKSUM_GEN_UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
    /* output to IP */
    NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
    err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
  40ab78:	68fb      	ldr	r3, [r7, #12]
  40ab7a:	7a99      	ldrb	r1, [r3, #10]
  40ab7c:	68fb      	ldr	r3, [r7, #12]
  40ab7e:	7a5b      	ldrb	r3, [r3, #9]
  40ab80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40ab82:	9202      	str	r2, [sp, #8]
  40ab84:	2211      	movs	r2, #17
  40ab86:	9201      	str	r2, [sp, #4]
  40ab88:	9300      	str	r3, [sp, #0]
  40ab8a:	460b      	mov	r3, r1
  40ab8c:	687a      	ldr	r2, [r7, #4]
  40ab8e:	69f9      	ldr	r1, [r7, #28]
  40ab90:	69b8      	ldr	r0, [r7, #24]
  40ab92:	4c10      	ldr	r4, [pc, #64]	; (40abd4 <udp_sendto_if+0x184>)
  40ab94:	47a0      	blx	r4
  40ab96:	4603      	mov	r3, r0
  40ab98:	757b      	strb	r3, [r7, #21]
  }
  /* TODO: must this be increased even if error occured? */
  snmp_inc_udpoutdatagrams();

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  40ab9a:	69ba      	ldr	r2, [r7, #24]
  40ab9c:	68bb      	ldr	r3, [r7, #8]
  40ab9e:	429a      	cmp	r2, r3
  40aba0:	d004      	beq.n	40abac <udp_sendto_if+0x15c>
    /* free the header pbuf */
    pbuf_free(q);
  40aba2:	69b8      	ldr	r0, [r7, #24]
  40aba4:	4b09      	ldr	r3, [pc, #36]	; (40abcc <udp_sendto_if+0x17c>)
  40aba6:	4798      	blx	r3
    q = NULL;
  40aba8:	2300      	movs	r3, #0
  40abaa:	61bb      	str	r3, [r7, #24]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
  40abac:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
  40abb0:	4618      	mov	r0, r3
  40abb2:	3724      	adds	r7, #36	; 0x24
  40abb4:	46bd      	mov	sp, r7
  40abb6:	bd90      	pop	{r4, r7, pc}
  40abb8:	0040abd9 	.word	0x0040abd9
  40abbc:	00405aa5 	.word	0x00405aa5
  40abc0:	004057dd 	.word	0x004057dd
  40abc4:	00405cc5 	.word	0x00405cc5
  40abc8:	00401f99 	.word	0x00401f99
  40abcc:	00405b81 	.word	0x00405b81
  40abd0:	00403d09 	.word	0x00403d09
  40abd4:	004041c9 	.word	0x004041c9

0040abd8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40abd8:	b580      	push	{r7, lr}
  40abda:	b086      	sub	sp, #24
  40abdc:	af00      	add	r7, sp, #0
  40abde:	60f8      	str	r0, [r7, #12]
  40abe0:	60b9      	str	r1, [r7, #8]
  40abe2:	4613      	mov	r3, r2
  40abe4:	80fb      	strh	r3, [r7, #6]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  40abe6:	2300      	movs	r3, #0
  40abe8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40abea:	4b2a      	ldr	r3, [pc, #168]	; (40ac94 <udp_bind+0xbc>)
  40abec:	681b      	ldr	r3, [r3, #0]
  40abee:	617b      	str	r3, [r7, #20]
  40abf0:	e025      	b.n	40ac3e <udp_bind+0x66>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  40abf2:	68fa      	ldr	r2, [r7, #12]
  40abf4:	697b      	ldr	r3, [r7, #20]
  40abf6:	429a      	cmp	r2, r3
  40abf8:	d102      	bne.n	40ac00 <udp_bind+0x28>
      /* pcb may occur at most once in active list */
      LWIP_ASSERT("rebind == 0", rebind == 0);
      /* pcb already in list, just rebind */
      rebind = 1;
  40abfa:	2301      	movs	r3, #1
  40abfc:	74fb      	strb	r3, [r7, #19]
  40abfe:	e01b      	b.n	40ac38 <udp_bind+0x60>
             !ip_get_option(ipcb, SOF_REUSEADDR)) {
#else /* SO_REUSE */
    /* port matches that of PCB in list and REUSEADDR not set -> reject */
    else {
#endif /* SO_REUSE */
      if ((ipcb->local_port == port) &&
  40ac00:	697b      	ldr	r3, [r7, #20]
  40ac02:	8a5b      	ldrh	r3, [r3, #18]
  40ac04:	88fa      	ldrh	r2, [r7, #6]
  40ac06:	429a      	cmp	r2, r3
  40ac08:	d116      	bne.n	40ac38 <udp_bind+0x60>
          /* IP address matches, or one is IP_ADDR_ANY? */
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40ac0a:	697b      	ldr	r3, [r7, #20]
      if ((ipcb->local_port == port) &&
  40ac0c:	2b00      	cmp	r3, #0
  40ac0e:	d010      	beq.n	40ac32 <udp_bind+0x5a>
          (ip_addr_isany(&(ipcb->local_ip)) ||
  40ac10:	697b      	ldr	r3, [r7, #20]
  40ac12:	681b      	ldr	r3, [r3, #0]
  40ac14:	2b00      	cmp	r3, #0
  40ac16:	d00c      	beq.n	40ac32 <udp_bind+0x5a>
  40ac18:	68bb      	ldr	r3, [r7, #8]
  40ac1a:	2b00      	cmp	r3, #0
  40ac1c:	d009      	beq.n	40ac32 <udp_bind+0x5a>
           ip_addr_isany(ipaddr) ||
  40ac1e:	68bb      	ldr	r3, [r7, #8]
  40ac20:	681b      	ldr	r3, [r3, #0]
  40ac22:	2b00      	cmp	r3, #0
  40ac24:	d005      	beq.n	40ac32 <udp_bind+0x5a>
           ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
  40ac26:	697b      	ldr	r3, [r7, #20]
  40ac28:	681a      	ldr	r2, [r3, #0]
  40ac2a:	68bb      	ldr	r3, [r7, #8]
  40ac2c:	681b      	ldr	r3, [r3, #0]
           ip_addr_isany(ipaddr) ||
  40ac2e:	429a      	cmp	r2, r3
  40ac30:	d102      	bne.n	40ac38 <udp_bind+0x60>
        /* other PCB already binds to this local IP and port */
        LWIP_DEBUGF(UDP_DEBUG,
                    ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
        return ERR_USE;
  40ac32:	f06f 0307 	mvn.w	r3, #7
  40ac36:	e029      	b.n	40ac8c <udp_bind+0xb4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40ac38:	697b      	ldr	r3, [r7, #20]
  40ac3a:	68db      	ldr	r3, [r3, #12]
  40ac3c:	617b      	str	r3, [r7, #20]
  40ac3e:	697b      	ldr	r3, [r7, #20]
  40ac40:	2b00      	cmp	r3, #0
  40ac42:	d1d6      	bne.n	40abf2 <udp_bind+0x1a>
      }
    }
  }

  ip_addr_set(&pcb->local_ip, ipaddr);
  40ac44:	68bb      	ldr	r3, [r7, #8]
  40ac46:	2b00      	cmp	r3, #0
  40ac48:	d002      	beq.n	40ac50 <udp_bind+0x78>
  40ac4a:	68bb      	ldr	r3, [r7, #8]
  40ac4c:	681b      	ldr	r3, [r3, #0]
  40ac4e:	e000      	b.n	40ac52 <udp_bind+0x7a>
  40ac50:	2300      	movs	r3, #0
  40ac52:	68fa      	ldr	r2, [r7, #12]
  40ac54:	6013      	str	r3, [r2, #0]

  /* no port specified? */
  if (port == 0) {
  40ac56:	88fb      	ldrh	r3, [r7, #6]
  40ac58:	2b00      	cmp	r3, #0
  40ac5a:	d109      	bne.n	40ac70 <udp_bind+0x98>
    port = udp_new_port();
  40ac5c:	4b0e      	ldr	r3, [pc, #56]	; (40ac98 <udp_bind+0xc0>)
  40ac5e:	4798      	blx	r3
  40ac60:	4603      	mov	r3, r0
  40ac62:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
  40ac64:	88fb      	ldrh	r3, [r7, #6]
  40ac66:	2b00      	cmp	r3, #0
  40ac68:	d102      	bne.n	40ac70 <udp_bind+0x98>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  40ac6a:	f06f 0307 	mvn.w	r3, #7
  40ac6e:	e00d      	b.n	40ac8c <udp_bind+0xb4>
    }
  }
  pcb->local_port = port;
  40ac70:	68fb      	ldr	r3, [r7, #12]
  40ac72:	88fa      	ldrh	r2, [r7, #6]
  40ac74:	825a      	strh	r2, [r3, #18]
  snmp_insert_udpidx_tree(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  40ac76:	7cfb      	ldrb	r3, [r7, #19]
  40ac78:	2b00      	cmp	r3, #0
  40ac7a:	d106      	bne.n	40ac8a <udp_bind+0xb2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  40ac7c:	4b05      	ldr	r3, [pc, #20]	; (40ac94 <udp_bind+0xbc>)
  40ac7e:	681a      	ldr	r2, [r3, #0]
  40ac80:	68fb      	ldr	r3, [r7, #12]
  40ac82:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
  40ac84:	4a03      	ldr	r2, [pc, #12]	; (40ac94 <udp_bind+0xbc>)
  40ac86:	68fb      	ldr	r3, [r7, #12]
  40ac88:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
              ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));
  return ERR_OK;
  40ac8a:	2300      	movs	r3, #0
}
  40ac8c:	4618      	mov	r0, r3
  40ac8e:	3718      	adds	r7, #24
  40ac90:	46bd      	mov	sp, r7
  40ac92:	bd80      	pop	{r7, pc}
  40ac94:	204049bc 	.word	0x204049bc
  40ac98:	0040a71d 	.word	0x0040a71d

0040ac9c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
{
  40ac9c:	b580      	push	{r7, lr}
  40ac9e:	b086      	sub	sp, #24
  40aca0:	af00      	add	r7, sp, #0
  40aca2:	60f8      	str	r0, [r7, #12]
  40aca4:	60b9      	str	r1, [r7, #8]
  40aca6:	4613      	mov	r3, r2
  40aca8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if (pcb->local_port == 0) {
  40acaa:	68fb      	ldr	r3, [r7, #12]
  40acac:	8a5b      	ldrh	r3, [r3, #18]
  40acae:	2b00      	cmp	r3, #0
  40acb0:	d10f      	bne.n	40acd2 <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  40acb2:	68f9      	ldr	r1, [r7, #12]
  40acb4:	68fb      	ldr	r3, [r7, #12]
  40acb6:	8a5b      	ldrh	r3, [r3, #18]
  40acb8:	461a      	mov	r2, r3
  40acba:	68f8      	ldr	r0, [r7, #12]
  40acbc:	4b1c      	ldr	r3, [pc, #112]	; (40ad30 <udp_connect+0x94>)
  40acbe:	4798      	blx	r3
  40acc0:	4603      	mov	r3, r0
  40acc2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
  40acc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40acc8:	2b00      	cmp	r3, #0
  40acca:	d002      	beq.n	40acd2 <udp_connect+0x36>
      return err;
  40accc:	f997 3013 	ldrsb.w	r3, [r7, #19]
  40acd0:	e02a      	b.n	40ad28 <udp_connect+0x8c>
    }
  }

  ip_addr_set(&pcb->remote_ip, ipaddr);
  40acd2:	68bb      	ldr	r3, [r7, #8]
  40acd4:	2b00      	cmp	r3, #0
  40acd6:	d002      	beq.n	40acde <udp_connect+0x42>
  40acd8:	68bb      	ldr	r3, [r7, #8]
  40acda:	681b      	ldr	r3, [r3, #0]
  40acdc:	e000      	b.n	40ace0 <udp_connect+0x44>
  40acde:	2300      	movs	r3, #0
  40ace0:	68fa      	ldr	r2, [r7, #12]
  40ace2:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
  40ace4:	68fb      	ldr	r3, [r7, #12]
  40ace6:	88fa      	ldrh	r2, [r7, #6]
  40ace8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  40acea:	68fb      	ldr	r3, [r7, #12]
  40acec:	7c1b      	ldrb	r3, [r3, #16]
  40acee:	f043 0304 	orr.w	r3, r3, #4
  40acf2:	b2da      	uxtb	r2, r3
  40acf4:	68fb      	ldr	r3, [r7, #12]
  40acf6:	741a      	strb	r2, [r3, #16]
               ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
               ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
               pcb->local_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40acf8:	4b0e      	ldr	r3, [pc, #56]	; (40ad34 <udp_connect+0x98>)
  40acfa:	681b      	ldr	r3, [r3, #0]
  40acfc:	617b      	str	r3, [r7, #20]
  40acfe:	e008      	b.n	40ad12 <udp_connect+0x76>
    if (pcb == ipcb) {
  40ad00:	68fa      	ldr	r2, [r7, #12]
  40ad02:	697b      	ldr	r3, [r7, #20]
  40ad04:	429a      	cmp	r2, r3
  40ad06:	d101      	bne.n	40ad0c <udp_connect+0x70>
      /* already on the list, just return */
      return ERR_OK;
  40ad08:	2300      	movs	r3, #0
  40ad0a:	e00d      	b.n	40ad28 <udp_connect+0x8c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  40ad0c:	697b      	ldr	r3, [r7, #20]
  40ad0e:	68db      	ldr	r3, [r3, #12]
  40ad10:	617b      	str	r3, [r7, #20]
  40ad12:	697b      	ldr	r3, [r7, #20]
  40ad14:	2b00      	cmp	r3, #0
  40ad16:	d1f3      	bne.n	40ad00 <udp_connect+0x64>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  40ad18:	4b06      	ldr	r3, [pc, #24]	; (40ad34 <udp_connect+0x98>)
  40ad1a:	681a      	ldr	r2, [r3, #0]
  40ad1c:	68fb      	ldr	r3, [r7, #12]
  40ad1e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
  40ad20:	4a04      	ldr	r2, [pc, #16]	; (40ad34 <udp_connect+0x98>)
  40ad22:	68fb      	ldr	r3, [r7, #12]
  40ad24:	6013      	str	r3, [r2, #0]
  return ERR_OK;
  40ad26:	2300      	movs	r3, #0
}
  40ad28:	4618      	mov	r0, r3
  40ad2a:	3718      	adds	r7, #24
  40ad2c:	46bd      	mov	sp, r7
  40ad2e:	bd80      	pop	{r7, pc}
  40ad30:	0040abd9 	.word	0x0040abd9
  40ad34:	204049bc 	.word	0x204049bc

0040ad38 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  40ad38:	b480      	push	{r7}
  40ad3a:	b085      	sub	sp, #20
  40ad3c:	af00      	add	r7, sp, #0
  40ad3e:	60f8      	str	r0, [r7, #12]
  40ad40:	60b9      	str	r1, [r7, #8]
  40ad42:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  40ad44:	68fb      	ldr	r3, [r7, #12]
  40ad46:	68ba      	ldr	r2, [r7, #8]
  40ad48:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
  40ad4a:	68fb      	ldr	r3, [r7, #12]
  40ad4c:	687a      	ldr	r2, [r7, #4]
  40ad4e:	61da      	str	r2, [r3, #28]
}
  40ad50:	bf00      	nop
  40ad52:	3714      	adds	r7, #20
  40ad54:	46bd      	mov	sp, r7
  40ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
  40ad5a:	4770      	bx	lr

0040ad5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  40ad5c:	b580      	push	{r7, lr}
  40ad5e:	b084      	sub	sp, #16
  40ad60:	af00      	add	r7, sp, #0
  40ad62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  snmp_delete_udpidx_tree(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  40ad64:	4b14      	ldr	r3, [pc, #80]	; (40adb8 <udp_remove+0x5c>)
  40ad66:	681a      	ldr	r2, [r3, #0]
  40ad68:	687b      	ldr	r3, [r7, #4]
  40ad6a:	429a      	cmp	r2, r3
  40ad6c:	d105      	bne.n	40ad7a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  40ad6e:	4b12      	ldr	r3, [pc, #72]	; (40adb8 <udp_remove+0x5c>)
  40ad70:	681b      	ldr	r3, [r3, #0]
  40ad72:	68db      	ldr	r3, [r3, #12]
  40ad74:	4a10      	ldr	r2, [pc, #64]	; (40adb8 <udp_remove+0x5c>)
  40ad76:	6013      	str	r3, [r2, #0]
  40ad78:	e016      	b.n	40ada8 <udp_remove+0x4c>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40ad7a:	4b0f      	ldr	r3, [pc, #60]	; (40adb8 <udp_remove+0x5c>)
  40ad7c:	681b      	ldr	r3, [r3, #0]
  40ad7e:	60fb      	str	r3, [r7, #12]
  40ad80:	e00f      	b.n	40ada2 <udp_remove+0x46>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  40ad82:	68fb      	ldr	r3, [r7, #12]
  40ad84:	68db      	ldr	r3, [r3, #12]
  40ad86:	2b00      	cmp	r3, #0
  40ad88:	d008      	beq.n	40ad9c <udp_remove+0x40>
  40ad8a:	68fb      	ldr	r3, [r7, #12]
  40ad8c:	68da      	ldr	r2, [r3, #12]
  40ad8e:	687b      	ldr	r3, [r7, #4]
  40ad90:	429a      	cmp	r2, r3
  40ad92:	d103      	bne.n	40ad9c <udp_remove+0x40>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  40ad94:	687b      	ldr	r3, [r7, #4]
  40ad96:	68da      	ldr	r2, [r3, #12]
  40ad98:	68fb      	ldr	r3, [r7, #12]
  40ad9a:	60da      	str	r2, [r3, #12]
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  40ad9c:	68fb      	ldr	r3, [r7, #12]
  40ad9e:	68db      	ldr	r3, [r3, #12]
  40ada0:	60fb      	str	r3, [r7, #12]
  40ada2:	68fb      	ldr	r3, [r7, #12]
  40ada4:	2b00      	cmp	r3, #0
  40ada6:	d1ec      	bne.n	40ad82 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  40ada8:	6879      	ldr	r1, [r7, #4]
  40adaa:	2000      	movs	r0, #0
  40adac:	4b03      	ldr	r3, [pc, #12]	; (40adbc <udp_remove+0x60>)
  40adae:	4798      	blx	r3
}
  40adb0:	bf00      	nop
  40adb2:	3710      	adds	r7, #16
  40adb4:	46bd      	mov	sp, r7
  40adb6:	bd80      	pop	{r7, pc}
  40adb8:	204049bc 	.word	0x204049bc
  40adbc:	004054e5 	.word	0x004054e5

0040adc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  40adc0:	b580      	push	{r7, lr}
  40adc2:	b082      	sub	sp, #8
  40adc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  40adc6:	2000      	movs	r0, #0
  40adc8:	4b09      	ldr	r3, [pc, #36]	; (40adf0 <udp_new+0x30>)
  40adca:	4798      	blx	r3
  40adcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  40adce:	687b      	ldr	r3, [r7, #4]
  40add0:	2b00      	cmp	r3, #0
  40add2:	d007      	beq.n	40ade4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  40add4:	2220      	movs	r2, #32
  40add6:	2100      	movs	r1, #0
  40add8:	6878      	ldr	r0, [r7, #4]
  40adda:	4b06      	ldr	r3, [pc, #24]	; (40adf4 <udp_new+0x34>)
  40addc:	4798      	blx	r3
    pcb->ttl = UDP_TTL;
  40adde:	687b      	ldr	r3, [r7, #4]
  40ade0:	22ff      	movs	r2, #255	; 0xff
  40ade2:	729a      	strb	r2, [r3, #10]
  }
  return pcb;
  40ade4:	687b      	ldr	r3, [r7, #4]
}
  40ade6:	4618      	mov	r0, r3
  40ade8:	3708      	adds	r7, #8
  40adea:	46bd      	mov	sp, r7
  40adec:	bd80      	pop	{r7, pc}
  40adee:	bf00      	nop
  40adf0:	004054a5 	.word	0x004054a5
  40adf4:	0040cead 	.word	0x0040cead

0040adf8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  40adf8:	b580      	push	{r7, lr}
  40adfa:	b082      	sub	sp, #8
  40adfc:	af00      	add	r7, sp, #0
  40adfe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  40ae00:	4915      	ldr	r1, [pc, #84]	; (40ae58 <etharp_free_entry+0x60>)
  40ae02:	687a      	ldr	r2, [r7, #4]
  40ae04:	4613      	mov	r3, r2
  40ae06:	009b      	lsls	r3, r3, #2
  40ae08:	4413      	add	r3, r2
  40ae0a:	009b      	lsls	r3, r3, #2
  40ae0c:	440b      	add	r3, r1
  40ae0e:	681b      	ldr	r3, [r3, #0]
  40ae10:	2b00      	cmp	r3, #0
  40ae12:	d013      	beq.n	40ae3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  40ae14:	4910      	ldr	r1, [pc, #64]	; (40ae58 <etharp_free_entry+0x60>)
  40ae16:	687a      	ldr	r2, [r7, #4]
  40ae18:	4613      	mov	r3, r2
  40ae1a:	009b      	lsls	r3, r3, #2
  40ae1c:	4413      	add	r3, r2
  40ae1e:	009b      	lsls	r3, r3, #2
  40ae20:	440b      	add	r3, r1
  40ae22:	681b      	ldr	r3, [r3, #0]
  40ae24:	4618      	mov	r0, r3
  40ae26:	4b0d      	ldr	r3, [pc, #52]	; (40ae5c <etharp_free_entry+0x64>)
  40ae28:	4798      	blx	r3
    arp_table[i].q = NULL;
  40ae2a:	490b      	ldr	r1, [pc, #44]	; (40ae58 <etharp_free_entry+0x60>)
  40ae2c:	687a      	ldr	r2, [r7, #4]
  40ae2e:	4613      	mov	r3, r2
  40ae30:	009b      	lsls	r3, r3, #2
  40ae32:	4413      	add	r3, r2
  40ae34:	009b      	lsls	r3, r3, #2
  40ae36:	440b      	add	r3, r1
  40ae38:	2200      	movs	r2, #0
  40ae3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  40ae3c:	4906      	ldr	r1, [pc, #24]	; (40ae58 <etharp_free_entry+0x60>)
  40ae3e:	687a      	ldr	r2, [r7, #4]
  40ae40:	4613      	mov	r3, r2
  40ae42:	009b      	lsls	r3, r3, #2
  40ae44:	4413      	add	r3, r2
  40ae46:	009b      	lsls	r3, r3, #2
  40ae48:	440b      	add	r3, r1
  40ae4a:	3312      	adds	r3, #18
  40ae4c:	2200      	movs	r2, #0
  40ae4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  40ae50:	bf00      	nop
  40ae52:	3708      	adds	r7, #8
  40ae54:	46bd      	mov	sp, r7
  40ae56:	bd80      	pop	{r7, pc}
  40ae58:	204025fc 	.word	0x204025fc
  40ae5c:	00405b81 	.word	0x00405b81

0040ae60 <etharp_tmr>:
 * This function should be called every ETHARP_TMR_INTERVAL milliseconds (5 seconds),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  40ae60:	b580      	push	{r7, lr}
  40ae62:	b082      	sub	sp, #8
  40ae64:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40ae66:	2300      	movs	r3, #0
  40ae68:	71fb      	strb	r3, [r7, #7]
  40ae6a:	e05e      	b.n	40af2a <etharp_tmr+0xca>
    u8_t state = arp_table[i].state;
  40ae6c:	79fa      	ldrb	r2, [r7, #7]
  40ae6e:	4932      	ldr	r1, [pc, #200]	; (40af38 <etharp_tmr+0xd8>)
  40ae70:	4613      	mov	r3, r2
  40ae72:	009b      	lsls	r3, r3, #2
  40ae74:	4413      	add	r3, r2
  40ae76:	009b      	lsls	r3, r3, #2
  40ae78:	440b      	add	r3, r1
  40ae7a:	3312      	adds	r3, #18
  40ae7c:	781b      	ldrb	r3, [r3, #0]
  40ae7e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
  40ae80:	79bb      	ldrb	r3, [r7, #6]
  40ae82:	2b00      	cmp	r3, #0
  40ae84:	d04e      	beq.n	40af24 <etharp_tmr+0xc4>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  40ae86:	79fa      	ldrb	r2, [r7, #7]
  40ae88:	492b      	ldr	r1, [pc, #172]	; (40af38 <etharp_tmr+0xd8>)
  40ae8a:	4613      	mov	r3, r2
  40ae8c:	009b      	lsls	r3, r3, #2
  40ae8e:	4413      	add	r3, r2
  40ae90:	009b      	lsls	r3, r3, #2
  40ae92:	440b      	add	r3, r1
  40ae94:	3313      	adds	r3, #19
  40ae96:	781b      	ldrb	r3, [r3, #0]
  40ae98:	3301      	adds	r3, #1
  40ae9a:	b2d8      	uxtb	r0, r3
  40ae9c:	4926      	ldr	r1, [pc, #152]	; (40af38 <etharp_tmr+0xd8>)
  40ae9e:	4613      	mov	r3, r2
  40aea0:	009b      	lsls	r3, r3, #2
  40aea2:	4413      	add	r3, r2
  40aea4:	009b      	lsls	r3, r3, #2
  40aea6:	440b      	add	r3, r1
  40aea8:	3313      	adds	r3, #19
  40aeaa:	4602      	mov	r2, r0
  40aeac:	701a      	strb	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40aeae:	79fa      	ldrb	r2, [r7, #7]
  40aeb0:	4921      	ldr	r1, [pc, #132]	; (40af38 <etharp_tmr+0xd8>)
  40aeb2:	4613      	mov	r3, r2
  40aeb4:	009b      	lsls	r3, r3, #2
  40aeb6:	4413      	add	r3, r2
  40aeb8:	009b      	lsls	r3, r3, #2
  40aeba:	440b      	add	r3, r1
  40aebc:	3313      	adds	r3, #19
  40aebe:	781b      	ldrb	r3, [r3, #0]
  40aec0:	2bef      	cmp	r3, #239	; 0xef
  40aec2:	d815      	bhi.n	40aef0 <etharp_tmr+0x90>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40aec4:	79fa      	ldrb	r2, [r7, #7]
  40aec6:	491c      	ldr	r1, [pc, #112]	; (40af38 <etharp_tmr+0xd8>)
  40aec8:	4613      	mov	r3, r2
  40aeca:	009b      	lsls	r3, r3, #2
  40aecc:	4413      	add	r3, r2
  40aece:	009b      	lsls	r3, r3, #2
  40aed0:	440b      	add	r3, r1
  40aed2:	3312      	adds	r3, #18
  40aed4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  40aed6:	2b01      	cmp	r3, #1
  40aed8:	d10f      	bne.n	40aefa <etharp_tmr+0x9a>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  40aeda:	79fa      	ldrb	r2, [r7, #7]
  40aedc:	4916      	ldr	r1, [pc, #88]	; (40af38 <etharp_tmr+0xd8>)
  40aede:	4613      	mov	r3, r2
  40aee0:	009b      	lsls	r3, r3, #2
  40aee2:	4413      	add	r3, r2
  40aee4:	009b      	lsls	r3, r3, #2
  40aee6:	440b      	add	r3, r1
  40aee8:	3313      	adds	r3, #19
  40aeea:	781b      	ldrb	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  40aeec:	2b01      	cmp	r3, #1
  40aeee:	d904      	bls.n	40aefa <etharp_tmr+0x9a>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  40aef0:	79fb      	ldrb	r3, [r7, #7]
  40aef2:	4618      	mov	r0, r3
  40aef4:	4b11      	ldr	r3, [pc, #68]	; (40af3c <etharp_tmr+0xdc>)
  40aef6:	4798      	blx	r3
  40aef8:	e014      	b.n	40af24 <etharp_tmr+0xc4>
      }
      else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING) {
  40aefa:	79fa      	ldrb	r2, [r7, #7]
  40aefc:	490e      	ldr	r1, [pc, #56]	; (40af38 <etharp_tmr+0xd8>)
  40aefe:	4613      	mov	r3, r2
  40af00:	009b      	lsls	r3, r3, #2
  40af02:	4413      	add	r3, r2
  40af04:	009b      	lsls	r3, r3, #2
  40af06:	440b      	add	r3, r1
  40af08:	3312      	adds	r3, #18
  40af0a:	781b      	ldrb	r3, [r3, #0]
  40af0c:	2b03      	cmp	r3, #3
  40af0e:	d109      	bne.n	40af24 <etharp_tmr+0xc4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  40af10:	79fa      	ldrb	r2, [r7, #7]
  40af12:	4909      	ldr	r1, [pc, #36]	; (40af38 <etharp_tmr+0xd8>)
  40af14:	4613      	mov	r3, r2
  40af16:	009b      	lsls	r3, r3, #2
  40af18:	4413      	add	r3, r2
  40af1a:	009b      	lsls	r3, r3, #2
  40af1c:	440b      	add	r3, r1
  40af1e:	3312      	adds	r3, #18
  40af20:	2202      	movs	r2, #2
  40af22:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40af24:	79fb      	ldrb	r3, [r7, #7]
  40af26:	3301      	adds	r3, #1
  40af28:	71fb      	strb	r3, [r7, #7]
  40af2a:	79fb      	ldrb	r3, [r7, #7]
  40af2c:	2b09      	cmp	r3, #9
  40af2e:	d99d      	bls.n	40ae6c <etharp_tmr+0xc>
        /* resend an ARP query here? */
      }
#endif /* ARP_QUEUEING */
    }
  }
}
  40af30:	bf00      	nop
  40af32:	3708      	adds	r7, #8
  40af34:	46bd      	mov	sp, r7
  40af36:	bd80      	pop	{r7, pc}
  40af38:	204025fc 	.word	0x204025fc
  40af3c:	0040adf9 	.word	0x0040adf9

0040af40 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(ip_addr_t *ipaddr, u8_t flags)
{
  40af40:	b580      	push	{r7, lr}
  40af42:	b086      	sub	sp, #24
  40af44:	af00      	add	r7, sp, #0
  40af46:	6078      	str	r0, [r7, #4]
  40af48:	460b      	mov	r3, r1
  40af4a:	70fb      	strb	r3, [r7, #3]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  40af4c:	230a      	movs	r3, #10
  40af4e:	75fb      	strb	r3, [r7, #23]
  40af50:	230a      	movs	r3, #10
  40af52:	75bb      	strb	r3, [r7, #22]
  s8_t empty = ARP_TABLE_SIZE;
  40af54:	230a      	movs	r3, #10
  40af56:	757b      	strb	r3, [r7, #21]
  u8_t i = 0, age_pending = 0, age_stable = 0;
  40af58:	2300      	movs	r3, #0
  40af5a:	753b      	strb	r3, [r7, #20]
  40af5c:	2300      	movs	r3, #0
  40af5e:	74fb      	strb	r3, [r7, #19]
  40af60:	2300      	movs	r3, #0
  40af62:	74bb      	strb	r3, [r7, #18]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  40af64:	230a      	movs	r3, #10
  40af66:	747b      	strb	r3, [r7, #17]
  /* its age */
  u8_t age_queue = 0;
  40af68:	2300      	movs	r3, #0
  40af6a:	743b      	strb	r3, [r7, #16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40af6c:	2300      	movs	r3, #0
  40af6e:	753b      	strb	r3, [r7, #20]
  40af70:	e086      	b.n	40b080 <etharp_find_entry+0x140>
    u8_t state = arp_table[i].state;
  40af72:	7d3a      	ldrb	r2, [r7, #20]
  40af74:	496d      	ldr	r1, [pc, #436]	; (40b12c <etharp_find_entry+0x1ec>)
  40af76:	4613      	mov	r3, r2
  40af78:	009b      	lsls	r3, r3, #2
  40af7a:	4413      	add	r3, r2
  40af7c:	009b      	lsls	r3, r3, #2
  40af7e:	440b      	add	r3, r1
  40af80:	3312      	adds	r3, #18
  40af82:	781b      	ldrb	r3, [r3, #0]
  40af84:	73fb      	strb	r3, [r7, #15]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  40af86:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40af8a:	2b0a      	cmp	r3, #10
  40af8c:	d105      	bne.n	40af9a <etharp_find_entry+0x5a>
  40af8e:	7bfb      	ldrb	r3, [r7, #15]
  40af90:	2b00      	cmp	r3, #0
  40af92:	d102      	bne.n	40af9a <etharp_find_entry+0x5a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  40af94:	7d3b      	ldrb	r3, [r7, #20]
  40af96:	757b      	strb	r3, [r7, #21]
  40af98:	e06f      	b.n	40b07a <etharp_find_entry+0x13a>
    } else if (state != ETHARP_STATE_EMPTY) {
  40af9a:	7bfb      	ldrb	r3, [r7, #15]
  40af9c:	2b00      	cmp	r3, #0
  40af9e:	d06c      	beq.n	40b07a <etharp_find_entry+0x13a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
  40afa0:	687b      	ldr	r3, [r7, #4]
  40afa2:	2b00      	cmp	r3, #0
  40afa4:	d00f      	beq.n	40afc6 <etharp_find_entry+0x86>
  40afa6:	687b      	ldr	r3, [r7, #4]
  40afa8:	6819      	ldr	r1, [r3, #0]
  40afaa:	7d3a      	ldrb	r2, [r7, #20]
  40afac:	485f      	ldr	r0, [pc, #380]	; (40b12c <etharp_find_entry+0x1ec>)
  40afae:	4613      	mov	r3, r2
  40afb0:	009b      	lsls	r3, r3, #2
  40afb2:	4413      	add	r3, r2
  40afb4:	009b      	lsls	r3, r3, #2
  40afb6:	4403      	add	r3, r0
  40afb8:	3304      	adds	r3, #4
  40afba:	681b      	ldr	r3, [r3, #0]
  40afbc:	4299      	cmp	r1, r3
  40afbe:	d102      	bne.n	40afc6 <etharp_find_entry+0x86>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  40afc0:	f997 3014 	ldrsb.w	r3, [r7, #20]
  40afc4:	e0ae      	b.n	40b124 <etharp_find_entry+0x1e4>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  40afc6:	7bfb      	ldrb	r3, [r7, #15]
  40afc8:	2b01      	cmp	r3, #1
  40afca:	d13b      	bne.n	40b044 <etharp_find_entry+0x104>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  40afcc:	7d3a      	ldrb	r2, [r7, #20]
  40afce:	4957      	ldr	r1, [pc, #348]	; (40b12c <etharp_find_entry+0x1ec>)
  40afd0:	4613      	mov	r3, r2
  40afd2:	009b      	lsls	r3, r3, #2
  40afd4:	4413      	add	r3, r2
  40afd6:	009b      	lsls	r3, r3, #2
  40afd8:	440b      	add	r3, r1
  40afda:	681b      	ldr	r3, [r3, #0]
  40afdc:	2b00      	cmp	r3, #0
  40afde:	d018      	beq.n	40b012 <etharp_find_entry+0xd2>
          if (arp_table[i].ctime >= age_queue) {
  40afe0:	7d3a      	ldrb	r2, [r7, #20]
  40afe2:	4952      	ldr	r1, [pc, #328]	; (40b12c <etharp_find_entry+0x1ec>)
  40afe4:	4613      	mov	r3, r2
  40afe6:	009b      	lsls	r3, r3, #2
  40afe8:	4413      	add	r3, r2
  40afea:	009b      	lsls	r3, r3, #2
  40afec:	440b      	add	r3, r1
  40afee:	3313      	adds	r3, #19
  40aff0:	781b      	ldrb	r3, [r3, #0]
  40aff2:	7c3a      	ldrb	r2, [r7, #16]
  40aff4:	429a      	cmp	r2, r3
  40aff6:	d840      	bhi.n	40b07a <etharp_find_entry+0x13a>
            old_queue = i;
  40aff8:	7d3b      	ldrb	r3, [r7, #20]
  40affa:	747b      	strb	r3, [r7, #17]
            age_queue = arp_table[i].ctime;
  40affc:	7d3a      	ldrb	r2, [r7, #20]
  40affe:	494b      	ldr	r1, [pc, #300]	; (40b12c <etharp_find_entry+0x1ec>)
  40b000:	4613      	mov	r3, r2
  40b002:	009b      	lsls	r3, r3, #2
  40b004:	4413      	add	r3, r2
  40b006:	009b      	lsls	r3, r3, #2
  40b008:	440b      	add	r3, r1
  40b00a:	3313      	adds	r3, #19
  40b00c:	781b      	ldrb	r3, [r3, #0]
  40b00e:	743b      	strb	r3, [r7, #16]
  40b010:	e033      	b.n	40b07a <etharp_find_entry+0x13a>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  40b012:	7d3a      	ldrb	r2, [r7, #20]
  40b014:	4945      	ldr	r1, [pc, #276]	; (40b12c <etharp_find_entry+0x1ec>)
  40b016:	4613      	mov	r3, r2
  40b018:	009b      	lsls	r3, r3, #2
  40b01a:	4413      	add	r3, r2
  40b01c:	009b      	lsls	r3, r3, #2
  40b01e:	440b      	add	r3, r1
  40b020:	3313      	adds	r3, #19
  40b022:	781b      	ldrb	r3, [r3, #0]
  40b024:	7cfa      	ldrb	r2, [r7, #19]
  40b026:	429a      	cmp	r2, r3
  40b028:	d827      	bhi.n	40b07a <etharp_find_entry+0x13a>
            old_pending = i;
  40b02a:	7d3b      	ldrb	r3, [r7, #20]
  40b02c:	75fb      	strb	r3, [r7, #23]
            age_pending = arp_table[i].ctime;
  40b02e:	7d3a      	ldrb	r2, [r7, #20]
  40b030:	493e      	ldr	r1, [pc, #248]	; (40b12c <etharp_find_entry+0x1ec>)
  40b032:	4613      	mov	r3, r2
  40b034:	009b      	lsls	r3, r3, #2
  40b036:	4413      	add	r3, r2
  40b038:	009b      	lsls	r3, r3, #2
  40b03a:	440b      	add	r3, r1
  40b03c:	3313      	adds	r3, #19
  40b03e:	781b      	ldrb	r3, [r3, #0]
  40b040:	74fb      	strb	r3, [r7, #19]
  40b042:	e01a      	b.n	40b07a <etharp_find_entry+0x13a>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  40b044:	7bfb      	ldrb	r3, [r7, #15]
  40b046:	2b01      	cmp	r3, #1
  40b048:	d917      	bls.n	40b07a <etharp_find_entry+0x13a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  40b04a:	7d3a      	ldrb	r2, [r7, #20]
  40b04c:	4937      	ldr	r1, [pc, #220]	; (40b12c <etharp_find_entry+0x1ec>)
  40b04e:	4613      	mov	r3, r2
  40b050:	009b      	lsls	r3, r3, #2
  40b052:	4413      	add	r3, r2
  40b054:	009b      	lsls	r3, r3, #2
  40b056:	440b      	add	r3, r1
  40b058:	3313      	adds	r3, #19
  40b05a:	781b      	ldrb	r3, [r3, #0]
  40b05c:	7cba      	ldrb	r2, [r7, #18]
  40b05e:	429a      	cmp	r2, r3
  40b060:	d80b      	bhi.n	40b07a <etharp_find_entry+0x13a>
            old_stable = i;
  40b062:	7d3b      	ldrb	r3, [r7, #20]
  40b064:	75bb      	strb	r3, [r7, #22]
            age_stable = arp_table[i].ctime;
  40b066:	7d3a      	ldrb	r2, [r7, #20]
  40b068:	4930      	ldr	r1, [pc, #192]	; (40b12c <etharp_find_entry+0x1ec>)
  40b06a:	4613      	mov	r3, r2
  40b06c:	009b      	lsls	r3, r3, #2
  40b06e:	4413      	add	r3, r2
  40b070:	009b      	lsls	r3, r3, #2
  40b072:	440b      	add	r3, r1
  40b074:	3313      	adds	r3, #19
  40b076:	781b      	ldrb	r3, [r3, #0]
  40b078:	74bb      	strb	r3, [r7, #18]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b07a:	7d3b      	ldrb	r3, [r7, #20]
  40b07c:	3301      	adds	r3, #1
  40b07e:	753b      	strb	r3, [r7, #20]
  40b080:	7d3b      	ldrb	r3, [r7, #20]
  40b082:	2b09      	cmp	r3, #9
  40b084:	f67f af75 	bls.w	40af72 <etharp_find_entry+0x32>
    }
  }
  /* { we have no match } => try to create a new entry */
   
  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  40b088:	78fb      	ldrb	r3, [r7, #3]
  40b08a:	f003 0302 	and.w	r3, r3, #2
  40b08e:	2b00      	cmp	r3, #0
  40b090:	d108      	bne.n	40b0a4 <etharp_find_entry+0x164>
  40b092:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40b096:	2b0a      	cmp	r3, #10
  40b098:	d107      	bne.n	40b0aa <etharp_find_entry+0x16a>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  40b09a:	78fb      	ldrb	r3, [r7, #3]
  40b09c:	f003 0301 	and.w	r3, r3, #1
  40b0a0:	2b00      	cmp	r3, #0
  40b0a2:	d102      	bne.n	40b0aa <etharp_find_entry+0x16a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  40b0a4:	f04f 33ff 	mov.w	r3, #4294967295
  40b0a8:	e03c      	b.n	40b124 <etharp_find_entry+0x1e4>
   * 
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */ 

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  40b0aa:	f997 3015 	ldrsb.w	r3, [r7, #21]
  40b0ae:	2b09      	cmp	r3, #9
  40b0b0:	dc02      	bgt.n	40b0b8 <etharp_find_entry+0x178>
    i = empty;
  40b0b2:	7d7b      	ldrb	r3, [r7, #21]
  40b0b4:	753b      	strb	r3, [r7, #20]
  40b0b6:	e01b      	b.n	40b0f0 <etharp_find_entry+0x1b0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  40b0b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
  40b0bc:	2b09      	cmp	r3, #9
  40b0be:	dc02      	bgt.n	40b0c6 <etharp_find_entry+0x186>
      /* recycle oldest stable*/
      i = old_stable;
  40b0c0:	7dbb      	ldrb	r3, [r7, #22]
  40b0c2:	753b      	strb	r3, [r7, #20]
  40b0c4:	e010      	b.n	40b0e8 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  40b0c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b0ca:	2b09      	cmp	r3, #9
  40b0cc:	dc02      	bgt.n	40b0d4 <etharp_find_entry+0x194>
      /* recycle oldest pending */
      i = old_pending;
  40b0ce:	7dfb      	ldrb	r3, [r7, #23]
  40b0d0:	753b      	strb	r3, [r7, #20]
  40b0d2:	e009      	b.n	40b0e8 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  40b0d4:	f997 3011 	ldrsb.w	r3, [r7, #17]
  40b0d8:	2b09      	cmp	r3, #9
  40b0da:	dc02      	bgt.n	40b0e2 <etharp_find_entry+0x1a2>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  40b0dc:	7c7b      	ldrb	r3, [r7, #17]
  40b0de:	753b      	strb	r3, [r7, #20]
  40b0e0:	e002      	b.n	40b0e8 <etharp_find_entry+0x1a8>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  40b0e2:	f04f 33ff 	mov.w	r3, #4294967295
  40b0e6:	e01d      	b.n	40b124 <etharp_find_entry+0x1e4>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  40b0e8:	7d3b      	ldrb	r3, [r7, #20]
  40b0ea:	4618      	mov	r0, r3
  40b0ec:	4b10      	ldr	r3, [pc, #64]	; (40b130 <etharp_find_entry+0x1f0>)
  40b0ee:	4798      	blx	r3
  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  40b0f0:	687b      	ldr	r3, [r7, #4]
  40b0f2:	2b00      	cmp	r3, #0
  40b0f4:	d00a      	beq.n	40b10c <etharp_find_entry+0x1cc>
    /* set IP address */
    ip_addr_copy(arp_table[i].ipaddr, *ipaddr);
  40b0f6:	7d3a      	ldrb	r2, [r7, #20]
  40b0f8:	687b      	ldr	r3, [r7, #4]
  40b0fa:	6819      	ldr	r1, [r3, #0]
  40b0fc:	480b      	ldr	r0, [pc, #44]	; (40b12c <etharp_find_entry+0x1ec>)
  40b0fe:	4613      	mov	r3, r2
  40b100:	009b      	lsls	r3, r3, #2
  40b102:	4413      	add	r3, r2
  40b104:	009b      	lsls	r3, r3, #2
  40b106:	4403      	add	r3, r0
  40b108:	3304      	adds	r3, #4
  40b10a:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
  40b10c:	7d3a      	ldrb	r2, [r7, #20]
  40b10e:	4907      	ldr	r1, [pc, #28]	; (40b12c <etharp_find_entry+0x1ec>)
  40b110:	4613      	mov	r3, r2
  40b112:	009b      	lsls	r3, r3, #2
  40b114:	4413      	add	r3, r2
  40b116:	009b      	lsls	r3, r3, #2
  40b118:	440b      	add	r3, r1
  40b11a:	3313      	adds	r3, #19
  40b11c:	2200      	movs	r2, #0
  40b11e:	701a      	strb	r2, [r3, #0]
  return (err_t)i;
  40b120:	f997 3014 	ldrsb.w	r3, [r7, #20]
}
  40b124:	4618      	mov	r0, r3
  40b126:	3718      	adds	r7, #24
  40b128:	46bd      	mov	sp, r7
  40b12a:	bd80      	pop	{r7, pc}
  40b12c:	204025fc 	.word	0x204025fc
  40b130:	0040adf9 	.word	0x0040adf9

0040b134 <etharp_send_ip>:
 * @params dst the destination MAC address to be copied into the ethernet header
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
static err_t
etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
{
  40b134:	b580      	push	{r7, lr}
  40b136:	b086      	sub	sp, #24
  40b138:	af00      	add	r7, sp, #0
  40b13a:	60f8      	str	r0, [r7, #12]
  40b13c:	60b9      	str	r1, [r7, #8]
  40b13e:	607a      	str	r2, [r7, #4]
  40b140:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr = (struct eth_hdr *)p->payload;
  40b142:	68bb      	ldr	r3, [r7, #8]
  40b144:	685b      	ldr	r3, [r3, #4]
  40b146:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
              (netif->hwaddr_len == ETHARP_HWADDR_LEN));
  ETHADDR32_COPY(&ethhdr->dest, dst);
  40b148:	697b      	ldr	r3, [r7, #20]
  40b14a:	2206      	movs	r2, #6
  40b14c:	6839      	ldr	r1, [r7, #0]
  40b14e:	4618      	mov	r0, r3
  40b150:	4b0c      	ldr	r3, [pc, #48]	; (40b184 <etharp_send_ip+0x50>)
  40b152:	4798      	blx	r3
  ETHADDR16_COPY(&ethhdr->src, src);
  40b154:	697b      	ldr	r3, [r7, #20]
  40b156:	3306      	adds	r3, #6
  40b158:	2206      	movs	r2, #6
  40b15a:	6879      	ldr	r1, [r7, #4]
  40b15c:	4618      	mov	r0, r3
  40b15e:	4b09      	ldr	r3, [pc, #36]	; (40b184 <etharp_send_ip+0x50>)
  40b160:	4798      	blx	r3
  ethhdr->type = PP_HTONS(ETHTYPE_IP);
  40b162:	697b      	ldr	r3, [r7, #20]
  40b164:	2200      	movs	r2, #0
  40b166:	f042 0208 	orr.w	r2, r2, #8
  40b16a:	731a      	strb	r2, [r3, #12]
  40b16c:	2200      	movs	r2, #0
  40b16e:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
  /* send the packet */
  return netif->linkoutput(netif, p);
  40b170:	68fb      	ldr	r3, [r7, #12]
  40b172:	699b      	ldr	r3, [r3, #24]
  40b174:	68b9      	ldr	r1, [r7, #8]
  40b176:	68f8      	ldr	r0, [r7, #12]
  40b178:	4798      	blx	r3
  40b17a:	4603      	mov	r3, r0
}
  40b17c:	4618      	mov	r0, r3
  40b17e:	3718      	adds	r7, #24
  40b180:	46bd      	mov	sp, r7
  40b182:	bd80      	pop	{r7, pc}
  40b184:	0040cd79 	.word	0x0040cd79

0040b188 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, ip_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  40b188:	b590      	push	{r4, r7, lr}
  40b18a:	b087      	sub	sp, #28
  40b18c:	af00      	add	r7, sp, #0
  40b18e:	60f8      	str	r0, [r7, #12]
  40b190:	60b9      	str	r1, [r7, #8]
  40b192:	607a      	str	r2, [r7, #4]
  40b194:	70fb      	strb	r3, [r7, #3]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
    ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip_addr_isany(ipaddr) ||
  40b196:	68bb      	ldr	r3, [r7, #8]
  40b198:	2b00      	cmp	r3, #0
  40b19a:	d012      	beq.n	40b1c2 <etharp_update_arp_entry+0x3a>
  40b19c:	68bb      	ldr	r3, [r7, #8]
  40b19e:	681b      	ldr	r3, [r3, #0]
  40b1a0:	2b00      	cmp	r3, #0
  40b1a2:	d00e      	beq.n	40b1c2 <etharp_update_arp_entry+0x3a>
      ip_addr_isbroadcast(ipaddr, netif) ||
  40b1a4:	68bb      	ldr	r3, [r7, #8]
  40b1a6:	681b      	ldr	r3, [r3, #0]
  40b1a8:	68f9      	ldr	r1, [r7, #12]
  40b1aa:	4618      	mov	r0, r3
  40b1ac:	4b3d      	ldr	r3, [pc, #244]	; (40b2a4 <etharp_update_arp_entry+0x11c>)
  40b1ae:	4798      	blx	r3
  40b1b0:	4603      	mov	r3, r0
  if (ip_addr_isany(ipaddr) ||
  40b1b2:	2b00      	cmp	r3, #0
  40b1b4:	d105      	bne.n	40b1c2 <etharp_update_arp_entry+0x3a>
      ip_addr_ismulticast(ipaddr)) {
  40b1b6:	68bb      	ldr	r3, [r7, #8]
  40b1b8:	681b      	ldr	r3, [r3, #0]
  40b1ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip_addr_isbroadcast(ipaddr, netif) ||
  40b1be:	2be0      	cmp	r3, #224	; 0xe0
  40b1c0:	d102      	bne.n	40b1c8 <etharp_update_arp_entry+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40b1c2:	f06f 030d 	mvn.w	r3, #13
  40b1c6:	e068      	b.n	40b29a <etharp_update_arp_entry+0x112>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags);
  40b1c8:	78fb      	ldrb	r3, [r7, #3]
  40b1ca:	4619      	mov	r1, r3
  40b1cc:	68b8      	ldr	r0, [r7, #8]
  40b1ce:	4b36      	ldr	r3, [pc, #216]	; (40b2a8 <etharp_update_arp_entry+0x120>)
  40b1d0:	4798      	blx	r3
  40b1d2:	4603      	mov	r3, r0
  40b1d4:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
  40b1d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b1da:	2b00      	cmp	r3, #0
  40b1dc:	da02      	bge.n	40b1e4 <etharp_update_arp_entry+0x5c>
    return (err_t)i;
  40b1de:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b1e2:	e05a      	b.n	40b29a <etharp_update_arp_entry+0x112>
    arp_table[i].state = ETHARP_STATE_STATIC;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  40b1e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b1e8:	4930      	ldr	r1, [pc, #192]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b1ea:	4613      	mov	r3, r2
  40b1ec:	009b      	lsls	r3, r3, #2
  40b1ee:	4413      	add	r3, r2
  40b1f0:	009b      	lsls	r3, r3, #2
  40b1f2:	440b      	add	r3, r1
  40b1f4:	3312      	adds	r3, #18
  40b1f6:	2202      	movs	r2, #2
  40b1f8:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  40b1fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b1fe:	492b      	ldr	r1, [pc, #172]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b200:	4613      	mov	r3, r2
  40b202:	009b      	lsls	r3, r3, #2
  40b204:	4413      	add	r3, r2
  40b206:	009b      	lsls	r3, r3, #2
  40b208:	440b      	add	r3, r1
  40b20a:	3308      	adds	r3, #8
  40b20c:	68fa      	ldr	r2, [r7, #12]
  40b20e:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  40b210:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b214:	4613      	mov	r3, r2
  40b216:	009b      	lsls	r3, r3, #2
  40b218:	4413      	add	r3, r2
  40b21a:	009b      	lsls	r3, r3, #2
  40b21c:	3308      	adds	r3, #8
  40b21e:	4a23      	ldr	r2, [pc, #140]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b220:	4413      	add	r3, r2
  40b222:	3304      	adds	r3, #4
  40b224:	2206      	movs	r2, #6
  40b226:	6879      	ldr	r1, [r7, #4]
  40b228:	4618      	mov	r0, r3
  40b22a:	4b21      	ldr	r3, [pc, #132]	; (40b2b0 <etharp_update_arp_entry+0x128>)
  40b22c:	4798      	blx	r3
  /* reset time stamp */
  arp_table[i].ctime = 0;
  40b22e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b232:	491e      	ldr	r1, [pc, #120]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b234:	4613      	mov	r3, r2
  40b236:	009b      	lsls	r3, r3, #2
  40b238:	4413      	add	r3, r2
  40b23a:	009b      	lsls	r3, r3, #2
  40b23c:	440b      	add	r3, r1
  40b23e:	3313      	adds	r3, #19
  40b240:	2200      	movs	r2, #0
  40b242:	701a      	strb	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
  40b244:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b248:	4918      	ldr	r1, [pc, #96]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b24a:	4613      	mov	r3, r2
  40b24c:	009b      	lsls	r3, r3, #2
  40b24e:	4413      	add	r3, r2
  40b250:	009b      	lsls	r3, r3, #2
  40b252:	440b      	add	r3, r1
  40b254:	681b      	ldr	r3, [r3, #0]
  40b256:	2b00      	cmp	r3, #0
  40b258:	d01e      	beq.n	40b298 <etharp_update_arp_entry+0x110>
    struct pbuf *p = arp_table[i].q;
  40b25a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b25e:	4913      	ldr	r1, [pc, #76]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b260:	4613      	mov	r3, r2
  40b262:	009b      	lsls	r3, r3, #2
  40b264:	4413      	add	r3, r2
  40b266:	009b      	lsls	r3, r3, #2
  40b268:	440b      	add	r3, r1
  40b26a:	681b      	ldr	r3, [r3, #0]
  40b26c:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
  40b26e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b272:	490e      	ldr	r1, [pc, #56]	; (40b2ac <etharp_update_arp_entry+0x124>)
  40b274:	4613      	mov	r3, r2
  40b276:	009b      	lsls	r3, r3, #2
  40b278:	4413      	add	r3, r2
  40b27a:	009b      	lsls	r3, r3, #2
  40b27c:	440b      	add	r3, r1
  40b27e:	2200      	movs	r2, #0
  40b280:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
  40b282:	68fb      	ldr	r3, [r7, #12]
  40b284:	f103 0227 	add.w	r2, r3, #39	; 0x27
  40b288:	687b      	ldr	r3, [r7, #4]
  40b28a:	6939      	ldr	r1, [r7, #16]
  40b28c:	68f8      	ldr	r0, [r7, #12]
  40b28e:	4c09      	ldr	r4, [pc, #36]	; (40b2b4 <etharp_update_arp_entry+0x12c>)
  40b290:	47a0      	blx	r4
    /* free the queued IP packet */
    pbuf_free(p);
  40b292:	6938      	ldr	r0, [r7, #16]
  40b294:	4b08      	ldr	r3, [pc, #32]	; (40b2b8 <etharp_update_arp_entry+0x130>)
  40b296:	4798      	blx	r3
  }
  return ERR_OK;
  40b298:	2300      	movs	r3, #0
}
  40b29a:	4618      	mov	r0, r3
  40b29c:	371c      	adds	r7, #28
  40b29e:	46bd      	mov	sp, r7
  40b2a0:	bd90      	pop	{r4, r7, pc}
  40b2a2:	bf00      	nop
  40b2a4:	004043d1 	.word	0x004043d1
  40b2a8:	0040af41 	.word	0x0040af41
  40b2ac:	204025fc 	.word	0x204025fc
  40b2b0:	0040cd79 	.word	0x0040cd79
  40b2b4:	0040b135 	.word	0x0040b135
  40b2b8:	00405b81 	.word	0x00405b81

0040b2bc <etharp_cleanup_netif>:
 * Remove all ARP table entries of the specified netif.
 *
 * @param netif points to a network interface
 */
void etharp_cleanup_netif(struct netif *netif)
{
  40b2bc:	b580      	push	{r7, lr}
  40b2be:	b084      	sub	sp, #16
  40b2c0:	af00      	add	r7, sp, #0
  40b2c2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b2c4:	2300      	movs	r3, #0
  40b2c6:	73fb      	strb	r3, [r7, #15]
  40b2c8:	e01f      	b.n	40b30a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
  40b2ca:	7bfa      	ldrb	r2, [r7, #15]
  40b2cc:	4912      	ldr	r1, [pc, #72]	; (40b318 <etharp_cleanup_netif+0x5c>)
  40b2ce:	4613      	mov	r3, r2
  40b2d0:	009b      	lsls	r3, r3, #2
  40b2d2:	4413      	add	r3, r2
  40b2d4:	009b      	lsls	r3, r3, #2
  40b2d6:	440b      	add	r3, r1
  40b2d8:	3312      	adds	r3, #18
  40b2da:	781b      	ldrb	r3, [r3, #0]
  40b2dc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  40b2de:	7bbb      	ldrb	r3, [r7, #14]
  40b2e0:	2b00      	cmp	r3, #0
  40b2e2:	d00f      	beq.n	40b304 <etharp_cleanup_netif+0x48>
  40b2e4:	7bfa      	ldrb	r2, [r7, #15]
  40b2e6:	490c      	ldr	r1, [pc, #48]	; (40b318 <etharp_cleanup_netif+0x5c>)
  40b2e8:	4613      	mov	r3, r2
  40b2ea:	009b      	lsls	r3, r3, #2
  40b2ec:	4413      	add	r3, r2
  40b2ee:	009b      	lsls	r3, r3, #2
  40b2f0:	440b      	add	r3, r1
  40b2f2:	3308      	adds	r3, #8
  40b2f4:	681a      	ldr	r2, [r3, #0]
  40b2f6:	687b      	ldr	r3, [r7, #4]
  40b2f8:	429a      	cmp	r2, r3
  40b2fa:	d103      	bne.n	40b304 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
  40b2fc:	7bfb      	ldrb	r3, [r7, #15]
  40b2fe:	4618      	mov	r0, r3
  40b300:	4b06      	ldr	r3, [pc, #24]	; (40b31c <etharp_cleanup_netif+0x60>)
  40b302:	4798      	blx	r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  40b304:	7bfb      	ldrb	r3, [r7, #15]
  40b306:	3301      	adds	r3, #1
  40b308:	73fb      	strb	r3, [r7, #15]
  40b30a:	7bfb      	ldrb	r3, [r7, #15]
  40b30c:	2b09      	cmp	r3, #9
  40b30e:	d9dc      	bls.n	40b2ca <etharp_cleanup_netif+0xe>
    }
  }
}
  40b310:	bf00      	nop
  40b312:	3710      	adds	r7, #16
  40b314:	46bd      	mov	sp, r7
  40b316:	bd80      	pop	{r7, pc}
  40b318:	204025fc 	.word	0x204025fc
  40b31c:	0040adf9 	.word	0x0040adf9

0040b320 <etharp_arp_input>:
 *
 * @see pbuf_free()
 */
static void
etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
{
  40b320:	b590      	push	{r4, r7, lr}
  40b322:	b08b      	sub	sp, #44	; 0x2c
  40b324:	af00      	add	r7, sp, #0
  40b326:	60f8      	str	r0, [r7, #12]
  40b328:	60b9      	str	r1, [r7, #8]
  40b32a:	607a      	str	r2, [r7, #4]
  u8_t for_us;
#if LWIP_AUTOIP
  const u8_t * ethdst_hwaddr;
#endif /* LWIP_AUTOIP */

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  40b32c:	68fb      	ldr	r3, [r7, #12]
  40b32e:	2b00      	cmp	r3, #0
  40b330:	d100      	bne.n	40b334 <etharp_arp_input+0x14>
  40b332:	e7fe      	b.n	40b332 <etharp_arp_input+0x12>

  /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
     since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
  if (p->len < SIZEOF_ETHARP_PACKET) {
  40b334:	687b      	ldr	r3, [r7, #4]
  40b336:	895b      	ldrh	r3, [r3, #10]
  40b338:	2b29      	cmp	r3, #41	; 0x29
  40b33a:	d803      	bhi.n	40b344 <etharp_arp_input+0x24>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
      (s16_t)SIZEOF_ETHARP_PACKET));
    ETHARP_STATS_INC(etharp.lenerr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40b33c:	6878      	ldr	r0, [r7, #4]
  40b33e:	4b51      	ldr	r3, [pc, #324]	; (40b484 <etharp_arp_input+0x164>)
  40b340:	4798      	blx	r3
    return;
  40b342:	e09c      	b.n	40b47e <etharp_arp_input+0x15e>
  }

  ethhdr = (struct eth_hdr *)p->payload;
  40b344:	687b      	ldr	r3, [r7, #4]
  40b346:	685b      	ldr	r3, [r3, #4]
  40b348:	623b      	str	r3, [r7, #32]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40b34a:	6a3b      	ldr	r3, [r7, #32]
  40b34c:	330e      	adds	r3, #14
  40b34e:	61fb      	str	r3, [r7, #28]
    hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
  }
#endif /* ETHARP_SUPPORT_VLAN */

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40b350:	69fb      	ldr	r3, [r7, #28]
  40b352:	881b      	ldrh	r3, [r3, #0]
  40b354:	b29b      	uxth	r3, r3
  40b356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40b35a:	d10c      	bne.n	40b376 <etharp_arp_input+0x56>
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40b35c:	69fb      	ldr	r3, [r7, #28]
  40b35e:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  40b360:	2b06      	cmp	r3, #6
  40b362:	d108      	bne.n	40b376 <etharp_arp_input+0x56>
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40b364:	69fb      	ldr	r3, [r7, #28]
  40b366:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETHARP_HWADDR_LEN) ||
  40b368:	2b04      	cmp	r3, #4
  40b36a:	d104      	bne.n	40b376 <etharp_arp_input+0x56>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  40b36c:	69fb      	ldr	r3, [r7, #28]
  40b36e:	885b      	ldrh	r3, [r3, #2]
  40b370:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip_addr_t)) ||
  40b372:	2b08      	cmp	r3, #8
  40b374:	d003      	beq.n	40b37e <etharp_arp_input+0x5e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, hdr->hwlen, hdr->proto, hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
  40b376:	6878      	ldr	r0, [r7, #4]
  40b378:	4b42      	ldr	r3, [pc, #264]	; (40b484 <etharp_arp_input+0x164>)
  40b37a:	4798      	blx	r3
    return;
  40b37c:	e07f      	b.n	40b47e <etharp_arp_input+0x15e>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  40b37e:	69fb      	ldr	r3, [r7, #28]
  40b380:	330e      	adds	r3, #14
  40b382:	681b      	ldr	r3, [r3, #0]
  40b384:	61bb      	str	r3, [r7, #24]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  40b386:	69fb      	ldr	r3, [r7, #28]
  40b388:	3318      	adds	r3, #24
  40b38a:	681b      	ldr	r3, [r3, #0]
  40b38c:	617b      	str	r3, [r7, #20]

  /* this interface is not configured? */
  if (ip_addr_isany(&netif->ip_addr)) {
  40b38e:	68fb      	ldr	r3, [r7, #12]
  40b390:	3304      	adds	r3, #4
  40b392:	2b00      	cmp	r3, #0
  40b394:	d003      	beq.n	40b39e <etharp_arp_input+0x7e>
  40b396:	68fb      	ldr	r3, [r7, #12]
  40b398:	685b      	ldr	r3, [r3, #4]
  40b39a:	2b00      	cmp	r3, #0
  40b39c:	d103      	bne.n	40b3a6 <etharp_arp_input+0x86>
    for_us = 0;
  40b39e:	2300      	movs	r3, #0
  40b3a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b3a4:	e009      	b.n	40b3ba <etharp_arp_input+0x9a>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip_addr_cmp(&dipaddr, &(netif->ip_addr));
  40b3a6:	697a      	ldr	r2, [r7, #20]
  40b3a8:	68fb      	ldr	r3, [r7, #12]
  40b3aa:	685b      	ldr	r3, [r3, #4]
  40b3ac:	429a      	cmp	r2, r3
  40b3ae:	bf0c      	ite	eq
  40b3b0:	2301      	moveq	r3, #1
  40b3b2:	2300      	movne	r3, #0
  40b3b4:	b2db      	uxtb	r3, r3
  40b3b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  40b3ba:	69fb      	ldr	r3, [r7, #28]
  40b3bc:	f103 0208 	add.w	r2, r3, #8
  40b3c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b3c4:	2b00      	cmp	r3, #0
  40b3c6:	d001      	beq.n	40b3cc <etharp_arp_input+0xac>
  40b3c8:	2301      	movs	r3, #1
  40b3ca:	e000      	b.n	40b3ce <etharp_arp_input+0xae>
  40b3cc:	2302      	movs	r3, #2
  40b3ce:	f107 0118 	add.w	r1, r7, #24
  40b3d2:	68f8      	ldr	r0, [r7, #12]
  40b3d4:	4c2c      	ldr	r4, [pc, #176]	; (40b488 <etharp_arp_input+0x168>)
  40b3d6:	47a0      	blx	r4
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  40b3d8:	69fb      	ldr	r3, [r7, #28]
  40b3da:	88db      	ldrh	r3, [r3, #6]
  40b3dc:	b29b      	uxth	r3, r3
  40b3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40b3e2:	d003      	beq.n	40b3ec <etharp_arp_input+0xcc>
  40b3e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40b3e8:	d03f      	beq.n	40b46a <etharp_arp_input+0x14a>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"\n", htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
  40b3ea:	e045      	b.n	40b478 <etharp_arp_input+0x158>
    if (for_us) {
  40b3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  40b3f0:	2b00      	cmp	r3, #0
  40b3f2:	d036      	beq.n	40b462 <etharp_arp_input+0x142>
      hdr->opcode = htons(ARP_REPLY);
  40b3f4:	2002      	movs	r0, #2
  40b3f6:	4b25      	ldr	r3, [pc, #148]	; (40b48c <etharp_arp_input+0x16c>)
  40b3f8:	4798      	blx	r3
  40b3fa:	4603      	mov	r3, r0
  40b3fc:	461a      	mov	r2, r3
  40b3fe:	69fb      	ldr	r3, [r7, #28]
  40b400:	80da      	strh	r2, [r3, #6]
      IPADDR2_COPY(&hdr->dipaddr, &hdr->sipaddr);
  40b402:	69fb      	ldr	r3, [r7, #28]
  40b404:	3318      	adds	r3, #24
  40b406:	69fa      	ldr	r2, [r7, #28]
  40b408:	320e      	adds	r2, #14
  40b40a:	6812      	ldr	r2, [r2, #0]
  40b40c:	601a      	str	r2, [r3, #0]
      IPADDR2_COPY(&hdr->sipaddr, &netif->ip_addr);
  40b40e:	69fb      	ldr	r3, [r7, #28]
  40b410:	330e      	adds	r3, #14
  40b412:	68fa      	ldr	r2, [r7, #12]
  40b414:	3204      	adds	r2, #4
  40b416:	6812      	ldr	r2, [r2, #0]
  40b418:	601a      	str	r2, [r3, #0]
      ETHADDR16_COPY(&hdr->dhwaddr, &hdr->shwaddr);
  40b41a:	69fb      	ldr	r3, [r7, #28]
  40b41c:	f103 0012 	add.w	r0, r3, #18
  40b420:	69fb      	ldr	r3, [r7, #28]
  40b422:	3308      	adds	r3, #8
  40b424:	2206      	movs	r2, #6
  40b426:	4619      	mov	r1, r3
  40b428:	4b19      	ldr	r3, [pc, #100]	; (40b490 <etharp_arp_input+0x170>)
  40b42a:	4798      	blx	r3
      ETHADDR16_COPY(&ethhdr->dest, &hdr->shwaddr);
  40b42c:	6a38      	ldr	r0, [r7, #32]
  40b42e:	69fb      	ldr	r3, [r7, #28]
  40b430:	3308      	adds	r3, #8
  40b432:	2206      	movs	r2, #6
  40b434:	4619      	mov	r1, r3
  40b436:	4b16      	ldr	r3, [pc, #88]	; (40b490 <etharp_arp_input+0x170>)
  40b438:	4798      	blx	r3
      ETHADDR16_COPY(&hdr->shwaddr, ethaddr);
  40b43a:	69fb      	ldr	r3, [r7, #28]
  40b43c:	3308      	adds	r3, #8
  40b43e:	2206      	movs	r2, #6
  40b440:	68b9      	ldr	r1, [r7, #8]
  40b442:	4618      	mov	r0, r3
  40b444:	4b12      	ldr	r3, [pc, #72]	; (40b490 <etharp_arp_input+0x170>)
  40b446:	4798      	blx	r3
      ETHADDR16_COPY(&ethhdr->src, ethaddr);
  40b448:	6a3b      	ldr	r3, [r7, #32]
  40b44a:	3306      	adds	r3, #6
  40b44c:	2206      	movs	r2, #6
  40b44e:	68b9      	ldr	r1, [r7, #8]
  40b450:	4618      	mov	r0, r3
  40b452:	4b0f      	ldr	r3, [pc, #60]	; (40b490 <etharp_arp_input+0x170>)
  40b454:	4798      	blx	r3
      netif->linkoutput(netif, p);
  40b456:	68fb      	ldr	r3, [r7, #12]
  40b458:	699b      	ldr	r3, [r3, #24]
  40b45a:	6879      	ldr	r1, [r7, #4]
  40b45c:	68f8      	ldr	r0, [r7, #12]
  40b45e:	4798      	blx	r3
    break;
  40b460:	e00a      	b.n	40b478 <etharp_arp_input+0x158>
    } else if (ip_addr_isany(&netif->ip_addr)) {
  40b462:	68fb      	ldr	r3, [r7, #12]
  40b464:	3304      	adds	r3, #4
  40b466:	2b00      	cmp	r3, #0
    break;
  40b468:	e006      	b.n	40b478 <etharp_arp_input+0x158>
    dhcp_arp_reply(netif, &sipaddr);
  40b46a:	f107 0318 	add.w	r3, r7, #24
  40b46e:	4619      	mov	r1, r3
  40b470:	68f8      	ldr	r0, [r7, #12]
  40b472:	4b08      	ldr	r3, [pc, #32]	; (40b494 <etharp_arp_input+0x174>)
  40b474:	4798      	blx	r3
    break;
  40b476:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
  40b478:	6878      	ldr	r0, [r7, #4]
  40b47a:	4b02      	ldr	r3, [pc, #8]	; (40b484 <etharp_arp_input+0x164>)
  40b47c:	4798      	blx	r3
}
  40b47e:	372c      	adds	r7, #44	; 0x2c
  40b480:	46bd      	mov	sp, r7
  40b482:	bd90      	pop	{r4, r7, pc}
  40b484:	00405b81 	.word	0x00405b81
  40b488:	0040b189 	.word	0x0040b189
  40b48c:	00401f99 	.word	0x00401f99
  40b490:	0040cd79 	.word	0x0040cd79
  40b494:	004026d9 	.word	0x004026d9

0040b498 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  40b498:	b590      	push	{r4, r7, lr}
  40b49a:	b085      	sub	sp, #20
  40b49c:	af00      	add	r7, sp, #0
  40b49e:	60f8      	str	r0, [r7, #12]
  40b4a0:	60b9      	str	r1, [r7, #8]
  40b4a2:	4613      	mov	r3, r2
  40b4a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b4a6:	79fa      	ldrb	r2, [r7, #7]
  40b4a8:	4921      	ldr	r1, [pc, #132]	; (40b530 <etharp_output_to_arp_index+0x98>)
  40b4aa:	4613      	mov	r3, r2
  40b4ac:	009b      	lsls	r3, r3, #2
  40b4ae:	4413      	add	r3, r2
  40b4b0:	009b      	lsls	r3, r3, #2
  40b4b2:	440b      	add	r3, r1
  40b4b4:	3312      	adds	r3, #18
  40b4b6:	781b      	ldrb	r3, [r3, #0]
  40b4b8:	2b02      	cmp	r3, #2
  40b4ba:	d123      	bne.n	40b504 <etharp_output_to_arp_index+0x6c>
      (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED)) {
  40b4bc:	79fa      	ldrb	r2, [r7, #7]
  40b4be:	491c      	ldr	r1, [pc, #112]	; (40b530 <etharp_output_to_arp_index+0x98>)
  40b4c0:	4613      	mov	r3, r2
  40b4c2:	009b      	lsls	r3, r3, #2
  40b4c4:	4413      	add	r3, r2
  40b4c6:	009b      	lsls	r3, r3, #2
  40b4c8:	440b      	add	r3, r1
  40b4ca:	3313      	adds	r3, #19
  40b4cc:	781b      	ldrb	r3, [r3, #0]
  if ((arp_table[arp_idx].state == ETHARP_STATE_STABLE) && 
  40b4ce:	2be3      	cmp	r3, #227	; 0xe3
  40b4d0:	d918      	bls.n	40b504 <etharp_output_to_arp_index+0x6c>
    if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  40b4d2:	79fa      	ldrb	r2, [r7, #7]
  40b4d4:	4613      	mov	r3, r2
  40b4d6:	009b      	lsls	r3, r3, #2
  40b4d8:	4413      	add	r3, r2
  40b4da:	009b      	lsls	r3, r3, #2
  40b4dc:	4a14      	ldr	r2, [pc, #80]	; (40b530 <etharp_output_to_arp_index+0x98>)
  40b4de:	4413      	add	r3, r2
  40b4e0:	3304      	adds	r3, #4
  40b4e2:	4619      	mov	r1, r3
  40b4e4:	68f8      	ldr	r0, [r7, #12]
  40b4e6:	4b13      	ldr	r3, [pc, #76]	; (40b534 <etharp_output_to_arp_index+0x9c>)
  40b4e8:	4798      	blx	r3
  40b4ea:	4603      	mov	r3, r0
  40b4ec:	2b00      	cmp	r3, #0
  40b4ee:	d109      	bne.n	40b504 <etharp_output_to_arp_index+0x6c>
      arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING;
  40b4f0:	79fa      	ldrb	r2, [r7, #7]
  40b4f2:	490f      	ldr	r1, [pc, #60]	; (40b530 <etharp_output_to_arp_index+0x98>)
  40b4f4:	4613      	mov	r3, r2
  40b4f6:	009b      	lsls	r3, r3, #2
  40b4f8:	4413      	add	r3, r2
  40b4fa:	009b      	lsls	r3, r3, #2
  40b4fc:	440b      	add	r3, r1
  40b4fe:	3312      	adds	r3, #18
  40b500:	2203      	movs	r2, #3
  40b502:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b504:	68fb      	ldr	r3, [r7, #12]
  40b506:	f103 0127 	add.w	r1, r3, #39	; 0x27
    &arp_table[arp_idx].ethaddr);
  40b50a:	79fa      	ldrb	r2, [r7, #7]
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr),
  40b50c:	4613      	mov	r3, r2
  40b50e:	009b      	lsls	r3, r3, #2
  40b510:	4413      	add	r3, r2
  40b512:	009b      	lsls	r3, r3, #2
  40b514:	3308      	adds	r3, #8
  40b516:	4a06      	ldr	r2, [pc, #24]	; (40b530 <etharp_output_to_arp_index+0x98>)
  40b518:	4413      	add	r3, r2
  40b51a:	3304      	adds	r3, #4
  40b51c:	460a      	mov	r2, r1
  40b51e:	68b9      	ldr	r1, [r7, #8]
  40b520:	68f8      	ldr	r0, [r7, #12]
  40b522:	4c05      	ldr	r4, [pc, #20]	; (40b538 <etharp_output_to_arp_index+0xa0>)
  40b524:	47a0      	blx	r4
  40b526:	4603      	mov	r3, r0
}
  40b528:	4618      	mov	r0, r3
  40b52a:	3714      	adds	r7, #20
  40b52c:	46bd      	mov	sp, r7
  40b52e:	bd90      	pop	{r4, r7, pc}
  40b530:	204025fc 	.word	0x204025fc
  40b534:	0040b9fd 	.word	0x0040b9fd
  40b538:	0040b135 	.word	0x0040b135

0040b53c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or etharp_send_ip().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, ip_addr_t *ipaddr)
{
  40b53c:	b590      	push	{r4, r7, lr}
  40b53e:	b089      	sub	sp, #36	; 0x24
  40b540:	af00      	add	r7, sp, #0
  40b542:	60f8      	str	r0, [r7, #12]
  40b544:	60b9      	str	r1, [r7, #8]
  40b546:	607a      	str	r2, [r7, #4]
  struct eth_addr *dest;
  struct eth_addr mcastaddr;
  ip_addr_t *dst_addr = ipaddr;
  40b548:	687b      	ldr	r3, [r7, #4]
  40b54a:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  LWIP_ASSERT("q != NULL", q != NULL);
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);

  /* make room for Ethernet header - should not fail */
  if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
  40b54c:	210e      	movs	r1, #14
  40b54e:	68b8      	ldr	r0, [r7, #8]
  40b550:	4b5d      	ldr	r3, [pc, #372]	; (40b6c8 <etharp_output+0x18c>)
  40b552:	4798      	blx	r3
  40b554:	4603      	mov	r3, r0
  40b556:	2b00      	cmp	r3, #0
  40b558:	d002      	beq.n	40b560 <etharp_output+0x24>
    /* bail out */
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_output: could not allocate room for header.\n"));
    LINK_STATS_INC(link.lenerr);
    return ERR_BUF;
  40b55a:	f06f 0301 	mvn.w	r3, #1
  40b55e:	e0af      	b.n	40b6c0 <etharp_output+0x184>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip_addr_isbroadcast(ipaddr, netif)) {
  40b560:	687b      	ldr	r3, [r7, #4]
  40b562:	681b      	ldr	r3, [r3, #0]
  40b564:	68f9      	ldr	r1, [r7, #12]
  40b566:	4618      	mov	r0, r3
  40b568:	4b58      	ldr	r3, [pc, #352]	; (40b6cc <etharp_output+0x190>)
  40b56a:	4798      	blx	r3
  40b56c:	4603      	mov	r3, r0
  40b56e:	2b00      	cmp	r3, #0
  40b570:	d002      	beq.n	40b578 <etharp_output+0x3c>
    /* broadcast on Ethernet also */
    dest = (struct eth_addr *)&ethbroadcast;
  40b572:	4b57      	ldr	r3, [pc, #348]	; (40b6d0 <etharp_output+0x194>)
  40b574:	61fb      	str	r3, [r7, #28]
  40b576:	e09a      	b.n	40b6ae <etharp_output+0x172>
  /* multicast destination IP address? */
  } else if (ip_addr_ismulticast(ipaddr)) {
  40b578:	687b      	ldr	r3, [r7, #4]
  40b57a:	681b      	ldr	r3, [r3, #0]
  40b57c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40b580:	2be0      	cmp	r3, #224	; 0xe0
  40b582:	d116      	bne.n	40b5b2 <etharp_output+0x76>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_MULTICAST_ADDR_0;
  40b584:	2301      	movs	r3, #1
  40b586:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_MULTICAST_ADDR_1;
  40b588:	2300      	movs	r3, #0
  40b58a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_MULTICAST_ADDR_2;
  40b58c:	235e      	movs	r3, #94	; 0x5e
  40b58e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  40b590:	687b      	ldr	r3, [r7, #4]
  40b592:	3301      	adds	r3, #1
  40b594:	781b      	ldrb	r3, [r3, #0]
  40b596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40b59a:	b2db      	uxtb	r3, r3
  40b59c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  40b59e:	687b      	ldr	r3, [r7, #4]
  40b5a0:	789b      	ldrb	r3, [r3, #2]
  40b5a2:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  40b5a4:	687b      	ldr	r3, [r7, #4]
  40b5a6:	78db      	ldrb	r3, [r3, #3]
  40b5a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  40b5aa:	f107 0310 	add.w	r3, r7, #16
  40b5ae:	61fb      	str	r3, [r7, #28]
  40b5b0:	e07d      	b.n	40b6ae <etharp_output+0x172>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b5b2:	687b      	ldr	r3, [r7, #4]
  40b5b4:	681a      	ldr	r2, [r3, #0]
  40b5b6:	68fb      	ldr	r3, [r7, #12]
  40b5b8:	685b      	ldr	r3, [r3, #4]
  40b5ba:	405a      	eors	r2, r3
  40b5bc:	68fb      	ldr	r3, [r7, #12]
  40b5be:	689b      	ldr	r3, [r3, #8]
  40b5c0:	4013      	ands	r3, r2
  40b5c2:	2b00      	cmp	r3, #0
  40b5c4:	d015      	beq.n	40b5f2 <etharp_output+0xb6>
        !ip_addr_islinklocal(ipaddr)) {
  40b5c6:	687b      	ldr	r3, [r7, #4]
  40b5c8:	681b      	ldr	r3, [r3, #0]
  40b5ca:	b29b      	uxth	r3, r3
    if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask)) &&
  40b5cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
  40b5d0:	4293      	cmp	r3, r2
  40b5d2:	d00e      	beq.n	40b5f2 <etharp_output+0xb6>
         router for forwarding". */
      if (!ip_addr_islinklocal(&iphdr->src))
#endif /* LWIP_AUTOIP */
      {
        /* interface has default gateway? */
        if (!ip_addr_isany(&netif->gw)) {
  40b5d4:	68fb      	ldr	r3, [r7, #12]
  40b5d6:	330c      	adds	r3, #12
  40b5d8:	2b00      	cmp	r3, #0
  40b5da:	d007      	beq.n	40b5ec <etharp_output+0xb0>
  40b5dc:	68fb      	ldr	r3, [r7, #12]
  40b5de:	68db      	ldr	r3, [r3, #12]
  40b5e0:	2b00      	cmp	r3, #0
  40b5e2:	d003      	beq.n	40b5ec <etharp_output+0xb0>
          /* send to hardware address of default gateway IP address */
          dst_addr = &(netif->gw);
  40b5e4:	68fb      	ldr	r3, [r7, #12]
  40b5e6:	330c      	adds	r3, #12
  40b5e8:	61bb      	str	r3, [r7, #24]
  40b5ea:	e002      	b.n	40b5f2 <etharp_output+0xb6>
        /* no default gateway available */
        } else {
          /* no route to destination error (default gateway missing) */
          return ERR_RTE;
  40b5ec:	f06f 0303 	mvn.w	r3, #3
  40b5f0:	e066      	b.n	40b6c0 <etharp_output+0x184>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b5f2:	4b38      	ldr	r3, [pc, #224]	; (40b6d4 <etharp_output+0x198>)
  40b5f4:	781b      	ldrb	r3, [r3, #0]
  40b5f6:	4619      	mov	r1, r3
  40b5f8:	4a37      	ldr	r2, [pc, #220]	; (40b6d8 <etharp_output+0x19c>)
  40b5fa:	460b      	mov	r3, r1
  40b5fc:	009b      	lsls	r3, r3, #2
  40b5fe:	440b      	add	r3, r1
  40b600:	009b      	lsls	r3, r3, #2
  40b602:	4413      	add	r3, r2
  40b604:	3312      	adds	r3, #18
  40b606:	781b      	ldrb	r3, [r3, #0]
  40b608:	2b01      	cmp	r3, #1
  40b60a:	d917      	bls.n	40b63c <etharp_output+0x100>
            (ip_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  40b60c:	69bb      	ldr	r3, [r7, #24]
  40b60e:	681a      	ldr	r2, [r3, #0]
  40b610:	4b30      	ldr	r3, [pc, #192]	; (40b6d4 <etharp_output+0x198>)
  40b612:	781b      	ldrb	r3, [r3, #0]
  40b614:	4618      	mov	r0, r3
  40b616:	4930      	ldr	r1, [pc, #192]	; (40b6d8 <etharp_output+0x19c>)
  40b618:	4603      	mov	r3, r0
  40b61a:	009b      	lsls	r3, r3, #2
  40b61c:	4403      	add	r3, r0
  40b61e:	009b      	lsls	r3, r3, #2
  40b620:	440b      	add	r3, r1
  40b622:	3304      	adds	r3, #4
  40b624:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  40b626:	429a      	cmp	r2, r3
  40b628:	d108      	bne.n	40b63c <etharp_output+0x100>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  40b62a:	4b2a      	ldr	r3, [pc, #168]	; (40b6d4 <etharp_output+0x198>)
  40b62c:	781b      	ldrb	r3, [r3, #0]
  40b62e:	461a      	mov	r2, r3
  40b630:	68b9      	ldr	r1, [r7, #8]
  40b632:	68f8      	ldr	r0, [r7, #12]
  40b634:	4b29      	ldr	r3, [pc, #164]	; (40b6dc <etharp_output+0x1a0>)
  40b636:	4798      	blx	r3
  40b638:	4603      	mov	r3, r0
  40b63a:	e041      	b.n	40b6c0 <etharp_output+0x184>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b63c:	2300      	movs	r3, #0
  40b63e:	75fb      	strb	r3, [r7, #23]
  40b640:	e02a      	b.n	40b698 <etharp_output+0x15c>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b642:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b646:	4924      	ldr	r1, [pc, #144]	; (40b6d8 <etharp_output+0x19c>)
  40b648:	4613      	mov	r3, r2
  40b64a:	009b      	lsls	r3, r3, #2
  40b64c:	4413      	add	r3, r2
  40b64e:	009b      	lsls	r3, r3, #2
  40b650:	440b      	add	r3, r1
  40b652:	3312      	adds	r3, #18
  40b654:	781b      	ldrb	r3, [r3, #0]
  40b656:	2b01      	cmp	r3, #1
  40b658:	d918      	bls.n	40b68c <etharp_output+0x150>
          (ip_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  40b65a:	69bb      	ldr	r3, [r7, #24]
  40b65c:	6819      	ldr	r1, [r3, #0]
  40b65e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b662:	481d      	ldr	r0, [pc, #116]	; (40b6d8 <etharp_output+0x19c>)
  40b664:	4613      	mov	r3, r2
  40b666:	009b      	lsls	r3, r3, #2
  40b668:	4413      	add	r3, r2
  40b66a:	009b      	lsls	r3, r3, #2
  40b66c:	4403      	add	r3, r0
  40b66e:	3304      	adds	r3, #4
  40b670:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  40b672:	4299      	cmp	r1, r3
  40b674:	d10a      	bne.n	40b68c <etharp_output+0x150>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  40b676:	7dfa      	ldrb	r2, [r7, #23]
  40b678:	4b16      	ldr	r3, [pc, #88]	; (40b6d4 <etharp_output+0x198>)
  40b67a:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
  40b67c:	7dfb      	ldrb	r3, [r7, #23]
  40b67e:	461a      	mov	r2, r3
  40b680:	68b9      	ldr	r1, [r7, #8]
  40b682:	68f8      	ldr	r0, [r7, #12]
  40b684:	4b15      	ldr	r3, [pc, #84]	; (40b6dc <etharp_output+0x1a0>)
  40b686:	4798      	blx	r3
  40b688:	4603      	mov	r3, r0
  40b68a:	e019      	b.n	40b6c0 <etharp_output+0x184>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  40b68c:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b690:	b2db      	uxtb	r3, r3
  40b692:	3301      	adds	r3, #1
  40b694:	b2db      	uxtb	r3, r3
  40b696:	75fb      	strb	r3, [r7, #23]
  40b698:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b69c:	2b09      	cmp	r3, #9
  40b69e:	ddd0      	ble.n	40b642 <etharp_output+0x106>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  40b6a0:	68ba      	ldr	r2, [r7, #8]
  40b6a2:	69b9      	ldr	r1, [r7, #24]
  40b6a4:	68f8      	ldr	r0, [r7, #12]
  40b6a6:	4b0e      	ldr	r3, [pc, #56]	; (40b6e0 <etharp_output+0x1a4>)
  40b6a8:	4798      	blx	r3
  40b6aa:	4603      	mov	r3, r0
  40b6ac:	e008      	b.n	40b6c0 <etharp_output+0x184>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
  40b6ae:	68fb      	ldr	r3, [r7, #12]
  40b6b0:	f103 0227 	add.w	r2, r3, #39	; 0x27
  40b6b4:	69fb      	ldr	r3, [r7, #28]
  40b6b6:	68b9      	ldr	r1, [r7, #8]
  40b6b8:	68f8      	ldr	r0, [r7, #12]
  40b6ba:	4c0a      	ldr	r4, [pc, #40]	; (40b6e4 <etharp_output+0x1a8>)
  40b6bc:	47a0      	blx	r4
  40b6be:	4603      	mov	r3, r0
}
  40b6c0:	4618      	mov	r0, r3
  40b6c2:	3724      	adds	r7, #36	; 0x24
  40b6c4:	46bd      	mov	sp, r7
  40b6c6:	bd90      	pop	{r4, r7, pc}
  40b6c8:	00405aa5 	.word	0x00405aa5
  40b6cc:	004043d1 	.word	0x004043d1
  40b6d0:	0040fb44 	.word	0x0040fb44
  40b6d4:	204026c4 	.word	0x204026c4
  40b6d8:	204025fc 	.word	0x204025fc
  40b6dc:	0040b499 	.word	0x0040b499
  40b6e0:	0040b6e9 	.word	0x0040b6e9
  40b6e4:	0040b135 	.word	0x0040b135

0040b6e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, ip_addr_t *ipaddr, struct pbuf *q)
{
  40b6e8:	b590      	push	{r4, r7, lr}
  40b6ea:	b08b      	sub	sp, #44	; 0x2c
  40b6ec:	af00      	add	r7, sp, #0
  40b6ee:	60f8      	str	r0, [r7, #12]
  40b6f0:	60b9      	str	r1, [r7, #8]
  40b6f2:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  40b6f4:	68fb      	ldr	r3, [r7, #12]
  40b6f6:	3327      	adds	r3, #39	; 0x27
  40b6f8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_MEM;
  40b6fa:	23ff      	movs	r3, #255	; 0xff
  40b6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40b700:	68bb      	ldr	r3, [r7, #8]
  40b702:	681b      	ldr	r3, [r3, #0]
  40b704:	68f9      	ldr	r1, [r7, #12]
  40b706:	4618      	mov	r0, r3
  40b708:	4b72      	ldr	r3, [pc, #456]	; (40b8d4 <etharp_query+0x1ec>)
  40b70a:	4798      	blx	r3
  40b70c:	4603      	mov	r3, r0
  40b70e:	2b00      	cmp	r3, #0
  40b710:	d10c      	bne.n	40b72c <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40b712:	68bb      	ldr	r3, [r7, #8]
  40b714:	681b      	ldr	r3, [r3, #0]
  40b716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ipaddr, netif) ||
  40b71a:	2be0      	cmp	r3, #224	; 0xe0
  40b71c:	d006      	beq.n	40b72c <etharp_query+0x44>
      ip_addr_ismulticast(ipaddr) ||
  40b71e:	68bb      	ldr	r3, [r7, #8]
  40b720:	2b00      	cmp	r3, #0
  40b722:	d003      	beq.n	40b72c <etharp_query+0x44>
      ip_addr_isany(ipaddr)) {
  40b724:	68bb      	ldr	r3, [r7, #8]
  40b726:	681b      	ldr	r3, [r3, #0]
  40b728:	2b00      	cmp	r3, #0
  40b72a:	d102      	bne.n	40b732 <etharp_query+0x4a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  40b72c:	f06f 030d 	mvn.w	r3, #13
  40b730:	e0cc      	b.n	40b8cc <etharp_query+0x1e4>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD);
  40b732:	2101      	movs	r1, #1
  40b734:	68b8      	ldr	r0, [r7, #8]
  40b736:	4b68      	ldr	r3, [pc, #416]	; (40b8d8 <etharp_query+0x1f0>)
  40b738:	4798      	blx	r3
  40b73a:	4603      	mov	r3, r0
  40b73c:	75fb      	strb	r3, [r7, #23]

  /* could not find or create entry? */
  if (i < 0) {
  40b73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b742:	2b00      	cmp	r3, #0
  40b744:	da02      	bge.n	40b74c <etharp_query+0x64>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
  40b746:	f997 3017 	ldrsb.w	r3, [r7, #23]
  40b74a:	e0bf      	b.n	40b8cc <etharp_query+0x1e4>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  40b74c:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b750:	4962      	ldr	r1, [pc, #392]	; (40b8dc <etharp_query+0x1f4>)
  40b752:	4613      	mov	r3, r2
  40b754:	009b      	lsls	r3, r3, #2
  40b756:	4413      	add	r3, r2
  40b758:	009b      	lsls	r3, r3, #2
  40b75a:	440b      	add	r3, r1
  40b75c:	3312      	adds	r3, #18
  40b75e:	781b      	ldrb	r3, [r3, #0]
  40b760:	2b00      	cmp	r3, #0
  40b762:	d10a      	bne.n	40b77a <etharp_query+0x92>
    arp_table[i].state = ETHARP_STATE_PENDING;
  40b764:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b768:	495c      	ldr	r1, [pc, #368]	; (40b8dc <etharp_query+0x1f4>)
  40b76a:	4613      	mov	r3, r2
  40b76c:	009b      	lsls	r3, r3, #2
  40b76e:	4413      	add	r3, r2
  40b770:	009b      	lsls	r3, r3, #2
  40b772:	440b      	add	r3, r1
  40b774:	3312      	adds	r3, #18
  40b776:	2201      	movs	r2, #1
  40b778:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a pending entry? or an implicit query request? */
  if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
  40b77a:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b77e:	4957      	ldr	r1, [pc, #348]	; (40b8dc <etharp_query+0x1f4>)
  40b780:	4613      	mov	r3, r2
  40b782:	009b      	lsls	r3, r3, #2
  40b784:	4413      	add	r3, r2
  40b786:	009b      	lsls	r3, r3, #2
  40b788:	440b      	add	r3, r1
  40b78a:	3312      	adds	r3, #18
  40b78c:	781b      	ldrb	r3, [r3, #0]
  40b78e:	2b01      	cmp	r3, #1
  40b790:	d002      	beq.n	40b798 <etharp_query+0xb0>
  40b792:	687b      	ldr	r3, [r7, #4]
  40b794:	2b00      	cmp	r3, #0
  40b796:	d10c      	bne.n	40b7b2 <etharp_query+0xca>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  40b798:	68b9      	ldr	r1, [r7, #8]
  40b79a:	68f8      	ldr	r0, [r7, #12]
  40b79c:	4b50      	ldr	r3, [pc, #320]	; (40b8e0 <etharp_query+0x1f8>)
  40b79e:	4798      	blx	r3
  40b7a0:	4603      	mov	r3, r0
  40b7a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  40b7a6:	687b      	ldr	r3, [r7, #4]
  40b7a8:	2b00      	cmp	r3, #0
  40b7aa:	d102      	bne.n	40b7b2 <etharp_query+0xca>
      return result;
  40b7ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
  40b7b0:	e08c      	b.n	40b8cc <etharp_query+0x1e4>
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  40b7b2:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b7b6:	4949      	ldr	r1, [pc, #292]	; (40b8dc <etharp_query+0x1f4>)
  40b7b8:	4613      	mov	r3, r2
  40b7ba:	009b      	lsls	r3, r3, #2
  40b7bc:	4413      	add	r3, r2
  40b7be:	009b      	lsls	r3, r3, #2
  40b7c0:	440b      	add	r3, r1
  40b7c2:	3312      	adds	r3, #18
  40b7c4:	781b      	ldrb	r3, [r3, #0]
  40b7c6:	2b01      	cmp	r3, #1
  40b7c8:	d915      	bls.n	40b7f6 <etharp_query+0x10e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  40b7ca:	7dfa      	ldrb	r2, [r7, #23]
  40b7cc:	4b45      	ldr	r3, [pc, #276]	; (40b8e4 <etharp_query+0x1fc>)
  40b7ce:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
  40b7d0:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b7d4:	4613      	mov	r3, r2
  40b7d6:	009b      	lsls	r3, r3, #2
  40b7d8:	4413      	add	r3, r2
  40b7da:	009b      	lsls	r3, r3, #2
  40b7dc:	3308      	adds	r3, #8
  40b7de:	4a3f      	ldr	r2, [pc, #252]	; (40b8dc <etharp_query+0x1f4>)
  40b7e0:	4413      	add	r3, r2
  40b7e2:	3304      	adds	r3, #4
  40b7e4:	69ba      	ldr	r2, [r7, #24]
  40b7e6:	6879      	ldr	r1, [r7, #4]
  40b7e8:	68f8      	ldr	r0, [r7, #12]
  40b7ea:	4c3f      	ldr	r4, [pc, #252]	; (40b8e8 <etharp_query+0x200>)
  40b7ec:	47a0      	blx	r4
  40b7ee:	4603      	mov	r3, r0
  40b7f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b7f4:	e068      	b.n	40b8c8 <etharp_query+0x1e0>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  40b7f6:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b7fa:	4938      	ldr	r1, [pc, #224]	; (40b8dc <etharp_query+0x1f4>)
  40b7fc:	4613      	mov	r3, r2
  40b7fe:	009b      	lsls	r3, r3, #2
  40b800:	4413      	add	r3, r2
  40b802:	009b      	lsls	r3, r3, #2
  40b804:	440b      	add	r3, r1
  40b806:	3312      	adds	r3, #18
  40b808:	781b      	ldrb	r3, [r3, #0]
  40b80a:	2b01      	cmp	r3, #1
  40b80c:	d15c      	bne.n	40b8c8 <etharp_query+0x1e0>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  40b80e:	2300      	movs	r3, #0
  40b810:	61fb      	str	r3, [r7, #28]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  40b812:	687b      	ldr	r3, [r7, #4]
  40b814:	623b      	str	r3, [r7, #32]
    while (p) {
  40b816:	e009      	b.n	40b82c <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
      if(p->type != PBUF_ROM) {
  40b818:	6a3b      	ldr	r3, [r7, #32]
  40b81a:	7b1b      	ldrb	r3, [r3, #12]
  40b81c:	2b01      	cmp	r3, #1
  40b81e:	d002      	beq.n	40b826 <etharp_query+0x13e>
        copy_needed = 1;
  40b820:	2301      	movs	r3, #1
  40b822:	61fb      	str	r3, [r7, #28]
        break;
  40b824:	e005      	b.n	40b832 <etharp_query+0x14a>
      }
      p = p->next;
  40b826:	6a3b      	ldr	r3, [r7, #32]
  40b828:	681b      	ldr	r3, [r3, #0]
  40b82a:	623b      	str	r3, [r7, #32]
    while (p) {
  40b82c:	6a3b      	ldr	r3, [r7, #32]
  40b82e:	2b00      	cmp	r3, #0
  40b830:	d1f2      	bne.n	40b818 <etharp_query+0x130>
    }
    if(copy_needed) {
  40b832:	69fb      	ldr	r3, [r7, #28]
  40b834:	2b00      	cmp	r3, #0
  40b836:	d017      	beq.n	40b868 <etharp_query+0x180>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  40b838:	6a3b      	ldr	r3, [r7, #32]
  40b83a:	891b      	ldrh	r3, [r3, #8]
  40b83c:	2200      	movs	r2, #0
  40b83e:	4619      	mov	r1, r3
  40b840:	2003      	movs	r0, #3
  40b842:	4b2a      	ldr	r3, [pc, #168]	; (40b8ec <etharp_query+0x204>)
  40b844:	4798      	blx	r3
  40b846:	6238      	str	r0, [r7, #32]
      if(p != NULL) {
  40b848:	6a3b      	ldr	r3, [r7, #32]
  40b84a:	2b00      	cmp	r3, #0
  40b84c:	d011      	beq.n	40b872 <etharp_query+0x18a>
        if (pbuf_copy(p, q) != ERR_OK) {
  40b84e:	6879      	ldr	r1, [r7, #4]
  40b850:	6a38      	ldr	r0, [r7, #32]
  40b852:	4b27      	ldr	r3, [pc, #156]	; (40b8f0 <etharp_query+0x208>)
  40b854:	4798      	blx	r3
  40b856:	4603      	mov	r3, r0
  40b858:	2b00      	cmp	r3, #0
  40b85a:	d00a      	beq.n	40b872 <etharp_query+0x18a>
          pbuf_free(p);
  40b85c:	6a38      	ldr	r0, [r7, #32]
  40b85e:	4b25      	ldr	r3, [pc, #148]	; (40b8f4 <etharp_query+0x20c>)
  40b860:	4798      	blx	r3
          p = NULL;
  40b862:	2300      	movs	r3, #0
  40b864:	623b      	str	r3, [r7, #32]
  40b866:	e004      	b.n	40b872 <etharp_query+0x18a>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  40b868:	687b      	ldr	r3, [r7, #4]
  40b86a:	623b      	str	r3, [r7, #32]
      pbuf_ref(p);
  40b86c:	6a38      	ldr	r0, [r7, #32]
  40b86e:	4b22      	ldr	r3, [pc, #136]	; (40b8f8 <etharp_query+0x210>)
  40b870:	4798      	blx	r3
    }
    /* packet could be taken over? */
    if (p != NULL) {
  40b872:	6a3b      	ldr	r3, [r7, #32]
  40b874:	2b00      	cmp	r3, #0
  40b876:	d024      	beq.n	40b8c2 <etharp_query+0x1da>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
  40b878:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b87c:	4917      	ldr	r1, [pc, #92]	; (40b8dc <etharp_query+0x1f4>)
  40b87e:	4613      	mov	r3, r2
  40b880:	009b      	lsls	r3, r3, #2
  40b882:	4413      	add	r3, r2
  40b884:	009b      	lsls	r3, r3, #2
  40b886:	440b      	add	r3, r1
  40b888:	681b      	ldr	r3, [r3, #0]
  40b88a:	2b00      	cmp	r3, #0
  40b88c:	d00b      	beq.n	40b8a6 <etharp_query+0x1be>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
  40b88e:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b892:	4912      	ldr	r1, [pc, #72]	; (40b8dc <etharp_query+0x1f4>)
  40b894:	4613      	mov	r3, r2
  40b896:	009b      	lsls	r3, r3, #2
  40b898:	4413      	add	r3, r2
  40b89a:	009b      	lsls	r3, r3, #2
  40b89c:	440b      	add	r3, r1
  40b89e:	681b      	ldr	r3, [r3, #0]
  40b8a0:	4618      	mov	r0, r3
  40b8a2:	4b14      	ldr	r3, [pc, #80]	; (40b8f4 <etharp_query+0x20c>)
  40b8a4:	4798      	blx	r3
      }
      arp_table[i].q = p;
  40b8a6:	f997 2017 	ldrsb.w	r2, [r7, #23]
  40b8aa:	490c      	ldr	r1, [pc, #48]	; (40b8dc <etharp_query+0x1f4>)
  40b8ac:	4613      	mov	r3, r2
  40b8ae:	009b      	lsls	r3, r3, #2
  40b8b0:	4413      	add	r3, r2
  40b8b2:	009b      	lsls	r3, r3, #2
  40b8b4:	440b      	add	r3, r1
  40b8b6:	6a3a      	ldr	r2, [r7, #32]
  40b8b8:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
  40b8ba:	2300      	movs	r3, #0
  40b8bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  40b8c0:	e002      	b.n	40b8c8 <etharp_query+0x1e0>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  40b8c2:	23ff      	movs	r3, #255	; 0xff
  40b8c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
  40b8c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
  40b8cc:	4618      	mov	r0, r3
  40b8ce:	372c      	adds	r7, #44	; 0x2c
  40b8d0:	46bd      	mov	sp, r7
  40b8d2:	bd90      	pop	{r4, r7, pc}
  40b8d4:	004043d1 	.word	0x004043d1
  40b8d8:	0040af41 	.word	0x0040af41
  40b8dc:	204025fc 	.word	0x204025fc
  40b8e0:	0040b9fd 	.word	0x0040b9fd
  40b8e4:	204026c4 	.word	0x204026c4
  40b8e8:	0040b135 	.word	0x0040b135
  40b8ec:	004057dd 	.word	0x004057dd
  40b8f0:	00405ced 	.word	0x00405ced
  40b8f4:	00405b81 	.word	0x00405b81
  40b8f8:	00405c3f 	.word	0x00405c3f

0040b8fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip_addr_t *ipdst_addr,
           const u16_t opcode)
{
  40b8fc:	b580      	push	{r7, lr}
  40b8fe:	b088      	sub	sp, #32
  40b900:	af00      	add	r7, sp, #0
  40b902:	60f8      	str	r0, [r7, #12]
  40b904:	60b9      	str	r1, [r7, #8]
  40b906:	607a      	str	r2, [r7, #4]
  40b908:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
  40b90a:	2300      	movs	r3, #0
  40b90c:	77fb      	strb	r3, [r7, #31]
#endif /* LWIP_AUTOIP */

  LWIP_ASSERT("netif != NULL", netif != NULL);

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
  40b90e:	2200      	movs	r2, #0
  40b910:	212a      	movs	r1, #42	; 0x2a
  40b912:	2003      	movs	r0, #3
  40b914:	4b35      	ldr	r3, [pc, #212]	; (40b9ec <etharp_raw+0xf0>)
  40b916:	4798      	blx	r3
  40b918:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  40b91a:	69bb      	ldr	r3, [r7, #24]
  40b91c:	2b00      	cmp	r3, #0
  40b91e:	d102      	bne.n	40b926 <etharp_raw+0x2a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  40b920:	f04f 33ff 	mov.w	r3, #4294967295
  40b924:	e05d      	b.n	40b9e2 <etharp_raw+0xe6>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
              (p->len >= SIZEOF_ETHARP_PACKET));

  ethhdr = (struct eth_hdr *)p->payload;
  40b926:	69bb      	ldr	r3, [r7, #24]
  40b928:	685b      	ldr	r3, [r3, #4]
  40b92a:	617b      	str	r3, [r7, #20]
  hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
  40b92c:	697b      	ldr	r3, [r7, #20]
  40b92e:	330e      	adds	r3, #14
  40b930:	613b      	str	r3, [r7, #16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = htons(opcode);
  40b932:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
  40b934:	4618      	mov	r0, r3
  40b936:	4b2e      	ldr	r3, [pc, #184]	; (40b9f0 <etharp_raw+0xf4>)
  40b938:	4798      	blx	r3
  40b93a:	4603      	mov	r3, r0
  40b93c:	461a      	mov	r2, r3
  40b93e:	693b      	ldr	r3, [r7, #16]
  40b940:	80da      	strh	r2, [r3, #6]
   * 'sender IP address' MUST be sent using link-layer broadcast instead of
   * link-layer unicast. (See RFC3927 Section 2.5, last paragraph) */
  ethdst_hwaddr = ip_addr_islinklocal(ipsrc_addr) ? (u8_t*)(ethbroadcast.addr) : ethdst_addr->addr;
#endif /* LWIP_AUTOIP */
  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  40b942:	693b      	ldr	r3, [r7, #16]
  40b944:	3308      	adds	r3, #8
  40b946:	2206      	movs	r2, #6
  40b948:	6839      	ldr	r1, [r7, #0]
  40b94a:	4618      	mov	r0, r3
  40b94c:	4b29      	ldr	r3, [pc, #164]	; (40b9f4 <etharp_raw+0xf8>)
  40b94e:	4798      	blx	r3
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  40b950:	693b      	ldr	r3, [r7, #16]
  40b952:	3312      	adds	r3, #18
  40b954:	2206      	movs	r2, #6
  40b956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
  40b958:	4618      	mov	r0, r3
  40b95a:	4b26      	ldr	r3, [pc, #152]	; (40b9f4 <etharp_raw+0xf8>)
  40b95c:	4798      	blx	r3
  /* Write the Ethernet MAC-Addresses */
#if LWIP_AUTOIP
  ETHADDR16_COPY(&ethhdr->dest, ethdst_hwaddr);
#else  /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->dest, ethdst_addr);
  40b95e:	697b      	ldr	r3, [r7, #20]
  40b960:	2206      	movs	r2, #6
  40b962:	6879      	ldr	r1, [r7, #4]
  40b964:	4618      	mov	r0, r3
  40b966:	4b23      	ldr	r3, [pc, #140]	; (40b9f4 <etharp_raw+0xf8>)
  40b968:	4798      	blx	r3
#endif /* LWIP_AUTOIP */
  ETHADDR16_COPY(&ethhdr->src, ethsrc_addr);
  40b96a:	697b      	ldr	r3, [r7, #20]
  40b96c:	3306      	adds	r3, #6
  40b96e:	2206      	movs	r2, #6
  40b970:	68b9      	ldr	r1, [r7, #8]
  40b972:	4618      	mov	r0, r3
  40b974:	4b1f      	ldr	r3, [pc, #124]	; (40b9f4 <etharp_raw+0xf8>)
  40b976:	4798      	blx	r3
  /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
   * structure packing. */ 
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  40b978:	693b      	ldr	r3, [r7, #16]
  40b97a:	330e      	adds	r3, #14
  40b97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40b97e:	6812      	ldr	r2, [r2, #0]
  40b980:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  40b982:	693b      	ldr	r3, [r7, #16]
  40b984:	3318      	adds	r3, #24
  40b986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  40b988:	6812      	ldr	r2, [r2, #0]
  40b98a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  40b98c:	693b      	ldr	r3, [r7, #16]
  40b98e:	2200      	movs	r2, #0
  40b990:	701a      	strb	r2, [r3, #0]
  40b992:	2200      	movs	r2, #0
  40b994:	f042 0201 	orr.w	r2, r2, #1
  40b998:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  40b99a:	693b      	ldr	r3, [r7, #16]
  40b99c:	2200      	movs	r2, #0
  40b99e:	f042 0208 	orr.w	r2, r2, #8
  40b9a2:	709a      	strb	r2, [r3, #2]
  40b9a4:	2200      	movs	r2, #0
  40b9a6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETHARP_HWADDR_LEN;
  40b9a8:	693b      	ldr	r3, [r7, #16]
  40b9aa:	2206      	movs	r2, #6
  40b9ac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip_addr_t);
  40b9ae:	693b      	ldr	r3, [r7, #16]
  40b9b0:	2204      	movs	r2, #4
  40b9b2:	715a      	strb	r2, [r3, #5]

  ethhdr->type = PP_HTONS(ETHTYPE_ARP);
  40b9b4:	697b      	ldr	r3, [r7, #20]
  40b9b6:	2200      	movs	r2, #0
  40b9b8:	f042 0208 	orr.w	r2, r2, #8
  40b9bc:	731a      	strb	r2, [r3, #12]
  40b9be:	2200      	movs	r2, #0
  40b9c0:	f042 0206 	orr.w	r2, r2, #6
  40b9c4:	735a      	strb	r2, [r3, #13]
  /* send ARP query */
  result = netif->linkoutput(netif, p);
  40b9c6:	68fb      	ldr	r3, [r7, #12]
  40b9c8:	699b      	ldr	r3, [r3, #24]
  40b9ca:	69b9      	ldr	r1, [r7, #24]
  40b9cc:	68f8      	ldr	r0, [r7, #12]
  40b9ce:	4798      	blx	r3
  40b9d0:	4603      	mov	r3, r0
  40b9d2:	77fb      	strb	r3, [r7, #31]
  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
  40b9d4:	69b8      	ldr	r0, [r7, #24]
  40b9d6:	4b08      	ldr	r3, [pc, #32]	; (40b9f8 <etharp_raw+0xfc>)
  40b9d8:	4798      	blx	r3
  p = NULL;
  40b9da:	2300      	movs	r3, #0
  40b9dc:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
  40b9de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
  40b9e2:	4618      	mov	r0, r3
  40b9e4:	3720      	adds	r7, #32
  40b9e6:	46bd      	mov	sp, r7
  40b9e8:	bd80      	pop	{r7, pc}
  40b9ea:	bf00      	nop
  40b9ec:	004057dd 	.word	0x004057dd
  40b9f0:	00401f99 	.word	0x00401f99
  40b9f4:	0040cd79 	.word	0x0040cd79
  40b9f8:	00405b81 	.word	0x00405b81

0040b9fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, ip_addr_t *ipaddr)
{
  40b9fc:	b590      	push	{r4, r7, lr}
  40b9fe:	b087      	sub	sp, #28
  40ba00:	af04      	add	r7, sp, #16
  40ba02:	6078      	str	r0, [r7, #4]
  40ba04:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40ba06:	687b      	ldr	r3, [r7, #4]
  40ba08:	f103 0127 	add.w	r1, r3, #39	; 0x27
                    (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
  40ba0c:	687b      	ldr	r3, [r7, #4]
  40ba0e:	f103 0027 	add.w	r0, r3, #39	; 0x27
  40ba12:	687b      	ldr	r3, [r7, #4]
  40ba14:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
  40ba16:	2201      	movs	r2, #1
  40ba18:	9203      	str	r2, [sp, #12]
  40ba1a:	683a      	ldr	r2, [r7, #0]
  40ba1c:	9202      	str	r2, [sp, #8]
  40ba1e:	4a06      	ldr	r2, [pc, #24]	; (40ba38 <etharp_request+0x3c>)
  40ba20:	9201      	str	r2, [sp, #4]
  40ba22:	9300      	str	r3, [sp, #0]
  40ba24:	4603      	mov	r3, r0
  40ba26:	4a05      	ldr	r2, [pc, #20]	; (40ba3c <etharp_request+0x40>)
  40ba28:	6878      	ldr	r0, [r7, #4]
  40ba2a:	4c05      	ldr	r4, [pc, #20]	; (40ba40 <etharp_request+0x44>)
  40ba2c:	47a0      	blx	r4
  40ba2e:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  40ba30:	4618      	mov	r0, r3
  40ba32:	370c      	adds	r7, #12
  40ba34:	46bd      	mov	sp, r7
  40ba36:	bd90      	pop	{r4, r7, pc}
  40ba38:	0040fb4c 	.word	0x0040fb4c
  40ba3c:	0040fb44 	.word	0x0040fb44
  40ba40:	0040b8fd 	.word	0x0040b8fd

0040ba44 <ethernet_input>:
 * @param p the recevied packet, p->payload pointing to the ethernet header
 * @param netif the network interface on which the packet was received
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  40ba44:	b580      	push	{r7, lr}
  40ba46:	b086      	sub	sp, #24
  40ba48:	af00      	add	r7, sp, #0
  40ba4a:	6078      	str	r0, [r7, #4]
  40ba4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  40ba4e:	230e      	movs	r3, #14
  40ba50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  40ba52:	687b      	ldr	r3, [r7, #4]
  40ba54:	895b      	ldrh	r3, [r3, #10]
  40ba56:	2b0e      	cmp	r3, #14
  40ba58:	d961      	bls.n	40bb1e <ethernet_input+0xda>
    ETHARP_STATS_INC(etharp.drop);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  40ba5a:	687b      	ldr	r3, [r7, #4]
  40ba5c:	685b      	ldr	r3, [r3, #4]
  40ba5e:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
     (unsigned)htons(ethhdr->type)));

  type = ethhdr->type;
  40ba60:	693b      	ldr	r3, [r7, #16]
  40ba62:	7b1a      	ldrb	r2, [r3, #12]
  40ba64:	7b5b      	ldrb	r3, [r3, #13]
  40ba66:	021b      	lsls	r3, r3, #8
  40ba68:	4313      	orrs	r3, r2
  40ba6a:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  40ba6c:	693b      	ldr	r3, [r7, #16]
  40ba6e:	781b      	ldrb	r3, [r3, #0]
  40ba70:	f003 0301 	and.w	r3, r3, #1
  40ba74:	2b00      	cmp	r3, #0
  40ba76:	d023      	beq.n	40bac0 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_MULTICAST_ADDR_0) {
  40ba78:	693b      	ldr	r3, [r7, #16]
  40ba7a:	781b      	ldrb	r3, [r3, #0]
  40ba7c:	2b01      	cmp	r3, #1
  40ba7e:	d10f      	bne.n	40baa0 <ethernet_input+0x5c>
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40ba80:	693b      	ldr	r3, [r7, #16]
  40ba82:	785b      	ldrb	r3, [r3, #1]
  40ba84:	2b00      	cmp	r3, #0
  40ba86:	d11b      	bne.n	40bac0 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_MULTICAST_ADDR_2)) {
  40ba88:	693b      	ldr	r3, [r7, #16]
  40ba8a:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_MULTICAST_ADDR_1) &&
  40ba8c:	2b5e      	cmp	r3, #94	; 0x5e
  40ba8e:	d117      	bne.n	40bac0 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  40ba90:	687b      	ldr	r3, [r7, #4]
  40ba92:	7b5b      	ldrb	r3, [r3, #13]
  40ba94:	f043 0310 	orr.w	r3, r3, #16
  40ba98:	b2da      	uxtb	r2, r3
  40ba9a:	687b      	ldr	r3, [r7, #4]
  40ba9c:	735a      	strb	r2, [r3, #13]
  40ba9e:	e00f      	b.n	40bac0 <ethernet_input+0x7c>
      }
    } else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  40baa0:	693b      	ldr	r3, [r7, #16]
  40baa2:	2206      	movs	r2, #6
  40baa4:	4925      	ldr	r1, [pc, #148]	; (40bb3c <ethernet_input+0xf8>)
  40baa6:	4618      	mov	r0, r3
  40baa8:	4b25      	ldr	r3, [pc, #148]	; (40bb40 <ethernet_input+0xfc>)
  40baaa:	4798      	blx	r3
  40baac:	4603      	mov	r3, r0
  40baae:	2b00      	cmp	r3, #0
  40bab0:	d106      	bne.n	40bac0 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  40bab2:	687b      	ldr	r3, [r7, #4]
  40bab4:	7b5b      	ldrb	r3, [r3, #13]
  40bab6:	f043 0308 	orr.w	r3, r3, #8
  40baba:	b2da      	uxtb	r2, r3
  40babc:	687b      	ldr	r3, [r7, #4]
  40babe:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  40bac0:	89fb      	ldrh	r3, [r7, #14]
  40bac2:	2b08      	cmp	r3, #8
  40bac4:	d003      	beq.n	40bace <ethernet_input+0x8a>
  40bac6:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
  40baca:	d017      	beq.n	40bafc <ethernet_input+0xb8>
#endif /* PPPOE_SUPPORT */

    default:
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      goto free_and_return;
  40bacc:	e02e      	b.n	40bb2c <ethernet_input+0xe8>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40bace:	683b      	ldr	r3, [r7, #0]
  40bad0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40bad4:	f003 0320 	and.w	r3, r3, #32
  40bad8:	2b00      	cmp	r3, #0
  40bada:	d022      	beq.n	40bb22 <ethernet_input+0xde>
      if(pbuf_header(p, -ip_hdr_offset)) {
  40badc:	8afb      	ldrh	r3, [r7, #22]
  40bade:	425b      	negs	r3, r3
  40bae0:	b29b      	uxth	r3, r3
  40bae2:	b21b      	sxth	r3, r3
  40bae4:	4619      	mov	r1, r3
  40bae6:	6878      	ldr	r0, [r7, #4]
  40bae8:	4b16      	ldr	r3, [pc, #88]	; (40bb44 <ethernet_input+0x100>)
  40baea:	4798      	blx	r3
  40baec:	4603      	mov	r3, r0
  40baee:	2b00      	cmp	r3, #0
  40baf0:	d119      	bne.n	40bb26 <ethernet_input+0xe2>
        ip_input(p, netif);
  40baf2:	6839      	ldr	r1, [r7, #0]
  40baf4:	6878      	ldr	r0, [r7, #4]
  40baf6:	4b14      	ldr	r3, [pc, #80]	; (40bb48 <ethernet_input+0x104>)
  40baf8:	4798      	blx	r3
      break;
  40bafa:	e00e      	b.n	40bb1a <ethernet_input+0xd6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  40bafc:	683b      	ldr	r3, [r7, #0]
  40bafe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40bb02:	f003 0320 	and.w	r3, r3, #32
  40bb06:	2b00      	cmp	r3, #0
  40bb08:	d00f      	beq.n	40bb2a <ethernet_input+0xe6>
      etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
  40bb0a:	683b      	ldr	r3, [r7, #0]
  40bb0c:	3327      	adds	r3, #39	; 0x27
  40bb0e:	687a      	ldr	r2, [r7, #4]
  40bb10:	4619      	mov	r1, r3
  40bb12:	6838      	ldr	r0, [r7, #0]
  40bb14:	4b0d      	ldr	r3, [pc, #52]	; (40bb4c <ethernet_input+0x108>)
  40bb16:	4798      	blx	r3
      break;
  40bb18:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  40bb1a:	2300      	movs	r3, #0
  40bb1c:	e00a      	b.n	40bb34 <ethernet_input+0xf0>
    goto free_and_return;
  40bb1e:	bf00      	nop
  40bb20:	e004      	b.n	40bb2c <ethernet_input+0xe8>
        goto free_and_return;
  40bb22:	bf00      	nop
  40bb24:	e002      	b.n	40bb2c <ethernet_input+0xe8>
        goto free_and_return;
  40bb26:	bf00      	nop
  40bb28:	e000      	b.n	40bb2c <ethernet_input+0xe8>
        goto free_and_return;
  40bb2a:	bf00      	nop

free_and_return:
  pbuf_free(p);
  40bb2c:	6878      	ldr	r0, [r7, #4]
  40bb2e:	4b08      	ldr	r3, [pc, #32]	; (40bb50 <ethernet_input+0x10c>)
  40bb30:	4798      	blx	r3
  return ERR_OK;
  40bb32:	2300      	movs	r3, #0
}
  40bb34:	4618      	mov	r0, r3
  40bb36:	3718      	adds	r7, #24
  40bb38:	46bd      	mov	sp, r7
  40bb3a:	bd80      	pop	{r7, pc}
  40bb3c:	0040fb44 	.word	0x0040fb44
  40bb40:	0040cd19 	.word	0x0040cd19
  40bb44:	00405aa5 	.word	0x00405aa5
  40bb48:	00403f55 	.word	0x00403f55
  40bb4c:	0040b321 	.word	0x0040b321
  40bb50:	00405b81 	.word	0x00405b81

0040bb54 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  40bb54:	b480      	push	{r7}
  40bb56:	b083      	sub	sp, #12
  40bb58:	af00      	add	r7, sp, #0
  40bb5a:	4603      	mov	r3, r0
  40bb5c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40bb5e:	4909      	ldr	r1, [pc, #36]	; (40bb84 <NVIC_EnableIRQ+0x30>)
  40bb60:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bb64:	095b      	lsrs	r3, r3, #5
  40bb66:	79fa      	ldrb	r2, [r7, #7]
  40bb68:	f002 021f 	and.w	r2, r2, #31
  40bb6c:	2001      	movs	r0, #1
  40bb6e:	fa00 f202 	lsl.w	r2, r0, r2
  40bb72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40bb76:	bf00      	nop
  40bb78:	370c      	adds	r7, #12
  40bb7a:	46bd      	mov	sp, r7
  40bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bb80:	4770      	bx	lr
  40bb82:	bf00      	nop
  40bb84:	e000e100 	.word	0xe000e100

0040bb88 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  40bb88:	b480      	push	{r7}
  40bb8a:	b083      	sub	sp, #12
  40bb8c:	af00      	add	r7, sp, #0
  40bb8e:	4603      	mov	r3, r0
  40bb90:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40bb92:	4909      	ldr	r1, [pc, #36]	; (40bbb8 <NVIC_DisableIRQ+0x30>)
  40bb94:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bb98:	095b      	lsrs	r3, r3, #5
  40bb9a:	79fa      	ldrb	r2, [r7, #7]
  40bb9c:	f002 021f 	and.w	r2, r2, #31
  40bba0:	2001      	movs	r0, #1
  40bba2:	fa00 f202 	lsl.w	r2, r0, r2
  40bba6:	3320      	adds	r3, #32
  40bba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40bbac:	bf00      	nop
  40bbae:	370c      	adds	r7, #12
  40bbb0:	46bd      	mov	sp, r7
  40bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bbb6:	4770      	bx	lr
  40bbb8:	e000e100 	.word	0xe000e100

0040bbbc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  40bbbc:	b480      	push	{r7}
  40bbbe:	b083      	sub	sp, #12
  40bbc0:	af00      	add	r7, sp, #0
  40bbc2:	4603      	mov	r3, r0
  40bbc4:	6039      	str	r1, [r7, #0]
  40bbc6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  40bbc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bbcc:	2b00      	cmp	r3, #0
  40bbce:	da0b      	bge.n	40bbe8 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40bbd0:	490d      	ldr	r1, [pc, #52]	; (40bc08 <NVIC_SetPriority+0x4c>)
  40bbd2:	79fb      	ldrb	r3, [r7, #7]
  40bbd4:	f003 030f 	and.w	r3, r3, #15
  40bbd8:	3b04      	subs	r3, #4
  40bbda:	683a      	ldr	r2, [r7, #0]
  40bbdc:	b2d2      	uxtb	r2, r2
  40bbde:	0152      	lsls	r2, r2, #5
  40bbe0:	b2d2      	uxtb	r2, r2
  40bbe2:	440b      	add	r3, r1
  40bbe4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
}
  40bbe6:	e009      	b.n	40bbfc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40bbe8:	4908      	ldr	r1, [pc, #32]	; (40bc0c <NVIC_SetPriority+0x50>)
  40bbea:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40bbee:	683a      	ldr	r2, [r7, #0]
  40bbf0:	b2d2      	uxtb	r2, r2
  40bbf2:	0152      	lsls	r2, r2, #5
  40bbf4:	b2d2      	uxtb	r2, r2
  40bbf6:	440b      	add	r3, r1
  40bbf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40bbfc:	bf00      	nop
  40bbfe:	370c      	adds	r7, #12
  40bc00:	46bd      	mov	sp, r7
  40bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc06:	4770      	bx	lr
  40bc08:	e000ed00 	.word	0xe000ed00
  40bc0c:	e000e100 	.word	0xe000e100

0040bc10 <gmac_network_control>:
{
  40bc10:	b480      	push	{r7}
  40bc12:	b083      	sub	sp, #12
  40bc14:	af00      	add	r7, sp, #0
  40bc16:	6078      	str	r0, [r7, #4]
  40bc18:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_NCR = ul_ncr;
  40bc1a:	687b      	ldr	r3, [r7, #4]
  40bc1c:	683a      	ldr	r2, [r7, #0]
  40bc1e:	601a      	str	r2, [r3, #0]
}
  40bc20:	bf00      	nop
  40bc22:	370c      	adds	r7, #12
  40bc24:	46bd      	mov	sp, r7
  40bc26:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc2a:	4770      	bx	lr

0040bc2c <gmac_enable_receive>:
{
  40bc2c:	b480      	push	{r7}
  40bc2e:	b083      	sub	sp, #12
  40bc30:	af00      	add	r7, sp, #0
  40bc32:	6078      	str	r0, [r7, #4]
  40bc34:	460b      	mov	r3, r1
  40bc36:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bc38:	78fb      	ldrb	r3, [r7, #3]
  40bc3a:	2b00      	cmp	r3, #0
  40bc3c:	d006      	beq.n	40bc4c <gmac_enable_receive+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_RXEN;
  40bc3e:	687b      	ldr	r3, [r7, #4]
  40bc40:	681b      	ldr	r3, [r3, #0]
  40bc42:	f043 0204 	orr.w	r2, r3, #4
  40bc46:	687b      	ldr	r3, [r7, #4]
  40bc48:	601a      	str	r2, [r3, #0]
}
  40bc4a:	e005      	b.n	40bc58 <gmac_enable_receive+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_RXEN;
  40bc4c:	687b      	ldr	r3, [r7, #4]
  40bc4e:	681b      	ldr	r3, [r3, #0]
  40bc50:	f023 0204 	bic.w	r2, r3, #4
  40bc54:	687b      	ldr	r3, [r7, #4]
  40bc56:	601a      	str	r2, [r3, #0]
}
  40bc58:	bf00      	nop
  40bc5a:	370c      	adds	r7, #12
  40bc5c:	46bd      	mov	sp, r7
  40bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc62:	4770      	bx	lr

0040bc64 <gmac_enable_transmit>:
{
  40bc64:	b480      	push	{r7}
  40bc66:	b083      	sub	sp, #12
  40bc68:	af00      	add	r7, sp, #0
  40bc6a:	6078      	str	r0, [r7, #4]
  40bc6c:	460b      	mov	r3, r1
  40bc6e:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bc70:	78fb      	ldrb	r3, [r7, #3]
  40bc72:	2b00      	cmp	r3, #0
  40bc74:	d006      	beq.n	40bc84 <gmac_enable_transmit+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_TXEN;
  40bc76:	687b      	ldr	r3, [r7, #4]
  40bc78:	681b      	ldr	r3, [r3, #0]
  40bc7a:	f043 0208 	orr.w	r2, r3, #8
  40bc7e:	687b      	ldr	r3, [r7, #4]
  40bc80:	601a      	str	r2, [r3, #0]
}
  40bc82:	e005      	b.n	40bc90 <gmac_enable_transmit+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_TXEN;
  40bc84:	687b      	ldr	r3, [r7, #4]
  40bc86:	681b      	ldr	r3, [r3, #0]
  40bc88:	f023 0208 	bic.w	r2, r3, #8
  40bc8c:	687b      	ldr	r3, [r7, #4]
  40bc8e:	601a      	str	r2, [r3, #0]
}
  40bc90:	bf00      	nop
  40bc92:	370c      	adds	r7, #12
  40bc94:	46bd      	mov	sp, r7
  40bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bc9a:	4770      	bx	lr

0040bc9c <gmac_clear_statistics>:
{
  40bc9c:	b480      	push	{r7}
  40bc9e:	b083      	sub	sp, #12
  40bca0:	af00      	add	r7, sp, #0
  40bca2:	6078      	str	r0, [r7, #4]
	p_gmac->GMAC_NCR |= GMAC_NCR_CLRSTAT;
  40bca4:	687b      	ldr	r3, [r7, #4]
  40bca6:	681b      	ldr	r3, [r3, #0]
  40bca8:	f043 0220 	orr.w	r2, r3, #32
  40bcac:	687b      	ldr	r3, [r7, #4]
  40bcae:	601a      	str	r2, [r3, #0]
}
  40bcb0:	bf00      	nop
  40bcb2:	370c      	adds	r7, #12
  40bcb4:	46bd      	mov	sp, r7
  40bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bcba:	4770      	bx	lr

0040bcbc <gmac_enable_statistics_write>:
{
  40bcbc:	b480      	push	{r7}
  40bcbe:	b083      	sub	sp, #12
  40bcc0:	af00      	add	r7, sp, #0
  40bcc2:	6078      	str	r0, [r7, #4]
  40bcc4:	460b      	mov	r3, r1
  40bcc6:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bcc8:	78fb      	ldrb	r3, [r7, #3]
  40bcca:	2b00      	cmp	r3, #0
  40bccc:	d006      	beq.n	40bcdc <gmac_enable_statistics_write+0x20>
		p_gmac->GMAC_NCR |= GMAC_NCR_WESTAT;
  40bcce:	687b      	ldr	r3, [r7, #4]
  40bcd0:	681b      	ldr	r3, [r3, #0]
  40bcd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
  40bcd6:	687b      	ldr	r3, [r7, #4]
  40bcd8:	601a      	str	r2, [r3, #0]
}
  40bcda:	e005      	b.n	40bce8 <gmac_enable_statistics_write+0x2c>
		p_gmac->GMAC_NCR &= ~GMAC_NCR_WESTAT;
  40bcdc:	687b      	ldr	r3, [r7, #4]
  40bcde:	681b      	ldr	r3, [r3, #0]
  40bce0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  40bce4:	687b      	ldr	r3, [r7, #4]
  40bce6:	601a      	str	r2, [r3, #0]
}
  40bce8:	bf00      	nop
  40bcea:	370c      	adds	r7, #12
  40bcec:	46bd      	mov	sp, r7
  40bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bcf2:	4770      	bx	lr

0040bcf4 <gmac_start_transmission>:
{
  40bcf4:	b480      	push	{r7}
  40bcf6:	b083      	sub	sp, #12
  40bcf8:	af00      	add	r7, sp, #0
  40bcfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("dsb");
  40bcfc:	f3bf 8f4f 	dsb	sy
	p_gmac->GMAC_NCR |= GMAC_NCR_TSTART;
  40bd00:	687b      	ldr	r3, [r7, #4]
  40bd02:	681b      	ldr	r3, [r3, #0]
  40bd04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
  40bd08:	687b      	ldr	r3, [r7, #4]
  40bd0a:	601a      	str	r2, [r3, #0]
}
  40bd0c:	bf00      	nop
  40bd0e:	370c      	adds	r7, #12
  40bd10:	46bd      	mov	sp, r7
  40bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd16:	4770      	bx	lr

0040bd18 <gmac_enable_copy_all>:
{
  40bd18:	b480      	push	{r7}
  40bd1a:	b083      	sub	sp, #12
  40bd1c:	af00      	add	r7, sp, #0
  40bd1e:	6078      	str	r0, [r7, #4]
  40bd20:	460b      	mov	r3, r1
  40bd22:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bd24:	78fb      	ldrb	r3, [r7, #3]
  40bd26:	2b00      	cmp	r3, #0
  40bd28:	d006      	beq.n	40bd38 <gmac_enable_copy_all+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_CAF;
  40bd2a:	687b      	ldr	r3, [r7, #4]
  40bd2c:	685b      	ldr	r3, [r3, #4]
  40bd2e:	f043 0210 	orr.w	r2, r3, #16
  40bd32:	687b      	ldr	r3, [r7, #4]
  40bd34:	605a      	str	r2, [r3, #4]
}
  40bd36:	e005      	b.n	40bd44 <gmac_enable_copy_all+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_CAF;
  40bd38:	687b      	ldr	r3, [r7, #4]
  40bd3a:	685b      	ldr	r3, [r3, #4]
  40bd3c:	f023 0210 	bic.w	r2, r3, #16
  40bd40:	687b      	ldr	r3, [r7, #4]
  40bd42:	605a      	str	r2, [r3, #4]
}
  40bd44:	bf00      	nop
  40bd46:	370c      	adds	r7, #12
  40bd48:	46bd      	mov	sp, r7
  40bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd4e:	4770      	bx	lr

0040bd50 <gmac_disable_broadcast>:
{
  40bd50:	b480      	push	{r7}
  40bd52:	b083      	sub	sp, #12
  40bd54:	af00      	add	r7, sp, #0
  40bd56:	6078      	str	r0, [r7, #4]
  40bd58:	460b      	mov	r3, r1
  40bd5a:	70fb      	strb	r3, [r7, #3]
	if (uc_enable) {
  40bd5c:	78fb      	ldrb	r3, [r7, #3]
  40bd5e:	2b00      	cmp	r3, #0
  40bd60:	d006      	beq.n	40bd70 <gmac_disable_broadcast+0x20>
		p_gmac->GMAC_NCFGR |= GMAC_NCFGR_NBC;
  40bd62:	687b      	ldr	r3, [r7, #4]
  40bd64:	685b      	ldr	r3, [r3, #4]
  40bd66:	f043 0220 	orr.w	r2, r3, #32
  40bd6a:	687b      	ldr	r3, [r7, #4]
  40bd6c:	605a      	str	r2, [r3, #4]
}
  40bd6e:	e005      	b.n	40bd7c <gmac_disable_broadcast+0x2c>
		p_gmac->GMAC_NCFGR &= ~GMAC_NCFGR_NBC;
  40bd70:	687b      	ldr	r3, [r7, #4]
  40bd72:	685b      	ldr	r3, [r3, #4]
  40bd74:	f023 0220 	bic.w	r2, r3, #32
  40bd78:	687b      	ldr	r3, [r7, #4]
  40bd7a:	605a      	str	r2, [r3, #4]
}
  40bd7c:	bf00      	nop
  40bd7e:	370c      	adds	r7, #12
  40bd80:	46bd      	mov	sp, r7
  40bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd86:	4770      	bx	lr

0040bd88 <gmac_get_tx_status>:
{
  40bd88:	b480      	push	{r7}
  40bd8a:	b083      	sub	sp, #12
  40bd8c:	af00      	add	r7, sp, #0
  40bd8e:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_TSR;
  40bd90:	687b      	ldr	r3, [r7, #4]
  40bd92:	695b      	ldr	r3, [r3, #20]
}
  40bd94:	4618      	mov	r0, r3
  40bd96:	370c      	adds	r7, #12
  40bd98:	46bd      	mov	sp, r7
  40bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bd9e:	4770      	bx	lr

0040bda0 <gmac_clear_tx_status>:
{
  40bda0:	b480      	push	{r7}
  40bda2:	b083      	sub	sp, #12
  40bda4:	af00      	add	r7, sp, #0
  40bda6:	6078      	str	r0, [r7, #4]
  40bda8:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TSR = ul_status;
  40bdaa:	687b      	ldr	r3, [r7, #4]
  40bdac:	683a      	ldr	r2, [r7, #0]
  40bdae:	615a      	str	r2, [r3, #20]
}
  40bdb0:	bf00      	nop
  40bdb2:	370c      	adds	r7, #12
  40bdb4:	46bd      	mov	sp, r7
  40bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdba:	4770      	bx	lr

0040bdbc <gmac_get_rx_status>:
{
  40bdbc:	b480      	push	{r7}
  40bdbe:	b083      	sub	sp, #12
  40bdc0:	af00      	add	r7, sp, #0
  40bdc2:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_RSR;
  40bdc4:	687b      	ldr	r3, [r7, #4]
  40bdc6:	6a1b      	ldr	r3, [r3, #32]
}
  40bdc8:	4618      	mov	r0, r3
  40bdca:	370c      	adds	r7, #12
  40bdcc:	46bd      	mov	sp, r7
  40bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdd2:	4770      	bx	lr

0040bdd4 <gmac_clear_rx_status>:
{
  40bdd4:	b480      	push	{r7}
  40bdd6:	b083      	sub	sp, #12
  40bdd8:	af00      	add	r7, sp, #0
  40bdda:	6078      	str	r0, [r7, #4]
  40bddc:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RSR = ul_status;
  40bdde:	687b      	ldr	r3, [r7, #4]
  40bde0:	683a      	ldr	r2, [r7, #0]
  40bde2:	621a      	str	r2, [r3, #32]
}
  40bde4:	bf00      	nop
  40bde6:	370c      	adds	r7, #12
  40bde8:	46bd      	mov	sp, r7
  40bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bdee:	4770      	bx	lr

0040bdf0 <gmac_set_rx_queue>:
{
  40bdf0:	b480      	push	{r7}
  40bdf2:	b083      	sub	sp, #12
  40bdf4:	af00      	add	r7, sp, #0
  40bdf6:	6078      	str	r0, [r7, #4]
  40bdf8:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_RBQB = GMAC_RBQB_ADDR_Msk & ul_addr;
  40bdfa:	683b      	ldr	r3, [r7, #0]
  40bdfc:	f023 0203 	bic.w	r2, r3, #3
  40be00:	687b      	ldr	r3, [r7, #4]
  40be02:	619a      	str	r2, [r3, #24]
}
  40be04:	bf00      	nop
  40be06:	370c      	adds	r7, #12
  40be08:	46bd      	mov	sp, r7
  40be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be0e:	4770      	bx	lr

0040be10 <gmac_set_rx_bufsize>:
{
  40be10:	b480      	push	{r7}
  40be12:	b083      	sub	sp, #12
  40be14:	af00      	add	r7, sp, #0
  40be16:	6078      	str	r0, [r7, #4]
  40be18:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40be1a:	687b      	ldr	r3, [r7, #4]
  40be1c:	691b      	ldr	r3, [r3, #16]
  40be1e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
			| GMAC_DCFGR_DRBS(ul_code);
  40be22:	683b      	ldr	r3, [r7, #0]
  40be24:	041b      	lsls	r3, r3, #16
  40be26:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40be2a:	431a      	orrs	r2, r3
	p_gmac->GMAC_DCFGR = (p_gmac->GMAC_DCFGR & ~GMAC_DCFGR_DRBS_Msk)
  40be2c:	687b      	ldr	r3, [r7, #4]
  40be2e:	611a      	str	r2, [r3, #16]
}
  40be30:	bf00      	nop
  40be32:	370c      	adds	r7, #12
  40be34:	46bd      	mov	sp, r7
  40be36:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be3a:	4770      	bx	lr

0040be3c <gmac_set_tx_queue>:
{
  40be3c:	b480      	push	{r7}
  40be3e:	b083      	sub	sp, #12
  40be40:	af00      	add	r7, sp, #0
  40be42:	6078      	str	r0, [r7, #4]
  40be44:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_TBQB = GMAC_TBQB_ADDR_Msk & ul_addr;
  40be46:	683b      	ldr	r3, [r7, #0]
  40be48:	f023 0203 	bic.w	r2, r3, #3
  40be4c:	687b      	ldr	r3, [r7, #4]
  40be4e:	61da      	str	r2, [r3, #28]
}
  40be50:	bf00      	nop
  40be52:	370c      	adds	r7, #12
  40be54:	46bd      	mov	sp, r7
  40be56:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be5a:	4770      	bx	lr

0040be5c <gmac_enable_interrupt>:
{
  40be5c:	b480      	push	{r7}
  40be5e:	b083      	sub	sp, #12
  40be60:	af00      	add	r7, sp, #0
  40be62:	6078      	str	r0, [r7, #4]
  40be64:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IER = ul_source;
  40be66:	687b      	ldr	r3, [r7, #4]
  40be68:	683a      	ldr	r2, [r7, #0]
  40be6a:	629a      	str	r2, [r3, #40]	; 0x28
}
  40be6c:	bf00      	nop
  40be6e:	370c      	adds	r7, #12
  40be70:	46bd      	mov	sp, r7
  40be72:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be76:	4770      	bx	lr

0040be78 <gmac_disable_interrupt>:
{
  40be78:	b480      	push	{r7}
  40be7a:	b083      	sub	sp, #12
  40be7c:	af00      	add	r7, sp, #0
  40be7e:	6078      	str	r0, [r7, #4]
  40be80:	6039      	str	r1, [r7, #0]
	p_gmac->GMAC_IDR = ul_source;
  40be82:	687b      	ldr	r3, [r7, #4]
  40be84:	683a      	ldr	r2, [r7, #0]
  40be86:	62da      	str	r2, [r3, #44]	; 0x2c
}
  40be88:	bf00      	nop
  40be8a:	370c      	adds	r7, #12
  40be8c:	46bd      	mov	sp, r7
  40be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40be92:	4770      	bx	lr

0040be94 <gmac_get_interrupt_status>:
{
  40be94:	b480      	push	{r7}
  40be96:	b083      	sub	sp, #12
  40be98:	af00      	add	r7, sp, #0
  40be9a:	6078      	str	r0, [r7, #4]
	return p_gmac->GMAC_ISR;
  40be9c:	687b      	ldr	r3, [r7, #4]
  40be9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  40bea0:	4618      	mov	r0, r3
  40bea2:	370c      	adds	r7, #12
  40bea4:	46bd      	mov	sp, r7
  40bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40beaa:	4770      	bx	lr

0040beac <gmac_set_address>:
{
  40beac:	b480      	push	{r7}
  40beae:	b085      	sub	sp, #20
  40beb0:	af00      	add	r7, sp, #0
  40beb2:	60f8      	str	r0, [r7, #12]
  40beb4:	460b      	mov	r3, r1
  40beb6:	607a      	str	r2, [r7, #4]
  40beb8:	72fb      	strb	r3, [r7, #11]
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40beba:	7afa      	ldrb	r2, [r7, #11]
  40bebc:	687b      	ldr	r3, [r7, #4]
  40bebe:	3303      	adds	r3, #3
  40bec0:	781b      	ldrb	r3, [r3, #0]
  40bec2:	0619      	lsls	r1, r3, #24
			| (p_mac_addr[2] << 16)
  40bec4:	687b      	ldr	r3, [r7, #4]
  40bec6:	3302      	adds	r3, #2
  40bec8:	781b      	ldrb	r3, [r3, #0]
  40beca:	041b      	lsls	r3, r3, #16
  40becc:	4319      	orrs	r1, r3
			| (p_mac_addr[1] << 8)
  40bece:	687b      	ldr	r3, [r7, #4]
  40bed0:	3301      	adds	r3, #1
  40bed2:	781b      	ldrb	r3, [r3, #0]
  40bed4:	021b      	lsls	r3, r3, #8
  40bed6:	430b      	orrs	r3, r1
			| (p_mac_addr[0]);
  40bed8:	6879      	ldr	r1, [r7, #4]
  40beda:	7809      	ldrb	r1, [r1, #0]
  40bedc:	430b      	orrs	r3, r1
  40bede:	4619      	mov	r1, r3
	p_gmac->GMAC_SA[uc_index].GMAC_SAB = (p_mac_addr[3] << 24)
  40bee0:	68fb      	ldr	r3, [r7, #12]
  40bee2:	3211      	adds	r2, #17
  40bee4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40bee8:	7afb      	ldrb	r3, [r7, #11]
  40beea:	687a      	ldr	r2, [r7, #4]
  40beec:	3205      	adds	r2, #5
  40beee:	7812      	ldrb	r2, [r2, #0]
  40bef0:	0212      	lsls	r2, r2, #8
			| (p_mac_addr[4]);
  40bef2:	6879      	ldr	r1, [r7, #4]
  40bef4:	3104      	adds	r1, #4
  40bef6:	7809      	ldrb	r1, [r1, #0]
  40bef8:	430a      	orrs	r2, r1
  40befa:	4611      	mov	r1, r2
	p_gmac->GMAC_SA[uc_index].GMAC_SAT = (p_mac_addr[5] << 8)
  40befc:	68fa      	ldr	r2, [r7, #12]
  40befe:	3311      	adds	r3, #17
  40bf00:	00db      	lsls	r3, r3, #3
  40bf02:	4413      	add	r3, r2
  40bf04:	6059      	str	r1, [r3, #4]
}
  40bf06:	bf00      	nop
  40bf08:	3714      	adds	r7, #20
  40bf0a:	46bd      	mov	sp, r7
  40bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf10:	4770      	bx	lr

0040bf12 <gmac_get_priority_interrupt_status>:
 * \param queue_idx   Index of queue, start from 1
 *
 * \return Interrupt status.
 */
static inline uint32_t gmac_get_priority_interrupt_status(Gmac* p_gmac, gmac_quelist_t queue_idx)
{
  40bf12:	b480      	push	{r7}
  40bf14:	b083      	sub	sp, #12
  40bf16:	af00      	add	r7, sp, #0
  40bf18:	6078      	str	r0, [r7, #4]
  40bf1a:	460b      	mov	r3, r1
  40bf1c:	70fb      	strb	r3, [r7, #3]
	return p_gmac->GMAC_ISRPQ[queue_idx - 1];
  40bf1e:	78fb      	ldrb	r3, [r7, #3]
  40bf20:	1e5a      	subs	r2, r3, #1
  40bf22:	687b      	ldr	r3, [r7, #4]
  40bf24:	f502 7280 	add.w	r2, r2, #256	; 0x100
  40bf28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
  40bf2c:	4618      	mov	r0, r3
  40bf2e:	370c      	adds	r7, #12
  40bf30:	46bd      	mov	sp, r7
  40bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf36:	4770      	bx	lr

0040bf38 <gmac_set_tx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_tx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40bf38:	b480      	push	{r7}
  40bf3a:	b085      	sub	sp, #20
  40bf3c:	af00      	add	r7, sp, #0
  40bf3e:	60f8      	str	r0, [r7, #12]
  40bf40:	60b9      	str	r1, [r7, #8]
  40bf42:	4613      	mov	r3, r2
  40bf44:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_TBQBAPQ[queue_idx - 1] = GMAC_TBQB_ADDR_Msk & ul_addr;
  40bf46:	79fb      	ldrb	r3, [r7, #7]
  40bf48:	1e5a      	subs	r2, r3, #1
  40bf4a:	68bb      	ldr	r3, [r7, #8]
  40bf4c:	f023 0103 	bic.w	r1, r3, #3
  40bf50:	68fb      	ldr	r3, [r7, #12]
  40bf52:	f502 7288 	add.w	r2, r2, #272	; 0x110
  40bf56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40bf5a:	bf00      	nop
  40bf5c:	3714      	adds	r7, #20
  40bf5e:	46bd      	mov	sp, r7
  40bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf64:	4770      	bx	lr

0040bf66 <gmac_set_rx_priority_queue>:
 *
 * \param p_gmac   Pointer to the GMAC instance.
 * \param queue_idx   Index of queue, start from 1
 */
static inline void gmac_set_rx_priority_queue(Gmac* p_gmac, uint32_t ul_addr, gmac_quelist_t queue_idx)
{
  40bf66:	b480      	push	{r7}
  40bf68:	b085      	sub	sp, #20
  40bf6a:	af00      	add	r7, sp, #0
  40bf6c:	60f8      	str	r0, [r7, #12]
  40bf6e:	60b9      	str	r1, [r7, #8]
  40bf70:	4613      	mov	r3, r2
  40bf72:	71fb      	strb	r3, [r7, #7]
    p_gmac->GMAC_RBQBAPQ[queue_idx - 1] = GMAC_RBQB_ADDR_Msk & ul_addr;
  40bf74:	79fb      	ldrb	r3, [r7, #7]
  40bf76:	1e5a      	subs	r2, r3, #1
  40bf78:	68bb      	ldr	r3, [r7, #8]
  40bf7a:	f023 0103 	bic.w	r1, r3, #3
  40bf7e:	68fb      	ldr	r3, [r7, #12]
  40bf80:	f502 7290 	add.w	r2, r2, #288	; 0x120
  40bf84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40bf88:	bf00      	nop
  40bf8a:	3714      	adds	r7, #20
  40bf8c:	46bd      	mov	sp, r7
  40bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bf92:	4770      	bx	lr

0040bf94 <osc_get_rate>:
{
  40bf94:	b480      	push	{r7}
  40bf96:	b083      	sub	sp, #12
  40bf98:	af00      	add	r7, sp, #0
  40bf9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40bf9c:	687b      	ldr	r3, [r7, #4]
  40bf9e:	2b07      	cmp	r3, #7
  40bfa0:	d825      	bhi.n	40bfee <osc_get_rate+0x5a>
  40bfa2:	a201      	add	r2, pc, #4	; (adr r2, 40bfa8 <osc_get_rate+0x14>)
  40bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40bfa8:	0040bfc9 	.word	0x0040bfc9
  40bfac:	0040bfcf 	.word	0x0040bfcf
  40bfb0:	0040bfd5 	.word	0x0040bfd5
  40bfb4:	0040bfdb 	.word	0x0040bfdb
  40bfb8:	0040bfdf 	.word	0x0040bfdf
  40bfbc:	0040bfe3 	.word	0x0040bfe3
  40bfc0:	0040bfe7 	.word	0x0040bfe7
  40bfc4:	0040bfeb 	.word	0x0040bfeb
		return OSC_SLCK_32K_RC_HZ;
  40bfc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40bfcc:	e010      	b.n	40bff0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40bfce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40bfd2:	e00d      	b.n	40bff0 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40bfd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40bfd8:	e00a      	b.n	40bff0 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40bfda:	4b08      	ldr	r3, [pc, #32]	; (40bffc <osc_get_rate+0x68>)
  40bfdc:	e008      	b.n	40bff0 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40bfde:	4b08      	ldr	r3, [pc, #32]	; (40c000 <osc_get_rate+0x6c>)
  40bfe0:	e006      	b.n	40bff0 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40bfe2:	4b08      	ldr	r3, [pc, #32]	; (40c004 <osc_get_rate+0x70>)
  40bfe4:	e004      	b.n	40bff0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40bfe6:	4b07      	ldr	r3, [pc, #28]	; (40c004 <osc_get_rate+0x70>)
  40bfe8:	e002      	b.n	40bff0 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40bfea:	4b06      	ldr	r3, [pc, #24]	; (40c004 <osc_get_rate+0x70>)
  40bfec:	e000      	b.n	40bff0 <osc_get_rate+0x5c>
	return 0;
  40bfee:	2300      	movs	r3, #0
}
  40bff0:	4618      	mov	r0, r3
  40bff2:	370c      	adds	r7, #12
  40bff4:	46bd      	mov	sp, r7
  40bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
  40bffa:	4770      	bx	lr
  40bffc:	003d0900 	.word	0x003d0900
  40c000:	007a1200 	.word	0x007a1200
  40c004:	00b71b00 	.word	0x00b71b00

0040c008 <sysclk_get_main_hz>:
{
  40c008:	b580      	push	{r7, lr}
  40c00a:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40c00c:	2006      	movs	r0, #6
  40c00e:	4b05      	ldr	r3, [pc, #20]	; (40c024 <sysclk_get_main_hz+0x1c>)
  40c010:	4798      	blx	r3
  40c012:	4602      	mov	r2, r0
  40c014:	4613      	mov	r3, r2
  40c016:	009b      	lsls	r3, r3, #2
  40c018:	4413      	add	r3, r2
  40c01a:	009a      	lsls	r2, r3, #2
  40c01c:	4413      	add	r3, r2
}
  40c01e:	4618      	mov	r0, r3
  40c020:	bd80      	pop	{r7, pc}
  40c022:	bf00      	nop
  40c024:	0040bf95 	.word	0x0040bf95

0040c028 <sysclk_get_cpu_hz>:
{
  40c028:	b580      	push	{r7, lr}
  40c02a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  40c02c:	4b02      	ldr	r3, [pc, #8]	; (40c038 <sysclk_get_cpu_hz+0x10>)
  40c02e:	4798      	blx	r3
  40c030:	4603      	mov	r3, r0
  40c032:	085b      	lsrs	r3, r3, #1
}
  40c034:	4618      	mov	r0, r3
  40c036:	bd80      	pop	{r7, pc}
  40c038:	0040c009 	.word	0x0040c009

0040c03c <GMAC_Handler>:

/**
 * \brief GMAC interrupt handler.
 */
void GMAC_Handler(void)
{
  40c03c:	b580      	push	{r7, lr}
  40c03e:	af00      	add	r7, sp, #0
#if NO_SYS == 1
    NVIC_DisableIRQ(GMAC_IRQn);
  40c040:	2027      	movs	r0, #39	; 0x27
  40c042:	4b02      	ldr	r3, [pc, #8]	; (40c04c <GMAC_Handler+0x10>)
  40c044:	4798      	blx	r3
		xSemaphoreGiveFromISR(gs_gmac_dev.rx_sem, &xGMACTaskWoken);
	}

	portEND_SWITCHING_ISR(xGMACTaskWoken);
#endif
}
  40c046:	bf00      	nop
  40c048:	bd80      	pop	{r7, pc}
  40c04a:	bf00      	nop
  40c04c:	0040bb89 	.word	0x0040bb89

0040c050 <gmac_rx_populate_queue>:
 * (since the lsb are used as status bits by GMAC).
 *
 * \param p_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_populate_queue(struct gmac_device *p_gmac_dev)
{
  40c050:	b580      	push	{r7, lr}
  40c052:	b084      	sub	sp, #16
  40c054:	af00      	add	r7, sp, #0
  40c056:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40c058:	2300      	movs	r3, #0
  40c05a:	60fb      	str	r3, [r7, #12]
	struct pbuf *p = 0;
  40c05c:	2300      	movs	r3, #0
  40c05e:	60bb      	str	r3, [r7, #8]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c060:	2300      	movs	r3, #0
  40c062:	60fb      	str	r3, [r7, #12]
  40c064:	e032      	b.n	40c0cc <gmac_rx_populate_queue+0x7c>
		if (p_gmac_dev->rx_pbuf[ul_index] == 0) {
  40c066:	687b      	ldr	r3, [r7, #4]
  40c068:	68fa      	ldr	r2, [r7, #12]
  40c06a:	320c      	adds	r2, #12
  40c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c070:	2b00      	cmp	r3, #0
  40c072:	d128      	bne.n	40c0c6 <gmac_rx_populate_queue+0x76>

			/* Allocate a new pbuf with the maximum size. */
			p = pbuf_alloc(PBUF_RAW, (u16_t) GMAC_FRAME_LENTGH_MAX, PBUF_POOL);
  40c074:	2203      	movs	r2, #3
  40c076:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  40c07a:	2003      	movs	r0, #3
  40c07c:	4b18      	ldr	r3, [pc, #96]	; (40c0e0 <gmac_rx_populate_queue+0x90>)
  40c07e:	4798      	blx	r3
  40c080:	60b8      	str	r0, [r7, #8]
			if (p == NULL) {
  40c082:	68bb      	ldr	r3, [r7, #8]
  40c084:	2b00      	cmp	r3, #0
  40c086:	d025      	beq.n	40c0d4 <gmac_rx_populate_queue+0x84>

			/* Make sure that the payload buffer is properly aligned. */
			LWIP_ASSERT("gmac_rx_populate_queue: unaligned p->payload buffer address",
					(((uint32_t)p->payload & 0xFFFFFFFC) == (uint32_t)p->payload));

			if (ul_index == GMAC_RX_BUFFERS - 1)
  40c088:	68fb      	ldr	r3, [r7, #12]
  40c08a:	2b02      	cmp	r3, #2
  40c08c:	d108      	bne.n	40c0a0 <gmac_rx_populate_queue+0x50>
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload | GMAC_RXD_WRAP;
  40c08e:	68bb      	ldr	r3, [r7, #8]
  40c090:	685b      	ldr	r3, [r3, #4]
  40c092:	f043 0102 	orr.w	r1, r3, #2
  40c096:	687b      	ldr	r3, [r7, #4]
  40c098:	68fa      	ldr	r2, [r7, #12]
  40c09a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
  40c09e:	e006      	b.n	40c0ae <gmac_rx_populate_queue+0x5e>
			else
				p_gmac_dev->rx_desc[ul_index].addr.val = (u32_t) p->payload;
  40c0a0:	68bb      	ldr	r3, [r7, #8]
  40c0a2:	685b      	ldr	r3, [r3, #4]
  40c0a4:	4619      	mov	r1, r3
  40c0a6:	687b      	ldr	r3, [r7, #4]
  40c0a8:	68fa      	ldr	r2, [r7, #12]
  40c0aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

			/* Reset status value. */
			p_gmac_dev->rx_desc[ul_index].status.val = 0;
  40c0ae:	687a      	ldr	r2, [r7, #4]
  40c0b0:	68fb      	ldr	r3, [r7, #12]
  40c0b2:	00db      	lsls	r3, r3, #3
  40c0b4:	4413      	add	r3, r2
  40c0b6:	2200      	movs	r2, #0
  40c0b8:	605a      	str	r2, [r3, #4]

			/* Save pbuf pointer to be sent to lwIP upper layer. */
			p_gmac_dev->rx_pbuf[ul_index] = p;
  40c0ba:	687b      	ldr	r3, [r7, #4]
  40c0bc:	68fa      	ldr	r2, [r7, #12]
  40c0be:	320c      	adds	r2, #12
  40c0c0:	68b9      	ldr	r1, [r7, #8]
  40c0c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c0c6:	68fb      	ldr	r3, [r7, #12]
  40c0c8:	3301      	adds	r3, #1
  40c0ca:	60fb      	str	r3, [r7, #12]
  40c0cc:	68fb      	ldr	r3, [r7, #12]
  40c0ce:	2b02      	cmp	r3, #2
  40c0d0:	d9c9      	bls.n	40c066 <gmac_rx_populate_queue+0x16>
			LWIP_DEBUGF(NETIF_DEBUG,
					("gmac_rx_populate_queue: new pbuf allocated: %p [idx=%u]\n",
					p, ul_index));
		}
	}
}
  40c0d2:	e000      	b.n	40c0d6 <gmac_rx_populate_queue+0x86>
				break;
  40c0d4:	bf00      	nop
}
  40c0d6:	bf00      	nop
  40c0d8:	3710      	adds	r7, #16
  40c0da:	46bd      	mov	sp, r7
  40c0dc:	bd80      	pop	{r7, pc}
  40c0de:	bf00      	nop
  40c0e0:	004057dd 	.word	0x004057dd

0040c0e4 <gmac_rx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_rx_init(struct gmac_device *ps_gmac_dev)
{
  40c0e4:	b580      	push	{r7, lr}
  40c0e6:	b084      	sub	sp, #16
  40c0e8:	af00      	add	r7, sp, #0
  40c0ea:	6078      	str	r0, [r7, #4]
	uint32_t ul_index = 0;
  40c0ec:	2300      	movs	r3, #0
  40c0ee:	60fb      	str	r3, [r7, #12]

	/* Init RX index. */
	ps_gmac_dev->us_rx_idx = 0;
  40c0f0:	687a      	ldr	r2, [r7, #4]
  40c0f2:	f241 2308 	movw	r3, #4616	; 0x1208
  40c0f6:	4413      	add	r3, r2
  40c0f8:	2200      	movs	r2, #0
  40c0fa:	601a      	str	r2, [r3, #0]

	/* Set up the RX descriptors. */
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c0fc:	2300      	movs	r3, #0
  40c0fe:	60fb      	str	r3, [r7, #12]
  40c100:	e013      	b.n	40c12a <gmac_rx_init+0x46>
		ps_gmac_dev->rx_pbuf[ul_index] = 0;
  40c102:	687b      	ldr	r3, [r7, #4]
  40c104:	68fa      	ldr	r2, [r7, #12]
  40c106:	320c      	adds	r2, #12
  40c108:	2100      	movs	r1, #0
  40c10a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		ps_gmac_dev->rx_desc[ul_index].addr.val = 0;
  40c10e:	687b      	ldr	r3, [r7, #4]
  40c110:	68fa      	ldr	r2, [r7, #12]
  40c112:	2100      	movs	r1, #0
  40c114:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->rx_desc[ul_index].status.val = 0;
  40c118:	687a      	ldr	r2, [r7, #4]
  40c11a:	68fb      	ldr	r3, [r7, #12]
  40c11c:	00db      	lsls	r3, r3, #3
  40c11e:	4413      	add	r3, r2
  40c120:	2200      	movs	r2, #0
  40c122:	605a      	str	r2, [r3, #4]
	for (ul_index = 0; ul_index < GMAC_RX_BUFFERS; ul_index++) {
  40c124:	68fb      	ldr	r3, [r7, #12]
  40c126:	3301      	adds	r3, #1
  40c128:	60fb      	str	r3, [r7, #12]
  40c12a:	68fb      	ldr	r3, [r7, #12]
  40c12c:	2b02      	cmp	r3, #2
  40c12e:	d9e8      	bls.n	40c102 <gmac_rx_init+0x1e>
	}
	ps_gmac_dev->rx_desc[ul_index - 1].addr.val |= GMAC_RXD_WRAP;
  40c130:	68fb      	ldr	r3, [r7, #12]
  40c132:	1e5a      	subs	r2, r3, #1
  40c134:	68fb      	ldr	r3, [r7, #12]
  40c136:	1e59      	subs	r1, r3, #1
  40c138:	687b      	ldr	r3, [r7, #4]
  40c13a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
  40c13e:	f043 0102 	orr.w	r1, r3, #2
  40c142:	687b      	ldr	r3, [r7, #4]
  40c144:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	/* Build RX buffer and descriptors. */
	gmac_rx_populate_queue(ps_gmac_dev);
  40c148:	6878      	ldr	r0, [r7, #4]
  40c14a:	4b05      	ldr	r3, [pc, #20]	; (40c160 <gmac_rx_init+0x7c>)
  40c14c:	4798      	blx	r3

	/* Set receive buffer queue base address pointer. */
	gmac_set_rx_queue(GMAC, (uint32_t) &ps_gmac_dev->rx_desc[0]);
  40c14e:	687b      	ldr	r3, [r7, #4]
  40c150:	4619      	mov	r1, r3
  40c152:	4804      	ldr	r0, [pc, #16]	; (40c164 <gmac_rx_init+0x80>)
  40c154:	4b04      	ldr	r3, [pc, #16]	; (40c168 <gmac_rx_init+0x84>)
  40c156:	4798      	blx	r3
}
  40c158:	bf00      	nop
  40c15a:	3710      	adds	r7, #16
  40c15c:	46bd      	mov	sp, r7
  40c15e:	bd80      	pop	{r7, pc}
  40c160:	0040c051 	.word	0x0040c051
  40c164:	40050000 	.word	0x40050000
  40c168:	0040bdf1 	.word	0x0040bdf1

0040c16c <gmac_tx_init>:
 * This function sets up the descriptor list used for receive packets.
 *
 * \param ps_gmac_dev Pointer to driver data structure.
 */
static void gmac_tx_init(struct gmac_device *ps_gmac_dev)
{
  40c16c:	b580      	push	{r7, lr}
  40c16e:	b084      	sub	sp, #16
  40c170:	af00      	add	r7, sp, #0
  40c172:	6078      	str	r0, [r7, #4]
	uint32_t ul_index;

	/* Init TX index pointer. */
	ps_gmac_dev->us_tx_idx = 0;
  40c174:	687a      	ldr	r2, [r7, #4]
  40c176:	f241 230c 	movw	r3, #4620	; 0x120c
  40c17a:	4413      	add	r3, r2
  40c17c:	2200      	movs	r2, #0
  40c17e:	601a      	str	r2, [r3, #0]

	/* Set up the TX descriptors. */
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40c180:	2300      	movs	r3, #0
  40c182:	60fb      	str	r3, [r7, #12]
  40c184:	e019      	b.n	40c1ba <gmac_tx_init+0x4e>
		ps_gmac_dev->tx_desc[ul_index].addr = (uint32_t)&ps_gmac_dev->tx_buf[ul_index][0];
  40c186:	68fb      	ldr	r3, [r7, #12]
  40c188:	f240 52ee 	movw	r2, #1518	; 0x5ee
  40c18c:	fb02 f303 	mul.w	r3, r2, r3
  40c190:	3338      	adds	r3, #56	; 0x38
  40c192:	687a      	ldr	r2, [r7, #4]
  40c194:	4413      	add	r3, r2
  40c196:	3304      	adds	r3, #4
  40c198:	4619      	mov	r1, r3
  40c19a:	687b      	ldr	r3, [r7, #4]
  40c19c:	68fa      	ldr	r2, [r7, #12]
  40c19e:	3203      	adds	r2, #3
  40c1a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
		ps_gmac_dev->tx_desc[ul_index].status.val = GMAC_TXD_USED | GMAC_TXD_LAST;
  40c1a4:	687a      	ldr	r2, [r7, #4]
  40c1a6:	68fb      	ldr	r3, [r7, #12]
  40c1a8:	3303      	adds	r3, #3
  40c1aa:	00db      	lsls	r3, r3, #3
  40c1ac:	4413      	add	r3, r2
  40c1ae:	f04f 2280 	mov.w	r2, #2147516416	; 0x80008000
  40c1b2:	605a      	str	r2, [r3, #4]
	for (ul_index = 0; ul_index < GMAC_TX_BUFFERS; ul_index++) {
  40c1b4:	68fb      	ldr	r3, [r7, #12]
  40c1b6:	3301      	adds	r3, #1
  40c1b8:	60fb      	str	r3, [r7, #12]
  40c1ba:	68fb      	ldr	r3, [r7, #12]
  40c1bc:	2b02      	cmp	r3, #2
  40c1be:	d9e2      	bls.n	40c186 <gmac_tx_init+0x1a>
	}
	ps_gmac_dev->tx_desc[ul_index - 1].status.val |= GMAC_TXD_WRAP;
  40c1c0:	68fb      	ldr	r3, [r7, #12]
  40c1c2:	1e58      	subs	r0, r3, #1
  40c1c4:	68fb      	ldr	r3, [r7, #12]
  40c1c6:	3b01      	subs	r3, #1
  40c1c8:	687a      	ldr	r2, [r7, #4]
  40c1ca:	3303      	adds	r3, #3
  40c1cc:	00db      	lsls	r3, r3, #3
  40c1ce:	4413      	add	r3, r2
  40c1d0:	685b      	ldr	r3, [r3, #4]
  40c1d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
  40c1d6:	6879      	ldr	r1, [r7, #4]
  40c1d8:	1cc3      	adds	r3, r0, #3
  40c1da:	00db      	lsls	r3, r3, #3
  40c1dc:	440b      	add	r3, r1
  40c1de:	605a      	str	r2, [r3, #4]

	/* Set receive buffer queue base address pointer. */
	gmac_set_tx_queue(GMAC, (uint32_t) &ps_gmac_dev->tx_desc[0]);
  40c1e0:	687b      	ldr	r3, [r7, #4]
  40c1e2:	3318      	adds	r3, #24
  40c1e4:	4619      	mov	r1, r3
  40c1e6:	4803      	ldr	r0, [pc, #12]	; (40c1f4 <gmac_tx_init+0x88>)
  40c1e8:	4b03      	ldr	r3, [pc, #12]	; (40c1f8 <gmac_tx_init+0x8c>)
  40c1ea:	4798      	blx	r3
}
  40c1ec:	bf00      	nop
  40c1ee:	3710      	adds	r7, #16
  40c1f0:	46bd      	mov	sp, r7
  40c1f2:	bd80      	pop	{r7, pc}
  40c1f4:	40050000 	.word	0x40050000
  40c1f8:	0040be3d 	.word	0x0040be3d

0040c1fc <gmac_low_level_init>:
 * \note Called from ethernetif_init().
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
static void gmac_low_level_init(struct netif *netif)
{
  40c1fc:	b580      	push	{r7, lr}
  40c1fe:	b084      	sub	sp, #16
  40c200:	af00      	add	r7, sp, #0
  40c202:	6078      	str	r0, [r7, #4]
	volatile uint32_t ul_delay;

	/* Set MAC hardware address length. */
	netif->hwaddr_len = sizeof(gs_uc_mac_address);
  40c204:	687b      	ldr	r3, [r7, #4]
  40c206:	2206      	movs	r2, #6
  40c208:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	/* Set MAC hardware address. */
	netif->hwaddr[0] = gs_uc_mac_address[0];
  40c20c:	4b7a      	ldr	r3, [pc, #488]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c20e:	781a      	ldrb	r2, [r3, #0]
  40c210:	687b      	ldr	r3, [r7, #4]
  40c212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	netif->hwaddr[1] = gs_uc_mac_address[1];
  40c216:	4b78      	ldr	r3, [pc, #480]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c218:	785a      	ldrb	r2, [r3, #1]
  40c21a:	687b      	ldr	r3, [r7, #4]
  40c21c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	netif->hwaddr[2] = gs_uc_mac_address[2];
  40c220:	4b75      	ldr	r3, [pc, #468]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c222:	789a      	ldrb	r2, [r3, #2]
  40c224:	687b      	ldr	r3, [r7, #4]
  40c226:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	netif->hwaddr[3] = gs_uc_mac_address[3];
  40c22a:	4b73      	ldr	r3, [pc, #460]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c22c:	78da      	ldrb	r2, [r3, #3]
  40c22e:	687b      	ldr	r3, [r7, #4]
  40c230:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	netif->hwaddr[4] = gs_uc_mac_address[4];
  40c234:	4b70      	ldr	r3, [pc, #448]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c236:	791a      	ldrb	r2, [r3, #4]
  40c238:	687b      	ldr	r3, [r7, #4]
  40c23a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	netif->hwaddr[5] = gs_uc_mac_address[5];
  40c23e:	4b6e      	ldr	r3, [pc, #440]	; (40c3f8 <gmac_low_level_init+0x1fc>)
  40c240:	795a      	ldrb	r2, [r3, #5]
  40c242:	687b      	ldr	r3, [r7, #4]
  40c244:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* Set maximum transfer unit. */
	netif->mtu = NET_MTU;
  40c248:	687b      	ldr	r3, [r7, #4]
  40c24a:	f240 52dc 	movw	r2, #1500	; 0x5dc
  40c24e:	849a      	strh	r2, [r3, #36]	; 0x24

	/* Device capabilities. */
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP
  40c250:	687b      	ldr	r3, [r7, #4]
  40c252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40c256:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
  40c25a:	b2da      	uxtb	r2, r3
  40c25c:	687b      	ldr	r3, [r7, #4]
  40c25e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			| NETIF_FLAG_DHCP
#endif
	;

	/* Wait for PHY to be ready (CAT811: Max400ms). */
	ul_delay = sysclk_get_cpu_hz() / 1000 / 3 * 400;
  40c262:	4b66      	ldr	r3, [pc, #408]	; (40c3fc <gmac_low_level_init+0x200>)
  40c264:	4798      	blx	r3
  40c266:	4602      	mov	r2, r0
  40c268:	4b65      	ldr	r3, [pc, #404]	; (40c400 <gmac_low_level_init+0x204>)
  40c26a:	fba3 2302 	umull	r2, r3, r3, r2
  40c26e:	099b      	lsrs	r3, r3, #6
  40c270:	f44f 72c8 	mov.w	r2, #400	; 0x190
  40c274:	fb02 f303 	mul.w	r3, r2, r3
  40c278:	60bb      	str	r3, [r7, #8]
	while (ul_delay--) {
  40c27a:	bf00      	nop
  40c27c:	68bb      	ldr	r3, [r7, #8]
  40c27e:	1e5a      	subs	r2, r3, #1
  40c280:	60ba      	str	r2, [r7, #8]
  40c282:	2b00      	cmp	r3, #0
  40c284:	d1fa      	bne.n	40c27c <gmac_low_level_init+0x80>
	}

	/* Enable GMAC clock. */
	pmc_enable_periph_clk(ID_GMAC);
  40c286:	2027      	movs	r0, #39	; 0x27
  40c288:	4b5e      	ldr	r3, [pc, #376]	; (40c404 <gmac_low_level_init+0x208>)
  40c28a:	4798      	blx	r3

	/* Disable TX & RX and more. */
	gmac_network_control(GMAC, 0);
  40c28c:	2100      	movs	r1, #0
  40c28e:	485e      	ldr	r0, [pc, #376]	; (40c408 <gmac_low_level_init+0x20c>)
  40c290:	4b5e      	ldr	r3, [pc, #376]	; (40c40c <gmac_low_level_init+0x210>)
  40c292:	4798      	blx	r3
	gmac_disable_interrupt(GMAC, ~0u);
  40c294:	f04f 31ff 	mov.w	r1, #4294967295
  40c298:	485b      	ldr	r0, [pc, #364]	; (40c408 <gmac_low_level_init+0x20c>)
  40c29a:	4b5d      	ldr	r3, [pc, #372]	; (40c410 <gmac_low_level_init+0x214>)
  40c29c:	4798      	blx	r3

	gmac_clear_statistics(GMAC);
  40c29e:	485a      	ldr	r0, [pc, #360]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2a0:	4b5c      	ldr	r3, [pc, #368]	; (40c414 <gmac_low_level_init+0x218>)
  40c2a2:	4798      	blx	r3

	/* Clear all status bits in the receive status register. */
	gmac_clear_rx_status(GMAC, GMAC_RSR_BNA | GMAC_RSR_REC | GMAC_RSR_RXOVR
  40c2a4:	210f      	movs	r1, #15
  40c2a6:	4858      	ldr	r0, [pc, #352]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2a8:	4b5b      	ldr	r3, [pc, #364]	; (40c418 <gmac_low_level_init+0x21c>)
  40c2aa:	4798      	blx	r3
			| GMAC_RSR_HNO);

	/* Clear all status bits in the transmit status register. */
	gmac_clear_tx_status(GMAC, GMAC_TSR_UBR | GMAC_TSR_COL | GMAC_TSR_RLE
  40c2ac:	f240 113f 	movw	r1, #319	; 0x13f
  40c2b0:	4855      	ldr	r0, [pc, #340]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2b2:	4b5a      	ldr	r3, [pc, #360]	; (40c41c <gmac_low_level_init+0x220>)
  40c2b4:	4798      	blx	r3
			| GMAC_TSR_TXGO | GMAC_TSR_TFC | GMAC_TSR_TXCOMP
			| GMAC_TSR_HRESP);

	/* Clear interrupts. */
	gmac_get_interrupt_status(GMAC);
  40c2b6:	4854      	ldr	r0, [pc, #336]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2b8:	4b59      	ldr	r3, [pc, #356]	; (40c420 <gmac_low_level_init+0x224>)
  40c2ba:	4798      	blx	r3

	/* Enable the copy of data into the buffers
	   ignore broadcasts, and not copy FCS. */
	gmac_enable_copy_all(GMAC, false);
  40c2bc:	2100      	movs	r1, #0
  40c2be:	4852      	ldr	r0, [pc, #328]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2c0:	4b58      	ldr	r3, [pc, #352]	; (40c424 <gmac_low_level_init+0x228>)
  40c2c2:	4798      	blx	r3
	gmac_disable_broadcast(GMAC, false);
  40c2c4:	2100      	movs	r1, #0
  40c2c6:	4850      	ldr	r0, [pc, #320]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2c8:	4b57      	ldr	r3, [pc, #348]	; (40c428 <gmac_low_level_init+0x22c>)
  40c2ca:	4798      	blx	r3

	/* Set RX buffer size to 1536. */
	gmac_set_rx_bufsize(GMAC, 0x18);
  40c2cc:	2118      	movs	r1, #24
  40c2ce:	484e      	ldr	r0, [pc, #312]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2d0:	4b56      	ldr	r3, [pc, #344]	; (40c42c <gmac_low_level_init+0x230>)
  40c2d2:	4798      	blx	r3

	/* Clear interrupts */
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c2d4:	2301      	movs	r3, #1
  40c2d6:	73fb      	strb	r3, [r7, #15]
  40c2d8:	e007      	b.n	40c2ea <gmac_low_level_init+0xee>
		gmac_get_priority_interrupt_status(GMAC, (gmac_quelist_t)(GMAC_QUE_0+i));
  40c2da:	7bfb      	ldrb	r3, [r7, #15]
  40c2dc:	4619      	mov	r1, r3
  40c2de:	484a      	ldr	r0, [pc, #296]	; (40c408 <gmac_low_level_init+0x20c>)
  40c2e0:	4b53      	ldr	r3, [pc, #332]	; (40c430 <gmac_low_level_init+0x234>)
  40c2e2:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c2e4:	7bfb      	ldrb	r3, [r7, #15]
  40c2e6:	3301      	adds	r3, #1
  40c2e8:	73fb      	strb	r3, [r7, #15]
  40c2ea:	7bfb      	ldrb	r3, [r7, #15]
  40c2ec:	2b05      	cmp	r3, #5
  40c2ee:	d9f4      	bls.n	40c2da <gmac_low_level_init+0xde>


	/* Set Tx Priority */
	gs_tx_desc_null.addr = (uint32_t)0xFFFFFFFF;
  40c2f0:	4b50      	ldr	r3, [pc, #320]	; (40c434 <gmac_low_level_init+0x238>)
  40c2f2:	f04f 32ff 	mov.w	r2, #4294967295
  40c2f6:	601a      	str	r2, [r3, #0]
	gs_tx_desc_null.status.val = GMAC_TXD_WRAP | GMAC_TXD_USED;
  40c2f8:	4b4e      	ldr	r3, [pc, #312]	; (40c434 <gmac_low_level_init+0x238>)
  40c2fa:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  40c2fe:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c300:	2301      	movs	r3, #1
  40c302:	73bb      	strb	r3, [r7, #14]
  40c304:	e008      	b.n	40c318 <gmac_low_level_init+0x11c>
		gmac_set_tx_priority_queue(GMAC, (uint32_t)&gs_tx_desc_null, (gmac_quelist_t)(GMAC_QUE_0+i));
  40c306:	494b      	ldr	r1, [pc, #300]	; (40c434 <gmac_low_level_init+0x238>)
  40c308:	7bbb      	ldrb	r3, [r7, #14]
  40c30a:	461a      	mov	r2, r3
  40c30c:	483e      	ldr	r0, [pc, #248]	; (40c408 <gmac_low_level_init+0x20c>)
  40c30e:	4b4a      	ldr	r3, [pc, #296]	; (40c438 <gmac_low_level_init+0x23c>)
  40c310:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c312:	7bbb      	ldrb	r3, [r7, #14]
  40c314:	3301      	adds	r3, #1
  40c316:	73bb      	strb	r3, [r7, #14]
  40c318:	7bbb      	ldrb	r3, [r7, #14]
  40c31a:	2b05      	cmp	r3, #5
  40c31c:	d9f3      	bls.n	40c306 <gmac_low_level_init+0x10a>
	
	/* Set Rx Priority */
	gs_rx_desc_null.addr.val = (uint32_t)0xFFFFFFFF & GMAC_RXD_ADDR_MASK;
  40c31e:	4b47      	ldr	r3, [pc, #284]	; (40c43c <gmac_low_level_init+0x240>)
  40c320:	f06f 0203 	mvn.w	r2, #3
  40c324:	601a      	str	r2, [r3, #0]
	gs_rx_desc_null.addr.val |= GMAC_RXD_WRAP;
  40c326:	4b45      	ldr	r3, [pc, #276]	; (40c43c <gmac_low_level_init+0x240>)
  40c328:	681b      	ldr	r3, [r3, #0]
  40c32a:	f043 0302 	orr.w	r3, r3, #2
  40c32e:	4a43      	ldr	r2, [pc, #268]	; (40c43c <gmac_low_level_init+0x240>)
  40c330:	6013      	str	r3, [r2, #0]
	gs_rx_desc_null.status.val = 0;
  40c332:	4b42      	ldr	r3, [pc, #264]	; (40c43c <gmac_low_level_init+0x240>)
  40c334:	2200      	movs	r2, #0
  40c336:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c338:	2301      	movs	r3, #1
  40c33a:	737b      	strb	r3, [r7, #13]
  40c33c:	e008      	b.n	40c350 <gmac_low_level_init+0x154>
		gmac_set_rx_priority_queue(GMAC, (uint32_t)&gs_rx_desc_null, (gmac_quelist_t)(GMAC_QUE_0+i));
  40c33e:	493f      	ldr	r1, [pc, #252]	; (40c43c <gmac_low_level_init+0x240>)
  40c340:	7b7b      	ldrb	r3, [r7, #13]
  40c342:	461a      	mov	r2, r3
  40c344:	4830      	ldr	r0, [pc, #192]	; (40c408 <gmac_low_level_init+0x20c>)
  40c346:	4b3e      	ldr	r3, [pc, #248]	; (40c440 <gmac_low_level_init+0x244>)
  40c348:	4798      	blx	r3
	for(uint8_t i = 1; i < GMAC_QUE_N; i++)
  40c34a:	7b7b      	ldrb	r3, [r7, #13]
  40c34c:	3301      	adds	r3, #1
  40c34e:	737b      	strb	r3, [r7, #13]
  40c350:	7b7b      	ldrb	r3, [r7, #13]
  40c352:	2b05      	cmp	r3, #5
  40c354:	d9f3      	bls.n	40c33e <gmac_low_level_init+0x142>

	gmac_rx_init(&gs_gmac_dev);
  40c356:	483b      	ldr	r0, [pc, #236]	; (40c444 <gmac_low_level_init+0x248>)
  40c358:	4b3b      	ldr	r3, [pc, #236]	; (40c448 <gmac_low_level_init+0x24c>)
  40c35a:	4798      	blx	r3
	gmac_tx_init(&gs_gmac_dev);
  40c35c:	4839      	ldr	r0, [pc, #228]	; (40c444 <gmac_low_level_init+0x248>)
  40c35e:	4b3b      	ldr	r3, [pc, #236]	; (40c44c <gmac_low_level_init+0x250>)
  40c360:	4798      	blx	r3

	/* Enable Rx, Tx and the statistics register. */
	gmac_enable_transmit(GMAC, true);
  40c362:	2101      	movs	r1, #1
  40c364:	4828      	ldr	r0, [pc, #160]	; (40c408 <gmac_low_level_init+0x20c>)
  40c366:	4b3a      	ldr	r3, [pc, #232]	; (40c450 <gmac_low_level_init+0x254>)
  40c368:	4798      	blx	r3
	gmac_enable_receive(GMAC, true);
  40c36a:	2101      	movs	r1, #1
  40c36c:	4826      	ldr	r0, [pc, #152]	; (40c408 <gmac_low_level_init+0x20c>)
  40c36e:	4b39      	ldr	r3, [pc, #228]	; (40c454 <gmac_low_level_init+0x258>)
  40c370:	4798      	blx	r3
	gmac_enable_statistics_write(GMAC, true);
  40c372:	2101      	movs	r1, #1
  40c374:	4824      	ldr	r0, [pc, #144]	; (40c408 <gmac_low_level_init+0x20c>)
  40c376:	4b38      	ldr	r3, [pc, #224]	; (40c458 <gmac_low_level_init+0x25c>)
  40c378:	4798      	blx	r3

	/* Set up the interrupts for transmission and errors. */
	gmac_enable_interrupt(GMAC, GMAC_INT_GROUP);
  40c37a:	2100      	movs	r1, #0
  40c37c:	4822      	ldr	r0, [pc, #136]	; (40c408 <gmac_low_level_init+0x20c>)
  40c37e:	4b37      	ldr	r3, [pc, #220]	; (40c45c <gmac_low_level_init+0x260>)
  40c380:	4798      	blx	r3


	/* Set GMAC address. */
	gmac_set_address(GMAC, 0, netif->hwaddr);
  40c382:	687b      	ldr	r3, [r7, #4]
  40c384:	3327      	adds	r3, #39	; 0x27
  40c386:	461a      	mov	r2, r3
  40c388:	2100      	movs	r1, #0
  40c38a:	481f      	ldr	r0, [pc, #124]	; (40c408 <gmac_low_level_init+0x20c>)
  40c38c:	4b34      	ldr	r3, [pc, #208]	; (40c460 <gmac_low_level_init+0x264>)
  40c38e:	4798      	blx	r3

	/* Enable NVIC GMAC interrupt. */
	NVIC_SetPriority(GMAC_IRQn, INT_PRIORITY_GMAC);
  40c390:	2100      	movs	r1, #0
  40c392:	2027      	movs	r0, #39	; 0x27
  40c394:	4b33      	ldr	r3, [pc, #204]	; (40c464 <gmac_low_level_init+0x268>)
  40c396:	4798      	blx	r3
	NVIC_EnableIRQ(GMAC_IRQn);
  40c398:	2027      	movs	r0, #39	; 0x27
  40c39a:	4b33      	ldr	r3, [pc, #204]	; (40c468 <gmac_low_level_init+0x26c>)
  40c39c:	4798      	blx	r3

	/* Init MAC PHY driver. */
	if (ethernet_phy_init(GMAC, BOARD_GMAC_PHY_ADDR, sysclk_get_cpu_hz()) != GMAC_OK) {
  40c39e:	4b17      	ldr	r3, [pc, #92]	; (40c3fc <gmac_low_level_init+0x200>)
  40c3a0:	4798      	blx	r3
  40c3a2:	4603      	mov	r3, r0
  40c3a4:	461a      	mov	r2, r3
  40c3a6:	2100      	movs	r1, #0
  40c3a8:	4817      	ldr	r0, [pc, #92]	; (40c408 <gmac_low_level_init+0x20c>)
  40c3aa:	4b30      	ldr	r3, [pc, #192]	; (40c46c <gmac_low_level_init+0x270>)
  40c3ac:	4798      	blx	r3
  40c3ae:	4603      	mov	r3, r0
  40c3b0:	2b00      	cmp	r3, #0
  40c3b2:	d119      	bne.n	40c3e8 <gmac_low_level_init+0x1ec>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: PHY init ERROR!\n"));
		return;
	}

	/* Auto Negotiate, work in RMII mode. */
	if (ethernet_phy_auto_negotiate(GMAC, BOARD_GMAC_PHY_ADDR) != GMAC_OK) {
  40c3b4:	2100      	movs	r1, #0
  40c3b6:	4814      	ldr	r0, [pc, #80]	; (40c408 <gmac_low_level_init+0x20c>)
  40c3b8:	4b2d      	ldr	r3, [pc, #180]	; (40c470 <gmac_low_level_init+0x274>)
  40c3ba:	4798      	blx	r3
  40c3bc:	4603      	mov	r3, r0
  40c3be:	2b00      	cmp	r3, #0
  40c3c0:	d114      	bne.n	40c3ec <gmac_low_level_init+0x1f0>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: auto negotiate ERROR!\n"));
		return;
	}

	/* Establish ethernet link. */
	while (ethernet_phy_set_link(GMAC, BOARD_GMAC_PHY_ADDR, 1) != GMAC_OK) {
  40c3c2:	bf00      	nop
  40c3c4:	2201      	movs	r2, #1
  40c3c6:	2100      	movs	r1, #0
  40c3c8:	480f      	ldr	r0, [pc, #60]	; (40c408 <gmac_low_level_init+0x20c>)
  40c3ca:	4b2a      	ldr	r3, [pc, #168]	; (40c474 <gmac_low_level_init+0x278>)
  40c3cc:	4798      	blx	r3
  40c3ce:	4603      	mov	r3, r0
  40c3d0:	2b00      	cmp	r3, #0
  40c3d2:	d10d      	bne.n	40c3f0 <gmac_low_level_init+0x1f4>
		LWIP_DEBUGF(NETIF_DEBUG, ("gmac_low_level_init: set link ERROR!\n"));
		return;
	}

	/* Set link up*/
	netif->flags |= NETIF_FLAG_LINK_UP;
  40c3d4:	687b      	ldr	r3, [r7, #4]
  40c3d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
  40c3da:	f043 0310 	orr.w	r3, r3, #16
  40c3de:	b2da      	uxtb	r2, r3
  40c3e0:	687b      	ldr	r3, [r7, #4]
  40c3e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  40c3e6:	e004      	b.n	40c3f2 <gmac_low_level_init+0x1f6>
		return;
  40c3e8:	bf00      	nop
  40c3ea:	e002      	b.n	40c3f2 <gmac_low_level_init+0x1f6>
		return;
  40c3ec:	bf00      	nop
  40c3ee:	e000      	b.n	40c3f2 <gmac_low_level_init+0x1f6>
		return;
  40c3f0:	bf00      	nop
}
  40c3f2:	3710      	adds	r7, #16
  40c3f4:	46bd      	mov	sp, r7
  40c3f6:	bd80      	pop	{r7, pc}
  40c3f8:	20400018 	.word	0x20400018
  40c3fc:	0040c029 	.word	0x0040c029
  40c400:	057619f1 	.word	0x057619f1
  40c404:	004019f5 	.word	0x004019f5
  40c408:	40050000 	.word	0x40050000
  40c40c:	0040bc11 	.word	0x0040bc11
  40c410:	0040be79 	.word	0x0040be79
  40c414:	0040bc9d 	.word	0x0040bc9d
  40c418:	0040bdd5 	.word	0x0040bdd5
  40c41c:	0040bda1 	.word	0x0040bda1
  40c420:	0040be95 	.word	0x0040be95
  40c424:	0040bd19 	.word	0x0040bd19
  40c428:	0040bd51 	.word	0x0040bd51
  40c42c:	0040be11 	.word	0x0040be11
  40c430:	0040bf13 	.word	0x0040bf13
  40c434:	204026c8 	.word	0x204026c8
  40c438:	0040bf39 	.word	0x0040bf39
  40c43c:	204026d0 	.word	0x204026d0
  40c440:	0040bf67 	.word	0x0040bf67
  40c444:	204026d8 	.word	0x204026d8
  40c448:	0040c0e5 	.word	0x0040c0e5
  40c44c:	0040c16d 	.word	0x0040c16d
  40c450:	0040bc65 	.word	0x0040bc65
  40c454:	0040bc2d 	.word	0x0040bc2d
  40c458:	0040bcbd 	.word	0x0040bcbd
  40c45c:	0040be5d 	.word	0x0040be5d
  40c460:	0040bead 	.word	0x0040bead
  40c464:	0040bbbd 	.word	0x0040bbbd
  40c468:	0040bb55 	.word	0x0040bb55
  40c46c:	00400d15 	.word	0x00400d15
  40c470:	00400f01 	.word	0x00400f01
  40c474:	00400dcd 	.word	0x00400dcd

0040c478 <gmac_low_level_output>:
 *
 * \return ERR_OK if the packet could be sent.
 * an err_t value if the packet couldn't be sent.
 */
static err_t gmac_low_level_output(struct netif *netif, struct pbuf *p)
{
  40c478:	b580      	push	{r7, lr}
  40c47a:	b086      	sub	sp, #24
  40c47c:	af00      	add	r7, sp, #0
  40c47e:	6078      	str	r0, [r7, #4]
  40c480:	6039      	str	r1, [r7, #0]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c482:	687b      	ldr	r3, [r7, #4]
  40c484:	69db      	ldr	r3, [r3, #28]
  40c486:	60fb      	str	r3, [r7, #12]
	struct pbuf *q = NULL;
  40c488:	2300      	movs	r3, #0
  40c48a:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = 0;
  40c48c:	2300      	movs	r3, #0
  40c48e:	613b      	str	r3, [r7, #16]

	/* Handle GMAC underrun or AHB errors. */
	if (gmac_get_tx_status(GMAC) & GMAC_TX_ERRORS) {
  40c490:	482e      	ldr	r0, [pc, #184]	; (40c54c <gmac_low_level_output+0xd4>)
  40c492:	4b2f      	ldr	r3, [pc, #188]	; (40c550 <gmac_low_level_output+0xd8>)
  40c494:	4798      	blx	r3
		gmac_clear_tx_status(GMAC, GMAC_TX_ERRORS);

		gmac_enable_transmit(GMAC, true);
	}

	buffer = (uint8_t*)ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].addr;
  40c496:	68fa      	ldr	r2, [r7, #12]
  40c498:	f241 230c 	movw	r3, #4620	; 0x120c
  40c49c:	4413      	add	r3, r2
  40c49e:	681a      	ldr	r2, [r3, #0]
  40c4a0:	68fb      	ldr	r3, [r7, #12]
  40c4a2:	3203      	adds	r2, #3
  40c4a4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
  40c4a8:	613b      	str	r3, [r7, #16]

	/* Copy pbuf chain into TX buffer. */
	for (q = p; q != NULL; q = q->next) {
  40c4aa:	683b      	ldr	r3, [r7, #0]
  40c4ac:	617b      	str	r3, [r7, #20]
  40c4ae:	e010      	b.n	40c4d2 <gmac_low_level_output+0x5a>
		memcpy(buffer, q->payload, q->len);
  40c4b0:	697b      	ldr	r3, [r7, #20]
  40c4b2:	6859      	ldr	r1, [r3, #4]
  40c4b4:	697b      	ldr	r3, [r7, #20]
  40c4b6:	895b      	ldrh	r3, [r3, #10]
  40c4b8:	461a      	mov	r2, r3
  40c4ba:	6938      	ldr	r0, [r7, #16]
  40c4bc:	4b25      	ldr	r3, [pc, #148]	; (40c554 <gmac_low_level_output+0xdc>)
  40c4be:	4798      	blx	r3
		buffer += q->len;
  40c4c0:	697b      	ldr	r3, [r7, #20]
  40c4c2:	895b      	ldrh	r3, [r3, #10]
  40c4c4:	461a      	mov	r2, r3
  40c4c6:	693b      	ldr	r3, [r7, #16]
  40c4c8:	4413      	add	r3, r2
  40c4ca:	613b      	str	r3, [r7, #16]
	for (q = p; q != NULL; q = q->next) {
  40c4cc:	697b      	ldr	r3, [r7, #20]
  40c4ce:	681b      	ldr	r3, [r3, #0]
  40c4d0:	617b      	str	r3, [r7, #20]
  40c4d2:	697b      	ldr	r3, [r7, #20]
  40c4d4:	2b00      	cmp	r3, #0
  40c4d6:	d1eb      	bne.n	40c4b0 <gmac_low_level_output+0x38>
	}

	/* Set len and mark the buffer to be sent by GMAC. */
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_len = p->tot_len;
  40c4d8:	68fa      	ldr	r2, [r7, #12]
  40c4da:	f241 230c 	movw	r3, #4620	; 0x120c
  40c4de:	4413      	add	r3, r2
  40c4e0:	681b      	ldr	r3, [r3, #0]
  40c4e2:	683a      	ldr	r2, [r7, #0]
  40c4e4:	8912      	ldrh	r2, [r2, #8]
  40c4e6:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40c4ea:	b291      	uxth	r1, r2
  40c4ec:	68fa      	ldr	r2, [r7, #12]
  40c4ee:	3303      	adds	r3, #3
  40c4f0:	00db      	lsls	r3, r3, #3
  40c4f2:	4413      	add	r3, r2
  40c4f4:	889a      	ldrh	r2, [r3, #4]
  40c4f6:	f361 020d 	bfi	r2, r1, #0, #14
  40c4fa:	809a      	strh	r2, [r3, #4]
	ps_gmac_dev->tx_desc[ps_gmac_dev->us_tx_idx].status.bm.b_used = 0;
  40c4fc:	68fa      	ldr	r2, [r7, #12]
  40c4fe:	f241 230c 	movw	r3, #4620	; 0x120c
  40c502:	4413      	add	r3, r2
  40c504:	681b      	ldr	r3, [r3, #0]
  40c506:	68fa      	ldr	r2, [r7, #12]
  40c508:	3303      	adds	r3, #3
  40c50a:	00db      	lsls	r3, r3, #3
  40c50c:	4413      	add	r3, r2
  40c50e:	79da      	ldrb	r2, [r3, #7]
  40c510:	f36f 12c7 	bfc	r2, #7, #1
  40c514:	71da      	strb	r2, [r3, #7]

	LWIP_DEBUGF(NETIF_DEBUG,
			("gmac_low_level_output: DMA buffer sent, size=%d [idx=%u]\n",
			p->tot_len, ps_gmac_dev->us_tx_idx));

	ps_gmac_dev->us_tx_idx = (ps_gmac_dev->us_tx_idx + 1) % GMAC_TX_BUFFERS;
  40c516:	68fa      	ldr	r2, [r7, #12]
  40c518:	f241 230c 	movw	r3, #4620	; 0x120c
  40c51c:	4413      	add	r3, r2
  40c51e:	681b      	ldr	r3, [r3, #0]
  40c520:	1c59      	adds	r1, r3, #1
  40c522:	4b0d      	ldr	r3, [pc, #52]	; (40c558 <gmac_low_level_output+0xe0>)
  40c524:	fba3 2301 	umull	r2, r3, r3, r1
  40c528:	085a      	lsrs	r2, r3, #1
  40c52a:	4613      	mov	r3, r2
  40c52c:	005b      	lsls	r3, r3, #1
  40c52e:	4413      	add	r3, r2
  40c530:	1aca      	subs	r2, r1, r3
  40c532:	68f9      	ldr	r1, [r7, #12]
  40c534:	f241 230c 	movw	r3, #4620	; 0x120c
  40c538:	440b      	add	r3, r1
  40c53a:	601a      	str	r2, [r3, #0]

	/* Now start to transmission. */
	gmac_start_transmission(GMAC);
  40c53c:	4803      	ldr	r0, [pc, #12]	; (40c54c <gmac_low_level_output+0xd4>)
  40c53e:	4b07      	ldr	r3, [pc, #28]	; (40c55c <gmac_low_level_output+0xe4>)
  40c540:	4798      	blx	r3
#if LWIP_STATS
	lwip_tx_count += p->tot_len;
#endif
	LINK_STATS_INC(link.xmit);

	return ERR_OK;
  40c542:	2300      	movs	r3, #0
}
  40c544:	4618      	mov	r0, r3
  40c546:	3718      	adds	r7, #24
  40c548:	46bd      	mov	sp, r7
  40c54a:	bd80      	pop	{r7, pc}
  40c54c:	40050000 	.word	0x40050000
  40c550:	0040bd89 	.word	0x0040bd89
  40c554:	0040cd79 	.word	0x0040cd79
  40c558:	aaaaaaab 	.word	0xaaaaaaab
  40c55c:	0040bcf5 	.word	0x0040bcf5

0040c560 <gmac_low_level_input>:
 *
 * \return a pbuf filled with the received packet (including MAC header).
 * 0 on memory error.
 */
static struct pbuf *gmac_low_level_input(struct netif *netif)
{
  40c560:	b580      	push	{r7, lr}
  40c562:	b088      	sub	sp, #32
  40c564:	af00      	add	r7, sp, #0
  40c566:	6078      	str	r0, [r7, #4]
	struct gmac_device *ps_gmac_dev = netif->state;
  40c568:	687b      	ldr	r3, [r7, #4]
  40c56a:	69db      	ldr	r3, [r3, #28]
  40c56c:	61bb      	str	r3, [r7, #24]
	struct pbuf *p = 0;
  40c56e:	2300      	movs	r3, #0
  40c570:	61fb      	str	r3, [r7, #28]
	uint32_t length = 0;
  40c572:	2300      	movs	r3, #0
  40c574:	617b      	str	r3, [r7, #20]
	uint32_t ul_index = 0;
  40c576:	2300      	movs	r3, #0
  40c578:	613b      	str	r3, [r7, #16]
	gmac_rx_descriptor_t *p_rx = &ps_gmac_dev->rx_desc[ps_gmac_dev->us_rx_idx];
  40c57a:	69ba      	ldr	r2, [r7, #24]
  40c57c:	f241 2308 	movw	r3, #4616	; 0x1208
  40c580:	4413      	add	r3, r2
  40c582:	681b      	ldr	r3, [r3, #0]
  40c584:	00db      	lsls	r3, r3, #3
  40c586:	69ba      	ldr	r2, [r7, #24]
  40c588:	4413      	add	r3, r2
  40c58a:	60fb      	str	r3, [r7, #12]

	/* Handle GMAC overrun or AHB errors. */
	if (gmac_get_rx_status(GMAC) & GMAC_RX_ERRORS) {
  40c58c:	4825      	ldr	r0, [pc, #148]	; (40c624 <gmac_low_level_input+0xc4>)
  40c58e:	4b26      	ldr	r3, [pc, #152]	; (40c628 <gmac_low_level_input+0xc8>)
  40c590:	4798      	blx	r3

		gmac_enable_receive(GMAC, true);
	}

	/* Check that a packet has been received and processed by GMAC. */
	if ((p_rx->addr.val & GMAC_RXD_OWNERSHIP) == GMAC_RXD_OWNERSHIP) {
  40c592:	68fb      	ldr	r3, [r7, #12]
  40c594:	681b      	ldr	r3, [r3, #0]
  40c596:	f003 0301 	and.w	r3, r3, #1
  40c59a:	2b00      	cmp	r3, #0
  40c59c:	d03c      	beq.n	40c618 <gmac_low_level_input+0xb8>
		/* Packet is a SOF since packet size is set to maximum. */
		length = p_rx->status.val & GMAC_RXD_LEN_MASK;
  40c59e:	68fb      	ldr	r3, [r7, #12]
  40c5a0:	685b      	ldr	r3, [r3, #4]
  40c5a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  40c5a6:	617b      	str	r3, [r7, #20]

		/* Fetch pre-allocated pbuf. */
		p = ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx];
  40c5a8:	69ba      	ldr	r2, [r7, #24]
  40c5aa:	f241 2308 	movw	r3, #4616	; 0x1208
  40c5ae:	4413      	add	r3, r2
  40c5b0:	681a      	ldr	r2, [r3, #0]
  40c5b2:	69bb      	ldr	r3, [r7, #24]
  40c5b4:	320c      	adds	r2, #12
  40c5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40c5ba:	61fb      	str	r3, [r7, #28]
		p->len = length;
  40c5bc:	697b      	ldr	r3, [r7, #20]
  40c5be:	b29a      	uxth	r2, r3
  40c5c0:	69fb      	ldr	r3, [r7, #28]
  40c5c2:	815a      	strh	r2, [r3, #10]

		/* Remove this pbuf from its desriptor. */
		ps_gmac_dev->rx_pbuf[ps_gmac_dev->us_rx_idx] = 0;
  40c5c4:	69ba      	ldr	r2, [r7, #24]
  40c5c6:	f241 2308 	movw	r3, #4616	; 0x1208
  40c5ca:	4413      	add	r3, r2
  40c5cc:	681a      	ldr	r2, [r3, #0]
  40c5ce:	69bb      	ldr	r3, [r7, #24]
  40c5d0:	320c      	adds	r2, #12
  40c5d2:	2100      	movs	r1, #0
  40c5d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		LWIP_DEBUGF(NETIF_DEBUG,
				("gmac_low_level_input: DMA buffer %p received, size=%u [idx=%u]\n",
				p, length, ps_gmac_dev->us_rx_idx));

		/* Set pbuf total packet size. */
		p->tot_len = length;
  40c5d8:	697b      	ldr	r3, [r7, #20]
  40c5da:	b29a      	uxth	r2, r3
  40c5dc:	69fb      	ldr	r3, [r7, #28]
  40c5de:	811a      	strh	r2, [r3, #8]
		LINK_STATS_INC(link.recv);

		/* Fill empty descriptors with new pbufs. */
		gmac_rx_populate_queue(ps_gmac_dev);
  40c5e0:	69b8      	ldr	r0, [r7, #24]
  40c5e2:	4b12      	ldr	r3, [pc, #72]	; (40c62c <gmac_low_level_input+0xcc>)
  40c5e4:	4798      	blx	r3

		/* Mark the descriptor ready for transfer. */
		p_rx->addr.val &= ~(GMAC_RXD_OWNERSHIP);
  40c5e6:	68fb      	ldr	r3, [r7, #12]
  40c5e8:	681b      	ldr	r3, [r3, #0]
  40c5ea:	f023 0201 	bic.w	r2, r3, #1
  40c5ee:	68fb      	ldr	r3, [r7, #12]
  40c5f0:	601a      	str	r2, [r3, #0]

		ps_gmac_dev->us_rx_idx = (ps_gmac_dev->us_rx_idx + 1) % GMAC_RX_BUFFERS;
  40c5f2:	69ba      	ldr	r2, [r7, #24]
  40c5f4:	f241 2308 	movw	r3, #4616	; 0x1208
  40c5f8:	4413      	add	r3, r2
  40c5fa:	681b      	ldr	r3, [r3, #0]
  40c5fc:	1c59      	adds	r1, r3, #1
  40c5fe:	4b0c      	ldr	r3, [pc, #48]	; (40c630 <gmac_low_level_input+0xd0>)
  40c600:	fba3 2301 	umull	r2, r3, r3, r1
  40c604:	085a      	lsrs	r2, r3, #1
  40c606:	4613      	mov	r3, r2
  40c608:	005b      	lsls	r3, r3, #1
  40c60a:	4413      	add	r3, r2
  40c60c:	1aca      	subs	r2, r1, r3
  40c60e:	69b9      	ldr	r1, [r7, #24]
  40c610:	f241 2308 	movw	r3, #4616	; 0x1208
  40c614:	440b      	add	r3, r1
  40c616:	601a      	str	r2, [r3, #0]
#if LWIP_STATS
	lwip_rx_count += length;
#endif
	}

	return p;
  40c618:	69fb      	ldr	r3, [r7, #28]
}
  40c61a:	4618      	mov	r0, r3
  40c61c:	3720      	adds	r7, #32
  40c61e:	46bd      	mov	sp, r7
  40c620:	bd80      	pop	{r7, pc}
  40c622:	bf00      	nop
  40c624:	40050000 	.word	0x40050000
  40c628:	0040bdbd 	.word	0x0040bdbd
  40c62c:	0040c051 	.word	0x0040c051
  40c630:	aaaaaaab 	.word	0xaaaaaaab

0040c634 <ethernetif_input>:
 * input function is called.
 *
 * \param netif the lwIP network interface structure for this ethernetif.
 */
void ethernetif_input(struct netif *netif)
{
  40c634:	b580      	push	{r7, lr}
  40c636:	b084      	sub	sp, #16
  40c638:	af00      	add	r7, sp, #0
  40c63a:	6078      	str	r0, [r7, #4]
	struct eth_hdr *ethhdr;
	struct pbuf *p;

	/* Move received packet into a new pbuf. */
	p = gmac_low_level_input(netif);
  40c63c:	6878      	ldr	r0, [r7, #4]
  40c63e:	4b17      	ldr	r3, [pc, #92]	; (40c69c <ethernetif_input+0x68>)
  40c640:	4798      	blx	r3
  40c642:	60f8      	str	r0, [r7, #12]
	if (p == NULL)
  40c644:	68fb      	ldr	r3, [r7, #12]
  40c646:	2b00      	cmp	r3, #0
  40c648:	d021      	beq.n	40c68e <ethernetif_input+0x5a>
		return;

	/* Points to packet payload, which starts with an Ethernet header. */
	ethhdr = p->payload;
  40c64a:	68fb      	ldr	r3, [r7, #12]
  40c64c:	685b      	ldr	r3, [r3, #4]
  40c64e:	60bb      	str	r3, [r7, #8]

	switch (htons(ethhdr->type)) {
  40c650:	68bb      	ldr	r3, [r7, #8]
  40c652:	899b      	ldrh	r3, [r3, #12]
  40c654:	b29b      	uxth	r3, r3
  40c656:	4618      	mov	r0, r3
  40c658:	4b11      	ldr	r3, [pc, #68]	; (40c6a0 <ethernetif_input+0x6c>)
  40c65a:	4798      	blx	r3
  40c65c:	4603      	mov	r3, r0
  40c65e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
  40c662:	d003      	beq.n	40c66c <ethernetif_input+0x38>
  40c664:	f640 0206 	movw	r2, #2054	; 0x806
  40c668:	4293      	cmp	r3, r2
  40c66a:	d10b      	bne.n	40c684 <ethernetif_input+0x50>
#if PPPOE_SUPPORT
		case ETHTYPE_PPPOEDISC:
		case ETHTYPE_PPPOE:
#endif /* PPPOE_SUPPORT */
			/* Send packet to lwIP for processing. */
			if (netif->input(p, netif) != ERR_OK) {
  40c66c:	687b      	ldr	r3, [r7, #4]
  40c66e:	691b      	ldr	r3, [r3, #16]
  40c670:	6879      	ldr	r1, [r7, #4]
  40c672:	68f8      	ldr	r0, [r7, #12]
  40c674:	4798      	blx	r3
  40c676:	4603      	mov	r3, r0
  40c678:	2b00      	cmp	r3, #0
  40c67a:	d00a      	beq.n	40c692 <ethernetif_input+0x5e>
				LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
				/* Free buffer. */
				pbuf_free(p);
  40c67c:	68f8      	ldr	r0, [r7, #12]
  40c67e:	4b09      	ldr	r3, [pc, #36]	; (40c6a4 <ethernetif_input+0x70>)
  40c680:	4798      	blx	r3
			}
			break;
  40c682:	e006      	b.n	40c692 <ethernetif_input+0x5e>

		default:
			/* Free buffer. */
			pbuf_free(p);
  40c684:	68f8      	ldr	r0, [r7, #12]
  40c686:	4b07      	ldr	r3, [pc, #28]	; (40c6a4 <ethernetif_input+0x70>)
  40c688:	4798      	blx	r3
			break;
  40c68a:	bf00      	nop
  40c68c:	e002      	b.n	40c694 <ethernetif_input+0x60>
		return;
  40c68e:	bf00      	nop
  40c690:	e000      	b.n	40c694 <ethernetif_input+0x60>
			break;
  40c692:	bf00      	nop
	}
}
  40c694:	3710      	adds	r7, #16
  40c696:	46bd      	mov	sp, r7
  40c698:	bd80      	pop	{r7, pc}
  40c69a:	bf00      	nop
  40c69c:	0040c561 	.word	0x0040c561
  40c6a0:	00401f99 	.word	0x00401f99
  40c6a4:	00405b81 	.word	0x00405b81

0040c6a8 <ethernetif_init>:
 * \return ERR_OK if the loopif is initialized.
 * ERR_MEM if private data couldn't be allocated.
 * any other err_t on error.
 */
err_t ethernetif_init(struct netif *netif)
{
  40c6a8:	b580      	push	{r7, lr}
  40c6aa:	b082      	sub	sp, #8
  40c6ac:	af00      	add	r7, sp, #0
  40c6ae:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));

	gs_gmac_dev.netif = netif;
  40c6b0:	4a0f      	ldr	r2, [pc, #60]	; (40c6f0 <ethernetif_init+0x48>)
  40c6b2:	f241 2310 	movw	r3, #4624	; 0x1210
  40c6b6:	4413      	add	r3, r2
  40c6b8:	687a      	ldr	r2, [r7, #4]
  40c6ba:	601a      	str	r2, [r3, #0]
	 */
#if LWIP_SNMP
	NETIF_INIT_SNMP(netif, snmp_ifType_ethernet_csmacd, NET_LINK_SPEED);
#endif /* LWIP_SNMP */

	netif->state = &gs_gmac_dev;
  40c6bc:	687b      	ldr	r3, [r7, #4]
  40c6be:	4a0c      	ldr	r2, [pc, #48]	; (40c6f0 <ethernetif_init+0x48>)
  40c6c0:	61da      	str	r2, [r3, #28]
	netif->name[0] = IFNAME0;
  40c6c2:	687b      	ldr	r3, [r7, #4]
  40c6c4:	2265      	movs	r2, #101	; 0x65
  40c6c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->name[1] = IFNAME1;
  40c6ca:	687b      	ldr	r3, [r7, #4]
  40c6cc:	226e      	movs	r2, #110	; 0x6e
  40c6ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	/* We directly use etharp_output() here to save a function call.
	 * You can instead declare your own function an call etharp_output()
	 * from it if you have to do some checks before sending (e.g. if link
	 * is available...) */
	netif->output = etharp_output;
  40c6d2:	687b      	ldr	r3, [r7, #4]
  40c6d4:	4a07      	ldr	r2, [pc, #28]	; (40c6f4 <ethernetif_init+0x4c>)
  40c6d6:	615a      	str	r2, [r3, #20]
	netif->linkoutput = gmac_low_level_output;
  40c6d8:	687b      	ldr	r3, [r7, #4]
  40c6da:	4a07      	ldr	r2, [pc, #28]	; (40c6f8 <ethernetif_init+0x50>)
  40c6dc:	619a      	str	r2, [r3, #24]
	/* Initialize the hardware */
	gmac_low_level_init(netif);
  40c6de:	6878      	ldr	r0, [r7, #4]
  40c6e0:	4b06      	ldr	r3, [pc, #24]	; (40c6fc <ethernetif_init+0x54>)
  40c6e2:	4798      	blx	r3
			(id != 0));
	if (id == 0)
		return ERR_MEM;
#endif

	return ERR_OK;
  40c6e4:	2300      	movs	r3, #0
}
  40c6e6:	4618      	mov	r0, r3
  40c6e8:	3708      	adds	r7, #8
  40c6ea:	46bd      	mov	sp, r7
  40c6ec:	bd80      	pop	{r7, pc}
  40c6ee:	bf00      	nop
  40c6f0:	204026d8 	.word	0x204026d8
  40c6f4:	0040b53d 	.word	0x0040b53d
  40c6f8:	0040c479 	.word	0x0040c479
  40c6fc:	0040c1fd 	.word	0x0040c1fd

0040c700 <timers_update>:

/**
 * \brief Timer management function.
 */
static void timers_update(void)
{
  40c700:	b580      	push	{r7, lr}
  40c702:	b084      	sub	sp, #16
  40c704:	af00      	add	r7, sp, #0
	static uint32_t ul_last_time;
	uint32_t ul_cur_time, ul_time_diff, ul_idx_timer;
	timers_info_t *p_tmr_inf;

	ul_cur_time = sys_get_ms();
  40c706:	4b24      	ldr	r3, [pc, #144]	; (40c798 <timers_update+0x98>)
  40c708:	4798      	blx	r3
  40c70a:	6078      	str	r0, [r7, #4]
	if (ul_cur_time >= ul_last_time) {
  40c70c:	4b23      	ldr	r3, [pc, #140]	; (40c79c <timers_update+0x9c>)
  40c70e:	681b      	ldr	r3, [r3, #0]
  40c710:	687a      	ldr	r2, [r7, #4]
  40c712:	429a      	cmp	r2, r3
  40c714:	d305      	bcc.n	40c722 <timers_update+0x22>
		ul_time_diff = ul_cur_time - ul_last_time;
  40c716:	4b21      	ldr	r3, [pc, #132]	; (40c79c <timers_update+0x9c>)
  40c718:	681b      	ldr	r3, [r3, #0]
  40c71a:	687a      	ldr	r2, [r7, #4]
  40c71c:	1ad3      	subs	r3, r2, r3
  40c71e:	60fb      	str	r3, [r7, #12]
  40c720:	e005      	b.n	40c72e <timers_update+0x2e>
	} else {
		ul_time_diff = 0xFFFFFFFF - ul_last_time + ul_cur_time;
  40c722:	4b1e      	ldr	r3, [pc, #120]	; (40c79c <timers_update+0x9c>)
  40c724:	681b      	ldr	r3, [r3, #0]
  40c726:	687a      	ldr	r2, [r7, #4]
  40c728:	1ad3      	subs	r3, r2, r3
  40c72a:	3b01      	subs	r3, #1
  40c72c:	60fb      	str	r3, [r7, #12]
	}

	if (ul_time_diff) {
  40c72e:	68fb      	ldr	r3, [r7, #12]
  40c730:	2b00      	cmp	r3, #0
  40c732:	d02d      	beq.n	40c790 <timers_update+0x90>
		ul_last_time = ul_cur_time;
  40c734:	4a19      	ldr	r2, [pc, #100]	; (40c79c <timers_update+0x9c>)
  40c736:	687b      	ldr	r3, [r7, #4]
  40c738:	6013      	str	r3, [r2, #0]
		for (ul_idx_timer = 0;
  40c73a:	2300      	movs	r3, #0
  40c73c:	60bb      	str	r3, [r7, #8]
  40c73e:	e024      	b.n	40c78a <timers_update+0x8a>
			 ul_idx_timer < (sizeof(gs_timers_table) / sizeof(timers_info_t));
			 ul_idx_timer++) {
			p_tmr_inf = &gs_timers_table[ul_idx_timer];
  40c740:	68ba      	ldr	r2, [r7, #8]
  40c742:	4613      	mov	r3, r2
  40c744:	005b      	lsls	r3, r3, #1
  40c746:	4413      	add	r3, r2
  40c748:	009b      	lsls	r3, r3, #2
  40c74a:	4a15      	ldr	r2, [pc, #84]	; (40c7a0 <timers_update+0xa0>)
  40c74c:	4413      	add	r3, r2
  40c74e:	603b      	str	r3, [r7, #0]
			p_tmr_inf->timer += ul_time_diff;
  40c750:	683b      	ldr	r3, [r7, #0]
  40c752:	681a      	ldr	r2, [r3, #0]
  40c754:	68fb      	ldr	r3, [r7, #12]
  40c756:	441a      	add	r2, r3
  40c758:	683b      	ldr	r3, [r7, #0]
  40c75a:	601a      	str	r2, [r3, #0]
			if (p_tmr_inf->timer > p_tmr_inf->timer_interval) {
  40c75c:	683b      	ldr	r3, [r7, #0]
  40c75e:	681a      	ldr	r2, [r3, #0]
  40c760:	683b      	ldr	r3, [r7, #0]
  40c762:	685b      	ldr	r3, [r3, #4]
  40c764:	429a      	cmp	r2, r3
  40c766:	d90d      	bls.n	40c784 <timers_update+0x84>
				if (p_tmr_inf->timer_func) {
  40c768:	683b      	ldr	r3, [r7, #0]
  40c76a:	689b      	ldr	r3, [r3, #8]
  40c76c:	2b00      	cmp	r3, #0
  40c76e:	d002      	beq.n	40c776 <timers_update+0x76>
					p_tmr_inf->timer_func();
  40c770:	683b      	ldr	r3, [r7, #0]
  40c772:	689b      	ldr	r3, [r3, #8]
  40c774:	4798      	blx	r3
				}

				p_tmr_inf->timer -= p_tmr_inf->timer_interval;
  40c776:	683b      	ldr	r3, [r7, #0]
  40c778:	681a      	ldr	r2, [r3, #0]
  40c77a:	683b      	ldr	r3, [r7, #0]
  40c77c:	685b      	ldr	r3, [r3, #4]
  40c77e:	1ad2      	subs	r2, r2, r3
  40c780:	683b      	ldr	r3, [r7, #0]
  40c782:	601a      	str	r2, [r3, #0]
			 ul_idx_timer++) {
  40c784:	68bb      	ldr	r3, [r7, #8]
  40c786:	3301      	adds	r3, #1
  40c788:	60bb      	str	r3, [r7, #8]
		for (ul_idx_timer = 0;
  40c78a:	68bb      	ldr	r3, [r7, #8]
  40c78c:	2b04      	cmp	r3, #4
  40c78e:	d9d7      	bls.n	40c740 <timers_update+0x40>
			}
		}
	}
}
  40c790:	bf00      	nop
  40c792:	3710      	adds	r7, #16
  40c794:	46bd      	mov	sp, r7
  40c796:	bd80      	pop	{r7, pc}
  40c798:	0040c9e5 	.word	0x0040c9e5
  40c79c:	204038ec 	.word	0x204038ec
  40c7a0:	20400020 	.word	0x20400020

0040c7a4 <ethernet_configure_interface>:

/**
 * \brief Configure network interface driver.
 */
static void ethernet_configure_interface(void)
{
  40c7a4:	b590      	push	{r4, r7, lr}
  40c7a6:	b089      	sub	sp, #36	; 0x24
  40c7a8:	af04      	add	r7, sp, #16
	struct ip_addr x_ip_addr, x_net_mask, x_gateway;
	extern err_t ethernetif_init(struct netif *netif);

#if defined(DHCP_USED)
		/* DHCP mode. */
	x_ip_addr.addr = 0;
  40c7aa:	2300      	movs	r3, #0
  40c7ac:	60fb      	str	r3, [r7, #12]
	x_net_mask.addr = 0;
  40c7ae:	2300      	movs	r3, #0
  40c7b0:	60bb      	str	r3, [r7, #8]
			ETHERNET_CONF_GATEWAY_ADDR2,
			ETHERNET_CONF_GATEWAY_ADDR3);
#endif

	/* Add data to netif */
	if (NULL == netif_add(&gs_net_if, &x_ip_addr, &x_net_mask, &x_gateway, NULL,
  40c7b2:	1d38      	adds	r0, r7, #4
  40c7b4:	f107 0208 	add.w	r2, r7, #8
  40c7b8:	f107 010c 	add.w	r1, r7, #12
  40c7bc:	4b09      	ldr	r3, [pc, #36]	; (40c7e4 <ethernet_configure_interface+0x40>)
  40c7be:	9302      	str	r3, [sp, #8]
  40c7c0:	4b09      	ldr	r3, [pc, #36]	; (40c7e8 <ethernet_configure_interface+0x44>)
  40c7c2:	9301      	str	r3, [sp, #4]
  40c7c4:	2300      	movs	r3, #0
  40c7c6:	9300      	str	r3, [sp, #0]
  40c7c8:	4603      	mov	r3, r0
  40c7ca:	4808      	ldr	r0, [pc, #32]	; (40c7ec <ethernet_configure_interface+0x48>)
  40c7cc:	4c08      	ldr	r4, [pc, #32]	; (40c7f0 <ethernet_configure_interface+0x4c>)
  40c7ce:	47a0      	blx	r4
			ethernetif_init, ethernet_input)) {
		LWIP_ASSERT("NULL == netif_add", 0);
	}

	/* Make it the default interface */
	netif_set_default(&gs_net_if);
  40c7d0:	4806      	ldr	r0, [pc, #24]	; (40c7ec <ethernet_configure_interface+0x48>)
  40c7d2:	4b08      	ldr	r3, [pc, #32]	; (40c7f4 <ethernet_configure_interface+0x50>)
  40c7d4:	4798      	blx	r3
	//netif_set_status_callback(&gs_net_if, status_callback);

	/* Bring it up */
#if defined(DHCP_USED)
	/* DHCP mode. */
	if (ERR_OK != dhcp_start(&gs_net_if)) {
  40c7d6:	4805      	ldr	r0, [pc, #20]	; (40c7ec <ethernet_configure_interface+0x48>)
  40c7d8:	4b07      	ldr	r3, [pc, #28]	; (40c7f8 <ethernet_configure_interface+0x54>)
  40c7da:	4798      	blx	r3
#else
	/* Static mode. */
	netif_set_up(&gs_net_if);
	//printf("Static IP Address Assigned\r\n");
#endif
}
  40c7dc:	bf00      	nop
  40c7de:	3714      	adds	r7, #20
  40c7e0:	46bd      	mov	sp, r7
  40c7e2:	bd90      	pop	{r4, r7, pc}
  40c7e4:	0040ba45 	.word	0x0040ba45
  40c7e8:	0040c6a9 	.word	0x0040c6a9
  40c7ec:	204049c0 	.word	0x204049c0
  40c7f0:	00405535 	.word	0x00405535
  40c7f4:	00405701 	.word	0x00405701
  40c7f8:	0040258d 	.word	0x0040258d

0040c7fc <init_ethernet>:

/**
 * \brief Initialize the lwIP TCP/IP stack with the network interface driver.
 */
void init_ethernet(void)
{
  40c7fc:	b580      	push	{r7, lr}
  40c7fe:	af00      	add	r7, sp, #0
	/* Initialize lwIP. */
	lwip_init();
  40c800:	4b03      	ldr	r3, [pc, #12]	; (40c810 <init_ethernet+0x14>)
  40c802:	4798      	blx	r3

	/* Set hw and IP parameters, initialize MAC too. */
	ethernet_configure_interface();
  40c804:	4b03      	ldr	r3, [pc, #12]	; (40c814 <init_ethernet+0x18>)
  40c806:	4798      	blx	r3

	/* Initialize timer. */
	sys_init_timing();
  40c808:	4b03      	ldr	r3, [pc, #12]	; (40c818 <init_ethernet+0x1c>)
  40c80a:	4798      	blx	r3
}
  40c80c:	bf00      	nop
  40c80e:	bd80      	pop	{r7, pc}
  40c810:	00404ced 	.word	0x00404ced
  40c814:	0040c7a5 	.word	0x0040c7a5
  40c818:	0040c93d 	.word	0x0040c93d

0040c81c <ethernet_task>:

/**
 * \brief Process incoming ethernet frames, then update timers.
 */
bool ethernet_task(void)
{
  40c81c:	b580      	push	{r7, lr}
  40c81e:	af00      	add	r7, sp, #0
	/* Poll the network interface driver for incoming ethernet frames. */
	ethernetif_input(&gs_net_if);
  40c820:	4806      	ldr	r0, [pc, #24]	; (40c83c <ethernet_task+0x20>)
  40c822:	4b07      	ldr	r3, [pc, #28]	; (40c840 <ethernet_task+0x24>)
  40c824:	4798      	blx	r3

	/* Update the periodic timer. */
	timers_update();
  40c826:	4b07      	ldr	r3, [pc, #28]	; (40c844 <ethernet_task+0x28>)
  40c828:	4798      	blx	r3
	
	if(gs_net_if.ip_addr.addr == 0)
  40c82a:	4b04      	ldr	r3, [pc, #16]	; (40c83c <ethernet_task+0x20>)
  40c82c:	685b      	ldr	r3, [r3, #4]
  40c82e:	2b00      	cmp	r3, #0
  40c830:	d101      	bne.n	40c836 <ethernet_task+0x1a>
		return false;
  40c832:	2300      	movs	r3, #0
  40c834:	e000      	b.n	40c838 <ethernet_task+0x1c>
	else 
		return true;
  40c836:	2301      	movs	r3, #1
}
  40c838:	4618      	mov	r0, r3
  40c83a:	bd80      	pop	{r7, pc}
  40c83c:	204049c0 	.word	0x204049c0
  40c840:	0040c635 	.word	0x0040c635
  40c844:	0040c701 	.word	0x0040c701

0040c848 <NVIC_EnableIRQ>:
{
  40c848:	b480      	push	{r7}
  40c84a:	b083      	sub	sp, #12
  40c84c:	af00      	add	r7, sp, #0
  40c84e:	4603      	mov	r3, r0
  40c850:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40c852:	4909      	ldr	r1, [pc, #36]	; (40c878 <NVIC_EnableIRQ+0x30>)
  40c854:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40c858:	095b      	lsrs	r3, r3, #5
  40c85a:	79fa      	ldrb	r2, [r7, #7]
  40c85c:	f002 021f 	and.w	r2, r2, #31
  40c860:	2001      	movs	r0, #1
  40c862:	fa00 f202 	lsl.w	r2, r0, r2
  40c866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40c86a:	bf00      	nop
  40c86c:	370c      	adds	r7, #12
  40c86e:	46bd      	mov	sp, r7
  40c870:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c874:	4770      	bx	lr
  40c876:	bf00      	nop
  40c878:	e000e100 	.word	0xe000e100

0040c87c <osc_get_rate>:
{
  40c87c:	b480      	push	{r7}
  40c87e:	b083      	sub	sp, #12
  40c880:	af00      	add	r7, sp, #0
  40c882:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40c884:	687b      	ldr	r3, [r7, #4]
  40c886:	2b07      	cmp	r3, #7
  40c888:	d825      	bhi.n	40c8d6 <osc_get_rate+0x5a>
  40c88a:	a201      	add	r2, pc, #4	; (adr r2, 40c890 <osc_get_rate+0x14>)
  40c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40c890:	0040c8b1 	.word	0x0040c8b1
  40c894:	0040c8b7 	.word	0x0040c8b7
  40c898:	0040c8bd 	.word	0x0040c8bd
  40c89c:	0040c8c3 	.word	0x0040c8c3
  40c8a0:	0040c8c7 	.word	0x0040c8c7
  40c8a4:	0040c8cb 	.word	0x0040c8cb
  40c8a8:	0040c8cf 	.word	0x0040c8cf
  40c8ac:	0040c8d3 	.word	0x0040c8d3
		return OSC_SLCK_32K_RC_HZ;
  40c8b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40c8b4:	e010      	b.n	40c8d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  40c8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c8ba:	e00d      	b.n	40c8d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40c8bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40c8c0:	e00a      	b.n	40c8d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  40c8c2:	4b08      	ldr	r3, [pc, #32]	; (40c8e4 <osc_get_rate+0x68>)
  40c8c4:	e008      	b.n	40c8d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  40c8c6:	4b08      	ldr	r3, [pc, #32]	; (40c8e8 <osc_get_rate+0x6c>)
  40c8c8:	e006      	b.n	40c8d8 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40c8ca:	4b08      	ldr	r3, [pc, #32]	; (40c8ec <osc_get_rate+0x70>)
  40c8cc:	e004      	b.n	40c8d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40c8ce:	4b07      	ldr	r3, [pc, #28]	; (40c8ec <osc_get_rate+0x70>)
  40c8d0:	e002      	b.n	40c8d8 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  40c8d2:	4b06      	ldr	r3, [pc, #24]	; (40c8ec <osc_get_rate+0x70>)
  40c8d4:	e000      	b.n	40c8d8 <osc_get_rate+0x5c>
	return 0;
  40c8d6:	2300      	movs	r3, #0
}
  40c8d8:	4618      	mov	r0, r3
  40c8da:	370c      	adds	r7, #12
  40c8dc:	46bd      	mov	sp, r7
  40c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c8e2:	4770      	bx	lr
  40c8e4:	003d0900 	.word	0x003d0900
  40c8e8:	007a1200 	.word	0x007a1200
  40c8ec:	00b71b00 	.word	0x00b71b00

0040c8f0 <sysclk_get_main_hz>:
{
  40c8f0:	b580      	push	{r7, lr}
  40c8f2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  40c8f4:	2006      	movs	r0, #6
  40c8f6:	4b05      	ldr	r3, [pc, #20]	; (40c90c <sysclk_get_main_hz+0x1c>)
  40c8f8:	4798      	blx	r3
  40c8fa:	4602      	mov	r2, r0
  40c8fc:	4613      	mov	r3, r2
  40c8fe:	009b      	lsls	r3, r3, #2
  40c900:	4413      	add	r3, r2
  40c902:	009a      	lsls	r2, r3, #2
  40c904:	4413      	add	r3, r2
}
  40c906:	4618      	mov	r0, r3
  40c908:	bd80      	pop	{r7, pc}
  40c90a:	bf00      	nop
  40c90c:	0040c87d 	.word	0x0040c87d

0040c910 <TC0_Handler>:

/**
 * TC0 Interrupt handler.
 */
void TC0_Handler(void)
{
  40c910:	b480      	push	{r7}
  40c912:	b083      	sub	sp, #12
  40c914:	af00      	add	r7, sp, #0
	/* Remove warnings. */
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt. */
	ul_dummy = TC0->TC_CHANNEL[0].TC_SR;
  40c916:	4b07      	ldr	r3, [pc, #28]	; (40c934 <TC0_Handler+0x24>)
  40c918:	6a1b      	ldr	r3, [r3, #32]
  40c91a:	607b      	str	r3, [r7, #4]

	/* Increase tick. */
	gs_ul_clk_tick++;
  40c91c:	4b06      	ldr	r3, [pc, #24]	; (40c938 <TC0_Handler+0x28>)
  40c91e:	681b      	ldr	r3, [r3, #0]
  40c920:	3301      	adds	r3, #1
  40c922:	4a05      	ldr	r2, [pc, #20]	; (40c938 <TC0_Handler+0x28>)
  40c924:	6013      	str	r3, [r2, #0]
}
  40c926:	bf00      	nop
  40c928:	370c      	adds	r7, #12
  40c92a:	46bd      	mov	sp, r7
  40c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c930:	4770      	bx	lr
  40c932:	bf00      	nop
  40c934:	4000c000 	.word	0x4000c000
  40c938:	204038f0 	.word	0x204038f0

0040c93c <sys_init_timing>:

/**
 * \brief Initialize the timer counter (TC0).
 */
void sys_init_timing(void)
{
  40c93c:	b590      	push	{r4, r7, lr}
  40c93e:	b085      	sub	sp, #20
  40c940:	af02      	add	r7, sp, #8
	uint32_t ul_div;
	uint32_t ul_tcclks;

	/* Clear tick value. */
	gs_ul_clk_tick = 0;
  40c942:	4b1d      	ldr	r3, [pc, #116]	; (40c9b8 <sys_init_timing+0x7c>)
  40c944:	2200      	movs	r2, #0
  40c946:	601a      	str	r2, [r3, #0]

	/* Configure PMC. */
	pmc_enable_periph_clk(ID_TC0);
  40c948:	2017      	movs	r0, #23
  40c94a:	4b1c      	ldr	r3, [pc, #112]	; (40c9bc <sys_init_timing+0x80>)
  40c94c:	4798      	blx	r3

	/* Configure TC for a 1kHz frequency and trigger on RC compare. */
	tc_find_mck_divisor(1000,
  40c94e:	4b1c      	ldr	r3, [pc, #112]	; (40c9c0 <sys_init_timing+0x84>)
  40c950:	4798      	blx	r3
  40c952:	4604      	mov	r4, r0
  40c954:	4b1a      	ldr	r3, [pc, #104]	; (40c9c0 <sys_init_timing+0x84>)
  40c956:	4798      	blx	r3
  40c958:	4601      	mov	r1, r0
  40c95a:	463b      	mov	r3, r7
  40c95c:	1d3a      	adds	r2, r7, #4
  40c95e:	9100      	str	r1, [sp, #0]
  40c960:	4621      	mov	r1, r4
  40c962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40c966:	4c17      	ldr	r4, [pc, #92]	; (40c9c4 <sys_init_timing+0x88>)
  40c968:	47a0      	blx	r4
			sysclk_get_main_hz(), &ul_div, &ul_tcclks,
			sysclk_get_main_hz());
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  40c96a:	683b      	ldr	r3, [r7, #0]
  40c96c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  40c970:	461a      	mov	r2, r3
  40c972:	2100      	movs	r1, #0
  40c974:	4814      	ldr	r0, [pc, #80]	; (40c9c8 <sys_init_timing+0x8c>)
  40c976:	4b15      	ldr	r3, [pc, #84]	; (40c9cc <sys_init_timing+0x90>)
  40c978:	4798      	blx	r3
	tc_write_rc(TC0, 0, (sysclk_get_main_hz() / ul_div) / 1000);
  40c97a:	4b11      	ldr	r3, [pc, #68]	; (40c9c0 <sys_init_timing+0x84>)
  40c97c:	4798      	blx	r3
  40c97e:	4602      	mov	r2, r0
  40c980:	687b      	ldr	r3, [r7, #4]
  40c982:	fbb2 f3f3 	udiv	r3, r2, r3
  40c986:	4a12      	ldr	r2, [pc, #72]	; (40c9d0 <sys_init_timing+0x94>)
  40c988:	fba2 2303 	umull	r2, r3, r2, r3
  40c98c:	099b      	lsrs	r3, r3, #6
  40c98e:	461a      	mov	r2, r3
  40c990:	2100      	movs	r1, #0
  40c992:	480d      	ldr	r0, [pc, #52]	; (40c9c8 <sys_init_timing+0x8c>)
  40c994:	4b0f      	ldr	r3, [pc, #60]	; (40c9d4 <sys_init_timing+0x98>)
  40c996:	4798      	blx	r3

	/* Configure and enable interrupt on RC compare. */
	NVIC_EnableIRQ((IRQn_Type)ID_TC0);
  40c998:	2017      	movs	r0, #23
  40c99a:	4b0f      	ldr	r3, [pc, #60]	; (40c9d8 <sys_init_timing+0x9c>)
  40c99c:	4798      	blx	r3
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  40c99e:	2210      	movs	r2, #16
  40c9a0:	2100      	movs	r1, #0
  40c9a2:	4809      	ldr	r0, [pc, #36]	; (40c9c8 <sys_init_timing+0x8c>)
  40c9a4:	4b0d      	ldr	r3, [pc, #52]	; (40c9dc <sys_init_timing+0xa0>)
  40c9a6:	4798      	blx	r3

	/* Start timer. */
	tc_start(TC0, 0);
  40c9a8:	2100      	movs	r1, #0
  40c9aa:	4807      	ldr	r0, [pc, #28]	; (40c9c8 <sys_init_timing+0x8c>)
  40c9ac:	4b0c      	ldr	r3, [pc, #48]	; (40c9e0 <sys_init_timing+0xa4>)
  40c9ae:	4798      	blx	r3
}
  40c9b0:	bf00      	nop
  40c9b2:	370c      	adds	r7, #12
  40c9b4:	46bd      	mov	sp, r7
  40c9b6:	bd90      	pop	{r4, r7, pc}
  40c9b8:	204038f0 	.word	0x204038f0
  40c9bc:	004019f5 	.word	0x004019f5
  40c9c0:	0040c8f1 	.word	0x0040c8f1
  40c9c4:	00401adb 	.word	0x00401adb
  40c9c8:	4000c000 	.word	0x4000c000
  40c9cc:	00401a31 	.word	0x00401a31
  40c9d0:	10624dd3 	.word	0x10624dd3
  40c9d4:	00401a8d 	.word	0x00401a8d
  40c9d8:	0040c849 	.word	0x0040c849
  40c9dc:	00401ab3 	.word	0x00401ab3
  40c9e0:	00401a6b 	.word	0x00401a6b

0040c9e4 <sys_get_ms>:

/**
 * \brief Return the number of timer ticks (ms).
 */
uint32_t sys_get_ms(void)
{
  40c9e4:	b480      	push	{r7}
  40c9e6:	af00      	add	r7, sp, #0
	return gs_ul_clk_tick;
  40c9e8:	4b03      	ldr	r3, [pc, #12]	; (40c9f8 <sys_get_ms+0x14>)
  40c9ea:	681b      	ldr	r3, [r3, #0]
}
  40c9ec:	4618      	mov	r0, r3
  40c9ee:	46bd      	mov	sp, r7
  40c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40c9f4:	4770      	bx	lr
  40c9f6:	bf00      	nop
  40c9f8:	204038f0 	.word	0x204038f0

0040c9fc <sys_now>:

#if ((LWIP_VERSION) != ((1U << 24) | (3U << 16) | (2U << 8) | (LWIP_VERSION_RC)))
u32_t sys_now(void)
{
  40c9fc:	b580      	push	{r7, lr}
  40c9fe:	af00      	add	r7, sp, #0
	return (sys_get_ms());
  40ca00:	4b02      	ldr	r3, [pc, #8]	; (40ca0c <sys_now+0x10>)
  40ca02:	4798      	blx	r3
  40ca04:	4603      	mov	r3, r0
}
  40ca06:	4618      	mov	r0, r3
  40ca08:	bd80      	pop	{r7, pc}
  40ca0a:	bf00      	nop
  40ca0c:	0040c9e5 	.word	0x0040c9e5

0040ca10 <client_close>:
static err_t server_poll(void *arg, struct tcp_pcb *pcb);
static err_t server_err(void *arg, err_t err);
static err_t client_sent(void *arg, struct tcp_pcb *pcb, u16_t len);

static void client_close(struct tcp_pcb *pcb)
{
  40ca10:	b580      	push	{r7, lr}
  40ca12:	b082      	sub	sp, #8
  40ca14:	af00      	add	r7, sp, #0
  40ca16:	6078      	str	r0, [r7, #4]
   tcp_arg(pcb, NULL);
  40ca18:	2100      	movs	r1, #0
  40ca1a:	6878      	ldr	r0, [r7, #4]
  40ca1c:	4b06      	ldr	r3, [pc, #24]	; (40ca38 <client_close+0x28>)
  40ca1e:	4798      	blx	r3
   tcp_sent(pcb, NULL);
  40ca20:	2100      	movs	r1, #0
  40ca22:	6878      	ldr	r0, [r7, #4]
  40ca24:	4b05      	ldr	r3, [pc, #20]	; (40ca3c <client_close+0x2c>)
  40ca26:	4798      	blx	r3
   tcp_close(pcb);
  40ca28:	6878      	ldr	r0, [r7, #4]
  40ca2a:	4b05      	ldr	r3, [pc, #20]	; (40ca40 <client_close+0x30>)
  40ca2c:	4798      	blx	r3
}
  40ca2e:	bf00      	nop
  40ca30:	3708      	adds	r7, #8
  40ca32:	46bd      	mov	sp, r7
  40ca34:	bd80      	pop	{r7, pc}
  40ca36:	bf00      	nop
  40ca38:	00407151 	.word	0x00407151
  40ca3c:	0040718b 	.word	0x0040718b
  40ca40:	0040616d 	.word	0x0040616d

0040ca44 <client_connected>:

static err_t client_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  40ca44:	b590      	push	{r4, r7, lr}
  40ca46:	b087      	sub	sp, #28
  40ca48:	af00      	add	r7, sp, #0
  40ca4a:	60f8      	str	r0, [r7, #12]
  40ca4c:	60b9      	str	r1, [r7, #8]
  40ca4e:	4613      	mov	r3, r2
  40ca50:	71fb      	strb	r3, [r7, #7]
   LWIP_UNUSED_ARG(arg);
   
   connectedToWorkstation = true;
  40ca52:	4b0a      	ldr	r3, [pc, #40]	; (40ca7c <client_connected+0x38>)
  40ca54:	2201      	movs	r2, #1
  40ca56:	701a      	strb	r2, [r3, #0]
   
//add the following into client connect, removing client_close, to send Hello string
char *string = "Hello!";
  40ca58:	4b09      	ldr	r3, [pc, #36]	; (40ca80 <client_connected+0x3c>)
  40ca5a:	617b      	str	r3, [r7, #20]
tcp_sent(pcb, client_sent);
  40ca5c:	4909      	ldr	r1, [pc, #36]	; (40ca84 <client_connected+0x40>)
  40ca5e:	68b8      	ldr	r0, [r7, #8]
  40ca60:	4b09      	ldr	r3, [pc, #36]	; (40ca88 <client_connected+0x44>)
  40ca62:	4798      	blx	r3
tcp_write(pcb, string, sizeof(string)+4 , 0);
  40ca64:	2300      	movs	r3, #0
  40ca66:	2208      	movs	r2, #8
  40ca68:	6979      	ldr	r1, [r7, #20]
  40ca6a:	68b8      	ldr	r0, [r7, #8]
  40ca6c:	4c07      	ldr	r4, [pc, #28]	; (40ca8c <client_connected+0x48>)
  40ca6e:	47a0      	blx	r4

	
   return err;
  40ca70:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
  40ca74:	4618      	mov	r0, r3
  40ca76:	371c      	adds	r7, #28
  40ca78:	46bd      	mov	sp, r7
  40ca7a:	bd90      	pop	{r4, r7, pc}
  40ca7c:	204038f4 	.word	0x204038f4
  40ca80:	0040fb54 	.word	0x0040fb54
  40ca84:	0040ca91 	.word	0x0040ca91
  40ca88:	0040718b 	.word	0x0040718b
  40ca8c:	004097c5 	.word	0x004097c5

0040ca90 <client_sent>:

static err_t client_sent(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  40ca90:	b580      	push	{r7, lr}
  40ca92:	b084      	sub	sp, #16
  40ca94:	af00      	add	r7, sp, #0
  40ca96:	60f8      	str	r0, [r7, #12]
  40ca98:	60b9      	str	r1, [r7, #8]
  40ca9a:	4613      	mov	r3, r2
  40ca9c:	80fb      	strh	r3, [r7, #6]
	LWIP_UNUSED_ARG(arg);

	printf("\nclient_sent(): Number of bytes ACK'ed is %d", len);
  40ca9e:	88fb      	ldrh	r3, [r7, #6]
  40caa0:	4619      	mov	r1, r3
  40caa2:	4805      	ldr	r0, [pc, #20]	; (40cab8 <client_sent+0x28>)
  40caa4:	4b05      	ldr	r3, [pc, #20]	; (40cabc <client_sent+0x2c>)
  40caa6:	4798      	blx	r3

	client_close(pcb);
  40caa8:	68b8      	ldr	r0, [r7, #8]
  40caaa:	4b05      	ldr	r3, [pc, #20]	; (40cac0 <client_sent+0x30>)
  40caac:	4798      	blx	r3

	return ERR_OK;
  40caae:	2300      	movs	r3, #0
}
  40cab0:	4618      	mov	r0, r3
  40cab2:	3710      	adds	r7, #16
  40cab4:	46bd      	mov	sp, r7
  40cab6:	bd80      	pop	{r7, pc}
  40cab8:	0040fb5c 	.word	0x0040fb5c
  40cabc:	0040ccf1 	.word	0x0040ccf1
  40cac0:	0040ca11 	.word	0x0040ca11

0040cac4 <server_accept>:

	printf("\nserver_close(): Closing...\n");
}

static err_t server_accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
  40cac4:	b580      	push	{r7, lr}
  40cac6:	b084      	sub	sp, #16
  40cac8:	af00      	add	r7, sp, #0
  40caca:	60f8      	str	r0, [r7, #12]
  40cacc:	60b9      	str	r1, [r7, #8]
  40cace:	4613      	mov	r3, r2
  40cad0:	71fb      	strb	r3, [r7, #7]
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	tcp_setprio(pcb, TCP_PRIO_MIN);
  40cad2:	2101      	movs	r1, #1
  40cad4:	68b8      	ldr	r0, [r7, #8]
  40cad6:	4b0c      	ldr	r3, [pc, #48]	; (40cb08 <server_accept+0x44>)
  40cad8:	4798      	blx	r3

	tcp_arg(pcb, NULL);
  40cada:	2100      	movs	r1, #0
  40cadc:	68b8      	ldr	r0, [r7, #8]
  40cade:	4b0b      	ldr	r3, [pc, #44]	; (40cb0c <server_accept+0x48>)
  40cae0:	4798      	blx	r3

	tcp_recv(pcb, server_recv);
  40cae2:	490b      	ldr	r1, [pc, #44]	; (40cb10 <server_accept+0x4c>)
  40cae4:	68b8      	ldr	r0, [r7, #8]
  40cae6:	4b0b      	ldr	r3, [pc, #44]	; (40cb14 <server_accept+0x50>)
  40cae8:	4798      	blx	r3

	tcp_err(pcb, server_err);
  40caea:	490b      	ldr	r1, [pc, #44]	; (40cb18 <server_accept+0x54>)
  40caec:	68b8      	ldr	r0, [r7, #8]
  40caee:	4b0b      	ldr	r3, [pc, #44]	; (40cb1c <server_accept+0x58>)
  40caf0:	4798      	blx	r3

	tcp_poll(pcb, server_poll, 4); //every two seconds of inactivity of the TCP connection
  40caf2:	2204      	movs	r2, #4
  40caf4:	490a      	ldr	r1, [pc, #40]	; (40cb20 <server_accept+0x5c>)
  40caf6:	68b8      	ldr	r0, [r7, #8]
  40caf8:	4b0a      	ldr	r3, [pc, #40]	; (40cb24 <server_accept+0x60>)
  40cafa:	4798      	blx	r3

	tcp_accepted(pcb);
	//printf("\nserver_accept(): Accepting incoming connection on server...\n"); return ERR_OK;
}
  40cafc:	bf00      	nop
  40cafe:	4618      	mov	r0, r3
  40cb00:	3710      	adds	r7, #16
  40cb02:	46bd      	mov	sp, r7
  40cb04:	bd80      	pop	{r7, pc}
  40cb06:	bf00      	nop
  40cb08:	00406e75 	.word	0x00406e75
  40cb0c:	00407151 	.word	0x00407151
  40cb10:	0040cb29 	.word	0x0040cb29
  40cb14:	0040716d 	.word	0x0040716d
  40cb18:	0040cb9d 	.word	0x0040cb9d
  40cb1c:	004071a7 	.word	0x004071a7
  40cb20:	0040cb85 	.word	0x0040cb85
  40cb24:	004071e1 	.word	0x004071e1

0040cb28 <server_recv>:

static err_t server_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  40cb28:	b580      	push	{r7, lr}
  40cb2a:	b086      	sub	sp, #24
  40cb2c:	af00      	add	r7, sp, #0
  40cb2e:	60f8      	str	r0, [r7, #12]
  40cb30:	60b9      	str	r1, [r7, #8]
  40cb32:	607a      	str	r2, [r7, #4]
  40cb34:	70fb      	strb	r3, [r7, #3]
	char *string;
	int length;
	LWIP_UNUSED_ARG(arg);

	if (err == ERR_OK && p != NULL)
  40cb36:	f997 3003 	ldrsb.w	r3, [r7, #3]
  40cb3a:	2b00      	cmp	r3, #0
  40cb3c:	d114      	bne.n	40cb68 <server_recv+0x40>
  40cb3e:	687b      	ldr	r3, [r7, #4]
  40cb40:	2b00      	cmp	r3, #0
  40cb42:	d011      	beq.n	40cb68 <server_recv+0x40>
	{
		tcp_recved(pcb, p->tot_len);
  40cb44:	687b      	ldr	r3, [r7, #4]
  40cb46:	891b      	ldrh	r3, [r3, #8]
  40cb48:	4619      	mov	r1, r3
  40cb4a:	68b8      	ldr	r0, [r7, #8]
  40cb4c:	4b0a      	ldr	r3, [pc, #40]	; (40cb78 <server_recv+0x50>)
  40cb4e:	4798      	blx	r3

		string = p->payload;
  40cb50:	687b      	ldr	r3, [r7, #4]
  40cb52:	685b      	ldr	r3, [r3, #4]
  40cb54:	617b      	str	r3, [r7, #20]
		length = strlen(string);
  40cb56:	6978      	ldr	r0, [r7, #20]
  40cb58:	4b08      	ldr	r3, [pc, #32]	; (40cb7c <server_recv+0x54>)
  40cb5a:	4798      	blx	r3
  40cb5c:	4603      	mov	r3, r0
  40cb5e:	613b      	str	r3, [r7, #16]

		pbuf_free(p);
  40cb60:	6878      	ldr	r0, [r7, #4]
  40cb62:	4b07      	ldr	r3, [pc, #28]	; (40cb80 <server_recv+0x58>)
  40cb64:	4798      	blx	r3
  40cb66:	e002      	b.n	40cb6e <server_recv+0x46>
	}
	else
	{
		pbuf_free(p);
  40cb68:	6878      	ldr	r0, [r7, #4]
  40cb6a:	4b05      	ldr	r3, [pc, #20]	; (40cb80 <server_recv+0x58>)
  40cb6c:	4798      	blx	r3
	}

	return ERR_OK;
  40cb6e:	2300      	movs	r3, #0
}
  40cb70:	4618      	mov	r0, r3
  40cb72:	3718      	adds	r7, #24
  40cb74:	46bd      	mov	sp, r7
  40cb76:	bd80      	pop	{r7, pc}
  40cb78:	00406549 	.word	0x00406549
  40cb7c:	0040cf81 	.word	0x0040cf81
  40cb80:	00405b81 	.word	0x00405b81

0040cb84 <server_poll>:

	return ERR_OK;
}

static err_t server_poll(void *arg, struct tcp_pcb *pcb)
{
  40cb84:	b480      	push	{r7}
  40cb86:	b083      	sub	sp, #12
  40cb88:	af00      	add	r7, sp, #0
  40cb8a:	6078      	str	r0, [r7, #4]
  40cb8c:	6039      	str	r1, [r7, #0]
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);

	//printf("\nserver_poll(): Call number %d\n", counter++);

	return ERR_OK;
  40cb8e:	2300      	movs	r3, #0
}
  40cb90:	4618      	mov	r0, r3
  40cb92:	370c      	adds	r7, #12
  40cb94:	46bd      	mov	sp, r7
  40cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
  40cb9a:	4770      	bx	lr

0040cb9c <server_err>:

static err_t server_err(void *arg, err_t err)
{
  40cb9c:	b480      	push	{r7}
  40cb9e:	b083      	sub	sp, #12
  40cba0:	af00      	add	r7, sp, #0
  40cba2:	6078      	str	r0, [r7, #4]
  40cba4:	460b      	mov	r3, r1
  40cba6:	70fb      	strb	r3, [r7, #3]
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	//printf("\nserver_err(): Fatal error, exiting...\n");

	return ERR_OK;
  40cba8:	2300      	movs	r3, #0
}
  40cbaa:	4618      	mov	r0, r3
  40cbac:	370c      	adds	r7, #12
  40cbae:	46bd      	mov	sp, r7
  40cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
  40cbb4:	4770      	bx	lr
	...

0040cbb8 <main>:
/**
 * \brief Main program function. Configure the hardware, initialize lwIP
 * TCP/IP stack, and start HTTP service.
 */
int main(void)
{
  40cbb8:	b590      	push	{r4, r7, lr}
  40cbba:	b085      	sub	sp, #20
  40cbbc:	af00      	add	r7, sp, #0
	/* Initialize the SAM system. */
	sysclk_init();
  40cbbe:	4b29      	ldr	r3, [pc, #164]	; (40cc64 <main+0xac>)
  40cbc0:	4798      	blx	r3
	board_init();
  40cbc2:	4b29      	ldr	r3, [pc, #164]	; (40cc68 <main+0xb0>)
  40cbc4:	4798      	blx	r3

	/* Bring up the ethernet interface & initialize timer0, channel0. */
	init_ethernet();
  40cbc6:	4b29      	ldr	r3, [pc, #164]	; (40cc6c <main+0xb4>)
  40cbc8:	4798      	blx	r3

	//while node doesn't have an IP
	bool connectedIP = false;
  40cbca:	2300      	movs	r3, #0
  40cbcc:	73fb      	strb	r3, [r7, #15]
	while (!connectedIP) {
  40cbce:	e003      	b.n	40cbd8 <main+0x20>
		/* Check for input packet and process it. */
		connectedIP = ethernet_task();
  40cbd0:	4b27      	ldr	r3, [pc, #156]	; (40cc70 <main+0xb8>)
  40cbd2:	4798      	blx	r3
  40cbd4:	4603      	mov	r3, r0
  40cbd6:	73fb      	strb	r3, [r7, #15]
	while (!connectedIP) {
  40cbd8:	7bfb      	ldrb	r3, [r7, #15]
  40cbda:	f083 0301 	eor.w	r3, r3, #1
  40cbde:	b2db      	uxtb	r3, r3
  40cbe0:	2b00      	cmp	r3, #0
  40cbe2:	d1f5      	bne.n	40cbd0 <main+0x18>
	}
	
	//sets up new TCP 
	struct tcp_pcb *pcb;
	struct ip_addr dest;
	IP4_ADDR(&dest, workstationIP[0], workstationIP[1], workstationIP[2], workstationIP[3]);
  40cbe4:	4b23      	ldr	r3, [pc, #140]	; (40cc74 <main+0xbc>)
  40cbe6:	68db      	ldr	r3, [r3, #12]
  40cbe8:	061a      	lsls	r2, r3, #24
  40cbea:	4b22      	ldr	r3, [pc, #136]	; (40cc74 <main+0xbc>)
  40cbec:	689b      	ldr	r3, [r3, #8]
  40cbee:	041b      	lsls	r3, r3, #16
  40cbf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  40cbf4:	431a      	orrs	r2, r3
  40cbf6:	4b1f      	ldr	r3, [pc, #124]	; (40cc74 <main+0xbc>)
  40cbf8:	685b      	ldr	r3, [r3, #4]
  40cbfa:	021b      	lsls	r3, r3, #8
  40cbfc:	b29b      	uxth	r3, r3
  40cbfe:	431a      	orrs	r2, r3
  40cc00:	4b1c      	ldr	r3, [pc, #112]	; (40cc74 <main+0xbc>)
  40cc02:	681b      	ldr	r3, [r3, #0]
  40cc04:	b2db      	uxtb	r3, r3
  40cc06:	4313      	orrs	r3, r2
  40cc08:	607b      	str	r3, [r7, #4]
	pcb = tcp_new();
  40cc0a:	4b1b      	ldr	r3, [pc, #108]	; (40cc78 <main+0xc0>)
  40cc0c:	4798      	blx	r3
  40cc0e:	60b8      	str	r0, [r7, #8]
	tcp_arg(pcb, NULL);
  40cc10:	2100      	movs	r1, #0
  40cc12:	68b8      	ldr	r0, [r7, #8]
  40cc14:	4b19      	ldr	r3, [pc, #100]	; (40cc7c <main+0xc4>)
  40cc16:	4798      	blx	r3
	tcp_connect(pcb, &dest, 8000, client_connected); //server port for incoming connection
  40cc18:	1d39      	adds	r1, r7, #4
  40cc1a:	4b19      	ldr	r3, [pc, #100]	; (40cc80 <main+0xc8>)
  40cc1c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  40cc20:	68b8      	ldr	r0, [r7, #8]
  40cc22:	4c18      	ldr	r4, [pc, #96]	; (40cc84 <main+0xcc>)
  40cc24:	47a0      	blx	r4

	while(!connectedToWorkstation)
  40cc26:	e001      	b.n	40cc2c <main+0x74>
	{
		ethernet_task();
  40cc28:	4b11      	ldr	r3, [pc, #68]	; (40cc70 <main+0xb8>)
  40cc2a:	4798      	blx	r3
	while(!connectedToWorkstation)
  40cc2c:	4b16      	ldr	r3, [pc, #88]	; (40cc88 <main+0xd0>)
  40cc2e:	781b      	ldrb	r3, [r3, #0]
  40cc30:	f083 0301 	eor.w	r3, r3, #1
  40cc34:	b2db      	uxtb	r3, r3
  40cc36:	2b00      	cmp	r3, #0
  40cc38:	d1f6      	bne.n	40cc28 <main+0x70>
	}
	
	pcb = tcp_new();
  40cc3a:	4b0f      	ldr	r3, [pc, #60]	; (40cc78 <main+0xc0>)
  40cc3c:	4798      	blx	r3
  40cc3e:	60b8      	str	r0, [r7, #8]
	tcp_bind(pcb, IP_ADDR_ANY, 8000); //server port for incoming connection
  40cc40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
  40cc44:	4911      	ldr	r1, [pc, #68]	; (40cc8c <main+0xd4>)
  40cc46:	68b8      	ldr	r0, [r7, #8]
  40cc48:	4b11      	ldr	r3, [pc, #68]	; (40cc90 <main+0xd8>)
  40cc4a:	4798      	blx	r3
	pcb = tcp_listen(pcb);
  40cc4c:	21ff      	movs	r1, #255	; 0xff
  40cc4e:	68b8      	ldr	r0, [r7, #8]
  40cc50:	4b10      	ldr	r3, [pc, #64]	; (40cc94 <main+0xdc>)
  40cc52:	4798      	blx	r3
  40cc54:	60b8      	str	r0, [r7, #8]
	tcp_accept(pcb, server_accept);
  40cc56:	4910      	ldr	r1, [pc, #64]	; (40cc98 <main+0xe0>)
  40cc58:	68b8      	ldr	r0, [r7, #8]
  40cc5a:	4b10      	ldr	r3, [pc, #64]	; (40cc9c <main+0xe4>)
  40cc5c:	4798      	blx	r3
	
	while(1)
	{
		ethernet_task();
  40cc5e:	4b04      	ldr	r3, [pc, #16]	; (40cc70 <main+0xb8>)
  40cc60:	4798      	blx	r3
  40cc62:	e7fc      	b.n	40cc5e <main+0xa6>
  40cc64:	004004d5 	.word	0x004004d5
  40cc68:	004009c9 	.word	0x004009c9
  40cc6c:	0040c7fd 	.word	0x0040c7fd
  40cc70:	0040c81d 	.word	0x0040c81d
  40cc74:	2040005c 	.word	0x2040005c
  40cc78:	0040713d 	.word	0x0040713d
  40cc7c:	00407151 	.word	0x00407151
  40cc80:	0040ca45 	.word	0x0040ca45
  40cc84:	00406639 	.word	0x00406639
  40cc88:	204038f4 	.word	0x204038f4
  40cc8c:	0040faf4 	.word	0x0040faf4
  40cc90:	004062a1 	.word	0x004062a1
  40cc94:	004063a5 	.word	0x004063a5
  40cc98:	0040cac5 	.word	0x0040cac5
  40cc9c:	004071c5 	.word	0x004071c5

0040cca0 <__libc_init_array>:
  40cca0:	b570      	push	{r4, r5, r6, lr}
  40cca2:	4e0f      	ldr	r6, [pc, #60]	; (40cce0 <__libc_init_array+0x40>)
  40cca4:	4d0f      	ldr	r5, [pc, #60]	; (40cce4 <__libc_init_array+0x44>)
  40cca6:	1b76      	subs	r6, r6, r5
  40cca8:	10b6      	asrs	r6, r6, #2
  40ccaa:	bf18      	it	ne
  40ccac:	2400      	movne	r4, #0
  40ccae:	d005      	beq.n	40ccbc <__libc_init_array+0x1c>
  40ccb0:	3401      	adds	r4, #1
  40ccb2:	f855 3b04 	ldr.w	r3, [r5], #4
  40ccb6:	4798      	blx	r3
  40ccb8:	42a6      	cmp	r6, r4
  40ccba:	d1f9      	bne.n	40ccb0 <__libc_init_array+0x10>
  40ccbc:	4e0a      	ldr	r6, [pc, #40]	; (40cce8 <__libc_init_array+0x48>)
  40ccbe:	4d0b      	ldr	r5, [pc, #44]	; (40ccec <__libc_init_array+0x4c>)
  40ccc0:	1b76      	subs	r6, r6, r5
  40ccc2:	f003 f827 	bl	40fd14 <_init>
  40ccc6:	10b6      	asrs	r6, r6, #2
  40ccc8:	bf18      	it	ne
  40ccca:	2400      	movne	r4, #0
  40cccc:	d006      	beq.n	40ccdc <__libc_init_array+0x3c>
  40ccce:	3401      	adds	r4, #1
  40ccd0:	f855 3b04 	ldr.w	r3, [r5], #4
  40ccd4:	4798      	blx	r3
  40ccd6:	42a6      	cmp	r6, r4
  40ccd8:	d1f9      	bne.n	40ccce <__libc_init_array+0x2e>
  40ccda:	bd70      	pop	{r4, r5, r6, pc}
  40ccdc:	bd70      	pop	{r4, r5, r6, pc}
  40ccde:	bf00      	nop
  40cce0:	0040fd20 	.word	0x0040fd20
  40cce4:	0040fd20 	.word	0x0040fd20
  40cce8:	0040fd28 	.word	0x0040fd28
  40ccec:	0040fd20 	.word	0x0040fd20

0040ccf0 <iprintf>:
  40ccf0:	b40f      	push	{r0, r1, r2, r3}
  40ccf2:	b500      	push	{lr}
  40ccf4:	4907      	ldr	r1, [pc, #28]	; (40cd14 <iprintf+0x24>)
  40ccf6:	b083      	sub	sp, #12
  40ccf8:	ab04      	add	r3, sp, #16
  40ccfa:	6808      	ldr	r0, [r1, #0]
  40ccfc:	f853 2b04 	ldr.w	r2, [r3], #4
  40cd00:	6881      	ldr	r1, [r0, #8]
  40cd02:	9301      	str	r3, [sp, #4]
  40cd04:	f000 f9ea 	bl	40d0dc <_vfiprintf_r>
  40cd08:	b003      	add	sp, #12
  40cd0a:	f85d eb04 	ldr.w	lr, [sp], #4
  40cd0e:	b004      	add	sp, #16
  40cd10:	4770      	bx	lr
  40cd12:	bf00      	nop
  40cd14:	2040006c 	.word	0x2040006c

0040cd18 <memcmp>:
  40cd18:	2a03      	cmp	r2, #3
  40cd1a:	b470      	push	{r4, r5, r6}
  40cd1c:	d922      	bls.n	40cd64 <memcmp+0x4c>
  40cd1e:	ea40 0301 	orr.w	r3, r0, r1
  40cd22:	079b      	lsls	r3, r3, #30
  40cd24:	d011      	beq.n	40cd4a <memcmp+0x32>
  40cd26:	7803      	ldrb	r3, [r0, #0]
  40cd28:	780c      	ldrb	r4, [r1, #0]
  40cd2a:	42a3      	cmp	r3, r4
  40cd2c:	d11d      	bne.n	40cd6a <memcmp+0x52>
  40cd2e:	440a      	add	r2, r1
  40cd30:	3101      	adds	r1, #1
  40cd32:	e005      	b.n	40cd40 <memcmp+0x28>
  40cd34:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  40cd38:	f811 4b01 	ldrb.w	r4, [r1], #1
  40cd3c:	42a3      	cmp	r3, r4
  40cd3e:	d114      	bne.n	40cd6a <memcmp+0x52>
  40cd40:	4291      	cmp	r1, r2
  40cd42:	d1f7      	bne.n	40cd34 <memcmp+0x1c>
  40cd44:	2000      	movs	r0, #0
  40cd46:	bc70      	pop	{r4, r5, r6}
  40cd48:	4770      	bx	lr
  40cd4a:	680d      	ldr	r5, [r1, #0]
  40cd4c:	6806      	ldr	r6, [r0, #0]
  40cd4e:	42ae      	cmp	r6, r5
  40cd50:	460c      	mov	r4, r1
  40cd52:	4603      	mov	r3, r0
  40cd54:	f101 0104 	add.w	r1, r1, #4
  40cd58:	f100 0004 	add.w	r0, r0, #4
  40cd5c:	d108      	bne.n	40cd70 <memcmp+0x58>
  40cd5e:	3a04      	subs	r2, #4
  40cd60:	2a03      	cmp	r2, #3
  40cd62:	d8f2      	bhi.n	40cd4a <memcmp+0x32>
  40cd64:	2a00      	cmp	r2, #0
  40cd66:	d1de      	bne.n	40cd26 <memcmp+0xe>
  40cd68:	e7ec      	b.n	40cd44 <memcmp+0x2c>
  40cd6a:	1b18      	subs	r0, r3, r4
  40cd6c:	bc70      	pop	{r4, r5, r6}
  40cd6e:	4770      	bx	lr
  40cd70:	4621      	mov	r1, r4
  40cd72:	4618      	mov	r0, r3
  40cd74:	e7d7      	b.n	40cd26 <memcmp+0xe>
  40cd76:	bf00      	nop

0040cd78 <memcpy>:
  40cd78:	4684      	mov	ip, r0
  40cd7a:	ea41 0300 	orr.w	r3, r1, r0
  40cd7e:	f013 0303 	ands.w	r3, r3, #3
  40cd82:	d16d      	bne.n	40ce60 <memcpy+0xe8>
  40cd84:	3a40      	subs	r2, #64	; 0x40
  40cd86:	d341      	bcc.n	40ce0c <memcpy+0x94>
  40cd88:	f851 3b04 	ldr.w	r3, [r1], #4
  40cd8c:	f840 3b04 	str.w	r3, [r0], #4
  40cd90:	f851 3b04 	ldr.w	r3, [r1], #4
  40cd94:	f840 3b04 	str.w	r3, [r0], #4
  40cd98:	f851 3b04 	ldr.w	r3, [r1], #4
  40cd9c:	f840 3b04 	str.w	r3, [r0], #4
  40cda0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cda4:	f840 3b04 	str.w	r3, [r0], #4
  40cda8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdac:	f840 3b04 	str.w	r3, [r0], #4
  40cdb0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdb4:	f840 3b04 	str.w	r3, [r0], #4
  40cdb8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdbc:	f840 3b04 	str.w	r3, [r0], #4
  40cdc0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdc4:	f840 3b04 	str.w	r3, [r0], #4
  40cdc8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdcc:	f840 3b04 	str.w	r3, [r0], #4
  40cdd0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdd4:	f840 3b04 	str.w	r3, [r0], #4
  40cdd8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cddc:	f840 3b04 	str.w	r3, [r0], #4
  40cde0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cde4:	f840 3b04 	str.w	r3, [r0], #4
  40cde8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdec:	f840 3b04 	str.w	r3, [r0], #4
  40cdf0:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdf4:	f840 3b04 	str.w	r3, [r0], #4
  40cdf8:	f851 3b04 	ldr.w	r3, [r1], #4
  40cdfc:	f840 3b04 	str.w	r3, [r0], #4
  40ce00:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce04:	f840 3b04 	str.w	r3, [r0], #4
  40ce08:	3a40      	subs	r2, #64	; 0x40
  40ce0a:	d2bd      	bcs.n	40cd88 <memcpy+0x10>
  40ce0c:	3230      	adds	r2, #48	; 0x30
  40ce0e:	d311      	bcc.n	40ce34 <memcpy+0xbc>
  40ce10:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce14:	f840 3b04 	str.w	r3, [r0], #4
  40ce18:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce1c:	f840 3b04 	str.w	r3, [r0], #4
  40ce20:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce24:	f840 3b04 	str.w	r3, [r0], #4
  40ce28:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce2c:	f840 3b04 	str.w	r3, [r0], #4
  40ce30:	3a10      	subs	r2, #16
  40ce32:	d2ed      	bcs.n	40ce10 <memcpy+0x98>
  40ce34:	320c      	adds	r2, #12
  40ce36:	d305      	bcc.n	40ce44 <memcpy+0xcc>
  40ce38:	f851 3b04 	ldr.w	r3, [r1], #4
  40ce3c:	f840 3b04 	str.w	r3, [r0], #4
  40ce40:	3a04      	subs	r2, #4
  40ce42:	d2f9      	bcs.n	40ce38 <memcpy+0xc0>
  40ce44:	3204      	adds	r2, #4
  40ce46:	d008      	beq.n	40ce5a <memcpy+0xe2>
  40ce48:	07d2      	lsls	r2, r2, #31
  40ce4a:	bf1c      	itt	ne
  40ce4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ce50:	f800 3b01 	strbne.w	r3, [r0], #1
  40ce54:	d301      	bcc.n	40ce5a <memcpy+0xe2>
  40ce56:	880b      	ldrh	r3, [r1, #0]
  40ce58:	8003      	strh	r3, [r0, #0]
  40ce5a:	4660      	mov	r0, ip
  40ce5c:	4770      	bx	lr
  40ce5e:	bf00      	nop
  40ce60:	2a08      	cmp	r2, #8
  40ce62:	d313      	bcc.n	40ce8c <memcpy+0x114>
  40ce64:	078b      	lsls	r3, r1, #30
  40ce66:	d08d      	beq.n	40cd84 <memcpy+0xc>
  40ce68:	f010 0303 	ands.w	r3, r0, #3
  40ce6c:	d08a      	beq.n	40cd84 <memcpy+0xc>
  40ce6e:	f1c3 0304 	rsb	r3, r3, #4
  40ce72:	1ad2      	subs	r2, r2, r3
  40ce74:	07db      	lsls	r3, r3, #31
  40ce76:	bf1c      	itt	ne
  40ce78:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40ce7c:	f800 3b01 	strbne.w	r3, [r0], #1
  40ce80:	d380      	bcc.n	40cd84 <memcpy+0xc>
  40ce82:	f831 3b02 	ldrh.w	r3, [r1], #2
  40ce86:	f820 3b02 	strh.w	r3, [r0], #2
  40ce8a:	e77b      	b.n	40cd84 <memcpy+0xc>
  40ce8c:	3a04      	subs	r2, #4
  40ce8e:	d3d9      	bcc.n	40ce44 <memcpy+0xcc>
  40ce90:	3a01      	subs	r2, #1
  40ce92:	f811 3b01 	ldrb.w	r3, [r1], #1
  40ce96:	f800 3b01 	strb.w	r3, [r0], #1
  40ce9a:	d2f9      	bcs.n	40ce90 <memcpy+0x118>
  40ce9c:	780b      	ldrb	r3, [r1, #0]
  40ce9e:	7003      	strb	r3, [r0, #0]
  40cea0:	784b      	ldrb	r3, [r1, #1]
  40cea2:	7043      	strb	r3, [r0, #1]
  40cea4:	788b      	ldrb	r3, [r1, #2]
  40cea6:	7083      	strb	r3, [r0, #2]
  40cea8:	4660      	mov	r0, ip
  40ceaa:	4770      	bx	lr

0040ceac <memset>:
  40ceac:	b470      	push	{r4, r5, r6}
  40ceae:	0786      	lsls	r6, r0, #30
  40ceb0:	d046      	beq.n	40cf40 <memset+0x94>
  40ceb2:	1e54      	subs	r4, r2, #1
  40ceb4:	2a00      	cmp	r2, #0
  40ceb6:	d041      	beq.n	40cf3c <memset+0x90>
  40ceb8:	b2ca      	uxtb	r2, r1
  40ceba:	4603      	mov	r3, r0
  40cebc:	e002      	b.n	40cec4 <memset+0x18>
  40cebe:	f114 34ff 	adds.w	r4, r4, #4294967295
  40cec2:	d33b      	bcc.n	40cf3c <memset+0x90>
  40cec4:	f803 2b01 	strb.w	r2, [r3], #1
  40cec8:	079d      	lsls	r5, r3, #30
  40ceca:	d1f8      	bne.n	40cebe <memset+0x12>
  40cecc:	2c03      	cmp	r4, #3
  40cece:	d92e      	bls.n	40cf2e <memset+0x82>
  40ced0:	b2cd      	uxtb	r5, r1
  40ced2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40ced6:	2c0f      	cmp	r4, #15
  40ced8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40cedc:	d919      	bls.n	40cf12 <memset+0x66>
  40cede:	f103 0210 	add.w	r2, r3, #16
  40cee2:	4626      	mov	r6, r4
  40cee4:	3e10      	subs	r6, #16
  40cee6:	2e0f      	cmp	r6, #15
  40cee8:	f842 5c10 	str.w	r5, [r2, #-16]
  40ceec:	f842 5c0c 	str.w	r5, [r2, #-12]
  40cef0:	f842 5c08 	str.w	r5, [r2, #-8]
  40cef4:	f842 5c04 	str.w	r5, [r2, #-4]
  40cef8:	f102 0210 	add.w	r2, r2, #16
  40cefc:	d8f2      	bhi.n	40cee4 <memset+0x38>
  40cefe:	f1a4 0210 	sub.w	r2, r4, #16
  40cf02:	f022 020f 	bic.w	r2, r2, #15
  40cf06:	f004 040f 	and.w	r4, r4, #15
  40cf0a:	3210      	adds	r2, #16
  40cf0c:	2c03      	cmp	r4, #3
  40cf0e:	4413      	add	r3, r2
  40cf10:	d90d      	bls.n	40cf2e <memset+0x82>
  40cf12:	461e      	mov	r6, r3
  40cf14:	4622      	mov	r2, r4
  40cf16:	3a04      	subs	r2, #4
  40cf18:	2a03      	cmp	r2, #3
  40cf1a:	f846 5b04 	str.w	r5, [r6], #4
  40cf1e:	d8fa      	bhi.n	40cf16 <memset+0x6a>
  40cf20:	1f22      	subs	r2, r4, #4
  40cf22:	f022 0203 	bic.w	r2, r2, #3
  40cf26:	3204      	adds	r2, #4
  40cf28:	4413      	add	r3, r2
  40cf2a:	f004 0403 	and.w	r4, r4, #3
  40cf2e:	b12c      	cbz	r4, 40cf3c <memset+0x90>
  40cf30:	b2c9      	uxtb	r1, r1
  40cf32:	441c      	add	r4, r3
  40cf34:	f803 1b01 	strb.w	r1, [r3], #1
  40cf38:	429c      	cmp	r4, r3
  40cf3a:	d1fb      	bne.n	40cf34 <memset+0x88>
  40cf3c:	bc70      	pop	{r4, r5, r6}
  40cf3e:	4770      	bx	lr
  40cf40:	4614      	mov	r4, r2
  40cf42:	4603      	mov	r3, r0
  40cf44:	e7c2      	b.n	40cecc <memset+0x20>
  40cf46:	bf00      	nop
	...

0040cf80 <strlen>:
  40cf80:	f890 f000 	pld	[r0]
  40cf84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  40cf88:	f020 0107 	bic.w	r1, r0, #7
  40cf8c:	f06f 0c00 	mvn.w	ip, #0
  40cf90:	f010 0407 	ands.w	r4, r0, #7
  40cf94:	f891 f020 	pld	[r1, #32]
  40cf98:	f040 8049 	bne.w	40d02e <strlen+0xae>
  40cf9c:	f04f 0400 	mov.w	r4, #0
  40cfa0:	f06f 0007 	mvn.w	r0, #7
  40cfa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  40cfa8:	f891 f040 	pld	[r1, #64]	; 0x40
  40cfac:	f100 0008 	add.w	r0, r0, #8
  40cfb0:	fa82 f24c 	uadd8	r2, r2, ip
  40cfb4:	faa4 f28c 	sel	r2, r4, ip
  40cfb8:	fa83 f34c 	uadd8	r3, r3, ip
  40cfbc:	faa2 f38c 	sel	r3, r2, ip
  40cfc0:	bb4b      	cbnz	r3, 40d016 <strlen+0x96>
  40cfc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  40cfc6:	fa82 f24c 	uadd8	r2, r2, ip
  40cfca:	f100 0008 	add.w	r0, r0, #8
  40cfce:	faa4 f28c 	sel	r2, r4, ip
  40cfd2:	fa83 f34c 	uadd8	r3, r3, ip
  40cfd6:	faa2 f38c 	sel	r3, r2, ip
  40cfda:	b9e3      	cbnz	r3, 40d016 <strlen+0x96>
  40cfdc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  40cfe0:	fa82 f24c 	uadd8	r2, r2, ip
  40cfe4:	f100 0008 	add.w	r0, r0, #8
  40cfe8:	faa4 f28c 	sel	r2, r4, ip
  40cfec:	fa83 f34c 	uadd8	r3, r3, ip
  40cff0:	faa2 f38c 	sel	r3, r2, ip
  40cff4:	b97b      	cbnz	r3, 40d016 <strlen+0x96>
  40cff6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40cffa:	f101 0120 	add.w	r1, r1, #32
  40cffe:	fa82 f24c 	uadd8	r2, r2, ip
  40d002:	f100 0008 	add.w	r0, r0, #8
  40d006:	faa4 f28c 	sel	r2, r4, ip
  40d00a:	fa83 f34c 	uadd8	r3, r3, ip
  40d00e:	faa2 f38c 	sel	r3, r2, ip
  40d012:	2b00      	cmp	r3, #0
  40d014:	d0c6      	beq.n	40cfa4 <strlen+0x24>
  40d016:	2a00      	cmp	r2, #0
  40d018:	bf04      	itt	eq
  40d01a:	3004      	addeq	r0, #4
  40d01c:	461a      	moveq	r2, r3
  40d01e:	ba12      	rev	r2, r2
  40d020:	fab2 f282 	clz	r2, r2
  40d024:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  40d028:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40d02c:	4770      	bx	lr
  40d02e:	e9d1 2300 	ldrd	r2, r3, [r1]
  40d032:	f004 0503 	and.w	r5, r4, #3
  40d036:	f1c4 0000 	rsb	r0, r4, #0
  40d03a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40d03e:	f014 0f04 	tst.w	r4, #4
  40d042:	f891 f040 	pld	[r1, #64]	; 0x40
  40d046:	fa0c f505 	lsl.w	r5, ip, r5
  40d04a:	ea62 0205 	orn	r2, r2, r5
  40d04e:	bf1c      	itt	ne
  40d050:	ea63 0305 	ornne	r3, r3, r5
  40d054:	4662      	movne	r2, ip
  40d056:	f04f 0400 	mov.w	r4, #0
  40d05a:	e7a9      	b.n	40cfb0 <strlen+0x30>

0040d05c <__sprint_r.part.0>:
  40d05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d060:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  40d062:	049c      	lsls	r4, r3, #18
  40d064:	4693      	mov	fp, r2
  40d066:	d52f      	bpl.n	40d0c8 <__sprint_r.part.0+0x6c>
  40d068:	6893      	ldr	r3, [r2, #8]
  40d06a:	6812      	ldr	r2, [r2, #0]
  40d06c:	b353      	cbz	r3, 40d0c4 <__sprint_r.part.0+0x68>
  40d06e:	460e      	mov	r6, r1
  40d070:	4607      	mov	r7, r0
  40d072:	f102 0908 	add.w	r9, r2, #8
  40d076:	e919 0420 	ldmdb	r9, {r5, sl}
  40d07a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40d07e:	d017      	beq.n	40d0b0 <__sprint_r.part.0+0x54>
  40d080:	3d04      	subs	r5, #4
  40d082:	2400      	movs	r4, #0
  40d084:	e001      	b.n	40d08a <__sprint_r.part.0+0x2e>
  40d086:	45a0      	cmp	r8, r4
  40d088:	d010      	beq.n	40d0ac <__sprint_r.part.0+0x50>
  40d08a:	4632      	mov	r2, r6
  40d08c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  40d090:	4638      	mov	r0, r7
  40d092:	f001 f8bb 	bl	40e20c <_fputwc_r>
  40d096:	1c43      	adds	r3, r0, #1
  40d098:	f104 0401 	add.w	r4, r4, #1
  40d09c:	d1f3      	bne.n	40d086 <__sprint_r.part.0+0x2a>
  40d09e:	2300      	movs	r3, #0
  40d0a0:	f8cb 3008 	str.w	r3, [fp, #8]
  40d0a4:	f8cb 3004 	str.w	r3, [fp, #4]
  40d0a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d0ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  40d0b0:	f02a 0a03 	bic.w	sl, sl, #3
  40d0b4:	eba3 030a 	sub.w	r3, r3, sl
  40d0b8:	f8cb 3008 	str.w	r3, [fp, #8]
  40d0bc:	f109 0908 	add.w	r9, r9, #8
  40d0c0:	2b00      	cmp	r3, #0
  40d0c2:	d1d8      	bne.n	40d076 <__sprint_r.part.0+0x1a>
  40d0c4:	2000      	movs	r0, #0
  40d0c6:	e7ea      	b.n	40d09e <__sprint_r.part.0+0x42>
  40d0c8:	f001 fa0a 	bl	40e4e0 <__sfvwrite_r>
  40d0cc:	2300      	movs	r3, #0
  40d0ce:	f8cb 3008 	str.w	r3, [fp, #8]
  40d0d2:	f8cb 3004 	str.w	r3, [fp, #4]
  40d0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d0da:	bf00      	nop

0040d0dc <_vfiprintf_r>:
  40d0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d0e0:	b0ad      	sub	sp, #180	; 0xb4
  40d0e2:	461d      	mov	r5, r3
  40d0e4:	468b      	mov	fp, r1
  40d0e6:	4690      	mov	r8, r2
  40d0e8:	9307      	str	r3, [sp, #28]
  40d0ea:	9006      	str	r0, [sp, #24]
  40d0ec:	b118      	cbz	r0, 40d0f6 <_vfiprintf_r+0x1a>
  40d0ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40d0f0:	2b00      	cmp	r3, #0
  40d0f2:	f000 80f3 	beq.w	40d2dc <_vfiprintf_r+0x200>
  40d0f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d0fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40d0fe:	07df      	lsls	r7, r3, #31
  40d100:	b281      	uxth	r1, r0
  40d102:	d402      	bmi.n	40d10a <_vfiprintf_r+0x2e>
  40d104:	058e      	lsls	r6, r1, #22
  40d106:	f140 80fc 	bpl.w	40d302 <_vfiprintf_r+0x226>
  40d10a:	048c      	lsls	r4, r1, #18
  40d10c:	d40a      	bmi.n	40d124 <_vfiprintf_r+0x48>
  40d10e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d112:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  40d116:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40d11a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40d11e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  40d122:	b289      	uxth	r1, r1
  40d124:	0708      	lsls	r0, r1, #28
  40d126:	f140 80b3 	bpl.w	40d290 <_vfiprintf_r+0x1b4>
  40d12a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40d12e:	2b00      	cmp	r3, #0
  40d130:	f000 80ae 	beq.w	40d290 <_vfiprintf_r+0x1b4>
  40d134:	f001 031a 	and.w	r3, r1, #26
  40d138:	2b0a      	cmp	r3, #10
  40d13a:	f000 80b5 	beq.w	40d2a8 <_vfiprintf_r+0x1cc>
  40d13e:	2300      	movs	r3, #0
  40d140:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  40d144:	930b      	str	r3, [sp, #44]	; 0x2c
  40d146:	9311      	str	r3, [sp, #68]	; 0x44
  40d148:	9310      	str	r3, [sp, #64]	; 0x40
  40d14a:	9303      	str	r3, [sp, #12]
  40d14c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  40d150:	46ca      	mov	sl, r9
  40d152:	f8cd b010 	str.w	fp, [sp, #16]
  40d156:	f898 3000 	ldrb.w	r3, [r8]
  40d15a:	4644      	mov	r4, r8
  40d15c:	b1fb      	cbz	r3, 40d19e <_vfiprintf_r+0xc2>
  40d15e:	2b25      	cmp	r3, #37	; 0x25
  40d160:	d102      	bne.n	40d168 <_vfiprintf_r+0x8c>
  40d162:	e01c      	b.n	40d19e <_vfiprintf_r+0xc2>
  40d164:	2b25      	cmp	r3, #37	; 0x25
  40d166:	d003      	beq.n	40d170 <_vfiprintf_r+0x94>
  40d168:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40d16c:	2b00      	cmp	r3, #0
  40d16e:	d1f9      	bne.n	40d164 <_vfiprintf_r+0x88>
  40d170:	eba4 0508 	sub.w	r5, r4, r8
  40d174:	b19d      	cbz	r5, 40d19e <_vfiprintf_r+0xc2>
  40d176:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d178:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d17a:	f8ca 8000 	str.w	r8, [sl]
  40d17e:	3301      	adds	r3, #1
  40d180:	442a      	add	r2, r5
  40d182:	2b07      	cmp	r3, #7
  40d184:	f8ca 5004 	str.w	r5, [sl, #4]
  40d188:	9211      	str	r2, [sp, #68]	; 0x44
  40d18a:	9310      	str	r3, [sp, #64]	; 0x40
  40d18c:	dd7a      	ble.n	40d284 <_vfiprintf_r+0x1a8>
  40d18e:	2a00      	cmp	r2, #0
  40d190:	f040 84b0 	bne.w	40daf4 <_vfiprintf_r+0xa18>
  40d194:	9b03      	ldr	r3, [sp, #12]
  40d196:	9210      	str	r2, [sp, #64]	; 0x40
  40d198:	442b      	add	r3, r5
  40d19a:	46ca      	mov	sl, r9
  40d19c:	9303      	str	r3, [sp, #12]
  40d19e:	7823      	ldrb	r3, [r4, #0]
  40d1a0:	2b00      	cmp	r3, #0
  40d1a2:	f000 83e0 	beq.w	40d966 <_vfiprintf_r+0x88a>
  40d1a6:	2000      	movs	r0, #0
  40d1a8:	f04f 0300 	mov.w	r3, #0
  40d1ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  40d1b0:	f104 0801 	add.w	r8, r4, #1
  40d1b4:	7862      	ldrb	r2, [r4, #1]
  40d1b6:	4605      	mov	r5, r0
  40d1b8:	4606      	mov	r6, r0
  40d1ba:	4603      	mov	r3, r0
  40d1bc:	f04f 34ff 	mov.w	r4, #4294967295
  40d1c0:	f108 0801 	add.w	r8, r8, #1
  40d1c4:	f1a2 0120 	sub.w	r1, r2, #32
  40d1c8:	2958      	cmp	r1, #88	; 0x58
  40d1ca:	f200 82de 	bhi.w	40d78a <_vfiprintf_r+0x6ae>
  40d1ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  40d1d2:	0221      	.short	0x0221
  40d1d4:	02dc02dc 	.word	0x02dc02dc
  40d1d8:	02dc0229 	.word	0x02dc0229
  40d1dc:	02dc02dc 	.word	0x02dc02dc
  40d1e0:	02dc02dc 	.word	0x02dc02dc
  40d1e4:	028902dc 	.word	0x028902dc
  40d1e8:	02dc0295 	.word	0x02dc0295
  40d1ec:	02bd00a2 	.word	0x02bd00a2
  40d1f0:	019f02dc 	.word	0x019f02dc
  40d1f4:	01a401a4 	.word	0x01a401a4
  40d1f8:	01a401a4 	.word	0x01a401a4
  40d1fc:	01a401a4 	.word	0x01a401a4
  40d200:	01a401a4 	.word	0x01a401a4
  40d204:	02dc01a4 	.word	0x02dc01a4
  40d208:	02dc02dc 	.word	0x02dc02dc
  40d20c:	02dc02dc 	.word	0x02dc02dc
  40d210:	02dc02dc 	.word	0x02dc02dc
  40d214:	02dc02dc 	.word	0x02dc02dc
  40d218:	01b202dc 	.word	0x01b202dc
  40d21c:	02dc02dc 	.word	0x02dc02dc
  40d220:	02dc02dc 	.word	0x02dc02dc
  40d224:	02dc02dc 	.word	0x02dc02dc
  40d228:	02dc02dc 	.word	0x02dc02dc
  40d22c:	02dc02dc 	.word	0x02dc02dc
  40d230:	02dc0197 	.word	0x02dc0197
  40d234:	02dc02dc 	.word	0x02dc02dc
  40d238:	02dc02dc 	.word	0x02dc02dc
  40d23c:	02dc019b 	.word	0x02dc019b
  40d240:	025302dc 	.word	0x025302dc
  40d244:	02dc02dc 	.word	0x02dc02dc
  40d248:	02dc02dc 	.word	0x02dc02dc
  40d24c:	02dc02dc 	.word	0x02dc02dc
  40d250:	02dc02dc 	.word	0x02dc02dc
  40d254:	02dc02dc 	.word	0x02dc02dc
  40d258:	021b025a 	.word	0x021b025a
  40d25c:	02dc02dc 	.word	0x02dc02dc
  40d260:	026e02dc 	.word	0x026e02dc
  40d264:	02dc021b 	.word	0x02dc021b
  40d268:	027302dc 	.word	0x027302dc
  40d26c:	01f502dc 	.word	0x01f502dc
  40d270:	02090182 	.word	0x02090182
  40d274:	02dc02d7 	.word	0x02dc02d7
  40d278:	02dc029a 	.word	0x02dc029a
  40d27c:	02dc00a7 	.word	0x02dc00a7
  40d280:	022e02dc 	.word	0x022e02dc
  40d284:	f10a 0a08 	add.w	sl, sl, #8
  40d288:	9b03      	ldr	r3, [sp, #12]
  40d28a:	442b      	add	r3, r5
  40d28c:	9303      	str	r3, [sp, #12]
  40d28e:	e786      	b.n	40d19e <_vfiprintf_r+0xc2>
  40d290:	4659      	mov	r1, fp
  40d292:	9806      	ldr	r0, [sp, #24]
  40d294:	f000 fdac 	bl	40ddf0 <__swsetup_r>
  40d298:	bb18      	cbnz	r0, 40d2e2 <_vfiprintf_r+0x206>
  40d29a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40d29e:	f001 031a 	and.w	r3, r1, #26
  40d2a2:	2b0a      	cmp	r3, #10
  40d2a4:	f47f af4b 	bne.w	40d13e <_vfiprintf_r+0x62>
  40d2a8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40d2ac:	2b00      	cmp	r3, #0
  40d2ae:	f6ff af46 	blt.w	40d13e <_vfiprintf_r+0x62>
  40d2b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d2b6:	07db      	lsls	r3, r3, #31
  40d2b8:	d405      	bmi.n	40d2c6 <_vfiprintf_r+0x1ea>
  40d2ba:	058f      	lsls	r7, r1, #22
  40d2bc:	d403      	bmi.n	40d2c6 <_vfiprintf_r+0x1ea>
  40d2be:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d2c2:	f001 fac3 	bl	40e84c <__retarget_lock_release_recursive>
  40d2c6:	462b      	mov	r3, r5
  40d2c8:	4642      	mov	r2, r8
  40d2ca:	4659      	mov	r1, fp
  40d2cc:	9806      	ldr	r0, [sp, #24]
  40d2ce:	f000 fd4d 	bl	40dd6c <__sbprintf>
  40d2d2:	9003      	str	r0, [sp, #12]
  40d2d4:	9803      	ldr	r0, [sp, #12]
  40d2d6:	b02d      	add	sp, #180	; 0xb4
  40d2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d2dc:	f000 fef4 	bl	40e0c8 <__sinit>
  40d2e0:	e709      	b.n	40d0f6 <_vfiprintf_r+0x1a>
  40d2e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d2e6:	07d9      	lsls	r1, r3, #31
  40d2e8:	d404      	bmi.n	40d2f4 <_vfiprintf_r+0x218>
  40d2ea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40d2ee:	059a      	lsls	r2, r3, #22
  40d2f0:	f140 84aa 	bpl.w	40dc48 <_vfiprintf_r+0xb6c>
  40d2f4:	f04f 33ff 	mov.w	r3, #4294967295
  40d2f8:	9303      	str	r3, [sp, #12]
  40d2fa:	9803      	ldr	r0, [sp, #12]
  40d2fc:	b02d      	add	sp, #180	; 0xb4
  40d2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d302:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40d306:	f001 fa9f 	bl	40e848 <__retarget_lock_acquire_recursive>
  40d30a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40d30e:	b281      	uxth	r1, r0
  40d310:	e6fb      	b.n	40d10a <_vfiprintf_r+0x2e>
  40d312:	4276      	negs	r6, r6
  40d314:	9207      	str	r2, [sp, #28]
  40d316:	f043 0304 	orr.w	r3, r3, #4
  40d31a:	f898 2000 	ldrb.w	r2, [r8]
  40d31e:	e74f      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d320:	9608      	str	r6, [sp, #32]
  40d322:	069e      	lsls	r6, r3, #26
  40d324:	f100 8450 	bmi.w	40dbc8 <_vfiprintf_r+0xaec>
  40d328:	9907      	ldr	r1, [sp, #28]
  40d32a:	06dd      	lsls	r5, r3, #27
  40d32c:	460a      	mov	r2, r1
  40d32e:	f100 83ef 	bmi.w	40db10 <_vfiprintf_r+0xa34>
  40d332:	0658      	lsls	r0, r3, #25
  40d334:	f140 83ec 	bpl.w	40db10 <_vfiprintf_r+0xa34>
  40d338:	880e      	ldrh	r6, [r1, #0]
  40d33a:	3104      	adds	r1, #4
  40d33c:	2700      	movs	r7, #0
  40d33e:	2201      	movs	r2, #1
  40d340:	9107      	str	r1, [sp, #28]
  40d342:	f04f 0100 	mov.w	r1, #0
  40d346:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40d34a:	2500      	movs	r5, #0
  40d34c:	1c61      	adds	r1, r4, #1
  40d34e:	f000 8116 	beq.w	40d57e <_vfiprintf_r+0x4a2>
  40d352:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  40d356:	9102      	str	r1, [sp, #8]
  40d358:	ea56 0107 	orrs.w	r1, r6, r7
  40d35c:	f040 8114 	bne.w	40d588 <_vfiprintf_r+0x4ac>
  40d360:	2c00      	cmp	r4, #0
  40d362:	f040 835c 	bne.w	40da1e <_vfiprintf_r+0x942>
  40d366:	2a00      	cmp	r2, #0
  40d368:	f040 83b7 	bne.w	40dada <_vfiprintf_r+0x9fe>
  40d36c:	f013 0301 	ands.w	r3, r3, #1
  40d370:	9305      	str	r3, [sp, #20]
  40d372:	f000 8457 	beq.w	40dc24 <_vfiprintf_r+0xb48>
  40d376:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40d37a:	2330      	movs	r3, #48	; 0x30
  40d37c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  40d380:	9b05      	ldr	r3, [sp, #20]
  40d382:	42a3      	cmp	r3, r4
  40d384:	bfb8      	it	lt
  40d386:	4623      	movlt	r3, r4
  40d388:	9301      	str	r3, [sp, #4]
  40d38a:	b10d      	cbz	r5, 40d390 <_vfiprintf_r+0x2b4>
  40d38c:	3301      	adds	r3, #1
  40d38e:	9301      	str	r3, [sp, #4]
  40d390:	9b02      	ldr	r3, [sp, #8]
  40d392:	f013 0302 	ands.w	r3, r3, #2
  40d396:	9309      	str	r3, [sp, #36]	; 0x24
  40d398:	d002      	beq.n	40d3a0 <_vfiprintf_r+0x2c4>
  40d39a:	9b01      	ldr	r3, [sp, #4]
  40d39c:	3302      	adds	r3, #2
  40d39e:	9301      	str	r3, [sp, #4]
  40d3a0:	9b02      	ldr	r3, [sp, #8]
  40d3a2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  40d3a6:	930a      	str	r3, [sp, #40]	; 0x28
  40d3a8:	f040 8217 	bne.w	40d7da <_vfiprintf_r+0x6fe>
  40d3ac:	9b08      	ldr	r3, [sp, #32]
  40d3ae:	9a01      	ldr	r2, [sp, #4]
  40d3b0:	1a9d      	subs	r5, r3, r2
  40d3b2:	2d00      	cmp	r5, #0
  40d3b4:	f340 8211 	ble.w	40d7da <_vfiprintf_r+0x6fe>
  40d3b8:	2d10      	cmp	r5, #16
  40d3ba:	f340 8490 	ble.w	40dcde <_vfiprintf_r+0xc02>
  40d3be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d3c2:	4ec4      	ldr	r6, [pc, #784]	; (40d6d4 <_vfiprintf_r+0x5f8>)
  40d3c4:	46d6      	mov	lr, sl
  40d3c6:	2710      	movs	r7, #16
  40d3c8:	46a2      	mov	sl, r4
  40d3ca:	4619      	mov	r1, r3
  40d3cc:	9c06      	ldr	r4, [sp, #24]
  40d3ce:	e007      	b.n	40d3e0 <_vfiprintf_r+0x304>
  40d3d0:	f101 0c02 	add.w	ip, r1, #2
  40d3d4:	f10e 0e08 	add.w	lr, lr, #8
  40d3d8:	4601      	mov	r1, r0
  40d3da:	3d10      	subs	r5, #16
  40d3dc:	2d10      	cmp	r5, #16
  40d3de:	dd11      	ble.n	40d404 <_vfiprintf_r+0x328>
  40d3e0:	1c48      	adds	r0, r1, #1
  40d3e2:	3210      	adds	r2, #16
  40d3e4:	2807      	cmp	r0, #7
  40d3e6:	9211      	str	r2, [sp, #68]	; 0x44
  40d3e8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  40d3ec:	9010      	str	r0, [sp, #64]	; 0x40
  40d3ee:	ddef      	ble.n	40d3d0 <_vfiprintf_r+0x2f4>
  40d3f0:	2a00      	cmp	r2, #0
  40d3f2:	f040 81e4 	bne.w	40d7be <_vfiprintf_r+0x6e2>
  40d3f6:	3d10      	subs	r5, #16
  40d3f8:	2d10      	cmp	r5, #16
  40d3fa:	4611      	mov	r1, r2
  40d3fc:	f04f 0c01 	mov.w	ip, #1
  40d400:	46ce      	mov	lr, r9
  40d402:	dced      	bgt.n	40d3e0 <_vfiprintf_r+0x304>
  40d404:	4654      	mov	r4, sl
  40d406:	4661      	mov	r1, ip
  40d408:	46f2      	mov	sl, lr
  40d40a:	442a      	add	r2, r5
  40d40c:	2907      	cmp	r1, #7
  40d40e:	9211      	str	r2, [sp, #68]	; 0x44
  40d410:	f8ca 6000 	str.w	r6, [sl]
  40d414:	f8ca 5004 	str.w	r5, [sl, #4]
  40d418:	9110      	str	r1, [sp, #64]	; 0x40
  40d41a:	f300 82ec 	bgt.w	40d9f6 <_vfiprintf_r+0x91a>
  40d41e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d422:	f10a 0a08 	add.w	sl, sl, #8
  40d426:	1c48      	adds	r0, r1, #1
  40d428:	2d00      	cmp	r5, #0
  40d42a:	f040 81de 	bne.w	40d7ea <_vfiprintf_r+0x70e>
  40d42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d430:	2b00      	cmp	r3, #0
  40d432:	f000 81f8 	beq.w	40d826 <_vfiprintf_r+0x74a>
  40d436:	3202      	adds	r2, #2
  40d438:	a90e      	add	r1, sp, #56	; 0x38
  40d43a:	2302      	movs	r3, #2
  40d43c:	2807      	cmp	r0, #7
  40d43e:	9211      	str	r2, [sp, #68]	; 0x44
  40d440:	9010      	str	r0, [sp, #64]	; 0x40
  40d442:	e88a 000a 	stmia.w	sl, {r1, r3}
  40d446:	f340 81ea 	ble.w	40d81e <_vfiprintf_r+0x742>
  40d44a:	2a00      	cmp	r2, #0
  40d44c:	f040 838c 	bne.w	40db68 <_vfiprintf_r+0xa8c>
  40d450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d452:	2b80      	cmp	r3, #128	; 0x80
  40d454:	f04f 0001 	mov.w	r0, #1
  40d458:	4611      	mov	r1, r2
  40d45a:	46ca      	mov	sl, r9
  40d45c:	f040 81e7 	bne.w	40d82e <_vfiprintf_r+0x752>
  40d460:	9b08      	ldr	r3, [sp, #32]
  40d462:	9d01      	ldr	r5, [sp, #4]
  40d464:	1b5e      	subs	r6, r3, r5
  40d466:	2e00      	cmp	r6, #0
  40d468:	f340 81e1 	ble.w	40d82e <_vfiprintf_r+0x752>
  40d46c:	2e10      	cmp	r6, #16
  40d46e:	4d9a      	ldr	r5, [pc, #616]	; (40d6d8 <_vfiprintf_r+0x5fc>)
  40d470:	f340 8450 	ble.w	40dd14 <_vfiprintf_r+0xc38>
  40d474:	46d4      	mov	ip, sl
  40d476:	2710      	movs	r7, #16
  40d478:	46a2      	mov	sl, r4
  40d47a:	9c06      	ldr	r4, [sp, #24]
  40d47c:	e007      	b.n	40d48e <_vfiprintf_r+0x3b2>
  40d47e:	f101 0e02 	add.w	lr, r1, #2
  40d482:	f10c 0c08 	add.w	ip, ip, #8
  40d486:	4601      	mov	r1, r0
  40d488:	3e10      	subs	r6, #16
  40d48a:	2e10      	cmp	r6, #16
  40d48c:	dd11      	ble.n	40d4b2 <_vfiprintf_r+0x3d6>
  40d48e:	1c48      	adds	r0, r1, #1
  40d490:	3210      	adds	r2, #16
  40d492:	2807      	cmp	r0, #7
  40d494:	9211      	str	r2, [sp, #68]	; 0x44
  40d496:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40d49a:	9010      	str	r0, [sp, #64]	; 0x40
  40d49c:	ddef      	ble.n	40d47e <_vfiprintf_r+0x3a2>
  40d49e:	2a00      	cmp	r2, #0
  40d4a0:	f040 829d 	bne.w	40d9de <_vfiprintf_r+0x902>
  40d4a4:	3e10      	subs	r6, #16
  40d4a6:	2e10      	cmp	r6, #16
  40d4a8:	f04f 0e01 	mov.w	lr, #1
  40d4ac:	4611      	mov	r1, r2
  40d4ae:	46cc      	mov	ip, r9
  40d4b0:	dced      	bgt.n	40d48e <_vfiprintf_r+0x3b2>
  40d4b2:	4654      	mov	r4, sl
  40d4b4:	46e2      	mov	sl, ip
  40d4b6:	4432      	add	r2, r6
  40d4b8:	f1be 0f07 	cmp.w	lr, #7
  40d4bc:	9211      	str	r2, [sp, #68]	; 0x44
  40d4be:	e88a 0060 	stmia.w	sl, {r5, r6}
  40d4c2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  40d4c6:	f300 8369 	bgt.w	40db9c <_vfiprintf_r+0xac0>
  40d4ca:	f10a 0a08 	add.w	sl, sl, #8
  40d4ce:	f10e 0001 	add.w	r0, lr, #1
  40d4d2:	4671      	mov	r1, lr
  40d4d4:	e1ab      	b.n	40d82e <_vfiprintf_r+0x752>
  40d4d6:	9608      	str	r6, [sp, #32]
  40d4d8:	f013 0220 	ands.w	r2, r3, #32
  40d4dc:	f040 838c 	bne.w	40dbf8 <_vfiprintf_r+0xb1c>
  40d4e0:	f013 0110 	ands.w	r1, r3, #16
  40d4e4:	f040 831a 	bne.w	40db1c <_vfiprintf_r+0xa40>
  40d4e8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  40d4ec:	f000 8316 	beq.w	40db1c <_vfiprintf_r+0xa40>
  40d4f0:	9807      	ldr	r0, [sp, #28]
  40d4f2:	460a      	mov	r2, r1
  40d4f4:	4601      	mov	r1, r0
  40d4f6:	3104      	adds	r1, #4
  40d4f8:	8806      	ldrh	r6, [r0, #0]
  40d4fa:	9107      	str	r1, [sp, #28]
  40d4fc:	2700      	movs	r7, #0
  40d4fe:	e720      	b.n	40d342 <_vfiprintf_r+0x266>
  40d500:	9608      	str	r6, [sp, #32]
  40d502:	f043 0310 	orr.w	r3, r3, #16
  40d506:	e7e7      	b.n	40d4d8 <_vfiprintf_r+0x3fc>
  40d508:	9608      	str	r6, [sp, #32]
  40d50a:	f043 0310 	orr.w	r3, r3, #16
  40d50e:	e708      	b.n	40d322 <_vfiprintf_r+0x246>
  40d510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40d514:	f898 2000 	ldrb.w	r2, [r8]
  40d518:	e652      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d51a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d51e:	2600      	movs	r6, #0
  40d520:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d524:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40d528:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40d52c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d530:	2909      	cmp	r1, #9
  40d532:	d9f5      	bls.n	40d520 <_vfiprintf_r+0x444>
  40d534:	e646      	b.n	40d1c4 <_vfiprintf_r+0xe8>
  40d536:	9608      	str	r6, [sp, #32]
  40d538:	2800      	cmp	r0, #0
  40d53a:	f040 8408 	bne.w	40dd4e <_vfiprintf_r+0xc72>
  40d53e:	f043 0310 	orr.w	r3, r3, #16
  40d542:	069e      	lsls	r6, r3, #26
  40d544:	f100 834c 	bmi.w	40dbe0 <_vfiprintf_r+0xb04>
  40d548:	06dd      	lsls	r5, r3, #27
  40d54a:	f100 82f3 	bmi.w	40db34 <_vfiprintf_r+0xa58>
  40d54e:	0658      	lsls	r0, r3, #25
  40d550:	f140 82f0 	bpl.w	40db34 <_vfiprintf_r+0xa58>
  40d554:	9d07      	ldr	r5, [sp, #28]
  40d556:	f9b5 6000 	ldrsh.w	r6, [r5]
  40d55a:	462a      	mov	r2, r5
  40d55c:	17f7      	asrs	r7, r6, #31
  40d55e:	3204      	adds	r2, #4
  40d560:	4630      	mov	r0, r6
  40d562:	4639      	mov	r1, r7
  40d564:	9207      	str	r2, [sp, #28]
  40d566:	2800      	cmp	r0, #0
  40d568:	f171 0200 	sbcs.w	r2, r1, #0
  40d56c:	f2c0 835d 	blt.w	40dc2a <_vfiprintf_r+0xb4e>
  40d570:	1c61      	adds	r1, r4, #1
  40d572:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d576:	f04f 0201 	mov.w	r2, #1
  40d57a:	f47f aeea 	bne.w	40d352 <_vfiprintf_r+0x276>
  40d57e:	ea56 0107 	orrs.w	r1, r6, r7
  40d582:	f000 824d 	beq.w	40da20 <_vfiprintf_r+0x944>
  40d586:	9302      	str	r3, [sp, #8]
  40d588:	2a01      	cmp	r2, #1
  40d58a:	f000 828c 	beq.w	40daa6 <_vfiprintf_r+0x9ca>
  40d58e:	2a02      	cmp	r2, #2
  40d590:	f040 825c 	bne.w	40da4c <_vfiprintf_r+0x970>
  40d594:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40d596:	46cb      	mov	fp, r9
  40d598:	0933      	lsrs	r3, r6, #4
  40d59a:	f006 010f 	and.w	r1, r6, #15
  40d59e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40d5a2:	093a      	lsrs	r2, r7, #4
  40d5a4:	461e      	mov	r6, r3
  40d5a6:	4617      	mov	r7, r2
  40d5a8:	5c43      	ldrb	r3, [r0, r1]
  40d5aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40d5ae:	ea56 0307 	orrs.w	r3, r6, r7
  40d5b2:	d1f1      	bne.n	40d598 <_vfiprintf_r+0x4bc>
  40d5b4:	eba9 030b 	sub.w	r3, r9, fp
  40d5b8:	9305      	str	r3, [sp, #20]
  40d5ba:	e6e1      	b.n	40d380 <_vfiprintf_r+0x2a4>
  40d5bc:	2800      	cmp	r0, #0
  40d5be:	f040 83c0 	bne.w	40dd42 <_vfiprintf_r+0xc66>
  40d5c2:	0699      	lsls	r1, r3, #26
  40d5c4:	f100 8367 	bmi.w	40dc96 <_vfiprintf_r+0xbba>
  40d5c8:	06da      	lsls	r2, r3, #27
  40d5ca:	f100 80f1 	bmi.w	40d7b0 <_vfiprintf_r+0x6d4>
  40d5ce:	065b      	lsls	r3, r3, #25
  40d5d0:	f140 80ee 	bpl.w	40d7b0 <_vfiprintf_r+0x6d4>
  40d5d4:	9a07      	ldr	r2, [sp, #28]
  40d5d6:	6813      	ldr	r3, [r2, #0]
  40d5d8:	3204      	adds	r2, #4
  40d5da:	9207      	str	r2, [sp, #28]
  40d5dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  40d5e0:	801a      	strh	r2, [r3, #0]
  40d5e2:	e5b8      	b.n	40d156 <_vfiprintf_r+0x7a>
  40d5e4:	9807      	ldr	r0, [sp, #28]
  40d5e6:	4a3d      	ldr	r2, [pc, #244]	; (40d6dc <_vfiprintf_r+0x600>)
  40d5e8:	9608      	str	r6, [sp, #32]
  40d5ea:	920b      	str	r2, [sp, #44]	; 0x2c
  40d5ec:	6806      	ldr	r6, [r0, #0]
  40d5ee:	2278      	movs	r2, #120	; 0x78
  40d5f0:	2130      	movs	r1, #48	; 0x30
  40d5f2:	3004      	adds	r0, #4
  40d5f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d5f8:	f043 0302 	orr.w	r3, r3, #2
  40d5fc:	9007      	str	r0, [sp, #28]
  40d5fe:	2700      	movs	r7, #0
  40d600:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d604:	2202      	movs	r2, #2
  40d606:	e69c      	b.n	40d342 <_vfiprintf_r+0x266>
  40d608:	9608      	str	r6, [sp, #32]
  40d60a:	2800      	cmp	r0, #0
  40d60c:	d099      	beq.n	40d542 <_vfiprintf_r+0x466>
  40d60e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40d612:	e796      	b.n	40d542 <_vfiprintf_r+0x466>
  40d614:	f898 2000 	ldrb.w	r2, [r8]
  40d618:	2d00      	cmp	r5, #0
  40d61a:	f47f add1 	bne.w	40d1c0 <_vfiprintf_r+0xe4>
  40d61e:	2001      	movs	r0, #1
  40d620:	2520      	movs	r5, #32
  40d622:	e5cd      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d624:	f043 0301 	orr.w	r3, r3, #1
  40d628:	f898 2000 	ldrb.w	r2, [r8]
  40d62c:	e5c8      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d62e:	9608      	str	r6, [sp, #32]
  40d630:	2800      	cmp	r0, #0
  40d632:	f040 8393 	bne.w	40dd5c <_vfiprintf_r+0xc80>
  40d636:	4929      	ldr	r1, [pc, #164]	; (40d6dc <_vfiprintf_r+0x600>)
  40d638:	910b      	str	r1, [sp, #44]	; 0x2c
  40d63a:	069f      	lsls	r7, r3, #26
  40d63c:	f100 82e8 	bmi.w	40dc10 <_vfiprintf_r+0xb34>
  40d640:	9807      	ldr	r0, [sp, #28]
  40d642:	06de      	lsls	r6, r3, #27
  40d644:	4601      	mov	r1, r0
  40d646:	f100 8270 	bmi.w	40db2a <_vfiprintf_r+0xa4e>
  40d64a:	065d      	lsls	r5, r3, #25
  40d64c:	f140 826d 	bpl.w	40db2a <_vfiprintf_r+0xa4e>
  40d650:	3104      	adds	r1, #4
  40d652:	8806      	ldrh	r6, [r0, #0]
  40d654:	9107      	str	r1, [sp, #28]
  40d656:	2700      	movs	r7, #0
  40d658:	07d8      	lsls	r0, r3, #31
  40d65a:	f140 8222 	bpl.w	40daa2 <_vfiprintf_r+0x9c6>
  40d65e:	ea56 0107 	orrs.w	r1, r6, r7
  40d662:	f000 821e 	beq.w	40daa2 <_vfiprintf_r+0x9c6>
  40d666:	2130      	movs	r1, #48	; 0x30
  40d668:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40d66c:	f043 0302 	orr.w	r3, r3, #2
  40d670:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  40d674:	2202      	movs	r2, #2
  40d676:	e664      	b.n	40d342 <_vfiprintf_r+0x266>
  40d678:	9608      	str	r6, [sp, #32]
  40d67a:	2800      	cmp	r0, #0
  40d67c:	f040 836b 	bne.w	40dd56 <_vfiprintf_r+0xc7a>
  40d680:	4917      	ldr	r1, [pc, #92]	; (40d6e0 <_vfiprintf_r+0x604>)
  40d682:	910b      	str	r1, [sp, #44]	; 0x2c
  40d684:	e7d9      	b.n	40d63a <_vfiprintf_r+0x55e>
  40d686:	9907      	ldr	r1, [sp, #28]
  40d688:	9608      	str	r6, [sp, #32]
  40d68a:	680a      	ldr	r2, [r1, #0]
  40d68c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d690:	f04f 0000 	mov.w	r0, #0
  40d694:	460a      	mov	r2, r1
  40d696:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40d69a:	3204      	adds	r2, #4
  40d69c:	2001      	movs	r0, #1
  40d69e:	9001      	str	r0, [sp, #4]
  40d6a0:	9207      	str	r2, [sp, #28]
  40d6a2:	9005      	str	r0, [sp, #20]
  40d6a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d6a8:	9302      	str	r3, [sp, #8]
  40d6aa:	2400      	movs	r4, #0
  40d6ac:	e670      	b.n	40d390 <_vfiprintf_r+0x2b4>
  40d6ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40d6b2:	f898 2000 	ldrb.w	r2, [r8]
  40d6b6:	e583      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d6b8:	f898 2000 	ldrb.w	r2, [r8]
  40d6bc:	2a6c      	cmp	r2, #108	; 0x6c
  40d6be:	bf03      	ittte	eq
  40d6c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  40d6c4:	f043 0320 	orreq.w	r3, r3, #32
  40d6c8:	f108 0801 	addeq.w	r8, r8, #1
  40d6cc:	f043 0310 	orrne.w	r3, r3, #16
  40d6d0:	e576      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d6d2:	bf00      	nop
  40d6d4:	0040fbe0 	.word	0x0040fbe0
  40d6d8:	0040fbf0 	.word	0x0040fbf0
  40d6dc:	0040fbc4 	.word	0x0040fbc4
  40d6e0:	0040fbb0 	.word	0x0040fbb0
  40d6e4:	9907      	ldr	r1, [sp, #28]
  40d6e6:	680e      	ldr	r6, [r1, #0]
  40d6e8:	460a      	mov	r2, r1
  40d6ea:	2e00      	cmp	r6, #0
  40d6ec:	f102 0204 	add.w	r2, r2, #4
  40d6f0:	f6ff ae0f 	blt.w	40d312 <_vfiprintf_r+0x236>
  40d6f4:	9207      	str	r2, [sp, #28]
  40d6f6:	f898 2000 	ldrb.w	r2, [r8]
  40d6fa:	e561      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d6fc:	f898 2000 	ldrb.w	r2, [r8]
  40d700:	2001      	movs	r0, #1
  40d702:	252b      	movs	r5, #43	; 0x2b
  40d704:	e55c      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d706:	9907      	ldr	r1, [sp, #28]
  40d708:	9608      	str	r6, [sp, #32]
  40d70a:	f8d1 b000 	ldr.w	fp, [r1]
  40d70e:	f04f 0200 	mov.w	r2, #0
  40d712:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d716:	1d0e      	adds	r6, r1, #4
  40d718:	f1bb 0f00 	cmp.w	fp, #0
  40d71c:	f000 82e5 	beq.w	40dcea <_vfiprintf_r+0xc0e>
  40d720:	1c67      	adds	r7, r4, #1
  40d722:	f000 82c4 	beq.w	40dcae <_vfiprintf_r+0xbd2>
  40d726:	4622      	mov	r2, r4
  40d728:	2100      	movs	r1, #0
  40d72a:	4658      	mov	r0, fp
  40d72c:	9301      	str	r3, [sp, #4]
  40d72e:	f001 fbcf 	bl	40eed0 <memchr>
  40d732:	9b01      	ldr	r3, [sp, #4]
  40d734:	2800      	cmp	r0, #0
  40d736:	f000 82e5 	beq.w	40dd04 <_vfiprintf_r+0xc28>
  40d73a:	eba0 020b 	sub.w	r2, r0, fp
  40d73e:	9205      	str	r2, [sp, #20]
  40d740:	9607      	str	r6, [sp, #28]
  40d742:	9302      	str	r3, [sp, #8]
  40d744:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d748:	2400      	movs	r4, #0
  40d74a:	e619      	b.n	40d380 <_vfiprintf_r+0x2a4>
  40d74c:	f898 2000 	ldrb.w	r2, [r8]
  40d750:	2a2a      	cmp	r2, #42	; 0x2a
  40d752:	f108 0701 	add.w	r7, r8, #1
  40d756:	f000 82e9 	beq.w	40dd2c <_vfiprintf_r+0xc50>
  40d75a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d75e:	2909      	cmp	r1, #9
  40d760:	46b8      	mov	r8, r7
  40d762:	f04f 0400 	mov.w	r4, #0
  40d766:	f63f ad2d 	bhi.w	40d1c4 <_vfiprintf_r+0xe8>
  40d76a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40d76e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40d772:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  40d776:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40d77a:	2909      	cmp	r1, #9
  40d77c:	d9f5      	bls.n	40d76a <_vfiprintf_r+0x68e>
  40d77e:	e521      	b.n	40d1c4 <_vfiprintf_r+0xe8>
  40d780:	f043 0320 	orr.w	r3, r3, #32
  40d784:	f898 2000 	ldrb.w	r2, [r8]
  40d788:	e51a      	b.n	40d1c0 <_vfiprintf_r+0xe4>
  40d78a:	9608      	str	r6, [sp, #32]
  40d78c:	2800      	cmp	r0, #0
  40d78e:	f040 82db 	bne.w	40dd48 <_vfiprintf_r+0xc6c>
  40d792:	2a00      	cmp	r2, #0
  40d794:	f000 80e7 	beq.w	40d966 <_vfiprintf_r+0x88a>
  40d798:	2101      	movs	r1, #1
  40d79a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40d79e:	f04f 0200 	mov.w	r2, #0
  40d7a2:	9101      	str	r1, [sp, #4]
  40d7a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  40d7a8:	9105      	str	r1, [sp, #20]
  40d7aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40d7ae:	e77b      	b.n	40d6a8 <_vfiprintf_r+0x5cc>
  40d7b0:	9a07      	ldr	r2, [sp, #28]
  40d7b2:	6813      	ldr	r3, [r2, #0]
  40d7b4:	3204      	adds	r2, #4
  40d7b6:	9207      	str	r2, [sp, #28]
  40d7b8:	9a03      	ldr	r2, [sp, #12]
  40d7ba:	601a      	str	r2, [r3, #0]
  40d7bc:	e4cb      	b.n	40d156 <_vfiprintf_r+0x7a>
  40d7be:	aa0f      	add	r2, sp, #60	; 0x3c
  40d7c0:	9904      	ldr	r1, [sp, #16]
  40d7c2:	4620      	mov	r0, r4
  40d7c4:	f7ff fc4a 	bl	40d05c <__sprint_r.part.0>
  40d7c8:	2800      	cmp	r0, #0
  40d7ca:	f040 8139 	bne.w	40da40 <_vfiprintf_r+0x964>
  40d7ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d7d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d7d2:	f101 0c01 	add.w	ip, r1, #1
  40d7d6:	46ce      	mov	lr, r9
  40d7d8:	e5ff      	b.n	40d3da <_vfiprintf_r+0x2fe>
  40d7da:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d7dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d7de:	1c48      	adds	r0, r1, #1
  40d7e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40d7e4:	2d00      	cmp	r5, #0
  40d7e6:	f43f ae22 	beq.w	40d42e <_vfiprintf_r+0x352>
  40d7ea:	3201      	adds	r2, #1
  40d7ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  40d7f0:	2101      	movs	r1, #1
  40d7f2:	2807      	cmp	r0, #7
  40d7f4:	9211      	str	r2, [sp, #68]	; 0x44
  40d7f6:	9010      	str	r0, [sp, #64]	; 0x40
  40d7f8:	f8ca 5000 	str.w	r5, [sl]
  40d7fc:	f8ca 1004 	str.w	r1, [sl, #4]
  40d800:	f340 8108 	ble.w	40da14 <_vfiprintf_r+0x938>
  40d804:	2a00      	cmp	r2, #0
  40d806:	f040 81bc 	bne.w	40db82 <_vfiprintf_r+0xaa6>
  40d80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d80c:	2b00      	cmp	r3, #0
  40d80e:	f43f ae1f 	beq.w	40d450 <_vfiprintf_r+0x374>
  40d812:	ab0e      	add	r3, sp, #56	; 0x38
  40d814:	2202      	movs	r2, #2
  40d816:	4608      	mov	r0, r1
  40d818:	931c      	str	r3, [sp, #112]	; 0x70
  40d81a:	921d      	str	r2, [sp, #116]	; 0x74
  40d81c:	46ca      	mov	sl, r9
  40d81e:	4601      	mov	r1, r0
  40d820:	f10a 0a08 	add.w	sl, sl, #8
  40d824:	3001      	adds	r0, #1
  40d826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d828:	2b80      	cmp	r3, #128	; 0x80
  40d82a:	f43f ae19 	beq.w	40d460 <_vfiprintf_r+0x384>
  40d82e:	9b05      	ldr	r3, [sp, #20]
  40d830:	1ae4      	subs	r4, r4, r3
  40d832:	2c00      	cmp	r4, #0
  40d834:	dd2e      	ble.n	40d894 <_vfiprintf_r+0x7b8>
  40d836:	2c10      	cmp	r4, #16
  40d838:	4db3      	ldr	r5, [pc, #716]	; (40db08 <_vfiprintf_r+0xa2c>)
  40d83a:	dd1e      	ble.n	40d87a <_vfiprintf_r+0x79e>
  40d83c:	46d6      	mov	lr, sl
  40d83e:	2610      	movs	r6, #16
  40d840:	9f06      	ldr	r7, [sp, #24]
  40d842:	f8dd a010 	ldr.w	sl, [sp, #16]
  40d846:	e006      	b.n	40d856 <_vfiprintf_r+0x77a>
  40d848:	1c88      	adds	r0, r1, #2
  40d84a:	f10e 0e08 	add.w	lr, lr, #8
  40d84e:	4619      	mov	r1, r3
  40d850:	3c10      	subs	r4, #16
  40d852:	2c10      	cmp	r4, #16
  40d854:	dd10      	ble.n	40d878 <_vfiprintf_r+0x79c>
  40d856:	1c4b      	adds	r3, r1, #1
  40d858:	3210      	adds	r2, #16
  40d85a:	2b07      	cmp	r3, #7
  40d85c:	9211      	str	r2, [sp, #68]	; 0x44
  40d85e:	e88e 0060 	stmia.w	lr, {r5, r6}
  40d862:	9310      	str	r3, [sp, #64]	; 0x40
  40d864:	ddf0      	ble.n	40d848 <_vfiprintf_r+0x76c>
  40d866:	2a00      	cmp	r2, #0
  40d868:	d165      	bne.n	40d936 <_vfiprintf_r+0x85a>
  40d86a:	3c10      	subs	r4, #16
  40d86c:	2c10      	cmp	r4, #16
  40d86e:	f04f 0001 	mov.w	r0, #1
  40d872:	4611      	mov	r1, r2
  40d874:	46ce      	mov	lr, r9
  40d876:	dcee      	bgt.n	40d856 <_vfiprintf_r+0x77a>
  40d878:	46f2      	mov	sl, lr
  40d87a:	4422      	add	r2, r4
  40d87c:	2807      	cmp	r0, #7
  40d87e:	9211      	str	r2, [sp, #68]	; 0x44
  40d880:	f8ca 5000 	str.w	r5, [sl]
  40d884:	f8ca 4004 	str.w	r4, [sl, #4]
  40d888:	9010      	str	r0, [sp, #64]	; 0x40
  40d88a:	f300 8085 	bgt.w	40d998 <_vfiprintf_r+0x8bc>
  40d88e:	f10a 0a08 	add.w	sl, sl, #8
  40d892:	3001      	adds	r0, #1
  40d894:	9905      	ldr	r1, [sp, #20]
  40d896:	f8ca b000 	str.w	fp, [sl]
  40d89a:	440a      	add	r2, r1
  40d89c:	2807      	cmp	r0, #7
  40d89e:	9211      	str	r2, [sp, #68]	; 0x44
  40d8a0:	f8ca 1004 	str.w	r1, [sl, #4]
  40d8a4:	9010      	str	r0, [sp, #64]	; 0x40
  40d8a6:	f340 8082 	ble.w	40d9ae <_vfiprintf_r+0x8d2>
  40d8aa:	2a00      	cmp	r2, #0
  40d8ac:	f040 8118 	bne.w	40dae0 <_vfiprintf_r+0xa04>
  40d8b0:	9b02      	ldr	r3, [sp, #8]
  40d8b2:	9210      	str	r2, [sp, #64]	; 0x40
  40d8b4:	0758      	lsls	r0, r3, #29
  40d8b6:	d535      	bpl.n	40d924 <_vfiprintf_r+0x848>
  40d8b8:	9b08      	ldr	r3, [sp, #32]
  40d8ba:	9901      	ldr	r1, [sp, #4]
  40d8bc:	1a5c      	subs	r4, r3, r1
  40d8be:	2c00      	cmp	r4, #0
  40d8c0:	f340 80e7 	ble.w	40da92 <_vfiprintf_r+0x9b6>
  40d8c4:	46ca      	mov	sl, r9
  40d8c6:	2c10      	cmp	r4, #16
  40d8c8:	f340 8218 	ble.w	40dcfc <_vfiprintf_r+0xc20>
  40d8cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d8ce:	4e8f      	ldr	r6, [pc, #572]	; (40db0c <_vfiprintf_r+0xa30>)
  40d8d0:	9f06      	ldr	r7, [sp, #24]
  40d8d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d8d6:	2510      	movs	r5, #16
  40d8d8:	e006      	b.n	40d8e8 <_vfiprintf_r+0x80c>
  40d8da:	1c88      	adds	r0, r1, #2
  40d8dc:	f10a 0a08 	add.w	sl, sl, #8
  40d8e0:	4619      	mov	r1, r3
  40d8e2:	3c10      	subs	r4, #16
  40d8e4:	2c10      	cmp	r4, #16
  40d8e6:	dd11      	ble.n	40d90c <_vfiprintf_r+0x830>
  40d8e8:	1c4b      	adds	r3, r1, #1
  40d8ea:	3210      	adds	r2, #16
  40d8ec:	2b07      	cmp	r3, #7
  40d8ee:	9211      	str	r2, [sp, #68]	; 0x44
  40d8f0:	f8ca 6000 	str.w	r6, [sl]
  40d8f4:	f8ca 5004 	str.w	r5, [sl, #4]
  40d8f8:	9310      	str	r3, [sp, #64]	; 0x40
  40d8fa:	ddee      	ble.n	40d8da <_vfiprintf_r+0x7fe>
  40d8fc:	bb42      	cbnz	r2, 40d950 <_vfiprintf_r+0x874>
  40d8fe:	3c10      	subs	r4, #16
  40d900:	2c10      	cmp	r4, #16
  40d902:	f04f 0001 	mov.w	r0, #1
  40d906:	4611      	mov	r1, r2
  40d908:	46ca      	mov	sl, r9
  40d90a:	dced      	bgt.n	40d8e8 <_vfiprintf_r+0x80c>
  40d90c:	4422      	add	r2, r4
  40d90e:	2807      	cmp	r0, #7
  40d910:	9211      	str	r2, [sp, #68]	; 0x44
  40d912:	f8ca 6000 	str.w	r6, [sl]
  40d916:	f8ca 4004 	str.w	r4, [sl, #4]
  40d91a:	9010      	str	r0, [sp, #64]	; 0x40
  40d91c:	dd51      	ble.n	40d9c2 <_vfiprintf_r+0x8e6>
  40d91e:	2a00      	cmp	r2, #0
  40d920:	f040 819b 	bne.w	40dc5a <_vfiprintf_r+0xb7e>
  40d924:	9b03      	ldr	r3, [sp, #12]
  40d926:	9a08      	ldr	r2, [sp, #32]
  40d928:	9901      	ldr	r1, [sp, #4]
  40d92a:	428a      	cmp	r2, r1
  40d92c:	bfac      	ite	ge
  40d92e:	189b      	addge	r3, r3, r2
  40d930:	185b      	addlt	r3, r3, r1
  40d932:	9303      	str	r3, [sp, #12]
  40d934:	e04e      	b.n	40d9d4 <_vfiprintf_r+0x8f8>
  40d936:	aa0f      	add	r2, sp, #60	; 0x3c
  40d938:	4651      	mov	r1, sl
  40d93a:	4638      	mov	r0, r7
  40d93c:	f7ff fb8e 	bl	40d05c <__sprint_r.part.0>
  40d940:	2800      	cmp	r0, #0
  40d942:	f040 813f 	bne.w	40dbc4 <_vfiprintf_r+0xae8>
  40d946:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d948:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d94a:	1c48      	adds	r0, r1, #1
  40d94c:	46ce      	mov	lr, r9
  40d94e:	e77f      	b.n	40d850 <_vfiprintf_r+0x774>
  40d950:	aa0f      	add	r2, sp, #60	; 0x3c
  40d952:	4659      	mov	r1, fp
  40d954:	4638      	mov	r0, r7
  40d956:	f7ff fb81 	bl	40d05c <__sprint_r.part.0>
  40d95a:	b960      	cbnz	r0, 40d976 <_vfiprintf_r+0x89a>
  40d95c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d95e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d960:	1c48      	adds	r0, r1, #1
  40d962:	46ca      	mov	sl, r9
  40d964:	e7bd      	b.n	40d8e2 <_vfiprintf_r+0x806>
  40d966:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d968:	f8dd b010 	ldr.w	fp, [sp, #16]
  40d96c:	2b00      	cmp	r3, #0
  40d96e:	f040 81d4 	bne.w	40dd1a <_vfiprintf_r+0xc3e>
  40d972:	2300      	movs	r3, #0
  40d974:	9310      	str	r3, [sp, #64]	; 0x40
  40d976:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40d97a:	f013 0f01 	tst.w	r3, #1
  40d97e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40d982:	d102      	bne.n	40d98a <_vfiprintf_r+0x8ae>
  40d984:	059a      	lsls	r2, r3, #22
  40d986:	f140 80de 	bpl.w	40db46 <_vfiprintf_r+0xa6a>
  40d98a:	065b      	lsls	r3, r3, #25
  40d98c:	f53f acb2 	bmi.w	40d2f4 <_vfiprintf_r+0x218>
  40d990:	9803      	ldr	r0, [sp, #12]
  40d992:	b02d      	add	sp, #180	; 0xb4
  40d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d998:	2a00      	cmp	r2, #0
  40d99a:	f040 8106 	bne.w	40dbaa <_vfiprintf_r+0xace>
  40d99e:	9a05      	ldr	r2, [sp, #20]
  40d9a0:	921d      	str	r2, [sp, #116]	; 0x74
  40d9a2:	2301      	movs	r3, #1
  40d9a4:	9211      	str	r2, [sp, #68]	; 0x44
  40d9a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40d9aa:	9310      	str	r3, [sp, #64]	; 0x40
  40d9ac:	46ca      	mov	sl, r9
  40d9ae:	f10a 0a08 	add.w	sl, sl, #8
  40d9b2:	9b02      	ldr	r3, [sp, #8]
  40d9b4:	0759      	lsls	r1, r3, #29
  40d9b6:	d504      	bpl.n	40d9c2 <_vfiprintf_r+0x8e6>
  40d9b8:	9b08      	ldr	r3, [sp, #32]
  40d9ba:	9901      	ldr	r1, [sp, #4]
  40d9bc:	1a5c      	subs	r4, r3, r1
  40d9be:	2c00      	cmp	r4, #0
  40d9c0:	dc81      	bgt.n	40d8c6 <_vfiprintf_r+0x7ea>
  40d9c2:	9b03      	ldr	r3, [sp, #12]
  40d9c4:	9908      	ldr	r1, [sp, #32]
  40d9c6:	9801      	ldr	r0, [sp, #4]
  40d9c8:	4281      	cmp	r1, r0
  40d9ca:	bfac      	ite	ge
  40d9cc:	185b      	addge	r3, r3, r1
  40d9ce:	181b      	addlt	r3, r3, r0
  40d9d0:	9303      	str	r3, [sp, #12]
  40d9d2:	bb72      	cbnz	r2, 40da32 <_vfiprintf_r+0x956>
  40d9d4:	2300      	movs	r3, #0
  40d9d6:	9310      	str	r3, [sp, #64]	; 0x40
  40d9d8:	46ca      	mov	sl, r9
  40d9da:	f7ff bbbc 	b.w	40d156 <_vfiprintf_r+0x7a>
  40d9de:	aa0f      	add	r2, sp, #60	; 0x3c
  40d9e0:	9904      	ldr	r1, [sp, #16]
  40d9e2:	4620      	mov	r0, r4
  40d9e4:	f7ff fb3a 	bl	40d05c <__sprint_r.part.0>
  40d9e8:	bb50      	cbnz	r0, 40da40 <_vfiprintf_r+0x964>
  40d9ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d9ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d9ee:	f101 0e01 	add.w	lr, r1, #1
  40d9f2:	46cc      	mov	ip, r9
  40d9f4:	e548      	b.n	40d488 <_vfiprintf_r+0x3ac>
  40d9f6:	2a00      	cmp	r2, #0
  40d9f8:	f040 8140 	bne.w	40dc7c <_vfiprintf_r+0xba0>
  40d9fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  40da00:	2900      	cmp	r1, #0
  40da02:	f000 811b 	beq.w	40dc3c <_vfiprintf_r+0xb60>
  40da06:	2201      	movs	r2, #1
  40da08:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40da0c:	4610      	mov	r0, r2
  40da0e:	921d      	str	r2, [sp, #116]	; 0x74
  40da10:	911c      	str	r1, [sp, #112]	; 0x70
  40da12:	46ca      	mov	sl, r9
  40da14:	4601      	mov	r1, r0
  40da16:	f10a 0a08 	add.w	sl, sl, #8
  40da1a:	3001      	adds	r0, #1
  40da1c:	e507      	b.n	40d42e <_vfiprintf_r+0x352>
  40da1e:	9b02      	ldr	r3, [sp, #8]
  40da20:	2a01      	cmp	r2, #1
  40da22:	f000 8098 	beq.w	40db56 <_vfiprintf_r+0xa7a>
  40da26:	2a02      	cmp	r2, #2
  40da28:	d10d      	bne.n	40da46 <_vfiprintf_r+0x96a>
  40da2a:	9302      	str	r3, [sp, #8]
  40da2c:	2600      	movs	r6, #0
  40da2e:	2700      	movs	r7, #0
  40da30:	e5b0      	b.n	40d594 <_vfiprintf_r+0x4b8>
  40da32:	aa0f      	add	r2, sp, #60	; 0x3c
  40da34:	9904      	ldr	r1, [sp, #16]
  40da36:	9806      	ldr	r0, [sp, #24]
  40da38:	f7ff fb10 	bl	40d05c <__sprint_r.part.0>
  40da3c:	2800      	cmp	r0, #0
  40da3e:	d0c9      	beq.n	40d9d4 <_vfiprintf_r+0x8f8>
  40da40:	f8dd b010 	ldr.w	fp, [sp, #16]
  40da44:	e797      	b.n	40d976 <_vfiprintf_r+0x89a>
  40da46:	9302      	str	r3, [sp, #8]
  40da48:	2600      	movs	r6, #0
  40da4a:	2700      	movs	r7, #0
  40da4c:	4649      	mov	r1, r9
  40da4e:	e000      	b.n	40da52 <_vfiprintf_r+0x976>
  40da50:	4659      	mov	r1, fp
  40da52:	08f2      	lsrs	r2, r6, #3
  40da54:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  40da58:	08f8      	lsrs	r0, r7, #3
  40da5a:	f006 0307 	and.w	r3, r6, #7
  40da5e:	4607      	mov	r7, r0
  40da60:	4616      	mov	r6, r2
  40da62:	3330      	adds	r3, #48	; 0x30
  40da64:	ea56 0207 	orrs.w	r2, r6, r7
  40da68:	f801 3c01 	strb.w	r3, [r1, #-1]
  40da6c:	f101 3bff 	add.w	fp, r1, #4294967295
  40da70:	d1ee      	bne.n	40da50 <_vfiprintf_r+0x974>
  40da72:	9a02      	ldr	r2, [sp, #8]
  40da74:	07d6      	lsls	r6, r2, #31
  40da76:	f57f ad9d 	bpl.w	40d5b4 <_vfiprintf_r+0x4d8>
  40da7a:	2b30      	cmp	r3, #48	; 0x30
  40da7c:	f43f ad9a 	beq.w	40d5b4 <_vfiprintf_r+0x4d8>
  40da80:	3902      	subs	r1, #2
  40da82:	2330      	movs	r3, #48	; 0x30
  40da84:	f80b 3c01 	strb.w	r3, [fp, #-1]
  40da88:	eba9 0301 	sub.w	r3, r9, r1
  40da8c:	9305      	str	r3, [sp, #20]
  40da8e:	468b      	mov	fp, r1
  40da90:	e476      	b.n	40d380 <_vfiprintf_r+0x2a4>
  40da92:	9b03      	ldr	r3, [sp, #12]
  40da94:	9a08      	ldr	r2, [sp, #32]
  40da96:	428a      	cmp	r2, r1
  40da98:	bfac      	ite	ge
  40da9a:	189b      	addge	r3, r3, r2
  40da9c:	185b      	addlt	r3, r3, r1
  40da9e:	9303      	str	r3, [sp, #12]
  40daa0:	e798      	b.n	40d9d4 <_vfiprintf_r+0x8f8>
  40daa2:	2202      	movs	r2, #2
  40daa4:	e44d      	b.n	40d342 <_vfiprintf_r+0x266>
  40daa6:	2f00      	cmp	r7, #0
  40daa8:	bf08      	it	eq
  40daaa:	2e0a      	cmpeq	r6, #10
  40daac:	d352      	bcc.n	40db54 <_vfiprintf_r+0xa78>
  40daae:	46cb      	mov	fp, r9
  40dab0:	4630      	mov	r0, r6
  40dab2:	4639      	mov	r1, r7
  40dab4:	220a      	movs	r2, #10
  40dab6:	2300      	movs	r3, #0
  40dab8:	f001 fe94 	bl	40f7e4 <__aeabi_uldivmod>
  40dabc:	3230      	adds	r2, #48	; 0x30
  40dabe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40dac2:	4630      	mov	r0, r6
  40dac4:	4639      	mov	r1, r7
  40dac6:	2300      	movs	r3, #0
  40dac8:	220a      	movs	r2, #10
  40daca:	f001 fe8b 	bl	40f7e4 <__aeabi_uldivmod>
  40dace:	4606      	mov	r6, r0
  40dad0:	460f      	mov	r7, r1
  40dad2:	ea56 0307 	orrs.w	r3, r6, r7
  40dad6:	d1eb      	bne.n	40dab0 <_vfiprintf_r+0x9d4>
  40dad8:	e56c      	b.n	40d5b4 <_vfiprintf_r+0x4d8>
  40dada:	9405      	str	r4, [sp, #20]
  40dadc:	46cb      	mov	fp, r9
  40dade:	e44f      	b.n	40d380 <_vfiprintf_r+0x2a4>
  40dae0:	aa0f      	add	r2, sp, #60	; 0x3c
  40dae2:	9904      	ldr	r1, [sp, #16]
  40dae4:	9806      	ldr	r0, [sp, #24]
  40dae6:	f7ff fab9 	bl	40d05c <__sprint_r.part.0>
  40daea:	2800      	cmp	r0, #0
  40daec:	d1a8      	bne.n	40da40 <_vfiprintf_r+0x964>
  40daee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40daf0:	46ca      	mov	sl, r9
  40daf2:	e75e      	b.n	40d9b2 <_vfiprintf_r+0x8d6>
  40daf4:	aa0f      	add	r2, sp, #60	; 0x3c
  40daf6:	9904      	ldr	r1, [sp, #16]
  40daf8:	9806      	ldr	r0, [sp, #24]
  40dafa:	f7ff faaf 	bl	40d05c <__sprint_r.part.0>
  40dafe:	2800      	cmp	r0, #0
  40db00:	d19e      	bne.n	40da40 <_vfiprintf_r+0x964>
  40db02:	46ca      	mov	sl, r9
  40db04:	f7ff bbc0 	b.w	40d288 <_vfiprintf_r+0x1ac>
  40db08:	0040fbf0 	.word	0x0040fbf0
  40db0c:	0040fbe0 	.word	0x0040fbe0
  40db10:	3104      	adds	r1, #4
  40db12:	6816      	ldr	r6, [r2, #0]
  40db14:	9107      	str	r1, [sp, #28]
  40db16:	2201      	movs	r2, #1
  40db18:	2700      	movs	r7, #0
  40db1a:	e412      	b.n	40d342 <_vfiprintf_r+0x266>
  40db1c:	9807      	ldr	r0, [sp, #28]
  40db1e:	4601      	mov	r1, r0
  40db20:	3104      	adds	r1, #4
  40db22:	6806      	ldr	r6, [r0, #0]
  40db24:	9107      	str	r1, [sp, #28]
  40db26:	2700      	movs	r7, #0
  40db28:	e40b      	b.n	40d342 <_vfiprintf_r+0x266>
  40db2a:	680e      	ldr	r6, [r1, #0]
  40db2c:	3104      	adds	r1, #4
  40db2e:	9107      	str	r1, [sp, #28]
  40db30:	2700      	movs	r7, #0
  40db32:	e591      	b.n	40d658 <_vfiprintf_r+0x57c>
  40db34:	9907      	ldr	r1, [sp, #28]
  40db36:	680e      	ldr	r6, [r1, #0]
  40db38:	460a      	mov	r2, r1
  40db3a:	17f7      	asrs	r7, r6, #31
  40db3c:	3204      	adds	r2, #4
  40db3e:	9207      	str	r2, [sp, #28]
  40db40:	4630      	mov	r0, r6
  40db42:	4639      	mov	r1, r7
  40db44:	e50f      	b.n	40d566 <_vfiprintf_r+0x48a>
  40db46:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40db4a:	f000 fe7f 	bl	40e84c <__retarget_lock_release_recursive>
  40db4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40db52:	e71a      	b.n	40d98a <_vfiprintf_r+0x8ae>
  40db54:	9b02      	ldr	r3, [sp, #8]
  40db56:	9302      	str	r3, [sp, #8]
  40db58:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40db5c:	3630      	adds	r6, #48	; 0x30
  40db5e:	2301      	movs	r3, #1
  40db60:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  40db64:	9305      	str	r3, [sp, #20]
  40db66:	e40b      	b.n	40d380 <_vfiprintf_r+0x2a4>
  40db68:	aa0f      	add	r2, sp, #60	; 0x3c
  40db6a:	9904      	ldr	r1, [sp, #16]
  40db6c:	9806      	ldr	r0, [sp, #24]
  40db6e:	f7ff fa75 	bl	40d05c <__sprint_r.part.0>
  40db72:	2800      	cmp	r0, #0
  40db74:	f47f af64 	bne.w	40da40 <_vfiprintf_r+0x964>
  40db78:	9910      	ldr	r1, [sp, #64]	; 0x40
  40db7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40db7c:	1c48      	adds	r0, r1, #1
  40db7e:	46ca      	mov	sl, r9
  40db80:	e651      	b.n	40d826 <_vfiprintf_r+0x74a>
  40db82:	aa0f      	add	r2, sp, #60	; 0x3c
  40db84:	9904      	ldr	r1, [sp, #16]
  40db86:	9806      	ldr	r0, [sp, #24]
  40db88:	f7ff fa68 	bl	40d05c <__sprint_r.part.0>
  40db8c:	2800      	cmp	r0, #0
  40db8e:	f47f af57 	bne.w	40da40 <_vfiprintf_r+0x964>
  40db92:	9910      	ldr	r1, [sp, #64]	; 0x40
  40db94:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40db96:	1c48      	adds	r0, r1, #1
  40db98:	46ca      	mov	sl, r9
  40db9a:	e448      	b.n	40d42e <_vfiprintf_r+0x352>
  40db9c:	2a00      	cmp	r2, #0
  40db9e:	f040 8091 	bne.w	40dcc4 <_vfiprintf_r+0xbe8>
  40dba2:	2001      	movs	r0, #1
  40dba4:	4611      	mov	r1, r2
  40dba6:	46ca      	mov	sl, r9
  40dba8:	e641      	b.n	40d82e <_vfiprintf_r+0x752>
  40dbaa:	aa0f      	add	r2, sp, #60	; 0x3c
  40dbac:	9904      	ldr	r1, [sp, #16]
  40dbae:	9806      	ldr	r0, [sp, #24]
  40dbb0:	f7ff fa54 	bl	40d05c <__sprint_r.part.0>
  40dbb4:	2800      	cmp	r0, #0
  40dbb6:	f47f af43 	bne.w	40da40 <_vfiprintf_r+0x964>
  40dbba:	9810      	ldr	r0, [sp, #64]	; 0x40
  40dbbc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dbbe:	3001      	adds	r0, #1
  40dbc0:	46ca      	mov	sl, r9
  40dbc2:	e667      	b.n	40d894 <_vfiprintf_r+0x7b8>
  40dbc4:	46d3      	mov	fp, sl
  40dbc6:	e6d6      	b.n	40d976 <_vfiprintf_r+0x89a>
  40dbc8:	9e07      	ldr	r6, [sp, #28]
  40dbca:	3607      	adds	r6, #7
  40dbcc:	f026 0207 	bic.w	r2, r6, #7
  40dbd0:	f102 0108 	add.w	r1, r2, #8
  40dbd4:	e9d2 6700 	ldrd	r6, r7, [r2]
  40dbd8:	9107      	str	r1, [sp, #28]
  40dbda:	2201      	movs	r2, #1
  40dbdc:	f7ff bbb1 	b.w	40d342 <_vfiprintf_r+0x266>
  40dbe0:	9e07      	ldr	r6, [sp, #28]
  40dbe2:	3607      	adds	r6, #7
  40dbe4:	f026 0607 	bic.w	r6, r6, #7
  40dbe8:	e9d6 0100 	ldrd	r0, r1, [r6]
  40dbec:	f106 0208 	add.w	r2, r6, #8
  40dbf0:	9207      	str	r2, [sp, #28]
  40dbf2:	4606      	mov	r6, r0
  40dbf4:	460f      	mov	r7, r1
  40dbf6:	e4b6      	b.n	40d566 <_vfiprintf_r+0x48a>
  40dbf8:	9e07      	ldr	r6, [sp, #28]
  40dbfa:	3607      	adds	r6, #7
  40dbfc:	f026 0207 	bic.w	r2, r6, #7
  40dc00:	f102 0108 	add.w	r1, r2, #8
  40dc04:	e9d2 6700 	ldrd	r6, r7, [r2]
  40dc08:	9107      	str	r1, [sp, #28]
  40dc0a:	2200      	movs	r2, #0
  40dc0c:	f7ff bb99 	b.w	40d342 <_vfiprintf_r+0x266>
  40dc10:	9e07      	ldr	r6, [sp, #28]
  40dc12:	3607      	adds	r6, #7
  40dc14:	f026 0107 	bic.w	r1, r6, #7
  40dc18:	f101 0008 	add.w	r0, r1, #8
  40dc1c:	9007      	str	r0, [sp, #28]
  40dc1e:	e9d1 6700 	ldrd	r6, r7, [r1]
  40dc22:	e519      	b.n	40d658 <_vfiprintf_r+0x57c>
  40dc24:	46cb      	mov	fp, r9
  40dc26:	f7ff bbab 	b.w	40d380 <_vfiprintf_r+0x2a4>
  40dc2a:	252d      	movs	r5, #45	; 0x2d
  40dc2c:	4276      	negs	r6, r6
  40dc2e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40dc32:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dc36:	2201      	movs	r2, #1
  40dc38:	f7ff bb88 	b.w	40d34c <_vfiprintf_r+0x270>
  40dc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40dc3e:	b9b3      	cbnz	r3, 40dc6e <_vfiprintf_r+0xb92>
  40dc40:	4611      	mov	r1, r2
  40dc42:	2001      	movs	r0, #1
  40dc44:	46ca      	mov	sl, r9
  40dc46:	e5f2      	b.n	40d82e <_vfiprintf_r+0x752>
  40dc48:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40dc4c:	f000 fdfe 	bl	40e84c <__retarget_lock_release_recursive>
  40dc50:	f04f 33ff 	mov.w	r3, #4294967295
  40dc54:	9303      	str	r3, [sp, #12]
  40dc56:	f7ff bb50 	b.w	40d2fa <_vfiprintf_r+0x21e>
  40dc5a:	aa0f      	add	r2, sp, #60	; 0x3c
  40dc5c:	9904      	ldr	r1, [sp, #16]
  40dc5e:	9806      	ldr	r0, [sp, #24]
  40dc60:	f7ff f9fc 	bl	40d05c <__sprint_r.part.0>
  40dc64:	2800      	cmp	r0, #0
  40dc66:	f47f aeeb 	bne.w	40da40 <_vfiprintf_r+0x964>
  40dc6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dc6c:	e6a9      	b.n	40d9c2 <_vfiprintf_r+0x8e6>
  40dc6e:	ab0e      	add	r3, sp, #56	; 0x38
  40dc70:	2202      	movs	r2, #2
  40dc72:	931c      	str	r3, [sp, #112]	; 0x70
  40dc74:	921d      	str	r2, [sp, #116]	; 0x74
  40dc76:	2001      	movs	r0, #1
  40dc78:	46ca      	mov	sl, r9
  40dc7a:	e5d0      	b.n	40d81e <_vfiprintf_r+0x742>
  40dc7c:	aa0f      	add	r2, sp, #60	; 0x3c
  40dc7e:	9904      	ldr	r1, [sp, #16]
  40dc80:	9806      	ldr	r0, [sp, #24]
  40dc82:	f7ff f9eb 	bl	40d05c <__sprint_r.part.0>
  40dc86:	2800      	cmp	r0, #0
  40dc88:	f47f aeda 	bne.w	40da40 <_vfiprintf_r+0x964>
  40dc8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dc8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dc90:	1c48      	adds	r0, r1, #1
  40dc92:	46ca      	mov	sl, r9
  40dc94:	e5a4      	b.n	40d7e0 <_vfiprintf_r+0x704>
  40dc96:	9a07      	ldr	r2, [sp, #28]
  40dc98:	9903      	ldr	r1, [sp, #12]
  40dc9a:	6813      	ldr	r3, [r2, #0]
  40dc9c:	17cd      	asrs	r5, r1, #31
  40dc9e:	4608      	mov	r0, r1
  40dca0:	3204      	adds	r2, #4
  40dca2:	4629      	mov	r1, r5
  40dca4:	9207      	str	r2, [sp, #28]
  40dca6:	e9c3 0100 	strd	r0, r1, [r3]
  40dcaa:	f7ff ba54 	b.w	40d156 <_vfiprintf_r+0x7a>
  40dcae:	4658      	mov	r0, fp
  40dcb0:	9607      	str	r6, [sp, #28]
  40dcb2:	9302      	str	r3, [sp, #8]
  40dcb4:	f7ff f964 	bl	40cf80 <strlen>
  40dcb8:	2400      	movs	r4, #0
  40dcba:	9005      	str	r0, [sp, #20]
  40dcbc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40dcc0:	f7ff bb5e 	b.w	40d380 <_vfiprintf_r+0x2a4>
  40dcc4:	aa0f      	add	r2, sp, #60	; 0x3c
  40dcc6:	9904      	ldr	r1, [sp, #16]
  40dcc8:	9806      	ldr	r0, [sp, #24]
  40dcca:	f7ff f9c7 	bl	40d05c <__sprint_r.part.0>
  40dcce:	2800      	cmp	r0, #0
  40dcd0:	f47f aeb6 	bne.w	40da40 <_vfiprintf_r+0x964>
  40dcd4:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dcd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dcd8:	1c48      	adds	r0, r1, #1
  40dcda:	46ca      	mov	sl, r9
  40dcdc:	e5a7      	b.n	40d82e <_vfiprintf_r+0x752>
  40dcde:	9910      	ldr	r1, [sp, #64]	; 0x40
  40dce0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dce2:	4e20      	ldr	r6, [pc, #128]	; (40dd64 <_vfiprintf_r+0xc88>)
  40dce4:	3101      	adds	r1, #1
  40dce6:	f7ff bb90 	b.w	40d40a <_vfiprintf_r+0x32e>
  40dcea:	2c06      	cmp	r4, #6
  40dcec:	bf28      	it	cs
  40dcee:	2406      	movcs	r4, #6
  40dcf0:	9405      	str	r4, [sp, #20]
  40dcf2:	9607      	str	r6, [sp, #28]
  40dcf4:	9401      	str	r4, [sp, #4]
  40dcf6:	f8df b070 	ldr.w	fp, [pc, #112]	; 40dd68 <_vfiprintf_r+0xc8c>
  40dcfa:	e4d5      	b.n	40d6a8 <_vfiprintf_r+0x5cc>
  40dcfc:	9810      	ldr	r0, [sp, #64]	; 0x40
  40dcfe:	4e19      	ldr	r6, [pc, #100]	; (40dd64 <_vfiprintf_r+0xc88>)
  40dd00:	3001      	adds	r0, #1
  40dd02:	e603      	b.n	40d90c <_vfiprintf_r+0x830>
  40dd04:	9405      	str	r4, [sp, #20]
  40dd06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40dd0a:	9607      	str	r6, [sp, #28]
  40dd0c:	9302      	str	r3, [sp, #8]
  40dd0e:	4604      	mov	r4, r0
  40dd10:	f7ff bb36 	b.w	40d380 <_vfiprintf_r+0x2a4>
  40dd14:	4686      	mov	lr, r0
  40dd16:	f7ff bbce 	b.w	40d4b6 <_vfiprintf_r+0x3da>
  40dd1a:	9806      	ldr	r0, [sp, #24]
  40dd1c:	aa0f      	add	r2, sp, #60	; 0x3c
  40dd1e:	4659      	mov	r1, fp
  40dd20:	f7ff f99c 	bl	40d05c <__sprint_r.part.0>
  40dd24:	2800      	cmp	r0, #0
  40dd26:	f43f ae24 	beq.w	40d972 <_vfiprintf_r+0x896>
  40dd2a:	e624      	b.n	40d976 <_vfiprintf_r+0x89a>
  40dd2c:	9907      	ldr	r1, [sp, #28]
  40dd2e:	f898 2001 	ldrb.w	r2, [r8, #1]
  40dd32:	680c      	ldr	r4, [r1, #0]
  40dd34:	3104      	adds	r1, #4
  40dd36:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40dd3a:	46b8      	mov	r8, r7
  40dd3c:	9107      	str	r1, [sp, #28]
  40dd3e:	f7ff ba3f 	b.w	40d1c0 <_vfiprintf_r+0xe4>
  40dd42:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dd46:	e43c      	b.n	40d5c2 <_vfiprintf_r+0x4e6>
  40dd48:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dd4c:	e521      	b.n	40d792 <_vfiprintf_r+0x6b6>
  40dd4e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dd52:	f7ff bbf4 	b.w	40d53e <_vfiprintf_r+0x462>
  40dd56:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dd5a:	e491      	b.n	40d680 <_vfiprintf_r+0x5a4>
  40dd5c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40dd60:	e469      	b.n	40d636 <_vfiprintf_r+0x55a>
  40dd62:	bf00      	nop
  40dd64:	0040fbe0 	.word	0x0040fbe0
  40dd68:	0040fbd8 	.word	0x0040fbd8

0040dd6c <__sbprintf>:
  40dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dd70:	460c      	mov	r4, r1
  40dd72:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  40dd76:	8989      	ldrh	r1, [r1, #12]
  40dd78:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40dd7a:	89e5      	ldrh	r5, [r4, #14]
  40dd7c:	9619      	str	r6, [sp, #100]	; 0x64
  40dd7e:	f021 0102 	bic.w	r1, r1, #2
  40dd82:	4606      	mov	r6, r0
  40dd84:	69e0      	ldr	r0, [r4, #28]
  40dd86:	f8ad 100c 	strh.w	r1, [sp, #12]
  40dd8a:	4617      	mov	r7, r2
  40dd8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40dd90:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40dd92:	f8ad 500e 	strh.w	r5, [sp, #14]
  40dd96:	4698      	mov	r8, r3
  40dd98:	ad1a      	add	r5, sp, #104	; 0x68
  40dd9a:	2300      	movs	r3, #0
  40dd9c:	9007      	str	r0, [sp, #28]
  40dd9e:	a816      	add	r0, sp, #88	; 0x58
  40dda0:	9209      	str	r2, [sp, #36]	; 0x24
  40dda2:	9306      	str	r3, [sp, #24]
  40dda4:	9500      	str	r5, [sp, #0]
  40dda6:	9504      	str	r5, [sp, #16]
  40dda8:	9102      	str	r1, [sp, #8]
  40ddaa:	9105      	str	r1, [sp, #20]
  40ddac:	f000 fd48 	bl	40e840 <__retarget_lock_init_recursive>
  40ddb0:	4643      	mov	r3, r8
  40ddb2:	463a      	mov	r2, r7
  40ddb4:	4669      	mov	r1, sp
  40ddb6:	4630      	mov	r0, r6
  40ddb8:	f7ff f990 	bl	40d0dc <_vfiprintf_r>
  40ddbc:	1e05      	subs	r5, r0, #0
  40ddbe:	db07      	blt.n	40ddd0 <__sbprintf+0x64>
  40ddc0:	4630      	mov	r0, r6
  40ddc2:	4669      	mov	r1, sp
  40ddc4:	f000 f928 	bl	40e018 <_fflush_r>
  40ddc8:	2800      	cmp	r0, #0
  40ddca:	bf18      	it	ne
  40ddcc:	f04f 35ff 	movne.w	r5, #4294967295
  40ddd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  40ddd4:	065b      	lsls	r3, r3, #25
  40ddd6:	d503      	bpl.n	40dde0 <__sbprintf+0x74>
  40ddd8:	89a3      	ldrh	r3, [r4, #12]
  40ddda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40ddde:	81a3      	strh	r3, [r4, #12]
  40dde0:	9816      	ldr	r0, [sp, #88]	; 0x58
  40dde2:	f000 fd2f 	bl	40e844 <__retarget_lock_close_recursive>
  40dde6:	4628      	mov	r0, r5
  40dde8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0040ddf0 <__swsetup_r>:
  40ddf0:	b538      	push	{r3, r4, r5, lr}
  40ddf2:	4b30      	ldr	r3, [pc, #192]	; (40deb4 <__swsetup_r+0xc4>)
  40ddf4:	681b      	ldr	r3, [r3, #0]
  40ddf6:	4605      	mov	r5, r0
  40ddf8:	460c      	mov	r4, r1
  40ddfa:	b113      	cbz	r3, 40de02 <__swsetup_r+0x12>
  40ddfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40ddfe:	2a00      	cmp	r2, #0
  40de00:	d038      	beq.n	40de74 <__swsetup_r+0x84>
  40de02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40de06:	b293      	uxth	r3, r2
  40de08:	0718      	lsls	r0, r3, #28
  40de0a:	d50c      	bpl.n	40de26 <__swsetup_r+0x36>
  40de0c:	6920      	ldr	r0, [r4, #16]
  40de0e:	b1a8      	cbz	r0, 40de3c <__swsetup_r+0x4c>
  40de10:	f013 0201 	ands.w	r2, r3, #1
  40de14:	d01e      	beq.n	40de54 <__swsetup_r+0x64>
  40de16:	6963      	ldr	r3, [r4, #20]
  40de18:	2200      	movs	r2, #0
  40de1a:	425b      	negs	r3, r3
  40de1c:	61a3      	str	r3, [r4, #24]
  40de1e:	60a2      	str	r2, [r4, #8]
  40de20:	b1f0      	cbz	r0, 40de60 <__swsetup_r+0x70>
  40de22:	2000      	movs	r0, #0
  40de24:	bd38      	pop	{r3, r4, r5, pc}
  40de26:	06d9      	lsls	r1, r3, #27
  40de28:	d53c      	bpl.n	40dea4 <__swsetup_r+0xb4>
  40de2a:	0758      	lsls	r0, r3, #29
  40de2c:	d426      	bmi.n	40de7c <__swsetup_r+0x8c>
  40de2e:	6920      	ldr	r0, [r4, #16]
  40de30:	f042 0308 	orr.w	r3, r2, #8
  40de34:	81a3      	strh	r3, [r4, #12]
  40de36:	b29b      	uxth	r3, r3
  40de38:	2800      	cmp	r0, #0
  40de3a:	d1e9      	bne.n	40de10 <__swsetup_r+0x20>
  40de3c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40de40:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  40de44:	d0e4      	beq.n	40de10 <__swsetup_r+0x20>
  40de46:	4628      	mov	r0, r5
  40de48:	4621      	mov	r1, r4
  40de4a:	f000 fd2f 	bl	40e8ac <__smakebuf_r>
  40de4e:	89a3      	ldrh	r3, [r4, #12]
  40de50:	6920      	ldr	r0, [r4, #16]
  40de52:	e7dd      	b.n	40de10 <__swsetup_r+0x20>
  40de54:	0799      	lsls	r1, r3, #30
  40de56:	bf58      	it	pl
  40de58:	6962      	ldrpl	r2, [r4, #20]
  40de5a:	60a2      	str	r2, [r4, #8]
  40de5c:	2800      	cmp	r0, #0
  40de5e:	d1e0      	bne.n	40de22 <__swsetup_r+0x32>
  40de60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40de64:	061a      	lsls	r2, r3, #24
  40de66:	d5dd      	bpl.n	40de24 <__swsetup_r+0x34>
  40de68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40de6c:	81a3      	strh	r3, [r4, #12]
  40de6e:	f04f 30ff 	mov.w	r0, #4294967295
  40de72:	bd38      	pop	{r3, r4, r5, pc}
  40de74:	4618      	mov	r0, r3
  40de76:	f000 f927 	bl	40e0c8 <__sinit>
  40de7a:	e7c2      	b.n	40de02 <__swsetup_r+0x12>
  40de7c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40de7e:	b151      	cbz	r1, 40de96 <__swsetup_r+0xa6>
  40de80:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40de84:	4299      	cmp	r1, r3
  40de86:	d004      	beq.n	40de92 <__swsetup_r+0xa2>
  40de88:	4628      	mov	r0, r5
  40de8a:	f000 fa43 	bl	40e314 <_free_r>
  40de8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40de92:	2300      	movs	r3, #0
  40de94:	6323      	str	r3, [r4, #48]	; 0x30
  40de96:	2300      	movs	r3, #0
  40de98:	6920      	ldr	r0, [r4, #16]
  40de9a:	6063      	str	r3, [r4, #4]
  40de9c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40dea0:	6020      	str	r0, [r4, #0]
  40dea2:	e7c5      	b.n	40de30 <__swsetup_r+0x40>
  40dea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  40dea8:	2309      	movs	r3, #9
  40deaa:	602b      	str	r3, [r5, #0]
  40deac:	f04f 30ff 	mov.w	r0, #4294967295
  40deb0:	81a2      	strh	r2, [r4, #12]
  40deb2:	bd38      	pop	{r3, r4, r5, pc}
  40deb4:	2040006c 	.word	0x2040006c

0040deb8 <register_fini>:
  40deb8:	4b02      	ldr	r3, [pc, #8]	; (40dec4 <register_fini+0xc>)
  40deba:	b113      	cbz	r3, 40dec2 <register_fini+0xa>
  40debc:	4802      	ldr	r0, [pc, #8]	; (40dec8 <register_fini+0x10>)
  40debe:	f000 b805 	b.w	40decc <atexit>
  40dec2:	4770      	bx	lr
  40dec4:	00000000 	.word	0x00000000
  40dec8:	0040e139 	.word	0x0040e139

0040decc <atexit>:
  40decc:	2300      	movs	r3, #0
  40dece:	4601      	mov	r1, r0
  40ded0:	461a      	mov	r2, r3
  40ded2:	4618      	mov	r0, r3
  40ded4:	f001 bb5e 	b.w	40f594 <__register_exitproc>

0040ded8 <__sflush_r>:
  40ded8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40dedc:	b29a      	uxth	r2, r3
  40dede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40dee2:	460d      	mov	r5, r1
  40dee4:	0711      	lsls	r1, r2, #28
  40dee6:	4680      	mov	r8, r0
  40dee8:	d43a      	bmi.n	40df60 <__sflush_r+0x88>
  40deea:	686a      	ldr	r2, [r5, #4]
  40deec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40def0:	2a00      	cmp	r2, #0
  40def2:	81ab      	strh	r3, [r5, #12]
  40def4:	dd6f      	ble.n	40dfd6 <__sflush_r+0xfe>
  40def6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40def8:	2c00      	cmp	r4, #0
  40defa:	d049      	beq.n	40df90 <__sflush_r+0xb8>
  40defc:	2200      	movs	r2, #0
  40defe:	b29b      	uxth	r3, r3
  40df00:	f8d8 6000 	ldr.w	r6, [r8]
  40df04:	f8c8 2000 	str.w	r2, [r8]
  40df08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40df0c:	d067      	beq.n	40dfde <__sflush_r+0x106>
  40df0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40df10:	075f      	lsls	r7, r3, #29
  40df12:	d505      	bpl.n	40df20 <__sflush_r+0x48>
  40df14:	6869      	ldr	r1, [r5, #4]
  40df16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40df18:	1a52      	subs	r2, r2, r1
  40df1a:	b10b      	cbz	r3, 40df20 <__sflush_r+0x48>
  40df1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40df1e:	1ad2      	subs	r2, r2, r3
  40df20:	2300      	movs	r3, #0
  40df22:	69e9      	ldr	r1, [r5, #28]
  40df24:	4640      	mov	r0, r8
  40df26:	47a0      	blx	r4
  40df28:	1c44      	adds	r4, r0, #1
  40df2a:	d03c      	beq.n	40dfa6 <__sflush_r+0xce>
  40df2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40df30:	692a      	ldr	r2, [r5, #16]
  40df32:	602a      	str	r2, [r5, #0]
  40df34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40df38:	2200      	movs	r2, #0
  40df3a:	81ab      	strh	r3, [r5, #12]
  40df3c:	04db      	lsls	r3, r3, #19
  40df3e:	606a      	str	r2, [r5, #4]
  40df40:	d447      	bmi.n	40dfd2 <__sflush_r+0xfa>
  40df42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  40df44:	f8c8 6000 	str.w	r6, [r8]
  40df48:	b311      	cbz	r1, 40df90 <__sflush_r+0xb8>
  40df4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40df4e:	4299      	cmp	r1, r3
  40df50:	d002      	beq.n	40df58 <__sflush_r+0x80>
  40df52:	4640      	mov	r0, r8
  40df54:	f000 f9de 	bl	40e314 <_free_r>
  40df58:	2000      	movs	r0, #0
  40df5a:	6328      	str	r0, [r5, #48]	; 0x30
  40df5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40df60:	692e      	ldr	r6, [r5, #16]
  40df62:	b1ae      	cbz	r6, 40df90 <__sflush_r+0xb8>
  40df64:	682c      	ldr	r4, [r5, #0]
  40df66:	602e      	str	r6, [r5, #0]
  40df68:	0791      	lsls	r1, r2, #30
  40df6a:	bf0c      	ite	eq
  40df6c:	696b      	ldreq	r3, [r5, #20]
  40df6e:	2300      	movne	r3, #0
  40df70:	1ba4      	subs	r4, r4, r6
  40df72:	60ab      	str	r3, [r5, #8]
  40df74:	e00a      	b.n	40df8c <__sflush_r+0xb4>
  40df76:	4623      	mov	r3, r4
  40df78:	4632      	mov	r2, r6
  40df7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40df7c:	69e9      	ldr	r1, [r5, #28]
  40df7e:	4640      	mov	r0, r8
  40df80:	47b8      	blx	r7
  40df82:	2800      	cmp	r0, #0
  40df84:	eba4 0400 	sub.w	r4, r4, r0
  40df88:	4406      	add	r6, r0
  40df8a:	dd04      	ble.n	40df96 <__sflush_r+0xbe>
  40df8c:	2c00      	cmp	r4, #0
  40df8e:	dcf2      	bgt.n	40df76 <__sflush_r+0x9e>
  40df90:	2000      	movs	r0, #0
  40df92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40df96:	89ab      	ldrh	r3, [r5, #12]
  40df98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40df9c:	81ab      	strh	r3, [r5, #12]
  40df9e:	f04f 30ff 	mov.w	r0, #4294967295
  40dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40dfa6:	f8d8 4000 	ldr.w	r4, [r8]
  40dfaa:	2c1d      	cmp	r4, #29
  40dfac:	d8f3      	bhi.n	40df96 <__sflush_r+0xbe>
  40dfae:	4b19      	ldr	r3, [pc, #100]	; (40e014 <__sflush_r+0x13c>)
  40dfb0:	40e3      	lsrs	r3, r4
  40dfb2:	43db      	mvns	r3, r3
  40dfb4:	f013 0301 	ands.w	r3, r3, #1
  40dfb8:	d1ed      	bne.n	40df96 <__sflush_r+0xbe>
  40dfba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40dfbe:	606b      	str	r3, [r5, #4]
  40dfc0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  40dfc4:	6929      	ldr	r1, [r5, #16]
  40dfc6:	81ab      	strh	r3, [r5, #12]
  40dfc8:	04da      	lsls	r2, r3, #19
  40dfca:	6029      	str	r1, [r5, #0]
  40dfcc:	d5b9      	bpl.n	40df42 <__sflush_r+0x6a>
  40dfce:	2c00      	cmp	r4, #0
  40dfd0:	d1b7      	bne.n	40df42 <__sflush_r+0x6a>
  40dfd2:	6528      	str	r0, [r5, #80]	; 0x50
  40dfd4:	e7b5      	b.n	40df42 <__sflush_r+0x6a>
  40dfd6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  40dfd8:	2a00      	cmp	r2, #0
  40dfda:	dc8c      	bgt.n	40def6 <__sflush_r+0x1e>
  40dfdc:	e7d8      	b.n	40df90 <__sflush_r+0xb8>
  40dfde:	2301      	movs	r3, #1
  40dfe0:	69e9      	ldr	r1, [r5, #28]
  40dfe2:	4640      	mov	r0, r8
  40dfe4:	47a0      	blx	r4
  40dfe6:	1c43      	adds	r3, r0, #1
  40dfe8:	4602      	mov	r2, r0
  40dfea:	d002      	beq.n	40dff2 <__sflush_r+0x11a>
  40dfec:	89ab      	ldrh	r3, [r5, #12]
  40dfee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40dff0:	e78e      	b.n	40df10 <__sflush_r+0x38>
  40dff2:	f8d8 3000 	ldr.w	r3, [r8]
  40dff6:	2b00      	cmp	r3, #0
  40dff8:	d0f8      	beq.n	40dfec <__sflush_r+0x114>
  40dffa:	2b1d      	cmp	r3, #29
  40dffc:	d001      	beq.n	40e002 <__sflush_r+0x12a>
  40dffe:	2b16      	cmp	r3, #22
  40e000:	d102      	bne.n	40e008 <__sflush_r+0x130>
  40e002:	f8c8 6000 	str.w	r6, [r8]
  40e006:	e7c3      	b.n	40df90 <__sflush_r+0xb8>
  40e008:	89ab      	ldrh	r3, [r5, #12]
  40e00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e00e:	81ab      	strh	r3, [r5, #12]
  40e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40e014:	20400001 	.word	0x20400001

0040e018 <_fflush_r>:
  40e018:	b538      	push	{r3, r4, r5, lr}
  40e01a:	460d      	mov	r5, r1
  40e01c:	4604      	mov	r4, r0
  40e01e:	b108      	cbz	r0, 40e024 <_fflush_r+0xc>
  40e020:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40e022:	b1bb      	cbz	r3, 40e054 <_fflush_r+0x3c>
  40e024:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  40e028:	b188      	cbz	r0, 40e04e <_fflush_r+0x36>
  40e02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e02c:	07db      	lsls	r3, r3, #31
  40e02e:	d401      	bmi.n	40e034 <_fflush_r+0x1c>
  40e030:	0581      	lsls	r1, r0, #22
  40e032:	d517      	bpl.n	40e064 <_fflush_r+0x4c>
  40e034:	4620      	mov	r0, r4
  40e036:	4629      	mov	r1, r5
  40e038:	f7ff ff4e 	bl	40ded8 <__sflush_r>
  40e03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40e03e:	07da      	lsls	r2, r3, #31
  40e040:	4604      	mov	r4, r0
  40e042:	d402      	bmi.n	40e04a <_fflush_r+0x32>
  40e044:	89ab      	ldrh	r3, [r5, #12]
  40e046:	059b      	lsls	r3, r3, #22
  40e048:	d507      	bpl.n	40e05a <_fflush_r+0x42>
  40e04a:	4620      	mov	r0, r4
  40e04c:	bd38      	pop	{r3, r4, r5, pc}
  40e04e:	4604      	mov	r4, r0
  40e050:	4620      	mov	r0, r4
  40e052:	bd38      	pop	{r3, r4, r5, pc}
  40e054:	f000 f838 	bl	40e0c8 <__sinit>
  40e058:	e7e4      	b.n	40e024 <_fflush_r+0xc>
  40e05a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40e05c:	f000 fbf6 	bl	40e84c <__retarget_lock_release_recursive>
  40e060:	4620      	mov	r0, r4
  40e062:	bd38      	pop	{r3, r4, r5, pc}
  40e064:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40e066:	f000 fbef 	bl	40e848 <__retarget_lock_acquire_recursive>
  40e06a:	e7e3      	b.n	40e034 <_fflush_r+0x1c>

0040e06c <_cleanup_r>:
  40e06c:	4901      	ldr	r1, [pc, #4]	; (40e074 <_cleanup_r+0x8>)
  40e06e:	f000 bbaf 	b.w	40e7d0 <_fwalk_reent>
  40e072:	bf00      	nop
  40e074:	0040f67d 	.word	0x0040f67d

0040e078 <std.isra.0>:
  40e078:	b510      	push	{r4, lr}
  40e07a:	2300      	movs	r3, #0
  40e07c:	4604      	mov	r4, r0
  40e07e:	8181      	strh	r1, [r0, #12]
  40e080:	81c2      	strh	r2, [r0, #14]
  40e082:	6003      	str	r3, [r0, #0]
  40e084:	6043      	str	r3, [r0, #4]
  40e086:	6083      	str	r3, [r0, #8]
  40e088:	6643      	str	r3, [r0, #100]	; 0x64
  40e08a:	6103      	str	r3, [r0, #16]
  40e08c:	6143      	str	r3, [r0, #20]
  40e08e:	6183      	str	r3, [r0, #24]
  40e090:	4619      	mov	r1, r3
  40e092:	2208      	movs	r2, #8
  40e094:	305c      	adds	r0, #92	; 0x5c
  40e096:	f7fe ff09 	bl	40ceac <memset>
  40e09a:	4807      	ldr	r0, [pc, #28]	; (40e0b8 <std.isra.0+0x40>)
  40e09c:	4907      	ldr	r1, [pc, #28]	; (40e0bc <std.isra.0+0x44>)
  40e09e:	4a08      	ldr	r2, [pc, #32]	; (40e0c0 <std.isra.0+0x48>)
  40e0a0:	4b08      	ldr	r3, [pc, #32]	; (40e0c4 <std.isra.0+0x4c>)
  40e0a2:	6220      	str	r0, [r4, #32]
  40e0a4:	61e4      	str	r4, [r4, #28]
  40e0a6:	6261      	str	r1, [r4, #36]	; 0x24
  40e0a8:	62a2      	str	r2, [r4, #40]	; 0x28
  40e0aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  40e0ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  40e0b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e0b4:	f000 bbc4 	b.w	40e840 <__retarget_lock_init_recursive>
  40e0b8:	0040f3c1 	.word	0x0040f3c1
  40e0bc:	0040f3e5 	.word	0x0040f3e5
  40e0c0:	0040f421 	.word	0x0040f421
  40e0c4:	0040f441 	.word	0x0040f441

0040e0c8 <__sinit>:
  40e0c8:	b510      	push	{r4, lr}
  40e0ca:	4604      	mov	r4, r0
  40e0cc:	4812      	ldr	r0, [pc, #72]	; (40e118 <__sinit+0x50>)
  40e0ce:	f000 fbbb 	bl	40e848 <__retarget_lock_acquire_recursive>
  40e0d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40e0d4:	b9d2      	cbnz	r2, 40e10c <__sinit+0x44>
  40e0d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40e0da:	4810      	ldr	r0, [pc, #64]	; (40e11c <__sinit+0x54>)
  40e0dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  40e0e0:	2103      	movs	r1, #3
  40e0e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  40e0e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  40e0e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40e0ec:	6860      	ldr	r0, [r4, #4]
  40e0ee:	2104      	movs	r1, #4
  40e0f0:	f7ff ffc2 	bl	40e078 <std.isra.0>
  40e0f4:	2201      	movs	r2, #1
  40e0f6:	2109      	movs	r1, #9
  40e0f8:	68a0      	ldr	r0, [r4, #8]
  40e0fa:	f7ff ffbd 	bl	40e078 <std.isra.0>
  40e0fe:	2202      	movs	r2, #2
  40e100:	2112      	movs	r1, #18
  40e102:	68e0      	ldr	r0, [r4, #12]
  40e104:	f7ff ffb8 	bl	40e078 <std.isra.0>
  40e108:	2301      	movs	r3, #1
  40e10a:	63a3      	str	r3, [r4, #56]	; 0x38
  40e10c:	4802      	ldr	r0, [pc, #8]	; (40e118 <__sinit+0x50>)
  40e10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40e112:	f000 bb9b 	b.w	40e84c <__retarget_lock_release_recursive>
  40e116:	bf00      	nop
  40e118:	20404a00 	.word	0x20404a00
  40e11c:	0040e06d 	.word	0x0040e06d

0040e120 <__sfp_lock_acquire>:
  40e120:	4801      	ldr	r0, [pc, #4]	; (40e128 <__sfp_lock_acquire+0x8>)
  40e122:	f000 bb91 	b.w	40e848 <__retarget_lock_acquire_recursive>
  40e126:	bf00      	nop
  40e128:	20404a14 	.word	0x20404a14

0040e12c <__sfp_lock_release>:
  40e12c:	4801      	ldr	r0, [pc, #4]	; (40e134 <__sfp_lock_release+0x8>)
  40e12e:	f000 bb8d 	b.w	40e84c <__retarget_lock_release_recursive>
  40e132:	bf00      	nop
  40e134:	20404a14 	.word	0x20404a14

0040e138 <__libc_fini_array>:
  40e138:	b538      	push	{r3, r4, r5, lr}
  40e13a:	4c0a      	ldr	r4, [pc, #40]	; (40e164 <__libc_fini_array+0x2c>)
  40e13c:	4d0a      	ldr	r5, [pc, #40]	; (40e168 <__libc_fini_array+0x30>)
  40e13e:	1b64      	subs	r4, r4, r5
  40e140:	10a4      	asrs	r4, r4, #2
  40e142:	d00a      	beq.n	40e15a <__libc_fini_array+0x22>
  40e144:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40e148:	3b01      	subs	r3, #1
  40e14a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40e14e:	3c01      	subs	r4, #1
  40e150:	f855 3904 	ldr.w	r3, [r5], #-4
  40e154:	4798      	blx	r3
  40e156:	2c00      	cmp	r4, #0
  40e158:	d1f9      	bne.n	40e14e <__libc_fini_array+0x16>
  40e15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40e15e:	f001 bde3 	b.w	40fd28 <_fini>
  40e162:	bf00      	nop
  40e164:	0040fd38 	.word	0x0040fd38
  40e168:	0040fd34 	.word	0x0040fd34

0040e16c <__fputwc>:
  40e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40e170:	b082      	sub	sp, #8
  40e172:	4680      	mov	r8, r0
  40e174:	4689      	mov	r9, r1
  40e176:	4614      	mov	r4, r2
  40e178:	f000 fb54 	bl	40e824 <__locale_mb_cur_max>
  40e17c:	2801      	cmp	r0, #1
  40e17e:	d036      	beq.n	40e1ee <__fputwc+0x82>
  40e180:	464a      	mov	r2, r9
  40e182:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  40e186:	a901      	add	r1, sp, #4
  40e188:	4640      	mov	r0, r8
  40e18a:	f001 f9b5 	bl	40f4f8 <_wcrtomb_r>
  40e18e:	1c42      	adds	r2, r0, #1
  40e190:	4606      	mov	r6, r0
  40e192:	d025      	beq.n	40e1e0 <__fputwc+0x74>
  40e194:	b3a8      	cbz	r0, 40e202 <__fputwc+0x96>
  40e196:	f89d e004 	ldrb.w	lr, [sp, #4]
  40e19a:	2500      	movs	r5, #0
  40e19c:	f10d 0a04 	add.w	sl, sp, #4
  40e1a0:	e009      	b.n	40e1b6 <__fputwc+0x4a>
  40e1a2:	6823      	ldr	r3, [r4, #0]
  40e1a4:	1c5a      	adds	r2, r3, #1
  40e1a6:	6022      	str	r2, [r4, #0]
  40e1a8:	f883 e000 	strb.w	lr, [r3]
  40e1ac:	3501      	adds	r5, #1
  40e1ae:	42b5      	cmp	r5, r6
  40e1b0:	d227      	bcs.n	40e202 <__fputwc+0x96>
  40e1b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  40e1b6:	68a3      	ldr	r3, [r4, #8]
  40e1b8:	3b01      	subs	r3, #1
  40e1ba:	2b00      	cmp	r3, #0
  40e1bc:	60a3      	str	r3, [r4, #8]
  40e1be:	daf0      	bge.n	40e1a2 <__fputwc+0x36>
  40e1c0:	69a7      	ldr	r7, [r4, #24]
  40e1c2:	42bb      	cmp	r3, r7
  40e1c4:	4671      	mov	r1, lr
  40e1c6:	4622      	mov	r2, r4
  40e1c8:	4640      	mov	r0, r8
  40e1ca:	db02      	blt.n	40e1d2 <__fputwc+0x66>
  40e1cc:	f1be 0f0a 	cmp.w	lr, #10
  40e1d0:	d1e7      	bne.n	40e1a2 <__fputwc+0x36>
  40e1d2:	f001 f939 	bl	40f448 <__swbuf_r>
  40e1d6:	1c43      	adds	r3, r0, #1
  40e1d8:	d1e8      	bne.n	40e1ac <__fputwc+0x40>
  40e1da:	b002      	add	sp, #8
  40e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e1e0:	89a3      	ldrh	r3, [r4, #12]
  40e1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e1e6:	81a3      	strh	r3, [r4, #12]
  40e1e8:	b002      	add	sp, #8
  40e1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e1ee:	f109 33ff 	add.w	r3, r9, #4294967295
  40e1f2:	2bfe      	cmp	r3, #254	; 0xfe
  40e1f4:	d8c4      	bhi.n	40e180 <__fputwc+0x14>
  40e1f6:	fa5f fe89 	uxtb.w	lr, r9
  40e1fa:	4606      	mov	r6, r0
  40e1fc:	f88d e004 	strb.w	lr, [sp, #4]
  40e200:	e7cb      	b.n	40e19a <__fputwc+0x2e>
  40e202:	4648      	mov	r0, r9
  40e204:	b002      	add	sp, #8
  40e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40e20a:	bf00      	nop

0040e20c <_fputwc_r>:
  40e20c:	b530      	push	{r4, r5, lr}
  40e20e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  40e210:	f013 0f01 	tst.w	r3, #1
  40e214:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  40e218:	4614      	mov	r4, r2
  40e21a:	b083      	sub	sp, #12
  40e21c:	4605      	mov	r5, r0
  40e21e:	b29a      	uxth	r2, r3
  40e220:	d101      	bne.n	40e226 <_fputwc_r+0x1a>
  40e222:	0590      	lsls	r0, r2, #22
  40e224:	d51c      	bpl.n	40e260 <_fputwc_r+0x54>
  40e226:	0490      	lsls	r0, r2, #18
  40e228:	d406      	bmi.n	40e238 <_fputwc_r+0x2c>
  40e22a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  40e22c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  40e230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40e234:	81a3      	strh	r3, [r4, #12]
  40e236:	6662      	str	r2, [r4, #100]	; 0x64
  40e238:	4628      	mov	r0, r5
  40e23a:	4622      	mov	r2, r4
  40e23c:	f7ff ff96 	bl	40e16c <__fputwc>
  40e240:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40e242:	07da      	lsls	r2, r3, #31
  40e244:	4605      	mov	r5, r0
  40e246:	d402      	bmi.n	40e24e <_fputwc_r+0x42>
  40e248:	89a3      	ldrh	r3, [r4, #12]
  40e24a:	059b      	lsls	r3, r3, #22
  40e24c:	d502      	bpl.n	40e254 <_fputwc_r+0x48>
  40e24e:	4628      	mov	r0, r5
  40e250:	b003      	add	sp, #12
  40e252:	bd30      	pop	{r4, r5, pc}
  40e254:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e256:	f000 faf9 	bl	40e84c <__retarget_lock_release_recursive>
  40e25a:	4628      	mov	r0, r5
  40e25c:	b003      	add	sp, #12
  40e25e:	bd30      	pop	{r4, r5, pc}
  40e260:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40e262:	9101      	str	r1, [sp, #4]
  40e264:	f000 faf0 	bl	40e848 <__retarget_lock_acquire_recursive>
  40e268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e26c:	9901      	ldr	r1, [sp, #4]
  40e26e:	b29a      	uxth	r2, r3
  40e270:	e7d9      	b.n	40e226 <_fputwc_r+0x1a>
  40e272:	bf00      	nop

0040e274 <_malloc_trim_r>:
  40e274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e276:	4f24      	ldr	r7, [pc, #144]	; (40e308 <_malloc_trim_r+0x94>)
  40e278:	460c      	mov	r4, r1
  40e27a:	4606      	mov	r6, r0
  40e27c:	f000 fedc 	bl	40f038 <__malloc_lock>
  40e280:	68bb      	ldr	r3, [r7, #8]
  40e282:	685d      	ldr	r5, [r3, #4]
  40e284:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  40e288:	310f      	adds	r1, #15
  40e28a:	f025 0503 	bic.w	r5, r5, #3
  40e28e:	4429      	add	r1, r5
  40e290:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40e294:	f021 010f 	bic.w	r1, r1, #15
  40e298:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40e29c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  40e2a0:	db07      	blt.n	40e2b2 <_malloc_trim_r+0x3e>
  40e2a2:	2100      	movs	r1, #0
  40e2a4:	4630      	mov	r0, r6
  40e2a6:	f001 f879 	bl	40f39c <_sbrk_r>
  40e2aa:	68bb      	ldr	r3, [r7, #8]
  40e2ac:	442b      	add	r3, r5
  40e2ae:	4298      	cmp	r0, r3
  40e2b0:	d004      	beq.n	40e2bc <_malloc_trim_r+0x48>
  40e2b2:	4630      	mov	r0, r6
  40e2b4:	f000 fec6 	bl	40f044 <__malloc_unlock>
  40e2b8:	2000      	movs	r0, #0
  40e2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e2bc:	4261      	negs	r1, r4
  40e2be:	4630      	mov	r0, r6
  40e2c0:	f001 f86c 	bl	40f39c <_sbrk_r>
  40e2c4:	3001      	adds	r0, #1
  40e2c6:	d00d      	beq.n	40e2e4 <_malloc_trim_r+0x70>
  40e2c8:	4b10      	ldr	r3, [pc, #64]	; (40e30c <_malloc_trim_r+0x98>)
  40e2ca:	68ba      	ldr	r2, [r7, #8]
  40e2cc:	6819      	ldr	r1, [r3, #0]
  40e2ce:	1b2d      	subs	r5, r5, r4
  40e2d0:	f045 0501 	orr.w	r5, r5, #1
  40e2d4:	4630      	mov	r0, r6
  40e2d6:	1b09      	subs	r1, r1, r4
  40e2d8:	6055      	str	r5, [r2, #4]
  40e2da:	6019      	str	r1, [r3, #0]
  40e2dc:	f000 feb2 	bl	40f044 <__malloc_unlock>
  40e2e0:	2001      	movs	r0, #1
  40e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e2e4:	2100      	movs	r1, #0
  40e2e6:	4630      	mov	r0, r6
  40e2e8:	f001 f858 	bl	40f39c <_sbrk_r>
  40e2ec:	68ba      	ldr	r2, [r7, #8]
  40e2ee:	1a83      	subs	r3, r0, r2
  40e2f0:	2b0f      	cmp	r3, #15
  40e2f2:	ddde      	ble.n	40e2b2 <_malloc_trim_r+0x3e>
  40e2f4:	4c06      	ldr	r4, [pc, #24]	; (40e310 <_malloc_trim_r+0x9c>)
  40e2f6:	4905      	ldr	r1, [pc, #20]	; (40e30c <_malloc_trim_r+0x98>)
  40e2f8:	6824      	ldr	r4, [r4, #0]
  40e2fa:	f043 0301 	orr.w	r3, r3, #1
  40e2fe:	1b00      	subs	r0, r0, r4
  40e300:	6053      	str	r3, [r2, #4]
  40e302:	6008      	str	r0, [r1, #0]
  40e304:	e7d5      	b.n	40e2b2 <_malloc_trim_r+0x3e>
  40e306:	bf00      	nop
  40e308:	20400608 	.word	0x20400608
  40e30c:	204038f8 	.word	0x204038f8
  40e310:	20400a10 	.word	0x20400a10

0040e314 <_free_r>:
  40e314:	2900      	cmp	r1, #0
  40e316:	d044      	beq.n	40e3a2 <_free_r+0x8e>
  40e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40e31c:	460d      	mov	r5, r1
  40e31e:	4680      	mov	r8, r0
  40e320:	f000 fe8a 	bl	40f038 <__malloc_lock>
  40e324:	f855 7c04 	ldr.w	r7, [r5, #-4]
  40e328:	4969      	ldr	r1, [pc, #420]	; (40e4d0 <_free_r+0x1bc>)
  40e32a:	f027 0301 	bic.w	r3, r7, #1
  40e32e:	f1a5 0408 	sub.w	r4, r5, #8
  40e332:	18e2      	adds	r2, r4, r3
  40e334:	688e      	ldr	r6, [r1, #8]
  40e336:	6850      	ldr	r0, [r2, #4]
  40e338:	42b2      	cmp	r2, r6
  40e33a:	f020 0003 	bic.w	r0, r0, #3
  40e33e:	d05e      	beq.n	40e3fe <_free_r+0xea>
  40e340:	07fe      	lsls	r6, r7, #31
  40e342:	6050      	str	r0, [r2, #4]
  40e344:	d40b      	bmi.n	40e35e <_free_r+0x4a>
  40e346:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40e34a:	1be4      	subs	r4, r4, r7
  40e34c:	f101 0e08 	add.w	lr, r1, #8
  40e350:	68a5      	ldr	r5, [r4, #8]
  40e352:	4575      	cmp	r5, lr
  40e354:	443b      	add	r3, r7
  40e356:	d06d      	beq.n	40e434 <_free_r+0x120>
  40e358:	68e7      	ldr	r7, [r4, #12]
  40e35a:	60ef      	str	r7, [r5, #12]
  40e35c:	60bd      	str	r5, [r7, #8]
  40e35e:	1815      	adds	r5, r2, r0
  40e360:	686d      	ldr	r5, [r5, #4]
  40e362:	07ed      	lsls	r5, r5, #31
  40e364:	d53e      	bpl.n	40e3e4 <_free_r+0xd0>
  40e366:	f043 0201 	orr.w	r2, r3, #1
  40e36a:	6062      	str	r2, [r4, #4]
  40e36c:	50e3      	str	r3, [r4, r3]
  40e36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e372:	d217      	bcs.n	40e3a4 <_free_r+0x90>
  40e374:	08db      	lsrs	r3, r3, #3
  40e376:	1c58      	adds	r0, r3, #1
  40e378:	109a      	asrs	r2, r3, #2
  40e37a:	684d      	ldr	r5, [r1, #4]
  40e37c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  40e380:	60a7      	str	r7, [r4, #8]
  40e382:	2301      	movs	r3, #1
  40e384:	4093      	lsls	r3, r2
  40e386:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40e38a:	432b      	orrs	r3, r5
  40e38c:	3a08      	subs	r2, #8
  40e38e:	60e2      	str	r2, [r4, #12]
  40e390:	604b      	str	r3, [r1, #4]
  40e392:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40e396:	60fc      	str	r4, [r7, #12]
  40e398:	4640      	mov	r0, r8
  40e39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e39e:	f000 be51 	b.w	40f044 <__malloc_unlock>
  40e3a2:	4770      	bx	lr
  40e3a4:	0a5a      	lsrs	r2, r3, #9
  40e3a6:	2a04      	cmp	r2, #4
  40e3a8:	d852      	bhi.n	40e450 <_free_r+0x13c>
  40e3aa:	099a      	lsrs	r2, r3, #6
  40e3ac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  40e3b0:	00ff      	lsls	r7, r7, #3
  40e3b2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40e3b6:	19c8      	adds	r0, r1, r7
  40e3b8:	59ca      	ldr	r2, [r1, r7]
  40e3ba:	3808      	subs	r0, #8
  40e3bc:	4290      	cmp	r0, r2
  40e3be:	d04f      	beq.n	40e460 <_free_r+0x14c>
  40e3c0:	6851      	ldr	r1, [r2, #4]
  40e3c2:	f021 0103 	bic.w	r1, r1, #3
  40e3c6:	428b      	cmp	r3, r1
  40e3c8:	d232      	bcs.n	40e430 <_free_r+0x11c>
  40e3ca:	6892      	ldr	r2, [r2, #8]
  40e3cc:	4290      	cmp	r0, r2
  40e3ce:	d1f7      	bne.n	40e3c0 <_free_r+0xac>
  40e3d0:	68c3      	ldr	r3, [r0, #12]
  40e3d2:	60a0      	str	r0, [r4, #8]
  40e3d4:	60e3      	str	r3, [r4, #12]
  40e3d6:	609c      	str	r4, [r3, #8]
  40e3d8:	60c4      	str	r4, [r0, #12]
  40e3da:	4640      	mov	r0, r8
  40e3dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40e3e0:	f000 be30 	b.w	40f044 <__malloc_unlock>
  40e3e4:	6895      	ldr	r5, [r2, #8]
  40e3e6:	4f3b      	ldr	r7, [pc, #236]	; (40e4d4 <_free_r+0x1c0>)
  40e3e8:	42bd      	cmp	r5, r7
  40e3ea:	4403      	add	r3, r0
  40e3ec:	d040      	beq.n	40e470 <_free_r+0x15c>
  40e3ee:	68d0      	ldr	r0, [r2, #12]
  40e3f0:	60e8      	str	r0, [r5, #12]
  40e3f2:	f043 0201 	orr.w	r2, r3, #1
  40e3f6:	6085      	str	r5, [r0, #8]
  40e3f8:	6062      	str	r2, [r4, #4]
  40e3fa:	50e3      	str	r3, [r4, r3]
  40e3fc:	e7b7      	b.n	40e36e <_free_r+0x5a>
  40e3fe:	07ff      	lsls	r7, r7, #31
  40e400:	4403      	add	r3, r0
  40e402:	d407      	bmi.n	40e414 <_free_r+0x100>
  40e404:	f855 2c08 	ldr.w	r2, [r5, #-8]
  40e408:	1aa4      	subs	r4, r4, r2
  40e40a:	4413      	add	r3, r2
  40e40c:	68a0      	ldr	r0, [r4, #8]
  40e40e:	68e2      	ldr	r2, [r4, #12]
  40e410:	60c2      	str	r2, [r0, #12]
  40e412:	6090      	str	r0, [r2, #8]
  40e414:	4a30      	ldr	r2, [pc, #192]	; (40e4d8 <_free_r+0x1c4>)
  40e416:	6812      	ldr	r2, [r2, #0]
  40e418:	f043 0001 	orr.w	r0, r3, #1
  40e41c:	4293      	cmp	r3, r2
  40e41e:	6060      	str	r0, [r4, #4]
  40e420:	608c      	str	r4, [r1, #8]
  40e422:	d3b9      	bcc.n	40e398 <_free_r+0x84>
  40e424:	4b2d      	ldr	r3, [pc, #180]	; (40e4dc <_free_r+0x1c8>)
  40e426:	4640      	mov	r0, r8
  40e428:	6819      	ldr	r1, [r3, #0]
  40e42a:	f7ff ff23 	bl	40e274 <_malloc_trim_r>
  40e42e:	e7b3      	b.n	40e398 <_free_r+0x84>
  40e430:	4610      	mov	r0, r2
  40e432:	e7cd      	b.n	40e3d0 <_free_r+0xbc>
  40e434:	1811      	adds	r1, r2, r0
  40e436:	6849      	ldr	r1, [r1, #4]
  40e438:	07c9      	lsls	r1, r1, #31
  40e43a:	d444      	bmi.n	40e4c6 <_free_r+0x1b2>
  40e43c:	6891      	ldr	r1, [r2, #8]
  40e43e:	68d2      	ldr	r2, [r2, #12]
  40e440:	60ca      	str	r2, [r1, #12]
  40e442:	4403      	add	r3, r0
  40e444:	f043 0001 	orr.w	r0, r3, #1
  40e448:	6091      	str	r1, [r2, #8]
  40e44a:	6060      	str	r0, [r4, #4]
  40e44c:	50e3      	str	r3, [r4, r3]
  40e44e:	e7a3      	b.n	40e398 <_free_r+0x84>
  40e450:	2a14      	cmp	r2, #20
  40e452:	d816      	bhi.n	40e482 <_free_r+0x16e>
  40e454:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  40e458:	00ff      	lsls	r7, r7, #3
  40e45a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40e45e:	e7aa      	b.n	40e3b6 <_free_r+0xa2>
  40e460:	10aa      	asrs	r2, r5, #2
  40e462:	2301      	movs	r3, #1
  40e464:	684d      	ldr	r5, [r1, #4]
  40e466:	4093      	lsls	r3, r2
  40e468:	432b      	orrs	r3, r5
  40e46a:	604b      	str	r3, [r1, #4]
  40e46c:	4603      	mov	r3, r0
  40e46e:	e7b0      	b.n	40e3d2 <_free_r+0xbe>
  40e470:	f043 0201 	orr.w	r2, r3, #1
  40e474:	614c      	str	r4, [r1, #20]
  40e476:	610c      	str	r4, [r1, #16]
  40e478:	60e5      	str	r5, [r4, #12]
  40e47a:	60a5      	str	r5, [r4, #8]
  40e47c:	6062      	str	r2, [r4, #4]
  40e47e:	50e3      	str	r3, [r4, r3]
  40e480:	e78a      	b.n	40e398 <_free_r+0x84>
  40e482:	2a54      	cmp	r2, #84	; 0x54
  40e484:	d806      	bhi.n	40e494 <_free_r+0x180>
  40e486:	0b1a      	lsrs	r2, r3, #12
  40e488:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40e48c:	00ff      	lsls	r7, r7, #3
  40e48e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40e492:	e790      	b.n	40e3b6 <_free_r+0xa2>
  40e494:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40e498:	d806      	bhi.n	40e4a8 <_free_r+0x194>
  40e49a:	0bda      	lsrs	r2, r3, #15
  40e49c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40e4a0:	00ff      	lsls	r7, r7, #3
  40e4a2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40e4a6:	e786      	b.n	40e3b6 <_free_r+0xa2>
  40e4a8:	f240 5054 	movw	r0, #1364	; 0x554
  40e4ac:	4282      	cmp	r2, r0
  40e4ae:	d806      	bhi.n	40e4be <_free_r+0x1aa>
  40e4b0:	0c9a      	lsrs	r2, r3, #18
  40e4b2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40e4b6:	00ff      	lsls	r7, r7, #3
  40e4b8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40e4bc:	e77b      	b.n	40e3b6 <_free_r+0xa2>
  40e4be:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40e4c2:	257e      	movs	r5, #126	; 0x7e
  40e4c4:	e777      	b.n	40e3b6 <_free_r+0xa2>
  40e4c6:	f043 0101 	orr.w	r1, r3, #1
  40e4ca:	6061      	str	r1, [r4, #4]
  40e4cc:	6013      	str	r3, [r2, #0]
  40e4ce:	e763      	b.n	40e398 <_free_r+0x84>
  40e4d0:	20400608 	.word	0x20400608
  40e4d4:	20400610 	.word	0x20400610
  40e4d8:	20400a14 	.word	0x20400a14
  40e4dc:	20403928 	.word	0x20403928

0040e4e0 <__sfvwrite_r>:
  40e4e0:	6893      	ldr	r3, [r2, #8]
  40e4e2:	2b00      	cmp	r3, #0
  40e4e4:	d073      	beq.n	40e5ce <__sfvwrite_r+0xee>
  40e4e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e4ea:	898b      	ldrh	r3, [r1, #12]
  40e4ec:	b083      	sub	sp, #12
  40e4ee:	460c      	mov	r4, r1
  40e4f0:	0719      	lsls	r1, r3, #28
  40e4f2:	9000      	str	r0, [sp, #0]
  40e4f4:	4616      	mov	r6, r2
  40e4f6:	d526      	bpl.n	40e546 <__sfvwrite_r+0x66>
  40e4f8:	6922      	ldr	r2, [r4, #16]
  40e4fa:	b322      	cbz	r2, 40e546 <__sfvwrite_r+0x66>
  40e4fc:	f013 0002 	ands.w	r0, r3, #2
  40e500:	6835      	ldr	r5, [r6, #0]
  40e502:	d02c      	beq.n	40e55e <__sfvwrite_r+0x7e>
  40e504:	f04f 0900 	mov.w	r9, #0
  40e508:	4fb0      	ldr	r7, [pc, #704]	; (40e7cc <__sfvwrite_r+0x2ec>)
  40e50a:	46c8      	mov	r8, r9
  40e50c:	46b2      	mov	sl, r6
  40e50e:	45b8      	cmp	r8, r7
  40e510:	4643      	mov	r3, r8
  40e512:	464a      	mov	r2, r9
  40e514:	bf28      	it	cs
  40e516:	463b      	movcs	r3, r7
  40e518:	9800      	ldr	r0, [sp, #0]
  40e51a:	f1b8 0f00 	cmp.w	r8, #0
  40e51e:	d050      	beq.n	40e5c2 <__sfvwrite_r+0xe2>
  40e520:	69e1      	ldr	r1, [r4, #28]
  40e522:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e524:	47b0      	blx	r6
  40e526:	2800      	cmp	r0, #0
  40e528:	dd58      	ble.n	40e5dc <__sfvwrite_r+0xfc>
  40e52a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e52e:	1a1b      	subs	r3, r3, r0
  40e530:	4481      	add	r9, r0
  40e532:	eba8 0800 	sub.w	r8, r8, r0
  40e536:	f8ca 3008 	str.w	r3, [sl, #8]
  40e53a:	2b00      	cmp	r3, #0
  40e53c:	d1e7      	bne.n	40e50e <__sfvwrite_r+0x2e>
  40e53e:	2000      	movs	r0, #0
  40e540:	b003      	add	sp, #12
  40e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e546:	4621      	mov	r1, r4
  40e548:	9800      	ldr	r0, [sp, #0]
  40e54a:	f7ff fc51 	bl	40ddf0 <__swsetup_r>
  40e54e:	2800      	cmp	r0, #0
  40e550:	f040 8133 	bne.w	40e7ba <__sfvwrite_r+0x2da>
  40e554:	89a3      	ldrh	r3, [r4, #12]
  40e556:	6835      	ldr	r5, [r6, #0]
  40e558:	f013 0002 	ands.w	r0, r3, #2
  40e55c:	d1d2      	bne.n	40e504 <__sfvwrite_r+0x24>
  40e55e:	f013 0901 	ands.w	r9, r3, #1
  40e562:	d145      	bne.n	40e5f0 <__sfvwrite_r+0x110>
  40e564:	464f      	mov	r7, r9
  40e566:	9601      	str	r6, [sp, #4]
  40e568:	b337      	cbz	r7, 40e5b8 <__sfvwrite_r+0xd8>
  40e56a:	059a      	lsls	r2, r3, #22
  40e56c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  40e570:	f140 8083 	bpl.w	40e67a <__sfvwrite_r+0x19a>
  40e574:	4547      	cmp	r7, r8
  40e576:	46c3      	mov	fp, r8
  40e578:	f0c0 80ab 	bcc.w	40e6d2 <__sfvwrite_r+0x1f2>
  40e57c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40e580:	f040 80ac 	bne.w	40e6dc <__sfvwrite_r+0x1fc>
  40e584:	6820      	ldr	r0, [r4, #0]
  40e586:	46ba      	mov	sl, r7
  40e588:	465a      	mov	r2, fp
  40e58a:	4649      	mov	r1, r9
  40e58c:	f000 fcf0 	bl	40ef70 <memmove>
  40e590:	68a2      	ldr	r2, [r4, #8]
  40e592:	6823      	ldr	r3, [r4, #0]
  40e594:	eba2 0208 	sub.w	r2, r2, r8
  40e598:	445b      	add	r3, fp
  40e59a:	60a2      	str	r2, [r4, #8]
  40e59c:	6023      	str	r3, [r4, #0]
  40e59e:	9a01      	ldr	r2, [sp, #4]
  40e5a0:	6893      	ldr	r3, [r2, #8]
  40e5a2:	eba3 030a 	sub.w	r3, r3, sl
  40e5a6:	44d1      	add	r9, sl
  40e5a8:	eba7 070a 	sub.w	r7, r7, sl
  40e5ac:	6093      	str	r3, [r2, #8]
  40e5ae:	2b00      	cmp	r3, #0
  40e5b0:	d0c5      	beq.n	40e53e <__sfvwrite_r+0x5e>
  40e5b2:	89a3      	ldrh	r3, [r4, #12]
  40e5b4:	2f00      	cmp	r7, #0
  40e5b6:	d1d8      	bne.n	40e56a <__sfvwrite_r+0x8a>
  40e5b8:	f8d5 9000 	ldr.w	r9, [r5]
  40e5bc:	686f      	ldr	r7, [r5, #4]
  40e5be:	3508      	adds	r5, #8
  40e5c0:	e7d2      	b.n	40e568 <__sfvwrite_r+0x88>
  40e5c2:	f8d5 9000 	ldr.w	r9, [r5]
  40e5c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40e5ca:	3508      	adds	r5, #8
  40e5cc:	e79f      	b.n	40e50e <__sfvwrite_r+0x2e>
  40e5ce:	2000      	movs	r0, #0
  40e5d0:	4770      	bx	lr
  40e5d2:	4621      	mov	r1, r4
  40e5d4:	9800      	ldr	r0, [sp, #0]
  40e5d6:	f7ff fd1f 	bl	40e018 <_fflush_r>
  40e5da:	b370      	cbz	r0, 40e63a <__sfvwrite_r+0x15a>
  40e5dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40e5e4:	f04f 30ff 	mov.w	r0, #4294967295
  40e5e8:	81a3      	strh	r3, [r4, #12]
  40e5ea:	b003      	add	sp, #12
  40e5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e5f0:	4681      	mov	r9, r0
  40e5f2:	4633      	mov	r3, r6
  40e5f4:	464e      	mov	r6, r9
  40e5f6:	46a8      	mov	r8, r5
  40e5f8:	469a      	mov	sl, r3
  40e5fa:	464d      	mov	r5, r9
  40e5fc:	b34e      	cbz	r6, 40e652 <__sfvwrite_r+0x172>
  40e5fe:	b380      	cbz	r0, 40e662 <__sfvwrite_r+0x182>
  40e600:	6820      	ldr	r0, [r4, #0]
  40e602:	6923      	ldr	r3, [r4, #16]
  40e604:	6962      	ldr	r2, [r4, #20]
  40e606:	45b1      	cmp	r9, r6
  40e608:	46cb      	mov	fp, r9
  40e60a:	bf28      	it	cs
  40e60c:	46b3      	movcs	fp, r6
  40e60e:	4298      	cmp	r0, r3
  40e610:	465f      	mov	r7, fp
  40e612:	d904      	bls.n	40e61e <__sfvwrite_r+0x13e>
  40e614:	68a3      	ldr	r3, [r4, #8]
  40e616:	4413      	add	r3, r2
  40e618:	459b      	cmp	fp, r3
  40e61a:	f300 80a6 	bgt.w	40e76a <__sfvwrite_r+0x28a>
  40e61e:	4593      	cmp	fp, r2
  40e620:	db4b      	blt.n	40e6ba <__sfvwrite_r+0x1da>
  40e622:	4613      	mov	r3, r2
  40e624:	6a67      	ldr	r7, [r4, #36]	; 0x24
  40e626:	69e1      	ldr	r1, [r4, #28]
  40e628:	9800      	ldr	r0, [sp, #0]
  40e62a:	462a      	mov	r2, r5
  40e62c:	47b8      	blx	r7
  40e62e:	1e07      	subs	r7, r0, #0
  40e630:	ddd4      	ble.n	40e5dc <__sfvwrite_r+0xfc>
  40e632:	ebb9 0907 	subs.w	r9, r9, r7
  40e636:	d0cc      	beq.n	40e5d2 <__sfvwrite_r+0xf2>
  40e638:	2001      	movs	r0, #1
  40e63a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40e63e:	1bdb      	subs	r3, r3, r7
  40e640:	443d      	add	r5, r7
  40e642:	1bf6      	subs	r6, r6, r7
  40e644:	f8ca 3008 	str.w	r3, [sl, #8]
  40e648:	2b00      	cmp	r3, #0
  40e64a:	f43f af78 	beq.w	40e53e <__sfvwrite_r+0x5e>
  40e64e:	2e00      	cmp	r6, #0
  40e650:	d1d5      	bne.n	40e5fe <__sfvwrite_r+0x11e>
  40e652:	f108 0308 	add.w	r3, r8, #8
  40e656:	e913 0060 	ldmdb	r3, {r5, r6}
  40e65a:	4698      	mov	r8, r3
  40e65c:	3308      	adds	r3, #8
  40e65e:	2e00      	cmp	r6, #0
  40e660:	d0f9      	beq.n	40e656 <__sfvwrite_r+0x176>
  40e662:	4632      	mov	r2, r6
  40e664:	210a      	movs	r1, #10
  40e666:	4628      	mov	r0, r5
  40e668:	f000 fc32 	bl	40eed0 <memchr>
  40e66c:	2800      	cmp	r0, #0
  40e66e:	f000 80a1 	beq.w	40e7b4 <__sfvwrite_r+0x2d4>
  40e672:	3001      	adds	r0, #1
  40e674:	eba0 0905 	sub.w	r9, r0, r5
  40e678:	e7c2      	b.n	40e600 <__sfvwrite_r+0x120>
  40e67a:	6820      	ldr	r0, [r4, #0]
  40e67c:	6923      	ldr	r3, [r4, #16]
  40e67e:	4298      	cmp	r0, r3
  40e680:	d802      	bhi.n	40e688 <__sfvwrite_r+0x1a8>
  40e682:	6963      	ldr	r3, [r4, #20]
  40e684:	429f      	cmp	r7, r3
  40e686:	d25d      	bcs.n	40e744 <__sfvwrite_r+0x264>
  40e688:	45b8      	cmp	r8, r7
  40e68a:	bf28      	it	cs
  40e68c:	46b8      	movcs	r8, r7
  40e68e:	4642      	mov	r2, r8
  40e690:	4649      	mov	r1, r9
  40e692:	f000 fc6d 	bl	40ef70 <memmove>
  40e696:	68a3      	ldr	r3, [r4, #8]
  40e698:	6822      	ldr	r2, [r4, #0]
  40e69a:	eba3 0308 	sub.w	r3, r3, r8
  40e69e:	4442      	add	r2, r8
  40e6a0:	60a3      	str	r3, [r4, #8]
  40e6a2:	6022      	str	r2, [r4, #0]
  40e6a4:	b10b      	cbz	r3, 40e6aa <__sfvwrite_r+0x1ca>
  40e6a6:	46c2      	mov	sl, r8
  40e6a8:	e779      	b.n	40e59e <__sfvwrite_r+0xbe>
  40e6aa:	4621      	mov	r1, r4
  40e6ac:	9800      	ldr	r0, [sp, #0]
  40e6ae:	f7ff fcb3 	bl	40e018 <_fflush_r>
  40e6b2:	2800      	cmp	r0, #0
  40e6b4:	d192      	bne.n	40e5dc <__sfvwrite_r+0xfc>
  40e6b6:	46c2      	mov	sl, r8
  40e6b8:	e771      	b.n	40e59e <__sfvwrite_r+0xbe>
  40e6ba:	465a      	mov	r2, fp
  40e6bc:	4629      	mov	r1, r5
  40e6be:	f000 fc57 	bl	40ef70 <memmove>
  40e6c2:	68a2      	ldr	r2, [r4, #8]
  40e6c4:	6823      	ldr	r3, [r4, #0]
  40e6c6:	eba2 020b 	sub.w	r2, r2, fp
  40e6ca:	445b      	add	r3, fp
  40e6cc:	60a2      	str	r2, [r4, #8]
  40e6ce:	6023      	str	r3, [r4, #0]
  40e6d0:	e7af      	b.n	40e632 <__sfvwrite_r+0x152>
  40e6d2:	6820      	ldr	r0, [r4, #0]
  40e6d4:	46b8      	mov	r8, r7
  40e6d6:	46ba      	mov	sl, r7
  40e6d8:	46bb      	mov	fp, r7
  40e6da:	e755      	b.n	40e588 <__sfvwrite_r+0xa8>
  40e6dc:	6962      	ldr	r2, [r4, #20]
  40e6de:	6820      	ldr	r0, [r4, #0]
  40e6e0:	6921      	ldr	r1, [r4, #16]
  40e6e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  40e6e6:	eba0 0a01 	sub.w	sl, r0, r1
  40e6ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40e6ee:	f10a 0001 	add.w	r0, sl, #1
  40e6f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  40e6f6:	4438      	add	r0, r7
  40e6f8:	4540      	cmp	r0, r8
  40e6fa:	4642      	mov	r2, r8
  40e6fc:	bf84      	itt	hi
  40e6fe:	4680      	movhi	r8, r0
  40e700:	4642      	movhi	r2, r8
  40e702:	055b      	lsls	r3, r3, #21
  40e704:	d544      	bpl.n	40e790 <__sfvwrite_r+0x2b0>
  40e706:	4611      	mov	r1, r2
  40e708:	9800      	ldr	r0, [sp, #0]
  40e70a:	f000 f919 	bl	40e940 <_malloc_r>
  40e70e:	4683      	mov	fp, r0
  40e710:	2800      	cmp	r0, #0
  40e712:	d055      	beq.n	40e7c0 <__sfvwrite_r+0x2e0>
  40e714:	4652      	mov	r2, sl
  40e716:	6921      	ldr	r1, [r4, #16]
  40e718:	f7fe fb2e 	bl	40cd78 <memcpy>
  40e71c:	89a3      	ldrh	r3, [r4, #12]
  40e71e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40e722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e726:	81a3      	strh	r3, [r4, #12]
  40e728:	eb0b 000a 	add.w	r0, fp, sl
  40e72c:	eba8 030a 	sub.w	r3, r8, sl
  40e730:	f8c4 b010 	str.w	fp, [r4, #16]
  40e734:	f8c4 8014 	str.w	r8, [r4, #20]
  40e738:	6020      	str	r0, [r4, #0]
  40e73a:	60a3      	str	r3, [r4, #8]
  40e73c:	46b8      	mov	r8, r7
  40e73e:	46ba      	mov	sl, r7
  40e740:	46bb      	mov	fp, r7
  40e742:	e721      	b.n	40e588 <__sfvwrite_r+0xa8>
  40e744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  40e748:	42b9      	cmp	r1, r7
  40e74a:	bf28      	it	cs
  40e74c:	4639      	movcs	r1, r7
  40e74e:	464a      	mov	r2, r9
  40e750:	fb91 f1f3 	sdiv	r1, r1, r3
  40e754:	9800      	ldr	r0, [sp, #0]
  40e756:	6a66      	ldr	r6, [r4, #36]	; 0x24
  40e758:	fb03 f301 	mul.w	r3, r3, r1
  40e75c:	69e1      	ldr	r1, [r4, #28]
  40e75e:	47b0      	blx	r6
  40e760:	f1b0 0a00 	subs.w	sl, r0, #0
  40e764:	f73f af1b 	bgt.w	40e59e <__sfvwrite_r+0xbe>
  40e768:	e738      	b.n	40e5dc <__sfvwrite_r+0xfc>
  40e76a:	461a      	mov	r2, r3
  40e76c:	4629      	mov	r1, r5
  40e76e:	9301      	str	r3, [sp, #4]
  40e770:	f000 fbfe 	bl	40ef70 <memmove>
  40e774:	6822      	ldr	r2, [r4, #0]
  40e776:	9b01      	ldr	r3, [sp, #4]
  40e778:	9800      	ldr	r0, [sp, #0]
  40e77a:	441a      	add	r2, r3
  40e77c:	6022      	str	r2, [r4, #0]
  40e77e:	4621      	mov	r1, r4
  40e780:	f7ff fc4a 	bl	40e018 <_fflush_r>
  40e784:	9b01      	ldr	r3, [sp, #4]
  40e786:	2800      	cmp	r0, #0
  40e788:	f47f af28 	bne.w	40e5dc <__sfvwrite_r+0xfc>
  40e78c:	461f      	mov	r7, r3
  40e78e:	e750      	b.n	40e632 <__sfvwrite_r+0x152>
  40e790:	9800      	ldr	r0, [sp, #0]
  40e792:	f000 fc5d 	bl	40f050 <_realloc_r>
  40e796:	4683      	mov	fp, r0
  40e798:	2800      	cmp	r0, #0
  40e79a:	d1c5      	bne.n	40e728 <__sfvwrite_r+0x248>
  40e79c:	9d00      	ldr	r5, [sp, #0]
  40e79e:	6921      	ldr	r1, [r4, #16]
  40e7a0:	4628      	mov	r0, r5
  40e7a2:	f7ff fdb7 	bl	40e314 <_free_r>
  40e7a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e7aa:	220c      	movs	r2, #12
  40e7ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40e7b0:	602a      	str	r2, [r5, #0]
  40e7b2:	e715      	b.n	40e5e0 <__sfvwrite_r+0x100>
  40e7b4:	f106 0901 	add.w	r9, r6, #1
  40e7b8:	e722      	b.n	40e600 <__sfvwrite_r+0x120>
  40e7ba:	f04f 30ff 	mov.w	r0, #4294967295
  40e7be:	e6bf      	b.n	40e540 <__sfvwrite_r+0x60>
  40e7c0:	9a00      	ldr	r2, [sp, #0]
  40e7c2:	230c      	movs	r3, #12
  40e7c4:	6013      	str	r3, [r2, #0]
  40e7c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e7ca:	e709      	b.n	40e5e0 <__sfvwrite_r+0x100>
  40e7cc:	7ffffc00 	.word	0x7ffffc00

0040e7d0 <_fwalk_reent>:
  40e7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40e7d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  40e7d8:	d01f      	beq.n	40e81a <_fwalk_reent+0x4a>
  40e7da:	4688      	mov	r8, r1
  40e7dc:	4606      	mov	r6, r0
  40e7de:	f04f 0900 	mov.w	r9, #0
  40e7e2:	687d      	ldr	r5, [r7, #4]
  40e7e4:	68bc      	ldr	r4, [r7, #8]
  40e7e6:	3d01      	subs	r5, #1
  40e7e8:	d411      	bmi.n	40e80e <_fwalk_reent+0x3e>
  40e7ea:	89a3      	ldrh	r3, [r4, #12]
  40e7ec:	2b01      	cmp	r3, #1
  40e7ee:	f105 35ff 	add.w	r5, r5, #4294967295
  40e7f2:	d908      	bls.n	40e806 <_fwalk_reent+0x36>
  40e7f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  40e7f8:	3301      	adds	r3, #1
  40e7fa:	4621      	mov	r1, r4
  40e7fc:	4630      	mov	r0, r6
  40e7fe:	d002      	beq.n	40e806 <_fwalk_reent+0x36>
  40e800:	47c0      	blx	r8
  40e802:	ea49 0900 	orr.w	r9, r9, r0
  40e806:	1c6b      	adds	r3, r5, #1
  40e808:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40e80c:	d1ed      	bne.n	40e7ea <_fwalk_reent+0x1a>
  40e80e:	683f      	ldr	r7, [r7, #0]
  40e810:	2f00      	cmp	r7, #0
  40e812:	d1e6      	bne.n	40e7e2 <_fwalk_reent+0x12>
  40e814:	4648      	mov	r0, r9
  40e816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e81a:	46b9      	mov	r9, r7
  40e81c:	4648      	mov	r0, r9
  40e81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40e822:	bf00      	nop

0040e824 <__locale_mb_cur_max>:
  40e824:	4b04      	ldr	r3, [pc, #16]	; (40e838 <__locale_mb_cur_max+0x14>)
  40e826:	4a05      	ldr	r2, [pc, #20]	; (40e83c <__locale_mb_cur_max+0x18>)
  40e828:	681b      	ldr	r3, [r3, #0]
  40e82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40e82c:	2b00      	cmp	r3, #0
  40e82e:	bf08      	it	eq
  40e830:	4613      	moveq	r3, r2
  40e832:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  40e836:	4770      	bx	lr
  40e838:	2040006c 	.word	0x2040006c
  40e83c:	2040049c 	.word	0x2040049c

0040e840 <__retarget_lock_init_recursive>:
  40e840:	4770      	bx	lr
  40e842:	bf00      	nop

0040e844 <__retarget_lock_close_recursive>:
  40e844:	4770      	bx	lr
  40e846:	bf00      	nop

0040e848 <__retarget_lock_acquire_recursive>:
  40e848:	4770      	bx	lr
  40e84a:	bf00      	nop

0040e84c <__retarget_lock_release_recursive>:
  40e84c:	4770      	bx	lr
  40e84e:	bf00      	nop

0040e850 <__swhatbuf_r>:
  40e850:	b570      	push	{r4, r5, r6, lr}
  40e852:	460c      	mov	r4, r1
  40e854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40e858:	2900      	cmp	r1, #0
  40e85a:	b090      	sub	sp, #64	; 0x40
  40e85c:	4615      	mov	r5, r2
  40e85e:	461e      	mov	r6, r3
  40e860:	db14      	blt.n	40e88c <__swhatbuf_r+0x3c>
  40e862:	aa01      	add	r2, sp, #4
  40e864:	f000 ff6c 	bl	40f740 <_fstat_r>
  40e868:	2800      	cmp	r0, #0
  40e86a:	db0f      	blt.n	40e88c <__swhatbuf_r+0x3c>
  40e86c:	9a02      	ldr	r2, [sp, #8]
  40e86e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  40e872:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  40e876:	fab2 f282 	clz	r2, r2
  40e87a:	0952      	lsrs	r2, r2, #5
  40e87c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e880:	f44f 6000 	mov.w	r0, #2048	; 0x800
  40e884:	6032      	str	r2, [r6, #0]
  40e886:	602b      	str	r3, [r5, #0]
  40e888:	b010      	add	sp, #64	; 0x40
  40e88a:	bd70      	pop	{r4, r5, r6, pc}
  40e88c:	89a2      	ldrh	r2, [r4, #12]
  40e88e:	2300      	movs	r3, #0
  40e890:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40e894:	6033      	str	r3, [r6, #0]
  40e896:	d004      	beq.n	40e8a2 <__swhatbuf_r+0x52>
  40e898:	2240      	movs	r2, #64	; 0x40
  40e89a:	4618      	mov	r0, r3
  40e89c:	602a      	str	r2, [r5, #0]
  40e89e:	b010      	add	sp, #64	; 0x40
  40e8a0:	bd70      	pop	{r4, r5, r6, pc}
  40e8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40e8a6:	602b      	str	r3, [r5, #0]
  40e8a8:	b010      	add	sp, #64	; 0x40
  40e8aa:	bd70      	pop	{r4, r5, r6, pc}

0040e8ac <__smakebuf_r>:
  40e8ac:	898a      	ldrh	r2, [r1, #12]
  40e8ae:	0792      	lsls	r2, r2, #30
  40e8b0:	460b      	mov	r3, r1
  40e8b2:	d506      	bpl.n	40e8c2 <__smakebuf_r+0x16>
  40e8b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  40e8b8:	2101      	movs	r1, #1
  40e8ba:	601a      	str	r2, [r3, #0]
  40e8bc:	611a      	str	r2, [r3, #16]
  40e8be:	6159      	str	r1, [r3, #20]
  40e8c0:	4770      	bx	lr
  40e8c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  40e8c4:	b083      	sub	sp, #12
  40e8c6:	ab01      	add	r3, sp, #4
  40e8c8:	466a      	mov	r2, sp
  40e8ca:	460c      	mov	r4, r1
  40e8cc:	4606      	mov	r6, r0
  40e8ce:	f7ff ffbf 	bl	40e850 <__swhatbuf_r>
  40e8d2:	9900      	ldr	r1, [sp, #0]
  40e8d4:	4605      	mov	r5, r0
  40e8d6:	4630      	mov	r0, r6
  40e8d8:	f000 f832 	bl	40e940 <_malloc_r>
  40e8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e8e0:	b1d8      	cbz	r0, 40e91a <__smakebuf_r+0x6e>
  40e8e2:	9a01      	ldr	r2, [sp, #4]
  40e8e4:	4f15      	ldr	r7, [pc, #84]	; (40e93c <__smakebuf_r+0x90>)
  40e8e6:	9900      	ldr	r1, [sp, #0]
  40e8e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  40e8ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40e8ee:	81a3      	strh	r3, [r4, #12]
  40e8f0:	6020      	str	r0, [r4, #0]
  40e8f2:	6120      	str	r0, [r4, #16]
  40e8f4:	6161      	str	r1, [r4, #20]
  40e8f6:	b91a      	cbnz	r2, 40e900 <__smakebuf_r+0x54>
  40e8f8:	432b      	orrs	r3, r5
  40e8fa:	81a3      	strh	r3, [r4, #12]
  40e8fc:	b003      	add	sp, #12
  40e8fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40e900:	4630      	mov	r0, r6
  40e902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40e906:	f000 ff2f 	bl	40f768 <_isatty_r>
  40e90a:	b1a0      	cbz	r0, 40e936 <__smakebuf_r+0x8a>
  40e90c:	89a3      	ldrh	r3, [r4, #12]
  40e90e:	f023 0303 	bic.w	r3, r3, #3
  40e912:	f043 0301 	orr.w	r3, r3, #1
  40e916:	b21b      	sxth	r3, r3
  40e918:	e7ee      	b.n	40e8f8 <__smakebuf_r+0x4c>
  40e91a:	059a      	lsls	r2, r3, #22
  40e91c:	d4ee      	bmi.n	40e8fc <__smakebuf_r+0x50>
  40e91e:	f023 0303 	bic.w	r3, r3, #3
  40e922:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40e926:	f043 0302 	orr.w	r3, r3, #2
  40e92a:	2101      	movs	r1, #1
  40e92c:	81a3      	strh	r3, [r4, #12]
  40e92e:	6022      	str	r2, [r4, #0]
  40e930:	6122      	str	r2, [r4, #16]
  40e932:	6161      	str	r1, [r4, #20]
  40e934:	e7e2      	b.n	40e8fc <__smakebuf_r+0x50>
  40e936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40e93a:	e7dd      	b.n	40e8f8 <__smakebuf_r+0x4c>
  40e93c:	0040e06d 	.word	0x0040e06d

0040e940 <_malloc_r>:
  40e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e944:	f101 060b 	add.w	r6, r1, #11
  40e948:	2e16      	cmp	r6, #22
  40e94a:	b083      	sub	sp, #12
  40e94c:	4605      	mov	r5, r0
  40e94e:	f240 809e 	bls.w	40ea8e <_malloc_r+0x14e>
  40e952:	f036 0607 	bics.w	r6, r6, #7
  40e956:	f100 80bd 	bmi.w	40ead4 <_malloc_r+0x194>
  40e95a:	42b1      	cmp	r1, r6
  40e95c:	f200 80ba 	bhi.w	40ead4 <_malloc_r+0x194>
  40e960:	f000 fb6a 	bl	40f038 <__malloc_lock>
  40e964:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40e968:	f0c0 8293 	bcc.w	40ee92 <_malloc_r+0x552>
  40e96c:	0a73      	lsrs	r3, r6, #9
  40e96e:	f000 80b8 	beq.w	40eae2 <_malloc_r+0x1a2>
  40e972:	2b04      	cmp	r3, #4
  40e974:	f200 8179 	bhi.w	40ec6a <_malloc_r+0x32a>
  40e978:	09b3      	lsrs	r3, r6, #6
  40e97a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40e97e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  40e982:	00c3      	lsls	r3, r0, #3
  40e984:	4fbf      	ldr	r7, [pc, #764]	; (40ec84 <_malloc_r+0x344>)
  40e986:	443b      	add	r3, r7
  40e988:	f1a3 0108 	sub.w	r1, r3, #8
  40e98c:	685c      	ldr	r4, [r3, #4]
  40e98e:	42a1      	cmp	r1, r4
  40e990:	d106      	bne.n	40e9a0 <_malloc_r+0x60>
  40e992:	e00c      	b.n	40e9ae <_malloc_r+0x6e>
  40e994:	2a00      	cmp	r2, #0
  40e996:	f280 80aa 	bge.w	40eaee <_malloc_r+0x1ae>
  40e99a:	68e4      	ldr	r4, [r4, #12]
  40e99c:	42a1      	cmp	r1, r4
  40e99e:	d006      	beq.n	40e9ae <_malloc_r+0x6e>
  40e9a0:	6863      	ldr	r3, [r4, #4]
  40e9a2:	f023 0303 	bic.w	r3, r3, #3
  40e9a6:	1b9a      	subs	r2, r3, r6
  40e9a8:	2a0f      	cmp	r2, #15
  40e9aa:	ddf3      	ble.n	40e994 <_malloc_r+0x54>
  40e9ac:	4670      	mov	r0, lr
  40e9ae:	693c      	ldr	r4, [r7, #16]
  40e9b0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40ec98 <_malloc_r+0x358>
  40e9b4:	4574      	cmp	r4, lr
  40e9b6:	f000 81ab 	beq.w	40ed10 <_malloc_r+0x3d0>
  40e9ba:	6863      	ldr	r3, [r4, #4]
  40e9bc:	f023 0303 	bic.w	r3, r3, #3
  40e9c0:	1b9a      	subs	r2, r3, r6
  40e9c2:	2a0f      	cmp	r2, #15
  40e9c4:	f300 8190 	bgt.w	40ece8 <_malloc_r+0x3a8>
  40e9c8:	2a00      	cmp	r2, #0
  40e9ca:	f8c7 e014 	str.w	lr, [r7, #20]
  40e9ce:	f8c7 e010 	str.w	lr, [r7, #16]
  40e9d2:	f280 809d 	bge.w	40eb10 <_malloc_r+0x1d0>
  40e9d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40e9da:	f080 8161 	bcs.w	40eca0 <_malloc_r+0x360>
  40e9de:	08db      	lsrs	r3, r3, #3
  40e9e0:	f103 0c01 	add.w	ip, r3, #1
  40e9e4:	1099      	asrs	r1, r3, #2
  40e9e6:	687a      	ldr	r2, [r7, #4]
  40e9e8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  40e9ec:	f8c4 8008 	str.w	r8, [r4, #8]
  40e9f0:	2301      	movs	r3, #1
  40e9f2:	408b      	lsls	r3, r1
  40e9f4:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40e9f8:	4313      	orrs	r3, r2
  40e9fa:	3908      	subs	r1, #8
  40e9fc:	60e1      	str	r1, [r4, #12]
  40e9fe:	607b      	str	r3, [r7, #4]
  40ea00:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40ea04:	f8c8 400c 	str.w	r4, [r8, #12]
  40ea08:	1082      	asrs	r2, r0, #2
  40ea0a:	2401      	movs	r4, #1
  40ea0c:	4094      	lsls	r4, r2
  40ea0e:	429c      	cmp	r4, r3
  40ea10:	f200 808b 	bhi.w	40eb2a <_malloc_r+0x1ea>
  40ea14:	421c      	tst	r4, r3
  40ea16:	d106      	bne.n	40ea26 <_malloc_r+0xe6>
  40ea18:	f020 0003 	bic.w	r0, r0, #3
  40ea1c:	0064      	lsls	r4, r4, #1
  40ea1e:	421c      	tst	r4, r3
  40ea20:	f100 0004 	add.w	r0, r0, #4
  40ea24:	d0fa      	beq.n	40ea1c <_malloc_r+0xdc>
  40ea26:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40ea2a:	46cc      	mov	ip, r9
  40ea2c:	4680      	mov	r8, r0
  40ea2e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40ea32:	459c      	cmp	ip, r3
  40ea34:	d107      	bne.n	40ea46 <_malloc_r+0x106>
  40ea36:	e16d      	b.n	40ed14 <_malloc_r+0x3d4>
  40ea38:	2a00      	cmp	r2, #0
  40ea3a:	f280 817b 	bge.w	40ed34 <_malloc_r+0x3f4>
  40ea3e:	68db      	ldr	r3, [r3, #12]
  40ea40:	459c      	cmp	ip, r3
  40ea42:	f000 8167 	beq.w	40ed14 <_malloc_r+0x3d4>
  40ea46:	6859      	ldr	r1, [r3, #4]
  40ea48:	f021 0103 	bic.w	r1, r1, #3
  40ea4c:	1b8a      	subs	r2, r1, r6
  40ea4e:	2a0f      	cmp	r2, #15
  40ea50:	ddf2      	ble.n	40ea38 <_malloc_r+0xf8>
  40ea52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40ea56:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40ea5a:	9300      	str	r3, [sp, #0]
  40ea5c:	199c      	adds	r4, r3, r6
  40ea5e:	4628      	mov	r0, r5
  40ea60:	f046 0601 	orr.w	r6, r6, #1
  40ea64:	f042 0501 	orr.w	r5, r2, #1
  40ea68:	605e      	str	r6, [r3, #4]
  40ea6a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40ea6e:	f8cc 8008 	str.w	r8, [ip, #8]
  40ea72:	617c      	str	r4, [r7, #20]
  40ea74:	613c      	str	r4, [r7, #16]
  40ea76:	f8c4 e00c 	str.w	lr, [r4, #12]
  40ea7a:	f8c4 e008 	str.w	lr, [r4, #8]
  40ea7e:	6065      	str	r5, [r4, #4]
  40ea80:	505a      	str	r2, [r3, r1]
  40ea82:	f000 fadf 	bl	40f044 <__malloc_unlock>
  40ea86:	9b00      	ldr	r3, [sp, #0]
  40ea88:	f103 0408 	add.w	r4, r3, #8
  40ea8c:	e01e      	b.n	40eacc <_malloc_r+0x18c>
  40ea8e:	2910      	cmp	r1, #16
  40ea90:	d820      	bhi.n	40ead4 <_malloc_r+0x194>
  40ea92:	f000 fad1 	bl	40f038 <__malloc_lock>
  40ea96:	2610      	movs	r6, #16
  40ea98:	2318      	movs	r3, #24
  40ea9a:	2002      	movs	r0, #2
  40ea9c:	4f79      	ldr	r7, [pc, #484]	; (40ec84 <_malloc_r+0x344>)
  40ea9e:	443b      	add	r3, r7
  40eaa0:	f1a3 0208 	sub.w	r2, r3, #8
  40eaa4:	685c      	ldr	r4, [r3, #4]
  40eaa6:	4294      	cmp	r4, r2
  40eaa8:	f000 813d 	beq.w	40ed26 <_malloc_r+0x3e6>
  40eaac:	6863      	ldr	r3, [r4, #4]
  40eaae:	68e1      	ldr	r1, [r4, #12]
  40eab0:	68a6      	ldr	r6, [r4, #8]
  40eab2:	f023 0303 	bic.w	r3, r3, #3
  40eab6:	4423      	add	r3, r4
  40eab8:	4628      	mov	r0, r5
  40eaba:	685a      	ldr	r2, [r3, #4]
  40eabc:	60f1      	str	r1, [r6, #12]
  40eabe:	f042 0201 	orr.w	r2, r2, #1
  40eac2:	608e      	str	r6, [r1, #8]
  40eac4:	605a      	str	r2, [r3, #4]
  40eac6:	f000 fabd 	bl	40f044 <__malloc_unlock>
  40eaca:	3408      	adds	r4, #8
  40eacc:	4620      	mov	r0, r4
  40eace:	b003      	add	sp, #12
  40ead0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ead4:	2400      	movs	r4, #0
  40ead6:	230c      	movs	r3, #12
  40ead8:	4620      	mov	r0, r4
  40eada:	602b      	str	r3, [r5, #0]
  40eadc:	b003      	add	sp, #12
  40eade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eae2:	2040      	movs	r0, #64	; 0x40
  40eae4:	f44f 7300 	mov.w	r3, #512	; 0x200
  40eae8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  40eaec:	e74a      	b.n	40e984 <_malloc_r+0x44>
  40eaee:	4423      	add	r3, r4
  40eaf0:	68e1      	ldr	r1, [r4, #12]
  40eaf2:	685a      	ldr	r2, [r3, #4]
  40eaf4:	68a6      	ldr	r6, [r4, #8]
  40eaf6:	f042 0201 	orr.w	r2, r2, #1
  40eafa:	60f1      	str	r1, [r6, #12]
  40eafc:	4628      	mov	r0, r5
  40eafe:	608e      	str	r6, [r1, #8]
  40eb00:	605a      	str	r2, [r3, #4]
  40eb02:	f000 fa9f 	bl	40f044 <__malloc_unlock>
  40eb06:	3408      	adds	r4, #8
  40eb08:	4620      	mov	r0, r4
  40eb0a:	b003      	add	sp, #12
  40eb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb10:	4423      	add	r3, r4
  40eb12:	4628      	mov	r0, r5
  40eb14:	685a      	ldr	r2, [r3, #4]
  40eb16:	f042 0201 	orr.w	r2, r2, #1
  40eb1a:	605a      	str	r2, [r3, #4]
  40eb1c:	f000 fa92 	bl	40f044 <__malloc_unlock>
  40eb20:	3408      	adds	r4, #8
  40eb22:	4620      	mov	r0, r4
  40eb24:	b003      	add	sp, #12
  40eb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40eb2a:	68bc      	ldr	r4, [r7, #8]
  40eb2c:	6863      	ldr	r3, [r4, #4]
  40eb2e:	f023 0803 	bic.w	r8, r3, #3
  40eb32:	45b0      	cmp	r8, r6
  40eb34:	d304      	bcc.n	40eb40 <_malloc_r+0x200>
  40eb36:	eba8 0306 	sub.w	r3, r8, r6
  40eb3a:	2b0f      	cmp	r3, #15
  40eb3c:	f300 8085 	bgt.w	40ec4a <_malloc_r+0x30a>
  40eb40:	f8df 9158 	ldr.w	r9, [pc, #344]	; 40ec9c <_malloc_r+0x35c>
  40eb44:	4b50      	ldr	r3, [pc, #320]	; (40ec88 <_malloc_r+0x348>)
  40eb46:	f8d9 2000 	ldr.w	r2, [r9]
  40eb4a:	681b      	ldr	r3, [r3, #0]
  40eb4c:	3201      	adds	r2, #1
  40eb4e:	4433      	add	r3, r6
  40eb50:	eb04 0a08 	add.w	sl, r4, r8
  40eb54:	f000 8155 	beq.w	40ee02 <_malloc_r+0x4c2>
  40eb58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40eb5c:	330f      	adds	r3, #15
  40eb5e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40eb62:	f02b 0b0f 	bic.w	fp, fp, #15
  40eb66:	4659      	mov	r1, fp
  40eb68:	4628      	mov	r0, r5
  40eb6a:	f000 fc17 	bl	40f39c <_sbrk_r>
  40eb6e:	1c41      	adds	r1, r0, #1
  40eb70:	4602      	mov	r2, r0
  40eb72:	f000 80fc 	beq.w	40ed6e <_malloc_r+0x42e>
  40eb76:	4582      	cmp	sl, r0
  40eb78:	f200 80f7 	bhi.w	40ed6a <_malloc_r+0x42a>
  40eb7c:	4b43      	ldr	r3, [pc, #268]	; (40ec8c <_malloc_r+0x34c>)
  40eb7e:	6819      	ldr	r1, [r3, #0]
  40eb80:	4459      	add	r1, fp
  40eb82:	6019      	str	r1, [r3, #0]
  40eb84:	f000 814d 	beq.w	40ee22 <_malloc_r+0x4e2>
  40eb88:	f8d9 0000 	ldr.w	r0, [r9]
  40eb8c:	3001      	adds	r0, #1
  40eb8e:	bf1b      	ittet	ne
  40eb90:	eba2 0a0a 	subne.w	sl, r2, sl
  40eb94:	4451      	addne	r1, sl
  40eb96:	f8c9 2000 	streq.w	r2, [r9]
  40eb9a:	6019      	strne	r1, [r3, #0]
  40eb9c:	f012 0107 	ands.w	r1, r2, #7
  40eba0:	f000 8115 	beq.w	40edce <_malloc_r+0x48e>
  40eba4:	f1c1 0008 	rsb	r0, r1, #8
  40eba8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  40ebac:	4402      	add	r2, r0
  40ebae:	3108      	adds	r1, #8
  40ebb0:	eb02 090b 	add.w	r9, r2, fp
  40ebb4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40ebb8:	eba1 0909 	sub.w	r9, r1, r9
  40ebbc:	4649      	mov	r1, r9
  40ebbe:	4628      	mov	r0, r5
  40ebc0:	9301      	str	r3, [sp, #4]
  40ebc2:	9200      	str	r2, [sp, #0]
  40ebc4:	f000 fbea 	bl	40f39c <_sbrk_r>
  40ebc8:	1c43      	adds	r3, r0, #1
  40ebca:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40ebce:	f000 8143 	beq.w	40ee58 <_malloc_r+0x518>
  40ebd2:	1a80      	subs	r0, r0, r2
  40ebd4:	4448      	add	r0, r9
  40ebd6:	f040 0001 	orr.w	r0, r0, #1
  40ebda:	6819      	ldr	r1, [r3, #0]
  40ebdc:	60ba      	str	r2, [r7, #8]
  40ebde:	4449      	add	r1, r9
  40ebe0:	42bc      	cmp	r4, r7
  40ebe2:	6050      	str	r0, [r2, #4]
  40ebe4:	6019      	str	r1, [r3, #0]
  40ebe6:	d017      	beq.n	40ec18 <_malloc_r+0x2d8>
  40ebe8:	f1b8 0f0f 	cmp.w	r8, #15
  40ebec:	f240 80fb 	bls.w	40ede6 <_malloc_r+0x4a6>
  40ebf0:	6860      	ldr	r0, [r4, #4]
  40ebf2:	f1a8 020c 	sub.w	r2, r8, #12
  40ebf6:	f022 0207 	bic.w	r2, r2, #7
  40ebfa:	eb04 0e02 	add.w	lr, r4, r2
  40ebfe:	f000 0001 	and.w	r0, r0, #1
  40ec02:	f04f 0c05 	mov.w	ip, #5
  40ec06:	4310      	orrs	r0, r2
  40ec08:	2a0f      	cmp	r2, #15
  40ec0a:	6060      	str	r0, [r4, #4]
  40ec0c:	f8ce c004 	str.w	ip, [lr, #4]
  40ec10:	f8ce c008 	str.w	ip, [lr, #8]
  40ec14:	f200 8117 	bhi.w	40ee46 <_malloc_r+0x506>
  40ec18:	4b1d      	ldr	r3, [pc, #116]	; (40ec90 <_malloc_r+0x350>)
  40ec1a:	68bc      	ldr	r4, [r7, #8]
  40ec1c:	681a      	ldr	r2, [r3, #0]
  40ec1e:	4291      	cmp	r1, r2
  40ec20:	bf88      	it	hi
  40ec22:	6019      	strhi	r1, [r3, #0]
  40ec24:	4b1b      	ldr	r3, [pc, #108]	; (40ec94 <_malloc_r+0x354>)
  40ec26:	681a      	ldr	r2, [r3, #0]
  40ec28:	4291      	cmp	r1, r2
  40ec2a:	6862      	ldr	r2, [r4, #4]
  40ec2c:	bf88      	it	hi
  40ec2e:	6019      	strhi	r1, [r3, #0]
  40ec30:	f022 0203 	bic.w	r2, r2, #3
  40ec34:	4296      	cmp	r6, r2
  40ec36:	eba2 0306 	sub.w	r3, r2, r6
  40ec3a:	d801      	bhi.n	40ec40 <_malloc_r+0x300>
  40ec3c:	2b0f      	cmp	r3, #15
  40ec3e:	dc04      	bgt.n	40ec4a <_malloc_r+0x30a>
  40ec40:	4628      	mov	r0, r5
  40ec42:	f000 f9ff 	bl	40f044 <__malloc_unlock>
  40ec46:	2400      	movs	r4, #0
  40ec48:	e740      	b.n	40eacc <_malloc_r+0x18c>
  40ec4a:	19a2      	adds	r2, r4, r6
  40ec4c:	f043 0301 	orr.w	r3, r3, #1
  40ec50:	f046 0601 	orr.w	r6, r6, #1
  40ec54:	6066      	str	r6, [r4, #4]
  40ec56:	4628      	mov	r0, r5
  40ec58:	60ba      	str	r2, [r7, #8]
  40ec5a:	6053      	str	r3, [r2, #4]
  40ec5c:	f000 f9f2 	bl	40f044 <__malloc_unlock>
  40ec60:	3408      	adds	r4, #8
  40ec62:	4620      	mov	r0, r4
  40ec64:	b003      	add	sp, #12
  40ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ec6a:	2b14      	cmp	r3, #20
  40ec6c:	d971      	bls.n	40ed52 <_malloc_r+0x412>
  40ec6e:	2b54      	cmp	r3, #84	; 0x54
  40ec70:	f200 80a3 	bhi.w	40edba <_malloc_r+0x47a>
  40ec74:	0b33      	lsrs	r3, r6, #12
  40ec76:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40ec7a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40ec7e:	00c3      	lsls	r3, r0, #3
  40ec80:	e680      	b.n	40e984 <_malloc_r+0x44>
  40ec82:	bf00      	nop
  40ec84:	20400608 	.word	0x20400608
  40ec88:	20403928 	.word	0x20403928
  40ec8c:	204038f8 	.word	0x204038f8
  40ec90:	20403920 	.word	0x20403920
  40ec94:	20403924 	.word	0x20403924
  40ec98:	20400610 	.word	0x20400610
  40ec9c:	20400a10 	.word	0x20400a10
  40eca0:	0a5a      	lsrs	r2, r3, #9
  40eca2:	2a04      	cmp	r2, #4
  40eca4:	d95b      	bls.n	40ed5e <_malloc_r+0x41e>
  40eca6:	2a14      	cmp	r2, #20
  40eca8:	f200 80ae 	bhi.w	40ee08 <_malloc_r+0x4c8>
  40ecac:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40ecb0:	00c9      	lsls	r1, r1, #3
  40ecb2:	325b      	adds	r2, #91	; 0x5b
  40ecb4:	eb07 0c01 	add.w	ip, r7, r1
  40ecb8:	5879      	ldr	r1, [r7, r1]
  40ecba:	f1ac 0c08 	sub.w	ip, ip, #8
  40ecbe:	458c      	cmp	ip, r1
  40ecc0:	f000 8088 	beq.w	40edd4 <_malloc_r+0x494>
  40ecc4:	684a      	ldr	r2, [r1, #4]
  40ecc6:	f022 0203 	bic.w	r2, r2, #3
  40ecca:	4293      	cmp	r3, r2
  40eccc:	d273      	bcs.n	40edb6 <_malloc_r+0x476>
  40ecce:	6889      	ldr	r1, [r1, #8]
  40ecd0:	458c      	cmp	ip, r1
  40ecd2:	d1f7      	bne.n	40ecc4 <_malloc_r+0x384>
  40ecd4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40ecd8:	687b      	ldr	r3, [r7, #4]
  40ecda:	60e2      	str	r2, [r4, #12]
  40ecdc:	f8c4 c008 	str.w	ip, [r4, #8]
  40ece0:	6094      	str	r4, [r2, #8]
  40ece2:	f8cc 400c 	str.w	r4, [ip, #12]
  40ece6:	e68f      	b.n	40ea08 <_malloc_r+0xc8>
  40ece8:	19a1      	adds	r1, r4, r6
  40ecea:	f046 0c01 	orr.w	ip, r6, #1
  40ecee:	f042 0601 	orr.w	r6, r2, #1
  40ecf2:	f8c4 c004 	str.w	ip, [r4, #4]
  40ecf6:	4628      	mov	r0, r5
  40ecf8:	6179      	str	r1, [r7, #20]
  40ecfa:	6139      	str	r1, [r7, #16]
  40ecfc:	f8c1 e00c 	str.w	lr, [r1, #12]
  40ed00:	f8c1 e008 	str.w	lr, [r1, #8]
  40ed04:	604e      	str	r6, [r1, #4]
  40ed06:	50e2      	str	r2, [r4, r3]
  40ed08:	f000 f99c 	bl	40f044 <__malloc_unlock>
  40ed0c:	3408      	adds	r4, #8
  40ed0e:	e6dd      	b.n	40eacc <_malloc_r+0x18c>
  40ed10:	687b      	ldr	r3, [r7, #4]
  40ed12:	e679      	b.n	40ea08 <_malloc_r+0xc8>
  40ed14:	f108 0801 	add.w	r8, r8, #1
  40ed18:	f018 0f03 	tst.w	r8, #3
  40ed1c:	f10c 0c08 	add.w	ip, ip, #8
  40ed20:	f47f ae85 	bne.w	40ea2e <_malloc_r+0xee>
  40ed24:	e02d      	b.n	40ed82 <_malloc_r+0x442>
  40ed26:	68dc      	ldr	r4, [r3, #12]
  40ed28:	42a3      	cmp	r3, r4
  40ed2a:	bf08      	it	eq
  40ed2c:	3002      	addeq	r0, #2
  40ed2e:	f43f ae3e 	beq.w	40e9ae <_malloc_r+0x6e>
  40ed32:	e6bb      	b.n	40eaac <_malloc_r+0x16c>
  40ed34:	4419      	add	r1, r3
  40ed36:	461c      	mov	r4, r3
  40ed38:	684a      	ldr	r2, [r1, #4]
  40ed3a:	68db      	ldr	r3, [r3, #12]
  40ed3c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40ed40:	f042 0201 	orr.w	r2, r2, #1
  40ed44:	604a      	str	r2, [r1, #4]
  40ed46:	4628      	mov	r0, r5
  40ed48:	60f3      	str	r3, [r6, #12]
  40ed4a:	609e      	str	r6, [r3, #8]
  40ed4c:	f000 f97a 	bl	40f044 <__malloc_unlock>
  40ed50:	e6bc      	b.n	40eacc <_malloc_r+0x18c>
  40ed52:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40ed56:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40ed5a:	00c3      	lsls	r3, r0, #3
  40ed5c:	e612      	b.n	40e984 <_malloc_r+0x44>
  40ed5e:	099a      	lsrs	r2, r3, #6
  40ed60:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40ed64:	00c9      	lsls	r1, r1, #3
  40ed66:	3238      	adds	r2, #56	; 0x38
  40ed68:	e7a4      	b.n	40ecb4 <_malloc_r+0x374>
  40ed6a:	42bc      	cmp	r4, r7
  40ed6c:	d054      	beq.n	40ee18 <_malloc_r+0x4d8>
  40ed6e:	68bc      	ldr	r4, [r7, #8]
  40ed70:	6862      	ldr	r2, [r4, #4]
  40ed72:	f022 0203 	bic.w	r2, r2, #3
  40ed76:	e75d      	b.n	40ec34 <_malloc_r+0x2f4>
  40ed78:	f859 3908 	ldr.w	r3, [r9], #-8
  40ed7c:	4599      	cmp	r9, r3
  40ed7e:	f040 8086 	bne.w	40ee8e <_malloc_r+0x54e>
  40ed82:	f010 0f03 	tst.w	r0, #3
  40ed86:	f100 30ff 	add.w	r0, r0, #4294967295
  40ed8a:	d1f5      	bne.n	40ed78 <_malloc_r+0x438>
  40ed8c:	687b      	ldr	r3, [r7, #4]
  40ed8e:	ea23 0304 	bic.w	r3, r3, r4
  40ed92:	607b      	str	r3, [r7, #4]
  40ed94:	0064      	lsls	r4, r4, #1
  40ed96:	429c      	cmp	r4, r3
  40ed98:	f63f aec7 	bhi.w	40eb2a <_malloc_r+0x1ea>
  40ed9c:	2c00      	cmp	r4, #0
  40ed9e:	f43f aec4 	beq.w	40eb2a <_malloc_r+0x1ea>
  40eda2:	421c      	tst	r4, r3
  40eda4:	4640      	mov	r0, r8
  40eda6:	f47f ae3e 	bne.w	40ea26 <_malloc_r+0xe6>
  40edaa:	0064      	lsls	r4, r4, #1
  40edac:	421c      	tst	r4, r3
  40edae:	f100 0004 	add.w	r0, r0, #4
  40edb2:	d0fa      	beq.n	40edaa <_malloc_r+0x46a>
  40edb4:	e637      	b.n	40ea26 <_malloc_r+0xe6>
  40edb6:	468c      	mov	ip, r1
  40edb8:	e78c      	b.n	40ecd4 <_malloc_r+0x394>
  40edba:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40edbe:	d815      	bhi.n	40edec <_malloc_r+0x4ac>
  40edc0:	0bf3      	lsrs	r3, r6, #15
  40edc2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40edc6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40edca:	00c3      	lsls	r3, r0, #3
  40edcc:	e5da      	b.n	40e984 <_malloc_r+0x44>
  40edce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40edd2:	e6ed      	b.n	40ebb0 <_malloc_r+0x270>
  40edd4:	687b      	ldr	r3, [r7, #4]
  40edd6:	1092      	asrs	r2, r2, #2
  40edd8:	2101      	movs	r1, #1
  40edda:	fa01 f202 	lsl.w	r2, r1, r2
  40edde:	4313      	orrs	r3, r2
  40ede0:	607b      	str	r3, [r7, #4]
  40ede2:	4662      	mov	r2, ip
  40ede4:	e779      	b.n	40ecda <_malloc_r+0x39a>
  40ede6:	2301      	movs	r3, #1
  40ede8:	6053      	str	r3, [r2, #4]
  40edea:	e729      	b.n	40ec40 <_malloc_r+0x300>
  40edec:	f240 5254 	movw	r2, #1364	; 0x554
  40edf0:	4293      	cmp	r3, r2
  40edf2:	d822      	bhi.n	40ee3a <_malloc_r+0x4fa>
  40edf4:	0cb3      	lsrs	r3, r6, #18
  40edf6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40edfa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40edfe:	00c3      	lsls	r3, r0, #3
  40ee00:	e5c0      	b.n	40e984 <_malloc_r+0x44>
  40ee02:	f103 0b10 	add.w	fp, r3, #16
  40ee06:	e6ae      	b.n	40eb66 <_malloc_r+0x226>
  40ee08:	2a54      	cmp	r2, #84	; 0x54
  40ee0a:	d829      	bhi.n	40ee60 <_malloc_r+0x520>
  40ee0c:	0b1a      	lsrs	r2, r3, #12
  40ee0e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40ee12:	00c9      	lsls	r1, r1, #3
  40ee14:	326e      	adds	r2, #110	; 0x6e
  40ee16:	e74d      	b.n	40ecb4 <_malloc_r+0x374>
  40ee18:	4b20      	ldr	r3, [pc, #128]	; (40ee9c <_malloc_r+0x55c>)
  40ee1a:	6819      	ldr	r1, [r3, #0]
  40ee1c:	4459      	add	r1, fp
  40ee1e:	6019      	str	r1, [r3, #0]
  40ee20:	e6b2      	b.n	40eb88 <_malloc_r+0x248>
  40ee22:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40ee26:	2800      	cmp	r0, #0
  40ee28:	f47f aeae 	bne.w	40eb88 <_malloc_r+0x248>
  40ee2c:	eb08 030b 	add.w	r3, r8, fp
  40ee30:	68ba      	ldr	r2, [r7, #8]
  40ee32:	f043 0301 	orr.w	r3, r3, #1
  40ee36:	6053      	str	r3, [r2, #4]
  40ee38:	e6ee      	b.n	40ec18 <_malloc_r+0x2d8>
  40ee3a:	207f      	movs	r0, #127	; 0x7f
  40ee3c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40ee40:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40ee44:	e59e      	b.n	40e984 <_malloc_r+0x44>
  40ee46:	f104 0108 	add.w	r1, r4, #8
  40ee4a:	4628      	mov	r0, r5
  40ee4c:	9300      	str	r3, [sp, #0]
  40ee4e:	f7ff fa61 	bl	40e314 <_free_r>
  40ee52:	9b00      	ldr	r3, [sp, #0]
  40ee54:	6819      	ldr	r1, [r3, #0]
  40ee56:	e6df      	b.n	40ec18 <_malloc_r+0x2d8>
  40ee58:	2001      	movs	r0, #1
  40ee5a:	f04f 0900 	mov.w	r9, #0
  40ee5e:	e6bc      	b.n	40ebda <_malloc_r+0x29a>
  40ee60:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40ee64:	d805      	bhi.n	40ee72 <_malloc_r+0x532>
  40ee66:	0bda      	lsrs	r2, r3, #15
  40ee68:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40ee6c:	00c9      	lsls	r1, r1, #3
  40ee6e:	3277      	adds	r2, #119	; 0x77
  40ee70:	e720      	b.n	40ecb4 <_malloc_r+0x374>
  40ee72:	f240 5154 	movw	r1, #1364	; 0x554
  40ee76:	428a      	cmp	r2, r1
  40ee78:	d805      	bhi.n	40ee86 <_malloc_r+0x546>
  40ee7a:	0c9a      	lsrs	r2, r3, #18
  40ee7c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40ee80:	00c9      	lsls	r1, r1, #3
  40ee82:	327c      	adds	r2, #124	; 0x7c
  40ee84:	e716      	b.n	40ecb4 <_malloc_r+0x374>
  40ee86:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40ee8a:	227e      	movs	r2, #126	; 0x7e
  40ee8c:	e712      	b.n	40ecb4 <_malloc_r+0x374>
  40ee8e:	687b      	ldr	r3, [r7, #4]
  40ee90:	e780      	b.n	40ed94 <_malloc_r+0x454>
  40ee92:	08f0      	lsrs	r0, r6, #3
  40ee94:	f106 0308 	add.w	r3, r6, #8
  40ee98:	e600      	b.n	40ea9c <_malloc_r+0x15c>
  40ee9a:	bf00      	nop
  40ee9c:	204038f8 	.word	0x204038f8

0040eea0 <__ascii_mbtowc>:
  40eea0:	b082      	sub	sp, #8
  40eea2:	b149      	cbz	r1, 40eeb8 <__ascii_mbtowc+0x18>
  40eea4:	b15a      	cbz	r2, 40eebe <__ascii_mbtowc+0x1e>
  40eea6:	b16b      	cbz	r3, 40eec4 <__ascii_mbtowc+0x24>
  40eea8:	7813      	ldrb	r3, [r2, #0]
  40eeaa:	600b      	str	r3, [r1, #0]
  40eeac:	7812      	ldrb	r2, [r2, #0]
  40eeae:	1c10      	adds	r0, r2, #0
  40eeb0:	bf18      	it	ne
  40eeb2:	2001      	movne	r0, #1
  40eeb4:	b002      	add	sp, #8
  40eeb6:	4770      	bx	lr
  40eeb8:	a901      	add	r1, sp, #4
  40eeba:	2a00      	cmp	r2, #0
  40eebc:	d1f3      	bne.n	40eea6 <__ascii_mbtowc+0x6>
  40eebe:	4610      	mov	r0, r2
  40eec0:	b002      	add	sp, #8
  40eec2:	4770      	bx	lr
  40eec4:	f06f 0001 	mvn.w	r0, #1
  40eec8:	e7f4      	b.n	40eeb4 <__ascii_mbtowc+0x14>
  40eeca:	bf00      	nop
  40eecc:	0000      	movs	r0, r0
	...

0040eed0 <memchr>:
  40eed0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40eed4:	2a10      	cmp	r2, #16
  40eed6:	db2b      	blt.n	40ef30 <memchr+0x60>
  40eed8:	f010 0f07 	tst.w	r0, #7
  40eedc:	d008      	beq.n	40eef0 <memchr+0x20>
  40eede:	f810 3b01 	ldrb.w	r3, [r0], #1
  40eee2:	3a01      	subs	r2, #1
  40eee4:	428b      	cmp	r3, r1
  40eee6:	d02d      	beq.n	40ef44 <memchr+0x74>
  40eee8:	f010 0f07 	tst.w	r0, #7
  40eeec:	b342      	cbz	r2, 40ef40 <memchr+0x70>
  40eeee:	d1f6      	bne.n	40eede <memchr+0xe>
  40eef0:	b4f0      	push	{r4, r5, r6, r7}
  40eef2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  40eef6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40eefa:	f022 0407 	bic.w	r4, r2, #7
  40eefe:	f07f 0700 	mvns.w	r7, #0
  40ef02:	2300      	movs	r3, #0
  40ef04:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  40ef08:	3c08      	subs	r4, #8
  40ef0a:	ea85 0501 	eor.w	r5, r5, r1
  40ef0e:	ea86 0601 	eor.w	r6, r6, r1
  40ef12:	fa85 f547 	uadd8	r5, r5, r7
  40ef16:	faa3 f587 	sel	r5, r3, r7
  40ef1a:	fa86 f647 	uadd8	r6, r6, r7
  40ef1e:	faa5 f687 	sel	r6, r5, r7
  40ef22:	b98e      	cbnz	r6, 40ef48 <memchr+0x78>
  40ef24:	d1ee      	bne.n	40ef04 <memchr+0x34>
  40ef26:	bcf0      	pop	{r4, r5, r6, r7}
  40ef28:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40ef2c:	f002 0207 	and.w	r2, r2, #7
  40ef30:	b132      	cbz	r2, 40ef40 <memchr+0x70>
  40ef32:	f810 3b01 	ldrb.w	r3, [r0], #1
  40ef36:	3a01      	subs	r2, #1
  40ef38:	ea83 0301 	eor.w	r3, r3, r1
  40ef3c:	b113      	cbz	r3, 40ef44 <memchr+0x74>
  40ef3e:	d1f8      	bne.n	40ef32 <memchr+0x62>
  40ef40:	2000      	movs	r0, #0
  40ef42:	4770      	bx	lr
  40ef44:	3801      	subs	r0, #1
  40ef46:	4770      	bx	lr
  40ef48:	2d00      	cmp	r5, #0
  40ef4a:	bf06      	itte	eq
  40ef4c:	4635      	moveq	r5, r6
  40ef4e:	3803      	subeq	r0, #3
  40ef50:	3807      	subne	r0, #7
  40ef52:	f015 0f01 	tst.w	r5, #1
  40ef56:	d107      	bne.n	40ef68 <memchr+0x98>
  40ef58:	3001      	adds	r0, #1
  40ef5a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40ef5e:	bf02      	ittt	eq
  40ef60:	3001      	addeq	r0, #1
  40ef62:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  40ef66:	3001      	addeq	r0, #1
  40ef68:	bcf0      	pop	{r4, r5, r6, r7}
  40ef6a:	3801      	subs	r0, #1
  40ef6c:	4770      	bx	lr
  40ef6e:	bf00      	nop

0040ef70 <memmove>:
  40ef70:	4288      	cmp	r0, r1
  40ef72:	b5f0      	push	{r4, r5, r6, r7, lr}
  40ef74:	d90d      	bls.n	40ef92 <memmove+0x22>
  40ef76:	188b      	adds	r3, r1, r2
  40ef78:	4298      	cmp	r0, r3
  40ef7a:	d20a      	bcs.n	40ef92 <memmove+0x22>
  40ef7c:	1884      	adds	r4, r0, r2
  40ef7e:	2a00      	cmp	r2, #0
  40ef80:	d051      	beq.n	40f026 <memmove+0xb6>
  40ef82:	4622      	mov	r2, r4
  40ef84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40ef88:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40ef8c:	4299      	cmp	r1, r3
  40ef8e:	d1f9      	bne.n	40ef84 <memmove+0x14>
  40ef90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40ef92:	2a0f      	cmp	r2, #15
  40ef94:	d948      	bls.n	40f028 <memmove+0xb8>
  40ef96:	ea41 0300 	orr.w	r3, r1, r0
  40ef9a:	079b      	lsls	r3, r3, #30
  40ef9c:	d146      	bne.n	40f02c <memmove+0xbc>
  40ef9e:	f100 0410 	add.w	r4, r0, #16
  40efa2:	f101 0310 	add.w	r3, r1, #16
  40efa6:	4615      	mov	r5, r2
  40efa8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40efac:	f844 6c10 	str.w	r6, [r4, #-16]
  40efb0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  40efb4:	f844 6c0c 	str.w	r6, [r4, #-12]
  40efb8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40efbc:	f844 6c08 	str.w	r6, [r4, #-8]
  40efc0:	3d10      	subs	r5, #16
  40efc2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40efc6:	f844 6c04 	str.w	r6, [r4, #-4]
  40efca:	2d0f      	cmp	r5, #15
  40efcc:	f103 0310 	add.w	r3, r3, #16
  40efd0:	f104 0410 	add.w	r4, r4, #16
  40efd4:	d8e8      	bhi.n	40efa8 <memmove+0x38>
  40efd6:	f1a2 0310 	sub.w	r3, r2, #16
  40efda:	f023 030f 	bic.w	r3, r3, #15
  40efde:	f002 0e0f 	and.w	lr, r2, #15
  40efe2:	3310      	adds	r3, #16
  40efe4:	f1be 0f03 	cmp.w	lr, #3
  40efe8:	4419      	add	r1, r3
  40efea:	4403      	add	r3, r0
  40efec:	d921      	bls.n	40f032 <memmove+0xc2>
  40efee:	1f1e      	subs	r6, r3, #4
  40eff0:	460d      	mov	r5, r1
  40eff2:	4674      	mov	r4, lr
  40eff4:	3c04      	subs	r4, #4
  40eff6:	f855 7b04 	ldr.w	r7, [r5], #4
  40effa:	f846 7f04 	str.w	r7, [r6, #4]!
  40effe:	2c03      	cmp	r4, #3
  40f000:	d8f8      	bhi.n	40eff4 <memmove+0x84>
  40f002:	f1ae 0404 	sub.w	r4, lr, #4
  40f006:	f024 0403 	bic.w	r4, r4, #3
  40f00a:	3404      	adds	r4, #4
  40f00c:	4421      	add	r1, r4
  40f00e:	4423      	add	r3, r4
  40f010:	f002 0203 	and.w	r2, r2, #3
  40f014:	b162      	cbz	r2, 40f030 <memmove+0xc0>
  40f016:	3b01      	subs	r3, #1
  40f018:	440a      	add	r2, r1
  40f01a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40f01e:	f803 4f01 	strb.w	r4, [r3, #1]!
  40f022:	428a      	cmp	r2, r1
  40f024:	d1f9      	bne.n	40f01a <memmove+0xaa>
  40f026:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f028:	4603      	mov	r3, r0
  40f02a:	e7f3      	b.n	40f014 <memmove+0xa4>
  40f02c:	4603      	mov	r3, r0
  40f02e:	e7f2      	b.n	40f016 <memmove+0xa6>
  40f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f032:	4672      	mov	r2, lr
  40f034:	e7ee      	b.n	40f014 <memmove+0xa4>
  40f036:	bf00      	nop

0040f038 <__malloc_lock>:
  40f038:	4801      	ldr	r0, [pc, #4]	; (40f040 <__malloc_lock+0x8>)
  40f03a:	f7ff bc05 	b.w	40e848 <__retarget_lock_acquire_recursive>
  40f03e:	bf00      	nop
  40f040:	20404a04 	.word	0x20404a04

0040f044 <__malloc_unlock>:
  40f044:	4801      	ldr	r0, [pc, #4]	; (40f04c <__malloc_unlock+0x8>)
  40f046:	f7ff bc01 	b.w	40e84c <__retarget_lock_release_recursive>
  40f04a:	bf00      	nop
  40f04c:	20404a04 	.word	0x20404a04

0040f050 <_realloc_r>:
  40f050:	2900      	cmp	r1, #0
  40f052:	f000 8095 	beq.w	40f180 <_realloc_r+0x130>
  40f056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f05a:	460d      	mov	r5, r1
  40f05c:	4616      	mov	r6, r2
  40f05e:	b083      	sub	sp, #12
  40f060:	4680      	mov	r8, r0
  40f062:	f106 070b 	add.w	r7, r6, #11
  40f066:	f7ff ffe7 	bl	40f038 <__malloc_lock>
  40f06a:	f855 ec04 	ldr.w	lr, [r5, #-4]
  40f06e:	2f16      	cmp	r7, #22
  40f070:	f02e 0403 	bic.w	r4, lr, #3
  40f074:	f1a5 0908 	sub.w	r9, r5, #8
  40f078:	d83c      	bhi.n	40f0f4 <_realloc_r+0xa4>
  40f07a:	2210      	movs	r2, #16
  40f07c:	4617      	mov	r7, r2
  40f07e:	42be      	cmp	r6, r7
  40f080:	d83d      	bhi.n	40f0fe <_realloc_r+0xae>
  40f082:	4294      	cmp	r4, r2
  40f084:	da43      	bge.n	40f10e <_realloc_r+0xbe>
  40f086:	4bc4      	ldr	r3, [pc, #784]	; (40f398 <_realloc_r+0x348>)
  40f088:	6899      	ldr	r1, [r3, #8]
  40f08a:	eb09 0004 	add.w	r0, r9, r4
  40f08e:	4288      	cmp	r0, r1
  40f090:	f000 80b4 	beq.w	40f1fc <_realloc_r+0x1ac>
  40f094:	6843      	ldr	r3, [r0, #4]
  40f096:	f023 0101 	bic.w	r1, r3, #1
  40f09a:	4401      	add	r1, r0
  40f09c:	6849      	ldr	r1, [r1, #4]
  40f09e:	07c9      	lsls	r1, r1, #31
  40f0a0:	d54c      	bpl.n	40f13c <_realloc_r+0xec>
  40f0a2:	f01e 0f01 	tst.w	lr, #1
  40f0a6:	f000 809b 	beq.w	40f1e0 <_realloc_r+0x190>
  40f0aa:	4631      	mov	r1, r6
  40f0ac:	4640      	mov	r0, r8
  40f0ae:	f7ff fc47 	bl	40e940 <_malloc_r>
  40f0b2:	4606      	mov	r6, r0
  40f0b4:	2800      	cmp	r0, #0
  40f0b6:	d03a      	beq.n	40f12e <_realloc_r+0xde>
  40f0b8:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f0bc:	f023 0301 	bic.w	r3, r3, #1
  40f0c0:	444b      	add	r3, r9
  40f0c2:	f1a0 0208 	sub.w	r2, r0, #8
  40f0c6:	429a      	cmp	r2, r3
  40f0c8:	f000 8121 	beq.w	40f30e <_realloc_r+0x2be>
  40f0cc:	1f22      	subs	r2, r4, #4
  40f0ce:	2a24      	cmp	r2, #36	; 0x24
  40f0d0:	f200 8107 	bhi.w	40f2e2 <_realloc_r+0x292>
  40f0d4:	2a13      	cmp	r2, #19
  40f0d6:	f200 80db 	bhi.w	40f290 <_realloc_r+0x240>
  40f0da:	4603      	mov	r3, r0
  40f0dc:	462a      	mov	r2, r5
  40f0de:	6811      	ldr	r1, [r2, #0]
  40f0e0:	6019      	str	r1, [r3, #0]
  40f0e2:	6851      	ldr	r1, [r2, #4]
  40f0e4:	6059      	str	r1, [r3, #4]
  40f0e6:	6892      	ldr	r2, [r2, #8]
  40f0e8:	609a      	str	r2, [r3, #8]
  40f0ea:	4629      	mov	r1, r5
  40f0ec:	4640      	mov	r0, r8
  40f0ee:	f7ff f911 	bl	40e314 <_free_r>
  40f0f2:	e01c      	b.n	40f12e <_realloc_r+0xde>
  40f0f4:	f027 0707 	bic.w	r7, r7, #7
  40f0f8:	2f00      	cmp	r7, #0
  40f0fa:	463a      	mov	r2, r7
  40f0fc:	dabf      	bge.n	40f07e <_realloc_r+0x2e>
  40f0fe:	2600      	movs	r6, #0
  40f100:	230c      	movs	r3, #12
  40f102:	4630      	mov	r0, r6
  40f104:	f8c8 3000 	str.w	r3, [r8]
  40f108:	b003      	add	sp, #12
  40f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f10e:	462e      	mov	r6, r5
  40f110:	1be3      	subs	r3, r4, r7
  40f112:	2b0f      	cmp	r3, #15
  40f114:	d81e      	bhi.n	40f154 <_realloc_r+0x104>
  40f116:	f8d9 3004 	ldr.w	r3, [r9, #4]
  40f11a:	f003 0301 	and.w	r3, r3, #1
  40f11e:	4323      	orrs	r3, r4
  40f120:	444c      	add	r4, r9
  40f122:	f8c9 3004 	str.w	r3, [r9, #4]
  40f126:	6863      	ldr	r3, [r4, #4]
  40f128:	f043 0301 	orr.w	r3, r3, #1
  40f12c:	6063      	str	r3, [r4, #4]
  40f12e:	4640      	mov	r0, r8
  40f130:	f7ff ff88 	bl	40f044 <__malloc_unlock>
  40f134:	4630      	mov	r0, r6
  40f136:	b003      	add	sp, #12
  40f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f13c:	f023 0303 	bic.w	r3, r3, #3
  40f140:	18e1      	adds	r1, r4, r3
  40f142:	4291      	cmp	r1, r2
  40f144:	db1f      	blt.n	40f186 <_realloc_r+0x136>
  40f146:	68c3      	ldr	r3, [r0, #12]
  40f148:	6882      	ldr	r2, [r0, #8]
  40f14a:	462e      	mov	r6, r5
  40f14c:	60d3      	str	r3, [r2, #12]
  40f14e:	460c      	mov	r4, r1
  40f150:	609a      	str	r2, [r3, #8]
  40f152:	e7dd      	b.n	40f110 <_realloc_r+0xc0>
  40f154:	f8d9 2004 	ldr.w	r2, [r9, #4]
  40f158:	eb09 0107 	add.w	r1, r9, r7
  40f15c:	f002 0201 	and.w	r2, r2, #1
  40f160:	444c      	add	r4, r9
  40f162:	f043 0301 	orr.w	r3, r3, #1
  40f166:	4317      	orrs	r7, r2
  40f168:	f8c9 7004 	str.w	r7, [r9, #4]
  40f16c:	604b      	str	r3, [r1, #4]
  40f16e:	6863      	ldr	r3, [r4, #4]
  40f170:	f043 0301 	orr.w	r3, r3, #1
  40f174:	3108      	adds	r1, #8
  40f176:	6063      	str	r3, [r4, #4]
  40f178:	4640      	mov	r0, r8
  40f17a:	f7ff f8cb 	bl	40e314 <_free_r>
  40f17e:	e7d6      	b.n	40f12e <_realloc_r+0xde>
  40f180:	4611      	mov	r1, r2
  40f182:	f7ff bbdd 	b.w	40e940 <_malloc_r>
  40f186:	f01e 0f01 	tst.w	lr, #1
  40f18a:	d18e      	bne.n	40f0aa <_realloc_r+0x5a>
  40f18c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f190:	eba9 0a01 	sub.w	sl, r9, r1
  40f194:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f198:	f021 0103 	bic.w	r1, r1, #3
  40f19c:	440b      	add	r3, r1
  40f19e:	4423      	add	r3, r4
  40f1a0:	4293      	cmp	r3, r2
  40f1a2:	db25      	blt.n	40f1f0 <_realloc_r+0x1a0>
  40f1a4:	68c2      	ldr	r2, [r0, #12]
  40f1a6:	6881      	ldr	r1, [r0, #8]
  40f1a8:	4656      	mov	r6, sl
  40f1aa:	60ca      	str	r2, [r1, #12]
  40f1ac:	6091      	str	r1, [r2, #8]
  40f1ae:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f1b2:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f1b6:	1f22      	subs	r2, r4, #4
  40f1b8:	2a24      	cmp	r2, #36	; 0x24
  40f1ba:	60c1      	str	r1, [r0, #12]
  40f1bc:	6088      	str	r0, [r1, #8]
  40f1be:	f200 8094 	bhi.w	40f2ea <_realloc_r+0x29a>
  40f1c2:	2a13      	cmp	r2, #19
  40f1c4:	d96f      	bls.n	40f2a6 <_realloc_r+0x256>
  40f1c6:	6829      	ldr	r1, [r5, #0]
  40f1c8:	f8ca 1008 	str.w	r1, [sl, #8]
  40f1cc:	6869      	ldr	r1, [r5, #4]
  40f1ce:	f8ca 100c 	str.w	r1, [sl, #12]
  40f1d2:	2a1b      	cmp	r2, #27
  40f1d4:	f200 80a2 	bhi.w	40f31c <_realloc_r+0x2cc>
  40f1d8:	3508      	adds	r5, #8
  40f1da:	f10a 0210 	add.w	r2, sl, #16
  40f1de:	e063      	b.n	40f2a8 <_realloc_r+0x258>
  40f1e0:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40f1e4:	eba9 0a03 	sub.w	sl, r9, r3
  40f1e8:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f1ec:	f021 0103 	bic.w	r1, r1, #3
  40f1f0:	1863      	adds	r3, r4, r1
  40f1f2:	4293      	cmp	r3, r2
  40f1f4:	f6ff af59 	blt.w	40f0aa <_realloc_r+0x5a>
  40f1f8:	4656      	mov	r6, sl
  40f1fa:	e7d8      	b.n	40f1ae <_realloc_r+0x15e>
  40f1fc:	6841      	ldr	r1, [r0, #4]
  40f1fe:	f021 0b03 	bic.w	fp, r1, #3
  40f202:	44a3      	add	fp, r4
  40f204:	f107 0010 	add.w	r0, r7, #16
  40f208:	4583      	cmp	fp, r0
  40f20a:	da56      	bge.n	40f2ba <_realloc_r+0x26a>
  40f20c:	f01e 0f01 	tst.w	lr, #1
  40f210:	f47f af4b 	bne.w	40f0aa <_realloc_r+0x5a>
  40f214:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40f218:	eba9 0a01 	sub.w	sl, r9, r1
  40f21c:	f8da 1004 	ldr.w	r1, [sl, #4]
  40f220:	f021 0103 	bic.w	r1, r1, #3
  40f224:	448b      	add	fp, r1
  40f226:	4558      	cmp	r0, fp
  40f228:	dce2      	bgt.n	40f1f0 <_realloc_r+0x1a0>
  40f22a:	4656      	mov	r6, sl
  40f22c:	f8da 100c 	ldr.w	r1, [sl, #12]
  40f230:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40f234:	1f22      	subs	r2, r4, #4
  40f236:	2a24      	cmp	r2, #36	; 0x24
  40f238:	60c1      	str	r1, [r0, #12]
  40f23a:	6088      	str	r0, [r1, #8]
  40f23c:	f200 808f 	bhi.w	40f35e <_realloc_r+0x30e>
  40f240:	2a13      	cmp	r2, #19
  40f242:	f240 808a 	bls.w	40f35a <_realloc_r+0x30a>
  40f246:	6829      	ldr	r1, [r5, #0]
  40f248:	f8ca 1008 	str.w	r1, [sl, #8]
  40f24c:	6869      	ldr	r1, [r5, #4]
  40f24e:	f8ca 100c 	str.w	r1, [sl, #12]
  40f252:	2a1b      	cmp	r2, #27
  40f254:	f200 808a 	bhi.w	40f36c <_realloc_r+0x31c>
  40f258:	3508      	adds	r5, #8
  40f25a:	f10a 0210 	add.w	r2, sl, #16
  40f25e:	6829      	ldr	r1, [r5, #0]
  40f260:	6011      	str	r1, [r2, #0]
  40f262:	6869      	ldr	r1, [r5, #4]
  40f264:	6051      	str	r1, [r2, #4]
  40f266:	68a9      	ldr	r1, [r5, #8]
  40f268:	6091      	str	r1, [r2, #8]
  40f26a:	eb0a 0107 	add.w	r1, sl, r7
  40f26e:	ebab 0207 	sub.w	r2, fp, r7
  40f272:	f042 0201 	orr.w	r2, r2, #1
  40f276:	6099      	str	r1, [r3, #8]
  40f278:	604a      	str	r2, [r1, #4]
  40f27a:	f8da 3004 	ldr.w	r3, [sl, #4]
  40f27e:	f003 0301 	and.w	r3, r3, #1
  40f282:	431f      	orrs	r7, r3
  40f284:	4640      	mov	r0, r8
  40f286:	f8ca 7004 	str.w	r7, [sl, #4]
  40f28a:	f7ff fedb 	bl	40f044 <__malloc_unlock>
  40f28e:	e751      	b.n	40f134 <_realloc_r+0xe4>
  40f290:	682b      	ldr	r3, [r5, #0]
  40f292:	6003      	str	r3, [r0, #0]
  40f294:	686b      	ldr	r3, [r5, #4]
  40f296:	6043      	str	r3, [r0, #4]
  40f298:	2a1b      	cmp	r2, #27
  40f29a:	d82d      	bhi.n	40f2f8 <_realloc_r+0x2a8>
  40f29c:	f100 0308 	add.w	r3, r0, #8
  40f2a0:	f105 0208 	add.w	r2, r5, #8
  40f2a4:	e71b      	b.n	40f0de <_realloc_r+0x8e>
  40f2a6:	4632      	mov	r2, r6
  40f2a8:	6829      	ldr	r1, [r5, #0]
  40f2aa:	6011      	str	r1, [r2, #0]
  40f2ac:	6869      	ldr	r1, [r5, #4]
  40f2ae:	6051      	str	r1, [r2, #4]
  40f2b0:	68a9      	ldr	r1, [r5, #8]
  40f2b2:	6091      	str	r1, [r2, #8]
  40f2b4:	461c      	mov	r4, r3
  40f2b6:	46d1      	mov	r9, sl
  40f2b8:	e72a      	b.n	40f110 <_realloc_r+0xc0>
  40f2ba:	eb09 0107 	add.w	r1, r9, r7
  40f2be:	ebab 0b07 	sub.w	fp, fp, r7
  40f2c2:	f04b 0201 	orr.w	r2, fp, #1
  40f2c6:	6099      	str	r1, [r3, #8]
  40f2c8:	604a      	str	r2, [r1, #4]
  40f2ca:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40f2ce:	f003 0301 	and.w	r3, r3, #1
  40f2d2:	431f      	orrs	r7, r3
  40f2d4:	4640      	mov	r0, r8
  40f2d6:	f845 7c04 	str.w	r7, [r5, #-4]
  40f2da:	f7ff feb3 	bl	40f044 <__malloc_unlock>
  40f2de:	462e      	mov	r6, r5
  40f2e0:	e728      	b.n	40f134 <_realloc_r+0xe4>
  40f2e2:	4629      	mov	r1, r5
  40f2e4:	f7ff fe44 	bl	40ef70 <memmove>
  40f2e8:	e6ff      	b.n	40f0ea <_realloc_r+0x9a>
  40f2ea:	4629      	mov	r1, r5
  40f2ec:	4630      	mov	r0, r6
  40f2ee:	461c      	mov	r4, r3
  40f2f0:	46d1      	mov	r9, sl
  40f2f2:	f7ff fe3d 	bl	40ef70 <memmove>
  40f2f6:	e70b      	b.n	40f110 <_realloc_r+0xc0>
  40f2f8:	68ab      	ldr	r3, [r5, #8]
  40f2fa:	6083      	str	r3, [r0, #8]
  40f2fc:	68eb      	ldr	r3, [r5, #12]
  40f2fe:	60c3      	str	r3, [r0, #12]
  40f300:	2a24      	cmp	r2, #36	; 0x24
  40f302:	d017      	beq.n	40f334 <_realloc_r+0x2e4>
  40f304:	f100 0310 	add.w	r3, r0, #16
  40f308:	f105 0210 	add.w	r2, r5, #16
  40f30c:	e6e7      	b.n	40f0de <_realloc_r+0x8e>
  40f30e:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40f312:	f023 0303 	bic.w	r3, r3, #3
  40f316:	441c      	add	r4, r3
  40f318:	462e      	mov	r6, r5
  40f31a:	e6f9      	b.n	40f110 <_realloc_r+0xc0>
  40f31c:	68a9      	ldr	r1, [r5, #8]
  40f31e:	f8ca 1010 	str.w	r1, [sl, #16]
  40f322:	68e9      	ldr	r1, [r5, #12]
  40f324:	f8ca 1014 	str.w	r1, [sl, #20]
  40f328:	2a24      	cmp	r2, #36	; 0x24
  40f32a:	d00c      	beq.n	40f346 <_realloc_r+0x2f6>
  40f32c:	3510      	adds	r5, #16
  40f32e:	f10a 0218 	add.w	r2, sl, #24
  40f332:	e7b9      	b.n	40f2a8 <_realloc_r+0x258>
  40f334:	692b      	ldr	r3, [r5, #16]
  40f336:	6103      	str	r3, [r0, #16]
  40f338:	696b      	ldr	r3, [r5, #20]
  40f33a:	6143      	str	r3, [r0, #20]
  40f33c:	f105 0218 	add.w	r2, r5, #24
  40f340:	f100 0318 	add.w	r3, r0, #24
  40f344:	e6cb      	b.n	40f0de <_realloc_r+0x8e>
  40f346:	692a      	ldr	r2, [r5, #16]
  40f348:	f8ca 2018 	str.w	r2, [sl, #24]
  40f34c:	696a      	ldr	r2, [r5, #20]
  40f34e:	f8ca 201c 	str.w	r2, [sl, #28]
  40f352:	3518      	adds	r5, #24
  40f354:	f10a 0220 	add.w	r2, sl, #32
  40f358:	e7a6      	b.n	40f2a8 <_realloc_r+0x258>
  40f35a:	4632      	mov	r2, r6
  40f35c:	e77f      	b.n	40f25e <_realloc_r+0x20e>
  40f35e:	4629      	mov	r1, r5
  40f360:	4630      	mov	r0, r6
  40f362:	9301      	str	r3, [sp, #4]
  40f364:	f7ff fe04 	bl	40ef70 <memmove>
  40f368:	9b01      	ldr	r3, [sp, #4]
  40f36a:	e77e      	b.n	40f26a <_realloc_r+0x21a>
  40f36c:	68a9      	ldr	r1, [r5, #8]
  40f36e:	f8ca 1010 	str.w	r1, [sl, #16]
  40f372:	68e9      	ldr	r1, [r5, #12]
  40f374:	f8ca 1014 	str.w	r1, [sl, #20]
  40f378:	2a24      	cmp	r2, #36	; 0x24
  40f37a:	d003      	beq.n	40f384 <_realloc_r+0x334>
  40f37c:	3510      	adds	r5, #16
  40f37e:	f10a 0218 	add.w	r2, sl, #24
  40f382:	e76c      	b.n	40f25e <_realloc_r+0x20e>
  40f384:	692a      	ldr	r2, [r5, #16]
  40f386:	f8ca 2018 	str.w	r2, [sl, #24]
  40f38a:	696a      	ldr	r2, [r5, #20]
  40f38c:	f8ca 201c 	str.w	r2, [sl, #28]
  40f390:	3518      	adds	r5, #24
  40f392:	f10a 0220 	add.w	r2, sl, #32
  40f396:	e762      	b.n	40f25e <_realloc_r+0x20e>
  40f398:	20400608 	.word	0x20400608

0040f39c <_sbrk_r>:
  40f39c:	b538      	push	{r3, r4, r5, lr}
  40f39e:	4c07      	ldr	r4, [pc, #28]	; (40f3bc <_sbrk_r+0x20>)
  40f3a0:	2300      	movs	r3, #0
  40f3a2:	4605      	mov	r5, r0
  40f3a4:	4608      	mov	r0, r1
  40f3a6:	6023      	str	r3, [r4, #0]
  40f3a8:	f7f2 fd96 	bl	401ed8 <_sbrk>
  40f3ac:	1c43      	adds	r3, r0, #1
  40f3ae:	d000      	beq.n	40f3b2 <_sbrk_r+0x16>
  40f3b0:	bd38      	pop	{r3, r4, r5, pc}
  40f3b2:	6823      	ldr	r3, [r4, #0]
  40f3b4:	2b00      	cmp	r3, #0
  40f3b6:	d0fb      	beq.n	40f3b0 <_sbrk_r+0x14>
  40f3b8:	602b      	str	r3, [r5, #0]
  40f3ba:	bd38      	pop	{r3, r4, r5, pc}
  40f3bc:	20404a18 	.word	0x20404a18

0040f3c0 <__sread>:
  40f3c0:	b510      	push	{r4, lr}
  40f3c2:	460c      	mov	r4, r1
  40f3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f3c8:	f000 f9f6 	bl	40f7b8 <_read_r>
  40f3cc:	2800      	cmp	r0, #0
  40f3ce:	db03      	blt.n	40f3d8 <__sread+0x18>
  40f3d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40f3d2:	4403      	add	r3, r0
  40f3d4:	6523      	str	r3, [r4, #80]	; 0x50
  40f3d6:	bd10      	pop	{r4, pc}
  40f3d8:	89a3      	ldrh	r3, [r4, #12]
  40f3da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40f3de:	81a3      	strh	r3, [r4, #12]
  40f3e0:	bd10      	pop	{r4, pc}
  40f3e2:	bf00      	nop

0040f3e4 <__swrite>:
  40f3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f3e8:	4616      	mov	r6, r2
  40f3ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40f3ee:	461f      	mov	r7, r3
  40f3f0:	05d3      	lsls	r3, r2, #23
  40f3f2:	460c      	mov	r4, r1
  40f3f4:	4605      	mov	r5, r0
  40f3f6:	d507      	bpl.n	40f408 <__swrite+0x24>
  40f3f8:	2200      	movs	r2, #0
  40f3fa:	2302      	movs	r3, #2
  40f3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f400:	f000 f9c4 	bl	40f78c <_lseek_r>
  40f404:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40f40c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  40f410:	81a2      	strh	r2, [r4, #12]
  40f412:	463b      	mov	r3, r7
  40f414:	4632      	mov	r2, r6
  40f416:	4628      	mov	r0, r5
  40f418:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40f41c:	f000 b8a4 	b.w	40f568 <_write_r>

0040f420 <__sseek>:
  40f420:	b510      	push	{r4, lr}
  40f422:	460c      	mov	r4, r1
  40f424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f428:	f000 f9b0 	bl	40f78c <_lseek_r>
  40f42c:	89a3      	ldrh	r3, [r4, #12]
  40f42e:	1c42      	adds	r2, r0, #1
  40f430:	bf0e      	itee	eq
  40f432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40f436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40f43a:	6520      	strne	r0, [r4, #80]	; 0x50
  40f43c:	81a3      	strh	r3, [r4, #12]
  40f43e:	bd10      	pop	{r4, pc}

0040f440 <__sclose>:
  40f440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40f444:	f000 b908 	b.w	40f658 <_close_r>

0040f448 <__swbuf_r>:
  40f448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40f44a:	460d      	mov	r5, r1
  40f44c:	4614      	mov	r4, r2
  40f44e:	4606      	mov	r6, r0
  40f450:	b110      	cbz	r0, 40f458 <__swbuf_r+0x10>
  40f452:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f454:	2b00      	cmp	r3, #0
  40f456:	d04b      	beq.n	40f4f0 <__swbuf_r+0xa8>
  40f458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f45c:	69a3      	ldr	r3, [r4, #24]
  40f45e:	60a3      	str	r3, [r4, #8]
  40f460:	b291      	uxth	r1, r2
  40f462:	0708      	lsls	r0, r1, #28
  40f464:	d539      	bpl.n	40f4da <__swbuf_r+0x92>
  40f466:	6923      	ldr	r3, [r4, #16]
  40f468:	2b00      	cmp	r3, #0
  40f46a:	d036      	beq.n	40f4da <__swbuf_r+0x92>
  40f46c:	b2ed      	uxtb	r5, r5
  40f46e:	0489      	lsls	r1, r1, #18
  40f470:	462f      	mov	r7, r5
  40f472:	d515      	bpl.n	40f4a0 <__swbuf_r+0x58>
  40f474:	6822      	ldr	r2, [r4, #0]
  40f476:	6961      	ldr	r1, [r4, #20]
  40f478:	1ad3      	subs	r3, r2, r3
  40f47a:	428b      	cmp	r3, r1
  40f47c:	da1c      	bge.n	40f4b8 <__swbuf_r+0x70>
  40f47e:	3301      	adds	r3, #1
  40f480:	68a1      	ldr	r1, [r4, #8]
  40f482:	1c50      	adds	r0, r2, #1
  40f484:	3901      	subs	r1, #1
  40f486:	60a1      	str	r1, [r4, #8]
  40f488:	6020      	str	r0, [r4, #0]
  40f48a:	7015      	strb	r5, [r2, #0]
  40f48c:	6962      	ldr	r2, [r4, #20]
  40f48e:	429a      	cmp	r2, r3
  40f490:	d01a      	beq.n	40f4c8 <__swbuf_r+0x80>
  40f492:	89a3      	ldrh	r3, [r4, #12]
  40f494:	07db      	lsls	r3, r3, #31
  40f496:	d501      	bpl.n	40f49c <__swbuf_r+0x54>
  40f498:	2d0a      	cmp	r5, #10
  40f49a:	d015      	beq.n	40f4c8 <__swbuf_r+0x80>
  40f49c:	4638      	mov	r0, r7
  40f49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40f4a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40f4a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40f4a6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40f4aa:	81a2      	strh	r2, [r4, #12]
  40f4ac:	6822      	ldr	r2, [r4, #0]
  40f4ae:	6661      	str	r1, [r4, #100]	; 0x64
  40f4b0:	6961      	ldr	r1, [r4, #20]
  40f4b2:	1ad3      	subs	r3, r2, r3
  40f4b4:	428b      	cmp	r3, r1
  40f4b6:	dbe2      	blt.n	40f47e <__swbuf_r+0x36>
  40f4b8:	4621      	mov	r1, r4
  40f4ba:	4630      	mov	r0, r6
  40f4bc:	f7fe fdac 	bl	40e018 <_fflush_r>
  40f4c0:	b940      	cbnz	r0, 40f4d4 <__swbuf_r+0x8c>
  40f4c2:	6822      	ldr	r2, [r4, #0]
  40f4c4:	2301      	movs	r3, #1
  40f4c6:	e7db      	b.n	40f480 <__swbuf_r+0x38>
  40f4c8:	4621      	mov	r1, r4
  40f4ca:	4630      	mov	r0, r6
  40f4cc:	f7fe fda4 	bl	40e018 <_fflush_r>
  40f4d0:	2800      	cmp	r0, #0
  40f4d2:	d0e3      	beq.n	40f49c <__swbuf_r+0x54>
  40f4d4:	f04f 37ff 	mov.w	r7, #4294967295
  40f4d8:	e7e0      	b.n	40f49c <__swbuf_r+0x54>
  40f4da:	4621      	mov	r1, r4
  40f4dc:	4630      	mov	r0, r6
  40f4de:	f7fe fc87 	bl	40ddf0 <__swsetup_r>
  40f4e2:	2800      	cmp	r0, #0
  40f4e4:	d1f6      	bne.n	40f4d4 <__swbuf_r+0x8c>
  40f4e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40f4ea:	6923      	ldr	r3, [r4, #16]
  40f4ec:	b291      	uxth	r1, r2
  40f4ee:	e7bd      	b.n	40f46c <__swbuf_r+0x24>
  40f4f0:	f7fe fdea 	bl	40e0c8 <__sinit>
  40f4f4:	e7b0      	b.n	40f458 <__swbuf_r+0x10>
  40f4f6:	bf00      	nop

0040f4f8 <_wcrtomb_r>:
  40f4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  40f4fa:	4606      	mov	r6, r0
  40f4fc:	b085      	sub	sp, #20
  40f4fe:	461f      	mov	r7, r3
  40f500:	b189      	cbz	r1, 40f526 <_wcrtomb_r+0x2e>
  40f502:	4c10      	ldr	r4, [pc, #64]	; (40f544 <_wcrtomb_r+0x4c>)
  40f504:	4d10      	ldr	r5, [pc, #64]	; (40f548 <_wcrtomb_r+0x50>)
  40f506:	6824      	ldr	r4, [r4, #0]
  40f508:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40f50a:	2c00      	cmp	r4, #0
  40f50c:	bf08      	it	eq
  40f50e:	462c      	moveq	r4, r5
  40f510:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  40f514:	47a0      	blx	r4
  40f516:	1c43      	adds	r3, r0, #1
  40f518:	d103      	bne.n	40f522 <_wcrtomb_r+0x2a>
  40f51a:	2200      	movs	r2, #0
  40f51c:	238a      	movs	r3, #138	; 0x8a
  40f51e:	603a      	str	r2, [r7, #0]
  40f520:	6033      	str	r3, [r6, #0]
  40f522:	b005      	add	sp, #20
  40f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40f526:	460c      	mov	r4, r1
  40f528:	4906      	ldr	r1, [pc, #24]	; (40f544 <_wcrtomb_r+0x4c>)
  40f52a:	4a07      	ldr	r2, [pc, #28]	; (40f548 <_wcrtomb_r+0x50>)
  40f52c:	6809      	ldr	r1, [r1, #0]
  40f52e:	6b49      	ldr	r1, [r1, #52]	; 0x34
  40f530:	2900      	cmp	r1, #0
  40f532:	bf08      	it	eq
  40f534:	4611      	moveq	r1, r2
  40f536:	4622      	mov	r2, r4
  40f538:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  40f53c:	a901      	add	r1, sp, #4
  40f53e:	47a0      	blx	r4
  40f540:	e7e9      	b.n	40f516 <_wcrtomb_r+0x1e>
  40f542:	bf00      	nop
  40f544:	2040006c 	.word	0x2040006c
  40f548:	2040049c 	.word	0x2040049c

0040f54c <__ascii_wctomb>:
  40f54c:	b121      	cbz	r1, 40f558 <__ascii_wctomb+0xc>
  40f54e:	2aff      	cmp	r2, #255	; 0xff
  40f550:	d804      	bhi.n	40f55c <__ascii_wctomb+0x10>
  40f552:	700a      	strb	r2, [r1, #0]
  40f554:	2001      	movs	r0, #1
  40f556:	4770      	bx	lr
  40f558:	4608      	mov	r0, r1
  40f55a:	4770      	bx	lr
  40f55c:	238a      	movs	r3, #138	; 0x8a
  40f55e:	6003      	str	r3, [r0, #0]
  40f560:	f04f 30ff 	mov.w	r0, #4294967295
  40f564:	4770      	bx	lr
  40f566:	bf00      	nop

0040f568 <_write_r>:
  40f568:	b570      	push	{r4, r5, r6, lr}
  40f56a:	460d      	mov	r5, r1
  40f56c:	4c08      	ldr	r4, [pc, #32]	; (40f590 <_write_r+0x28>)
  40f56e:	4611      	mov	r1, r2
  40f570:	4606      	mov	r6, r0
  40f572:	461a      	mov	r2, r3
  40f574:	4628      	mov	r0, r5
  40f576:	2300      	movs	r3, #0
  40f578:	6023      	str	r3, [r4, #0]
  40f57a:	f7f1 f813 	bl	4005a4 <_write>
  40f57e:	1c43      	adds	r3, r0, #1
  40f580:	d000      	beq.n	40f584 <_write_r+0x1c>
  40f582:	bd70      	pop	{r4, r5, r6, pc}
  40f584:	6823      	ldr	r3, [r4, #0]
  40f586:	2b00      	cmp	r3, #0
  40f588:	d0fb      	beq.n	40f582 <_write_r+0x1a>
  40f58a:	6033      	str	r3, [r6, #0]
  40f58c:	bd70      	pop	{r4, r5, r6, pc}
  40f58e:	bf00      	nop
  40f590:	20404a18 	.word	0x20404a18

0040f594 <__register_exitproc>:
  40f594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40f598:	4d2c      	ldr	r5, [pc, #176]	; (40f64c <__register_exitproc+0xb8>)
  40f59a:	4606      	mov	r6, r0
  40f59c:	6828      	ldr	r0, [r5, #0]
  40f59e:	4698      	mov	r8, r3
  40f5a0:	460f      	mov	r7, r1
  40f5a2:	4691      	mov	r9, r2
  40f5a4:	f7ff f950 	bl	40e848 <__retarget_lock_acquire_recursive>
  40f5a8:	4b29      	ldr	r3, [pc, #164]	; (40f650 <__register_exitproc+0xbc>)
  40f5aa:	681c      	ldr	r4, [r3, #0]
  40f5ac:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  40f5b0:	2b00      	cmp	r3, #0
  40f5b2:	d03e      	beq.n	40f632 <__register_exitproc+0x9e>
  40f5b4:	685a      	ldr	r2, [r3, #4]
  40f5b6:	2a1f      	cmp	r2, #31
  40f5b8:	dc1c      	bgt.n	40f5f4 <__register_exitproc+0x60>
  40f5ba:	f102 0e01 	add.w	lr, r2, #1
  40f5be:	b176      	cbz	r6, 40f5de <__register_exitproc+0x4a>
  40f5c0:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  40f5c4:	2401      	movs	r4, #1
  40f5c6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40f5ca:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  40f5ce:	4094      	lsls	r4, r2
  40f5d0:	4320      	orrs	r0, r4
  40f5d2:	2e02      	cmp	r6, #2
  40f5d4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40f5d8:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  40f5dc:	d023      	beq.n	40f626 <__register_exitproc+0x92>
  40f5de:	3202      	adds	r2, #2
  40f5e0:	f8c3 e004 	str.w	lr, [r3, #4]
  40f5e4:	6828      	ldr	r0, [r5, #0]
  40f5e6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40f5ea:	f7ff f92f 	bl	40e84c <__retarget_lock_release_recursive>
  40f5ee:	2000      	movs	r0, #0
  40f5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f5f4:	4b17      	ldr	r3, [pc, #92]	; (40f654 <__register_exitproc+0xc0>)
  40f5f6:	b30b      	cbz	r3, 40f63c <__register_exitproc+0xa8>
  40f5f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  40f5fc:	f3af 8000 	nop.w
  40f600:	4603      	mov	r3, r0
  40f602:	b1d8      	cbz	r0, 40f63c <__register_exitproc+0xa8>
  40f604:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40f608:	6002      	str	r2, [r0, #0]
  40f60a:	2100      	movs	r1, #0
  40f60c:	6041      	str	r1, [r0, #4]
  40f60e:	460a      	mov	r2, r1
  40f610:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40f614:	f04f 0e01 	mov.w	lr, #1
  40f618:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  40f61c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40f620:	2e00      	cmp	r6, #0
  40f622:	d0dc      	beq.n	40f5de <__register_exitproc+0x4a>
  40f624:	e7cc      	b.n	40f5c0 <__register_exitproc+0x2c>
  40f626:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40f62a:	430c      	orrs	r4, r1
  40f62c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40f630:	e7d5      	b.n	40f5de <__register_exitproc+0x4a>
  40f632:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40f636:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40f63a:	e7bb      	b.n	40f5b4 <__register_exitproc+0x20>
  40f63c:	6828      	ldr	r0, [r5, #0]
  40f63e:	f7ff f905 	bl	40e84c <__retarget_lock_release_recursive>
  40f642:	f04f 30ff 	mov.w	r0, #4294967295
  40f646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40f64a:	bf00      	nop
  40f64c:	20400498 	.word	0x20400498
  40f650:	0040fbac 	.word	0x0040fbac
  40f654:	00000000 	.word	0x00000000

0040f658 <_close_r>:
  40f658:	b538      	push	{r3, r4, r5, lr}
  40f65a:	4c07      	ldr	r4, [pc, #28]	; (40f678 <_close_r+0x20>)
  40f65c:	2300      	movs	r3, #0
  40f65e:	4605      	mov	r5, r0
  40f660:	4608      	mov	r0, r1
  40f662:	6023      	str	r3, [r4, #0]
  40f664:	f7f2 fc64 	bl	401f30 <_close>
  40f668:	1c43      	adds	r3, r0, #1
  40f66a:	d000      	beq.n	40f66e <_close_r+0x16>
  40f66c:	bd38      	pop	{r3, r4, r5, pc}
  40f66e:	6823      	ldr	r3, [r4, #0]
  40f670:	2b00      	cmp	r3, #0
  40f672:	d0fb      	beq.n	40f66c <_close_r+0x14>
  40f674:	602b      	str	r3, [r5, #0]
  40f676:	bd38      	pop	{r3, r4, r5, pc}
  40f678:	20404a18 	.word	0x20404a18

0040f67c <_fclose_r>:
  40f67c:	b570      	push	{r4, r5, r6, lr}
  40f67e:	b159      	cbz	r1, 40f698 <_fclose_r+0x1c>
  40f680:	4605      	mov	r5, r0
  40f682:	460c      	mov	r4, r1
  40f684:	b110      	cbz	r0, 40f68c <_fclose_r+0x10>
  40f686:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40f688:	2b00      	cmp	r3, #0
  40f68a:	d03c      	beq.n	40f706 <_fclose_r+0x8a>
  40f68c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f68e:	07d8      	lsls	r0, r3, #31
  40f690:	d505      	bpl.n	40f69e <_fclose_r+0x22>
  40f692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f696:	b92b      	cbnz	r3, 40f6a4 <_fclose_r+0x28>
  40f698:	2600      	movs	r6, #0
  40f69a:	4630      	mov	r0, r6
  40f69c:	bd70      	pop	{r4, r5, r6, pc}
  40f69e:	89a3      	ldrh	r3, [r4, #12]
  40f6a0:	0599      	lsls	r1, r3, #22
  40f6a2:	d53c      	bpl.n	40f71e <_fclose_r+0xa2>
  40f6a4:	4621      	mov	r1, r4
  40f6a6:	4628      	mov	r0, r5
  40f6a8:	f7fe fc16 	bl	40ded8 <__sflush_r>
  40f6ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  40f6ae:	4606      	mov	r6, r0
  40f6b0:	b133      	cbz	r3, 40f6c0 <_fclose_r+0x44>
  40f6b2:	69e1      	ldr	r1, [r4, #28]
  40f6b4:	4628      	mov	r0, r5
  40f6b6:	4798      	blx	r3
  40f6b8:	2800      	cmp	r0, #0
  40f6ba:	bfb8      	it	lt
  40f6bc:	f04f 36ff 	movlt.w	r6, #4294967295
  40f6c0:	89a3      	ldrh	r3, [r4, #12]
  40f6c2:	061a      	lsls	r2, r3, #24
  40f6c4:	d422      	bmi.n	40f70c <_fclose_r+0x90>
  40f6c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40f6c8:	b141      	cbz	r1, 40f6dc <_fclose_r+0x60>
  40f6ca:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40f6ce:	4299      	cmp	r1, r3
  40f6d0:	d002      	beq.n	40f6d8 <_fclose_r+0x5c>
  40f6d2:	4628      	mov	r0, r5
  40f6d4:	f7fe fe1e 	bl	40e314 <_free_r>
  40f6d8:	2300      	movs	r3, #0
  40f6da:	6323      	str	r3, [r4, #48]	; 0x30
  40f6dc:	6c61      	ldr	r1, [r4, #68]	; 0x44
  40f6de:	b121      	cbz	r1, 40f6ea <_fclose_r+0x6e>
  40f6e0:	4628      	mov	r0, r5
  40f6e2:	f7fe fe17 	bl	40e314 <_free_r>
  40f6e6:	2300      	movs	r3, #0
  40f6e8:	6463      	str	r3, [r4, #68]	; 0x44
  40f6ea:	f7fe fd19 	bl	40e120 <__sfp_lock_acquire>
  40f6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40f6f0:	2200      	movs	r2, #0
  40f6f2:	07db      	lsls	r3, r3, #31
  40f6f4:	81a2      	strh	r2, [r4, #12]
  40f6f6:	d50e      	bpl.n	40f716 <_fclose_r+0x9a>
  40f6f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f6fa:	f7ff f8a3 	bl	40e844 <__retarget_lock_close_recursive>
  40f6fe:	f7fe fd15 	bl	40e12c <__sfp_lock_release>
  40f702:	4630      	mov	r0, r6
  40f704:	bd70      	pop	{r4, r5, r6, pc}
  40f706:	f7fe fcdf 	bl	40e0c8 <__sinit>
  40f70a:	e7bf      	b.n	40f68c <_fclose_r+0x10>
  40f70c:	6921      	ldr	r1, [r4, #16]
  40f70e:	4628      	mov	r0, r5
  40f710:	f7fe fe00 	bl	40e314 <_free_r>
  40f714:	e7d7      	b.n	40f6c6 <_fclose_r+0x4a>
  40f716:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f718:	f7ff f898 	bl	40e84c <__retarget_lock_release_recursive>
  40f71c:	e7ec      	b.n	40f6f8 <_fclose_r+0x7c>
  40f71e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f720:	f7ff f892 	bl	40e848 <__retarget_lock_acquire_recursive>
  40f724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40f728:	2b00      	cmp	r3, #0
  40f72a:	d1bb      	bne.n	40f6a4 <_fclose_r+0x28>
  40f72c:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40f72e:	f016 0601 	ands.w	r6, r6, #1
  40f732:	d1b1      	bne.n	40f698 <_fclose_r+0x1c>
  40f734:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40f736:	f7ff f889 	bl	40e84c <__retarget_lock_release_recursive>
  40f73a:	4630      	mov	r0, r6
  40f73c:	bd70      	pop	{r4, r5, r6, pc}
  40f73e:	bf00      	nop

0040f740 <_fstat_r>:
  40f740:	b538      	push	{r3, r4, r5, lr}
  40f742:	460b      	mov	r3, r1
  40f744:	4c07      	ldr	r4, [pc, #28]	; (40f764 <_fstat_r+0x24>)
  40f746:	4605      	mov	r5, r0
  40f748:	4611      	mov	r1, r2
  40f74a:	4618      	mov	r0, r3
  40f74c:	2300      	movs	r3, #0
  40f74e:	6023      	str	r3, [r4, #0]
  40f750:	f7f2 fbfa 	bl	401f48 <_fstat>
  40f754:	1c43      	adds	r3, r0, #1
  40f756:	d000      	beq.n	40f75a <_fstat_r+0x1a>
  40f758:	bd38      	pop	{r3, r4, r5, pc}
  40f75a:	6823      	ldr	r3, [r4, #0]
  40f75c:	2b00      	cmp	r3, #0
  40f75e:	d0fb      	beq.n	40f758 <_fstat_r+0x18>
  40f760:	602b      	str	r3, [r5, #0]
  40f762:	bd38      	pop	{r3, r4, r5, pc}
  40f764:	20404a18 	.word	0x20404a18

0040f768 <_isatty_r>:
  40f768:	b538      	push	{r3, r4, r5, lr}
  40f76a:	4c07      	ldr	r4, [pc, #28]	; (40f788 <_isatty_r+0x20>)
  40f76c:	2300      	movs	r3, #0
  40f76e:	4605      	mov	r5, r0
  40f770:	4608      	mov	r0, r1
  40f772:	6023      	str	r3, [r4, #0]
  40f774:	f7f2 fbf8 	bl	401f68 <_isatty>
  40f778:	1c43      	adds	r3, r0, #1
  40f77a:	d000      	beq.n	40f77e <_isatty_r+0x16>
  40f77c:	bd38      	pop	{r3, r4, r5, pc}
  40f77e:	6823      	ldr	r3, [r4, #0]
  40f780:	2b00      	cmp	r3, #0
  40f782:	d0fb      	beq.n	40f77c <_isatty_r+0x14>
  40f784:	602b      	str	r3, [r5, #0]
  40f786:	bd38      	pop	{r3, r4, r5, pc}
  40f788:	20404a18 	.word	0x20404a18

0040f78c <_lseek_r>:
  40f78c:	b570      	push	{r4, r5, r6, lr}
  40f78e:	460d      	mov	r5, r1
  40f790:	4c08      	ldr	r4, [pc, #32]	; (40f7b4 <_lseek_r+0x28>)
  40f792:	4611      	mov	r1, r2
  40f794:	4606      	mov	r6, r0
  40f796:	461a      	mov	r2, r3
  40f798:	4628      	mov	r0, r5
  40f79a:	2300      	movs	r3, #0
  40f79c:	6023      	str	r3, [r4, #0]
  40f79e:	f7f2 fbee 	bl	401f7e <_lseek>
  40f7a2:	1c43      	adds	r3, r0, #1
  40f7a4:	d000      	beq.n	40f7a8 <_lseek_r+0x1c>
  40f7a6:	bd70      	pop	{r4, r5, r6, pc}
  40f7a8:	6823      	ldr	r3, [r4, #0]
  40f7aa:	2b00      	cmp	r3, #0
  40f7ac:	d0fb      	beq.n	40f7a6 <_lseek_r+0x1a>
  40f7ae:	6033      	str	r3, [r6, #0]
  40f7b0:	bd70      	pop	{r4, r5, r6, pc}
  40f7b2:	bf00      	nop
  40f7b4:	20404a18 	.word	0x20404a18

0040f7b8 <_read_r>:
  40f7b8:	b570      	push	{r4, r5, r6, lr}
  40f7ba:	460d      	mov	r5, r1
  40f7bc:	4c08      	ldr	r4, [pc, #32]	; (40f7e0 <_read_r+0x28>)
  40f7be:	4611      	mov	r1, r2
  40f7c0:	4606      	mov	r6, r0
  40f7c2:	461a      	mov	r2, r3
  40f7c4:	4628      	mov	r0, r5
  40f7c6:	2300      	movs	r3, #0
  40f7c8:	6023      	str	r3, [r4, #0]
  40f7ca:	f7f0 fec1 	bl	400550 <_read>
  40f7ce:	1c43      	adds	r3, r0, #1
  40f7d0:	d000      	beq.n	40f7d4 <_read_r+0x1c>
  40f7d2:	bd70      	pop	{r4, r5, r6, pc}
  40f7d4:	6823      	ldr	r3, [r4, #0]
  40f7d6:	2b00      	cmp	r3, #0
  40f7d8:	d0fb      	beq.n	40f7d2 <_read_r+0x1a>
  40f7da:	6033      	str	r3, [r6, #0]
  40f7dc:	bd70      	pop	{r4, r5, r6, pc}
  40f7de:	bf00      	nop
  40f7e0:	20404a18 	.word	0x20404a18

0040f7e4 <__aeabi_uldivmod>:
  40f7e4:	b953      	cbnz	r3, 40f7fc <__aeabi_uldivmod+0x18>
  40f7e6:	b94a      	cbnz	r2, 40f7fc <__aeabi_uldivmod+0x18>
  40f7e8:	2900      	cmp	r1, #0
  40f7ea:	bf08      	it	eq
  40f7ec:	2800      	cmpeq	r0, #0
  40f7ee:	bf1c      	itt	ne
  40f7f0:	f04f 31ff 	movne.w	r1, #4294967295
  40f7f4:	f04f 30ff 	movne.w	r0, #4294967295
  40f7f8:	f000 b97a 	b.w	40faf0 <__aeabi_idiv0>
  40f7fc:	f1ad 0c08 	sub.w	ip, sp, #8
  40f800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40f804:	f000 f806 	bl	40f814 <__udivmoddi4>
  40f808:	f8dd e004 	ldr.w	lr, [sp, #4]
  40f80c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40f810:	b004      	add	sp, #16
  40f812:	4770      	bx	lr

0040f814 <__udivmoddi4>:
  40f814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f818:	468c      	mov	ip, r1
  40f81a:	460d      	mov	r5, r1
  40f81c:	4604      	mov	r4, r0
  40f81e:	9e08      	ldr	r6, [sp, #32]
  40f820:	2b00      	cmp	r3, #0
  40f822:	d151      	bne.n	40f8c8 <__udivmoddi4+0xb4>
  40f824:	428a      	cmp	r2, r1
  40f826:	4617      	mov	r7, r2
  40f828:	d96d      	bls.n	40f906 <__udivmoddi4+0xf2>
  40f82a:	fab2 fe82 	clz	lr, r2
  40f82e:	f1be 0f00 	cmp.w	lr, #0
  40f832:	d00b      	beq.n	40f84c <__udivmoddi4+0x38>
  40f834:	f1ce 0c20 	rsb	ip, lr, #32
  40f838:	fa01 f50e 	lsl.w	r5, r1, lr
  40f83c:	fa20 fc0c 	lsr.w	ip, r0, ip
  40f840:	fa02 f70e 	lsl.w	r7, r2, lr
  40f844:	ea4c 0c05 	orr.w	ip, ip, r5
  40f848:	fa00 f40e 	lsl.w	r4, r0, lr
  40f84c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40f850:	0c25      	lsrs	r5, r4, #16
  40f852:	fbbc f8fa 	udiv	r8, ip, sl
  40f856:	fa1f f987 	uxth.w	r9, r7
  40f85a:	fb0a cc18 	mls	ip, sl, r8, ip
  40f85e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40f862:	fb08 f309 	mul.w	r3, r8, r9
  40f866:	42ab      	cmp	r3, r5
  40f868:	d90a      	bls.n	40f880 <__udivmoddi4+0x6c>
  40f86a:	19ed      	adds	r5, r5, r7
  40f86c:	f108 32ff 	add.w	r2, r8, #4294967295
  40f870:	f080 8123 	bcs.w	40faba <__udivmoddi4+0x2a6>
  40f874:	42ab      	cmp	r3, r5
  40f876:	f240 8120 	bls.w	40faba <__udivmoddi4+0x2a6>
  40f87a:	f1a8 0802 	sub.w	r8, r8, #2
  40f87e:	443d      	add	r5, r7
  40f880:	1aed      	subs	r5, r5, r3
  40f882:	b2a4      	uxth	r4, r4
  40f884:	fbb5 f0fa 	udiv	r0, r5, sl
  40f888:	fb0a 5510 	mls	r5, sl, r0, r5
  40f88c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  40f890:	fb00 f909 	mul.w	r9, r0, r9
  40f894:	45a1      	cmp	r9, r4
  40f896:	d909      	bls.n	40f8ac <__udivmoddi4+0x98>
  40f898:	19e4      	adds	r4, r4, r7
  40f89a:	f100 33ff 	add.w	r3, r0, #4294967295
  40f89e:	f080 810a 	bcs.w	40fab6 <__udivmoddi4+0x2a2>
  40f8a2:	45a1      	cmp	r9, r4
  40f8a4:	f240 8107 	bls.w	40fab6 <__udivmoddi4+0x2a2>
  40f8a8:	3802      	subs	r0, #2
  40f8aa:	443c      	add	r4, r7
  40f8ac:	eba4 0409 	sub.w	r4, r4, r9
  40f8b0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f8b4:	2100      	movs	r1, #0
  40f8b6:	2e00      	cmp	r6, #0
  40f8b8:	d061      	beq.n	40f97e <__udivmoddi4+0x16a>
  40f8ba:	fa24 f40e 	lsr.w	r4, r4, lr
  40f8be:	2300      	movs	r3, #0
  40f8c0:	6034      	str	r4, [r6, #0]
  40f8c2:	6073      	str	r3, [r6, #4]
  40f8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f8c8:	428b      	cmp	r3, r1
  40f8ca:	d907      	bls.n	40f8dc <__udivmoddi4+0xc8>
  40f8cc:	2e00      	cmp	r6, #0
  40f8ce:	d054      	beq.n	40f97a <__udivmoddi4+0x166>
  40f8d0:	2100      	movs	r1, #0
  40f8d2:	e886 0021 	stmia.w	r6, {r0, r5}
  40f8d6:	4608      	mov	r0, r1
  40f8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f8dc:	fab3 f183 	clz	r1, r3
  40f8e0:	2900      	cmp	r1, #0
  40f8e2:	f040 808e 	bne.w	40fa02 <__udivmoddi4+0x1ee>
  40f8e6:	42ab      	cmp	r3, r5
  40f8e8:	d302      	bcc.n	40f8f0 <__udivmoddi4+0xdc>
  40f8ea:	4282      	cmp	r2, r0
  40f8ec:	f200 80fa 	bhi.w	40fae4 <__udivmoddi4+0x2d0>
  40f8f0:	1a84      	subs	r4, r0, r2
  40f8f2:	eb65 0503 	sbc.w	r5, r5, r3
  40f8f6:	2001      	movs	r0, #1
  40f8f8:	46ac      	mov	ip, r5
  40f8fa:	2e00      	cmp	r6, #0
  40f8fc:	d03f      	beq.n	40f97e <__udivmoddi4+0x16a>
  40f8fe:	e886 1010 	stmia.w	r6, {r4, ip}
  40f902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f906:	b912      	cbnz	r2, 40f90e <__udivmoddi4+0xfa>
  40f908:	2701      	movs	r7, #1
  40f90a:	fbb7 f7f2 	udiv	r7, r7, r2
  40f90e:	fab7 fe87 	clz	lr, r7
  40f912:	f1be 0f00 	cmp.w	lr, #0
  40f916:	d134      	bne.n	40f982 <__udivmoddi4+0x16e>
  40f918:	1beb      	subs	r3, r5, r7
  40f91a:	0c3a      	lsrs	r2, r7, #16
  40f91c:	fa1f fc87 	uxth.w	ip, r7
  40f920:	2101      	movs	r1, #1
  40f922:	fbb3 f8f2 	udiv	r8, r3, r2
  40f926:	0c25      	lsrs	r5, r4, #16
  40f928:	fb02 3318 	mls	r3, r2, r8, r3
  40f92c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f930:	fb0c f308 	mul.w	r3, ip, r8
  40f934:	42ab      	cmp	r3, r5
  40f936:	d907      	bls.n	40f948 <__udivmoddi4+0x134>
  40f938:	19ed      	adds	r5, r5, r7
  40f93a:	f108 30ff 	add.w	r0, r8, #4294967295
  40f93e:	d202      	bcs.n	40f946 <__udivmoddi4+0x132>
  40f940:	42ab      	cmp	r3, r5
  40f942:	f200 80d1 	bhi.w	40fae8 <__udivmoddi4+0x2d4>
  40f946:	4680      	mov	r8, r0
  40f948:	1aed      	subs	r5, r5, r3
  40f94a:	b2a3      	uxth	r3, r4
  40f94c:	fbb5 f0f2 	udiv	r0, r5, r2
  40f950:	fb02 5510 	mls	r5, r2, r0, r5
  40f954:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40f958:	fb0c fc00 	mul.w	ip, ip, r0
  40f95c:	45a4      	cmp	ip, r4
  40f95e:	d907      	bls.n	40f970 <__udivmoddi4+0x15c>
  40f960:	19e4      	adds	r4, r4, r7
  40f962:	f100 33ff 	add.w	r3, r0, #4294967295
  40f966:	d202      	bcs.n	40f96e <__udivmoddi4+0x15a>
  40f968:	45a4      	cmp	ip, r4
  40f96a:	f200 80b8 	bhi.w	40fade <__udivmoddi4+0x2ca>
  40f96e:	4618      	mov	r0, r3
  40f970:	eba4 040c 	sub.w	r4, r4, ip
  40f974:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40f978:	e79d      	b.n	40f8b6 <__udivmoddi4+0xa2>
  40f97a:	4631      	mov	r1, r6
  40f97c:	4630      	mov	r0, r6
  40f97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40f982:	f1ce 0420 	rsb	r4, lr, #32
  40f986:	fa05 f30e 	lsl.w	r3, r5, lr
  40f98a:	fa07 f70e 	lsl.w	r7, r7, lr
  40f98e:	fa20 f804 	lsr.w	r8, r0, r4
  40f992:	0c3a      	lsrs	r2, r7, #16
  40f994:	fa25 f404 	lsr.w	r4, r5, r4
  40f998:	ea48 0803 	orr.w	r8, r8, r3
  40f99c:	fbb4 f1f2 	udiv	r1, r4, r2
  40f9a0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40f9a4:	fb02 4411 	mls	r4, r2, r1, r4
  40f9a8:	fa1f fc87 	uxth.w	ip, r7
  40f9ac:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  40f9b0:	fb01 f30c 	mul.w	r3, r1, ip
  40f9b4:	42ab      	cmp	r3, r5
  40f9b6:	fa00 f40e 	lsl.w	r4, r0, lr
  40f9ba:	d909      	bls.n	40f9d0 <__udivmoddi4+0x1bc>
  40f9bc:	19ed      	adds	r5, r5, r7
  40f9be:	f101 30ff 	add.w	r0, r1, #4294967295
  40f9c2:	f080 808a 	bcs.w	40fada <__udivmoddi4+0x2c6>
  40f9c6:	42ab      	cmp	r3, r5
  40f9c8:	f240 8087 	bls.w	40fada <__udivmoddi4+0x2c6>
  40f9cc:	3902      	subs	r1, #2
  40f9ce:	443d      	add	r5, r7
  40f9d0:	1aeb      	subs	r3, r5, r3
  40f9d2:	fa1f f588 	uxth.w	r5, r8
  40f9d6:	fbb3 f0f2 	udiv	r0, r3, r2
  40f9da:	fb02 3310 	mls	r3, r2, r0, r3
  40f9de:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40f9e2:	fb00 f30c 	mul.w	r3, r0, ip
  40f9e6:	42ab      	cmp	r3, r5
  40f9e8:	d907      	bls.n	40f9fa <__udivmoddi4+0x1e6>
  40f9ea:	19ed      	adds	r5, r5, r7
  40f9ec:	f100 38ff 	add.w	r8, r0, #4294967295
  40f9f0:	d26f      	bcs.n	40fad2 <__udivmoddi4+0x2be>
  40f9f2:	42ab      	cmp	r3, r5
  40f9f4:	d96d      	bls.n	40fad2 <__udivmoddi4+0x2be>
  40f9f6:	3802      	subs	r0, #2
  40f9f8:	443d      	add	r5, r7
  40f9fa:	1aeb      	subs	r3, r5, r3
  40f9fc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40fa00:	e78f      	b.n	40f922 <__udivmoddi4+0x10e>
  40fa02:	f1c1 0720 	rsb	r7, r1, #32
  40fa06:	fa22 f807 	lsr.w	r8, r2, r7
  40fa0a:	408b      	lsls	r3, r1
  40fa0c:	fa05 f401 	lsl.w	r4, r5, r1
  40fa10:	ea48 0303 	orr.w	r3, r8, r3
  40fa14:	fa20 fe07 	lsr.w	lr, r0, r7
  40fa18:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40fa1c:	40fd      	lsrs	r5, r7
  40fa1e:	ea4e 0e04 	orr.w	lr, lr, r4
  40fa22:	fbb5 f9fc 	udiv	r9, r5, ip
  40fa26:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40fa2a:	fb0c 5519 	mls	r5, ip, r9, r5
  40fa2e:	fa1f f883 	uxth.w	r8, r3
  40fa32:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40fa36:	fb09 f408 	mul.w	r4, r9, r8
  40fa3a:	42ac      	cmp	r4, r5
  40fa3c:	fa02 f201 	lsl.w	r2, r2, r1
  40fa40:	fa00 fa01 	lsl.w	sl, r0, r1
  40fa44:	d908      	bls.n	40fa58 <__udivmoddi4+0x244>
  40fa46:	18ed      	adds	r5, r5, r3
  40fa48:	f109 30ff 	add.w	r0, r9, #4294967295
  40fa4c:	d243      	bcs.n	40fad6 <__udivmoddi4+0x2c2>
  40fa4e:	42ac      	cmp	r4, r5
  40fa50:	d941      	bls.n	40fad6 <__udivmoddi4+0x2c2>
  40fa52:	f1a9 0902 	sub.w	r9, r9, #2
  40fa56:	441d      	add	r5, r3
  40fa58:	1b2d      	subs	r5, r5, r4
  40fa5a:	fa1f fe8e 	uxth.w	lr, lr
  40fa5e:	fbb5 f0fc 	udiv	r0, r5, ip
  40fa62:	fb0c 5510 	mls	r5, ip, r0, r5
  40fa66:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40fa6a:	fb00 f808 	mul.w	r8, r0, r8
  40fa6e:	45a0      	cmp	r8, r4
  40fa70:	d907      	bls.n	40fa82 <__udivmoddi4+0x26e>
  40fa72:	18e4      	adds	r4, r4, r3
  40fa74:	f100 35ff 	add.w	r5, r0, #4294967295
  40fa78:	d229      	bcs.n	40face <__udivmoddi4+0x2ba>
  40fa7a:	45a0      	cmp	r8, r4
  40fa7c:	d927      	bls.n	40face <__udivmoddi4+0x2ba>
  40fa7e:	3802      	subs	r0, #2
  40fa80:	441c      	add	r4, r3
  40fa82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40fa86:	eba4 0408 	sub.w	r4, r4, r8
  40fa8a:	fba0 8902 	umull	r8, r9, r0, r2
  40fa8e:	454c      	cmp	r4, r9
  40fa90:	46c6      	mov	lr, r8
  40fa92:	464d      	mov	r5, r9
  40fa94:	d315      	bcc.n	40fac2 <__udivmoddi4+0x2ae>
  40fa96:	d012      	beq.n	40fabe <__udivmoddi4+0x2aa>
  40fa98:	b156      	cbz	r6, 40fab0 <__udivmoddi4+0x29c>
  40fa9a:	ebba 030e 	subs.w	r3, sl, lr
  40fa9e:	eb64 0405 	sbc.w	r4, r4, r5
  40faa2:	fa04 f707 	lsl.w	r7, r4, r7
  40faa6:	40cb      	lsrs	r3, r1
  40faa8:	431f      	orrs	r7, r3
  40faaa:	40cc      	lsrs	r4, r1
  40faac:	6037      	str	r7, [r6, #0]
  40faae:	6074      	str	r4, [r6, #4]
  40fab0:	2100      	movs	r1, #0
  40fab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40fab6:	4618      	mov	r0, r3
  40fab8:	e6f8      	b.n	40f8ac <__udivmoddi4+0x98>
  40faba:	4690      	mov	r8, r2
  40fabc:	e6e0      	b.n	40f880 <__udivmoddi4+0x6c>
  40fabe:	45c2      	cmp	sl, r8
  40fac0:	d2ea      	bcs.n	40fa98 <__udivmoddi4+0x284>
  40fac2:	ebb8 0e02 	subs.w	lr, r8, r2
  40fac6:	eb69 0503 	sbc.w	r5, r9, r3
  40faca:	3801      	subs	r0, #1
  40facc:	e7e4      	b.n	40fa98 <__udivmoddi4+0x284>
  40face:	4628      	mov	r0, r5
  40fad0:	e7d7      	b.n	40fa82 <__udivmoddi4+0x26e>
  40fad2:	4640      	mov	r0, r8
  40fad4:	e791      	b.n	40f9fa <__udivmoddi4+0x1e6>
  40fad6:	4681      	mov	r9, r0
  40fad8:	e7be      	b.n	40fa58 <__udivmoddi4+0x244>
  40fada:	4601      	mov	r1, r0
  40fadc:	e778      	b.n	40f9d0 <__udivmoddi4+0x1bc>
  40fade:	3802      	subs	r0, #2
  40fae0:	443c      	add	r4, r7
  40fae2:	e745      	b.n	40f970 <__udivmoddi4+0x15c>
  40fae4:	4608      	mov	r0, r1
  40fae6:	e708      	b.n	40f8fa <__udivmoddi4+0xe6>
  40fae8:	f1a8 0802 	sub.w	r8, r8, #2
  40faec:	443d      	add	r5, r7
  40faee:	e72b      	b.n	40f948 <__udivmoddi4+0x134>

0040faf0 <__aeabi_idiv0>:
  40faf0:	4770      	bx	lr
  40faf2:	bf00      	nop

0040faf4 <ip_addr_any>:
  40faf4:	0000 0000                                   ....

0040faf8 <ip_addr_broadcast>:
  40faf8:	ffff ffff                                   ....

0040fafc <memp_sizes>:
  40fafc:	0020 0098 001c 0010 0020 0010 0010 0610      ....... .......

0040fb0c <memp_num>:
  40fb0c:	0001 0002 0001 0008 0002 0005 0002 0004     ................

0040fb1c <tcp_backoff>:
  40fb1c:	0201 0403 0605 0707 0707 0707 0007 0000     ................

0040fb2c <tcp_persist_backoff>:
  40fb2c:	0603 180c 6030 0078                         ....0`x.

0040fb34 <tcp_pcb_lists>:
  40fb34:	49a8 2040 49b0 2040 49a0 2040 49b4 2040     .I@ .I@ .I@ .I@ 

0040fb44 <ethbroadcast>:
  40fb44:	ffff ffff ffff 0000                         ........

0040fb4c <ethzero>:
	...
  40fb54:	6548 6c6c 216f 0000 630a 696c 6e65 5f74     Hello!...client_
  40fb64:	6573 746e 2928 203a 754e 626d 7265 6f20     sent(): Number o
  40fb74:	2066 7962 6574 2073 4341 274b 6465 6920     f bytes ACK'ed i
  40fb84:	2073 6425 0000 0000 730a 7265 6576 5f72     s %d.....server_
  40fb94:	6c63 736f 2865 3a29 4320 6f6c 6973 676e     close(): Closing
  40fba4:	2e2e 0a2e 0000 0000                         ........

0040fbac <_global_impure_ptr>:
  40fbac:	0070 2040 3130 3332 3534 3736 3938 4241     p.@ 0123456789AB
  40fbbc:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  40fbcc:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  40fbdc:	296c 0000                                   l)..

0040fbe0 <blanks.7217>:
  40fbe0:	2020 2020 2020 2020 2020 2020 2020 2020                     

0040fbf0 <zeroes.7218>:
  40fbf0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  40fc00:	0043 0000 4f50 4953 0058 0000 002e 0000     C...POSIX.......

0040fc10 <_ctype_>:
  40fc10:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40fc20:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40fc30:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40fc40:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40fc50:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40fc60:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40fc70:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40fc80:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40fc90:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0040fd14 <_init>:
  40fd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fd16:	bf00      	nop
  40fd18:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fd1a:	bc08      	pop	{r3}
  40fd1c:	469e      	mov	lr, r3
  40fd1e:	4770      	bx	lr

0040fd20 <__init_array_start>:
  40fd20:	0040deb9 	.word	0x0040deb9

0040fd24 <__frame_dummy_init_array_entry>:
  40fd24:	0040018d                                ..@.

0040fd28 <_fini>:
  40fd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40fd2a:	bf00      	nop
  40fd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40fd2e:	bc08      	pop	{r3}
  40fd30:	469e      	mov	lr, r3
  40fd32:	4770      	bx	lr

0040fd34 <__fini_array_start>:
  40fd34:	00400169 	.word	0x00400169
